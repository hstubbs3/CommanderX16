; 	080D
jmp start ; 	3 bytes 
;	0810 	- 240 bytes available for stuff that doesn't need alignment 
.repeat 28
	.byte $DE,$AD,$BE,$EF
.endrepeat
SCRATCH128:
.repeat 32
	.byte $DE,$AD,$BE,$EF
.endrepeat

ACROSS_ROW_X_L: ; 0900  16 wide , 45* tilt ... this is added to go up row, sub for down row
;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F  
.byte

ACROSS_ROW_X_H: ; 0A00
;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F  
.byte $10, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $E, $E, $E, $E, $E, $E, $D, $D, $D, $D, $D, $C, $C, $C, $C, $B, $B, $B, $B, $A, $A, $A, $9, $9, $9, $8, $8, $8, $7, $7, $7, $6, $6, $6, $5, $5, $5, $4, $4, $3, $3, $3, $2, $2, $1, $1, $1, $0, $0, $0, $FF, $FF, $FE, $FE, $FE, $FD, $FD, $FC, $FC, $FC, $FB, $FB, $FA, $FA, $FA, $F9, $F9, $F9, $F8, $F8, $F8, $F7, $F7, $F7, $F6, $F6, $F6, $F5, $F5, $F5, $F4, $F4, $F4, $F4, $F3, $F3, $F3, $F3, $F2, $F2, $F2, $F2, $F2, $F1, $F1, $F1, $F1, $F1, $F1, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F1, $F1, $F1, $F1, $F1, $F1, $F2, $F2, $F2, $F2, $F2, $F3, $F3, $F3, $F3, $F4, $F4, $F4, $F4, $F5, $F5, $F5, $F6, $F6, $F6, $F7, $F7, $F7, $F8, $F8, $F8, $F9, $F9, $F9, $FA, $FA, $FA, $FB, $FB, $FC, $FC, $FC, $FD, $FD, $FE, $FE, $FE, $FF, $FF, $00, $0, $0, $1, $1, $1, $2, $2, $3, $3, $3, $4, $4, $5, $5, $5, $6, $6, $6, $7, $7, $7, $8, $8, $8, $9, $9, $9, $A, $A, $A, $B, $B, $B, $B, $C, $C, $C, $C, $D, $D, $D, $D, $D, $E, $E, $E, $E, $E, $E, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F

ACROSS_ROW_Y_L: ; 0B00
;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F  
.byte $0,$B8,$71,$2A,$E4,$9D,$57,$10,$CA,$85,$40,$FB,$B7,$73,$30,$ED,$AB,$6A,$29,$E9,$AA,$6C,$2E,$F2,$B6,$7C,$42,$A,$D2,$9C,$66,$32,$0,$CE,$9D,$6E,$41,$14,$E9,$C0,$97,$71,$4B,$27,$5,$E4,$C5,$A8,$8C,$71,$58,$41,$2C,$18,$6,$F6,$E7,$DA,$CF,$C5,$BD,$B7,$B3,$B0,$AF,$B0,$B3,$B7,$BD,$C5,$CF,$DA,$E7,$F6,$6,$18,$2C,$41,$58,$71,$8C,$A8,$C5,$E4,$5,$27,$4B,$71,$97,$C0,$E9,$14,$41,$6E,$9D,$CE,$0,$32,$66,$9C,$D2,$A,$42,$7C,$B6,$F2,$2E,$6C,$AA,$E9,$29,$6A,$AB,$ED,$30,$73,$B7,$FB,$40,$85,$CA,$10,$57,$9D,$E4,$2A,$71,$B8,$0,$47,$8E,$D5,$1B,$62,$A8,$EF,$35,$7A,$BF,$4,$48,$8C,$CF,$12,$54,$95,$D6,$16,$55,$93,$D1,$D,$49,$83,$BD,$F5,$2D,$63,$99,$CD,$0,$31,$62,$91,$BE,$EB,$16,$3F,$68,$8E,$B4,$D8,$FA,$1B,$3A,$57,$73,$8E,$A7,$BE,$D3,$E7,$F9,$9,$18,$25,$30,$3A,$42,$48,$4C,$4F,$50,$4F,$4C,$48,$42,$3A,$30,$25,$18,$9,$F9,$E7,$D3,$BE,$A7,$8E,$73,$57,$3A,$1B,$FA,$D8,$B4,$8E,$68,$3F,$16,$EB,$BE,$91,$62,$31,$0,$CD,$99,$63,$2D,$F5,$BD,$83,$49,$D,$D1,$93,$55,$16,$D6,$95,$54,$12,$CF,$8C,$48,$4,$BF,$7A,$35,$EF,$A8,$62,$1B,$D5,$8E,$47

ACROSS_ROW_Y_H: ; 0C00 
;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F  
.byte $0,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F9,$F8,$F8,$F8,$F8,$F8,$F7,$F7,$F7,$F7,$F7,$F6,$F6,$F6,$F6,$F6,$F6,$F6,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F6,$F6,$F6,$F6,$F6,$F6,$F6,$F7,$F7,$F7,$F7,$F7,$F8,$F8,$F8,$F8,$F8,$F9,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$00,$0,$0,$0,$1,$1,$1,$1,$2,$2,$2,$3,$3,$3,$3,$4,$4,$4,$4,$5,$5,$5,$5,$6,$6,$6,$6,$6,$7,$7,$7,$7,$8,$8,$8,$8,$8,$8,$9,$9,$9,$9,$9,$9,$9,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$9,$9,$9,$9,$9,$9,$9,$8,$8,$8,$8,$8,$8,$7,$7,$7,$7,$6,$6,$6,$6,$6,$5,$5,$5,$5,$4,$4,$4,$4,$3,$3,$3,$3,$2,$2,$2,$1,$1,$1,$1,$0,$0,$0

NEXT_ROW_X_L: ; 0D00 next row LEFT/up when added
.byte

NEXT_ROW_X_H: ; 0E00
.byte

NEXT_ROW_Y_L: ; 0F00
.byte $33,$58,$7D,$A5,$CD,$F7,$23,$50,$7E,$AD,$DE,$10,$44,$78,$AE,$E4,$1C,$55,$8F,$CA,$6,$43,$81,$BF,$FE,$3F,$7F,$C1,$3,$46,$8A,$CD,$12,$57,$9C,$E2,$28,$6E,$B4,$FB,$42,$89,$D0,$17,$5E,$A5,$EC,$33,$7A,$C0,$6,$4C,$91,$D6,$1B,$5F,$A2,$E6,$28,$6A,$AB,$EB,$2B,$6A,$A8,$E5,$21,$5C,$97,$D0,$8,$3F,$75,$AA,$DE,$10,$41,$71,$A0,$CD,$F9,$24,$4D,$75,$9B,$C0,$E3,$5,$25,$44,$61,$7C,$96,$AE,$C5,$DA,$ED,$FF,$F,$1D,$29,$34,$3D,$44,$4A,$4D,$4F,$50,$4E,$4B,$46,$3F,$37,$2D,$21,$13,$4,$F3,$E0,$CC,$B6,$9E,$85,$6A,$4E,$30,$10,$EF,$CC,$A7,$82,$5A,$32,$8,$DC,$AF,$81,$52,$21,$EF,$BB,$87,$51,$1B,$E3,$AA,$70,$35,$F9,$BC,$7E,$40,$1,$C0,$80,$3E,$FC,$B9,$75,$32,$ED,$A8,$63,$1D,$D7,$91,$4B,$4,$BD,$76,$2F,$E8,$A1,$5A,$13,$CC,$85,$3F,$F9,$B3,$6E,$29,$E4,$A0,$5D,$19,$D7,$95,$54,$14,$D4,$95,$57,$1A,$DE,$A3,$68,$2F,$F7,$C0,$8A,$55,$21,$EF,$BE,$8E,$5F,$32,$6,$DB,$B2,$8A,$64,$3F,$1C,$FA,$DA,$BB,$9E,$83,$69,$51,$3A,$25,$12,$0,$F0,$E2,$D6,$CB,$C2,$BB,$B5,$B2,$B0,$AF,$B1,$B4,$B9,$C0,$C8,$D2,$DE,$EC,$FB,$C,$1F,$33,$49,$61,$7A,$95,$B1,$CF,$EF,$10

NEXT_ROW_Y_H: ; 1000
.byte $F6,$F6,$F6,$F6,$F6,$F6,$F7,$F7,$F7,$F7,$F7,$F8,$F8,$F8,$F8,$F8,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$0,$0,$0,$0,$1,$1,$1,$2,$2,$2,$2,$3,$3,$3,$3,$4,$4,$4,$4,$5,$5,$5,$5,$6,$6,$6,$6,$7,$7,$7,$7,$7,$8,$8,$8,$8,$8,$8,$9,$9,$9,$9,$9,$9,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$9,$9,$9,$9,$9,$9,$9,$8,$8,$8,$8,$8,$7,$7,$7,$7,$7,$6,$6,$6,$6,$5,$5,$5,$5,$5,$4,$4,$4,$3,$3,$3,$3,$2,$2,$2,$2,$1,$1,$1,$1,$0,$0,$0,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F8,$F8,$F8,$F8,$F8,$F7,$F7,$F7,$F7,$F7,$F7,$F6,$F6,$F6,$F6,$F6,$F6,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F6

WORLD_TO_CELL_XH: ; 1100
.byte 0,0,1,2,3,4,5,6,6,7,8,9,10,11,12,12,13,14,15,16,17,18,19,19,20,21,22,23,24,25,25,26,27,28,29,30,31,32,32,33,34,35,36,37,38,38,39,40,41,42,43,44,45,45,46,47,48,49,50,51,51,52,53,54,55,56,57,58,58,59,60,61,62,63,64,64,65,66,67,68,69,70,71,71,72,73,74,75,76,77,77,78,79,80,81,82,83,84,84,85,86,87,88,89,90,90,91,92,93,94,95,96,96,97,98,99,100,101,102,103,103,104,105,106,107,108,109,109,110,111,112,113,114,115,116,116,117,118,119,120,121,122,122,123,124,125,126,127,128,129,129,130,131,132,133,134,135,135,136,137,138,139,140,141,142,142,143,144,145,146,147,148,148,149,150,151,152,153,154,155,155,156,157,158,159,160,161,161,162,163,164,165,166,167,168,168,169,170,171,172,173,174,174,175,176,177,178,179,180,180,181,182,183,184,185,186,187,187,188,189,190,191,192,193,193,194,195,196,197,198,199,200,200,201,202,203,204,205,206,206,207,208,209,210,211,212,213,213,214,215,216,217,218,219,219,220
WORLD_TO_CELL_XL: ; 1200
.byte 0,221,187,153,118,84,50,15,237,203,169,134,100,66,31,253,219,184,150,116,82,47,13,235,200,166,132,97,63,29,251,216,182,148,113,79,45,10,232,198,164,129,95,61,26,248,214,180,145,111,77,42,8,230,195,161,127,93,58,24,246,211,177,143,108,74,40,6,227,193,159,124,90,56,21,243,209,175,140,106,72,37,3,225,191,156,122,88,53,19,241,206,172,138,104,69,35,1,222,188,154,119,85,51,17,238,204,170,135,101,67,32,254,220,186,151,117,83,48,14,236,202,167,133,99,64,30,252,217,183,149,115,80,46,12,233,199,165,130,96,62,28,249,215,181,146,112,78,43,9,231,197,162,128,94,59,25,247,212,178,144,110,75,41,7,228,194,160,126,91,57,23,244,210,176,141,107,73,39,4,226,192,157,123,89,54,20,242,208,173,139,105,70,36,2,223,189,155,121,86,52,18,239,205,171,137,102,68,34,255,221,187,152,118,84,50,15,237,203,168,134,100,65,31,253,219,184,150,116,81,47,13,234,200,166,132,97,63,29,250,216,182,148,113,79,45,10,232,198,163,129,95,61,26,248,214
CELL_TO_WORLD_XH: ; 1300 ; 128 bytes
.byte 0,1,2,3,4,5,6,8,9,10,11,12,13,15,16,17,18,19,20,21,23,24,25,26,27,28,30,31,32,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,50,51,53,54,55,56,57,58,60,61,62,63,64,65,66,68,69,70,71,72,73,75,76,77,78,79,80,81,83,84,85,86,87,88,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,112,113,114,115,116,117,118,120,121,122,123,124,125,127,128,129,130,131,132,133,135,136,137,138,139,140,142,143,144,145,146
CELL_TO_WORLD_XL: ; 1380 ; 128 bytes
.byte 0,39,79,118,158,198,237,21,60,100,140,179,219,2,42,82,121,161,200,240,24,63,103,142,182,222,5,45,84,124,164,203,243,26,66,106,145,185,224,8,48,87,127,166,206,246,29,69,108,148,188,227,11,50,90,130,169,209,248,32,72,111,151,191,230,14,53,93,133,172,212,251,35,75,114,154,193,233,17,56,96,135,175,215,254,38,77,117,157,196,236,19,59,99,138,178,217,1,41,80,120,159,199,239,22,62,101,141,181,220,4,43,83,123,162,202,241,25,65,104,144,184,223,7,46,86,126,165

CELL_LOW_TO_WORLD_XH: ; 1400
.byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
CELL_LOW_TO_WORLD_XL: ; 1500
.byte 0,1,2,3,4,5,6,8,9,10,11,12,13,15,16,17,18,19,20,21,23,24,25,26,27,28,30,31,32,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,50,51,53,54,55,56,57,58,60,61,62,63,64,65,66,68,69,70,71,72,73,75,76,77,78,79,80,81,83,84,85,86,87,88,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,112,113,114,115,116,117,118,120,121,122,123,124,125,127,128,129,130,131,132,133,135,136,137,138,139,140,142,143,144,145,146,147,148,150,151,152,153,154,155,157,158,159,160,161,162,163,165,166,167,168,169,170,172,173,174,175,176,177,178,180,181,182,183,184,185,187,188,189,190,191,192,193,195,196,197,198,199,200,202,203,204,205,206,207,209,210,211,212,213,214,215,217,218,219,220,221,222,224,225,226,227,228,229,230,232,233,234,235,236,237,239,240,241,242,243,244,245,247,248,249,250,251,252,254,255,0,1,2,3,4,6,7,8,9,10,11,13,14,15,16,17,18,19,21,22,23,24,25,26,28,29,30,31,32,33,34,36,37,38

SPRITE_NUM_HIGH_NIBBLE: ; 1600
.res 16, 0
.res 16, 1
.res 16, 2
.res 16, 3
.res 16, 4
.res 16, 5
.res 16, 6
.res 16, 7
.res 16, 8
.res 16, 9
.res 16, 10
.res 16, 11
.res 16, 12
.res 16, 13
.res 16, 14
.res 16, 15

SPRITE_NUM_LOW_NIBBLE: ; 1700
.byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
.byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
.byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
.byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
.byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
.byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
.byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
.byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
.byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
.byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
.byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
.byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
.byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
.byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
.byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
.byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15

LOW_NIBBLE_TO_HEX: ; 1800
.repeat 16
;      0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
.byte  48, 49, 50, 51, 52, 53, 54, 55, 56, 57,  1,  2,  3,  4,  5,  6
.endrepeat

HIGH_NIBBLE_TO_HEX: ; 1900
.res 16,48
.res 16,49
.res 16,50
.res 16,51
.res 16,52
.res 16,53
.res 16,54
.res 16,55
.res 16,56
.res 16,57
.res 16,1
.res 16,2
.res 16,3
.res 16,4
.res 16,5
.res 16,6
CONVERT_HEIGHTS_PIXELS: ; 1A00
.byte 0,0,1,1,2,3,3,4,4,5,6,6,7,7,8,9,9,10,11,11,12,12,13,14,14,15,15,16,17,17,18,18,19,20,20,21,22,22,23,23,24,25,25,26,26,27,28,28,29,30,30,31,31,32,33,33,34,34,35,36,36,37,37,38,39,39,40,41,41,42,42,43,44,44,45,45,46,47,47,48,48,49,50,50,51,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52;,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52
.res 128,0
CONVERT_HEIGHTS_PIXELS_L: ; 1B00
;.res 256,0
.byte 0,156,57,214,115,15,172,73,230,130,31,188,89,245,146,47,204,105,5,162,63,220,120,21,178,79,235,136,37,194,95,251,152,53,210,110,11,168,69,225,126,27,184,84,241,142,43,200,100,1,158,59,215,116,17,174,74,231,132,33,190,90,247,148,49,205,106,7,164,64,221,122,23,180,80,237,138,39,195,96,253,154,54,211,112,0,169,70,227,128,29,185,86,243,144,44,201,102,3,159,60,217,118,19,175,76,233,134,34,191,92,249,149,50,207,108,9,165,66,223,124,24,181,82,239,139,40,197,98,254,155,56,213,114,14,171,72,229,129,30,187,88,244,145,46,203,104,4,161,62,219,119,20,177,78,234,135,36,193,94,250,151,52,209,109,10,167,68,224,125,26,183,83,240,141,42,199,99,0,157,58,214,115,16,173,73,230,131,32,189,89,246,147,48,204,105,6,163,63,220,121,22,179,79,236,137,38,194,95,252,153,53,210,111,12,168,69,226,127,28,184,85,242,143,43,200,101,2,158,59,216,117,18,174,75,232,133,33,190,91,248,148,49,206,107,7,164,65,222,123,23,180,81,238,138,39
MOVE_Y_H: ; 1C00
.byte
MOVE_Y_L: ; 1D00
.byte $8,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$6,$6,$6,$6,$6,$6,$6,$6,$6,$5,$5,$5,$5,$5,$5,$5,$4,$4,$4,$4,$4,$4,$3,$3,$3,$3,$3,$3,$2,$2,$2,$2,$2,$1,$1,$1,$1,$1,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF,$FF,$0,$0,$0,$0,$0,$0,$1,$1,$1,$1,$1,$2,$2,$2,$2,$2,$3,$3,$3,$3,$3,$3,$4,$4,$4,$4,$4,$4,$5,$5,$5,$5,$5,$5,$5,$6,$6,$6,$6,$6,$6,$6,$6,$6,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7
MOVE_X_H: ; 1E00
.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
MOVE_X_L: ; 1F00
.byte $0,$0,$0,$0,$0,$0,$1,$1,$1,$1,$1,$1,$2,$2,$2,$2,$2,$2,$2,$3,$3,$3,$3,$3,$3,$3,$4,$4,$4,$4,$4,$4,$4,$5,$5,$5,$5,$5,$5,$5,$5,$5,$5,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$5,$5,$5,$5,$5,$5,$5,$5,$5,$5,$4,$4,$4,$4,$4,$4,$4,$3,$3,$3,$3,$3,$3,$3,$2,$2,$2,$2,$2,$2,$2,$1,$1,$1,$1,$1,$1,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FB,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF,$FF


TUB_WORLD: ; 32*64 = 2K ... is 2000 to 2800-1
.include "tub_world_hieghts_01.inc"

TUB_WORLD_LOW: ; 2800 to 3000-1
.res 2048,0

WATER_CALC_SCRATCH: ; 3000 to 3800-1
.res 2048,0

WATER_CALC_SCRATCH_LOW: ; 3800 to 4000-1
.res 2048,0

;3000







SCREEN_Y_TO_Z: ; 3100 this is shifted to be within range so that 192 =0 and -16 is 255
.byte 235,234,232,231,230,229,227,226,225,224,223,221,220,219,218,216,215,214,213,211,210,209,208,207,205,204,203,202,200,199,198,197,195,194,193,192,191,189,188,187,186,184,183,182,181,179,178,177,176,175,173,172,171,170,168,167,166,165,163,162,161,160,159,157,156,155,154,152,151,150,149,147,146,145,144,143,141,140,139,138,136,135,134,133,131,130,129,128,127,125,124,123,122,120,119,118,117,115,114,113,112,111,109,108,107,106,104,103,102,101,99,98,97,96,95,93,92,91,90,88,87,86,85,83,82,81,80,79,77,76,75,74,72,71,70,69,67,66,65,64,63,61,60,59,58,56,55,54,53,51,50,49,48,47,45,44,43,42,40,39,38,37,35,34,33,32,31,29,28,27,26,24,23,22,21,19,18,17,16,15,13,12,11,10,8,7,6,5,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,253,252,251,250,248,247,246,245,243,242,241,240,239,237,236
SUBCELL_X_COS_L: ; 3200
.byte $0,$FF,$FF,$FF,$FE,$FE,$FD,$FC,$FB,$F9,$F8,$F6,$F4,$F3,$F1,$EE,$EC,$EA,$E7,$E4,$E1,$DE,$DB,$D8,$D4,$D1,$CD,$C9,$C5,$C1,$BD,$B9,$B5,$B0,$AB,$A7,$A2,$9D,$98,$93,$8E,$88,$83,$7E,$78,$73,$6D,$67,$61,$5C,$56,$50,$4A,$44,$3E,$38,$31,$2B,$25,$1F,$19,$12,$C,$6,$0,$F9,$F3,$ED,$E6,$E0,$DA,$D4,$CE,$C7,$C1,$BB,$B5,$AF,$A9,$A3,$9E,$98,$92,$8C,$87,$81,$7C,$77,$71,$6C,$67,$62,$5D,$58,$54,$4F,$4A,$46,$42,$3E,$3A,$36,$32,$2E,$2B,$27,$24,$21,$1E,$1B,$18,$15,$13,$11,$E,$C,$B,$9,$7,$6,$4,$3,$2,$1,$1,$0,$0,$0,$0,$0,$0,$0,$1,$1,$2,$3,$4,$6,$7,$9,$B,$C,$E,$11,$13,$15,$18,$1B,$1E,$21,$24,$27,$2B,$2E,$32,$36,$3A,$3E,$42,$46,$4A,$4F,$54,$58,$5D,$62,$67,$6C,$71,$77,$7C,$81,$87,$8C,$92,$98,$9E,$A3,$A9,$AF,$B5,$BB,$C1,$C7,$CE,$D4,$DA,$E0,$E6,$ED,$F3,$F9,$0,$6,$C,$12,$19,$1F,$25,$2B,$31,$38,$3E,$44,$4A,$50,$56,$5C,$61,$67,$6D,$73,$78,$7E,$83,$88,$8E,$93,$98,$9D,$A2,$A7,$AB,$B0,$B5,$B9,$BD,$C1,$C5,$C9,$CD,$D1,$D4,$D8,$DB,$DE,$E1,$E4,$E7,$EA,$EC,$EE,$F1,$F3,$F4,$F6,$F8,$F9,$FB,$FC,$FD,$FE,$FE,$FF,$FF,$FF
SUBCELL_X_COS_H: ; 3300
.byte
SUBCELL_X_SIN_H: ; 3400
.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
SUBCELL_X_SIN_L: ; 3500
.byte $0,$5,$A,$10,$15,$1B,$20,$25,$2B,$30,$35,$3B,$40,$45,$4A,$4F,$54,$59,$5E,$63,$68,$6D,$71,$76,$7B,$7F,$84,$88,$8C,$90,$94,$98,$9C,$A0,$A4,$A7,$AB,$AE,$B2,$B5,$B8,$BB,$BE,$C0,$C3,$C6,$C8,$CA,$CC,$CE,$D0,$D2,$D4,$D5,$D7,$D8,$D9,$DA,$DB,$DC,$DC,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DC,$DC,$DB,$DA,$D9,$D8,$D7,$D5,$D4,$D2,$D0,$CE,$CC,$CA,$C8,$C6,$C3,$C0,$BE,$BB,$B8,$B5,$B2,$AE,$AB,$A7,$A4,$A0,$9C,$98,$94,$90,$8C,$88,$84,$7F,$7B,$76,$71,$6D,$68,$63,$5E,$59,$54,$4F,$4A,$45,$40,$3B,$35,$30,$2B,$25,$20,$1B,$15,$10,$A,$5,$0,$FA,$F5,$EF,$EA,$E4,$DF,$DA,$D4,$CF,$CA,$C4,$BF,$BA,$B5,$B0,$AB,$A6,$A1,$9C,$97,$92,$8E,$89,$84,$80,$7B,$77,$73,$6F,$6B,$67,$63,$5F,$5B,$58,$54,$51,$4D,$4A,$47,$44,$41,$3F,$3C,$39,$37,$35,$33,$31,$2F,$2D,$2B,$2A,$28,$27,$26,$25,$24,$23,$23,$22,$22,$22,$22,$22,$22,$22,$23,$23,$24,$25,$26,$27,$28,$2A,$2B,$2D,$2F,$31,$33,$35,$37,$39,$3C,$3F,$41,$44,$47,$4A,$4D,$51,$54,$58,$5B,$5F,$63,$67,$6B,$6F,$73,$77,$7B,$80,$84,$89,$8E,$92,$97,$9C,$A1,$A6,$AB,$B0,$B5,$BA,$BF,$C4,$CA,$CF,$D4,$DA,$DF,$E4,$EA,$EF,$F5,$FA
SUBCELL_Y_COS_H: ; 3600
.byte
SUBCELL_Y_COS_L: ; 3700
.byte $9C,$9C,$9C,$9C,$9C,$9B,$9B,$9A,$99,$98,$98,$97,$96,$94,$93,$92,$90,$8F,$8D,$8C,$8A,$88,$86,$84,$82,$80,$7D,$7B,$79,$76,$74,$71,$6E,$6C,$69,$66,$63,$60,$5D,$5A,$57,$53,$50,$4D,$49,$46,$43,$3F,$3B,$38,$34,$31,$2D,$29,$26,$22,$1E,$1A,$17,$13,$F,$B,$7,$3,$0,$FC,$F8,$F4,$F0,$EC,$E8,$E5,$E1,$DD,$D9,$D6,$D2,$CE,$CB,$C7,$C4,$C0,$BC,$B9,$B6,$B2,$AF,$AC,$A8,$A5,$A2,$9F,$9C,$99,$96,$93,$91,$8E,$8B,$89,$86,$84,$82,$7F,$7D,$7B,$79,$77,$75,$73,$72,$70,$6F,$6D,$6C,$6B,$69,$68,$67,$67,$66,$65,$64,$64,$63,$63,$63,$63,$63,$63,$63,$63,$63,$64,$64,$65,$66,$67,$67,$68,$69,$6B,$6C,$6D,$6F,$70,$72,$73,$75,$77,$79,$7B,$7D,$7F,$82,$84,$86,$89,$8B,$8E,$91,$93,$96,$99,$9C,$9F,$A2,$A5,$A8,$AC,$AF,$B2,$B6,$B9,$BC,$C0,$C4,$C7,$CB,$CE,$D2,$D6,$D9,$DD,$E1,$E5,$E8,$EC,$F0,$F4,$F8,$FC,$0,$3,$7,$B,$F,$13,$17,$1A,$1E,$22,$26,$29,$2D,$31,$34,$38,$3B,$3F,$43,$46,$49,$4D,$50,$53,$57,$5A,$5D,$60,$63,$66,$69,$6C,$6E,$71,$74,$76,$79,$7B,$7D,$80,$82,$84,$86,$88,$8A,$8C,$8D,$8F,$90,$92,$93,$94,$96,$97,$98,$98,$99,$9A,$9B,$9B,$9C,$9C,$9C,$9C
SUBCELL_Y_SIN_H: ; 3800
.byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
SUBCELL_Y_SIN_L: ; 3900
.byte $0,$4,$8,$D,$11,$16,$1A,$1E,$23,$27,$2B,$30,$34,$38,$3C,$41,$45,$49,$4D,$51,$55,$59,$5D,$60,$64,$68,$6B,$6F,$72,$76,$79,$7C,$7F,$83,$86,$89,$8B,$8E,$91,$93,$96,$98,$9B,$9D,$9F,$A1,$A3,$A5,$A7,$A8,$AA,$AB,$AD,$AE,$AF,$B0,$B1,$B2,$B3,$B3,$B4,$B4,$B4,$B4,$B5,$B4,$B4,$B4,$B4,$B3,$B3,$B2,$B1,$B0,$AF,$AE,$AD,$AB,$AA,$A8,$A7,$A5,$A3,$A1,$9F,$9D,$9B,$98,$96,$93,$91,$8E,$8B,$89,$86,$83,$80,$7C,$79,$76,$72,$6F,$6B,$68,$64,$60,$5D,$59,$55,$51,$4D,$49,$45,$41,$3C,$38,$34,$30,$2B,$27,$23,$1E,$1A,$16,$11,$D,$8,$4,$0,$FB,$F7,$F2,$EE,$E9,$E5,$E1,$DC,$D8,$D4,$CF,$CB,$C7,$C3,$BE,$BA,$B6,$B2,$AE,$AA,$A6,$A2,$9F,$9B,$97,$94,$90,$8D,$89,$86,$83,$80,$7C,$79,$76,$74,$71,$6E,$6C,$69,$67,$64,$62,$60,$5E,$5C,$5A,$58,$57,$55,$54,$52,$51,$50,$4F,$4E,$4D,$4C,$4C,$4B,$4B,$4B,$4B,$4A,$4B,$4B,$4B,$4B,$4C,$4C,$4D,$4E,$4F,$50,$51,$52,$54,$55,$57,$58,$5A,$5C,$5E,$60,$62,$64,$67,$69,$6C,$6E,$71,$74,$76,$79,$7C,$80,$83,$86,$89,$8D,$90,$94,$97,$9B,$9F,$A2,$A6,$AA,$AE,$B2,$B6,$BA,$BE,$C3,$C7,$CB,$CF,$D4,$D8,$DC,$E1,$E5,$E9,$EE,$F2,$F7,$FB



WORLD_SPRITE_CENTER_XH: ; 3A00 128 bytes
.byte
WORLD_SPRITE_CENTER_XL: ; 3A80 128 bytes
.byte $0,$D,$1B,$29,$36,$43,$51,$5E,$6B,$78,$85,$92,$9F,$AB,$B8,$C4,$D1,$DD,$E9,$F6,$2,$E,$A,$FE,$F2,$E5,$D9,$CD,$C0,$B4,$A7,$9A,$8E,$81,$74,$67,$5A,$4C,$3F,$32,$24,$16,$9,$4,$12,$20,$2D,$3B,$48,$55,$62,$6F,$7C,$89,$96,$A3,$B0,$BC,$C9,$D5,$E1,$EE,$FA,$6,$12,$13,$FA,$EE,$E1,$D5,$C9,$BC,$B0,$A3,$96,$89,$7C,$6F,$62,$55,$48,$3B,$2D,$20,$12,$4,$9,$16,$24,$32,$3F,$4C,$5A,$67,$74,$81,$8E,$9A,$A7,$B4,$C0,$CD,$D9,$E5,$F2,$FE,$A,$E,$2,$F6,$E9,$DD,$D1,$C4,$B8,$AB,$9F,$92,$85,$78,$6B,$5E,$51,$43,$36,$29,$1B,$D
WORLD_SPRITE_CENTER_YH: ; 3B00 128 bytes
.byte $4C,$4C,$4C,$4C,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4C,$4C,$4C,$4C,$4C,$4C,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4C,$4C,$4C,$4C,$4C,$4C,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4C,$4C,$4C
WORLD_SPRITE_CENTER_YL: ; 3B80 128 bytes
.byte $19,$11,$8,$0,$F7,$EE,$E6,$DD,$D4,$CB,$C2,$B9,$B0,$A7,$9D,$94,$8B,$81,$78,$6E,$64,$5B,$5E,$68,$71,$7B,$84,$8E,$97,$A0,$AA,$B3,$BC,$C5,$CE,$D7,$E0,$E8,$F1,$FA,$3,$B,$14,$17,$E,$5,$FD,$F4,$EB,$E3,$DA,$D1,$C8,$BF,$B6,$AD,$A3,$9A,$91,$87,$7E,$74,$6B,$61,$57,$57,$6B,$74,$7E,$87,$91,$9A,$A3,$AD,$B6,$BF,$C8,$D1,$DA,$E3,$EB,$F4,$FD,$5,$E,$17,$14,$B,$3,$FA,$F1,$E8,$E0,$D7,$CE,$C5,$BC,$B3,$AA,$A0,$97,$8E,$84,$7B,$71,$68,$5E,$5B,$64,$6E,$78,$81,$8B,$94,$9D,$A7,$B0,$B9,$C2,$CB,$D4,$DD,$E6,$EE,$F7,$0,$8,$11

WORLD_SPRITE_NUM_lookies: ; 3C00 128 bytes
;      0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
.byte   0,  0,  0,  0, 32, 32, 32, 32, 32, 32, 64, 64, 64, 64, 64, 64
.byte  64, 64, 96, 96,160,160,160, 96, 96, 96, 64, 64, 64, 64, 64, 64
.byte  64, 64, 32, 32, 32, 32, 32, 32,  0,  0,  0,  0,  0,  0, 32, 32
.byte  32, 32, 32, 32, 32, 64, 64, 64, 64, 64, 64, 64, 96, 96, 96,160
.byte 160,160, 96, 96, 96, 64, 64, 64, 64, 64, 64, 64, 32, 32, 32, 32
.byte  32, 32, 32,  0,  0,  0,  0,  0,  0, 32, 32, 32, 32, 32, 32, 64
.byte  64, 64, 64, 64, 64, 64, 64, 96, 96, 96,160,160,160, 96, 96, 64
.byte  64, 64, 64, 64, 64, 64, 64, 32, 32, 32, 32, 32, 32,  0,  0,  0
WORLD_WALL_SPRITE_NUM_lookies: ; 3C80
.byte 128,128,128,128,128,128,128,128,128,128,192,192,192,192,192,192
.byte 192,192,192,192,224,224,224,192,192,192,192,192,192,192,192,192
.byte 192,192,128,128,128,128,128,128,128,128,128,128,128,128,128,128
.byte 128,128,128,128,128,192,192,192,192,192,192,192,192,192,192,224
.byte 224,224,192,192,192,192,192,192,192,192,192,192,128,128,128,128
.byte 128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,192
.byte 192,192,192,192,192,192,192,192,192,192,224,224,224,192,192,192
.byte 192,192,192,192,192,192,192,128,128,128,128,128,128,128,128,128

SPRITE_ADDRESS_LOW_HIGH: ; 3D00
.byte 0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31

SPRITE_ADDRESS_LOW_LOW: ; 3E00
.byte 0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224

NIBBLE_SWAPPER: ; 3F00
;      0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
.byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
.byte $01,$11,$21,$31,$41,$51,$61,$71,$81,$91,$A1,$B1,$C1,$D1,$E1,$F1
.byte $02,$12,$22,$32,$42,$52,$62,$72,$82,$92,$A2,$B2,$C2,$D2,$E2,$F2
.byte $03,$13,$23,$33,$43,$53,$63,$73,$83,$93,$A3,$B3,$C3,$D3,$E3,$F3
.byte $04,$14,$24,$34,$44,$54,$64,$74,$84,$94,$A4,$B4,$C4,$D4,$E4,$F4
.byte $05,$15,$25,$35,$45,$55,$65,$75,$85,$95,$A5,$B5,$C5,$D5,$E5,$F5
.byte $06,$16,$26,$36,$46,$56,$66,$76,$86,$96,$A6,$B6,$C6,$D6,$E6,$F6
.byte $07,$17,$27,$37,$47,$57,$67,$77,$87,$97,$A7,$B7,$C7,$D7,$E7,$F7
.byte $08,$18,$28,$38,$48,$58,$68,$78,$88,$98,$A8,$B8,$C8,$D8,$E8,$F8
.byte $09,$19,$29,$39,$49,$59,$69,$79,$89,$99,$A9,$B9,$C9,$D9,$E9,$F9
.byte $0A,$1A,$2A,$3A,$4A,$5A,$6A,$7A,$8A,$9A,$AA,$BA,$CA,$DA,$EA,$FA
.byte $0B,$1B,$2B,$3B,$4B,$5B,$6B,$7B,$8B,$9B,$AB,$BB,$CB,$DB,$EB,$FB
.byte $0C,$1C,$2C,$3C,$4C,$5C,$6C,$7C,$8C,$9C,$AC,$BC,$CC,$DC,$EC,$FC
.byte $0D,$1D,$2D,$3D,$4D,$5D,$6D,$7D,$8D,$9D,$AD,$BD,$CD,$DD,$ED,$FD
.byte $0E,$1E,$2E,$3E,$4E,$5E,$6E,$7E,$8E,$9E,$AE,$BE,$CE,$DE,$EE,$FE
.byte $0F,$1F,$2F,$3F,$4F,$5F,$6F,$7F,$8F,$9F,$AF,$BF,$CF,$DF,$EF,$FF

LOW_NIBBLE_HIGH: ; 4000
;      0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
.byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
.byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
.byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
.byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
.byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
.byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
.byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
.byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
.byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
.byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
.byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
.byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
.byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
.byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
.byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
.byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0


; 4100

OBJECT_LIST_Z_START_POINTERS: ; 3100
.res 256,0
OBJECT_LIST_BYTE0_ADDRLOW: ; 1A00 addr low
.res 256,0
OBJECT_LIST_BYTE1_MODE: ; 1B00 mode/addr bank
.res 256,0
OBJECT_LIST_BYTE2_X: ; 1C00 X position onscreen ( assumed positive for now)
.res 256,0
OBJECT_LIST_BYTE3_Y: ; 1D00 y position onscreen 
.res 256,0
OBJECT_LIST_BYTE4_ZFLIPS: ; 1E00 collision / z / flips
.res 256,0
OBJECT_LIST_BYTE5_SIZE: ; 1F00 size / pal offset
.res 256,0
OBJECT_LIST_BYTE6_NEXT: ; 2000 NEXT 
.res 256,0

BUFFER_A_OFFSETS_HIGH: ; 128 bytes
.byte 24,24,25,25,26,27,27,28,29,29,30,30,31,32,32,33,34,34,35,35,36,37,37,38,39,39,40,40,41,42,42,43,44,44,45,45,46,47,47,48,49,49,50,50,51,52,52,53,54,54,55,55,56,57,57,58,59,59,60,60,61,62,62,63,64,64,65,65,66,67,67,68,69,69,70,70,71,72,72,73,74,74,75,75,76,77,77,78,79,79,80,80,81,82,82,83,84,84,85,85,86,87,87,88,89,89,90,90,91,92,92,93,94,94,95,95,96,97,97,98,99,99,100,100,101,102,102,103

BITMAP_OFFSETS_LOW: ; 128 bytes
.byte 0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96

BUFFER_B_OFFSETS_HIGH: ; 3080    128 bytes
.byte 128,128,129,129,130,131,131,132,133,133,134,134,135,136,136,137,138,138,139,139,140,141,141,142,143,143,144,144,145,146,146,147,148,148,149,149,150,151,151,152,153,153,154,154,155,156,156,157,158,158,159,159,160,161,161,162,163,163,164,164,165,166,166,167,168,168,169,169,170,171,171,172,173,173,174,174,175,176,176,177,178,178,179,179,180,181,181,182,183,183,184,184,185,186,186,187,188,188,189,189,190,191,191,192,193,193,194,194,195,196,196,197,198,198,199,199,200,201,201,202,203,203,204,204,205,206,206,207





;constants
;--------------------------------

; RAM Interrupt Vectors
IRQVec            = $0314

; VERA
VERA_addr_low     = $9F20
VERA_addr_high    = $9F21
VERA_addr_bank    = $9F22
VERA_data0        = $9F23
VERA_data1        = $9F24
VERA_ctrl         = $9F25
VERA_ien          = $9F26
VERA_isr          = $9F27
VERA_dc_video     = $9F29 ; DCSEL = 0
FX_CTRL           = $9F29 ; DCSEL = 2
FX_MULT           = $9F2C ; DCSEL = 2
FX_CACHE_L        = $9F29 ; DCSEL = 6 
FX_CACHE_M        = $9F2A 
FX_CACHE_H        = $9F2B
FX_CACHE_U        = $9F2C 
;   Current Field | Sprites Enable | Layer1 Enable  |Layer0 Enable 
; NTSC/RGB: 240P  | NTSC: Chroma Disable / RGB: HV Sync Output Mode

VERA_dc_hscale    = $9F2A
VERA_dc_vscale    = $9F2B

VERA_L0_config    = $9F2D
;   7       6     5   4       3       2             1   0
;   Map Height | Map Width | T256C | Bitmap Mode | Color Depth
;   0 - 32                  0 - 16    0 tiled       0   1bpp mono                                            
;   1 - 64                  1 - 256   1 enabled     1   2bpp 4 color
;   2 - 128                                         2   4bpp 16 color
;   3 - 256                                         3   8bpp 256 color
;   bitmap mode - tilebase points to bitmap data, mapbase not used
;   tile width = 0 is 320 pixels / tile width=1 is 640 pixels.. so could do 4bpp x 320?
;   The palette offset (in 'H-Scroll (11:8)') modifies the color indexes of the bitmap in the same way as in the tile modes.

VERA_L0_mapbase   = $9F2E  
VERA_L0_tilebase  = $9F2F ;   Tile Base Address (16:11) | Tile Height 0-8/1-16 | Tile Width 0-8/1-16
VERA_L0_HSCROLL_L = $9F30 ;  H-Scroll (7:0)
VERA_L0_HSCROLL_H = $9F31 ;  - H-Scroll (11:8)
VERA_L0_VSCROLL_L = $9F32 ;  V-Scroll (7:0)
VERA_L0_VSCROLL_H = $9F33 ;  - V-Scroll (11:8)

VERA_L1_config    = $9F34 
VERA_L1_mapbase   = $9F35
VERA_L1_tilebase  = $9F36
VERA_L1_HSCROLL_L = $9F37 ;  H-Scroll (7:0)
VERA_L1_HSCROLL_H = $9F38 ;  - H-Scroll (11:8)
VERA_L1_VSCROLL_L = $9F39 ;  V-Scroll (7:0)
VERA_L1_VSCROLL_H = $9F3A ;  - V-Scroll (11:8)

VSYNC_BIT         = $01

; VRAM Addresses
;   Address range Description
;   $00000 - $1F9BF Video RAM   - 129,424 bytes -> 126K is 129,024 (1F800)
;   $1F9C0 - $1F9FF PSG registers
;   $1FA00 - $1FBFF Palette
;   $1FC00 - $1FFFF Sprite attributes
VRAM_SPRITES =      $00000  ; putting sprite data at start of VRAM for now.. may move later? 
VRAM_BITMAP_LAYERA =$11800  ; setting this to 68K ; was starts at 70K ... so up to ~70K for sprites.. not too shabby.. 
VRAM_BITMAP_LAYERB =$18000  ; ~25K needs to start at 2K boundary... 121.5-25= 96k 
VRAM_TEXT_SCREEN =  $1E400  ; 121.5K    256 x 21 => 32 x 24 would take 1.5K tiles is min.. 64*32 = 2K 8 config.. 
VRAM_SPRITE_BUF =   $1EC00  ; 123K - sprite attribute buffer for swapping data in ..  
VRAM_CHARSET =      $1F000  ;  $1:F000-$1:F7FF Charset loaded by kernal here .. is at 124K .. 
; only can go to 126K ...  
VRAM_palette      = $1FA00      ;  
VRAM_sprite_attributes = $1FC00

SPRITES_ONLY_VGA = $41
SPRITES_LAYER1_LAYER0_VGA = $71


; Kernal
CHROUT            = $FFD2
GETIN             = $FFE4
CINT              = $FF81


; PETSCII Codes
WHITE             = $05
RETURN            = $0D
SPACE             = $20
ZERO_CHAR         = $30
ONE_CHAR          = $31
TWO_CHAR          = $32
THREE_CHAR        = $33
FOUR_CHAR         = $34
FIVE_CHAR         = $35
SIX_CHAR          = $36
SEVEN_CHAR        = $37
EIGHT_CHAR        = $38
NINE_CHAR         = $39

A_CHAR            = $41
C_CHAR            = $43
D_CHAR            = $44
E_CHAR            = $45
I_CHAR            = $49
J_CHAR            = $4A
K_CHAR            = $4B
L_CHAR            = $4C
O_CHAR            = $4F
T_CHAR            = $54
W_CHAR            = $57
X_CHAR            = $58
Y_CHAR            = $59
Z_CHAR            = $5A

CLR               = $93

; 	$0800-$9EFF	BASIC program/variables; available to the user
WORLD_DATA = $6000 	;	so is %100 [Y 5 bits ] : [ab] 0 [X - 6 bits
SCREEN_buffer = $8000

; zero page layout $0022-$007F is available to user
ZP_PTR = $22 
SCRATCH_PTR = $7E

SPRITE_SIZE_ORA = $D0 ; $D0 for 16x64, $50 for 16x16

diff_sprite_to_transparent = 15

SCREEN_OUT_RIGHT  = 160 ; right of middle is 116, +48 = 164
SCREEN_OUT_LEFT8    = 256-8
SCREEN_OUT_LEFT16   = 256-16  ; left of middle is 100, -48=52-16=36 
SCREEN_OUT_LEFT32   = 256-32  ; left of middle is 100, -48=52-16=36 
SCREEN_OUT_LEFT64   = 256-64  ; left of middle is 100, -48=52-16=36 
SCREEN_OUT_TOP     = 240
SCREEN_OUT_BOTTOM  = 120

; global data ; 2E00
default_irq_vector:  .addr 0 ; 4-5 
; current cell values in neighborhood...
CELL_VAL_UPLEFT:  .byte 255
CELL_VAL_UPRIGHT: .byte 255
CELL_VAL_LEFT:    .byte 255
CELL_VAL_SELF:    .byte 255
CELL_VAL_RIGHT:   .byte 255
CELL_VAL_DOWNLEFT: .byte 255
CELL_VAL_DOWNRIGHT: .byte 255

GLOBAL_DATA:         .byte $DE,$AD,$BE,$EF ; 0-1
;line 0
MASTER_CLOCK:        .addr 0 ; 6-7
.byte 0
STATUS:              .byte 0 
;line 1
.byte 0
VSYNC_counter:       .byte 1 ; 8
STALL_COUNTERH:      .byte 0
STALL_COUNTER:       .byte 0
;line 2
.byte 0
LAST_VSYNC_COUNTER:  .byte 0 
LAST_STALLCOUNTERH:  .byte 0
LAST_STALLCOUNTER:   .byte 0
; line 3
VERA_LOCK:           .byte 255 ; 9 value written to screen is value at time DEBUG_WRITE
IRQ_VERA_LOCK:       .byte 80 ; value of VERA_LOCK when reached the Interrupt
CURRENT_BITMAP_BUFFER: .byte 64 ;  
;        A        B     CURRENT BITMAP BUFFER
;   0   display  dirty    A is being displayed, B to be drawn on
;  64   display  ready    B  is ready for swap
; 128   dirty    display  B is being displayed, A to be drawn on
; 192   ready    display  A  is ready for swap
LAST_BITMAP_BUFFER:    .byte 0 ; 

; line 4
camera_facing: 		 .byte 1 ; 7
.byte 0
CAMERA_CENTER_XH:    .byte 0 ; 13
CAMERA_CENTER_YH:    .byte 0 ; 15
; line 5
camera_cell_x: 		 .byte 0 ; c
camera_cell_xl:       .byte 0 ; d
camera_cell_y: 		 .byte 0 ; e
camera_cell_yl:       .byte 0 ; f
; line 6
camera_world_pos_XH:    .byte 44 ; 8
camera_world_pos_XL:       .byte 48 ; 9
camera_world_pos_YH:        .byte 15 ; A
camera_world_pos_YL:       .byte 128  ; B
; line 7 
DO_WATER:   .byte 0 ;   
DO_FAUCET:  .byte 0 ;
CALC_WATER: .byte 0 ;
; line 8
NUM_AVAIL_SPRITES:   .byte 128 ; A
NUM_RESERVED_SPRITES:    .byte  0;(1+NUM_RESERVED_SPRITES-MASTER_CLOCK) << 1 ; F
SPRITE_OBJECT_ENABLE: .byte 255 ;255 ;

CAMERA_CENTER_XL:    .byte 0 ; 12
CAMERA_CENTER_YL:    .byte 0 ; 14
CAMERA_CENTER_TOP_PX: .byte 0 ; 16
CAMERA_CELL_LINE_PTR: .addr 0 ; 17-18
WORLD_SPRITE_NUM:    .byte 0 ; 1B
WORLD_WALL_SPRITE_NUM: .byte 0; 1C
BUFFER_A_DIRTY:        .byte 255 ;
BUFFER_B_DIRTY:        .byte 255 ;

camera_screen_out_top: .byte SCREEN_OUT_TOP       ; for determining visibility / stop conditions for checking if within range to view.. 
camera_screen_out_bottom: .byte SCREEN_OUT_BOTTOM 

ENDGLOBALS:  

.macro stash_scratch
	STA (SCRATCH_PTR)
    INC SCRATCH_PTR
.endmacro


custom_irq_handler: ; 2E12
   lda VERA_isr
   and #VSYNC_BIT
   BEQ :++
   ;  for debug .. 
   LDA VERA_LOCK 
   STA IRQ_VERA_LOCK

   INC VSYNC_counter

   INC VERA_LOCK
   BEQ :+++  ; @unlock_vera ; if we don't have lock we'll just fail this frame.. 
 @NOP_nothing_to_do:
 : DEC VERA_LOCK
 : jmp (default_irq_vector)

 : LDA CURRENT_BITMAP_BUFFER
   EOR LAST_BITMAP_BUFFER  
   BEQ :--- ; if these match then there's nothing to change
   CLC 
   LDA CURRENT_BITMAP_BUFFER  
   STA LAST_BITMAP_BUFFER  
;        A        B     CURRENT BITMAP BUFFER
;   0   display  dirty    A is being displayed, B to be drawn on
;  64   display  ready    B  is ready for swap
; 128   dirty    display  B is being displayed, A to be drawn on
; 192   ready    display  A  is ready for swap
   BMI @DISPLAY_B
@DISPLAY_A:
   BEQ @NOP_nothing_to_do ;   
   LDA #128
   STA CURRENT_BITMAP_BUFFER
   LDA #VRAM_BITMAP_LAYERB>>9
   BRA @GO_SWAP   
@DISPLAY_B:
   CMP #192
   BCC @NOP_nothing_to_do
   STZ CURRENT_BITMAP_BUFFER
   LDA #VRAM_BITMAP_LAYERA>>9   
@GO_SWAP:
   STA VERA_L0_tilebase 

   LDA #$01
   STA VERA_ctrl

   LDX #$FF
   STX VERA_addr_low
   STX VERA_addr_high
   LDA #$19
   STA VERA_addr_bank

   STZ VERA_ctrl  ;  reset to address 0
   STA VERA_addr_bank

   LDA #$EF 
   STA VERA_addr_high
   STX VERA_addr_low

   LDX NUM_AVAIL_SPRITES
 : LDA VERA_data0   ;  4
   STA VERA_data1   ;  4  20
   LDA VERA_data0   ;  4  8
   STA VERA_data1   ;  4  20
   LDA VERA_data0   ;  4  12
   STA VERA_data1   ;  4  20
   LDA VERA_data0   ;  4  16
   STA VERA_data1   ;  4  20
   LDA VERA_data0   ;  4
   STA VERA_data1   ;  4  20
   LDA VERA_data0   ;  4  8
   STA VERA_data1   ;  4  20
   LDA VERA_data0   ;  4  12
   STA VERA_data1   ;  4  20
   LDA VERA_data0   ;  4  16
   STA VERA_data1   ;  4  20
   DEX         ;  2  22
   BNE :-      ;  3  25       8per byte = 64 per sprite + 5 = 69 per * 128 = 8,832 cycles 

   jmp (default_irq_vector)
   ; RTI will happen after jump


;TUB_WORLD:    "presentation" layer
;TUB_WORLD_LOW: hidden low bytes
;WATER_CALC_SCRATCH: scratch layer for bouncing
;WATER_CALC_SCRATCH_LOW: scratch layer for bouncing


; produce downright to scratch for next row to use as upleft... 
.macro calc_row_even row, start, end ; ZP_PTR should contain right+downright of right most.. 
;  going to 14bit here .. 
.local SELF 
.local SELF_H
.local SELF_L 
.local SC_UPLEFT_H ; scratch upleft
.local SC_UPLEFT_L 
.local LEFT_H 
.local LEFT_L 
.local DOWNLEFT_H 
.local DOWNLEFT_L
.local SC_SELF_H ; scratch self
.local SC_SELF_L
.local COUNT 
.local ZP_SCRATCH_AH
.local ZP_SCRATCH_AL
.local ZP_SCRATCH_BH
.local ZP_SCRATCH_BL
.local ZP_SELF_L
   SELF = (64*row)+start-1
   SELF_H = TUB_WORLD+SELF
   SELF_L = TUB_WORLD_LOW+SELF
   SC_SELF_H = WATER_CALC_SCRATCH+SELF
   SC_SELF_L = WATER_CALC_SCRATCH_LOW+SELF
   SC_UPLEFT_H = SC_SELF_H-64
   SC_UPLEFT_L = SC_SELF_L-64
   LEFT_H = SELF_H-1
   LEFT_L = SELF_L+SELF-1
   DOWNLEFT_H = SELF_H+63
   DOWNLEFT_L = SELF_L+SELF+63
   COUNT = 1+end-start
   ZP_SCRATCH_AL = ZP_PTR
   ZP_SCRATCH_AH = ZP_PTR+1
   ZP_SCRATCH_BL = ZP_PTR+2
   ZP_SCRATCH_BH = ZP_PTR+3
   ZP_SELF_L     = ZP_PTR+4


   LDX #COUNT        ;  2  2    leftmost is done at x=1 

   ;feed in one to start 
   LDA SELF_L+1,X     ; 4   6  
   ADC DOWNLEFT_L+1,X ; 8  10
   STA ZP_SCRATCH_AL  ; 4  14    because this is used by A / EVEN count.

   LDA SELF_H+1,X     ; 4  18
   ADC DOWNLEFT_H+1,X ; 4  22
   STA ZP_SCRATCH_AH  ; 4  26    ;  26 cycles overhead to get primed.. OK ... 


 : LDA SELF_L,X      ;  4  4
   ADC DOWNLEFT_L,X  ;  4  8
   STA ZP_SCRATCH_BL ;  3  11    because used by B / ODD counts

   LDA SELF_H,X      ;  4  15
   ADC DOWNLEFT_H,X  ;  4  19
   STA ZP_SCRATCH_BH ;  3  22

   LDA ZP_SCRATCH_BL ;  3  26
   ADC ZP_SCRATCH_AL ;  3  29    add previous - self+right+downleft+downright ; 
   STA SC_SELF_L,X   ;  4  33    stash downright for next row to use as upleft .. 

   LDA ZP_SCRATCH_BH ;  3  36
   ADC ZP_SCRATCH_AH ;  3  39
   STA SC_SELF_H,X   ;  4  43 

   LDA SC_SELF_L,X   ;  4  47    recall the downright low byte
   ADC SC_UPLEFT_L,X ;  4  51    add upleft from prev row
   STA ZP_SELF_L     ;  3  54    save this to zero page temporarily..

   LDA SC_SELF_H,X   ;  4  58    recall downright high byte    
   ADC SC_UPLEFT_H,X ;  4  63    add the uoleft high byte
   ROR ; 8x to 4x    ;  2  65

   ROR ZP_SELF_L     ;  5  70
   LSR ; 4x to 2x    ;  2  72
   ADC #0
;   ROR ZP_SELF_L     ;  5  77
   LSR ; 2x to 1x    ;  2  79
   STA SELF_H,X      ;  4  83    save the new value.. this self+downleft is in ZP_PTR+1  .. OK 

   LDA ZP_SELF_L     ;  3  86
   ROR
   STA SELF_L,X      ;  4  92
   DEX               ;  2  94    OK now this should be odd.. 

   LDA SELF_L,X      ;  4  4
   ADC DOWNLEFT_L,X  ;  4  8
   STA ZP_SCRATCH_AL ;  3  11    because used by A / EVEN counts
   LDA SELF_H,X      ;  4  15
   ADC DOWNLEFT_H,X  ;  4  19
   STA ZP_SCRATCH_AH ;  3  22

   LDA ZP_SCRATCH_BL ;  3  26    add previous - self+right+downleft+downright ;
   ADC ZP_SCRATCH_AL ;  3  29     
   STA SC_SELF_L,X   ;  4  33    stash downright for next row to use as upleft .. 
   LDA ZP_SCRATCH_BH ;  3  36
   ADC ZP_SCRATCH_AH ;  3  39
   STA SC_SELF_H,X   ;  4  43 

   LDA SC_SELF_L,X   ;  4  49    recall the downright low byte
   ADC SC_UPLEFT_L,X ;  4  53    add upleft from prev row
   STA ZP_SELF_L     ;  3  56    save this to zero page temporarily..
   LDA SC_SELF_H,X               ;  2  59    recall downright high byte    
   ADC SC_UPLEFT_H,X ;  4  63    add the uoleft high byte
   ROR ; 8x to 4x    ;  2  65
   ROR ZP_SELF_L     ;  5  70
   LSR ; 4x to 2x    ;  2  72
   ADC #0
 ;  ROR ZP_SELF_L     ;  5  77
   LSR ; 2x to 1x    ;  2  79
   STA SELF_H,X      ;  4  83    save the new value.. this self+downleft is in ZP_PTR+1  .. OK 

   LDA ZP_SELF_L     ;  3  86
   ROR
   STA SELF_L,X      ;  4  92
   DEX               ;  2  94    OK now this should be odd.. 

   BNE :-            ;  3  - so ~96 each.. expecting almost 1 Jiffy to calculate world now.. 

   ;  exiting this, we have the next right+downright bit stashed in ZP_PTP[0,1]
.endmacro

UPDATE_WATER_SIM:
   ; for each row, need to fixup right-most and left-most few so that uplefts exist and down-rights can be calculated..
   ; for now, am leaving the borders out of it.. 
   calc_row_even  2, 21, 54  
   calc_row_even  3, 20, 55 
   calc_row_even  4, 19, 56
   calc_row_even  5, 16, 57
   calc_row_even  6, 14, 57
   calc_row_even  7, 13, 58
   calc_row_even  8, 12, 57
   calc_row_even  9, 11, 58
   calc_row_even 10, 11, 56
   calc_row_even 11, 10, 57
   calc_row_even 12, 10, 55
   calc_row_even 13,  9, 56
   calc_row_even 14,  9, 54
   calc_row_even 15,  8, 55
   calc_row_even 16,  8, 53
   calc_row_even 17,  7, 54
   calc_row_even 18,  7, 52
   calc_row_even 19,  6, 53
   calc_row_even 20,  6, 51
   calc_row_even 21,  5, 52
   calc_row_even 22,  5, 50
   calc_row_even 23,  5, 50
   calc_row_even 24,  5, 48
   calc_row_even 25,  5, 46
   calc_row_even 26,  6, 45
   calc_row_even 27,  7, 42
   calc_row_even 28,  8, 41

   RTS

start:
  ; start of program - init globals
  lda IRQVec
  sta default_irq_vector
  lda IRQVec+1
  sta default_irq_vector+1

  stz VERA_dc_video   ; disable display
  lda #51 ; #43 ; set scale for bitmap mode - going for 215x161 mode
  sta VERA_dc_hscale
  sta VERA_dc_vscale
  ; for now no L0 or L1 

  ; let's stick that test sprite data into VRAM at zero for now.. 
  stz VERA_ctrl
  stz VERA_addr_low
  stz VERA_addr_high
  lda #$10
  sta VERA_addr_bank
  ; load test VRAM data

  ; is 512 bytes at test_cell_sprite label
  ldy #0

  LDA #<test_vram_data
  STA ZP_PTR
  LDA #>test_vram_data
  STA ZP_PTR+1
  LDX #35   ;   num pages to copy - 34 pages of 256bytes => 276 sprite addresses.. 
  BRA :++
  : 
     INC ZP_PTR+1
    :
      LDA (ZP_PTR),Y
      STA VERA_data0
      INY
      BNE :-
     DEX 
     BNE :--

  ; write custom palette data  - 16 colors only for now.. $1:FA00-$1:FBFF   VERA Color Palette (256 x 2 bytes) 
  LDA #1
  STA VERA_ctrl
  LDA #63
  STA VERA_addr_low
  LDA #$FA 
  STA VERA_addr_high
  LDA #$19
  STA VERA_addr_bank
  STZ VERA_ctrl
  LDX #31
  STX VERA_addr_low
  LDA #$FA
  STA VERA_addr_high
  LDA #$19
  STA VERA_addr_bank
  :
    LDA test_optimal_pal_data,X 
    STA VERA_data0
    EOR #$FF
    STA VERA_data1
    DEX 
    BNE :-
  LDA test_optimal_pal_data,X 
  STA VERA_data0

  LDA #8
  STz VERA_L1_config
  LDA #VRAM_CHARSET >> 9
  STA VERA_L1_tilebase
  LDA #VRAM_TEXT_SCREEN >> 9
  STA VERA_L1_mapbase

  STZ VERA_addr_low
  LDA #>VRAM_BITMAP_LAYERA
  STA VERA_addr_high
  LDA #$11
  STA VERA_addr_bank
  LDX #103  ;  zero bufferA
  LDY #0
: STZ VERA_data0
  INY 
  BNE :-
  DEX 
  BNE :-
  LDX #101  ;  write A to bufferB initially as debug / flashing display when swapped.. 
  ;LDA #255
: STZ VERA_data0
  INY 
  BNE :-
  DEX 
  BNE :-

  STZ VERA_data0
  LDA #$21
  STA VERA_addr_bank

  LDX #15
: LDY #20
  LDA #$01

  : STA VERA_data0
    DEY
    BNE :-
    LDY #$F1
    STY VERA_data0 ; cols 20-23
    STY VERA_data0
    STY VERA_data0
    STY VERA_data0

    STY VERA_data0 ; cols 24-27
    STY VERA_data0
    STY VERA_data0
    STY VERA_data0

    STY VERA_data0 ; cols 28-31
    STY VERA_data0
    STY VERA_data0
    STY VERA_data0
   DEX 
   BNE :--    
  LDX #160
  : STY VERA_data0
    STY VERA_data0
    DEX 
    BNE :- 
;  LDA #4
;  STA VERA_L1_HSCROLL_L
;  STA VERA_L1_VSCROLL_L

  STZ VERA_addr_low
  LDA #>VRAM_TEXT_SCREEN
  STA VERA_addr_high
  LDX #4
  LDA #32
: STA VERA_data0
  INY 
  BNE :-
  DEX 
  BNE :-

  LDA #$06
  STA VERA_L0_config
  LDA #$01 ; set L0 to palette offset 1 for now, to see where stuff is. 
  STA VERA_L0_HSCROLL_H
  LDA #(VRAM_BITMAP_LAYERA>>9)

;  LDA #VRAM_BITMAP_LAYERB>>9
  STA VERA_L0_tilebase

  LDA #6
  STA VERA_addr_low
  LDA #>VRAM_SPRITE_BUF
  STA VERA_addr_high
  LDA #$41
  STA VERA_addr_bank
  : STZ VERA_data0
    INX 
    BNE :-
  ; enable display 
  stz VERA_ctrl
  lda #SPRITES_LAYER1_LAYER0_VGA ; #SPRITES_ONLY_VGA
  sta VERA_dc_video

;  DEC VERA_LOCK ; unlock the vera for first go... 
;   BRA @camera_world_changed
  ; overwrite RAM IRQ vector with custom handler address
  sei ; disable IRQ while vector is changing
  lda #<custom_irq_handler
  sta IRQVec
  lda #>custom_irq_handler
  sta IRQVec+1
  lda #VSYNC_BIT ; make VERA only generate VSYNC IRQs
  sta VERA_ien
  cli ; enable IRQ now that vector is properly set


  ; main loop here... 
   STZ camera_facing

@camera_world_changed:
   ; copy over cell YL as-is
   LDA camera_world_pos_YL
   STA camera_cell_yl
   ; YH gets copied over .. 
   LDA camera_world_pos_YH
   STA camera_cell_y
   ; cellX = WORLDX*ratio - floor(cellY)/2
   ;  halve floor(cellY)
   LSR 
   STA $7F ; stash it for scratch
   LDA #0
   ROR
   STA $7E ; and there's the half.. 

   LDX camera_world_pos_XH 
   LDY camera_world_pos_XL
   CLC 
   LDA WORLD_TO_CELL_XH,Y ; that bit from pos_XL
   ADC WORLD_TO_CELL_XL,X ; plus the bit from pos_XH 
   TAY   ;  cellXL from ratio
   LDA WORLD_TO_CELL_XH,X 
   ADC #0 ; gotta do that carry and all .. 
   TAX   ; cellXH from ratio 

   TYA 
   SEC
   SBC $7E
   STA camera_cell_xl 
   TXA
   SBC $7F  
   STA camera_cell_x
   jmp @do_update

@camera_cell_changed: ; run through this more as a normalization step for camera..
   ; worldX = scaled(floor(cellY)/2 + cellX )
   LDA camera_cell_yl
   STA camera_world_pos_YL
   LDA camera_cell_y
   STA camera_world_pos_YH
   LSR
   TAX  ; high byte floor(Y)/2
   LDA #0
   ROR ; either is zero or 128 now ... either way, carry is cleared.
   ADC camera_cell_xl 
   TAY ; stash the low to byte 
   TXA ; high byte floor (Y)/2 .. ready for adding 
   ADC camera_cell_x
   TAX ; stash high byte ... carry _should_ be cleared unless X >255 ... ?
   LDA CELL_LOW_TO_WORLD_XL,Y
   ADC CELL_TO_WORLD_XL,X
   STA camera_world_pos_XL
   LDA CELL_LOW_TO_WORLD_XH,Y
   ADC CELL_TO_WORLD_XH,X
   STA camera_world_pos_XH
   ;  jmp @do_update ; superfluous currently. redundant even.. 


@do_update:

   ;  set up screen center stuff


   LDA camera_facing
   AND #127
   TAX
   LDA WORLD_SPRITE_NUM_lookies,X
   STA WORLD_SPRITE_NUM
   LDA WORLD_WALL_SPRITE_NUM_lookies,X
   STA WORLD_WALL_SPRITE_NUM

   SEC
   LDA WORLD_SPRITE_CENTER_XL,X
   STA CAMERA_CENTER_XL
   LDA WORLD_SPRITE_CENTER_XH,X
   SBC #28
   STA CAMERA_CENTER_XH

   LDA WORLD_SPRITE_CENTER_YL,X
   STA CAMERA_CENTER_YL
   SEC
   LDA WORLD_SPRITE_CENTER_YH,X
   SBC #20
   STA CAMERA_CENTER_TOP_PX

    LDX camera_facing

    LDA camera_cell_xl
    LSR ;   /2
    LSR ;   /4
    LSR ;   /8
    LSR ;   /16
    SEC 
    SBC #8 ;   subtract le middle.. 
    TAY
    BCS :++    ;  is positive.. 
  : CLC 
    LDA CAMERA_CENTER_XL
    ADC SUBCELL_X_COS_L,X
    STA CAMERA_CENTER_XL
    LDA CAMERA_CENTER_XH
    ADC SUBCELL_X_COS_H,X
    STA CAMERA_CENTER_XH
    SEC 
    LDA CAMERA_CENTER_YL
    SBC SUBCELL_Y_SIN_L,X 
    STA CAMERA_CENTER_YL
    LDA CAMERA_CENTER_TOP_PX
    SBC SUBCELL_Y_SIN_H,X
    STA CAMERA_CENTER_TOP_PX
    INY
    BNE :-
  : BEQ :++
  : SEC 
    LDA CAMERA_CENTER_XL
    SBC SUBCELL_X_COS_L,X
    STA CAMERA_CENTER_XL
    LDA CAMERA_CENTER_XH
    SBC SUBCELL_X_COS_H,X
    STA CAMERA_CENTER_XH
    CLC 
    LDA CAMERA_CENTER_YL
    ADC SUBCELL_Y_SIN_L,X 
    STA CAMERA_CENTER_YL
    LDA CAMERA_CENTER_TOP_PX
    ADC SUBCELL_Y_SIN_H,X
    STA CAMERA_CENTER_TOP_PX
    DEY
    BNE :-
  :

    LDA camera_cell_yl
    LSR ;   /2
    LSR ;   /4
    LSR ;   /8
    LSR ;   /16
    SEC 
    SBC #8 ;   subtract le middle.. 
    TAY
    BCS :++    ;  is positive.. 
  : CLC 
    LDA CAMERA_CENTER_XL
    ADC SUBCELL_X_SIN_L,X
    STA CAMERA_CENTER_XL
    LDA CAMERA_CENTER_XH
    ADC SUBCELL_X_SIN_H,X
    STA CAMERA_CENTER_XH
    CLC 
    LDA CAMERA_CENTER_YL
    ADC SUBCELL_Y_COS_L,X 
    STA CAMERA_CENTER_YL
    LDA CAMERA_CENTER_TOP_PX
    ADC SUBCELL_Y_COS_H,X
    STA CAMERA_CENTER_TOP_PX
    INY
    BNE :-
  : BEQ :++
  : SEC 
    LDA CAMERA_CENTER_XL
    SBC SUBCELL_X_SIN_L,X
    STA CAMERA_CENTER_XL
    LDA CAMERA_CENTER_XH
    SBC SUBCELL_X_SIN_H,X
    STA CAMERA_CENTER_XH

    SEC 
    LDA CAMERA_CENTER_YL
    SBC SUBCELL_Y_COS_L,X 
    STA CAMERA_CENTER_YL
    LDA CAMERA_CENTER_TOP_PX
    SBC SUBCELL_Y_COS_H,X
    STA CAMERA_CENTER_TOP_PX
    DEY
    BNE :-
  :

   ;  set up tub pointer .. this will let us grab the height value for current location.. 

    STZ $7C
    LDA camera_cell_y
    LSR  ;  y pages of 128
    ROR $7C
    LSR  ; y pages of 64 ! 
    ROR $7C
    ADC #>TUB_WORLD
    STA $7D
    STA CAMERA_CELL_LINE_PTR+1
    LDA $7C
    STA CAMERA_CELL_LINE_PTR    


    LDY camera_cell_x
    LDA ($7C),y
    TAY 

   CLC
   LDA CAMERA_CENTER_YL
   ADC CONVERT_HEIGHTS_PIXELS_L,Y
   STA CAMERA_CENTER_YL
   LDA CAMERA_CENTER_TOP_PX
   ADC CONVERT_HEIGHTS_PIXELS,Y
   STA CAMERA_CENTER_YH

   CLC 
   LDA #SCREEN_OUT_BOTTOM
   ADC CONVERT_HEIGHTS_PIXELS,Y 
   STA camera_screen_out_bottom

   ; if something is higher than us it would be (52-CONVERT_HEIGHTS_PIXELS,Y)
   ; so true effective top of screen check to account for that would be ...
   ; SCREEN_OUT_TOP - (52 - CONVERT_HEIGHTS_PIXELS,Y)
   ; screen out top - 52 + CONVERT_HEIGHTS_PIXELS,Y
   ; ok so if we are as high as we can be, then something at farthest Z visible Z
   ; or s this constant??? should it even be attempted to add to world data?
   SEC
   LDA CAMERA_CENTER_TOP_PX   
   SBC #16+60+52 ;-16 is top out.. 60 to mid screen, then max diff in height from there.. so if was middle screen 60 now its -68
   STA camera_screen_out_top

   ; clear the object list ... 
    SEC
    LDA #128
    SBC NUM_RESERVED_SPRITES
    STA NUM_AVAIL_SPRITES

    STZ OBJECT_LIST_BYTE6_NEXT ; because we can't use zero anyway..
    LDA #$08 ; is basis for all the z_flips <- this may change depending on orientation.. 
    LDX #0
    : STZ OBJECT_LIST_Z_START_POINTERS,X
      STZ OBJECT_LIST_BYTE1_MODE,X          ; 16 color / low address 
      STZ OBJECT_LIST_BYTE2_X
      STA OBJECT_LIST_BYTE4_ZFLIPS,X
      ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done . 
      INX 
      BNE :-

    LDA #SPRITE_SIZE_ORA
    : STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done . 
      INX 
      BNE :-
    LDA WORLD_SPRITE_NUM
    : STA OBJECT_LIST_BYTE0_ADDRLOW,X ; 01.3456 done . 
      INX 
      BNE :-

   LDA DO_WATER
   BEQ :+++
 ;  STZ DO_WATER
   LDA DO_FAUCET
   BEQ :+
;   STZ DO_FAUCET
   LDA TUB_WORLD+(15*64)+8
   CMP #63
   BCS :+
   LDA #63
   ; we're going to pretend the faucet is running...
 :   STA TUB_WORLD+(15*64)+8 ;  this is middle row furthest west ( < x )
     STA TUB_WORLD+(15*64)+9
     STA TUB_WORLD+(14*64)+9
     STA TUB_WORLD+(16*64)+8
   LDA CAMERA_CELL_LINE_PTR 
   STA ZP_PTR
   LDA CAMERA_CELL_LINE_PTR+1
   STA ZP_PTR+1
   LDY camera_cell_x
   LDA (ZP_PTR),y
;   inc A
   CMP #64
   BCC :+
   LDA #63
 : STA (ZP_PTR),y

   JSR UPDATE_WATER_SIM


:

  jsr push_world_to_object_list
  LDY CAMERA_CENTER_YH
  LDA OBJECT_LIST_Z_START_POINTERS,y ;  get pointer to current next.. 
  INC OBJECT_LIST_BYTE6_NEXT ; get next available object...
  LDX OBJECT_LIST_BYTE6_NEXT ; get offset for that 
  STA OBJECT_LIST_BYTE6_NEXT,X ; set the old value to this next..
  TXA 
  STA OBJECT_LIST_Z_START_POINTERS,y ; patch this into Z 
  LDA #16
  STA OBJECT_LIST_BYTE0_ADDRLOW,X
  LDA #1
  STA OBJECT_LIST_BYTE1_MODE,X
  LDA #80-8
  STA OBJECT_LIST_BYTE2_X,X 
  LDA #60-16
  STA OBJECT_LIST_BYTE3_Y,X 
  LDA #$50
  STA OBJECT_LIST_BYTE5_SIZE,X 

;        A        B     CURRENT BITMAP BUFFER
;   0   display  dirty    A is being displayed, B to be drawn on
;  64   display  ready    B  is ready for swap
; 128   dirty    display  B is being displayed, A to be drawn on
; 192   ready    display  A  is ready for swap

; OK so we want bit 6 (64) to be set 
   BRA :++
;   LDA #2
:  
   wai 
;   CMP VSYNC_counter
;   BCS :-
:  LDA CURRENT_BITMAP_BUFFER
   AND #64
   BNE :--
   STZ VERA_LOCK ; ok gotta lock the VERA... 
   LDA #$D1
   STA OBJECT_LIST_BYTE5_SIZE+1

   jsr draw_object_list

@WRITE_DEBUG:
    STZ $7A
    LDA camera_cell_y
    DEC A 
    LSR 
    ROR $7A
    LSR 
    ROR $7A
    ADC #>TUB_WORLD
    STA $7B
    LDY camera_cell_x
    LDA ($7A),y 
    STA CELL_VAL_UPLEFT
    INY 
    LDA ($7A),Y
    STA CELL_VAL_UPRIGHT

    STZ $7C
    LDA camera_cell_y
    LSR  ;  y pages of 128
    ROR $7C
    LSR  ; y pages of 64 ! 
    ROR $7C
    ADC #>TUB_WORLD
    STA $7D
    STA CAMERA_CELL_LINE_PTR+1
    LDA $7C
    STA CAMERA_CELL_LINE_PTR    
    LDA ($7C),Y
    STA CELL_VAL_RIGHT
    DEY 
    LDA ($7C),Y
    STA CELL_VAL_SELF
    DEY 
    LDA ($7C),Y 
    STA CELL_VAL_LEFT

    STZ $7E
    LDA camera_cell_y
    INC A
    LSR  ;  y pages of 128
    ROR $7E
    LSR  ; y pages of 64 ! 
    ROR $7E
    ADC #>TUB_WORLD
    STA $7F
    LDA ($7E),Y
    STA CELL_VAL_DOWNLEFT
    INY 
    LDA ($7E),Y
    STA CELL_VAL_DOWNRIGHT 

   STZ VERA_ctrl
   LDA #42;+64
   STA VERA_addr_low
   LDA #>VRAM_TEXT_SCREEN
   STA VERA_addr_high
   LDA #$21
   STA VERA_addr_bank

   LDA VERA_data0 ; skip a spot at 2
   LDA VERA_data0 ; skip a spot at 4

   LDX CELL_VAL_UPLEFT
   LDA HIGH_NIBBLE_TO_HEX,X 
   STA VERA_data0                ;  6
   LDA LOW_NIBBLE_TO_HEX,X 
   STA VERA_data0                ;  8

   LDA VERA_data0     ; skip a spot    10
   LDA VERA_data0     ; skip a spot    12

   LDX CELL_VAL_UPRIGHT
   LDA HIGH_NIBBLE_TO_HEX,X 
   STA VERA_data0                ;  14
   LDA LOW_NIBBLE_TO_HEX,X 
   STA VERA_data0                ;  16
   CLC
   LDA VERA_addr_low
   ADC #64-16
   STA VERA_addr_low

   LDX CELL_VAL_LEFT
   LDA HIGH_NIBBLE_TO_HEX,X 
   STA VERA_data0                ;  2
   LDA LOW_NIBBLE_TO_HEX,X 
   STA VERA_data0                ;  4

   LDA VERA_data0    ;     6
   LDA VERA_data0    ;     8

   LDX CELL_VAL_SELF
   LDA HIGH_NIBBLE_TO_HEX,X 
   STA VERA_data0                ;  10
   LDA LOW_NIBBLE_TO_HEX,X 
   STA VERA_data0                ;  12

   LDA VERA_data0    ;     14
   LDA VERA_data0    ;     16

   LDX CELL_VAL_RIGHT
   LDA HIGH_NIBBLE_TO_HEX,X 
   STA VERA_data0                ;  18
   LDA LOW_NIBBLE_TO_HEX,X 
   STA VERA_data0                ;  20

   CLC
   LDA VERA_addr_low
   ADC #64-20
   STA VERA_addr_low

   LDA VERA_data0 ; skip a spot at 2
   LDA VERA_data0 ; skip a spot at 4

   LDX CELL_VAL_DOWNLEFT
   LDA HIGH_NIBBLE_TO_HEX,X 
   STA VERA_data0                ;  6
   LDA LOW_NIBBLE_TO_HEX,X 
   STA VERA_data0                ;  8

   LDA VERA_data0     ; skip a spot    10
   LDA VERA_data0     ; skip a spot    12

   LDX CELL_VAL_DOWNRIGHT
   LDA HIGH_NIBBLE_TO_HEX,X 
   STA VERA_data0                ;  14
   LDA LOW_NIBBLE_TO_HEX,X 
   STA VERA_data0                ;  16

   LDA #42
   STA VERA_addr_low
   INC VERA_addr_high


   LDY #0
 : LDX GLOBAL_DATA,Y 
   LDA HIGH_NIBBLE_TO_HEX,X ; 1
   STA VERA_data0
   LDA LOW_NIBBLE_TO_HEX,X  ; 2
   STA VERA_data0
   INY
   LDX GLOBAL_DATA,Y 
   LDA HIGH_NIBBLE_TO_HEX,X   ;  3
   STA VERA_data0
   LDA LOW_NIBBLE_TO_HEX,X    ;  4
   STA VERA_data0
   INY
   LDA VERA_data0             ;  5
   LDX GLOBAL_DATA,Y 
   LDA HIGH_NIBBLE_TO_HEX,X   ;  6
   STA VERA_data0
   LDA LOW_NIBBLE_TO_HEX,X    ;  7
   STA VERA_data0
   INY
   LDX GLOBAL_DATA,Y 
   LDA HIGH_NIBBLE_TO_HEX,X   ;  8
   STA VERA_data0
   LDA LOW_NIBBLE_TO_HEX,X    ;  9
   STA VERA_data0
   INY
   CLC 
   LDA VERA_addr_low          ;  moved 18 out of 64 bytes...
   ADC #64-18
   STA VERA_addr_low
   BCC :+
   INC VERA_addr_high
 : CPY #ENDGLOBALS-GLOBAL_DATA  ;   
   BCC :--

   CLC
   LDA CURRENT_BITMAP_BUFFER
   ADC #64
   STA CURRENT_BITMAP_BUFFER

   LDA #$FF ; time to unlock the VERA .. 
   STA VERA_LOCK 

;   rts

@FRAME_CHECK:
   LDA STALL_COUNTERH
   STA LAST_STALLCOUNTERH
   LDA STALL_COUNTER
   STA LAST_STALLCOUNTER
   LDX #255
   LDY #255
   LDA VSYNC_counter
   STA LAST_VSYNC_COUNTER
;   BNE :+++
   STZ VSYNC_counter
:  INX                     ;  2 cycles    8
   BNE :+                  ;  ~3 cycles   11 or 10 if drop through
   INY                     ; 2            11/12
:  ;wai   disables the busy wait.. 
   lda VSYNC_counter       ;  4  cyles    15/16
   BEQ :--                ;  3  cycles     18/19   so 1 full of X = ~4,607 cycles .. count would go to ~7,407 for full frame.. or ~ $1C,$F0
;:
   STZ VSYNC_counter
   STX STALL_COUNTER
   STY STALL_COUNTERH
;   LDA MASTER_CLOCK
;   INC A
;   CLC
;   ADC LAST_VSYNC_COUNTER
;   STA MASTER_CLOCK
   INC MASTER_CLOCK
   BNE :+
   INC MASTER_CLOCK+1
:
;   AND #1 ; restrict to 30 fps.. don't care missed cycle. 
;   BEQ :+
;   JMP @WRITE_DEBUG
   ; poll keyboard for input 
; : 
   jsr GETIN
   cmp #0
   BNE :+
   JMP @do_update
 : CMP #RETURN 
   BNE :+
   JMP @cleanup_and_exit
 : cmp #$1D 	;	cursor right
   BNE :+
   INC camera_facing
   JMP @do_update
   :
   cmp  #$9D 	;	cursor left
   BNE :+
   DEC camera_facing
   JMP @do_update
 : cmp #$11; cursor down
   BNE :+
   LDX camera_facing
   SEC 
   LDA camera_world_pos_XL
   SBC MOVE_X_L,X 
   STA camera_world_pos_XL
   LDA camera_world_pos_XH
   SBC MOVE_X_H,X 
   STA camera_world_pos_XH
   CLC 
   LDA camera_world_pos_YL
   ADC MOVE_Y_L,X 
   STA camera_world_pos_YL
   LDA camera_world_pos_YH
   ADC MOVE_Y_H,X 
   STA camera_world_pos_YH
   jmp @camera_world_changed

 : cmp #$91 ; cursor up 
   BNE :+
   LDX camera_facing
   CLC 
   LDA camera_world_pos_XL
   ADC MOVE_X_L,X 
   STA camera_world_pos_XL
   LDa camera_world_pos_XH
   ADC MOVE_X_H,X 
   STA camera_world_pos_XH
   SEC 
   LDA camera_world_pos_YL
   SBC MOVE_Y_L,X 
   STA camera_world_pos_YL
   LDA camera_world_pos_YH
   SBC MOVE_Y_H,X 
   STA camera_world_pos_YH
   jmp @camera_world_changed

 : cmp  #E_CHAR ; cell up right
   BNE :+++
   LDA camera_cell_y
   BEQ :+
   DEC camera_cell_y
 : LDA camera_cell_x
   CMP #63
   BCS :+
   INC camera_cell_x
 : JMP @camera_cell_changed

 : cmp #W_CHAR ; cell up left 
   BNE :++
   LDA camera_cell_y
   BEQ :+
   DEC camera_cell_y
 : JMP @camera_cell_changed

 : cmp #A_CHAR ; cell left 
   BNE :++
   LDA camera_cell_x
   BEQ :+
   DEC camera_cell_x
 : JMP @camera_cell_changed

 : cmp #D_CHAR ; cell right 
   BNE :++
   LDA camera_cell_x 
   CMP #63
   BCS :+
   INC camera_cell_x
 : JMP @camera_cell_changed

 : cmp #X_CHAR ; cell down right  
   BNE :++
   LDA camera_cell_y
   CMP #30
   BCS :+
   INC camera_cell_y
 : JMP @camera_cell_changed

 : cmp  #Z_CHAR ; cell down left
   BNE :+++
   LDA camera_cell_y
   CMP #30
   BCS :+
   INC camera_cell_y
 : LDA camera_cell_x
   BEQ :+
   DEC camera_cell_x
 : JMP @camera_cell_changed

 : cmp #SPACE; 
   BNE :+
   STZ camera_cell_xl
   STZ camera_cell_yl
   JMP @camera_cell_changed

 : cmp #I_CHAR ; cell y - 1/16 
   BNE :++   
   SEC 
   LDA camera_cell_yl
   SBC #16
   STA camera_cell_yl
   BCS :+
   LDA camera_cell_y
   BEQ :+
   DEC A
   STA camera_cell_y
   CLC 
   LDA camera_cell_xl
   ADC #128
   STA camera_cell_xl
   BCC :+
   INC camera_cell_x
 : JMP @camera_cell_changed

 : cmp #J_CHAR ; cell x - 1/16 
   BNE :++
   SEC 
   LDA camera_cell_xl
   SBC #16
   STA camera_cell_xl
   BCS :+
   LDA camera_cell_x
   BEQ :+
   DEC A 
   STA camera_cell_x
 : JMP @camera_cell_changed

 : cmp #K_CHAR ; cell y + 1/16 
   BNE :++   
   CLC 
   LDA camera_cell_yl
   ADC #16
   STA camera_cell_yl
   BCC :+
   LDA camera_cell_y
   CMP #31
   BCS :+
   INC A
   STA camera_cell_y
   SEC 
   LDA camera_cell_xl
   SBC #128
   STA camera_cell_xl
   BCS :+
   DEC camera_cell_x
 : JMP @camera_cell_changed

 : cmp #L_CHAR ; cell x + 1/16 
   BNE :++
   CLC 
   LDA camera_cell_xl
   ADC #16
   STA camera_cell_xl
   BCC :+
   INC camera_cell_x
 : JMP @camera_cell_changed

 : CMP #ONE_CHAR
   BNE :+
   LDA VERA_dc_video
   EOR #%00100000
   STA VERA_dc_video

 : CMP #TWO_CHAR
   BNE :+
   LDA VERA_dc_video
   EOR #%01000000
   STA VERA_dc_video

 : CMP #THREE_CHAR
   BNE :+
   LDA VERA_dc_video
   EOR #%00010000
   STA VERA_dc_video

 : CMP #ZERO_CHAR
   BNE :+++
   LDA VERA_dc_hscale
   CMP #43
   BCS :+
   LDA #51 ; #51 ; 51 is 255
   BRA :++
 : LDA #32
 : STA VERA_dc_hscale
   STA VERA_dc_vscale

 : CMP #NINE_CHAR 
   BNE :+
   LDA SPRITE_OBJECT_ENABLE   
   EOR #$FF
   STA SPRITE_OBJECT_ENABLE

 : CMP #EIGHT_CHAR
   BNE :+  
   LDA #$FF 
   EOR DO_WATER
   STA DO_WATER 

 : CMP #SEVEN_CHAR
   BNE :+
   LDA DO_WATER
   BNE :+
   JSR UPDATE_WATER_SIM

 : CMP #SIX_CHAR
   BNE :+
   LDA DO_FAUCET
   EOR #$FF 
   STA DO_FAUCET

 : JMP @do_update

@cleanup_and_exit:
   ; restore default IRQ vector
   sei
   lda default_irq_vector
   sta IRQVec
   lda default_irq_vector+1
   sta IRQVec+1
   cli   
   jsr CINT
   rts


; CURRENT
push_world_to_object_list: ; as in.. let's try this again?? wait.. missing a STZ ZP_PTR... 
PWOL_TUB_PTR_AL   = ZP_PTR
PWOL_TUB_PTR_AH   = ZP_PTR+1
PWOL_TUB_PTR_BL   = ZP_PTR+2
PWOL_TUB_PTR_BH   = ZP_PTR+3
PWOL_CURRENT_XL   = ZP_PTR+4
PWOL_CURRENT_XH   = ZP_PTR+5
PWOL_CURRENT_YL   = ZP_PTR+6
PWOL_CURRENT_YH   = ZP_PTR+7
PWOL_ACROSS_ROW_XL= ZP_PTR+8
PWOL_ACROSS_ROW_XH= ZP_PTR+9
PWOL_ACROSS_ROW_YL= ZP_PTR+10
PWOL_ACROSS_ROW_YH= ZP_PTR+11
PWOL_NEXT_ROW_A_LEFT_XL  = ZP_PTR+12
PWOL_NEXT_ROW_A_LEFT_XH  = ZP_PTR+13
PWOL_NEXT_ROW_A_LEFT_YL  = ZP_PTR+14
PWOL_NEXT_ROW_A_LEFT_YH  = ZP_PTR+15
PWOL_NEXT_ROW_A_RIGHT_XL  = ZP_PTR+16
PWOL_NEXT_ROW_A_RIGHT_XH  = ZP_PTR+17
PWOL_NEXT_ROW_A_RIGHT_YL  = ZP_PTR+18
PWOL_NEXT_ROW_A_RIGHT_YH  = ZP_PTR+19
PWOL_NEXT_ROW_B_LEFT_XL  = ZP_PTR+20
PWOL_NEXT_ROW_B_LEFT_XH  = ZP_PTR+21
PWOL_NEXT_ROW_B_LEFT_YL  = ZP_PTR+22
PWOL_NEXT_ROW_B_LEFT_YH  = ZP_PTR+23
PWOL_NEXT_ROW_B_RIGHT_XL  = ZP_PTR+24
PWOL_NEXT_ROW_B_RIGHT_XH  = ZP_PTR+25
PWOL_NEXT_ROW_B_RIGHT_YL  = ZP_PTR+26
PWOL_NEXT_ROW_B_RIGHT_YH  = ZP_PTR+27
PWOL_Z_STARTS_PTR = ZP_PTR+28
PWOL_Z_STARTS_PTRH = ZP_PTR+29
PWOL_CONVERT_HEIGHTS = ZP_PTR+30
PWOL_CONVERT_HEIGHTSH= ZP_PTR+31
PWOL_CONVERT_HEIGHTS_L = ZP_PTR+32
PWOL_CONVERT_HEIGHTS_LH = ZP_PTR+33
PWOL_TRIES_COUNTER = ZP_PTR+34
PWOL_START_XL = ZP_PTR+35
PWOL_START_YL = ZP_PTR+36
PWOL_START_XH = ZP_PTR+37
PWOL_START_YH = ZP_PTR+38

PWOL_START_COS_XL = ZP_PTR+39
PWOL_START_COS_XH = ZP_PTR+40
PWOL_START_COS_YL = ZP_PTR+41
PWOL_START_COS_YH = ZP_PTR+42
PWOL_START_SIN_XL = ZP_PTR+43
PWOL_START_SIN_XH = ZP_PTR+44
PWOL_START_SIN_YL = ZP_PTR+45
PWOL_START_SIN_YH = ZP_PTR+46

PWOL_camera_cell_xl = ZP_PTR+47
PWOL_camera_cell_yl = ZP_PTR+48
PWOL_CENTER_Y  =  ZP_PTR+49
PWOL_CENTER_Y_TOP     =  ZP_PTR+50

PWOL_TOP_CHECK = ZP_PTR+51
PWOL_BOT_CHECK = ZP_PTR+52

TRY_AGAIN = 6
   LDA camera_screen_out_top
   STA PWOL_TOP_CHECK
   LDA camera_screen_out_bottom
   STA PWOL_BOT_CHECK

   LDA CAMERA_CENTER_YH
   INC A
   STA PWOL_CENTER_Y
   LDA CAMERA_CENTER_TOP_PX
   CLC 
   ADC #10
   STA PWOL_CENTER_Y_TOP


   LDA #>CONVERT_HEIGHTS_PIXELS
   STA PWOL_CONVERT_HEIGHTSH
   LDA #>CONVERT_HEIGHTS_PIXELS_L
   STA PWOL_CONVERT_HEIGHTS_LH

   LDA #>OBJECT_LIST_Z_START_POINTERS
   STA PWOL_Z_STARTS_PTRH

   LDX camera_facing
   LDA ACROSS_ROW_X_L,x    ; 0900  16 wide , 45* tilt ... this is added to go up row, sub for down row
   STA PWOL_ACROSS_ROW_XL  
   LDA ACROSS_ROW_X_H,x
   STA PWOL_ACROSS_ROW_XH

   LDA ACROSS_ROW_Y_L,x
   STA PWOL_ACROSS_ROW_YL
   LDA ACROSS_ROW_Y_H,x
   STA PWOL_ACROSS_ROW_YH

   CLC
   LDA NEXT_ROW_X_L,X  ; 0D00 next row LEFT/up when added
   STA PWOL_NEXT_ROW_A_LEFT_XL   ; -> next row is left, going up the screen ..  -1,-1
   ADC PWOL_ACROSS_ROW_XL   ; across row is for right , subtract to go left  +1 -> 0,1
   STA PWOL_NEXT_ROW_A_RIGHT_XL  ;  -> next row is right, going up the screen .. -1,-1
   LDA NEXT_ROW_X_H,x
   STA PWOL_NEXT_ROW_A_LEFT_XH
   ADC PWOL_ACROSS_ROW_XH
   STA PWOL_NEXT_ROW_A_RIGHT_XH

   CLC 
   LDA NEXT_ROW_Y_L,X  ; 0F00 next row LEFT/up when added
   STA PWOL_NEXT_ROW_A_LEFT_YL   ; -> next row is left, going up the screen
   ADC PWOL_ACROSS_ROW_YL   ; across row is for right   
   STA PWOL_NEXT_ROW_A_RIGHT_YL  ;  -> next row is right, going up the screen 
   LDA NEXT_ROW_Y_H,x
   STA PWOL_NEXT_ROW_A_LEFT_YH
   ADC PWOL_ACROSS_ROW_YH
   STA PWOL_NEXT_ROW_A_RIGHT_YH


; for zig B , the opposite of left/up is right/down.. so A_LEFT * -1 = B_RIGHT
   SEC ; flip A_LEFT X to B_RIGHT X
   LDA #0
   SBC PWOL_NEXT_ROW_A_LEFT_XL
   STA PWOL_NEXT_ROW_B_RIGHT_XL
   LDA #0
   SBC PWOL_NEXT_ROW_A_LEFT_XH
   STA PWOL_NEXT_ROW_B_RIGHT_XH

   SEC ; flip A_LEFT Y to B_RIGHT Y
   LDA #0
   SBC PWOL_NEXT_ROW_A_LEFT_YL
   STA PWOL_NEXT_ROW_B_RIGHT_YL
   LDA #0
   SBC PWOL_NEXT_ROW_A_LEFT_YH
   STA PWOL_NEXT_ROW_B_RIGHT_YH

   SEC ; flip A_RIGHT X to B_LEFT X 
   LDA #0
   SBC PWOL_NEXT_ROW_A_RIGHT_XL
   STA PWOL_NEXT_ROW_B_LEFT_XL
   LDA #0
   SBC PWOL_NEXT_ROW_A_RIGHT_XH
   STA PWOL_NEXT_ROW_B_LEFT_XH

   SEC ; flip A_RIGHT Y to B_LEFT Y 
   LDA #0
   SBC PWOL_NEXT_ROW_A_RIGHT_YL
   STA PWOL_NEXT_ROW_B_LEFT_YL
   LDA #0
   SBC PWOL_NEXT_ROW_A_RIGHT_YH
   STA PWOL_NEXT_ROW_B_LEFT_YH

   LDA CAMERA_CENTER_XL
    STA PWOL_CURRENT_XL
    STA PWOL_START_XL

   LDA CAMERA_CENTER_YL
    STA PWOL_CURRENT_YL
    STA PWOL_START_YL

   LDA CAMERA_CENTER_XH
    STA PWOL_CURRENT_XH
    STA PWOL_START_XH


   LDA CAMERA_CENTER_YH
    STA PWOL_CURRENT_YH
    STA PWOL_START_YH

    LDA CAMERA_CELL_LINE_PTR
    STA PWOL_TUB_PTR_AL
    STA PWOL_TUB_PTR_BL
    LDA CAMERA_CELL_LINE_PTR+1
    STA PWOL_TUB_PTR_AH
    STA PWOL_TUB_PTR_BH

   ; STZ VERA_ctrl
   ; LDA #<(VRAM_TEXT_SCREEN+17*64)
   ; STA VERA_addr_low
   ; LDA #>(VRAM_TEXT_SCREEN+17*64)
   ; STA VERA_addr_high
   ; LDA #$21
   ; STA VERA_addr_bank
   ; LDA #26
   ; STA VERA_data0

  @zigzag_A: ; going to right and up the screen, including where we are currently.. 
    LDY camera_cell_x
    BRA @zigzag_A_right
   @ZAR_OUT: 

    @zigzag_A_right:
        CPY #64  ;  make sure we don't go outside level.. 
        BCS @ZAR_NEXT ; if we're outside we'll just skip is OK here
        LDA (PWOL_TUB_PTR_AL),y
        CMP #129
        BCS @ZAR_NEXT ; this isn't a valid spot in the level map.. 
        ; bytes 1 and 4 were updated when we cleared the object list
        INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next? 
        BNE :++
      : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out.. 
        rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen... 
      : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer 
        LDA SCREEN_Y_TO_Z,x 
        BEQ :-- ; we shouldn't be outside the screen... (could cause issues if we're high up? can't see behind?)
        STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
        LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
        LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
        STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
        TXA ; push new next to the Z buffer spot
        STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..  
        ; bytes .1..4.6 filled in already.. 
        LDA (PWOL_TUB_PTR_AL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
        BPL @ZAR_INSIDE_TUB 
      @ZAR_HIT_WALL_OUCH:
          LDA WORLD_WALL_SPRITE_NUM
          STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
          LDA #86 ; max height.. 
      @ZAR_INSIDE_TUB:
          STA PWOL_CONVERT_HEIGHTS ;  
          STA PWOL_CONVERT_HEIGHTS_L; 
          SEC        
          LDA PWOL_CURRENT_YL
          SBC (PWOL_CONVERT_HEIGHTS_L)
          LDA PWOL_CURRENT_YH ; set er up
          SBC (PWOL_CONVERT_HEIGHTS)
          CMP #SCREEN_OUT_BOTTOM    ;  are we even visible? 
          BCC :+
          CMP PWOL_TOP_CHECK  ;     #SCREEN_OUT_TOP-50 ;PWOL_TOP_CHECK;
          BCS :+
          DEC OBJECT_LIST_BYTE6_NEXT
          LDA OBJECT_LIST_BYTE6_NEXT,X ; grab the old next value 
          STA (PWOL_Z_STARTS_PTR) ; patch the old one back in.. 
          BRA @ZAR_NEXT ; and skip THIS
        : 
          STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now 
          CMP PWOL_CENTER_Y_TOP ; is this above center on screen?? 
          BCS :+ ; is not covering us 
          LDA PWOL_CURRENT_YH
          CMP PWOL_CENTER_Y
          BCC :+ ; its from ahead of us, OK            
          ; it was from below and covers us .. 
          LDA OBJECT_LIST_BYTE0_ADDRLOW,X
          ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
          STA OBJECT_LIST_BYTE0_ADDRLOW,X
          ;LDA #$D0
          ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done . 
        : LDA PWOL_CURRENT_XH
          STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete. 
          ; for debugging ... 
      ;    STZ VERA_data0
      ;    STA VERA_data0
      ;    LDA PWOL_CURRENT_YH
      ;    STA VERA_data0
      ;    STZ VERA_data0
          
     @ZAR_NEXT:
         ; calc next to the right.. 
         INY
         CLC
         LDA PWOL_CURRENT_XL
         ADC PWOL_ACROSS_ROW_XL
         STA PWOL_CURRENT_XL
         LDA PWOL_CURRENT_XH
         ADC PWOL_ACROSS_ROW_XH
         STA PWOL_CURRENT_XH
         TAX 
         CLC
         LDA PWOL_CURRENT_YL
         ADC PWOL_ACROSS_ROW_YL
         STA PWOL_CURRENT_YL
         LDA PWOL_CURRENT_YH
         ADC PWOL_ACROSS_ROW_YH
         STA PWOL_CURRENT_YH


         CMP PWOL_BOT_CHECK
         BCC :+      ;     if its within bottom definitely on screen, else check top as well.. 
         CMP #SCREEN_OUT_TOP
         BCC @ZAR_ZIG_LEFT_SWITCH ; its bottom_out <= Y < top out .. because negatives are bigger 
       : 
         CPX #SCREEN_OUT_RIGHT ; check against right side
         BCC :+                ; if its within right side then go do next thing.. 
         CPX #SCREEN_OUT_LEFT16
         BCC @ZAR_ZIG_LEFT_SWITCH ; we're to the right of the screen but not far enough to wrap around.. 
       : JMP @zigzag_A_right
     @ZAR_ZIG_LEFT_SWITCH: ;PWOL_NEXT_ROW_A_LEFT_XL   ; -> next row is left, going up the screen ..  +0,-1
         LDA #TRY_AGAIN
         STA PWOL_TRIES_COUNTER
;         INY
         SEC 
         LDA PWOL_TUB_PTR_AL
         SBC #64 ;   0,-1
         STA PWOL_TUB_PTR_AL
         LDA PWOL_TUB_PTR_AH
         SBC #0
         CMP #>TUB_WORLD ; are we inside the world still? 
         BCS :+
         JMP @zigzag_B
       : STA PWOL_TUB_PTR_AH

         CLC 
         LDA PWOL_CURRENT_XL
         ADC PWOL_NEXT_ROW_A_LEFT_XL
         STA PWOL_CURRENT_XL
         LDA PWOL_CURRENT_XH
         ADC PWOL_NEXT_ROW_A_LEFT_XH
         STA PWOL_CURRENT_XH
         TAX
         CLC 
         LDA PWOL_CURRENT_YL
         ADC PWOL_NEXT_ROW_A_LEFT_YL
         STA PWOL_CURRENT_YL
         LDA PWOL_CURRENT_YH
         ADC PWOL_NEXT_ROW_A_LEFT_YH
         BRA @ZAR_ZIG_LEFT_SWITCH_CHECK

   @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN:
         DEC PWOL_TRIES_COUNTER 
         BNE @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT
         JMP @zigzag_B
   @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT:
         DEY
         SEC
         LDA PWOL_CURRENT_XL
         SBC PWOL_ACROSS_ROW_XL
         STA PWOL_CURRENT_XL
         LDA PWOL_CURRENT_XH
         SBC PWOL_ACROSS_ROW_XH
         STA PWOL_CURRENT_XH
         TAX 
         SEC
         LDA PWOL_CURRENT_YL
         SBC PWOL_ACROSS_ROW_YL
         STA PWOL_CURRENT_YL
         LDA PWOL_CURRENT_YH
         SBC PWOL_ACROSS_ROW_YH

   @ZAR_ZIG_LEFT_SWITCH_CHECK:
         STA PWOL_CURRENT_YH
         CMP PWOL_BOT_CHECK
         BCC :+      ;     if its within bottom definitely on screen, else check top as well.. 
         CMP #SCREEN_OUT_TOP  
         BCC @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN   ; its bottom_out <= Y < top out .. because negatives are bigger 
       : CPX #SCREEN_OUT_RIGHT ; check against right side
         BCC @zigzag_A_left         
         CPX #SCREEN_OUT_LEFT16
         BCC @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN



   @zigzag_A_left:
        CPY #64  ;  make sure we don't go outside level.. 
        BCS @ZAL_NEXT ; if we're outside we'll just skip is OK 
        LDA (PWOL_TUB_PTR_AL),y
        CMP #129
        BCS @ZAL_NEXT ; we're outside level. 

        ; bytes 1 and 4 were updated when we cleared the object list
        INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next? 
        BNE :++
      : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out.. 
        rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen... 
      : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer 
        LDA SCREEN_Y_TO_Z,x 
        BEQ :-- ; we shouldn't be outside the screen... 
        STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
        LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
        LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
        STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
        TXA ; push new next to the Z buffer spot
        STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..  
        ; bytes .1..4.6 filled in already.. 
        LDA WORLD_SPRITE_NUM
        STA OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway.. 
        LDA (PWOL_TUB_PTR_AL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
        BPL @ZAL_INSIDE_TUB 
      @ZAL_HIT_WALL_OUCH:
          LDA WORLD_WALL_SPRITE_NUM
          STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
          LDA #86 ; max height.. 
      @ZAL_INSIDE_TUB:
          STA PWOL_CONVERT_HEIGHTS ;  
          STA PWOL_CONVERT_HEIGHTS_L; 
          SEC        
          LDA PWOL_CURRENT_YL
          SBC (PWOL_CONVERT_HEIGHTS_L)
          LDA PWOL_CURRENT_YH ; set er up
          SBC (PWOL_CONVERT_HEIGHTS)
          CMP #SCREEN_OUT_BOTTOM    ;  are we even visible? 
          BCC :+
          CMP PWOL_TOP_CHECK  ;     #SCREEN_OUT_TOP-50 ;PWOL_TOP_CHECK;
          BCS :+
          DEC OBJECT_LIST_BYTE6_NEXT
          LDA OBJECT_LIST_BYTE6_NEXT,X ; grab the old next value 
          STA (PWOL_Z_STARTS_PTR) ; patch the old one back in.. 
          BRA @ZAL_NEXT ; and skip THIS
        : 


          STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now 
          CMP PWOL_CENTER_Y_TOP ; is this above center on screen?? 
          BCS :+ ; is not covering us 
          LDA PWOL_CURRENT_YH
          CMP PWOL_CENTER_Y
          BCC :+ ; its from ahead of us, OK            
          ; it was from below and covers us .. 
          LDA OBJECT_LIST_BYTE0_ADDRLOW,X
          ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
          STA OBJECT_LIST_BYTE0_ADDRLOW,X
          ;LDA #$D0
          ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done . 
        : LDA PWOL_CURRENT_XH
          STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete. 
     @ZAL_NEXT:
         ; calc next to the LEFT 
         DEY
         SEC
         LDA PWOL_CURRENT_XL
         SBC PWOL_ACROSS_ROW_XL
         STA PWOL_CURRENT_XL
         LDA PWOL_CURRENT_XH
         SBC PWOL_ACROSS_ROW_XH
         STA PWOL_CURRENT_XH
         TAX 
         SEC
         LDA PWOL_CURRENT_YL
         SBC PWOL_ACROSS_ROW_YL
         STA PWOL_CURRENT_YL
         LDA PWOL_CURRENT_YH
         SBC PWOL_ACROSS_ROW_YH
         STA PWOL_CURRENT_YH


         CMP PWOL_BOT_CHECK
         BCC :+      ;     if its within bottom definitely on screen, else check top as well.. 
         CMP #SCREEN_OUT_TOP  
         BCC @ZAL_ZIG_RIGHT_SWITCH   ; its bottom_out <= Y < top out .. because negatives are bigger 
       : CPX #SCREEN_OUT_RIGHT ; check against right side
         BCC :+                ; if its within right side then go do next thing.. 
         CPX #SCREEN_OUT_LEFT16
         BCC @ZAL_ZIG_RIGHT_SWITCH     ; we're to the right of the screen but not far enough to wrap around.. 
       : JMP @zigzag_A_left   

     @ZAL_ZIG_RIGHT_SWITCH: ; up/right is +1,+1  from where we is right now .. 
         LDA #TRY_AGAIN
         STA PWOL_TRIES_COUNTER
         INY
         SEC 
         LDA PWOL_TUB_PTR_AL
         SBC #64
         STA PWOL_TUB_PTR_AL
         LDA PWOL_TUB_PTR_AH
         SBC #0
         CMP #>TUB_WORLD ; are we inside the world still? 
         BCS :+
         JMP @zigzag_B
       : STA PWOL_TUB_PTR_AH


         CLC 

         LDA PWOL_CURRENT_XL
         ADC PWOL_NEXT_ROW_A_RIGHT_XL
         STA PWOL_CURRENT_XL

         LDA PWOL_CURRENT_XH
         ADC PWOL_NEXT_ROW_A_RIGHT_XH
         STA PWOL_CURRENT_XH
         TAX


         CLC 
         LDA PWOL_CURRENT_YL
         ADC PWOL_NEXT_ROW_A_RIGHT_YL
         STA PWOL_CURRENT_YL
         LDA PWOL_CURRENT_YH
         ADC PWOL_NEXT_ROW_A_RIGHT_YH
         BRA @ZAL_ZIG_RIGHT_SWITCH_CHECK



   @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN:
         DEC PWOL_TRIES_COUNTER 
         BEQ @zigzag_B
   @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN_GO_RIGHT:
         INY
         CLC
         LDA PWOL_CURRENT_XL
         ADC PWOL_ACROSS_ROW_XL
         STA PWOL_CURRENT_XL
         LDA PWOL_CURRENT_XH
         ADC PWOL_ACROSS_ROW_XH
         STA PWOL_CURRENT_XH
         TAX 
         CLC
         LDA PWOL_CURRENT_YL
         ADC PWOL_ACROSS_ROW_YL
         STA PWOL_CURRENT_YL
         LDA PWOL_CURRENT_YH
         ADC PWOL_ACROSS_ROW_YH
   @ZAL_ZIG_RIGHT_SWITCH_CHECK:
         STA PWOL_CURRENT_YH
         CMP PWOL_BOT_CHECK
         BCC :+      ;     if its within bottom definitely on screen, else check top as well.. 
         CMP #SCREEN_OUT_TOP  
         BCC @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN    ; its bottom_out <= Y < top out .. because negatives are bigger 
       : CPX #SCREEN_OUT_RIGHT ; check against right side
         BCC :+         
         CPX #SCREEN_OUT_LEFT16
         BCC @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN 
       : JMP @zigzag_A_right         


  @zigzag_B: ; going to left and down the screen, including where we are currently.. 
      SEC 
      LDA PWOL_START_XL
      SBC PWOL_ACROSS_ROW_XL
      STA PWOL_CURRENT_XL
      LDA PWOL_START_XH
      SBC PWOL_ACROSS_ROW_XH
      STA PWOL_CURRENT_XH
  

      SEC
      LDA PWOL_START_YL
      SBC PWOL_ACROSS_ROW_YL
      STA PWOL_CURRENT_YL
      LDA PWOL_START_YH
      SBC PWOL_ACROSS_ROW_YH
      STA PWOL_CURRENT_YH

      LDY camera_cell_x   ;  eh voila! we haz pointer to ze row to start on .. woot!     
      DEY ; start left

   @zigzag_B_left:
        CPY #64  ;  make sure we don't go outside level.. 
        BCS @ZBL_NEXT ; if we're outside we'll just skip is OK 
        LDA (PWOL_TUB_PTR_BL),y
        CMP #129
        BCS @ZBL_NEXT ; we're outside level. 

        ; bytes 1 and 4 were updated when we cleared the object list
        INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next? 
        BNE :++
      : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out.. 
        rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen... 
      : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer 
        LDA SCREEN_Y_TO_Z,x 
        BEQ :-- ; we shouldn't be outside the screen... 
        STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
        LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
        LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
        STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
        TXA ; push new next to the Z buffer spot
        STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..  
        ; bytes .1..4.6 filled in already.. 
        LDA WORLD_SPRITE_NUM
        STA OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway.. 
        LDA (PWOL_TUB_PTR_BL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
        BPL @ZBL_INSIDE_TUB 
      @ZBL_HIT_WALL_OUCH:
          LDA WORLD_WALL_SPRITE_NUM
          STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
          LDA #86 ; max height.. 
      @ZBL_INSIDE_TUB:
          STA PWOL_CONVERT_HEIGHTS ;  
          STA PWOL_CONVERT_HEIGHTS_L; 
          SEC        
          LDA PWOL_CURRENT_YL
          SBC (PWOL_CONVERT_HEIGHTS_L)
          LDA PWOL_CURRENT_YH ; set er up
          SBC (PWOL_CONVERT_HEIGHTS)
          CMP #SCREEN_OUT_BOTTOM    ;  are we even visible? 
          BCC :+
          CMP PWOL_TOP_CHECK  ;     #SCREEN_OUT_TOP-50 ;PWOL_TOP_CHECK;
          BCS :+
          DEC OBJECT_LIST_BYTE6_NEXT
          LDA OBJECT_LIST_BYTE6_NEXT,X ; grab the old next value 
          STA (PWOL_Z_STARTS_PTR) ; patch the old one back in.. 
          BRA @ZBL_NEXT ; and skip THIS
        : 

          STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now 
          CMP PWOL_CENTER_Y_TOP ; is this above center on screen?? 
          BCS :+ ; is not covering us 
          LDA PWOL_CURRENT_YH
          CMP PWOL_CENTER_Y
          BCC :+ ; its from ahead of us, OK            
          ; it was from below and covers us .. 
          LDA OBJECT_LIST_BYTE0_ADDRLOW,X
          ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
          STA OBJECT_LIST_BYTE0_ADDRLOW,X
          ;LDA #$D0
          ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done . 
        : LDA PWOL_CURRENT_XH
          STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete. 
     @ZBL_NEXT:
         ; calc next to the LEFT 
         DEY
         SEC
         LDA PWOL_CURRENT_XL
         SBC PWOL_ACROSS_ROW_XL
         STA PWOL_CURRENT_XL
         LDA PWOL_CURRENT_XH
         SBC PWOL_ACROSS_ROW_XH
         STA PWOL_CURRENT_XH
         TAX 
         SEC
         LDA PWOL_CURRENT_YL
         SBC PWOL_ACROSS_ROW_YL
         STA PWOL_CURRENT_YL
         LDA PWOL_CURRENT_YH
         SBC PWOL_ACROSS_ROW_YH
         STA PWOL_CURRENT_YH


         CMP PWOL_BOT_CHECK
         BCC :+      ;     if its within bottom definitely on screen, else check top as well.. 
         CMP #SCREEN_OUT_TOP  
         BCC @ZBL_ZIG_RIGHT_SWITCH     ; its bottom_out <= Y < top out .. because negatives are bigger 
       : CPX #SCREEN_OUT_RIGHT ; check against right side
         BCC :+                ; if its within right side then go do next thing.. 
         CPX #SCREEN_OUT_LEFT16
         BCC @ZBL_ZIG_RIGHT_SWITCH     ; we're to the right of the screen but not far enough to wrap around.. 
       : JMP @zigzag_B_left



     @ZBL_ZIG_RIGHT_SWITCH: ; DOWN/LEFT to start right is is 0,+1  from where we is right now .. 
         ;INY
         ;INY
         LDA #TRY_AGAIN
         STA PWOL_TRIES_COUNTER
         CLC
         LDA PWOL_TUB_PTR_BL
         ADC #64
         STA PWOL_TUB_PTR_BL
         LDA PWOL_TUB_PTR_BH
         ADC #0
         CMP #>TUB_WORLD+8
         BCC :+
         rts
       : STA PWOL_TUB_PTR_BH


         CLC 

         LDA PWOL_CURRENT_XL
         ADC PWOL_NEXT_ROW_B_RIGHT_XL
         STA PWOL_CURRENT_XL

         LDA PWOL_CURRENT_XH
         ADC PWOL_NEXT_ROW_B_RIGHT_XH
         STA PWOL_CURRENT_XH
         TAX


         CLC 
         LDA PWOL_CURRENT_YL
         ADC PWOL_NEXT_ROW_B_RIGHT_YL
         STA PWOL_CURRENT_YL
         LDA PWOL_CURRENT_YH
         ADC PWOL_NEXT_ROW_B_RIGHT_YH
         BRA @ZBL_ZIG_RIGHT_SWITCH_CHECK

   @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN:
         DEC PWOL_TRIES_COUNTER 
         BNE @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN_GO_RIGHT
   @ZBL_RTS:
;          STZ VERA_data0
 ;         STZ VERA_data0
  ;        STZ VERA_data0
   ;       STZ VERA_data0
      rts
   @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN_GO_RIGHT:
         INY
         CLC
         LDA PWOL_CURRENT_XL
         ADC PWOL_ACROSS_ROW_XL
         STA PWOL_CURRENT_XL
         LDA PWOL_CURRENT_XH
         ADC PWOL_ACROSS_ROW_XH
         STA PWOL_CURRENT_XH
         TAX 
         CLC
         LDA PWOL_CURRENT_YL
         ADC PWOL_ACROSS_ROW_YL
         STA PWOL_CURRENT_YL
         LDA PWOL_CURRENT_YH
         ADC PWOL_ACROSS_ROW_YH
   @ZBL_ZIG_RIGHT_SWITCH_CHECK:
         STA PWOL_CURRENT_YH
         CMP PWOL_BOT_CHECK
         BCC :+      ;     if its within bottom definitely on screen, else check top as well.. 
         CMP #SCREEN_OUT_TOP  
         BCC @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN    ; its bottom_out <= Y < top out .. because negatives are bigger 
       : CPX #SCREEN_OUT_RIGHT ; check against right side
         BCC @zigzag_B_right  
         CPX #SCREEN_OUT_LEFT16
         BCC @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN



    @zigzag_B_right:
        CPY #64  ;  make sure we don't go outside level.. 
        BCS @ZBR_NEXT ; if we're outside we'll just skip is OK 
        LDA (PWOL_TUB_PTR_BL),y
        CMP #129
        BCS @ZBR_NEXT ; we're outside level. 

        ; bytes 1 and 4 were updated when we cleared the object list
        INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next? 
        BNE :++
      : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out.. 
        rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen... 
      : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer 
        LDA SCREEN_Y_TO_Z,x 
        BEQ :-- ; we shouldn't be outside the screen... 
        STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
        LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
        LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
        STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
        TXA ; push new next to the Z buffer spot
        STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..  
        ; bytes .1..4.6 filled in already.. 
        LDA WORLD_SPRITE_NUM
        STA OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway.. 
        LDA (PWOL_TUB_PTR_BL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
        BPL @ZBR_INSIDE_TUB 
      @ZBR_HIT_WALL_OUCH:
          LDA WORLD_WALL_SPRITE_NUM
          STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
          LDA #86 ; max height.. 
      @ZBR_INSIDE_TUB:
          STA PWOL_CONVERT_HEIGHTS ;  
          STA PWOL_CONVERT_HEIGHTS_L; 
          SEC        
          LDA PWOL_CURRENT_YL
          SBC (PWOL_CONVERT_HEIGHTS_L)
          LDA PWOL_CURRENT_YH ; set er up
          SBC (PWOL_CONVERT_HEIGHTS)
          CMP #SCREEN_OUT_BOTTOM    ;  are we even visible? 
          BCC :+
          CMP PWOL_TOP_CHECK  ;     #SCREEN_OUT_TOP-50 ;PWOL_TOP_CHECK;
          BCS :+
          DEC OBJECT_LIST_BYTE6_NEXT
          LDA OBJECT_LIST_BYTE6_NEXT,X ; grab the old next value 
          STA (PWOL_Z_STARTS_PTR) ; patch the old one back in.. 
          BRA @ZBR_NEXT ; and skip THIS
        : 


          STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now 
          CMP PWOL_CENTER_Y_TOP ; is this above center on screen?? 
          BCS :+ ; is not covering us 
          LDA PWOL_CURRENT_YH
          CMP PWOL_CENTER_Y
          BCC :+ ; its from ahead of us, OK            
          ; it was from below and covers us .. 
          LDA OBJECT_LIST_BYTE0_ADDRLOW,X
          ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
          STA OBJECT_LIST_BYTE0_ADDRLOW,X
          ;LDA #$D0
          ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done . 
        : LDA PWOL_CURRENT_XH
          STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete. 
     @ZBR_NEXT:
         ; calc next to the right.. 
         INY
         CLC
         LDA PWOL_CURRENT_XL
         ADC PWOL_ACROSS_ROW_XL
         STA PWOL_CURRENT_XL
         LDA PWOL_CURRENT_XH
         ADC PWOL_ACROSS_ROW_XH
         STA PWOL_CURRENT_XH
         TAX 
         CLC
         LDA PWOL_CURRENT_YL
         ADC PWOL_ACROSS_ROW_YL
         STA PWOL_CURRENT_YL
         LDA PWOL_CURRENT_YH
         ADC PWOL_ACROSS_ROW_YH
         STA PWOL_CURRENT_YH


         CMP PWOL_BOT_CHECK
         BCC :+      ;     if its within bottom definitely on screen, else check top as well.. 
         CMP #SCREEN_OUT_TOP  
         BCC @ZBR_ZIG_LEFT_SWITCH     ; its bottom_out <= Y < top out .. because negatives are bigger 
       : CPX #SCREEN_OUT_RIGHT ; check against right side
         BCC :+                ; if its within right side then go do next thing.. 
         CPX #SCREEN_OUT_LEFT16
         BCC @ZBR_ZIG_LEFT_SWITCH        ; we're to the right of the screen but not far enough to wrap around.. 
       : JMP @zigzag_B_right



     @ZBR_ZIG_LEFT_SWITCH: ;PWOL_NEXT_ROW_A_LEFT_XL   ; -> next row is left, going down the screen ..  +1,+1
         LDA #TRY_AGAIN
         STA PWOL_TRIES_COUNTER
        DEY ; have to go this to match where the thing is going .. 0,0
         CLC 
         LDA PWOL_TUB_PTR_BL
         ADC #64 ;   0,-1
         STA PWOL_TUB_PTR_BL
         LDA PWOL_TUB_PTR_BH
         ADC #0
         CMP #>TUB_WORLD+8
         BCC :+
         rts
       : STA PWOL_TUB_PTR_BH

         CLC 
         LDA PWOL_CURRENT_XL
         ADC PWOL_NEXT_ROW_B_LEFT_XL
         STA PWOL_CURRENT_XL
         LDA PWOL_CURRENT_XH
         ADC PWOL_NEXT_ROW_B_LEFT_XH
         STA PWOL_CURRENT_XH
         TAX
         CLC 
         LDA PWOL_CURRENT_YL
         ADC PWOL_NEXT_ROW_B_LEFT_YL
         STA PWOL_CURRENT_YL
         LDA PWOL_CURRENT_YH
         ADC PWOL_NEXT_ROW_B_LEFT_YH
         BRA @ZBR_ZIG_LEFT_SWITCH_CHECK



   @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN:
         DEC PWOL_TRIES_COUNTER 
         BNE @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT
   @ZBR_RTS:
;          STZ VERA_data0
;          STZ VERA_data0
;          STZ VERA_data0
;          STZ VERA_data0
         rts
   @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT:
         DEY
         SEC
         LDA PWOL_CURRENT_XL
         SBC PWOL_ACROSS_ROW_XL
         STA PWOL_CURRENT_XL
         LDA PWOL_CURRENT_XH
         SBC PWOL_ACROSS_ROW_XH
         STA PWOL_CURRENT_XH
         TAX 
         SEC
         LDA PWOL_CURRENT_YL
         SBC PWOL_ACROSS_ROW_YL
         STA PWOL_CURRENT_YL
         LDA PWOL_CURRENT_YH
         SBC PWOL_ACROSS_ROW_YH

@ZBR_ZIG_LEFT_SWITCH_CHECK:
         STA PWOL_CURRENT_YH
         CMP PWOL_BOT_CHECK
         BCC :+      ;     if its within bottom definitely on screen, else check top as well.. 
         CMP #SCREEN_OUT_TOP  
         BCC @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN   ; its bottom_out <= Y < top out .. because negatives are bigger 
       : CPX #SCREEN_OUT_RIGHT ; check against right side
         BCC :+
         CPX #SCREEN_OUT_LEFT16
         BCC @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
       : JMP @zigzag_B_left


draw_object_list:
     LDY NUM_AVAIL_SPRITES ; num sprites can write
     BNE :+
     JMP draw_object_list_to_BUFFER
   :
    LDA NUM_RESERVED_SPRITES
;    INC VERA_LOCK
;    BNE @unlock_vera   there's no actual way to get here and not have vera unlock.. s
;  so instead, we're going to DEC the VERA_LOCK after the new frame is ready, which is after this function..




    STZ VERA_ctrl
    STZ ZP_PTR
    ASL 
    ROL ZP_PTR
    ASL 
    ROL ZP_PTR
    ASL 
    ROL ZP_PTR
    STA VERA_addr_low
    CLC
    LDA ZP_PTR
    ADC #>VRAM_SPRITE_BUF;  #>VRAM_SPRITE_BUF ; #>VRAM_sprite_attributes;
    sta VERA_addr_high
    lda #$11
    sta VERA_addr_bank
    LDA SPRITE_OBJECT_ENABLE
    BNE @SET_Z_PTR 
    LDA #1
    LDX #$0C
   : STZ VERA_data0  ; addr low
     STA VERA_data0  ; mod/addr_hi
     STZ VERA_data0  ; xl
     STZ VERA_data0  ; Xh
     STZ VERA_data0  ; yl
     STZ VERA_data0  ; yh
     STX VERA_data0  
     STZ VERA_data0  
     DEY 
     BNE :-
    JMP draw_object_list_to_BUFFER


@SET_Z_PTR:
    STZ ZP_PTR
    LDA #>OBJECT_LIST_Z_START_POINTERS
    STA ZP_PTR+1


  @NEXT_Z: ; Z=0 is invalid...
      INC ZP_PTR
      BNE @Z_LOOP
      : LDA VERA_data0
        LDA VERA_data0
        STZ VERA_data0
        STZ VERA_data0
        LDA VERA_data0
        LDA VERA_data0
        LDA VERA_data0
        LDA VERA_data0
        DEY
        BNE :-
   @rts:
      rts
  @Z_LOOP:
      LDA (ZP_PTR) ; get our first victim
      TAX
      LDA #0
      STA (ZP_PTR) ; zero this Z_next for now 
      TXA
     @OBJ_LOOP:
         TAX
         BEQ @NEXT_Z ; got a bum next pointer there ... 
         LDA OBJECT_LIST_BYTE0_ADDRLOW,X
         STA VERA_data0
         LDA OBJECT_LIST_BYTE1_MODE,x
         STA VERA_data0
         LDA OBJECT_LIST_BYTE2_X,x
         STA VERA_data0
         CMP #SCREEN_OUT_RIGHT   
         LDA #0
         BCC :+
         LDA #$FF
       : STA VERA_data0

         LDA OBJECT_LIST_BYTE3_Y,x
         STA VERA_data0
         CMP #SCREEN_OUT_BOTTOM  
         LDA #0
         BCC :+
         LDA #$FF
       : STA VERA_data0
         LDA OBJECT_LIST_BYTE4_ZFLIPS,x
         STA VERA_data0
         LDA OBJECT_LIST_BYTE5_SIZE,x
         STA VERA_data0
         LDA OBJECT_LIST_BYTE6_NEXT,x
         DEY ; decrement that Y 
         BNE @OBJ_LOOP ; still sprite slots left.. woot!
         STA (ZP_PTR) ; oops.. save that last thing and exit..
draw_object_list_to_BUFFER:
DOLB_ZTRACKER = ZP_PTR
DOLB_ZTRACKERH = ZP_PTR+1
DOLB_BUFFER_HIGH_BYTE = ZP_PTR+2
DOLB_CALC_DEST_LOW = ZP_PTR+3
DOLB_CALC_DEST_HIGH = ZP_PTR+4
DOLB_CALC_SCRATCH = ZP_PTR+5
DOLB_STOP_BOTTOM = ZP_PTR+6
DOLB_Y_CALC_POINTER = ZP_PTR+7
DOLB_Y_CALC_POINTERH = ZP_PTR+8

   LDA #12
   STA VERA_ctrl    
   STZ FX_CACHE_L ; zero out the cache bytes.. 
   STZ FX_CACHE_M
   STZ FX_CACHE_H 
   STZ FX_CACHE_U 

   LDA #4  ;    DCSEL 2 with address select 0.. to be used as destination.. 
   STA VERA_ctrl 
   STZ FX_MULT 
   LDA #%01100000 
   STA FX_CTRL ;     cache write enable, cache fill and other stuff disabled
 
   STZ VERA_addr_low 
;        A        B     CURRENT BITMAP BUFFER
;   0   display  dirty    A is being displayed, B to be drawn on
;  64   display  ready    B  is ready for swap
; 128   dirty    display  B is being displayed, A to be drawn on
; 192   ready    display  A  is ready for swap

   STZ DOLB_Y_CALC_POINTER
   LDA CURRENT_BITMAP_BUFFER
   BPL @DRAW_ON_B
@DRAW_ON_A:
   LDA #>VRAM_BITMAP_LAYERA
   LDX #>VRAM_BITMAP_LAYERB
   LDY #>BUFFER_A_OFFSETS_HIGH
   BRA @GO_DRAW 
@DRAW_ON_B:
   LDA #>VRAM_BITMAP_LAYERB
   LDX #>VRAM_TEXT_SCREEN  
   LDY #>BUFFER_B_OFFSETS_HIGH
@GO_DRAW:
   STA DOLB_BUFFER_HIGH_BYTE
   DEX
   STX DOLB_STOP_BOTTOM 
   STY DOLB_Y_CALC_POINTERH
   STA VERA_addr_high
   LDA #$31; 4 at a time 
   STA VERA_addr_bank   
   ; clear the buffer ...


   CLC 
   LDA #0
   LDX #120;120 ; do 160*120 = 19,200/4 = 4,800 iterations.. if we do 20 iterations a pop.. 240 x iterations 


 : STZ VERA_data0 ;     trigger cache write - 4 bytes / 8px
   STZ VERA_data0
   STZ VERA_data0
   STZ VERA_data0 ; 32 px cleared

   STZ VERA_data0
   STZ VERA_data0
   STZ VERA_data0
   STZ VERA_data0 ; 64 px cleared

   STZ VERA_data0
   STZ VERA_data0
   STZ VERA_data0
   STZ VERA_data0 ; 96

   STZ VERA_data0
   STZ VERA_data0
   STZ VERA_data0
   STZ VERA_data0 ; 128

   STZ VERA_data0
   STZ VERA_data0
   STZ VERA_data0
   STZ VERA_data0 ; 160 px cleared

   CLC
   LDA VERA_addr_low
   ADC #80     ;     increment A for the low part the address 
   STA VERA_addr_low    
   LDA VERA_addr_high
   ADC #0
   STA VERA_addr_high   

   DEX 
   BNE :- ; 85 * 120 = 10,200 .. + 119 * 14 =1,666 .. 11,866 cycles to clear entire screen.. ok

    LDA #$E0 
   STA FX_CTRL 
;    STZ FX_CTRL
   LDA #$FF
   STA DOLB_ZTRACKER 
   LDA #>OBJECT_LIST_Z_START_POINTERS  
   STA DOLB_ZTRACKERH 
   BRA @GO_Z
  @DONE_Z: ; Z=0 is invalid...
      STZ FX_CTRL ;     clear the cache writing for now 
      STZ VERA_ctrl  ;     switch back to regular mode for now..
      RTS
  @NEXT_Z:
      DEC DOLB_ZTRACKER
      BEQ @DONE_Z
  @GO_Z:
      LDA (DOLB_ZTRACKER) ; get our first victim
      BNE @DO_OBJECT
      BRA @NEXT_Z
  @NEXT_OBJECT:
      LDA OBJECT_LIST_BYTE6_NEXT,x
      BEQ @NEXT_Z
  @DO_OBJECT:
      TAX      ;     get that pointer into X so we can do stuffs...
      ; OK so now reference OBJECT_LIST_BYTE*,X for whatever we're drawing.. and Y is free for whatever..
      ; first things first, let's figure out where in the buffer to draw.. starting with X location.. 
      LDY OBJECT_LIST_BYTE3_Y,X  
      LDA OBJECT_LIST_BYTE2_X,X  ;  
      LSR
      CMP #80
      BCC @X_POSITIVE ; check  outside screen.. left/right...
      CLC
      ADC #32 ; to <128, then to <160 of the previous Y ?
      DEY
   @X_POSITIVE:
      CPY #120 ; check inside screen.. 
      BCC @Y_POSITIVE ;   for now, just skip if outside.. 
      CPY #193
      BCC @NEXT_OBJECT
      STA VERA_addr_low
      LDA (DOLB_Y_CALC_POINTER)
      STA VERA_addr_high
      INC VERA_ctrl
      TYA 
      EOR #$FF 
      INC A 
      ASL ; x2 bytes 
      ASL ; x4 bytes
      ASL ; x8 bytes - is offset into sprite address start.. 
      STA DOLB_CALC_SCRATCH
      LDY OBJECT_LIST_BYTE1_MODE

      LDA LOW_NIBBLE_HIGH,Y 
      ASL 
      TAY 
      LDA #$08
      ROL
      STA VERA_addr_bank
      TYA 
      LDY OBJECT_LIST_BYTE0_ADDRLOW,X 
      ORA SPRITE_ADDRESS_LOW_HIGH,Y
      STA VERA_addr_high
      CLC
      LDA SPRITE_ADDRESS_LOW_LOW,Y 
      ADC DOLB_CALC_SCRATCH
      STA VERA_addr_low

      LDA OBJECT_LIST_BYTE3_Y,X
      ADC #64 ; push positive.. 
      TAY 
      BRA @Y_WAS_NEGATIVE

   @Y_POSITIVE:
      ADC BITMAP_OFFSETS_LOW,Y ; note how this works because carry isn't set.. ?
      STA VERA_addr_low
      LDA (DOLB_Y_CALC_POINTER),Y ; now do the high for the dest..
      ADC #0
      STA VERA_addr_high
      INC VERA_ctrl  ;  now we need to calculate sprite source address.. 
      LDY OBJECT_LIST_BYTE1_MODE,X
      LDA LOW_NIBBLE_HIGH,Y 
      ASL 
      TAY 
      LDA #$08
      ROL
      STA VERA_addr_bank
      TYA 
      LDY OBJECT_LIST_BYTE0_ADDRLOW,X 
      ORA SPRITE_ADDRESS_LOW_HIGH,Y
      STA VERA_addr_high
      LDA SPRITE_ADDRESS_LOW_LOW,Y 
      STA VERA_addr_low

      SEC 
      LDA #120
      SBC OBJECT_LIST_BYTE3_Y,X ;   want to check if screenH-Y < 64
      CMP #65
      BCC :+
      LDA #64
    : TAY
   @CHECK_ALIGN:
   @Y_WAS_NEGATIVE:
      DEC VERA_ctrl  ;  regain dest address
      LDA VERA_addr_low
      AND #$03
      BEQ @DO_ZERO_RIGHT
      ASL 
      ASL 
      STA FX_MULT
      BNE @CHECK_OTHER_ALIGNS
   @DO_ZERO_RIGHT:
      STZ FX_MULT
      BRA :++
   : 
      LDA VERA_addr_low
      ADC #160-8
      STA VERA_addr_low
      LDA VERA_addr_high
      ADC #0 
      STA VERA_addr_high
   :
      LDA VERA_data1
      LDA VERA_data1
      LDA VERA_data1
      LDA VERA_data1
      STZ VERA_data0      

      LDA VERA_data1
      LDA VERA_data1
      LDA VERA_data1
      LDA VERA_data1
      STZ VERA_data0      
      DEY 
      BNE :--
      JMP @NEXT_OBJECT
   @CHECK_OTHER_ALIGNS:
      CMP #8   ;  is either 4,8,12
      BCC @DO_ONE_RIGHT
      BEQ @DO_TWO_RIGHT
      CLC
      JMP @DO_THREE_RIGHT
    :
      LDA VERA_addr_low
      ADC #160-12
      STA VERA_addr_low
      LDA VERA_addr_high
      ADC #0 
      STA VERA_addr_high
   @DO_ONE_RIGHT:
      LDA VERA_data1
      LDA VERA_data1
      LDA VERA_data1
      LDA #%00000011
      STA VERA_data0      

      LDA VERA_data1
      LDA VERA_data1
      LDA VERA_data1
      LDA VERA_data1
      STZ VERA_data0      

      LDA VERA_data1
      LDA #%11111100
      STA VERA_data0      
      DEY 
      BNE :-
      JMP @NEXT_OBJECT

    :
      LDA VERA_addr_low
      ADC #160-12
      STA VERA_addr_low
      LDA VERA_addr_high
      ADC #0 
      STA VERA_addr_high
   @DO_TWO_RIGHT:
      LDA VERA_data1
      LDA VERA_data1
      LDA #%00001111
      STA VERA_data0      

      LDA VERA_data1
      LDA VERA_data1
      LDA VERA_data1
      LDA VERA_data1
      STZ VERA_data0      

      LDA VERA_data1
      LDA VERA_data1
      LDA #%11110000
      STA VERA_data0      
      DEY 
      BNE :-
      JMP @NEXT_OBJECT

    :
      LDA VERA_addr_low
      ADC #160-12
      STA VERA_addr_low
      LDA VERA_addr_high
      ADC #0 
      STA VERA_addr_high
   @DO_THREE_RIGHT:
      LDA VERA_data1
      LDA #%00111111
      STA VERA_data0      

      LDA VERA_data1
      LDA VERA_data1
      LDA VERA_data1
      LDA VERA_data1
      STZ VERA_data0      

      LDA VERA_data1
      LDA VERA_data1
      LDA VERA_data1
      LDA #%11000000
      STA VERA_data0
      DEY 
      BNE :-
      JMP @NEXT_OBJECT


test_optimal_pal_data:
;      GB   R  $1:FA00-$1:FBFF   VERA Color Palette (256 x 2 bytes)
.byte $00,$00  ; 0 - black/transparent
.byte $c8,$0f  ; 1 #ffcc88
.byte $04,$06  ; 2 #660044
.byte $00,$0C  ; 3  #cc0000
.byte $F0,$0C  ; 4#ccff00
.byte $42,$03
.byte $60,$0c   ; 6  #cc6600
.byte $40,$08   ; 7 #884400
.byte $c0,$0c   ; 8 #cccc00
.byte $6a,$02   ; 9 #2266aa mid blue
.byte $c0,$00   ; A #00cc00
.byte $ac,$07   ; B #77aacc light blue
.byte $c0,$00   ; C #0000c0 dark blue
.byte $0c,$0c   ; D #cc00cc
.byte $88,$08   ; E #888888
.byte $22,$02   ; F #222222

test_vram_data:
; 70 to 127 - start of 16x16 (each 128 byte) for testing directions / sizing.. 
.byte $11,$11,$11,$11,$11,$11,$11,$11  ;  0-15 16x10 -  0 
.byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
.byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
.byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
.byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$F1
.byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
.byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
.byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
.byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
.byte $11,$11,$11,$11,$11,$11,$11,$11  
.repeat 54
.res 8,$55
.endrepeat

.byte $11,$11,$11,$11,$11,$11,$11,$11  ;  16-31    16x10 -  0 trans
.byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
.byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
.byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
.byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
.byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
.byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
.byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
.byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
.byte $11,$11,$11,$11,$11,$11,$11,$11  
.repeat 27
.res 8,$50
.res 8,$05
.endrepeat


.byte $11,$11,$11,$11,$11,$11,$11,$11  ;  32-47    16x11 -  4 
.byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
.byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
.byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
.byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$F1
.byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
.byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
.byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
.byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
.byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
.byte $11,$11,$11,$11,$11,$11,$11,$11  
.repeat 53
.res 8,$55
.endrepeat

.byte $11,$11,$11,$11,$11,$11,$11,$11  ;  48-63    16x11 -  4 trans
.byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
.byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
.byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
.byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
.byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
.byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
.byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
.byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
.byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
.byte $11,$11,$11,$11,$11,$11,$11,$11  
.res 7,$05
.byte 0
.repeat 26
.res 8,$50
.res 7,$05
.byte 0
.endrepeat


.byte $11,$11,$11,$11,$11,$11,$11,$10  ;  64-79    15x11 - 10
.byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
.byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
.byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
.byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$10
.byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
.byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
.byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
.byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
.byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
.byte $11,$11,$11,$11,$11,$11,$11,$10  
.repeat 53
.res 7,$55
.byte $50
.endrepeat


.byte $11,$11,$11,$11,$11,$11,$11,$10  ;  80-95    15x11 - 10 trans
.byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
.byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
.byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
.byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
.byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
.byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
.byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
.byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
.byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
.byte $11,$11,$11,$11,$11,$11,$11,$10  
.res 7,$05
.byte 0
.repeat 26
.res 8,$50
.res 7,$05
.byte 0
.endrepeat

.byte $11,$11,$11,$11,$11,$11,$11,$10  ;  96-111    15x12 - 18
.byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
.byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
.byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
.byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$10
.byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
.byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
.byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
.byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
.byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
.byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
.byte $11,$11,$11,$11,$11,$11,$11,$10  
.repeat 52
.res 7,$55
.byte $50
.endrepeat


.byte $11,$11,$11,$11,$11,$11,$11,$10  ;  112-127    15x12 - 18 trans
.byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
.byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
.byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
.byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
.byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
.byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
.byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
.byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
.byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
.byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
.byte $11,$11,$11,$11,$11,$11,$11,$10  
.repeat 26
.res 8,$50
.res 7,$05
.byte 0
.endrepeat

; alernate tile graphic to use for tub wall .. 128-143 ; 16x tile
.repeat 32
    .byte $16, $16, $16, $16, $16, $16, $16, $16
    .byte $61, $61, $61, $61, $61, $61, $61, $61
.endrepeat

.repeat 32  ;  144-159
    .byte $10, $10, $10, $10, $10, $10, $10, $10
    .byte $06, $06, $06, $06, $06, $06, $06, $06
.endrepeat


.byte $11,$11,$11,$11,$11,$11,$11,$00  ;  160-175    14x12
.byte $1f,$FF,$FF,$FF,$fF,$FF,$F1,$00
.byte $1f,$FF,$FF,$FF,$fF,$FF,$F1,$00
.byte $1f,$FF,$ff,$Ff,$Ff,$fF,$F1,$00
.byte $1f,$FF,$FF,$f1,$fF,$FF,$F1,$00
.byte $1f,$FF,$FF,$Ff,$Ff,$fF,$F1,$00
.byte $1f,$FF,$FF,$fF,$FF,$FF,$F1,$00
.byte $1f,$FF,$FF,$fF,$FF,$FF,$F1,$00
.byte $1f,$FF,$FF,$FF,$FF,$FF,$F1,$00
.byte $1f,$FF,$FF,$FF,$FF,$FF,$F1,$00
.byte $1f,$FF,$FF,$FF,$FF,$FF,$F1,$00
.byte $11,$11,$11,$11,$11,$11,$11,$00  
.repeat 52
.res 7,$55
.byte 0
.endrepeat

.byte $11,$11,$11,$11,$11,$11,$11,$00  ;  176-191
.byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
.byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
.byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
.byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
.byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
.byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
.byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
.byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
.byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
.byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
.byte $11,$11,$11,$11,$11,$11,$11,$10  
.repeat 26
.res 8,$50
.res 7,$05
.byte 0
.endrepeat

; alernate tile graphic to use for tub wall .. 192-223 ; 15x tile
.repeat 32
    .byte $16, $16, $16, $16, $16, $16, $16, $10
    .byte $61, $61, $61, $61, $61, $61, $61, $60
.endrepeat

.repeat 32  ;  144-159
    .byte $10, $10, $10, $10, $10, $10, $10, $10
    .byte $06, $06, $06, $06, $06, $06, $06, $00
.endrepeat


; alernate tile graphic to use for tub wall .. 224 ; 14x tile
.repeat 32
    .byte $16, $16, $16, $16, $16, $16, $16, $00
    .byte $61, $61, $61, $61, $61, $61, $61, $00
.endrepeat

.repeat 32  ;  144-159
    .byte $10, $10, $10, $10, $10, $10, $10, $00
    .byte $06, $06, $06, $06, $06, $06, $06, $00
.endrepeat



HEX_DISPLAY_FONT:       ; 8x8x16 color = 32 bytes ... sprite addr 256
;     01   23   45   67
.byte $00, $11, $11, $00   ; 0
.byte $01, $00, $00, $10
.byte $01, $00, $00, $10
.byte $00, $00, $00, $00
.byte $01, $00, $00, $10
.byte $01, $00, $00, $10
.byte $01, $00, $00, $10
.byte $00, $11, $11, $00   ; 0 /

.byte $00, $00, $00, $00 ; 1
.byte $00, $00, $00, $10
.byte $00, $00, $00, $10
.byte $00, $00, $00, $00
.byte $00, $00, $00, $10
.byte $00, $00, $00, $10
.byte $00, $00, $00, $10
.byte $00, $00, $00, $00

.byte $00, $11, $11, $00   ; 2
.byte $00, $00, $00, $10
.byte $00, $00, $00, $10
.byte $00, $11, $11, $00
.byte $01, $00, $00, $00
.byte $01, $00, $00, $00
.byte $01, $00, $00, $00
.byte $00, $11, $11, $00   

.byte $00, $11, $11, $00   ; 3
.byte $00, $00, $00, $10
.byte $00, $00, $00, $10
.byte $00, $11, $11, $00
.byte $00, $00, $00, $10
.byte $00, $00, $00, $10
.byte $00, $00, $00, $10
.byte $00, $11, $11, $00   

.byte $00, $00, $00, $00   ; 4
.byte $01, $00, $00, $10
.byte $01, $00, $00, $10
.byte $00, $11, $11, $00
.byte $00, $00, $00, $10
.byte $00, $00, $00, $10
.byte $00, $00, $00, $10
.byte $00, $00, $00, $00   

.byte $00, $11, $11, $00   ; 5
.byte $01, $00, $00, $00
.byte $01, $00, $00, $00
.byte $00, $11, $11, $00
.byte $00, $00, $00, $10
.byte $00, $00, $00, $10
.byte $00, $00, $00, $10
.byte $00, $11, $11, $00   

.byte $00, $11, $11, $00   ; 6
.byte $01, $00, $00, $00
.byte $01, $00, $00, $00
.byte $00, $11, $11, $00
.byte $01, $00, $00, $10
.byte $01, $00, $00, $10
.byte $01, $00, $00, $10
.byte $00, $11, $11, $00   

.byte $00, $01, $01, $00 ; 7
.byte $00, $00, $00, $10
.byte $00, $00, $00, $10
.byte $00, $00, $00, $00
.byte $00, $00, $00, $10
.byte $00, $00, $00, $10
.byte $00, $00, $00, $10
.byte $00, $00, $00, $00

.byte $00, $11, $11, $00   ; 8
.byte $01, $00, $00, $10
.byte $01, $00, $00, $10
.byte $00, $11, $11, $00
.byte $01, $00, $00, $10
.byte $01, $00, $00, $10
.byte $01, $00, $00, $10
.byte $00, $11, $11, $00   

.byte $00, $11, $11, $00   ; 9
.byte $01, $00, $00, $10
.byte $01, $00, $00, $10
.byte $00, $11, $11, $00
.byte $00, $00, $00, $10
.byte $00, $00, $00, $10
.byte $00, $00, $00, $10
.byte $00, $11, $11, $00   

.byte $00, $11, $11, $00   ; A
.byte $01, $00, $00, $10
.byte $01, $00, $00, $10
.byte $00, $11, $11, $00
.byte $01, $00, $00, $10
.byte $01, $00, $00, $10
.byte $01, $00, $00, $10
.byte $00, $00, $00, $00   


.byte $00, $00, $00, $00   ; B
.byte $01, $00, $00, $00
.byte $01, $00, $00, $00
.byte $00, $11, $11, $00
.byte $01, $00, $00, $10
.byte $01, $00, $00, $10
.byte $01, $00, $00, $10
.byte $00, $11, $11, $00   

.byte $00, $11, $11, $00   ; C
.byte $01, $00, $00, $00
.byte $01, $00, $00, $00
.byte $00, $00, $00, $00
.byte $01, $00, $00, $00
.byte $01, $00, $00, $00
.byte $01, $00, $00, $00
.byte $00, $11, $11, $00   

.byte $00, $00, $00, $00   ; D
.byte $00, $00, $00, $10
.byte $00, $00, $00, $10
.byte $00, $11, $11, $00
.byte $01, $00, $00, $10
.byte $01, $00, $00, $10
.byte $01, $00, $00, $10
.byte $00, $11, $11, $00   

.byte $00, $11, $11, $00   ; E
.byte $01, $00, $00, $00
.byte $01, $00, $00, $00
.byte $00, $11, $11, $00
.byte $01, $00, $00, $00
.byte $01, $00, $00, $00
.byte $01, $00, $00, $00
.byte $00, $11, $11, $00   

.byte $00, $11, $11, $00   ; F   sprite addr 48
.byte $01, $00, $00, $00
.byte $01, $00, $00, $00
.byte $00, $11, $11, $00
.byte $01, $00, $00, $00
.byte $01, $00, $00, $00
.byte $01, $00, $00, $00
.byte $00, $00, $00, $00   

; test circle thing ... 16.. 16x16 - 128 bytes.. 
.byte $00, $00, $00, $AA, $AA, $00, $00, $00
.byte $00, $00, $AA, $AA, $AA, $AA, $00, $00
.byte $00, $0A, $AA, $AA, $AA, $AA, $A0, $00
.byte $00, $AA, $AA, $AA, $AA, $AA, $AA, $00
.byte $0A, $AA, $AA, $AA, $AA, $AA, $AA, $A0
.byte $0A, $AA, $AA, $AA, $AA, $AA, $AA, $A0
.byte $AA, $AA, $AA, $AA, $AA, $AA, $AA, $AA
.byte $AA, $AA, $AA, $AA, $AA, $AA, $AA, $AA
.byte $AA, $AA, $AA, $AA, $AA, $AA, $AA, $AA
.byte $AA, $AA, $AA, $AA, $AA, $AA, $AA, $AA
.byte $0A, $AA, $AA, $AA, $AA, $AA, $AA, $A0
.byte $0A, $AA, $AA, $AA, $AA, $AA, $AA, $A0
.byte $00, $AA, $AA, $AA, $AA, $AA, $AA, $00
.byte $00, $0A, $AA, $AA, $AA, $AA, $A0, $00
.byte $00, $00, $AA, $AA, $AA, $AA, $00, $00
.byte $00, $00, $00, $AA, $AA, $00, $00, $00

.res 384,0