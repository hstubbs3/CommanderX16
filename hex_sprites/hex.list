ca65 V2.19 - Git b993d88
Main file   : hex.s
Current file: hex.s

000000r 1               ; 	080D
000000r 1  4C rr rr     jmp start ; 	3 bytes
000003r 1               ;	0810 	- 240 bytes available for stuff that doesn't need alignment
000003r 1  DE AD BE EF  .repeat 28
000007r 1  DE AD BE EF  
00000Br 1  DE AD BE EF  
000073r 1               	.byte $DE,$AD,$BE,$EF
000073r 1               .endrepeat
000073r 1               SCRATCH128:
000073r 1  DE AD BE EF  .repeat 32
000077r 1  DE AD BE EF  
00007Br 1  DE AD BE EF  
0000F3r 1               	.byte $DE,$AD,$BE,$EF
0000F3r 1               .endrepeat
0000F3r 1               
0000F3r 1               ACROSS_ROW_X_L: ; 0900  16 wide , 45* tilt ... this is added to go up row, sub for down row
0000F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0000F3r 1  00 FE FB F4  .byte
0000F7r 1  EC E1 D3 C3  
0000FBr 1  B1 9C 85 6B  
0001F3r 1               
0001F3r 1               ACROSS_ROW_X_H: ; 0A00
0001F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0001F3r 1  10 0F 0F 0F  .byte $10, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $E, $E, $E, $E, $E, $E, $D, $D, $D, $D, $D, $C, $C, $C, $C, $B, $B, $B, $B, $A, $A, $A, $9, $9, $9, $8, $8, $8, $7, $7, $7, $6, $6, $6, $5, $5, $5, $4, $4, $3, $3, $3, $2, $2, $1, $1, $1, $0, $0, $0, $FF, $FF, $FE, $FE, $FE, $FD, $FD, $FC, $FC, $FC, $FB, $FB, $FA, $FA, $FA, $F9, $F9, $F9, $F8, $F8, $F8, $F7, $F7, $F7, $F6, $F6, $F6, $F5, $F5, $F5, $F4, $F4, $F4, $F4, $F3, $F3, $F3, $F3, $F2, $F2, $F2, $F2, $F2, $F1, $F1, $F1, $F1, $F1, $F1, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F1, $F1, $F1, $F1, $F1, $F1, $F2, $F2, $F2, $F2, $F2, $F3, $F3, $F3, $F3, $F4, $F4, $F4, $F4, $F5, $F5, $F5, $F6, $F6, $F6, $F7, $F7, $F7, $F8, $F8, $F8, $F9, $F9, $F9, $FA, $FA, $FA, $FB, $FB, $FC, $FC, $FC, $FD, $FD, $FE, $FE, $FE, $FF, $FF, $00, $0, $0, $1, $1, $1, $2, $2, $3, $3, $3, $4, $4, $5, $5, $5, $6, $6, $6, $7, $7, $7, $8, $8, $8, $9, $9, $9, $A, $A, $A, $B, $B, $B, $B, $C, $C, $C, $C, $D, $D, $D, $D, $D, $E, $E, $E, $E, $E, $E, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F
0001F7r 1  0F 0F 0F 0F  
0001FBr 1  0F 0F 0F 0F  
0002F3r 1               
0002F3r 1               ACROSS_ROW_Y_L: ; 0B00
0002F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0002F3r 1  00 B8 71 2A  .byte $0,$B8,$71,$2A,$E4,$9D,$57,$10,$CA,$85,$40,$FB,$B7,$73,$30,$ED,$AB,$6A,$29,$E9,$AA,$6C,$2E,$F2,$B6,$7C,$42,$A,$D2,$9C,$66,$32,$0,$CE,$9D,$6E,$41,$14,$E9,$C0,$97,$71,$4B,$27,$5,$E4,$C5,$A8,$8C,$71,$58,$41,$2C,$18,$6,$F6,$E7,$DA,$CF,$C5,$BD,$B7,$B3,$B0,$AF,$B0,$B3,$B7,$BD,$C5,$CF,$DA,$E7,$F6,$6,$18,$2C,$41,$58,$71,$8C,$A8,$C5,$E4,$5,$27,$4B,$71,$97,$C0,$E9,$14,$41,$6E,$9D,$CE,$0,$32,$66,$9C,$D2,$A,$42,$7C,$B6,$F2,$2E,$6C,$AA,$E9,$29,$6A,$AB,$ED,$30,$73,$B7,$FB,$40,$85,$CA,$10,$57,$9D,$E4,$2A,$71,$B8,$0,$47,$8E,$D5,$1B,$62,$A8,$EF,$35,$7A,$BF,$4,$48,$8C,$CF,$12,$54,$95,$D6,$16,$55,$93,$D1,$D,$49,$83,$BD,$F5,$2D,$63,$99,$CD,$0,$31,$62,$91,$BE,$EB,$16,$3F,$68,$8E,$B4,$D8,$FA,$1B,$3A,$57,$73,$8E,$A7,$BE,$D3,$E7,$F9,$9,$18,$25,$30,$3A,$42,$48,$4C,$4F,$50,$4F,$4C,$48,$42,$3A,$30,$25,$18,$9,$F9,$E7,$D3,$BE,$A7,$8E,$73,$57,$3A,$1B,$FA,$D8,$B4,$8E,$68,$3F,$16,$EB,$BE,$91,$62,$31,$0,$CD,$99,$63,$2D,$F5,$BD,$83,$49,$D,$D1,$93,$55,$16,$D6,$95,$54,$12,$CF,$8C,$48,$4,$BF,$7A,$35,$EF,$A8,$62,$1B,$D5,$8E,$47
0002F7r 1  E4 9D 57 10  
0002FBr 1  CA 85 40 FB  
0003F3r 1               
0003F3r 1               ACROSS_ROW_Y_H: ; 0C00
0003F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0003F3r 1  00 FF FF FF  .byte $0,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F9,$F8,$F8,$F8,$F8,$F8,$F7,$F7,$F7,$F7,$F7,$F6,$F6,$F6,$F6,$F6,$F6,$F6,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F6,$F6,$F6,$F6,$F6,$F6,$F6,$F7,$F7,$F7,$F7,$F7,$F8,$F8,$F8,$F8,$F8,$F9,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$00,$0,$0,$0,$1,$1,$1,$1,$2,$2,$2,$3,$3,$3,$3,$4,$4,$4,$4,$5,$5,$5,$5,$6,$6,$6,$6,$6,$7,$7,$7,$7,$8,$8,$8,$8,$8,$8,$9,$9,$9,$9,$9,$9,$9,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$9,$9,$9,$9,$9,$9,$9,$8,$8,$8,$8,$8,$8,$7,$7,$7,$7,$6,$6,$6,$6,$6,$5,$5,$5,$5,$4,$4,$4,$4,$3,$3,$3,$3,$2,$2,$2,$1,$1,$1,$1,$0,$0,$0
0003F7r 1  FE FE FE FE  
0003FBr 1  FD FD FD FC  
0004F3r 1               
0004F3r 1               NEXT_ROW_X_L: ; 0D00 next row LEFT/up when added
0004F3r 1  00 A9 54 00  .byte $0, $A9, $54, $0, $AE, $5D, $D, $BF, $73, $28, $DF, $98, $52, $E, $CC, $8C, $4E, $12, $D7, $9F, $69, $35, $3, $D3, $A6, $7B, $51, $2B, $6, $E4, $C4, $A6, $8B, $72, $5C, $48, $36, $27, $1A, $10, $8, $3, $0, $0, $2, $6, $D, $17, $23, $31, $42, $55, $6A, $83, $9D, $BA, $D9, $FA, $1E, $44, $6D, $97, $C4, $F3, $24, $58, $8D, $C5, $FE, $3A, $77, $B7, $F8, $3B, $80, $C7, $10, $5A, $A6, $F3, $42, $93, $E4, $38, $8D, $E3, $3A, $92, $EC, $47, $A2, $FF, $5D, $BB, $1B, $7B, $DB, $3D, $9F, $1, $64, $C8, $2B, $8F, $F4, $58, $BC, $21, $86, $EA, $4E, $B2, $16, $7A, $DD, $3F, $A2, $3, $64, $C5, $24, $83, $E1, $3E, $9A, $F5, $4F, $A8, $0, $56, $AB, $FF, $51, $A2, $F2, $40, $8C, $D7, $20, $67, $AD, $F1, $33, $73, $B1, $ED, $28, $60, $96, $CA, $FC, $2C, $59, $84, $AE, $D4, $F9, $1B, $3B, $59, $74, $8D, $A3, $B7, $C9, $D8, $E5, $EF, $F7, $FC, $FF, $FF, $FD, $F9, $F2, $E8, $DC, $CE, $BD, $AA, $95, $7C, $62, $45, $26, $5, $E1, $BB, $92, $68, $3B, $C, $DB, $A7, $72, $3A, $1, $C5, $88, $48, $7, $C4, $7F, $38, $EF, $A5, $59, $C, $BD, $6C, $1B, $C7, $72, $1C, $C5, $6D, $13, $B8, $5D, $0, $A2, $44, $E4, $84, $24, $C2, $60, $FE, $9B, $37, $D4, $70, $B, $A7, $43, $DE, $79, $15, $B1, $4D, $E9, $85, $22, $C0, $5D, $FC, $9B, $3A, $DB, $7C, $1E, $C1, $65, $A, $B0, $57
0004F7r 1  AE 5D 0D BF  
0004FBr 1  73 28 DF 98  
0005F3r 1               
0005F3r 1               NEXT_ROW_X_H: ; 0E00
0005F3r 1  F8 F7 F7 F7  .byte $F8, $F7, $F7, $F7, $F6, $F6, $F6, $F5, $F5, $F5, $F4, $F4, $F4, $F4, $F3, $F3, $F3, $F3, $F2, $F2, $F2, $F2, $F2, $F1, $F1, $F1, $F1, $F1, $F1, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F1, $F1, $F1, $F1, $F1, $F1, $F2, $F2, $F2, $F2, $F2, $F3, $F3, $F3, $F3, $F4, $F4, $F4, $F5, $F5, $F5, $F5, $F6, $F6, $F6, $F7, $F7, $F7, $F8, $F8, $F8, $F9, $F9, $F9, $FA, $FA, $FB, $FB, $FB, $FC, $FC, $FD, $FD, $FD, $FE, $FE, $FE, $FF, $FF, $0, $0, $0, $1, $1, $2, $2, $2, $3, $3, $4, $4, $4, $5, $5, $5, $6, $6, $6, $7, $7, $8, $8, $8, $8, $9, $9, $9, $A, $A, $A, $B, $B, $B, $B, $C, $C, $C, $C, $D, $D, $D, $D, $D, $E, $E, $E, $E, $E, $E, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $E, $E, $E, $E, $E, $E, $D, $D, $D, $D, $D, $C, $C, $C, $C, $B, $B, $B, $A, $A, $A, $A, $9, $9, $9, $8, $8, $8, $7, $7, $7, $6, $6, $6, $5, $5, $4, $4, $4, $3, $3, $2, $2, $2, $1, $1, $1, $0, $0, $FF, $FF, $FF, $FE, $FE, $FD, $FD, $FD, $FC, $FC, $FB, $FB, $FB, $FA, $FA, $FA, $F9, $F9, $F9, $F8, $F8
0005F7r 1  F6 F6 F6 F5  
0005FBr 1  F5 F5 F4 F4  
0006F3r 1               
0006F3r 1               NEXT_ROW_Y_L: ; 0F00
0006F3r 1  33 58 7D A5  .byte $33,$58,$7D,$A5,$CD,$F7,$23,$50,$7E,$AD,$DE,$10,$44,$78,$AE,$E4,$1C,$55,$8F,$CA,$6,$43,$81,$BF,$FE,$3F,$7F,$C1,$3,$46,$8A,$CD,$12,$57,$9C,$E2,$28,$6E,$B4,$FB,$42,$89,$D0,$17,$5E,$A5,$EC,$33,$7A,$C0,$6,$4C,$91,$D6,$1B,$5F,$A2,$E6,$28,$6A,$AB,$EB,$2B,$6A,$A8,$E5,$21,$5C,$97,$D0,$8,$3F,$75,$AA,$DE,$10,$41,$71,$A0,$CD,$F9,$24,$4D,$75,$9B,$C0,$E3,$5,$25,$44,$61,$7C,$96,$AE,$C5,$DA,$ED,$FF,$F,$1D,$29,$34,$3D,$44,$4A,$4D,$4F,$50,$4E,$4B,$46,$3F,$37,$2D,$21,$13,$4,$F3,$E0,$CC,$B6,$9E,$85,$6A,$4E,$30,$10,$EF,$CC,$A7,$82,$5A,$32,$8,$DC,$AF,$81,$52,$21,$EF,$BB,$87,$51,$1B,$E3,$AA,$70,$35,$F9,$BC,$7E,$40,$1,$C0,$80,$3E,$FC,$B9,$75,$32,$ED,$A8,$63,$1D,$D7,$91,$4B,$4,$BD,$76,$2F,$E8,$A1,$5A,$13,$CC,$85,$3F,$F9,$B3,$6E,$29,$E4,$A0,$5D,$19,$D7,$95,$54,$14,$D4,$95,$57,$1A,$DE,$A3,$68,$2F,$F7,$C0,$8A,$55,$21,$EF,$BE,$8E,$5F,$32,$6,$DB,$B2,$8A,$64,$3F,$1C,$FA,$DA,$BB,$9E,$83,$69,$51,$3A,$25,$12,$0,$F0,$E2,$D6,$CB,$C2,$BB,$B5,$B2,$B0,$AF,$B1,$B4,$B9,$C0,$C8,$D2,$DE,$EC,$FB,$C,$1F,$33,$49,$61,$7A,$95,$B1,$CF,$EF,$10
0006F7r 1  CD F7 23 50  
0006FBr 1  7E AD DE 10  
0007F3r 1               
0007F3r 1               NEXT_ROW_Y_H: ; 1000
0007F3r 1  F6 F6 F6 F6  .byte $F6,$F6,$F6,$F6,$F6,$F6,$F7,$F7,$F7,$F7,$F7,$F8,$F8,$F8,$F8,$F8,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$0,$0,$0,$0,$1,$1,$1,$2,$2,$2,$2,$3,$3,$3,$3,$4,$4,$4,$4,$5,$5,$5,$5,$6,$6,$6,$6,$7,$7,$7,$7,$7,$8,$8,$8,$8,$8,$8,$9,$9,$9,$9,$9,$9,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$9,$9,$9,$9,$9,$9,$9,$8,$8,$8,$8,$8,$7,$7,$7,$7,$7,$6,$6,$6,$6,$5,$5,$5,$5,$5,$4,$4,$4,$3,$3,$3,$3,$2,$2,$2,$2,$1,$1,$1,$1,$0,$0,$0,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F8,$F8,$F8,$F8,$F8,$F7,$F7,$F7,$F7,$F7,$F7,$F6,$F6,$F6,$F6,$F6,$F6,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F6
0007F7r 1  F6 F6 F7 F7  
0007FBr 1  F7 F7 F7 F8  
0008F3r 1               
0008F3r 1               WORLD_TO_CELL_XH: ; 1100
0008F3r 1  00 00 01 02  .byte 0,0,1,2,3,4,5,6,6,7,8,9,10,11,12,12,13,14,15,16,17,18,19,19,20,21,22,23,24,25,25,26,27,28,29,30,31,32,32,33,34,35,36,37,38,38,39,40,41,42,43,44,45,45,46,47,48,49,50,51,51,52,53,54,55,56,57,58,58,59,60,61,62,63,64,64,65,66,67,68,69,70,71,71,72,73,74,75,76,77,77,78,79,80,81,82,83,84,84,85,86,87,88,89,90,90,91,92,93,94,95,96,96,97,98,99,100,101,102,103,103,104,105,106,107,108,109,109,110,111,112,113,114,115,116,116,117,118,119,120,121,122,122,123,124,125,126,127,128,129,129,130,131,132,133,134,135,135,136,137,138,139,140,141,142,142,143,144,145,146,147,148,148,149,150,151,152,153,154,155,155,156,157,158,159,160,161,161,162,163,164,165,166,167,168,168,169,170,171,172,173,174,174,175,176,177,178,179,180,180,181,182,183,184,185,186,187,187,188,189,190,191,192,193,193,194,195,196,197,198,199,200,200,201,202,203,204,205,206,206,207,208,209,210,211,212,213,213,214,215,216,217,218,219,219,220
0008F7r 1  03 04 05 06  
0008FBr 1  06 07 08 09  
0009F3r 1               WORLD_TO_CELL_XL: ; 1200
0009F3r 1  00 DD BB 99  .byte 0,221,187,153,118,84,50,15,237,203,169,134,100,66,31,253,219,184,150,116,82,47,13,235,200,166,132,97,63,29,251,216,182,148,113,79,45,10,232,198,164,129,95,61,26,248,214,180,145,111,77,42,8,230,195,161,127,93,58,24,246,211,177,143,108,74,40,6,227,193,159,124,90,56,21,243,209,175,140,106,72,37,3,225,191,156,122,88,53,19,241,206,172,138,104,69,35,1,222,188,154,119,85,51,17,238,204,170,135,101,67,32,254,220,186,151,117,83,48,14,236,202,167,133,99,64,30,252,217,183,149,115,80,46,12,233,199,165,130,96,62,28,249,215,181,146,112,78,43,9,231,197,162,128,94,59,25,247,212,178,144,110,75,41,7,228,194,160,126,91,57,23,244,210,176,141,107,73,39,4,226,192,157,123,89,54,20,242,208,173,139,105,70,36,2,223,189,155,121,86,52,18,239,205,171,137,102,68,34,255,221,187,152,118,84,50,15,237,203,168,134,100,65,31,253,219,184,150,116,81,47,13,234,200,166,132,97,63,29,250,216,182,148,113,79,45,10,232,198,163,129,95,61,26,248,214
0009F7r 1  76 54 32 0F  
0009FBr 1  ED CB A9 86  
000AF3r 1               CELL_TO_WORLD_XH: ; 1300 ; 128 bytes
000AF3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,8,9,10,11,12,13,15,16,17,18,19,20,21,23,24,25,26,27,28,30,31,32,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,50,51,53,54,55,56,57,58,60,61,62,63,64,65,66,68,69,70,71,72,73,75,76,77,78,79,80,81,83,84,85,86,87,88,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,112,113,114,115,116,117,118,120,121,122,123,124,125,127,128,129,130,131,132,133,135,136,137,138,139,140,142,143,144,145,146
000AF7r 1  04 05 06 08  
000AFBr 1  09 0A 0B 0C  
000B73r 1               CELL_TO_WORLD_XL: ; 1380 ; 128 bytes
000B73r 1  00 27 4F 76  .byte 0,39,79,118,158,198,237,21,60,100,140,179,219,2,42,82,121,161,200,240,24,63,103,142,182,222,5,45,84,124,164,203,243,26,66,106,145,185,224,8,48,87,127,166,206,246,29,69,108,148,188,227,11,50,90,130,169,209,248,32,72,111,151,191,230,14,53,93,133,172,212,251,35,75,114,154,193,233,17,56,96,135,175,215,254,38,77,117,157,196,236,19,59,99,138,178,217,1,41,80,120,159,199,239,22,62,101,141,181,220,4,43,83,123,162,202,241,25,65,104,144,184,223,7,46,86,126,165
000B77r 1  9E C6 ED 15  
000B7Br 1  3C 64 8C B3  
000BF3r 1               
000BF3r 1               CELL_LOW_TO_WORLD_XH: ; 1400
000BF3r 1  00 00 00 00  .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
000BF7r 1  00 00 00 00  
000BFBr 1  00 00 00 00  
000CF3r 1               CELL_LOW_TO_WORLD_XL: ; 1500
000CF3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,8,9,10,11,12,13,15,16,17,18,19,20,21,23,24,25,26,27,28,30,31,32,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,50,51,53,54,55,56,57,58,60,61,62,63,64,65,66,68,69,70,71,72,73,75,76,77,78,79,80,81,83,84,85,86,87,88,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,112,113,114,115,116,117,118,120,121,122,123,124,125,127,128,129,130,131,132,133,135,136,137,138,139,140,142,143,144,145,146,147,148,150,151,152,153,154,155,157,158,159,160,161,162,163,165,166,167,168,169,170,172,173,174,175,176,177,178,180,181,182,183,184,185,187,188,189,190,191,192,193,195,196,197,198,199,200,202,203,204,205,206,207,209,210,211,212,213,214,215,217,218,219,220,221,222,224,225,226,227,228,229,230,232,233,234,235,236,237,239,240,241,242,243,244,245,247,248,249,250,251,252,254,255,0,1,2,3,4,6,7,8,9,10,11,13,14,15,16,17,18,19,21,22,23,24,25,26,28,29,30,31,32,33,34,36,37,38
000CF7r 1  04 05 06 08  
000CFBr 1  09 0A 0B 0C  
000DF3r 1               
000DF3r 1               SPRITE_NUM_HIGH_NIBBLE: ; 1600
000DF3r 1  00 00 00 00  .res 16, 0
000DF7r 1  00 00 00 00  
000DFBr 1  00 00 00 00  
000E03r 1  01 01 01 01  .res 16, 1
000E07r 1  01 01 01 01  
000E0Br 1  01 01 01 01  
000E13r 1  02 02 02 02  .res 16, 2
000E17r 1  02 02 02 02  
000E1Br 1  02 02 02 02  
000E23r 1  03 03 03 03  .res 16, 3
000E27r 1  03 03 03 03  
000E2Br 1  03 03 03 03  
000E33r 1  04 04 04 04  .res 16, 4
000E37r 1  04 04 04 04  
000E3Br 1  04 04 04 04  
000E43r 1  05 05 05 05  .res 16, 5
000E47r 1  05 05 05 05  
000E4Br 1  05 05 05 05  
000E53r 1  06 06 06 06  .res 16, 6
000E57r 1  06 06 06 06  
000E5Br 1  06 06 06 06  
000E63r 1  07 07 07 07  .res 16, 7
000E67r 1  07 07 07 07  
000E6Br 1  07 07 07 07  
000E73r 1  08 08 08 08  .res 16, 8
000E77r 1  08 08 08 08  
000E7Br 1  08 08 08 08  
000E83r 1  09 09 09 09  .res 16, 9
000E87r 1  09 09 09 09  
000E8Br 1  09 09 09 09  
000E93r 1  0A 0A 0A 0A  .res 16, 10
000E97r 1  0A 0A 0A 0A  
000E9Br 1  0A 0A 0A 0A  
000EA3r 1  0B 0B 0B 0B  .res 16, 11
000EA7r 1  0B 0B 0B 0B  
000EABr 1  0B 0B 0B 0B  
000EB3r 1  0C 0C 0C 0C  .res 16, 12
000EB7r 1  0C 0C 0C 0C  
000EBBr 1  0C 0C 0C 0C  
000EC3r 1  0D 0D 0D 0D  .res 16, 13
000EC7r 1  0D 0D 0D 0D  
000ECBr 1  0D 0D 0D 0D  
000ED3r 1  0E 0E 0E 0E  .res 16, 14
000ED7r 1  0E 0E 0E 0E  
000EDBr 1  0E 0E 0E 0E  
000EE3r 1  0F 0F 0F 0F  .res 16, 15
000EE7r 1  0F 0F 0F 0F  
000EEBr 1  0F 0F 0F 0F  
000EF3r 1               
000EF3r 1               SPRITE_NUM_LOW_NIBBLE: ; 1700
000EF3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000EF7r 1  04 05 06 07  
000EFBr 1  08 09 0A 0B  
000F03r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000F07r 1  04 05 06 07  
000F0Br 1  08 09 0A 0B  
000F13r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000F17r 1  04 05 06 07  
000F1Br 1  08 09 0A 0B  
000F23r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000F27r 1  04 05 06 07  
000F2Br 1  08 09 0A 0B  
000F33r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000F37r 1  04 05 06 07  
000F3Br 1  08 09 0A 0B  
000F43r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000F47r 1  04 05 06 07  
000F4Br 1  08 09 0A 0B  
000F53r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000F57r 1  04 05 06 07  
000F5Br 1  08 09 0A 0B  
000F63r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000F67r 1  04 05 06 07  
000F6Br 1  08 09 0A 0B  
000F73r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000F77r 1  04 05 06 07  
000F7Br 1  08 09 0A 0B  
000F83r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000F87r 1  04 05 06 07  
000F8Br 1  08 09 0A 0B  
000F93r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000F97r 1  04 05 06 07  
000F9Br 1  08 09 0A 0B  
000FA3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000FA7r 1  04 05 06 07  
000FABr 1  08 09 0A 0B  
000FB3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000FB7r 1  04 05 06 07  
000FBBr 1  08 09 0A 0B  
000FC3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000FC7r 1  04 05 06 07  
000FCBr 1  08 09 0A 0B  
000FD3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000FD7r 1  04 05 06 07  
000FDBr 1  08 09 0A 0B  
000FE3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000FE7r 1  04 05 06 07  
000FEBr 1  08 09 0A 0B  
000FF3r 1               
000FF3r 1               LOW_NIBBLE_TO_HEX: ; 1800
000FF3r 1  30 31 32 33  .repeat 16
000FF7r 1  34 35 36 37  
000FFBr 1  38 39 01 02  
0010F3r 1               ;      0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
0010F3r 1               .byte  48, 49, 50, 51, 52, 53, 54, 55, 56, 57,  1,  2,  3,  4,  5,  6
0010F3r 1               .endrepeat
0010F3r 1               
0010F3r 1               HIGH_NIBBLE_TO_HEX: ; 1900
0010F3r 1  30 30 30 30  .res 16,48
0010F7r 1  30 30 30 30  
0010FBr 1  30 30 30 30  
001103r 1  31 31 31 31  .res 16,49
001107r 1  31 31 31 31  
00110Br 1  31 31 31 31  
001113r 1  32 32 32 32  .res 16,50
001117r 1  32 32 32 32  
00111Br 1  32 32 32 32  
001123r 1  33 33 33 33  .res 16,51
001127r 1  33 33 33 33  
00112Br 1  33 33 33 33  
001133r 1  34 34 34 34  .res 16,52
001137r 1  34 34 34 34  
00113Br 1  34 34 34 34  
001143r 1  35 35 35 35  .res 16,53
001147r 1  35 35 35 35  
00114Br 1  35 35 35 35  
001153r 1  36 36 36 36  .res 16,54
001157r 1  36 36 36 36  
00115Br 1  36 36 36 36  
001163r 1  37 37 37 37  .res 16,55
001167r 1  37 37 37 37  
00116Br 1  37 37 37 37  
001173r 1  38 38 38 38  .res 16,56
001177r 1  38 38 38 38  
00117Br 1  38 38 38 38  
001183r 1  39 39 39 39  .res 16,57
001187r 1  39 39 39 39  
00118Br 1  39 39 39 39  
001193r 1  01 01 01 01  .res 16,1
001197r 1  01 01 01 01  
00119Br 1  01 01 01 01  
0011A3r 1  02 02 02 02  .res 16,2
0011A7r 1  02 02 02 02  
0011ABr 1  02 02 02 02  
0011B3r 1  03 03 03 03  .res 16,3
0011B7r 1  03 03 03 03  
0011BBr 1  03 03 03 03  
0011C3r 1  04 04 04 04  .res 16,4
0011C7r 1  04 04 04 04  
0011CBr 1  04 04 04 04  
0011D3r 1  05 05 05 05  .res 16,5
0011D7r 1  05 05 05 05  
0011DBr 1  05 05 05 05  
0011E3r 1  06 06 06 06  .res 16,6
0011E7r 1  06 06 06 06  
0011EBr 1  06 06 06 06  
0011F3r 1               CONVERT_HEIGHTS_PIXELS: ; 1A00 8 bit signed...
0011F3r 1  00 00 01 01  .byte 0,0,1,1,2,3,3,4,4,5,6,6,7,7,8,9,9,10,11,11,12,12,13,14,14,15,15,16,17,17,18,18,19,20,20,21,22,22,23,23,24,25,25,26,26,27,28,28,29,30,30,31,31,32,33,33,34,34,35,36,36,37,37,38,39,39,40,41,41,42,42,43,44,44,45,45,46,47,47,48,48,49,50,50,51,52,52,53,53,54,55,55,56,56,57,58,58,59,60,60,61,61,62,63,63,64,64,65,66,66,67,67,68,69,69,70,71,71,72,72,73,74,74,75,75,76,77,77,177,178,178,179,180,180,181,181,182,183,183,184,184,185,186,186,187,188,188,189,189,190,191,191,192,192,193,194,194,195,195,196,197,197,198,199,199,200,200,201,202,202,203,203,204,205,205,206,207,207,208,208,209,210,210,211,211,212,213,213,214,214,215,216,216,217,218,218,219,219,220,221,221,222,222,223,224,224,225,225,226,227,227,228,229,229,230,230,231,232,232,233,233,234,235,235,236,237,237,238,238,239,240,240,241,241,242,243,243,244,244,245,246,246,247,248,248,249,249,250,251,251,252,252,253,254,254,255
0011F7r 1  02 03 03 04  
0011FBr 1  04 05 06 06  
0012F3r 1               
0012F3r 1               CONVERT_HEIGHTS_PIXELS_L: ; 1B00 8 bit signed...
0012F3r 1  00 9C 39 D6  .byte 0,156,57,214,115,15,172,73,230,130,31,188,89,245,146,47,204,105,5,162,63,220,120,21,178,79,235,136,37,194,95,251,152,53,210,110,11,168,69,225,126,27,184,84,241,142,43,200,100,1,158,59,215,116,17,174,74,231,132,33,190,90,247,148,49,205,106,7,164,64,221,122,23,180,80,237,138,39,195,96,253,154,54,211,112,13,169,70,227,128,29,185,86,243,144,44,201,102,3,159,60,217,118,19,175,76,233,134,34,191,92,249,149,50,207,108,9,165,66,223,124,24,181,82,239,139,40,197,157,58,215,116,16,173,74,231,131,32,189,90,246,147,48,205,106,6,163,64,221,121,22,179,80,236,137,38,195,96,252,153,54,211,111,12,169,70,226,127,28,185,86,242,143,44,201,101,2,159,60,216,117,18,175,75,232,133,34,191,91,248,149,50,206,107,8,165,65,222,123,24,181,81,238,139,40,196,97,254,155,55,212,113,14,171,71,228,129,30,186,87,244,145,45,202,103,4,160,61,218,119,20,176,77,234,135,35,192,93,250,150,51,208,109,10,166,67,224,125,25,182,83,240,140,41,198,99
0012F7r 1  73 0F AC 49  
0012FBr 1  E6 82 1F BC  
0013F3r 1               
0013F3r 1               MOVE_Y_H: ; 1C00
0013F3r 1  00 00 00 00  .byte
0013F7r 1  00 00 00 00  
0013FBr 1  00 00 00 00  
0014F3r 1               MOVE_Y_L: ; 1D00
0014F3r 1  08 07 07 07  .byte $8,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$6,$6,$6,$6,$6,$6,$6,$6,$6,$5,$5,$5,$5,$5,$5,$5,$4,$4,$4,$4,$4,$4,$3,$3,$3,$3,$3,$3,$2,$2,$2,$2,$2,$1,$1,$1,$1,$1,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF,$FF,$0,$0,$0,$0,$0,$0,$1,$1,$1,$1,$1,$2,$2,$2,$2,$2,$3,$3,$3,$3,$3,$3,$4,$4,$4,$4,$4,$4,$5,$5,$5,$5,$5,$5,$5,$6,$6,$6,$6,$6,$6,$6,$6,$6,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7
0014F7r 1  07 07 07 07  
0014FBr 1  07 07 07 07  
0015F3r 1               MOVE_X_H: ; 1E00
0015F3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
0015F7r 1  00 00 00 00  
0015FBr 1  00 00 00 00  
0016F3r 1               MOVE_X_L: ; 1F00
0016F3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$1,$1,$1,$1,$1,$1,$2,$2,$2,$2,$2,$2,$2,$3,$3,$3,$3,$3,$3,$3,$4,$4,$4,$4,$4,$4,$4,$5,$5,$5,$5,$5,$5,$5,$5,$5,$5,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$5,$5,$5,$5,$5,$5,$5,$5,$5,$5,$4,$4,$4,$4,$4,$4,$4,$3,$3,$3,$3,$3,$3,$3,$2,$2,$2,$2,$2,$2,$2,$1,$1,$1,$1,$1,$1,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FB,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF,$FF
0016F7r 1  00 00 01 01  
0016FBr 1  01 01 01 01  
0017F3r 1               
0017F3r 1               WORLD_MAP:
0017F3r 1               TUB_WORLD_INC: ; 32*64 = 2K ... is 2000 to 2800-1
0017F3r 1               .include "tub_world_hieghts_01.inc"
0017F3r 2               
0017F3r 2               
0017F3r 2               
0017F3r 2               
0017F3r 2               
0017F3r 2               
0017F3r 2               ; 0 to 128 will be water level. >128 = distance along row to water (neg) , 128 = no water this row.
0017F3r 2               ; rows are stored within 64 byte rows
0017F3r 2               ; 	  0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63
0017F3r 2  FF FF FF FF  .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 30
0017F7r 2  FF FF FF FF  
0017FBr 2  FF FF FF FF  
001833r 2  FF FF FF FF  .byte   $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF ; 29
001837r 2  FF FF FF FF  
00183Br 2  FF FF FF FF  
001873r 2  FF FF FF FF  .byte     $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF ; 28
001877r 2  FF FF FF FF  
00187Br 2  FF FF FF FF  
0018B3r 2  FF FF FF FF  .byte       $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF ; 27
0018B7r 2  FF FF FF FF  
0018BBr 2  FF FF FF FF  
0018F3r 2  FF FF FF FF  .byte         $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF ; 26
0018F7r 2  FF FF FF FF  
0018FBr 2  FF FF FF FF  
001933r 2  FF FF FF FF  .byte           $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 25
001937r 2  FF FF FF FF  
00193Br 2  FF FF FF FF  
001973r 2  FF FF FF FF  .byte             $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 24
001977r 2  FF FF FF FF  
00197Br 2  FF FF FF FF  
0019B3r 2  FF FF FF FF  .byte               $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 23
0019B7r 2  FF FF FF FF  
0019BBr 2  FF FF FF 80  
0019F3r 2  FF FF FF FF  .byte                 $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 22
0019F7r 2  FF FF FF FF  
0019FBr 2  FF FF 80 00  
001A33r 2  FF FF FF FF  .byte                   $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF; 21
001A37r 2  FF FF FF FF  
001A3Br 2  FF 80 00 00  
001A73r 2  FF FF FF FF  .byte                     $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF ; 20
001A77r 2  FF FF FF FF  
001A7Br 2  FF 80 00 00  
001AB3r 2  FF FF FF FF  .byte                       $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF ; 19
001AB7r 2  FF FF FF FF  
001ABBr 2  80 00 00 00  
001AF3r 2  FF FF FF FF  .byte                         $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 18
001AF7r 2  FF FF FF FF  
001AFBr 2  80 00 00 00  
001B33r 2  FF FF FF FF  .byte                           $FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 17
001B37r 2  FF FF FF 80  
001B3Br 2  00 00 00 00  
001B73r 2  FF FF FF FF  .byte                             $FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF ; 16
001B77r 2  FF FF FF 80  
001B7Br 2  00 00 00 00  
001BB3r 2  FF FF FF FF  .byte                               $FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF ; 15
001BB7r 2  FF FF 80 00  
001BBBr 2  00 00 00 00  
001BF3r 2  FF FF FF FF  .byte                                 $FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 14
001BF7r 2  FF FF 80 00  
001BFBr 2  00 00 00 00  
001C33r 2  FF FF FF FF  .byte                                   $FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 13
001C37r 2  FF 80 00 00  
001C3Br 2  00 00 00 00  
001C73r 2  FF FF FF FF  .byte                                     $FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 12
001C77r 2  FF 80 00 00  
001C7Br 2  00 00 00 00  
001CB3r 2  FF FF FF FF  .byte                                       $FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 11
001CB7r 2  80 00 00 00  
001CBBr 2  00 00 00 00  
001CF3r 2  FF FF FF FF  .byte                                         $FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 10
001CF7r 2  80 00 00 00  
001CFBr 2  00 00 00 00  
001D33r 2  FF FF FF 80  .byte                                           $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 9
001D37r 2  00 00 00 00  
001D3Br 2  00 00 00 00  
001D73r 2  FF FF FF 80  .byte                                             $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 8
001D77r 2  00 00 00 00  
001D7Br 2  00 00 00 00  
001DB3r 2  FF FF FF 80  .byte                                               $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 7
001DB7r 2  00 00 00 00  
001DBBr 2  00 00 00 00  
001DF3r 2  FF FF FF 80  .byte                                                 $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 6
001DF7r 2  00 00 00 00  
001DFBr 2  00 00 00 00  
001E33r 2  FF FF FF 80  .byte                                                   $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 5
001E37r 2  00 00 00 00  
001E3Br 2  00 00 00 00  
001E73r 2  FF FF FF 80  .byte                                                     $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 4
001E77r 2  00 00 00 00  
001E7Br 2  00 00 00 00  
001EB3r 2  FF FF FF 80  .byte                                                       $FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 3
001EB7r 2  80 00 00 00  
001EBBr 2  00 00 00 00  
001EF3r 2  FF FF FF FF  .byte                                                         $FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 2
001EF7r 2  80 80 00 00  
001EFBr 2  00 00 00 00  
001F33r 2  FF FF FF FF  .byte                                                           $FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 01
001F37r 2  FF 80 80 00  
001F3Br 2  00 00 00 00  
001F73r 2  FF FF FF FF  .byte                                                             $FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 00 tub wall north
001F77r 2  FF FF 80 80  
001F7Br 2  80 80 80 80  
001FB3r 2  FF FF FF FF  .res 64,$FF
001FB7r 2  FF FF FF FF  
001FBBr 2  FF FF FF FF  
001FF3r 2               
001FF3r 2               
001FF3r 2               
001FF3r 1               
001FF3r 1               TUB_WORLD            = $A000
001FF3r 1               TUB_WORLD_LOW        = $A800
001FF3r 1               WATER_CALC_SCRATCH   = $B000
001FF3r 1               WATER_CALC_SCRATCH_LOW = $B800
001FF3r 1               
001FF3r 1               SCREEN_Y_TO_Z: ; 3100 this is shifted to be within range so that 192 =0 and -16 is 255
001FF3r 1  EB EA E8 E7  .byte 235,234,232,231,230,229,227,226,225,224,223,221,220,219,218,216,215,214,213,211,210,209,208,207,205,204,203,202,200,199,198,197,195,194,193,192,191,189,188,187,186,184,183,182,181,179,178,177,176,175,173,172,171,170,168,167,166,165,163,162,161,160,159,157,156,155,154,152,151,150,149,147,146,145,144,143,141,140,139,138,136,135,134,133,131,130,129,128,127,125,124,123,122,120,119,118,117,115,114,113,112,111,109,108,107,106,104,103,102,101,99,98,97,96,95,93,92,91,90,88,87,86,85,83,82,81,80,79,77,76,75,74,72,71,70,69,67,66,65,64,63,61,60,59,58,56,55,54,53,51,50,49,48,47,45,44,43,42,40,39,38,37,35,34,33,32,31,29,28,27,26,24,23,22,21,19,18,17,16,15,13,12,11,10,8,7,6,5,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,253,252,251,250,248,247,246,245,243,242,241,240,239,237,236
001FF7r 1  E6 E5 E3 E2  
001FFBr 1  E1 E0 DF DD  
0020F3r 1               SUBCELL_X_COS_L: ; 3200
0020F3r 1  00 FF FF FF  .byte $0,$FF,$FF,$FF,$FE,$FE,$FD,$FC,$FB,$F9,$F8,$F6,$F4,$F3,$F1,$EE,$EC,$EA,$E7,$E4,$E1,$DE,$DB,$D8,$D4,$D1,$CD,$C9,$C5,$C1,$BD,$B9,$B5,$B0,$AB,$A7,$A2,$9D,$98,$93,$8E,$88,$83,$7E,$78,$73,$6D,$67,$61,$5C,$56,$50,$4A,$44,$3E,$38,$31,$2B,$25,$1F,$19,$12,$C,$6,$0,$F9,$F3,$ED,$E6,$E0,$DA,$D4,$CE,$C7,$C1,$BB,$B5,$AF,$A9,$A3,$9E,$98,$92,$8C,$87,$81,$7C,$77,$71,$6C,$67,$62,$5D,$58,$54,$4F,$4A,$46,$42,$3E,$3A,$36,$32,$2E,$2B,$27,$24,$21,$1E,$1B,$18,$15,$13,$11,$E,$C,$B,$9,$7,$6,$4,$3,$2,$1,$1,$0,$0,$0,$0,$0,$0,$0,$1,$1,$2,$3,$4,$6,$7,$9,$B,$C,$E,$11,$13,$15,$18,$1B,$1E,$21,$24,$27,$2B,$2E,$32,$36,$3A,$3E,$42,$46,$4A,$4F,$54,$58,$5D,$62,$67,$6C,$71,$77,$7C,$81,$87,$8C,$92,$98,$9E,$A3,$A9,$AF,$B5,$BB,$C1,$C7,$CE,$D4,$DA,$E0,$E6,$ED,$F3,$F9,$0,$6,$C,$12,$19,$1F,$25,$2B,$31,$38,$3E,$44,$4A,$50,$56,$5C,$61,$67,$6D,$73,$78,$7E,$83,$88,$8E,$93,$98,$9D,$A2,$A7,$AB,$B0,$B5,$B9,$BD,$C1,$C5,$C9,$CD,$D1,$D4,$D8,$DB,$DE,$E1,$E4,$E7,$EA,$EC,$EE,$F1,$F3,$F4,$F6,$F8,$F9,$FB,$FC,$FD,$FE,$FE,$FF,$FF,$FF
0020F7r 1  FE FE FD FC  
0020FBr 1  FB F9 F8 F6  
0021F3r 1               SUBCELL_X_COS_H: ; 3300
0021F3r 1  01 00 00 00  .byte
0021F7r 1  00 00 00 00  
0021FBr 1  00 00 00 00  
0022F3r 1               SUBCELL_X_SIN_H: ; 3400
0022F3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
0022F7r 1  00 00 00 00  
0022FBr 1  00 00 00 00  
0023F3r 1               SUBCELL_X_SIN_L: ; 3500
0023F3r 1  00 05 0A 10  .byte $0,$5,$A,$10,$15,$1B,$20,$25,$2B,$30,$35,$3B,$40,$45,$4A,$4F,$54,$59,$5E,$63,$68,$6D,$71,$76,$7B,$7F,$84,$88,$8C,$90,$94,$98,$9C,$A0,$A4,$A7,$AB,$AE,$B2,$B5,$B8,$BB,$BE,$C0,$C3,$C6,$C8,$CA,$CC,$CE,$D0,$D2,$D4,$D5,$D7,$D8,$D9,$DA,$DB,$DC,$DC,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DC,$DC,$DB,$DA,$D9,$D8,$D7,$D5,$D4,$D2,$D0,$CE,$CC,$CA,$C8,$C6,$C3,$C0,$BE,$BB,$B8,$B5,$B2,$AE,$AB,$A7,$A4,$A0,$9C,$98,$94,$90,$8C,$88,$84,$7F,$7B,$76,$71,$6D,$68,$63,$5E,$59,$54,$4F,$4A,$45,$40,$3B,$35,$30,$2B,$25,$20,$1B,$15,$10,$A,$5,$0,$FA,$F5,$EF,$EA,$E4,$DF,$DA,$D4,$CF,$CA,$C4,$BF,$BA,$B5,$B0,$AB,$A6,$A1,$9C,$97,$92,$8E,$89,$84,$80,$7B,$77,$73,$6F,$6B,$67,$63,$5F,$5B,$58,$54,$51,$4D,$4A,$47,$44,$41,$3F,$3C,$39,$37,$35,$33,$31,$2F,$2D,$2B,$2A,$28,$27,$26,$25,$24,$23,$23,$22,$22,$22,$22,$22,$22,$22,$23,$23,$24,$25,$26,$27,$28,$2A,$2B,$2D,$2F,$31,$33,$35,$37,$39,$3C,$3F,$41,$44,$47,$4A,$4D,$51,$54,$58,$5B,$5F,$63,$67,$6B,$6F,$73,$77,$7B,$80,$84,$89,$8E,$92,$97,$9C,$A1,$A6,$AB,$B0,$B5,$BA,$BF,$C4,$CA,$CF,$D4,$DA,$DF,$E4,$EA,$EF,$F5,$FA
0023F7r 1  15 1B 20 25  
0023FBr 1  2B 30 35 3B  
0024F3r 1               SUBCELL_Y_COS_H: ; 3600
0024F3r 1  00 00 00 00  .byte
0024F7r 1  00 00 00 00  
0024FBr 1  00 00 00 00  
0025F3r 1               SUBCELL_Y_COS_L: ; 3700
0025F3r 1  9C 9C 9C 9C  .byte $9C,$9C,$9C,$9C,$9C,$9B,$9B,$9A,$99,$98,$98,$97,$96,$94,$93,$92,$90,$8F,$8D,$8C,$8A,$88,$86,$84,$82,$80,$7D,$7B,$79,$76,$74,$71,$6E,$6C,$69,$66,$63,$60,$5D,$5A,$57,$53,$50,$4D,$49,$46,$43,$3F,$3B,$38,$34,$31,$2D,$29,$26,$22,$1E,$1A,$17,$13,$F,$B,$7,$3,$0,$FC,$F8,$F4,$F0,$EC,$E8,$E5,$E1,$DD,$D9,$D6,$D2,$CE,$CB,$C7,$C4,$C0,$BC,$B9,$B6,$B2,$AF,$AC,$A8,$A5,$A2,$9F,$9C,$99,$96,$93,$91,$8E,$8B,$89,$86,$84,$82,$7F,$7D,$7B,$79,$77,$75,$73,$72,$70,$6F,$6D,$6C,$6B,$69,$68,$67,$67,$66,$65,$64,$64,$63,$63,$63,$63,$63,$63,$63,$63,$63,$64,$64,$65,$66,$67,$67,$68,$69,$6B,$6C,$6D,$6F,$70,$72,$73,$75,$77,$79,$7B,$7D,$7F,$82,$84,$86,$89,$8B,$8E,$91,$93,$96,$99,$9C,$9F,$A2,$A5,$A8,$AC,$AF,$B2,$B6,$B9,$BC,$C0,$C4,$C7,$CB,$CE,$D2,$D6,$D9,$DD,$E1,$E5,$E8,$EC,$F0,$F4,$F8,$FC,$0,$3,$7,$B,$F,$13,$17,$1A,$1E,$22,$26,$29,$2D,$31,$34,$38,$3B,$3F,$43,$46,$49,$4D,$50,$53,$57,$5A,$5D,$60,$63,$66,$69,$6C,$6E,$71,$74,$76,$79,$7B,$7D,$80,$82,$84,$86,$88,$8A,$8C,$8D,$8F,$90,$92,$93,$94,$96,$97,$98,$98,$99,$9A,$9B,$9B,$9C,$9C,$9C,$9C
0025F7r 1  9C 9B 9B 9A  
0025FBr 1  99 98 98 97  
0026F3r 1               SUBCELL_Y_SIN_H: ; 3800
0026F3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
0026F7r 1  00 00 00 00  
0026FBr 1  00 00 00 00  
0027F3r 1               SUBCELL_Y_SIN_L: ; 3900
0027F3r 1  00 04 08 0D  .byte $0,$4,$8,$D,$11,$16,$1A,$1E,$23,$27,$2B,$30,$34,$38,$3C,$41,$45,$49,$4D,$51,$55,$59,$5D,$60,$64,$68,$6B,$6F,$72,$76,$79,$7C,$7F,$83,$86,$89,$8B,$8E,$91,$93,$96,$98,$9B,$9D,$9F,$A1,$A3,$A5,$A7,$A8,$AA,$AB,$AD,$AE,$AF,$B0,$B1,$B2,$B3,$B3,$B4,$B4,$B4,$B4,$B5,$B4,$B4,$B4,$B4,$B3,$B3,$B2,$B1,$B0,$AF,$AE,$AD,$AB,$AA,$A8,$A7,$A5,$A3,$A1,$9F,$9D,$9B,$98,$96,$93,$91,$8E,$8B,$89,$86,$83,$80,$7C,$79,$76,$72,$6F,$6B,$68,$64,$60,$5D,$59,$55,$51,$4D,$49,$45,$41,$3C,$38,$34,$30,$2B,$27,$23,$1E,$1A,$16,$11,$D,$8,$4,$0,$FB,$F7,$F2,$EE,$E9,$E5,$E1,$DC,$D8,$D4,$CF,$CB,$C7,$C3,$BE,$BA,$B6,$B2,$AE,$AA,$A6,$A2,$9F,$9B,$97,$94,$90,$8D,$89,$86,$83,$80,$7C,$79,$76,$74,$71,$6E,$6C,$69,$67,$64,$62,$60,$5E,$5C,$5A,$58,$57,$55,$54,$52,$51,$50,$4F,$4E,$4D,$4C,$4C,$4B,$4B,$4B,$4B,$4A,$4B,$4B,$4B,$4B,$4C,$4C,$4D,$4E,$4F,$50,$51,$52,$54,$55,$57,$58,$5A,$5C,$5E,$60,$62,$64,$67,$69,$6C,$6E,$71,$74,$76,$79,$7C,$80,$83,$86,$89,$8D,$90,$94,$97,$9B,$9F,$A2,$A6,$AA,$AE,$B2,$B6,$BA,$BE,$C3,$C7,$CB,$CF,$D4,$D8,$DC,$E1,$E5,$E9,$EE,$F2,$F7,$FB
0027F7r 1  11 16 1A 1E  
0027FBr 1  23 27 2B 30  
0028F3r 1               
0028F3r 1               
0028F3r 1               
0028F3r 1               WORLD_SPRITE_CENTER_XH: ; 3A00 128 bytes
0028F3r 1  64 64 64 64  .byte
0028F7r 1  64 64 64 64  
0028FBr 1  64 64 64 64  
002973r 1               WORLD_SPRITE_CENTER_XL: ; 3A80 128 bytes
002973r 1  00 0D 1B 29  .byte $0,$D,$1B,$29,$36,$43,$51,$5E,$6B,$78,$85,$92,$9F,$AB,$B8,$C4,$D1,$DD,$E9,$F6,$2,$E,$A,$FE,$F2,$E5,$D9,$CD,$C0,$B4,$A7,$9A,$8E,$81,$74,$67,$5A,$4C,$3F,$32,$24,$16,$9,$4,$12,$20,$2D,$3B,$48,$55,$62,$6F,$7C,$89,$96,$A3,$B0,$BC,$C9,$D5,$E1,$EE,$FA,$6,$12,$13,$FA,$EE,$E1,$D5,$C9,$BC,$B0,$A3,$96,$89,$7C,$6F,$62,$55,$48,$3B,$2D,$20,$12,$4,$9,$16,$24,$32,$3F,$4C,$5A,$67,$74,$81,$8E,$9A,$A7,$B4,$C0,$CD,$D9,$E5,$F2,$FE,$A,$E,$2,$F6,$E9,$DD,$D1,$C4,$B8,$AB,$9F,$92,$85,$78,$6B,$5E,$51,$43,$36,$29,$1B,$D
002977r 1  36 43 51 5E  
00297Br 1  6B 78 85 92  
0029F3r 1               WORLD_SPRITE_CENTER_YH: ; 3B00 128 bytes
0029F3r 1  4C 4C 4C 4C  .byte $4C,$4C,$4C,$4C,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4C,$4C,$4C,$4C,$4C,$4C,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4C,$4C,$4C,$4C,$4C,$4C,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4C,$4C,$4C
0029F7r 1  4B 4B 4B 4B  
0029FBr 1  4B 4B 4B 4B  
002A73r 1               WORLD_SPRITE_CENTER_YL: ; 3B80 128 bytes
002A73r 1  19 11 08 00  .byte $19,$11,$8,$0,$F7,$EE,$E6,$DD,$D4,$CB,$C2,$B9,$B0,$A7,$9D,$94,$8B,$81,$78,$6E,$64,$5B,$5E,$68,$71,$7B,$84,$8E,$97,$A0,$AA,$B3,$BC,$C5,$CE,$D7,$E0,$E8,$F1,$FA,$3,$B,$14,$17,$E,$5,$FD,$F4,$EB,$E3,$DA,$D1,$C8,$BF,$B6,$AD,$A3,$9A,$91,$87,$7E,$74,$6B,$61,$57,$57,$6B,$74,$7E,$87,$91,$9A,$A3,$AD,$B6,$BF,$C8,$D1,$DA,$E3,$EB,$F4,$FD,$5,$E,$17,$14,$B,$3,$FA,$F1,$E8,$E0,$D7,$CE,$C5,$BC,$B3,$AA,$A0,$97,$8E,$84,$7B,$71,$68,$5E,$5B,$64,$6E,$78,$81,$8B,$94,$9D,$A7,$B0,$B9,$C2,$CB,$D4,$DD,$E6,$EE,$F7,$0,$8,$11
002A77r 1  F7 EE E6 DD  
002A7Br 1  D4 CB C2 B9  
002AF3r 1               
002AF3r 1               WORLD_SPRITE_NUM_lookies: ; 3C00 128 bytes
002AF3r 1               ;      0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
002AF3r 1  00 00 00 00  .byte   0,  0,  0,  0, 32, 32, 32, 32, 32, 32, 64, 64, 64, 64, 64, 64
002AF7r 1  20 20 20 20  
002AFBr 1  20 20 40 40  
002B03r 1  40 40 60 60  .byte  64, 64, 96, 96,160,160,160, 96, 96, 96, 64, 64, 64, 64, 64, 64
002B07r 1  A0 A0 A0 60  
002B0Br 1  60 60 40 40  
002B13r 1  40 40 20 20  .byte  64, 64, 32, 32, 32, 32, 32, 32,  0,  0,  0,  0,  0,  0, 32, 32
002B17r 1  20 20 20 20  
002B1Br 1  00 00 00 00  
002B23r 1  20 20 20 20  .byte  32, 32, 32, 32, 32, 64, 64, 64, 64, 64, 64, 64, 96, 96, 96,160
002B27r 1  20 40 40 40  
002B2Br 1  40 40 40 40  
002B33r 1  A0 A0 60 60  .byte 160,160, 96, 96, 96, 64, 64, 64, 64, 64, 64, 64, 32, 32, 32, 32
002B37r 1  60 40 40 40  
002B3Br 1  40 40 40 40  
002B43r 1  20 20 20 00  .byte  32, 32, 32,  0,  0,  0,  0,  0,  0, 32, 32, 32, 32, 32, 32, 64
002B47r 1  00 00 00 00  
002B4Br 1  00 20 20 20  
002B53r 1  40 40 40 40  .byte  64, 64, 64, 64, 64, 64, 64, 96, 96, 96,160,160,160, 96, 96, 64
002B57r 1  40 40 40 60  
002B5Br 1  60 60 A0 A0  
002B63r 1  40 40 40 40  .byte  64, 64, 64, 64, 64, 64, 64, 32, 32, 32, 32, 32, 32,  0,  0,  0
002B67r 1  40 40 40 20  
002B6Br 1  20 20 20 20  
002B73r 1               WORLD_WALL_SPRITE_NUM_lookies: ; 3C80
002B73r 1  80 80 80 80  .byte 128,128,128,128,128,128,128,128,128,128,192,192,192,192,192,192
002B77r 1  80 80 80 80  
002B7Br 1  80 80 C0 C0  
002B83r 1  C0 C0 C0 C0  .byte 192,192,192,192,224,224,224,192,192,192,192,192,192,192,192,192
002B87r 1  E0 E0 E0 C0  
002B8Br 1  C0 C0 C0 C0  
002B93r 1  C0 C0 80 80  .byte 192,192,128,128,128,128,128,128,128,128,128,128,128,128,128,128
002B97r 1  80 80 80 80  
002B9Br 1  80 80 80 80  
002BA3r 1  80 80 80 80  .byte 128,128,128,128,128,192,192,192,192,192,192,192,192,192,192,224
002BA7r 1  80 C0 C0 C0  
002BABr 1  C0 C0 C0 C0  
002BB3r 1  E0 E0 C0 C0  .byte 224,224,192,192,192,192,192,192,192,192,192,192,128,128,128,128
002BB7r 1  C0 C0 C0 C0  
002BBBr 1  C0 C0 C0 C0  
002BC3r 1  80 80 80 80  .byte 128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,192
002BC7r 1  80 80 80 80  
002BCBr 1  80 80 80 80  
002BD3r 1  C0 C0 C0 C0  .byte 192,192,192,192,192,192,192,192,192,192,224,224,224,192,192,192
002BD7r 1  C0 C0 C0 C0  
002BDBr 1  C0 C0 E0 E0  
002BE3r 1  C0 C0 C0 C0  .byte 192,192,192,192,192,192,192,128,128,128,128,128,128,128,128,128
002BE7r 1  C0 C0 C0 80  
002BEBr 1  80 80 80 80  
002BF3r 1               
002BF3r 1               SPRITE_ADDRESS_LOW_HIGH: ; 3D00
002BF3r 1  00 00 00 00  .byte 0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31
002BF7r 1  00 00 00 00  
002BFBr 1  01 01 01 01  
002CF3r 1               
002CF3r 1               SPRITE_ADDRESS_LOW_LOW: ; 3E00
002CF3r 1  00 20 40 60  .byte 0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224
002CF7r 1  80 A0 C0 E0  
002CFBr 1  00 20 40 60  
002DF3r 1               
002DF3r 1               NIBBLE_SWAPPER: ; 3F00
002DF3r 1               ;      0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
002DF3r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
002DF7r 1  40 50 60 70  
002DFBr 1  80 90 A0 B0  
002E03r 1  01 11 21 31  .byte $01,$11,$21,$31,$41,$51,$61,$71,$81,$91,$A1,$B1,$C1,$D1,$E1,$F1
002E07r 1  41 51 61 71  
002E0Br 1  81 91 A1 B1  
002E13r 1  02 12 22 32  .byte $02,$12,$22,$32,$42,$52,$62,$72,$82,$92,$A2,$B2,$C2,$D2,$E2,$F2
002E17r 1  42 52 62 72  
002E1Br 1  82 92 A2 B2  
002E23r 1  03 13 23 33  .byte $03,$13,$23,$33,$43,$53,$63,$73,$83,$93,$A3,$B3,$C3,$D3,$E3,$F3
002E27r 1  43 53 63 73  
002E2Br 1  83 93 A3 B3  
002E33r 1  04 14 24 34  .byte $04,$14,$24,$34,$44,$54,$64,$74,$84,$94,$A4,$B4,$C4,$D4,$E4,$F4
002E37r 1  44 54 64 74  
002E3Br 1  84 94 A4 B4  
002E43r 1  05 15 25 35  .byte $05,$15,$25,$35,$45,$55,$65,$75,$85,$95,$A5,$B5,$C5,$D5,$E5,$F5
002E47r 1  45 55 65 75  
002E4Br 1  85 95 A5 B5  
002E53r 1  06 16 26 36  .byte $06,$16,$26,$36,$46,$56,$66,$76,$86,$96,$A6,$B6,$C6,$D6,$E6,$F6
002E57r 1  46 56 66 76  
002E5Br 1  86 96 A6 B6  
002E63r 1  07 17 27 37  .byte $07,$17,$27,$37,$47,$57,$67,$77,$87,$97,$A7,$B7,$C7,$D7,$E7,$F7
002E67r 1  47 57 67 77  
002E6Br 1  87 97 A7 B7  
002E73r 1  08 18 28 38  .byte $08,$18,$28,$38,$48,$58,$68,$78,$88,$98,$A8,$B8,$C8,$D8,$E8,$F8
002E77r 1  48 58 68 78  
002E7Br 1  88 98 A8 B8  
002E83r 1  09 19 29 39  .byte $09,$19,$29,$39,$49,$59,$69,$79,$89,$99,$A9,$B9,$C9,$D9,$E9,$F9
002E87r 1  49 59 69 79  
002E8Br 1  89 99 A9 B9  
002E93r 1  0A 1A 2A 3A  .byte $0A,$1A,$2A,$3A,$4A,$5A,$6A,$7A,$8A,$9A,$AA,$BA,$CA,$DA,$EA,$FA
002E97r 1  4A 5A 6A 7A  
002E9Br 1  8A 9A AA BA  
002EA3r 1  0B 1B 2B 3B  .byte $0B,$1B,$2B,$3B,$4B,$5B,$6B,$7B,$8B,$9B,$AB,$BB,$CB,$DB,$EB,$FB
002EA7r 1  4B 5B 6B 7B  
002EABr 1  8B 9B AB BB  
002EB3r 1  0C 1C 2C 3C  .byte $0C,$1C,$2C,$3C,$4C,$5C,$6C,$7C,$8C,$9C,$AC,$BC,$CC,$DC,$EC,$FC
002EB7r 1  4C 5C 6C 7C  
002EBBr 1  8C 9C AC BC  
002EC3r 1  0D 1D 2D 3D  .byte $0D,$1D,$2D,$3D,$4D,$5D,$6D,$7D,$8D,$9D,$AD,$BD,$CD,$DD,$ED,$FD
002EC7r 1  4D 5D 6D 7D  
002ECBr 1  8D 9D AD BD  
002ED3r 1  0E 1E 2E 3E  .byte $0E,$1E,$2E,$3E,$4E,$5E,$6E,$7E,$8E,$9E,$AE,$BE,$CE,$DE,$EE,$FE
002ED7r 1  4E 5E 6E 7E  
002EDBr 1  8E 9E AE BE  
002EE3r 1  0F 1F 2F 3F  .byte $0F,$1F,$2F,$3F,$4F,$5F,$6F,$7F,$8F,$9F,$AF,$BF,$CF,$DF,$EF,$FF
002EE7r 1  4F 5F 6F 7F  
002EEBr 1  8F 9F AF BF  
002EF3r 1               
002EF3r 1               LOW_NIBBLE_HIGH: ; 4000
002EF3r 1               ;      0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
002EF3r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
002EF7r 1  40 50 60 70  
002EFBr 1  80 90 A0 B0  
002F03r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
002F07r 1  40 50 60 70  
002F0Br 1  80 90 A0 B0  
002F13r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
002F17r 1  40 50 60 70  
002F1Br 1  80 90 A0 B0  
002F23r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
002F27r 1  40 50 60 70  
002F2Br 1  80 90 A0 B0  
002F33r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
002F37r 1  40 50 60 70  
002F3Br 1  80 90 A0 B0  
002F43r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
002F47r 1  40 50 60 70  
002F4Br 1  80 90 A0 B0  
002F53r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
002F57r 1  40 50 60 70  
002F5Br 1  80 90 A0 B0  
002F63r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
002F67r 1  40 50 60 70  
002F6Br 1  80 90 A0 B0  
002F73r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
002F77r 1  40 50 60 70  
002F7Br 1  80 90 A0 B0  
002F83r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
002F87r 1  40 50 60 70  
002F8Br 1  80 90 A0 B0  
002F93r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
002F97r 1  40 50 60 70  
002F9Br 1  80 90 A0 B0  
002FA3r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
002FA7r 1  40 50 60 70  
002FABr 1  80 90 A0 B0  
002FB3r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
002FB7r 1  40 50 60 70  
002FBBr 1  80 90 A0 B0  
002FC3r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
002FC7r 1  40 50 60 70  
002FCBr 1  80 90 A0 B0  
002FD3r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
002FD7r 1  40 50 60 70  
002FDBr 1  80 90 A0 B0  
002FE3r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
002FE7r 1  40 50 60 70  
002FEBr 1  80 90 A0 B0  
002FF3r 1               
002FF3r 1               
002FF3r 1               ; 4100
002FF3r 1               
002FF3r 1               OBJECT_LIST_Z_START_POINTERS: ; 3100
002FF3r 1  00 00 00 00  .res 256,0
002FF7r 1  00 00 00 00  
002FFBr 1  00 00 00 00  
0030F3r 1               OBJECT_LIST_BYTE0_ADDRLOW: ; 1A00 addr low
0030F3r 1  00 00 00 00  .res 256,0
0030F7r 1  00 00 00 00  
0030FBr 1  00 00 00 00  
0031F3r 1               OBJECT_LIST_BYTE1_MODE: ; 1B00 mode/addr bank
0031F3r 1  00 00 00 00  .res 256,0
0031F7r 1  00 00 00 00  
0031FBr 1  00 00 00 00  
0032F3r 1               OBJECT_LIST_BYTE2_X: ; 1C00 X position onscreen ( assumed positive for now)
0032F3r 1  00 00 00 00  .res 256,0
0032F7r 1  00 00 00 00  
0032FBr 1  00 00 00 00  
0033F3r 1               OBJECT_LIST_BYTE3_Y: ; 1D00 y position onscreen
0033F3r 1  00 00 00 00  .res 256,0
0033F7r 1  00 00 00 00  
0033FBr 1  00 00 00 00  
0034F3r 1               OBJECT_LIST_BYTE4_ZFLIPS: ; 1E00 collision / z / flips
0034F3r 1  00 00 00 00  .res 256,0
0034F7r 1  00 00 00 00  
0034FBr 1  00 00 00 00  
0035F3r 1               OBJECT_LIST_BYTE5_SIZE: ; 1F00 size / pal offset
0035F3r 1  00 00 00 00  .res 256,0
0035F7r 1  00 00 00 00  
0035FBr 1  00 00 00 00  
0036F3r 1               OBJECT_LIST_BYTE6_NEXT: ; 2000 NEXT
0036F3r 1  00 00 00 00  .res 256,0
0036F7r 1  00 00 00 00  
0036FBr 1  00 00 00 00  
0037F3r 1               
0037F3r 1               BUFFER_A_OFFSETS_HIGH: ; 128 bytes
0037F3r 1  18 18 19 19  .byte 24,24,25,25,26,27,27,28,29,29,30,30,31,32,32,33,34,34,35,35,36,37,37,38,39,39,40,40,41,42,42,43,44,44,45,45,46,47,47,48,49,49,50,50,51,52,52,53,54,54,55,55,56,57,57,58,59,59,60,60,61,62,62,63,64,64,65,65,66,67,67,68,69,69,70,70,71,72,72,73,74,74,75,75,76,77,77,78,79,79,80,80,81,82,82,83,84,84,85,85,86,87,87,88,89,89,90,90,91,92,92,93,94,94,95,95,96,97,97,98,99,99,100,100,101,102,102,103
0037F7r 1  1A 1B 1B 1C  
0037FBr 1  1D 1D 1E 1E  
003873r 1               
003873r 1               BITMAP_OFFSETS_LOW: ; 128 bytes
003873r 1  00 A0 40 E0  .byte 0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96
003877r 1  80 20 C0 60  
00387Br 1  00 A0 40 E0  
0038F3r 1               
0038F3r 1               BUFFER_B_OFFSETS_HIGH: ; 3080    128 bytes
0038F3r 1  80 80 81 81  .byte 128,128,129,129,130,131,131,132,133,133,134,134,135,136,136,137,138,138,139,139,140,141,141,142,143,143,144,144,145,146,146,147,148,148,149,149,150,151,151,152,153,153,154,154,155,156,156,157,158,158,159,159,160,161,161,162,163,163,164,164,165,166,166,167,168,168,169,169,170,171,171,172,173,173,174,174,175,176,176,177,178,178,179,179,180,181,181,182,183,183,184,184,185,186,186,187,188,188,189,189,190,191,191,192,193,193,194,194,195,196,196,197,198,198,199,199,200,201,201,202,203,203,204,204,205,206,206,207
0038F7r 1  82 83 83 84  
0038FBr 1  85 85 86 86  
003973r 1               
003973r 1               
003973r 1               
003973r 1               
003973r 1               
003973r 1               ;constants
003973r 1               ;--------------------------------
003973r 1               
003973r 1               ; RAM Interrupt Vectors
003973r 1               IRQVec            = $0314
003973r 1               
003973r 1               ; VERA
003973r 1               VERA_addr_low     = $9F20
003973r 1               VERA_addr_high    = $9F21
003973r 1               VERA_addr_bank    = $9F22
003973r 1               VERA_data0        = $9F23
003973r 1               VERA_data1        = $9F24
003973r 1               VERA_ctrl         = $9F25
003973r 1               VERA_ien          = $9F26
003973r 1               VERA_isr          = $9F27
003973r 1               VERA_dc_video     = $9F29 ; DCSEL = 0
003973r 1               FX_CTRL           = $9F29 ; DCSEL = 2
003973r 1               FX_MULT           = $9F2C ; DCSEL = 2
003973r 1               FX_CACHE_L        = $9F29 ; DCSEL = 6
003973r 1               FX_CACHE_M        = $9F2A
003973r 1               FX_CACHE_H        = $9F2B
003973r 1               FX_CACHE_U        = $9F2C
003973r 1               ;   Current Field | Sprites Enable | Layer1 Enable  |Layer0 Enable
003973r 1               ; NTSC/RGB: 240P  | NTSC: Chroma Disable / RGB: HV Sync Output Mode
003973r 1               
003973r 1               VERA_dc_hscale    = $9F2A
003973r 1               VERA_dc_vscale    = $9F2B
003973r 1               
003973r 1               VERA_L0_config    = $9F2D
003973r 1               ;   7       6     5   4       3       2             1   0
003973r 1               ;   Map Height | Map Width | T256C | Bitmap Mode | Color Depth
003973r 1               ;   0 - 32                  0 - 16    0 tiled       0   1bpp mono
003973r 1               ;   1 - 64                  1 - 256   1 enabled     1   2bpp 4 color
003973r 1               ;   2 - 128                                         2   4bpp 16 color
003973r 1               ;   3 - 256                                         3   8bpp 256 color
003973r 1               ;   bitmap mode - tilebase points to bitmap data, mapbase not used
003973r 1               ;   tile width = 0 is 320 pixels / tile width=1 is 640 pixels.. so could do 4bpp x 320?
003973r 1               ;   The palette offset (in 'H-Scroll (11:8)') modifies the color indexes of the bitmap in the same way as in the tile modes.
003973r 1               
003973r 1               VERA_L0_mapbase   = $9F2E
003973r 1               VERA_L0_tilebase  = $9F2F ;   Tile Base Address (16:11) | Tile Height 0-8/1-16 | Tile Width 0-8/1-16
003973r 1               VERA_L0_HSCROLL_L = $9F30 ;  H-Scroll (7:0)
003973r 1               VERA_L0_HSCROLL_H = $9F31 ;  - H-Scroll (11:8)
003973r 1               VERA_L0_VSCROLL_L = $9F32 ;  V-Scroll (7:0)
003973r 1               VERA_L0_VSCROLL_H = $9F33 ;  - V-Scroll (11:8)
003973r 1               
003973r 1               VERA_L1_config    = $9F34
003973r 1               VERA_L1_mapbase   = $9F35
003973r 1               VERA_L1_tilebase  = $9F36
003973r 1               VERA_L1_HSCROLL_L = $9F37 ;  H-Scroll (7:0)
003973r 1               VERA_L1_HSCROLL_H = $9F38 ;  - H-Scroll (11:8)
003973r 1               VERA_L1_VSCROLL_L = $9F39 ;  V-Scroll (7:0)
003973r 1               VERA_L1_VSCROLL_H = $9F3A ;  - V-Scroll (11:8)
003973r 1               
003973r 1               VSYNC_BIT         = $01
003973r 1               
003973r 1               ; VRAM Addresses
003973r 1               ;   Address range Description
003973r 1               ;   $00000 - $1F9BF Video RAM   - 129,424 bytes -> 126K is 129,024 (1F800)
003973r 1               ;   $1F9C0 - $1F9FF PSG registers
003973r 1               ;   $1FA00 - $1FBFF Palette
003973r 1               ;   $1FC00 - $1FFFF Sprite attributes
003973r 1               VRAM_SPRITES =      $00000  ; putting sprite data at start of VRAM for now.. may move later?
003973r 1               VRAM_BITMAP_LAYERA =$11800  ; setting this to 68K ; was starts at 70K ... so up to ~70K for sprites.. not too shabby..
003973r 1               VRAM_BITMAP_LAYERB =$18000  ; ~25K needs to start at 2K boundary... 121.5-25= 96k
003973r 1               VRAM_TEXT_SCREEN =  $1E400  ; 121.5K    256 x 21 => 32 x 24 would take 1.5K tiles is min.. 64*32 = 2K 8 config..
003973r 1               VRAM_SPRITE_BUF =   $1EC00  ; 123K - sprite attribute buffer for swapping data in ..
003973r 1               VRAM_CHARSET =      $1F000  ;  $1:F000-$1:F7FF Charset loaded by kernal here .. is at 124K ..
003973r 1               ; only can go to 126K ...
003973r 1               VRAM_palette      = $1FA00      ;
003973r 1               VRAM_sprite_attributes = $1FC00
003973r 1               
003973r 1               SPRITES_ONLY_VGA = $41
003973r 1               SPRITES_LAYER1_LAYER0_VGA = $71
003973r 1               
003973r 1               
003973r 1               ; Kernal
003973r 1               CHROUT            = $FFD2
003973r 1               GETIN             = $FFE4
003973r 1               CINT              = $FF81
003973r 1               
003973r 1               
003973r 1               ; PETSCII Codes
003973r 1               WHITE             = $05
003973r 1               RETURN            = $0D
003973r 1               SPACE             = $20
003973r 1               ZERO_CHAR         = $30
003973r 1               ONE_CHAR          = $31
003973r 1               TWO_CHAR          = $32
003973r 1               THREE_CHAR        = $33
003973r 1               FOUR_CHAR         = $34
003973r 1               FIVE_CHAR         = $35
003973r 1               SIX_CHAR          = $36
003973r 1               SEVEN_CHAR        = $37
003973r 1               EIGHT_CHAR        = $38
003973r 1               NINE_CHAR         = $39
003973r 1               
003973r 1               A_CHAR            = $41
003973r 1               C_CHAR            = $43
003973r 1               D_CHAR            = $44
003973r 1               E_CHAR            = $45
003973r 1               I_CHAR            = $49
003973r 1               J_CHAR            = $4A
003973r 1               K_CHAR            = $4B
003973r 1               L_CHAR            = $4C
003973r 1               O_CHAR            = $4F
003973r 1               T_CHAR            = $54
003973r 1               W_CHAR            = $57
003973r 1               X_CHAR            = $58
003973r 1               Y_CHAR            = $59
003973r 1               Z_CHAR            = $5A
003973r 1               
003973r 1               CLR               = $93
003973r 1               
003973r 1               ; 	$0800-$9EFF	BASIC program/variables; available to the user
003973r 1               WORLD_DATA = $6000 	;	so is %100 [Y 5 bits ] : [ab] 0 [X - 6 bits
003973r 1               SCREEN_buffer = $8000
003973r 1               
003973r 1               ; zero page layout $0022-$007F is available to user
003973r 1               ZP_PTR = $22
003973r 1               SCRATCH_PTR = $7E
003973r 1               
003973r 1               SPRITE_SIZE_ORA = $D0 ; $D0 for 16x64, $50 for 16x16
003973r 1               
003973r 1               diff_sprite_to_transparent = 15
003973r 1               
003973r 1               SCREEN_OUT_RIGHT  = 160 ; right of middle is 116, +48 = 164
003973r 1               SCREEN_OUT_LEFT8    = 256-8
003973r 1               SCREEN_OUT_LEFT16   = 256-16  ; left of middle is 100, -48=52-16=36
003973r 1               SCREEN_OUT_LEFT32   = 256-32  ; left of middle is 100, -48=52-16=36
003973r 1               SCREEN_OUT_LEFT64   = 256-64  ; left of middle is 100, -48=52-16=36
003973r 1               SCREEN_OUT_TOP     = 240
003973r 1               SCREEN_OUT_BOTTOM  = 120
003973r 1               
003973r 1               ; global data ; 2E00
003973r 1  00 00        default_irq_vector:  .addr 0 ; 4-5
003975r 1               ; current cell values in neighborhood...
003975r 1  FF           CELL_VAL_UPLEFT:  .byte 255
003976r 1  FF           CELL_VAL_UPRIGHT: .byte 255
003977r 1  FF           CELL_VAL_LEFT:    .byte 255
003978r 1  FF           CELL_VAL_SELF:    .byte 255
003979r 1  FF           CELL_VAL_RIGHT:   .byte 255
00397Ar 1  FF           CELL_VAL_DOWNLEFT: .byte 255
00397Br 1  FF           CELL_VAL_DOWNRIGHT: .byte 255
00397Cr 1               
00397Cr 1  DE AD BE EF  GLOBAL_DATA:         .byte $DE,$AD,$BE,$EF ; 0-1
003980r 1               ;line 0
003980r 1  00 00        MASTER_CLOCK:        .addr 0 ; 6-7
003982r 1  00           .byte 0
003983r 1  00           STATUS:              .byte 0
003984r 1               ;line 1
003984r 1  00           .byte 0
003985r 1  01           VSYNC_counter:       .byte 1 ; 8
003986r 1  00           STALL_COUNTERH:      .byte 0
003987r 1  00           STALL_COUNTER:       .byte 0
003988r 1               ;line 2
003988r 1  00           .byte 0
003989r 1  00           LAST_VSYNC_COUNTER:  .byte 0
00398Ar 1  00           LAST_STALLCOUNTERH:  .byte 0
00398Br 1  00           LAST_STALLCOUNTER:   .byte 0
00398Cr 1               ; line 3
00398Cr 1  FF           VERA_LOCK:           .byte 255 ; 9 value written to screen is value at time DEBUG_WRITE
00398Dr 1  50           IRQ_VERA_LOCK:       .byte 80 ; value of VERA_LOCK when reached the Interrupt
00398Er 1  40           CURRENT_BITMAP_BUFFER: .byte 64 ;
00398Fr 1               ;        A        B     CURRENT BITMAP BUFFER
00398Fr 1               ;   0   display  dirty    A is being displayed, B to be drawn on
00398Fr 1               ;  64   display  ready    B  is ready for swap
00398Fr 1               ; 128   dirty    display  B is being displayed, A to be drawn on
00398Fr 1               ; 192   ready    display  A  is ready for swap
00398Fr 1  00           LAST_BITMAP_BUFFER:    .byte 0 ;
003990r 1               
003990r 1               ; line 4
003990r 1  01           camera_facing: 		 .byte 1 ; 7
003991r 1  00           .byte 0
003992r 1  00           CAMERA_CENTER_XH:    .byte 0 ; 13
003993r 1  00           CAMERA_CENTER_YH:    .byte 0 ; 15
003994r 1               ; line 5
003994r 1  00           camera_cell_x: 		 .byte 0 ; c
003995r 1  00           camera_cell_xl:       .byte 0 ; d
003996r 1  00           camera_cell_y: 		 .byte 0 ; e
003997r 1  00           camera_cell_yl:       .byte 0 ; f
003998r 1               ; line 6
003998r 1  2C           camera_world_pos_XH:    .byte 44 ; 8
003999r 1  30           camera_world_pos_XL:       .byte 48 ; 9
00399Ar 1  0F           camera_world_pos_YH:        .byte 15 ; A
00399Br 1  80           camera_world_pos_YL:       .byte 128  ; B
00399Cr 1               ; line 7
00399Cr 1  00           DO_WATER:   .byte 0 ;
00399Dr 1  00           DO_FAUCET:  .byte 0 ;
00399Er 1  00           CALC_WATER: .byte 0 ;
00399Fr 1               ; line 8
00399Fr 1  80           NUM_AVAIL_SPRITES:   .byte 128 ; A
0039A0r 1  00           NUM_RESERVED_SPRITES:    .byte  0;(1+NUM_RESERVED_SPRITES-MASTER_CLOCK) << 1 ; F
0039A1r 1  FF           SPRITE_OBJECT_ENABLE: .byte 255 ;255 ;
0039A2r 1               
0039A2r 1  00           CAMERA_CENTER_XL:    .byte 0 ; 12
0039A3r 1  00           CAMERA_CENTER_YL:    .byte 0 ; 14
0039A4r 1  00           CAMERA_CENTER_TOP_PX: .byte 0 ; 16
0039A5r 1  00 00        CAMERA_CELL_LINE_PTR: .addr 0 ; 17-18
0039A7r 1  00           WORLD_SPRITE_NUM:    .byte 0 ; 1B
0039A8r 1  00           WORLD_WALL_SPRITE_NUM: .byte 0; 1C
0039A9r 1  FF           BUFFER_A_DIRTY:        .byte 255 ;
0039AAr 1  FF           BUFFER_B_DIRTY:        .byte 255 ;
0039ABr 1               
0039ABr 1  F0           camera_screen_out_top: .byte SCREEN_OUT_TOP       ; for determining visibility / stop conditions for checking if within range to view..
0039ACr 1  78           camera_screen_out_bottom: .byte SCREEN_OUT_BOTTOM
0039ADr 1               
0039ADr 1  00 00        CAMERA_WORLD_LINE_PTR: .addr 0
0039AFr 1               ENDGLOBALS:
0039AFr 1               
0039AFr 1               .macro stash_scratch
0039AFr 1               	STA (SCRATCH_PTR)
0039AFr 1                   INC SCRATCH_PTR
0039AFr 1               .endmacro
0039AFr 1               
0039AFr 1               
0039AFr 1               custom_irq_handler: ; 2E12
0039AFr 1  AD 27 9F        lda VERA_isr
0039B2r 1  29 01           and #VSYNC_BIT
0039B4r 1  F0 11           BEQ :++
0039B6r 1                  ;  for debug ..
0039B6r 1  AD rr rr        LDA VERA_LOCK
0039B9r 1  8D rr rr        STA IRQ_VERA_LOCK
0039BCr 1               
0039BCr 1  EE rr rr        INC VSYNC_counter
0039BFr 1               
0039BFr 1  EE rr rr        INC VERA_LOCK
0039C2r 1  F0 06           BEQ :+++  ; @unlock_vera ; if we don't have lock we'll just fail this frame..
0039C4r 1                @NOP_nothing_to_do:
0039C4r 1  CE rr rr      : DEC VERA_LOCK
0039C7r 1  6C rr rr      : jmp (default_irq_vector)
0039CAr 1               
0039CAr 1  AD rr rr      : LDA CURRENT_BITMAP_BUFFER
0039CDr 1  4D rr rr        EOR LAST_BITMAP_BUFFER
0039D0r 1  F0 F2           BEQ :--- ; if these match then there's nothing to change
0039D2r 1               ;   CLC
0039D2r 1  AD rr rr        LDA CURRENT_BITMAP_BUFFER
0039D5r 1  8D rr rr        STA LAST_BITMAP_BUFFER
0039D8r 1               ;        A        B     CURRENT BITMAP BUFFER
0039D8r 1               ;   0   display  dirty    A is being displayed, B to be drawn on
0039D8r 1               ;  64   display  ready    B  is ready for swap
0039D8r 1               ; 128   dirty    display  B is being displayed, A to be drawn on
0039D8r 1               ; 192   ready    display  A  is ready for swap
0039D8r 1  30 0B           BMI @DISPLAY_B
0039DAr 1               @DISPLAY_A:
0039DAr 1  F0 E8           BEQ @NOP_nothing_to_do ;
0039DCr 1  A9 80           LDA #128
0039DEr 1  8D rr rr        STA CURRENT_BITMAP_BUFFER
0039E1r 1  A9 C0           LDA #VRAM_BITMAP_LAYERB>>9
0039E3r 1  80 09           BRA @GO_SWAP
0039E5r 1               @DISPLAY_B:
0039E5r 1  C9 80           CMP #128
0039E7r 1  F0 DB           BEQ @NOP_nothing_to_do
0039E9r 1  9C rr rr        STZ CURRENT_BITMAP_BUFFER
0039ECr 1  A9 8C           LDA #VRAM_BITMAP_LAYERA>>9
0039EEr 1               @GO_SWAP:
0039EEr 1  8D 2F 9F        STA VERA_L0_tilebase
0039F1r 1               
0039F1r 1  A9 01           LDA #$01
0039F3r 1  8D 25 9F        STA VERA_ctrl
0039F6r 1               
0039F6r 1  A2 FF           LDX #$FF
0039F8r 1  8E 20 9F        STX VERA_addr_low
0039FBr 1  8E 21 9F        STX VERA_addr_high
0039FEr 1  A9 19           LDA #$19
003A00r 1  8D 22 9F        STA VERA_addr_bank
003A03r 1               
003A03r 1  9C 25 9F        STZ VERA_ctrl  ;  reset to address 0
003A06r 1  8D 22 9F        STA VERA_addr_bank
003A09r 1               
003A09r 1  A9 EF           LDA #$EF
003A0Br 1  8D 21 9F        STA VERA_addr_high
003A0Er 1  8E 20 9F        STX VERA_addr_low
003A11r 1               
003A11r 1  AE rr rr        LDX NUM_AVAIL_SPRITES
003A14r 1  AD 23 9F      : LDA VERA_data0   ;  4
003A17r 1  8D 24 9F        STA VERA_data1   ;  4  20
003A1Ar 1  AD 23 9F        LDA VERA_data0   ;  4  8
003A1Dr 1  8D 24 9F        STA VERA_data1   ;  4  20
003A20r 1  AD 23 9F        LDA VERA_data0   ;  4  12
003A23r 1  8D 24 9F        STA VERA_data1   ;  4  20
003A26r 1  AD 23 9F        LDA VERA_data0   ;  4  16
003A29r 1  8D 24 9F        STA VERA_data1   ;  4  20
003A2Cr 1  AD 23 9F        LDA VERA_data0   ;  4
003A2Fr 1  8D 24 9F        STA VERA_data1   ;  4  20
003A32r 1  AD 23 9F        LDA VERA_data0   ;  4  8
003A35r 1  8D 24 9F        STA VERA_data1   ;  4  20
003A38r 1  AD 23 9F        LDA VERA_data0   ;  4  12
003A3Br 1  8D 24 9F        STA VERA_data1   ;  4  20
003A3Er 1  AD 23 9F        LDA VERA_data0   ;  4  16
003A41r 1  8D 24 9F        STA VERA_data1   ;  4  20
003A44r 1  CA              DEX         ;  2  22
003A45r 1  D0 CD           BNE :-      ;  3  25       8per byte = 64 per sprite + 5 = 69 per * 128 = 8,832 cycles
003A47r 1               
003A47r 1  6C rr rr        jmp (default_irq_vector)
003A4Ar 1                  ; RTI will happen after jump
003A4Ar 1               
003A4Ar 1               
003A4Ar 1               ;TUB_WORLD:    "presentation" layer
003A4Ar 1               ;TUB_WORLD_LOW: hidden low bytes
003A4Ar 1               ;WATER_CALC_SCRATCH: scratch layer for bouncing
003A4Ar 1               ;WATER_CALC_SCRATCH_LOW: scratch layer for bouncing
003A4Ar 1               
003A4Ar 1               
003A4Ar 1               ; produce downright to scratch for next row to use as upleft...
003A4Ar 1               .macro calc_row row, start, end ; depending even/odd, ZP_PTR[0,1] or ZP_PTR[2,3] should contain starting downright+
003A4Ar 1               ;  going to 14bit here ..
003A4Ar 1               .local SELF
003A4Ar 1               .local SELF_H
003A4Ar 1               .local SELF_L
003A4Ar 1               .local SC_UPLEFT_H ; scratch upleft
003A4Ar 1               .local SC_UPLEFT_L
003A4Ar 1               .local LEFT_H
003A4Ar 1               .local LEFT_L
003A4Ar 1               .local DOWNLEFT_H
003A4Ar 1               .local DOWNLEFT_L
003A4Ar 1               .local SC_SELF_H ; scratch self
003A4Ar 1               .local SC_SELF_L
003A4Ar 1               .local COUNT
003A4Ar 1               .local ZP_SCRATCH_AH
003A4Ar 1               .local ZP_SCRATCH_AL
003A4Ar 1               .local ZP_SCRATCH_BH
003A4Ar 1               .local ZP_SCRATCH_BL
003A4Ar 1               .local ZP_SELF_L
003A4Ar 1               .local ZP_SC_SELF_H
003A4Ar 1               .local ODDSTART
003A4Ar 1                  SELF = (64*row)+start-1
003A4Ar 1                  SELF_H = TUB_WORLD+SELF
003A4Ar 1                  SELF_L = TUB_WORLD_LOW+SELF
003A4Ar 1                  SC_SELF_H = WATER_CALC_SCRATCH+SELF
003A4Ar 1                  SC_SELF_L = WATER_CALC_SCRATCH_LOW+SELF
003A4Ar 1                  SC_UPLEFT_H = SC_SELF_H-64
003A4Ar 1                  SC_UPLEFT_L = SC_SELF_L-64
003A4Ar 1                  LEFT_H = SELF_H-1
003A4Ar 1                  LEFT_L = SELF_L+SELF-1
003A4Ar 1                  DOWNLEFT_H = SELF_H+63
003A4Ar 1                  DOWNLEFT_L = SELF_L+SELF+63
003A4Ar 1                  COUNT = 1+end-start
003A4Ar 1                  ZP_SCRATCH_AL = ZP_PTR
003A4Ar 1                  ZP_SCRATCH_AH = ZP_PTR+1
003A4Ar 1                  ZP_SCRATCH_BL = ZP_PTR+2
003A4Ar 1                  ZP_SCRATCH_BH = ZP_PTR+3
003A4Ar 1                  ZP_SELF_L     = ZP_PTR+4
003A4Ar 1                  ZP_SC_SELF_H  = ZP_PTR+5
003A4Ar 1               
003A4Ar 1                  LDX #COUNT        ;  2  2    leftmost is done at x=1
003A4Ar 1               .if COUNT & 1 = 1
003A4Ar 1                  BRA ODDSTART
003A4Ar 1               .endif
003A4Ar 1               ;   ;feed in one to start
003A4Ar 1               ;   LDA SELF_L+1,X     ; 4   6
003A4Ar 1               ;   ADC DOWNLEFT_L+1,X ; 8  10
003A4Ar 1               ;   STA ZP_SCRATCH_AL  ; 4  14    because this is used by A / EVEN count.
003A4Ar 1               
003A4Ar 1               ;   LDA SELF_H+1,X     ; 4  18
003A4Ar 1               ;   ADC DOWNLEFT_H+1,X ; 4  22
003A4Ar 1               ;   STA ZP_SCRATCH_AH  ; 4  26    ;  26 cycles overhead to get primed.. OK ...
003A4Ar 1               
003A4Ar 1               
003A4Ar 1                : LDA SELF_L,X      ;  4  4 	.5
003A4Ar 1                  ADC DOWNLEFT_L,X  ;  4  8 	1.0
003A4Ar 1                  STA ZP_SCRATCH_BL ;  3  11    because used by B / ODD counts
003A4Ar 1               
003A4Ar 1                  LDA SELF_H,X      ;  4  15
003A4Ar 1                  ADC DOWNLEFT_H,X  ;  4  19
003A4Ar 1                  STA ZP_SCRATCH_BH ;  3  22
003A4Ar 1               
003A4Ar 1                  LDA ZP_SCRATCH_BL ;  3  25
003A4Ar 1                  ADC ZP_SCRATCH_AL ;  3  28    add previous - self+right+downleft+downright ;
003A4Ar 1                  STA SC_SELF_L,X   ;  4  33    stash downright for next row to use as upleft ..
003A4Ar 1               ;   TAY               ;           2  30
003A4Ar 1                  LDA ZP_SCRATCH_BH ;  3  36    3  33
003A4Ar 1                  ADC ZP_SCRATCH_AH ;  3  39    3  36
003A4Ar 1                  STA SC_SELF_H,X   ;  4  43
003A4Ar 1               ;   STA ZP_SC_SELF_H  ;           3  39
003A4Ar 1               
003A4Ar 1                  LDA SC_SELF_L,X   ;  4  47    recall the downright low byte
003A4Ar 1               ;   TYA               ;           2  41
003A4Ar 1                  ADC SC_UPLEFT_L,X ;  4  51    4  45    add upleft from prev row
003A4Ar 1                  STA ZP_SELF_L     ;  3  54    3  48    save this to zero page temporarily..
003A4Ar 1               
003A4Ar 1                  LDA SC_SELF_H,X   ;  4  58    recall downright high byte
003A4Ar 1               ;   LDA ZP_SC_SELF_H  ;           3  51
003A4Ar 1                  ADC SC_UPLEFT_H,X ;  4  63    4  55    add the upleft high byte
003A4Ar 1                  ROR ; 8x to 4x    ;  2  65    2  57
003A4Ar 1                  ADC #0            ;           2  59    <- this is for rounding reasons...
003A4Ar 1               ;   ROR ZP_SELF_L     ;  5  70 <- this is needed if not using rounding..
003A4Ar 1                  LSR ; 4x to 2x    ;  2  72    2  61
003A4Ar 1                  ROR ZP_SELF_L     ;  5  77    5  66
003A4Ar 1                  LSR ; 2x to 1x    ;  2  79    2  68
003A4Ar 1                  STA SELF_H,X      ;  4  83    4  72    save the new value.. this self+downleft is in ZP_PTR+1  .. OK
003A4Ar 1               
003A4Ar 1                  LDA ZP_SELF_L     ;  3  86    3  75
003A4Ar 1                  ROR               ;           2  77
003A4Ar 1                  STA SELF_L,X      ;  4  92    4  81
003A4Ar 1                  DEX               ;  2  94    2  83 saved 10 whole cycles.. nice   OK now this should be odd..
003A4Ar 1               ODDSTART:
003A4Ar 1                  LDA SELF_L,X      ;  4  4
003A4Ar 1                  ADC DOWNLEFT_L,X  ;  4  8
003A4Ar 1                  STA ZP_SCRATCH_AL ;  3  11    because used by A / EVEN counts
003A4Ar 1                  LDA SELF_H,X      ;  4  15
003A4Ar 1                  ADC DOWNLEFT_H,X  ;  4  19
003A4Ar 1                  STA ZP_SCRATCH_AH ;  3  22
003A4Ar 1               
003A4Ar 1                  LDA ZP_SCRATCH_BL ;  3  26    add previous - self+right+downleft+downright ;
003A4Ar 1                  ADC ZP_SCRATCH_AL ;  3  29
003A4Ar 1                  STA SC_SELF_L,X   ;  4  33    stash downright for next row to use as upleft ..
003A4Ar 1                ;  TAY
003A4Ar 1                  LDA ZP_SCRATCH_BH ;  3  36
003A4Ar 1                  ADC ZP_SCRATCH_AH ;  3  39
003A4Ar 1                  STA SC_SELF_H,X   ;  4  43
003A4Ar 1               ;   STA ZP_SC_SELF_H  ;           3  39
003A4Ar 1               
003A4Ar 1                  LDA SC_SELF_L,X   ;  4  49    recall the downright low byte
003A4Ar 1               ;   TYA               ;           2  41
003A4Ar 1                  ADC SC_UPLEFT_L,X ;  4  53    add upleft from prev row
003A4Ar 1                  STA ZP_SELF_L     ;  3  56    save this to zero page temporarily..
003A4Ar 1               
003A4Ar 1                  LDA SC_SELF_H,X  ;  2  59    recall downright high byte
003A4Ar 1               ;   LDA ZP_SC_SELF_H  ;           3  51
003A4Ar 1                  ADC SC_UPLEFT_H,X ;  4  63    add the uoleft high byte
003A4Ar 1                  ROR ; 8x to 4x    ;  2  65
003A4Ar 1                  ADC #0
003A4Ar 1               ;   ROR ZP_SELF_L     ;  5  70
003A4Ar 1                  LSR ; 4x to 2x    ;  2  72
003A4Ar 1                ;  ROR ZP_SELF_L     ;  5  77
003A4Ar 1                  LSR ; 2x to 1x    ;  2  79
003A4Ar 1                  STA SELF_H,X      ;  4  83    save the new value.. this self+downleft is in ZP_PTR+1  .. OK
003A4Ar 1               
003A4Ar 1                  LDA ZP_SELF_L     ;  3  86
003A4Ar 1                  ROR
003A4Ar 1                  STA SELF_L,X      ;  4  92
003A4Ar 1                  DEX               ;  2  94    OK now this should be odd..
003A4Ar 1               
003A4Ar 1                  BNE :-           ;  3  - so ~85 each.. expecting almost 1 Jiffy to calculate world now.. ~113K cycles?
003A4Ar 1               
003A4Ar 1                  ;  exiting this, we have the next right+downright bit stashed in ZP_PTR[0,1] or ZP_PTR[2,3]
003A4Ar 1               .endmacro
003A4Ar 1               
003A4Ar 1               .macro make_upleft_for row, col, neighborA, neighborB, neighborC
003A4Ar 1               .local SELF
003A4Ar 1               .local SOURCE_H
003A4Ar 1               .local DEST_H
003A4Ar 1               .local SOURCE_L
003A4Ar 1               .local DEST_L
003A4Ar 1                  SELF = (64*row)+col
003A4Ar 1                  SOURCE_H = TUB_WORLD+SELF
003A4Ar 1                  SOURCE_L = TUB_WORLD_LOW+SELF
003A4Ar 1                  DEST_H = WATER_CALC_SCRATCH+SELF-64
003A4Ar 1                  DEST_L = WATER_CALC_SCRATCH_LOW+SELF-64
003A4Ar 1                  LDY SOURCE_H            ;  4  4
003A4Ar 1                  LDA SOURCE_L            ;  4  8
003A4Ar 1                  ADC SOURCE_L+neighborA  ;  4  12
003A4Ar 1                  BCC :+                  ;  2/3   14    15
003A4Ar 1                  INY                     ;  2/    16
003A4Ar 1                  DEC A                   ;  2/    18
003A4Ar 1               :  ADC SOURCE_L+neighborB  ;  4     22    19
003A4Ar 1                  BCC :+                  ;  2/3   24    22
003A4Ar 1                  INY                     ;  2/    26
003A4Ar 1                  DEC A                   ;  2/    28
003A4Ar 1               :  ADC SOURCE_L+neighborC  ;  4     32    26
003A4Ar 1                  STA DEST_L              ;  4     36    30
003A4Ar 1                  TYA                     ;  2     38    32
003A4Ar 1                  ADC SOURCE_H+neighborA    ;  4     42    36
003A4Ar 1                  ADC SOURCE_H+neighborB    ;  4     46    40
003A4Ar 1                  ADC SOURCE_H+neighborC    ;  4     50    44
003A4Ar 1                  STA DEST_H              ;  4     54    48    not too shabby..
003A4Ar 1               .endmacro
003A4Ar 1               
003A4Ar 1               .macro make_downright_for row, col, neighborA, neighborB, neighborC
003A4Ar 1               .local SELF
003A4Ar 1               .local SOURCE_H
003A4Ar 1               .local DEST_H
003A4Ar 1               .local SOURCE_L
003A4Ar 1               .local DEST_L
003A4Ar 1                  SELF = (64*row)+col
003A4Ar 1                  SOURCE_H = TUB_WORLD+SELF
003A4Ar 1                  SOURCE_L = TUB_WORLD_LOW+SELF
003A4Ar 1                  DEST_H = WATER_CALC_SCRATCH+SELF
003A4Ar 1                  DEST_L = WATER_CALC_SCRATCH_LOW+SELF
003A4Ar 1                  LDY SOURCE_H            ;  4  4
003A4Ar 1                  LDA SOURCE_L            ;  4  8
003A4Ar 1                  ADC SOURCE_L+neighborA  ;  4  12
003A4Ar 1                  BCC :+                  ;  2/3   14    15
003A4Ar 1                  INY                     ;  2/    16
003A4Ar 1                  DEC A                   ;  2/    18
003A4Ar 1               :  ADC SOURCE_L+neighborB  ;  4     22    19
003A4Ar 1                  BCC :+                  ;  2/3   24    22
003A4Ar 1                  INY                     ;  2/    26
003A4Ar 1                  DEC A                   ;  2/    28
003A4Ar 1               :  ADC SOURCE_L+neighborC  ;  4     32    26
003A4Ar 1                  STA DEST_L              ;  4     36    30
003A4Ar 1                  TYA                     ;  2     38    32
003A4Ar 1                  ADC SOURCE_H+neighborA    ;  4     42    36
003A4Ar 1                  ADC SOURCE_H+neighborB    ;  4     46    40
003A4Ar 1                  ADC SOURCE_H+neighborC    ;  4     50    44
003A4Ar 1                  STA DEST_H              ;  4     54    48    not too shabby..
003A4Ar 1               .endmacro
003A4Ar 1               
003A4Ar 1               UPDATE_WATER_SIM:
003A4Ar 1                  ; for each row, need to fixup right-most and left-most few so that uplefts exist and down-rights can be calculated..
003A4Ar 1                  ; for now, am leaving the borders out of it..
003A4Ar 1                  ; row 1 has no up, is 21 to 55 ..   but need to make uplefts for 2,20 to 2,56
003A4Ar 1  AD B8 A8        LDA TUB_WORLD_LOW+128+56
003A4Dr 1  6D B7 A8        ADC TUB_WORLD_LOW+128+55
003A50r 1  A8              TAY
003A51r 1  AD B8 A0        LDA TUB_WORLD+128+56
003A54r 1  6D B7 A0        ADC TUB_WORLD+128+55
003A57r 1  AA              TAX
003A58r 1  98              TYA
003A59r 1  0A              ASL
003A5Ar 1  8D 78 B8        STA WATER_CALC_SCRATCH_LOW+64+56
003A5Dr 1  8A              TXA
003A5Er 1  2A              ROL
003A5Fr 1  8D 78 B0        STA WATER_CALC_SCRATCH+64+56  ;  and stick this where it gets read for row2 .. nice..
003A62r 1               
003A62r 1  AD 55 A8        LDA TUB_WORLD_LOW+64+21
003A65r 1  6D 94 A8        ADC TUB_WORLD_LOW+128+20
003A68r 1  A8              TAY
003A69r 1  AD 55 A0        LDA TUB_WORLD+64+21
003A6Cr 1  6D 94 A0        ADC TUB_WORLD+128+20
003A6Fr 1  AA              TAX
003A70r 1  98              TYA
003A71r 1  0A              ASL
003A72r 1  8D 54 B8        STA WATER_CALC_SCRATCH_LOW+64+20
003A75r 1  8A              TXA
003A76r 1  2A              ROL
003A77r 1  8D 54 B0        STA WATER_CALC_SCRATCH+64+20
003A7Ar 1               
003A7Ar 1  AC 55 A0 AD     make_upleft_for 1, 21, 0, 1, 63
003A7Er 1  55 A8 6D 55  
003A82r 1  A8 90 02 C8  
003AA1r 1               
003AA1r 1  A2 22           LDX #55-21 ; 21 has no left.. 55 can start cycle pushing in
003AA3r 1                  UWS_ROW1_SELF_H = TUB_WORLD+64+21
003AA3r 1                  UWS_ROW1_SELF_L = TUB_WORLD_LOW+64+21
003AA3r 1                  UWS_ROW1_SCRATCH_SELF_H = WATER_CALC_SCRATCH+64+21
003AA3r 1                  UWS_ROW1_SCRATCH_SELF_L = WATER_CALC_SCRATCH_LOW+64+21
003AA3r 1                  UWS_ZP_A_L = ZP_PTR
003AA3r 1                  UWS_ZP_A_H = ZP_PTR+1
003AA3r 1                  UWS_ZP_B_L = ZP_PTR+2
003AA3r 1                  UWS_ZP_B_H = ZP_PTR+3
003AA3r 1                  UWS_ZP_SC_SELF_L = ZP_PTR+4
003AA3r 1                  UWS_ZP_SC_SELF_H = ZP_PTR+5
003AA3r 1                  UWS_ZP_C_L = ZP_PTR+6
003AA3r 1                  UWS_ZP_C_H = ZP_PTR+7
003AA3r 1               
003AA3r 1  BD 55 A8        LDA UWS_ROW1_SELF_L,X      ;  self
003AA6r 1  7D 95 A8        ADC UWS_ROW1_SELF_L+64,X   ;  downright
003AA9r 1  85 22           STA UWS_ZP_A_L
003AABr 1  BD 55 A0        LDA UWS_ROW1_SELF_H,X
003AAEr 1  7D 95 A0        ADC UWS_ROW1_SELF_H+64,X
003AB1r 1  85 23           STA UWS_ZP_A_H
003AB3r 1               
003AB3r 1  BD 55 A8      : LDA UWS_ROW1_SELF_L,X
003AB6r 1  7D 94 A8        ADC UWS_ROW1_SELF_L+63,X
003AB9r 1  85 24           STA UWS_ZP_B_L             ;  stash for ODD to use ok..
003ABBr 1  BD 55 A0        LDA UWS_ROW1_SELF_H,X   ;  self
003ABEr 1  7D 94 A0        ADC UWS_ROW1_SELF_H+63,X ;    downleft
003AC1r 1  85 25           STA UWS_ZP_B_H
003AC3r 1               
003AC3r 1  A5 22           LDA UWS_ZP_A_L
003AC5r 1  65 24           ADC UWS_ZP_B_L    ;  downright going to 4X now..
003AC7r 1  9D 55 B8        STA UWS_ROW1_SCRATCH_SELF_L,X    ;  downright at 4X ..
003ACAr 1               
003ACAr 1  A5 23           LDA UWS_ZP_A_H
003ACCr 1  65 25           ADC UWS_ZP_B_H
003ACEr 1  9D 55 B0        STA UWS_ROW1_SCRATCH_SELF_H,X    ;  downright at 4X ..
003AD1r 1  4A              LSR ; downright to 2X
003AD2r 1               ;   ADC #0 ; round it..  actually round it should likely zero the low? hmmm maybe that's where the extra comes in?
003AD2r 1  85 27           STA UWS_ZP_SC_SELF_H
003AD4r 1  BD 55 B8        LDA UWS_ROW1_SCRATCH_SELF_L,X
003AD7r 1  6A              ROR
003AD8r 1  85 26           STA UWS_ZP_SC_SELF_L
003ADAr 1               
003ADAr 1  BD 55 A8        LDA UWS_ROW1_SELF_L,X ; self L as upright
003ADDr 1  7D 54 A8        ADC UWS_ROW1_SELF_L-1,X ; left L as upleft
003AE0r 1  A8              TAY
003AE1r 1  BD 55 A0        LDA UWS_ROW1_SELF_H,X ; add self_H -
003AE4r 1  7D 54 A0        ADC UWS_ROW1_SELF_H-1,X ; add LEFT_H - 2X
003AE7r 1  85 29           STA UWS_ZP_C_H
003AE9r 1  98              TYA
003AEAr 1  65 26           ADC UWS_ZP_SC_SELF_L
003AECr 1  A8              TAY
003AEDr 1  A5 29           LDA UWS_ZP_C_H
003AEFr 1  65 27           ADC UWS_ZP_SC_SELF_H    ;  4x
003AF1r 1  6A              ROR
003AF2r 1  69 00           ADC #0                  ;  2X
003AF4r 1  4A              LSR
003AF5r 1  9D 55 A0        STA UWS_ROW1_SELF_H,X
003AF8r 1  98              TYA
003AF9r 1  6A              ROR
003AFAr 1  9D 55 A8        STA UWS_ROW1_SELF_L,X
003AFDr 1  CA              DEX
003AFEr 1               
003AFEr 1  BD 55 A8        LDA UWS_ROW1_SELF_L,X
003B01r 1  7D 94 A8        ADC UWS_ROW1_SELF_L+63,X
003B04r 1  85 22           STA UWS_ZP_A_L             ;  stash for EVEN to use ok..
003B06r 1  BD 55 A0        LDA UWS_ROW1_SELF_H,X   ;  self
003B09r 1  7D 94 A0        ADC UWS_ROW1_SELF_H+63,X ;    downleft
003B0Cr 1  85 23           STA UWS_ZP_A_H
003B0Er 1               
003B0Er 1  A5 22           LDA UWS_ZP_A_L
003B10r 1  65 24           ADC UWS_ZP_B_L    ;  downright going to 4X now..
003B12r 1  9D 55 B8        STA UWS_ROW1_SCRATCH_SELF_L,X    ;  downright at 4X ..
003B15r 1               
003B15r 1  A5 23           LDA UWS_ZP_A_H
003B17r 1  65 25           ADC UWS_ZP_B_H
003B19r 1  9D 55 B0        STA UWS_ROW1_SCRATCH_SELF_H,X    ;  downright at 4X ..
003B1Cr 1  4A              LSR ; downright to 2X
003B1Dr 1               ;   ADC #0 ; round it..  actually round it should likely zero the low? hmmm maybe that's where the extra comes in?
003B1Dr 1  85 27           STA UWS_ZP_SC_SELF_H
003B1Fr 1  BD 55 B8        LDA UWS_ROW1_SCRATCH_SELF_L,X
003B22r 1  6A              ROR
003B23r 1  85 26           STA UWS_ZP_SC_SELF_L
003B25r 1               
003B25r 1  BD 55 A8        LDA UWS_ROW1_SELF_L,X ; self L as upright
003B28r 1  7D 54 A0        ADC UWS_ROW1_SELF_H-1,X ; left L as upleft
003B2Br 1  A8              TAY
003B2Cr 1  BD 55 A0        LDA UWS_ROW1_SELF_H,X ; add self_H -
003B2Fr 1  7D 54 A0        ADC UWS_ROW1_SELF_H-1,X ; add LEFT_H - 2X
003B32r 1  85 29           STA UWS_ZP_C_H
003B34r 1  98              TYA
003B35r 1  65 26           ADC UWS_ZP_SC_SELF_L
003B37r 1  A8              TAY
003B38r 1  A5 29           LDA UWS_ZP_C_H
003B3Ar 1  65 27           ADC UWS_ZP_SC_SELF_H    ;  4x
003B3Cr 1  6A              ROR
003B3Dr 1  69 00           ADC #0                  ;  2X
003B3Fr 1  4A              LSR
003B40r 1  9D 55 A0        STA UWS_ROW1_SELF_H,X
003B43r 1  98              TYA
003B44r 1  6A              ROR
003B45r 1  9D 55 A8        STA UWS_ROW1_SELF_L,X
003B48r 1  CA              DEX
003B49r 1  F0 03           BEQ :+
003B4Br 1  4C rr rr        JMP :-
003B4Er 1                :
003B4Er 1                  ;  row 1,21 - no left.. upleft is basically 4x self .. right+downright are in UWS_ZP_A_[LH]
003B4Er 1  A4 23           LDY UWS_ZP_A_H
003B50r 1  A5 22           LDA UWS_ZP_A_L
003B52r 1  6D 55 A8        ADC UWS_ROW1_SELF_L
003B55r 1  90 02           BCC :+
003B57r 1  C8              INY
003B58r 1  3A              DEC A
003B59r 1  6D 94 A8      : ADC UWS_ROW1_SELF_L+63
003B5Cr 1  8D 55 B8        STA UWS_ROW1_SCRATCH_SELF_L
003B5Fr 1  98              TYA
003B60r 1  6D 55 A0        ADC UWS_ROW1_SELF_H
003B63r 1  6D 94 A0        ADC UWS_ROW1_SELF_H+63
003B66r 1  8D 55 B0        STA UWS_ROW1_SCRATCH_SELF_H   ;  right out the downright..
003B69r 1               
003B69r 1  AD 55 B8        LDA UWS_ROW1_SCRATCH_SELF_L
003B6Cr 1  6D 15 B8        ADC UWS_ROW1_SCRATCH_SELF_L-64
003B6Fr 1  85 22           STA UWS_ZP_A_L
003B71r 1  AD 55 B0        LDA UWS_ROW1_SCRATCH_SELF_H
003B74r 1  6D 15 B0        ADC UWS_ROW1_SCRATCH_SELF_H-64
003B77r 1  6A              ROR   ;
003B78r 1  69 00           ADC #0   ;  8x -> 4x
003B7Ar 1  4A              LSR
003B7Br 1  66 22           ROR UWS_ZP_A_L    ;  4x -> 2x
003B7Dr 1  4A              LSR ; 2x -> 1X H
003B7Er 1  8D 55 A0        STA UWS_ROW1_SELF_H
003B81r 1  A5 22           LDA UWS_ZP_A_L
003B83r 1  6A              ROR ;  2x -> 1x
003B84r 1  8D 55 A8        STA UWS_ROW1_SELF_L   ;  DR 1,21 out .. 1,20 DR was done earlier for row 2,20 to work.. OK
003B87r 1               
003B87r 1               
003B87r 1               
003B87r 1               
003B87r 1               
003B87r 1               
003B87r 1                  ; row 3 needs UL generated 18,19 .. row3 19 UL needs row2,20
003B87r 1  AC D3 A0 AD     make_upleft_for 3, 19, 0, -63, -1
003B8Br 1  D3 A8 6D D3  
003B8Fr 1  A8 90 02 C8  
003BAEr 1  AC D2 A0 AD     make_upleft_for 3, 18, 0, 0, 0
003BB2r 1  D2 A8 6D D2  
003BB6r 1  A8 90 02 C8  
003BD5r 1               
003BD5r 1                  ; row 2 - 2,20 upleft OK, is ODD so feed 2,56 RIGHT+DOWNRIGHT INTO  ZP_PTR[2,3]
003BD5r 1  AD B8 A8        LDA TUB_WORLD_LOW+128+56
003BD8r 1  6D F8 A8        ADC TUB_WORLD_LOW+192+56
003BDBr 1  85 24           STA ZP_PTR+2
003BDDr 1  AD B8 A0        LDA TUB_WORLD+128+56
003BE0r 1  6D F8 A0        ADC TUB_WORLD+192+56
003BE3r 1  85 25           STA ZP_PTR+3
003BE5r 1               ;   calc_row  2, 20, 56
003BE5r 1               
003BE5r 1                  ;  row 4 needs UL generated 58,16,17
003BE5r 1  AC 3A A1 AD     make_upleft_for 4, 58, 0, 0, -1
003BE9r 1  3A A9 6D 3A  
003BEDr 1  A9 90 02 C8  
003C0Cr 1  AC 11 A1 AD     make_upleft_for 4, 17, 0, -63, -1
003C10r 1  11 A9 6D 11  
003C14r 1  A9 90 02 C8  
003C33r 1  AC 10 A1 AD     make_upleft_for 4, 16, 0, 0, 1
003C37r 1  10 A9 6D 10  
003C3Br 1  A9 90 02 C8  
003C5Ar 1               
003C5Ar 1                  ;  row 3 - 18 to 57 is even, so start ZP_PTR[0,1]
003C5Ar 1  AD F9 A8        LDA TUB_WORLD_LOW+192+57
003C5Dr 1  6D 39 A9        ADC TUB_WORLD_LOW+256+57
003C60r 1  85 22           STA ZP_PTR
003C62r 1  AD F9 A0        LDA TUB_WORLD+192+57
003C65r 1  6D 39 A1        ADC TUB_WORLD+256+57
003C68r 1  85 23           STA ZP_PTR+1
003C6Ar 1  A2 28 BD D1     calc_row  3, 18, 57
003C6Er 1  A8 7D E1 A9  
003C72r 1  85 24 BD D1  
003CE6r 1               
003CE6r 1                  ;  row 5 needs UL generated for 14,15,59
003CE6r 1  AC 4E A1 AD     make_upleft_for 5, 14, 0, 0, 0
003CEAr 1  4E A9 6D 4E  
003CEEr 1  A9 90 02 C8  
003D0Dr 1  AC 4F A1 AD     make_upleft_for 5, 15, 0, -63, -1
003D11r 1  4F A9 6D 4F  
003D15r 1  A9 90 02 C8  
003D34r 1  AC 7B A1 AD     make_upleft_for 5, 59, 0, 0, -1
003D38r 1  7B A9 6D 7B  
003D3Cr 1  A9 90 02 C8  
003D5Br 1               
003D5Br 1                  ;  row 4 - is ODD so feed ZP_PTR[2,3]
003D5Br 1  AD 3A A9        LDA TUB_WORLD_LOW+256+58
003D5Er 1  6D 7A A9        ADC TUB_WORLD_LOW+320+58
003D61r 1  85 24           STA ZP_PTR+2
003D63r 1  AD 3A A1        LDA TUB_WORLD+256+58
003D66r 1  6D 7A A1        ADC TUB_WORLD+320+58
003D69r 1  85 25           STA ZP_PTR+3
003D6Br 1  A2 2B 80 3D     calc_row  4, 16, 58
003D6Fr 1  BD 0F A9 7D  
003D73r 1  5D AA 85 24  
003DE9r 1               
003DE9r 1                  ;  row 6 needs UL generated for 13
003DE9r 1  AC 8D A1 AD     make_upleft_for 6, 13, 0, -63, 0
003DEDr 1  8D A9 6D 8D  
003DF1r 1  A9 90 02 C8  
003E10r 1               
003E10r 1                  ; row 5 is EVEN feed ZP_PTR[0,1]
003E10r 1  AD 7B A9        LDA TUB_WORLD_LOW+320+59
003E13r 1  6D BB A9        ADC TUB_WORLD_LOW+384+59
003E16r 1  85 22           STA ZP_PTR
003E18r 1  AD 7B A1        LDA TUB_WORLD+320+59
003E1Br 1  6D BB A1        ADC TUB_WORLD+384+59
003E1Er 1  85 23           STA ZP_PTR+1
003E20r 1  A2 2E BD 4D     calc_row  5, 14, 59
003E24r 1  A9 7D D9 AA  
003E28r 1  85 24 BD 4D  
003E9Cr 1               
003E9Cr 1                  ;  row 7 needs UL generated for 12
003E9Cr 1  AC CC A1 AD     make_upleft_for 7, 12, 0, -63, 0
003EA0r 1  CC A9 6D CC  
003EA4r 1  A9 90 02 C8  
003EC3r 1               
003EC3r 1                  ;  row 6 is ODD feed ZP_PTR[2,3]
003EC3r 1  AD BB A9        LDA TUB_WORLD_LOW+384+59
003EC6r 1  6D FB A9        ADC TUB_WORLD_LOW+448+59
003EC9r 1  85 24           STA ZP_PTR+2
003ECBr 1  AD BB A1        LDA TUB_WORLD+384+59
003ECEr 1  6D FB A1        ADC TUB_WORLD+448+59
003ED1r 1  85 25           STA ZP_PTR+3
003ED3r 1  A2 2F 80 3D     calc_row  6, 13, 59
003ED7r 1  BD 8C A9 7D  
003EDBr 1  57 AB 85 24  
003F51r 1               
003F51r 1                  ; row 8 need UL generated for 11
003F51r 1  AC 0B A2 AD     make_upleft_for 8, 11, 0, -63, 0
003F55r 1  0B AA 6D 0B  
003F59r 1  AA 90 02 C8  
003F78r 1               
003F78r 1               .macro setup_downright_even row, col, downright
003F78r 1                  LDA TUB_WORLD_LOW+(64*row)+col
003F78r 1                  ADC TUB_WORLD_LOW+(64*row)+col+downright
003F78r 1                  STA ZP_PTR
003F78r 1                  LDA TUB_WORLD+(64*row)+col
003F78r 1                  ADC TUB_WORLD+(64*row)+col+downright
003F78r 1                  STA ZP_PTR+1
003F78r 1               .endmacro
003F78r 1               .macro setup_downright_odd row, col, downright
003F78r 1                  LDA TUB_WORLD_LOW+(64*row)+col
003F78r 1                  ADC TUB_WORLD_LOW+(64*row)+col+downright
003F78r 1                  STA ZP_PTR+2
003F78r 1                  LDA TUB_WORLD+(64*row)+col
003F78r 1                  ADC TUB_WORLD+(64*row)+col+downright
003F78r 1                  STA ZP_PTR+3
003F78r 1               .endmacro
003F78r 1                  ;  row 7 is EVEN ZP_PTR[0,1]
003F78r 1  AD FB A9 6D     setup_downright_even 7, 59, 64
003F7Cr 1  3B AA 85 22  
003F80r 1  AD FB A1 6D  
003F88r 1  A2 30 BD CB     calc_row  7, 12, 59
003F8Cr 1  A9 7D D5 AB  
003F90r 1  85 24 BD CB  
004004r 1                  ; row 9 needs UL for 10
004004r 1  AC 4A A2 AD     make_upleft_for 9, 10, 0, -63, 0
004008r 1  4A AA 6D 4A  
00400Cr 1  AA 90 02 C8  
00402Br 1                  ; row 8 is ODD
00402Br 1  AD 3B AA 6D     setup_downright_odd 8, 59, 64
00402Fr 1  7B AA 85 24  
004033r 1  AD 3B A2 6D  
00403Br 1  A2 31 80 3D     calc_row  8, 11, 59
00403Fr 1  BD 0A AA 7D  
004043r 1  53 AC 85 24  
0040B9r 1                  ;  row 10 has all UL OK
0040B9r 1                  ;  row 9 will need 10 calc'd special..
0040B9r 1  AC 8A A2 AD     make_upleft_for 10, 10, -64, -63, 0
0040BDr 1  8A AA 6D 4A  
0040C1r 1  AA 90 02 C8  
0040E0r 1  AD 7B AA 6D     setup_downright_odd 9, 59, 63
0040E4r 1  BA AA 85 24  
0040E8r 1  AD 7B A2 6D  
0040F0r 1  A2 31 80 3D     calc_row  9, 11, 59
0040F4r 1  BD 4A AA 7D  
0040F8r 1  D3 AC 85 24  
00416Er 1               .macro calc_from_scratch row, col
00416Er 1                  LDA WATER_CALC_SCRATCH_LOW+(64*row)-64+col
00416Er 1                  ADC WATER_CALC_SCRATCH_LOW+(64*row)+col
00416Er 1                  STA ZP_PTR
00416Er 1                  LDA WATER_CALC_SCRATCH+(64*row)-64+col
00416Er 1                  ADC WATER_CALC_SCRATCH+(64*row)+col
00416Er 1                  ROR
00416Er 1                  ADC #0   ;  8x -> 4x
00416Er 1                  LSR
00416Er 1                  ROR ZP_PTR    ;  4x -> 2x
00416Er 1                  LSR ; 2x -> 1X H
00416Er 1                  STA TUB_WORLD+(64*row)+col
00416Er 1                  LDA ZP_PTR
00416Er 1                  ROR ;  2x -> 1x
00416Er 1                  STA TUB_WORLD_LOW+(64*row)+col
00416Er 1               .endmacro
00416Er 1  AD 0A BA 6D     calc_from_scratch 9, 10
004172r 1  4A BA 85 22  
004176r 1  AD 0A B2 6D  
00418Cr 1               
00418Cr 1                  ;  row 11 needs UL for 9
00418Cr 1  AC C9 A2 AD     make_upleft_for 11, 9, 0, -63, 0
004190r 1  C9 AA 6D C9  
004194r 1  AA 90 02 C8  
0041B3r 1  AD BA AA 6D     setup_downright_odd 10, 58, 64
0041B7r 1  FA AA 85 24  
0041BBr 1  AD BA A2 6D  
0041C3r 1  A2 31 80 3D     calc_row 10, 10, 58
0041C7r 1  BD 89 AA 7D  
0041CBr 1  51 AD 85 24  
004241r 1                  ;  row 12 has all UL OK
004241r 1                  ;  row 11 needs 10 calc'd especial
004241r 1  AC CA A2 AD     make_upleft_for 11, 10, 0, -63, 0
004245r 1  CA AA 6D CA  
004249r 1  AA 90 02 C8  
004268r 1  AC 0A A3 AD     make_upleft_for 12, 10, -64, -63, 0
00426Cr 1  0A AB 6D CA  
004270r 1  AA 90 02 C8  
00428Fr 1  AD 8A BA 6D     calc_from_scratch 11, 10
004293r 1  CA BA 85 22  
004297r 1  AD 8A B2 6D  
0042ADr 1  AD FA AA 6D     setup_downright_odd 11, 58, 63
0042B1r 1  39 AB 85 24  
0042B5r 1  AD FA A2 6D  
0042BDr 1  A2 31 80 3D     calc_row 11, 10, 58
0042C1r 1  BD C9 AA 7D  
0042C5r 1  D1 AD 85 24  
00433Br 1                  ; row 13 needs UL 8 and needs it calc'd especial..
00433Br 1  AC 48 A3 AD     make_upleft_for 13, 8, 0, -63, 0
00433Fr 1  48 AB 6D 48  
004343r 1  AB 90 02 C8  
004362r 1  AC 88 A3 AD     make_upleft_for 14, 8, -64, -63, 0
004366r 1  88 AB 6D 48  
00436Ar 1  AB 90 02 C8  
004389r 1  AD 39 AB 6D     setup_downright_odd 12, 57, 64
00438Dr 1  79 AB 85 24  
004391r 1  AD 39 A3 6D  
004399r 1  A2 31 80 3D     calc_row 12,  9, 57
00439Dr 1  BD 08 AB 7D  
0043A1r 1  4F AE 85 24  
004417r 1                  ; row 14 has all UL already OK
004417r 1  AD 79 AB 6D     setup_downright_odd 13, 57, 63
00441Br 1  B8 AB 85 24  
00441Fr 1  AD 79 A3 6D  
004427r 1  A2 31 80 3D     calc_row 13,  9, 57
00442Br 1  BD 48 AB 7D  
00442Fr 1  CF AE 85 24  
0044A5r 1  AD 08 BB 6D     calc_from_scratch 13, 8
0044A9r 1  48 BB 85 22  
0044ADr 1  AD 08 B3 6D  
0044C3r 1                  ; row 15 needs UL for 7
0044C3r 1  AC C7 A3 AD     make_upleft_for 15, 7, 0, -63, 0
0044C7r 1  C7 AB 6D C7  
0044CBr 1  AB 90 02 C8  
0044EAr 1  AC 07 A4 AD     make_upleft_for 16, 7, -64, -63, 0
0044EEr 1  07 AC 6D C7  
0044F2r 1  AB 90 02 C8  
004511r 1  AD B8 AB 6D     setup_downright_odd 14, 56, 64
004515r 1  F8 AB 85 24  
004519r 1  AD B8 A3 6D  
004521r 1  A2 31 80 3D     calc_row 14,  8, 56
004525r 1  BD 87 AB 7D  
004529r 1  4D AF 85 24  
00459Fr 1                  ; row 16 all set .. 15 needs 7 calc'd special
00459Fr 1  AD F8 AB 6D     setup_downright_odd 15, 56, 63
0045A3r 1  37 AC 85 24  
0045A7r 1  AD F8 A3 6D  
0045AFr 1  A2 31 80 3D     calc_row 15,  8, 56
0045B3r 1  BD C7 AB 7D  
0045B7r 1  CD AF 85 24  
00462Dr 1  AD 87 BB 6D     calc_from_scratch 15, 7
004631r 1  C7 BB 85 22  
004635r 1  AD 87 B3 6D  
00464Br 1                  ; rows 17/18 needs UL for 6
00464Br 1  AC 46 A4 AD     make_upleft_for 17, 6, 0, -63, 0
00464Fr 1  46 AC 6D 46  
004653r 1  AC 90 02 C8  
004672r 1  AC 86 A4 AD     make_upleft_for 18, 6, -64, -63, 0
004676r 1  86 AC 6D 46  
00467Ar 1  AC 90 02 C8  
004699r 1  AD 37 AC 6D     setup_downright_odd 16, 55, 64
00469Dr 1  77 AC 85 24  
0046A1r 1  AD 37 A4 6D  
0046A9r 1  A2 31 80 3D     calc_row 16,  7, 55
0046ADr 1  BD 06 AC 7D  
0046B1r 1  4B B0 85 24  
004727r 1  AD 77 AC 6D     setup_downright_odd 17, 55, 63
00472Br 1  B6 AC 85 24  
00472Fr 1  AD 77 A4 6D  
004737r 1  A2 31 80 3D     calc_row 17,  7, 55
00473Br 1  BD 46 AC 7D  
00473Fr 1  CB B0 85 24  
0047B5r 1  AD 06 BC 6D     calc_from_scratch 17, 6
0047B9r 1  46 BC 85 22  
0047BDr 1  AD 06 B4 6D  
0047D3r 1                  ; rows 19/20 needs UL for 5
0047D3r 1  AC C5 A4 AD     make_upleft_for 19, 5, 0, -63, 0
0047D7r 1  C5 AC 6D C5  
0047DBr 1  AC 90 02 C8  
0047FAr 1  AC 05 A5 AD     make_upleft_for 20, 5, -64, -63, 0
0047FEr 1  05 AD 6D C5  
004802r 1  AC 90 02 C8  
004821r 1  AD B6 AC 6D     setup_downright_odd 18, 54, 64
004825r 1  F6 AC 85 24  
004829r 1  AD B6 A4 6D  
004831r 1  A2 31 80 3D     calc_row 18,  6, 54
004835r 1  BD 85 AC 7D  
004839r 1  49 B1 85 24  
0048AFr 1  AD F6 AC 6D     setup_downright_odd 19, 54, 63
0048B3r 1  35 AD 85 24  
0048B7r 1  AD F6 A4 6D  
0048BFr 1  A2 31 80 3D     calc_row 19,  6, 54
0048C3r 1  BD C5 AC 7D  
0048C7r 1  C9 B1 85 24  
00493Dr 1  AD 85 BC 6D     calc_from_scratch 19, 5
004941r 1  C5 BC 85 22  
004945r 1  AD 85 B4 6D  
00495Br 1                  ; rows 21-28 will need ULs for left-most
00495Br 1  AC 44 A5 AD     make_upleft_for 21, 4, 0, -63, 0
00495Fr 1  44 AD 6D 44  
004963r 1  AD 90 02 C8  
004982r 1  AC 84 A5 AD     make_upleft_for 22, 4, -64, -63, 0
004986r 1  84 AD 6D 44  
00498Ar 1  AD 90 02 C8  
0049A9r 1  AC C4 A5 AD     make_upleft_for 23, 4, -64, -63, 0
0049ADr 1  C4 AD 6D 84  
0049B1r 1  AD 90 02 C8  
0049D0r 1  AC 04 A6 AD     make_upleft_for 24, 4, -64, -63, 0
0049D4r 1  04 AE 6D C4  
0049D8r 1  AD 90 02 C8  
0049F7r 1  AC 44 A6 AD     make_upleft_for 25, 4, -64, -63, 0
0049FBr 1  44 AE 6D 04  
0049FFr 1  AE 90 02 C8  
004A1Er 1  AC 84 A6 AD     make_upleft_for 26, 4, -64, -63, 0
004A22r 1  84 AE 6D 44  
004A26r 1  AE 90 02 C8  
004A45r 1  AC C5 A6 AD     make_upleft_for 27, 5, -64, -63, 0
004A49r 1  C5 AE 6D 85  
004A4Dr 1  AE 90 02 C8  
004A6Cr 1  AC 06 A7 AD     make_upleft_for 28, 6, -64, -63, 0
004A70r 1  06 AF 6D C6  
004A74r 1  AE 90 02 C8  
004A93r 1  AC 47 A7 AD     make_upleft_for 29, 7, -64, -63, 0
004A97r 1  47 AF 6D 07  
004A9Br 1  AF 90 02 C8  
004ABAr 1  AD 35 AD 6D     setup_downright_odd 20, 53, 64
004ABEr 1  75 AD 85 24  
004AC2r 1  AD 35 A5 6D  
004ACAr 1  A2 31 80 3D     calc_row 20,  5, 53
004ACEr 1  BD 04 AD 7D  
004AD2r 1  47 B2 85 24  
004B48r 1  AD 75 AD 6D     setup_downright_odd 21, 53, 63
004B4Cr 1  B4 AD 85 24  
004B50r 1  AD 75 A5 6D  
004B58r 1  A2 31 80 3D     calc_row 21,  5, 53
004B5Cr 1  BD 44 AD 7D  
004B60r 1  C7 B2 85 24  
004BD6r 1  AD 04 BD 6D     calc_from_scratch 21, 4
004BDAr 1  44 BD 85 22  
004BDEr 1  AD 04 B5 6D  
004BF4r 1  AD B4 AD 6D     setup_downright_even 22, 52, 63
004BF8r 1  F3 AD 85 22  
004BFCr 1  AD B4 A5 6D  
004C04r 1  A2 30 BD 84     calc_row 22,  5, 52
004C08r 1  AD 7D 47 B3  
004C0Cr 1  85 24 BD 84  
004C80r 1  AD 44 BD 6D     calc_from_scratch 22, 4
004C84r 1  84 BD 85 22  
004C88r 1  AD 44 B5 6D  
004C9Er 1  AD F3 AD 6D     setup_downright_odd 23, 51, 63
004CA2r 1  32 AE 85 24  
004CA6r 1  AD F3 A5 6D  
004CAEr 1  A2 2F 80 3D     calc_row 23,  5, 51
004CB2r 1  BD C4 AD 7D  
004CB6r 1  C7 B3 85 24  
004D2Cr 1  AD 84 BD 6D     calc_from_scratch 23, 4
004D30r 1  C4 BD 85 22  
004D34r 1  AD 84 B5 6D  
004D4Ar 1  AD 32 AE 6D     setup_downright_even 24, 50, 63
004D4Er 1  71 AE 85 22  
004D52r 1  AD 32 A6 6D  
004D5Ar 1  A2 2E BD 04     calc_row 24,  5, 50
004D5Er 1  AE 7D 47 B4  
004D62r 1  85 24 BD 04  
004DD6r 1  AD C4 BD 6D     calc_from_scratch 24, 4
004DDAr 1  04 BE 85 22  
004DDEr 1  AD C4 B5 6D  
004DF4r 1  AC 71 A6 AD     make_downright_for 25, 49, 0, -1, 0
004DF8r 1  71 AE 6D 71  
004DFCr 1  AE 90 02 C8  
004E1Br 1  AD 70 AE 6D     setup_downright_even 25, 48, 63
004E1Fr 1  AF AE 85 22  
004E23r 1  AD 70 A6 6D  
004E2Br 1  A2 2C BD 44     calc_row 25,  5, 48
004E2Fr 1  AE 7D C7 B4  
004E33r 1  85 24 BD 44  
004EA7r 1  AD 04 BE 6D     calc_from_scratch 25, 4
004EABr 1  44 BE 85 22  
004EAFr 1  AD 04 B6 6D  
004EC5r 1  AD 31 BE 6D     calc_from_scratch 25, 49
004EC9r 1  71 BE 85 22  
004ECDr 1  AD 31 B6 6D  
004EE3r 1  AC AF A6 AD     make_downright_for 26, 47, 0, -1, 0
004EE7r 1  AF AE 6D AF  
004EEBr 1  AE 90 02 C8  
004F0Ar 1  AD AE A9 6D     setup_downright_odd 6, 46, 63
004F0Er 1  ED A9 85 24  
004F12r 1  AD AE A1 6D  
004F1Ar 1  A2 29 80 3D     calc_row 26,  6, 46
004F1Er 1  BD 85 AE 7D  
004F22r 1  49 B5 85 24  
004F98r 1  AD 44 BE 6D     calc_from_scratch 26, 4
004F9Cr 1  84 BE 85 22  
004FA0r 1  AD 44 B6 6D  
004FB6r 1  AD 45 BE 6D     calc_from_scratch 26, 5
004FBAr 1  85 BE 85 22  
004FBEr 1  AD 45 B6 6D  
004FD4r 1  AD 6F BE 6D     calc_from_scratch 26, 47
004FD8r 1  AF BE 85 22  
004FDCr 1  AD 6F B6 6D  
004FF2r 1  AC C5 A6 AD     make_downright_for 27, 5, 1, 0, 1
004FF6r 1  C5 AE 6D C6  
004FFAr 1  AE 90 02 C8  
005019r 1  AC ED A6 AD     make_downright_for 27, 45, 0, -1, 0
00501Dr 1  ED AE 6D ED  
005021r 1  AE 90 02 C8  
005040r 1  AD EB AE 6D     setup_downright_odd 27, 43, 63
005044r 1  2A AF 85 24  
005048r 1  AD EB A6 6D  
005050r 1  A2 25 80 3D     calc_row 27,  7, 43
005054r 1  BD C6 AE 7D  
005058r 1  CB B5 85 24  
0050CEr 1  AD 85 BE 6D     calc_from_scratch 27, 5
0050D2r 1  C5 BE 85 22  
0050D6r 1  AD 85 B6 6D  
0050ECr 1  AD 86 BE 6D     calc_from_scratch 27, 6
0050F0r 1  C6 BE 85 22  
0050F4r 1  AD 86 B6 6D  
00510Ar 1  AD AD BE 6D     calc_from_scratch 27, 45
00510Er 1  ED BE 85 22  
005112r 1  AD AD B6 6D  
005128r 1  AC 06 A7 AD     make_downright_for 28, 6, 1, 0, 1
00512Cr 1  06 AF 6D 07  
005130r 1  AF 90 02 C8  
00514Fr 1  AC 2B A7 AD     make_downright_for 28, 43, 0, -1, 0
005153r 1  2B AF 6D 2B  
005157r 1  AF 90 02 C8  
005176r 1  AD 2A AF 6D     setup_downright_odd 28, 42, 63
00517Ar 1  69 AF 85 24  
00517Er 1  AD 2A A7 6D  
005186r 1  A2 23 80 3D     calc_row 28,  8, 42
00518Ar 1  BD 07 AF 7D  
00518Er 1  4D B6 85 24  
005204r 1  AD C6 BE 6D     calc_from_scratch 28, 6
005208r 1  06 BF 85 22  
00520Cr 1  AD C6 B6 6D  
005222r 1  AD C7 BE 6D     calc_from_scratch 28, 7
005226r 1  07 BF 85 22  
00522Ar 1  AD C7 B6 6D  
005240r 1  AD EB BE 6D     calc_from_scratch 28, 43
005244r 1  2B BF 85 22  
005248r 1  AD EB B6 6D  
00525Er 1  AD 69 AF        LDA TUB_WORLD_LOW+(64*29)+41
005261r 1  85 22           STA ZP_PTR
005263r 1  AD 69 A7        LDA TUB_WORLD+(64*29)+41
005266r 1  85 23           STA ZP_PTR+1
005268r 1               
005268r 1  A2 22           LDX #41-7 ; is odd.. go figure
00526Ar 1  BD 48 AF      : LDA TUB_WORLD_LOW+(64*29)+8,X ; self as self + downleft..
00526Dr 1  85 24           STA ZP_PTR+2
00526Fr 1  BD 48 A7        LDA TUB_WORLD+(64*29)+8,X
005272r 1  85 25           STA ZP_PTR+3
005274r 1               
005274r 1  A5 22           LDA ZP_PTR
005276r 1  65 24           ADC ZP_PTR+2
005278r 1  85 22           STA ZP_PTR ; downright/2 low
00527Ar 1  A5 23           LDA ZP_PTR+1
00527Cr 1  65 25           ADC ZP_PTR+3
00527Er 1  85 23           STA ZP_PTR+1 ; downright/2 high
005280r 1  BD 08 BF        LDA WATER_CALC_SCRATCH_LOW+(64*28)+8,X
005283r 1  5E 08 B7        LSR WATER_CALC_SCRATCH+(64*28)+8,X ; and this is reducing upleft to 2x ...
005286r 1  6A              ROR ; upleft is now only 2x not 4x.. matching our downright..
005287r 1  65 22           ADC ZP_PTR
005289r 1  85 22           STA ZP_PTR
00528Br 1  BD 08 B7        LDA WATER_CALC_SCRATCH+(64*28)+8,X
00528Er 1  65 23           ADC ZP_PTR+1
005290r 1  4A              LSR ; 4x to 2x    ;  2  72
005291r 1  69 00           ADC #0
005293r 1  4A              LSR ; 2x to 1x    ;  2  79
005294r 1  9D 48 A7        STA TUB_WORLD+(64*29)+8,X      ;  4  83    save the new value.. this self+downleft is in ZP_PTR+1  .. OK
005297r 1  A5 22           LDA ZP_PTR     ;  3  86
005299r 1  6A              ROR
00529Ar 1  9D 48 AF        STA TUB_WORLD_LOW+(64*29)+8,X      ;  4  92
00529Dr 1  CA              DEX
00529Er 1  BD 48 AF        LDA TUB_WORLD_LOW+(64*29)+8,X ; self as self + downleft..
0052A1r 1  85 22           STA ZP_PTR
0052A3r 1  BD 48 A7        LDA TUB_WORLD+(64*29)+8,X
0052A6r 1  85 23           STA ZP_PTR+1
0052A8r 1               
0052A8r 1  A5 22           LDA ZP_PTR
0052AAr 1  65 24           ADC ZP_PTR+2
0052ACr 1  85 24           STA ZP_PTR+2 ; downright/2 low
0052AEr 1  A5 23           LDA ZP_PTR+1
0052B0r 1  65 25           ADC ZP_PTR+3
0052B2r 1  85 25           STA ZP_PTR+3 ; downright/2 high
0052B4r 1  BD 08 BF        LDA WATER_CALC_SCRATCH_LOW+(64*28)+8,X
0052B7r 1  5E 08 B7        LSR WATER_CALC_SCRATCH+(64*28)+8,X ; and this is reducing upleft to 2x ...
0052BAr 1  6A              ROR ; upleft is now only 2x not 4x.. matching our downright..
0052BBr 1  65 24           ADC ZP_PTR+2
0052BDr 1  85 24           STA ZP_PTR+2
0052BFr 1  BD 08 B7        LDA WATER_CALC_SCRATCH+(64*28)+8,X
0052C2r 1  65 25           ADC ZP_PTR+3
0052C4r 1  4A              LSR ; 4x to 2x    ;  2  72
0052C5r 1  69 00           ADC #0
0052C7r 1  4A              LSR ; 2x to 1x    ;  2  79
0052C8r 1  9D 48 A7        STA TUB_WORLD+(64*29)+8,X      ;  4  83    save the new value.. this self+downleft is in ZP_PTR+1  .. OK
0052CBr 1  A5 24           LDA ZP_PTR+2     ;  3  86
0052CDr 1  6A              ROR
0052CEr 1  9D 48 AF        STA TUB_WORLD_LOW+(64*29)+8,X      ;  4  92
0052D1r 1  CA              DEX
0052D2r 1  D0 96           BNE :-
0052D4r 1               
0052D4r 1                  ; 29,7 only has upleft, upright, and right neighbors!
0052D4r 1  AD 47 AF        LDA TUB_WORLD_LOW+(64*29)+7
0052D7r 1  65 22           ADC ZP_PTR
0052D9r 1  85 22           STA ZP_PTR
0052DBr 1  AD 47 A7        LDA TUB_WORLD+(64*29)+7
0052DEr 1  65 23           ADC ZP_PTR+1
0052E0r 1  85 23           STA ZP_PTR+1   ;  ok so have downright 2x
0052E2r 1  AD 07 AF        LDA TUB_WORLD_LOW+(64*28)+7 ; upleft
0052E5r 1  6D 08 AF        ADC TUB_WORLD_LOW+(64*28)+8 ; upright
0052E8r 1  85 24           STA ZP_PTR+2
0052EAr 1  AD 07 A7        LDA TUB_WORLD+(64*28)+7
0052EDr 1  6D 08 A7        ADC TUB_WORLD+(64*28)+8 ;
0052F0r 1  4A              LSR
0052F1r 1  85 25           STA ZP_PTR+3 ; is 1x upleft/right
0052F3r 1  A5 24           LDA ZP_PTR+2
0052F5r 1  6A              ROR
0052F6r 1  6D 47 AF        ADC TUB_WORLD_LOW+(64*29)+7
0052F9r 1  85 24           STA ZP_PTR+2
0052FBr 1  A5 25           LDA ZP_PTR+3
0052FDr 1  6D 47 A7        ADC TUB_WORLD+(64*29)+7 ; now is upleft 2x
005300r 1  85 25           STA ZP_PTR+3
005302r 1  A5 22           LDA ZP_PTR
005304r 1  65 24           ADC ZP_PTR+2
005306r 1  85 22           STA ZP_PTR ; 4x
005308r 1  A5 23           LDA ZP_PTR+1
00530Ar 1  65 25           ADC ZP_PTR+3
00530Cr 1  6A              ROR ; 4x to 2x
00530Dr 1  69 00           ADC #0
00530Fr 1  4A              LSR ; 2x to 1x
005310r 1  8D 47 A7        STA TUB_WORLD+(64*29)+7
005313r 1  A5 22           LDA ZP_PTR
005315r 1  6A              ROR
005316r 1  8D 47 AF        STA TUB_WORLD_LOW+(64*29)+7
005319r 1  60              RTS
00531Ar 1               
00531Ar 1               start:
00531Ar 1               
00531Ar 1                 ; copy tub data to bank and zero rest of it..
00531Ar 1  A2 00           LDX #0
00531Cr 1  A0 20           LDY #32
00531Er 1  A9 9F           LDA #$9F
005320r 1  8D rr rr        STA @WIPE_BANK_THINGER+2
005323r 1               @WIPE_BANK_LOOP:
005323r 1  EE rr rr        INC @WIPE_BANK_THINGER+2
005326r 1               @WIPE_BANK_THINGER:
005326r 1  9E 00 A0        STZ $A000,X
005329r 1  CA              DEX
00532Ar 1  D0 FA           BNE @WIPE_BANK_THINGER
00532Cr 1  88              DEY
00532Dr 1  D0 F4           BNE @WIPE_BANK_LOOP
00532Fr 1               
00532Fr 1  9C 29 9F       stz VERA_dc_video   ; disable display
005332r 1  A9 33          lda #51 ; #43 ; set scale for bitmap mode - going for 215x161 mode
005334r 1  8D 2A 9F       sta VERA_dc_hscale
005337r 1  8D 2B 9F       sta VERA_dc_vscale
00533Ar 1                 ; for now no L0 or L1
00533Ar 1               
00533Ar 1                 ; start of program - init globals
00533Ar 1  AD 14 03       lda IRQVec
00533Dr 1  8D rr rr       sta default_irq_vector
005340r 1  AD 15 03       lda IRQVec+1
005343r 1  8D rr rr       sta default_irq_vector+1
005346r 1               
005346r 1                 ; let's stick that test sprite data into VRAM at zero for now..
005346r 1  9C 25 9F       stz VERA_ctrl
005349r 1  9C 20 9F       stz VERA_addr_low
00534Cr 1  9C 21 9F       stz VERA_addr_high
00534Fr 1  A9 10          lda #$10
005351r 1  8D 22 9F       sta VERA_addr_bank
005354r 1                 ; load test VRAM data
005354r 1               
005354r 1                 ; is 512 bytes at test_cell_sprite label
005354r 1  A0 00          ldy #0
005356r 1               
005356r 1  A9 rr          LDA #<test_vram_data
005358r 1  85 22          STA ZP_PTR
00535Ar 1  A9 rr          LDA #>test_vram_data
00535Cr 1  85 23          STA ZP_PTR+1
00535Er 1  A2 23          LDX #35   ;   num pages to copy - 34 pages of 256bytes => 276 sprite addresses..
005360r 1  80 02          BRA :++
005362r 1                 :
005362r 1  E6 23             INC ZP_PTR+1
005364r 1                   :
005364r 1  B1 22              LDA (ZP_PTR),Y
005366r 1  8D 23 9F           STA VERA_data0
005369r 1  C8                 INY
00536Ar 1  D0 F8              BNE :-
00536Cr 1  CA                DEX
00536Dr 1  D0 F3             BNE :--
00536Fr 1               
00536Fr 1                 ; write custom palette data  - 16 colors only for now.. $1:FA00-$1:FBFF   VERA Color Palette (256 x 2 bytes)
00536Fr 1  A9 01          LDA #1
005371r 1  8D 25 9F       STA VERA_ctrl
005374r 1  A9 3F          LDA #63
005376r 1  8D 20 9F       STA VERA_addr_low
005379r 1  A9 FA          LDA #$FA
00537Br 1  8D 21 9F       STA VERA_addr_high
00537Er 1  A9 19          LDA #$19
005380r 1  8D 22 9F       STA VERA_addr_bank
005383r 1  9C 25 9F       STZ VERA_ctrl
005386r 1  A2 1F          LDX #31
005388r 1  8E 20 9F       STX VERA_addr_low
00538Br 1  A9 FA          LDA #$FA
00538Dr 1  8D 21 9F       STA VERA_addr_high
005390r 1  A9 19          LDA #$19
005392r 1  8D 22 9F       STA VERA_addr_bank
005395r 1                 :
005395r 1  BD rr rr         LDA test_optimal_pal_data,X
005398r 1  8D 23 9F         STA VERA_data0
00539Br 1  49 FF            EOR #$FF
00539Dr 1  8D 24 9F         STA VERA_data1
0053A0r 1  CA               DEX
0053A1r 1  D0 F2            BNE :-
0053A3r 1  BD rr rr       LDA test_optimal_pal_data,X
0053A6r 1  8D 23 9F       STA VERA_data0
0053A9r 1               
0053A9r 1  A9 08          LDA #8
0053ABr 1  9C 34 9F       STz VERA_L1_config
0053AEr 1  A9 F8          LDA #VRAM_CHARSET >> 9
0053B0r 1  8D 36 9F       STA VERA_L1_tilebase
0053B3r 1  A9 F2          LDA #VRAM_TEXT_SCREEN >> 9
0053B5r 1  8D 35 9F       STA VERA_L1_mapbase
0053B8r 1               
0053B8r 1  9C 20 9F       STZ VERA_addr_low
0053BBr 1  A9 18          LDA #>VRAM_BITMAP_LAYERA
0053BDr 1  8D 21 9F       STA VERA_addr_high
0053C0r 1  A9 11          LDA #$11
0053C2r 1  8D 22 9F       STA VERA_addr_bank
0053C5r 1  A2 67          LDX #103  ;  zero bufferA
0053C7r 1  A0 00          LDY #0
0053C9r 1  9C 23 9F     : STZ VERA_data0
0053CCr 1  C8             INY
0053CDr 1  D0 FA          BNE :-
0053CFr 1  CA             DEX
0053D0r 1  D0 F7          BNE :-
0053D2r 1  A2 65          LDX #101  ;  write A to bufferB initially as debug / flashing display when swapped..
0053D4r 1                 ;LDA #255
0053D4r 1  9C 23 9F     : STZ VERA_data0
0053D7r 1  C8             INY
0053D8r 1  D0 FA          BNE :-
0053DAr 1  CA             DEX
0053DBr 1  D0 F7          BNE :-
0053DDr 1               
0053DDr 1  9C 23 9F       STZ VERA_data0
0053E0r 1  A9 21          LDA #$21
0053E2r 1  8D 22 9F       STA VERA_addr_bank
0053E5r 1               
0053E5r 1  A2 0F          LDX #15
0053E7r 1  A0 14        : LDY #20
0053E9r 1  A9 01          LDA #$01
0053EBr 1               
0053EBr 1  8D 23 9F       : STA VERA_data0
0053EEr 1  88               DEY
0053EFr 1  D0 FA            BNE :-
0053F1r 1  A0 F1            LDY #$F1
0053F3r 1  8C 23 9F         STY VERA_data0 ; cols 20-23
0053F6r 1  8C 23 9F         STY VERA_data0
0053F9r 1  8C 23 9F         STY VERA_data0
0053FCr 1  8C 23 9F         STY VERA_data0
0053FFr 1               
0053FFr 1  8C 23 9F         STY VERA_data0 ; cols 24-27
005402r 1  8C 23 9F         STY VERA_data0
005405r 1  8C 23 9F         STY VERA_data0
005408r 1  8C 23 9F         STY VERA_data0
00540Br 1               
00540Br 1  8C 23 9F         STY VERA_data0 ; cols 28-31
00540Er 1  8C 23 9F         STY VERA_data0
005411r 1  8C 23 9F         STY VERA_data0
005414r 1  8C 23 9F         STY VERA_data0
005417r 1  CA              DEX
005418r 1  D0 CD           BNE :--
00541Ar 1  A2 A0          LDX #160
00541Cr 1  8C 23 9F       : STY VERA_data0
00541Fr 1  8C 23 9F         STY VERA_data0
005422r 1  CA               DEX
005423r 1  D0 F7            BNE :-
005425r 1               ;  LDA #4
005425r 1               ;  STA VERA_L1_HSCROLL_L
005425r 1               ;  STA VERA_L1_VSCROLL_L
005425r 1               
005425r 1  9C 20 9F       STZ VERA_addr_low
005428r 1  A9 E4          LDA #>VRAM_TEXT_SCREEN
00542Ar 1  8D 21 9F       STA VERA_addr_high
00542Dr 1  A2 04          LDX #4
00542Fr 1  A9 20          LDA #32
005431r 1  8D 23 9F     : STA VERA_data0
005434r 1  C8             INY
005435r 1  D0 FA          BNE :-
005437r 1  CA             DEX
005438r 1  D0 F7          BNE :-
00543Ar 1               
00543Ar 1  A9 06          LDA #$06
00543Cr 1  8D 2D 9F       STA VERA_L0_config
00543Fr 1  A9 01          LDA #$01 ; set L0 to palette offset 1 for now, to see where stuff is.
005441r 1  8D 31 9F       STA VERA_L0_HSCROLL_H
005444r 1  A9 8C          LDA #(VRAM_BITMAP_LAYERA>>9)
005446r 1               
005446r 1               ;  LDA #VRAM_BITMAP_LAYERB>>9
005446r 1  8D 2F 9F       STA VERA_L0_tilebase
005449r 1               
005449r 1  A9 06          LDA #6
00544Br 1  8D 20 9F       STA VERA_addr_low
00544Er 1  A9 EC          LDA #>VRAM_SPRITE_BUF
005450r 1  8D 21 9F       STA VERA_addr_high
005453r 1  A9 41          LDA #$41
005455r 1  8D 22 9F       STA VERA_addr_bank
005458r 1  9C 23 9F       : STZ VERA_data0
00545Br 1  E8               INX
00545Cr 1  D0 FA            BNE :-
00545Er 1                 ; enable display
00545Er 1  9C 25 9F       stz VERA_ctrl
005461r 1  A9 71          lda #SPRITES_LAYER1_LAYER0_VGA ; #SPRITES_ONLY_VGA
005463r 1  8D 29 9F       sta VERA_dc_video
005466r 1               
005466r 1               ;  DEC VERA_LOCK ; unlock the vera for first go...
005466r 1               ;   BRA @camera_world_changed
005466r 1                 ; overwrite RAM IRQ vector with custom handler address
005466r 1  78             sei ; disable IRQ while vector is changing
005467r 1  A9 rr          lda #<custom_irq_handler
005469r 1  8D 14 03       sta IRQVec
00546Cr 1  A9 rr          lda #>custom_irq_handler
00546Er 1  8D 15 03       sta IRQVec+1
005471r 1  A9 01          lda #VSYNC_BIT ; make VERA only generate VSYNC IRQs
005473r 1  8D 26 9F       sta VERA_ien
005476r 1  58             cli ; enable IRQ now that vector is properly set
005477r 1               
005477r 1               
005477r 1                 ; main loop here...
005477r 1  9C rr rr        STZ camera_facing
00547Ar 1               
00547Ar 1               @camera_world_changed:
00547Ar 1                  ; copy over cell YL as-is
00547Ar 1  AD rr rr        LDA camera_world_pos_YL
00547Dr 1  8D rr rr        STA camera_cell_yl
005480r 1                  ; YH gets copied over ..
005480r 1  AD rr rr        LDA camera_world_pos_YH
005483r 1  8D rr rr        STA camera_cell_y
005486r 1                  ; cellX = WORLDX*ratio - floor(cellY)/2
005486r 1                  ;  halve floor(cellY)
005486r 1  4A              LSR
005487r 1  85 7F           STA $7F ; stash it for scratch
005489r 1  A9 00           LDA #0
00548Br 1  6A              ROR
00548Cr 1  85 7E           STA $7E ; and there's the half..
00548Er 1               
00548Er 1  AE rr rr        LDX camera_world_pos_XH
005491r 1  AC rr rr        LDY camera_world_pos_XL
005494r 1  18              CLC
005495r 1  B9 rr rr        LDA WORLD_TO_CELL_XH,Y ; that bit from pos_XL
005498r 1  7D rr rr        ADC WORLD_TO_CELL_XL,X ; plus the bit from pos_XH
00549Br 1  A8              TAY   ;  cellXL from ratio
00549Cr 1  BD rr rr        LDA WORLD_TO_CELL_XH,X
00549Fr 1  69 00           ADC #0 ; gotta do that carry and all ..
0054A1r 1  AA              TAX   ; cellXH from ratio
0054A2r 1               
0054A2r 1  98              TYA
0054A3r 1  38              SEC
0054A4r 1  E5 7E           SBC $7E
0054A6r 1  8D rr rr        STA camera_cell_xl
0054A9r 1  8A              TXA
0054AAr 1  E5 7F           SBC $7F
0054ACr 1  8D rr rr        STA camera_cell_x
0054AFr 1  4C rr rr        jmp @do_update
0054B2r 1               
0054B2r 1               @camera_cell_changed: ; run through this more as a normalization step for camera..
0054B2r 1                  ; worldX = scaled(floor(cellY)/2 + cellX )
0054B2r 1  AD rr rr        LDA camera_cell_yl
0054B5r 1  8D rr rr        STA camera_world_pos_YL
0054B8r 1  AD rr rr        LDA camera_cell_y
0054BBr 1  8D rr rr        STA camera_world_pos_YH
0054BEr 1  4A              LSR
0054BFr 1  AA              TAX  ; high byte floor(Y)/2
0054C0r 1  A9 00           LDA #0
0054C2r 1  6A              ROR ; either is zero or 128 now ... either way, carry is cleared.
0054C3r 1  6D rr rr        ADC camera_cell_xl
0054C6r 1  A8              TAY ; stash the low to byte
0054C7r 1  8A              TXA ; high byte floor (Y)/2 .. ready for adding
0054C8r 1  6D rr rr        ADC camera_cell_x
0054CBr 1  AA              TAX ; stash high byte ... carry _should_ be cleared unless X >255 ... ?
0054CCr 1  B9 rr rr        LDA CELL_LOW_TO_WORLD_XL,Y
0054CFr 1  7D rr rr        ADC CELL_TO_WORLD_XL,X
0054D2r 1  8D rr rr        STA camera_world_pos_XL
0054D5r 1  B9 rr rr        LDA CELL_LOW_TO_WORLD_XH,Y
0054D8r 1  7D rr rr        ADC CELL_TO_WORLD_XH,X
0054DBr 1  8D rr rr        STA camera_world_pos_XH
0054DEr 1                  ;  jmp @do_update ; superfluous currently. redundant even..
0054DEr 1               
0054DEr 1               
0054DEr 1               @do_update:
0054DEr 1               
0054DEr 1                  ;  set up screen center stuff
0054DEr 1               
0054DEr 1               
0054DEr 1  AD rr rr        LDA camera_facing
0054E1r 1  29 7F           AND #127
0054E3r 1  AA              TAX
0054E4r 1  BD rr rr        LDA WORLD_SPRITE_NUM_lookies,X
0054E7r 1  8D rr rr        STA WORLD_SPRITE_NUM
0054EAr 1  BD rr rr        LDA WORLD_WALL_SPRITE_NUM_lookies,X
0054EDr 1  8D rr rr        STA WORLD_WALL_SPRITE_NUM
0054F0r 1               
0054F0r 1  38              SEC
0054F1r 1  BD rr rr        LDA WORLD_SPRITE_CENTER_XL,X
0054F4r 1  8D rr rr        STA CAMERA_CENTER_XL
0054F7r 1  BD rr rr        LDA WORLD_SPRITE_CENTER_XH,X
0054FAr 1  E9 1C           SBC #28
0054FCr 1  8D rr rr        STA CAMERA_CENTER_XH
0054FFr 1               
0054FFr 1  BD rr rr        LDA WORLD_SPRITE_CENTER_YL,X
005502r 1  8D rr rr        STA CAMERA_CENTER_YL
005505r 1  38              SEC
005506r 1  BD rr rr        LDA WORLD_SPRITE_CENTER_YH,X
005509r 1  E9 14           SBC #20
00550Br 1  8D rr rr        STA CAMERA_CENTER_TOP_PX
00550Er 1               
00550Er 1  AE rr rr         LDX camera_facing
005511r 1               
005511r 1  AD rr rr         LDA camera_cell_xl
005514r 1  4A               LSR ;   /2
005515r 1  4A               LSR ;   /4
005516r 1  4A               LSR ;   /8
005517r 1  4A               LSR ;   /16
005518r 1  38               SEC
005519r 1  E9 08            SBC #8 ;   subtract le middle..
00551Br 1  A8               TAY
00551Cr 1  B0 29            BCS :++    ;  is positive..
00551Er 1  18             : CLC
00551Fr 1  AD rr rr         LDA CAMERA_CENTER_XL
005522r 1  7D rr rr         ADC SUBCELL_X_COS_L,X
005525r 1  8D rr rr         STA CAMERA_CENTER_XL
005528r 1  AD rr rr         LDA CAMERA_CENTER_XH
00552Br 1  7D rr rr         ADC SUBCELL_X_COS_H,X
00552Er 1  8D rr rr         STA CAMERA_CENTER_XH
005531r 1  38               SEC
005532r 1  AD rr rr         LDA CAMERA_CENTER_YL
005535r 1  FD rr rr         SBC SUBCELL_Y_SIN_L,X
005538r 1  8D rr rr         STA CAMERA_CENTER_YL
00553Br 1  AD rr rr         LDA CAMERA_CENTER_TOP_PX
00553Er 1  FD rr rr         SBC SUBCELL_Y_SIN_H,X
005541r 1  8D rr rr         STA CAMERA_CENTER_TOP_PX
005544r 1  C8               INY
005545r 1  D0 D7            BNE :-
005547r 1  F0 29          : BEQ :++
005549r 1  38             : SEC
00554Ar 1  AD rr rr         LDA CAMERA_CENTER_XL
00554Dr 1  FD rr rr         SBC SUBCELL_X_COS_L,X
005550r 1  8D rr rr         STA CAMERA_CENTER_XL
005553r 1  AD rr rr         LDA CAMERA_CENTER_XH
005556r 1  FD rr rr         SBC SUBCELL_X_COS_H,X
005559r 1  8D rr rr         STA CAMERA_CENTER_XH
00555Cr 1  18               CLC
00555Dr 1  AD rr rr         LDA CAMERA_CENTER_YL
005560r 1  7D rr rr         ADC SUBCELL_Y_SIN_L,X
005563r 1  8D rr rr         STA CAMERA_CENTER_YL
005566r 1  AD rr rr         LDA CAMERA_CENTER_TOP_PX
005569r 1  7D rr rr         ADC SUBCELL_Y_SIN_H,X
00556Cr 1  8D rr rr         STA CAMERA_CENTER_TOP_PX
00556Fr 1  88               DEY
005570r 1  D0 D7            BNE :-
005572r 1                 :
005572r 1               
005572r 1  AD rr rr         LDA camera_cell_yl
005575r 1  4A               LSR ;   /2
005576r 1  4A               LSR ;   /4
005577r 1  4A               LSR ;   /8
005578r 1  4A               LSR ;   /16
005579r 1  38               SEC
00557Ar 1  E9 08            SBC #8 ;   subtract le middle..
00557Cr 1  A8               TAY
00557Dr 1  B0 29            BCS :++    ;  is positive..
00557Fr 1  18             : CLC
005580r 1  AD rr rr         LDA CAMERA_CENTER_XL
005583r 1  7D rr rr         ADC SUBCELL_X_SIN_L,X
005586r 1  8D rr rr         STA CAMERA_CENTER_XL
005589r 1  AD rr rr         LDA CAMERA_CENTER_XH
00558Cr 1  7D rr rr         ADC SUBCELL_X_SIN_H,X
00558Fr 1  8D rr rr         STA CAMERA_CENTER_XH
005592r 1  18               CLC
005593r 1  AD rr rr         LDA CAMERA_CENTER_YL
005596r 1  7D rr rr         ADC SUBCELL_Y_COS_L,X
005599r 1  8D rr rr         STA CAMERA_CENTER_YL
00559Cr 1  AD rr rr         LDA CAMERA_CENTER_TOP_PX
00559Fr 1  7D rr rr         ADC SUBCELL_Y_COS_H,X
0055A2r 1  8D rr rr         STA CAMERA_CENTER_TOP_PX
0055A5r 1  C8               INY
0055A6r 1  D0 D7            BNE :-
0055A8r 1  F0 29          : BEQ :++
0055AAr 1  38             : SEC
0055ABr 1  AD rr rr         LDA CAMERA_CENTER_XL
0055AEr 1  FD rr rr         SBC SUBCELL_X_SIN_L,X
0055B1r 1  8D rr rr         STA CAMERA_CENTER_XL
0055B4r 1  AD rr rr         LDA CAMERA_CENTER_XH
0055B7r 1  FD rr rr         SBC SUBCELL_X_SIN_H,X
0055BAr 1  8D rr rr         STA CAMERA_CENTER_XH
0055BDr 1               
0055BDr 1  38               SEC
0055BEr 1  AD rr rr         LDA CAMERA_CENTER_YL
0055C1r 1  FD rr rr         SBC SUBCELL_Y_COS_L,X
0055C4r 1  8D rr rr         STA CAMERA_CENTER_YL
0055C7r 1  AD rr rr         LDA CAMERA_CENTER_TOP_PX
0055CAr 1  FD rr rr         SBC SUBCELL_Y_COS_H,X
0055CDr 1  8D rr rr         STA CAMERA_CENTER_TOP_PX
0055D0r 1  88               DEY
0055D1r 1  D0 D7            BNE :-
0055D3r 1                 :
0055D3r 1               
0055D3r 1                  ;  set up tub pointer .. this will let us grab the height value for current location..
0055D3r 1               
0055D3r 1  64 7C            STZ $7C
0055D5r 1  AD rr rr         LDA camera_cell_y
0055D8r 1  4A               LSR  ;  y pages of 128
0055D9r 1  66 7C            ROR $7C
0055DBr 1  4A               LSR  ; y pages of 64 !
0055DCr 1  66 7C            ROR $7C
0055DEr 1  69 rr            ADC #>WORLD_MAP
0055E0r 1  8D rr rr         STA CAMERA_WORLD_LINE_PTR+1
0055E3r 1  69 rr            ADC #(>TUB_WORLD)-(>WORLD_MAP)
0055E5r 1  85 7D            STA $7D
0055E7r 1  8D rr rr         STA CAMERA_CELL_LINE_PTR+1
0055EAr 1  A5 7C            LDA $7C
0055ECr 1  8D rr rr         STA CAMERA_CELL_LINE_PTR
0055EFr 1  8D rr rr         STA CAMERA_WORLD_LINE_PTR
0055F2r 1               
0055F2r 1               
0055F2r 1  AC rr rr         LDY camera_cell_x
0055F5r 1  AD rr rr         LDA DO_WATER
0055F8r 1  C9 FF            CMP #255
0055FAr 1  B1 7C            LDA ($7C),y
0055FCr 1  90 0A            BCC :+
0055FEr 1  30 08            BMI :+
005600r 1  C9 20            CMP #32
005602r 1  B0 04            BCS :+
005604r 1  69 08            ADC #8
005606r 1  91 7C            STA ($7C),y
005608r 1  A8              :TAY
005609r 1               
005609r 1  18              CLC
00560Ar 1  AD rr rr        LDA CAMERA_CENTER_YL
00560Dr 1  79 rr rr        ADC CONVERT_HEIGHTS_PIXELS_L,Y
005610r 1  8D rr rr        STA CAMERA_CENTER_YL
005613r 1  AD rr rr        LDA CAMERA_CENTER_TOP_PX
005616r 1  79 rr rr        ADC CONVERT_HEIGHTS_PIXELS,Y
005619r 1  8D rr rr        STA CAMERA_CENTER_YH
00561Cr 1               
00561Cr 1  18              CLC
00561Dr 1  A9 78           LDA #SCREEN_OUT_BOTTOM
00561Fr 1  79 rr rr        ADC CONVERT_HEIGHTS_PIXELS,Y
005622r 1  8D rr rr        STA camera_screen_out_bottom
005625r 1               
005625r 1                  ; if something is higher than us it would be (52-CONVERT_HEIGHTS_PIXELS,Y)
005625r 1                  ; so true effective top of screen check to account for that would be ...
005625r 1                  ; SCREEN_OUT_TOP - (52 - CONVERT_HEIGHTS_PIXELS,Y)
005625r 1                  ; screen out top - 52 + CONVERT_HEIGHTS_PIXELS,Y
005625r 1                  ; ok so if we are as high as we can be, then something at farthest Z visible Z
005625r 1                  ; or s this constant??? should it even be attempted to add to world data?
005625r 1  38              SEC
005626r 1  AD rr rr        LDA CAMERA_CENTER_TOP_PX
005629r 1  E9 80           SBC #16+60+52 ;-16 is top out.. 60 to mid screen, then max diff in height from there.. so if was middle screen 60 now its -68
00562Br 1  8D rr rr        STA camera_screen_out_top
00562Er 1               
00562Er 1                  ; clear the object list ...
00562Er 1  38               SEC
00562Fr 1  A9 80            LDA #128
005631r 1  ED rr rr         SBC NUM_RESERVED_SPRITES
005634r 1  8D rr rr         STA NUM_AVAIL_SPRITES
005637r 1               
005637r 1  9C rr rr         STZ OBJECT_LIST_BYTE6_NEXT ; because we can't use zero anyway..
00563Ar 1  A9 08            LDA #$08 ; is basis for all the z_flips <- this may change depending on orientation..
00563Cr 1  A2 00            LDX #0
00563Er 1  9E rr rr         : STZ OBJECT_LIST_Z_START_POINTERS,X
005641r 1  9E rr rr           STZ OBJECT_LIST_BYTE1_MODE,X          ; 16 color / low address
005644r 1  9C rr rr           STZ OBJECT_LIST_BYTE2_X
005647r 1  9D rr rr           STA OBJECT_LIST_BYTE4_ZFLIPS,X
00564Ar 1                     ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
00564Ar 1  E8                 INX
00564Br 1  D0 F1              BNE :-
00564Dr 1               
00564Dr 1  A9 D0            LDA #SPRITE_SIZE_ORA
00564Fr 1  9D rr rr         : STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
005652r 1  E8                 INX
005653r 1  D0 FA              BNE :-
005655r 1  AD rr rr         LDA WORLD_SPRITE_NUM
005658r 1  9D rr rr         : STA OBJECT_LIST_BYTE0_ADDRLOW,X ; 01.3456 done .
00565Br 1  E8                 INX
00565Cr 1  D0 FA              BNE :-
00565Er 1               
00565Er 1  AD rr rr        LDA DO_WATER
005661r 1  F0 22           BEQ :++
005663r 1                ;  STZ DO_WATER
005663r 1  AD rr rr        LDA DO_FAUCET
005666r 1  F0 1A           BEQ :+
005668r 1               ;   STZ DO_FAUCET
005668r 1  AD C8 A3        LDA TUB_WORLD+(15*64)+8
00566Br 1  A9 3F           LDA #63
00566Dr 1                  ; we're going to pretend the faucet is running...
00566Dr 1               ;     STA TUB_WORLD+64+32
00566Dr 1                ;    STA TUB_WORLD+192+55
00566Dr 1                ;    STA TUB_WORLD+256+18
00566Dr 1  8D C7 A3          STA TUB_WORLD+(15*64)+7 ;  this is middle row furthest west ( < x )
005670r 1  8D C8 A3          STA TUB_WORLD+(15*64)+8
005673r 1  8D C9 A3          STA TUB_WORLD+(15*64)+9
005676r 1  8D 88 A3          STA TUB_WORLD+(14*64)+8
005679r 1  8D 89 A3          STA TUB_WORLD+(14*64)+9
00567Cr 1  8D 07 A1          STA TUB_WORLD+(16*16)+7
00567Fr 1  8D 08 A4          STA TUB_WORLD+(16*64)+8
005682r 1               :
005682r 1               
005682r 1               ;  LDA CAMERA_CELL_LINE_PTR
005682r 1               ;   STA ZP_PTR
005682r 1               ;   LDA CAMERA_CELL_LINE_PTR+1
005682r 1               ;   STA ZP_PTR+1
005682r 1               ;   LDY camera_cell_x
005682r 1               ;   LDA (ZP_PTR),y
005682r 1               ;   inc A
005682r 1               ;   CMP #64
005682r 1               ;   BCC :+
005682r 1               ;   LDA #63
005682r 1               ; : STA (ZP_PTR),y
005682r 1               
005682r 1  20 rr rr        JSR UPDATE_WATER_SIM
005685r 1               
005685r 1               
005685r 1               :
005685r 1               
005685r 1  20 rr rr       jsr push_world_to_object_list
005688r 1  AC rr rr       LDY CAMERA_CENTER_YH
00568Br 1  B9 rr rr       LDA OBJECT_LIST_Z_START_POINTERS,y ;  get pointer to current next..
00568Er 1  EE rr rr       INC OBJECT_LIST_BYTE6_NEXT ; get next available object...
005691r 1  AE rr rr       LDX OBJECT_LIST_BYTE6_NEXT ; get offset for that
005694r 1  9D rr rr       STA OBJECT_LIST_BYTE6_NEXT,X ; set the old value to this next..
005697r 1  8A             TXA
005698r 1  99 rr rr       STA OBJECT_LIST_Z_START_POINTERS,y ; patch this into Z
00569Br 1  A9 10          LDA #16
00569Dr 1  9D rr rr       STA OBJECT_LIST_BYTE0_ADDRLOW,X
0056A0r 1  A9 01          LDA #1
0056A2r 1  9D rr rr       STA OBJECT_LIST_BYTE1_MODE,X
0056A5r 1  A9 48          LDA #80-8
0056A7r 1  9D rr rr       STA OBJECT_LIST_BYTE2_X,X
0056AAr 1  A9 2C          LDA #60-16
0056ACr 1  9D rr rr       STA OBJECT_LIST_BYTE3_Y,X
0056AFr 1  A9 50          LDA #$50
0056B1r 1  9D rr rr       STA OBJECT_LIST_BYTE5_SIZE,X
0056B4r 1               
0056B4r 1               ;        A        B     CURRENT BITMAP BUFFER
0056B4r 1               ;   0   display  dirty    A is being displayed, B to be drawn on
0056B4r 1               ;  64   display  ready    B  is ready for swap
0056B4r 1               ; 128   dirty    display  B is being displayed, A to be drawn on
0056B4r 1               ; 192   ready    display  A  is ready for swap
0056B4r 1               
0056B4r 1               ; OK so we want bit 6 (64) to be set
0056B4r 1  AD rr rr        LDA VSYNC_counter
0056B7r 1  80 05           BRA :++
0056B9r 1               :
0056B9r 1               ;   wai
0056B9r 1  CD rr rr        CMP VSYNC_counter
0056BCr 1  F0 FB           BEQ :-
0056BEr 1  AD rr rr     :  LDA CURRENT_BITMAP_BUFFER
0056C1r 1  29 40           AND #64
0056C3r 1  D0 F4           BNE :--
0056C5r 1  9C rr rr        STZ VERA_LOCK ; ok gotta lock the VERA...
0056C8r 1  A9 D1           LDA #$D1
0056CAr 1  8D rr rr        STA OBJECT_LIST_BYTE5_SIZE+1
0056CDr 1               
0056CDr 1  20 rr rr        jsr draw_object_list
0056D0r 1               
0056D0r 1               @WRITE_DEBUG:
0056D0r 1  64 7A            STZ $7A
0056D2r 1  AD rr rr         LDA camera_cell_y
0056D5r 1  3A               DEC A
0056D6r 1  4A               LSR
0056D7r 1  66 7A            ROR $7A
0056D9r 1  4A               LSR
0056DAr 1  66 7A            ROR $7A
0056DCr 1  69 A0            ADC #>TUB_WORLD
0056DEr 1  85 7B            STA $7B
0056E0r 1  AC rr rr         LDY camera_cell_x
0056E3r 1  B1 7A            LDA ($7A),y
0056E5r 1  8D rr rr         STA CELL_VAL_UPLEFT
0056E8r 1  C8               INY
0056E9r 1  B1 7A            LDA ($7A),Y
0056EBr 1  8D rr rr         STA CELL_VAL_UPRIGHT
0056EEr 1               
0056EEr 1  64 7C            STZ $7C
0056F0r 1  AD rr rr         LDA camera_cell_y
0056F3r 1  4A               LSR  ;  y pages of 128
0056F4r 1  66 7C            ROR $7C
0056F6r 1  4A               LSR  ; y pages of 64 !
0056F7r 1  66 7C            ROR $7C
0056F9r 1  69 A0            ADC #>TUB_WORLD
0056FBr 1  85 7D            STA $7D
0056FDr 1  8D rr rr         STA CAMERA_CELL_LINE_PTR+1
005700r 1  A5 7C            LDA $7C
005702r 1  8D rr rr         STA CAMERA_CELL_LINE_PTR
005705r 1  B1 7C            LDA ($7C),Y
005707r 1  8D rr rr         STA CELL_VAL_RIGHT
00570Ar 1  88               DEY
00570Br 1  B1 7C            LDA ($7C),Y
00570Dr 1  8D rr rr         STA CELL_VAL_SELF
005710r 1  88               DEY
005711r 1  B1 7C            LDA ($7C),Y
005713r 1  8D rr rr         STA CELL_VAL_LEFT
005716r 1               
005716r 1  64 7E            STZ $7E
005718r 1  AD rr rr         LDA camera_cell_y
00571Br 1  1A               INC A
00571Cr 1  4A               LSR  ;  y pages of 128
00571Dr 1  66 7E            ROR $7E
00571Fr 1  4A               LSR  ; y pages of 64 !
005720r 1  66 7E            ROR $7E
005722r 1  69 A0            ADC #>TUB_WORLD
005724r 1  85 7F            STA $7F
005726r 1  B1 7E            LDA ($7E),Y
005728r 1  8D rr rr         STA CELL_VAL_DOWNLEFT
00572Br 1  C8               INY
00572Cr 1  B1 7E            LDA ($7E),Y
00572Er 1  8D rr rr         STA CELL_VAL_DOWNRIGHT
005731r 1               
005731r 1  9C 25 9F        STZ VERA_ctrl
005734r 1  A9 2A           LDA #42;+64
005736r 1  8D 20 9F        STA VERA_addr_low
005739r 1  A9 E4           LDA #>VRAM_TEXT_SCREEN
00573Br 1  8D 21 9F        STA VERA_addr_high
00573Er 1  A9 21           LDA #$21
005740r 1  8D 22 9F        STA VERA_addr_bank
005743r 1               
005743r 1  AD 23 9F        LDA VERA_data0 ; skip a spot at 2
005746r 1  AD 23 9F        LDA VERA_data0 ; skip a spot at 4
005749r 1               
005749r 1  AE rr rr        LDX CELL_VAL_UPLEFT
00574Cr 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X
00574Fr 1  8D 23 9F        STA VERA_data0                ;  6
005752r 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X
005755r 1  8D 23 9F        STA VERA_data0                ;  8
005758r 1               
005758r 1  AD 23 9F        LDA VERA_data0     ; skip a spot    10
00575Br 1  AD 23 9F        LDA VERA_data0     ; skip a spot    12
00575Er 1               
00575Er 1  AE rr rr        LDX CELL_VAL_UPRIGHT
005761r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X
005764r 1  8D 23 9F        STA VERA_data0                ;  14
005767r 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X
00576Ar 1  8D 23 9F        STA VERA_data0                ;  16
00576Dr 1  18              CLC
00576Er 1  AD 20 9F        LDA VERA_addr_low
005771r 1  69 30           ADC #64-16
005773r 1  8D 20 9F        STA VERA_addr_low
005776r 1               
005776r 1  AE rr rr        LDX CELL_VAL_LEFT
005779r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X
00577Cr 1  8D 23 9F        STA VERA_data0                ;  2
00577Fr 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X
005782r 1  8D 23 9F        STA VERA_data0                ;  4
005785r 1               
005785r 1  AD 23 9F        LDA VERA_data0    ;     6
005788r 1  AD 23 9F        LDA VERA_data0    ;     8
00578Br 1               
00578Br 1  AE rr rr        LDX CELL_VAL_SELF
00578Er 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X
005791r 1  8D 23 9F        STA VERA_data0                ;  10
005794r 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X
005797r 1  8D 23 9F        STA VERA_data0                ;  12
00579Ar 1               
00579Ar 1  AD 23 9F        LDA VERA_data0    ;     14
00579Dr 1  AD 23 9F        LDA VERA_data0    ;     16
0057A0r 1               
0057A0r 1  AE rr rr        LDX CELL_VAL_RIGHT
0057A3r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X
0057A6r 1  8D 23 9F        STA VERA_data0                ;  18
0057A9r 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X
0057ACr 1  8D 23 9F        STA VERA_data0                ;  20
0057AFr 1               
0057AFr 1  18              CLC
0057B0r 1  AD 20 9F        LDA VERA_addr_low
0057B3r 1  69 2C           ADC #64-20
0057B5r 1  8D 20 9F        STA VERA_addr_low
0057B8r 1               
0057B8r 1  AD 23 9F        LDA VERA_data0 ; skip a spot at 2
0057BBr 1  AD 23 9F        LDA VERA_data0 ; skip a spot at 4
0057BEr 1               
0057BEr 1  AE rr rr        LDX CELL_VAL_DOWNLEFT
0057C1r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X
0057C4r 1  8D 23 9F        STA VERA_data0                ;  6
0057C7r 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X
0057CAr 1  8D 23 9F        STA VERA_data0                ;  8
0057CDr 1               
0057CDr 1  AD 23 9F        LDA VERA_data0     ; skip a spot    10
0057D0r 1  AD 23 9F        LDA VERA_data0     ; skip a spot    12
0057D3r 1               
0057D3r 1  AE rr rr        LDX CELL_VAL_DOWNRIGHT
0057D6r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X
0057D9r 1  8D 23 9F        STA VERA_data0                ;  14
0057DCr 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X
0057DFr 1  8D 23 9F        STA VERA_data0                ;  16
0057E2r 1               
0057E2r 1  A9 2A           LDA #42
0057E4r 1  8D 20 9F        STA VERA_addr_low
0057E7r 1  EE 21 9F        INC VERA_addr_high
0057EAr 1               
0057EAr 1               
0057EAr 1  A0 00           LDY #0
0057ECr 1  BE rr rr      : LDX GLOBAL_DATA,Y
0057EFr 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X ; 1
0057F2r 1  8D 23 9F        STA VERA_data0
0057F5r 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X  ; 2
0057F8r 1  8D 23 9F        STA VERA_data0
0057FBr 1  C8              INY
0057FCr 1  BE rr rr        LDX GLOBAL_DATA,Y
0057FFr 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X   ;  3
005802r 1  8D 23 9F        STA VERA_data0
005805r 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X    ;  4
005808r 1  8D 23 9F        STA VERA_data0
00580Br 1  C8              INY
00580Cr 1  AD 23 9F        LDA VERA_data0             ;  5
00580Fr 1  BE rr rr        LDX GLOBAL_DATA,Y
005812r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X   ;  6
005815r 1  8D 23 9F        STA VERA_data0
005818r 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X    ;  7
00581Br 1  8D 23 9F        STA VERA_data0
00581Er 1  C8              INY
00581Fr 1  BE rr rr        LDX GLOBAL_DATA,Y
005822r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X   ;  8
005825r 1  8D 23 9F        STA VERA_data0
005828r 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X    ;  9
00582Br 1  8D 23 9F        STA VERA_data0
00582Er 1  C8              INY
00582Fr 1  18              CLC
005830r 1  AD 20 9F        LDA VERA_addr_low          ;  moved 18 out of 64 bytes...
005833r 1  69 2E           ADC #64-18
005835r 1  8D 20 9F        STA VERA_addr_low
005838r 1  90 03           BCC :+
00583Ar 1  EE 21 9F        INC VERA_addr_high
00583Dr 1  C0 33         : CPY #ENDGLOBALS-GLOBAL_DATA  ;
00583Fr 1  90 AB           BCC :--
005841r 1               
005841r 1  18              CLC
005842r 1  AD rr rr        LDA CURRENT_BITMAP_BUFFER
005845r 1  69 40           ADC #64
005847r 1  8D rr rr        STA CURRENT_BITMAP_BUFFER
00584Ar 1               
00584Ar 1  A9 FF           LDA #$FF ; time to unlock the VERA ..
00584Cr 1  8D rr rr        STA VERA_LOCK
00584Fr 1               
00584Fr 1               ;   rts
00584Fr 1               
00584Fr 1               @FRAME_CHECK:
00584Fr 1  AD rr rr        LDA STALL_COUNTERH
005852r 1  8D rr rr        STA LAST_STALLCOUNTERH
005855r 1  AD rr rr        LDA STALL_COUNTER
005858r 1  8D rr rr        STA LAST_STALLCOUNTER
00585Br 1  A2 FF           LDX #255
00585Dr 1  A0 FF           LDY #255
00585Fr 1  AD rr rr        LDA VSYNC_counter
005862r 1  8D rr rr        STA LAST_VSYNC_COUNTER
005865r 1               ;   BNE :+++
005865r 1  9C rr rr        STZ VSYNC_counter
005868r 1  E8           :  INX                     ;  2 cycles    8
005869r 1  D0 01           BNE :+                  ;  ~3 cycles   11 or 10 if drop through
00586Br 1  C8              INY                     ; 2            11/12
00586Cr 1               :  ;wai   disables the busy wait..
00586Cr 1  AD rr rr        lda VSYNC_counter       ;  4  cyles    15/16
00586Fr 1  F0 F7           BEQ :--                ;  3  cycles     18/19   so 1 full of X = ~4,607 cycles .. count would go to ~7,407 for full frame.. or ~ $1C,$F0
005871r 1               ;:
005871r 1  9C rr rr        STZ VSYNC_counter
005874r 1  8E rr rr        STX STALL_COUNTER
005877r 1  8C rr rr        STY STALL_COUNTERH
00587Ar 1               ;   LDA MASTER_CLOCK
00587Ar 1               ;   INC A
00587Ar 1               ;   CLC
00587Ar 1               ;   ADC LAST_VSYNC_COUNTER
00587Ar 1               ;   STA MASTER_CLOCK
00587Ar 1  EE rr rr        INC MASTER_CLOCK
00587Dr 1  D0 03           BNE :+
00587Fr 1  EE rr rr        INC MASTER_CLOCK+1
005882r 1               :
005882r 1               ;   AND #1 ; restrict to 30 fps.. don't care missed cycle.
005882r 1               ;   BEQ :+
005882r 1               ;   JMP @WRITE_DEBUG
005882r 1                  ; poll keyboard for input
005882r 1               ; :
005882r 1  20 E4 FF        jsr GETIN
005885r 1  C9 00           cmp #0
005887r 1  D0 03           BNE :+
005889r 1  4C rr rr        JMP @do_update
00588Cr 1  C9 0D         : CMP #RETURN
00588Er 1  D0 03           BNE :+
005890r 1  4C rr rr        JMP @cleanup_and_exit
005893r 1  C9 1D         : cmp #$1D 	;	cursor right
005895r 1  D0 06           BNE :+
005897r 1  EE rr rr        INC camera_facing
00589Ar 1  4C rr rr        JMP @do_update
00589Dr 1                  :
00589Dr 1  C9 9D           cmp  #$9D 	;	cursor left
00589Fr 1  D0 06           BNE :+
0058A1r 1  CE rr rr        DEC camera_facing
0058A4r 1  4C rr rr        JMP @do_update
0058A7r 1  C9 11         : cmp #$11; cursor down
0058A9r 1  D0 2C           BNE :+
0058ABr 1  AE rr rr        LDX camera_facing
0058AEr 1  38              SEC
0058AFr 1  AD rr rr        LDA camera_world_pos_XL
0058B2r 1  FD rr rr        SBC MOVE_X_L,X
0058B5r 1  8D rr rr        STA camera_world_pos_XL
0058B8r 1  AD rr rr        LDA camera_world_pos_XH
0058BBr 1  FD rr rr        SBC MOVE_X_H,X
0058BEr 1  8D rr rr        STA camera_world_pos_XH
0058C1r 1  18              CLC
0058C2r 1  AD rr rr        LDA camera_world_pos_YL
0058C5r 1  7D rr rr        ADC MOVE_Y_L,X
0058C8r 1  8D rr rr        STA camera_world_pos_YL
0058CBr 1  AD rr rr        LDA camera_world_pos_YH
0058CEr 1  7D rr rr        ADC MOVE_Y_H,X
0058D1r 1  8D rr rr        STA camera_world_pos_YH
0058D4r 1  4C rr rr        jmp @camera_world_changed
0058D7r 1               
0058D7r 1  C9 91         : cmp #$91 ; cursor up
0058D9r 1  D0 2C           BNE :+
0058DBr 1  AE rr rr        LDX camera_facing
0058DEr 1  18              CLC
0058DFr 1  AD rr rr        LDA camera_world_pos_XL
0058E2r 1  7D rr rr        ADC MOVE_X_L,X
0058E5r 1  8D rr rr        STA camera_world_pos_XL
0058E8r 1  AD rr rr        LDa camera_world_pos_XH
0058EBr 1  7D rr rr        ADC MOVE_X_H,X
0058EEr 1  8D rr rr        STA camera_world_pos_XH
0058F1r 1  38              SEC
0058F2r 1  AD rr rr        LDA camera_world_pos_YL
0058F5r 1  FD rr rr        SBC MOVE_Y_L,X
0058F8r 1  8D rr rr        STA camera_world_pos_YL
0058FBr 1  AD rr rr        LDA camera_world_pos_YH
0058FEr 1  FD rr rr        SBC MOVE_Y_H,X
005901r 1  8D rr rr        STA camera_world_pos_YH
005904r 1  4C rr rr        jmp @camera_world_changed
005907r 1               
005907r 1  C9 45         : cmp  #E_CHAR ; cell up right
005909r 1  D0 15           BNE :+++
00590Br 1  AD rr rr        LDA camera_cell_y
00590Er 1  F0 03           BEQ :+
005910r 1  CE rr rr        DEC camera_cell_y
005913r 1  AD rr rr      : LDA camera_cell_x
005916r 1  C9 3F           CMP #63
005918r 1  B0 03           BCS :+
00591Ar 1  EE rr rr        INC camera_cell_x
00591Dr 1  4C rr rr      : JMP @camera_cell_changed
005920r 1               
005920r 1  C9 57         : cmp #W_CHAR ; cell up left
005922r 1  D0 0B           BNE :++
005924r 1  AD rr rr        LDA camera_cell_y
005927r 1  F0 03           BEQ :+
005929r 1  CE rr rr        DEC camera_cell_y
00592Cr 1  4C rr rr      : JMP @camera_cell_changed
00592Fr 1               
00592Fr 1  C9 41         : cmp #A_CHAR ; cell left
005931r 1  D0 0B           BNE :++
005933r 1  AD rr rr        LDA camera_cell_x
005936r 1  F0 03           BEQ :+
005938r 1  CE rr rr        DEC camera_cell_x
00593Br 1  4C rr rr      : JMP @camera_cell_changed
00593Er 1               
00593Er 1  C9 44         : cmp #D_CHAR ; cell right
005940r 1  D0 0D           BNE :++
005942r 1  AD rr rr        LDA camera_cell_x
005945r 1  C9 3F           CMP #63
005947r 1  B0 03           BCS :+
005949r 1  EE rr rr        INC camera_cell_x
00594Cr 1  4C rr rr      : JMP @camera_cell_changed
00594Fr 1               
00594Fr 1  C9 58         : cmp #X_CHAR ; cell down right
005951r 1  D0 0D           BNE :++
005953r 1  AD rr rr        LDA camera_cell_y
005956r 1  C9 1E           CMP #30
005958r 1  B0 03           BCS :+
00595Ar 1  EE rr rr        INC camera_cell_y
00595Dr 1  4C rr rr      : JMP @camera_cell_changed
005960r 1               
005960r 1  C9 5A         : cmp  #Z_CHAR ; cell down left
005962r 1  D0 15           BNE :+++
005964r 1  AD rr rr        LDA camera_cell_y
005967r 1  C9 1E           CMP #30
005969r 1  B0 03           BCS :+
00596Br 1  EE rr rr        INC camera_cell_y
00596Er 1  AD rr rr      : LDA camera_cell_x
005971r 1  F0 03           BEQ :+
005973r 1  CE rr rr        DEC camera_cell_x
005976r 1  4C rr rr      : JMP @camera_cell_changed
005979r 1               
005979r 1  C9 20         : cmp #SPACE;
00597Br 1  D0 09           BNE :+
00597Dr 1  9C rr rr        STZ camera_cell_xl
005980r 1  9C rr rr        STZ camera_cell_yl
005983r 1  4C rr rr        JMP @camera_cell_changed
005986r 1               
005986r 1  C9 49         : cmp #I_CHAR ; cell y - 1/16
005988r 1  D0 25           BNE :++
00598Ar 1  38              SEC
00598Br 1  AD rr rr        LDA camera_cell_yl
00598Er 1  E9 10           SBC #16
005990r 1  8D rr rr        STA camera_cell_yl
005993r 1  B0 17           BCS :+
005995r 1  AD rr rr        LDA camera_cell_y
005998r 1  F0 12           BEQ :+
00599Ar 1  3A              DEC A
00599Br 1  8D rr rr        STA camera_cell_y
00599Er 1  18              CLC
00599Fr 1  AD rr rr        LDA camera_cell_xl
0059A2r 1  69 80           ADC #128
0059A4r 1  8D rr rr        STA camera_cell_xl
0059A7r 1  90 03           BCC :+
0059A9r 1  EE rr rr        INC camera_cell_x
0059ACr 1  4C rr rr      : JMP @camera_cell_changed
0059AFr 1               
0059AFr 1  C9 4A         : cmp #J_CHAR ; cell x - 1/16
0059B1r 1  D0 17           BNE :++
0059B3r 1  38              SEC
0059B4r 1  AD rr rr        LDA camera_cell_xl
0059B7r 1  E9 10           SBC #16
0059B9r 1  8D rr rr        STA camera_cell_xl
0059BCr 1  B0 09           BCS :+
0059BEr 1  AD rr rr        LDA camera_cell_x
0059C1r 1  F0 04           BEQ :+
0059C3r 1  3A              DEC A
0059C4r 1  8D rr rr        STA camera_cell_x
0059C7r 1  4C rr rr      : JMP @camera_cell_changed
0059CAr 1               
0059CAr 1  C9 4B         : cmp #K_CHAR ; cell y + 1/16
0059CCr 1  D0 27           BNE :++
0059CEr 1  18              CLC
0059CFr 1  AD rr rr        LDA camera_cell_yl
0059D2r 1  69 10           ADC #16
0059D4r 1  8D rr rr        STA camera_cell_yl
0059D7r 1  90 19           BCC :+
0059D9r 1  AD rr rr        LDA camera_cell_y
0059DCr 1  C9 1F           CMP #31
0059DEr 1  B0 12           BCS :+
0059E0r 1  1A              INC A
0059E1r 1  8D rr rr        STA camera_cell_y
0059E4r 1  38              SEC
0059E5r 1  AD rr rr        LDA camera_cell_xl
0059E8r 1  E9 80           SBC #128
0059EAr 1  8D rr rr        STA camera_cell_xl
0059EDr 1  B0 03           BCS :+
0059EFr 1  CE rr rr        DEC camera_cell_x
0059F2r 1  4C rr rr      : JMP @camera_cell_changed
0059F5r 1               
0059F5r 1  C9 4C         : cmp #L_CHAR ; cell x + 1/16
0059F7r 1  D0 11           BNE :++
0059F9r 1  18              CLC
0059FAr 1  AD rr rr        LDA camera_cell_xl
0059FDr 1  69 10           ADC #16
0059FFr 1  8D rr rr        STA camera_cell_xl
005A02r 1  90 03           BCC :+
005A04r 1  EE rr rr        INC camera_cell_x
005A07r 1  4C rr rr      : JMP @camera_cell_changed
005A0Ar 1               
005A0Ar 1  C9 31         : CMP #ONE_CHAR
005A0Cr 1  D0 08           BNE :+
005A0Er 1  AD 29 9F        LDA VERA_dc_video
005A11r 1  49 20           EOR #%00100000
005A13r 1  8D 29 9F        STA VERA_dc_video
005A16r 1               
005A16r 1  C9 32         : CMP #TWO_CHAR
005A18r 1  D0 08           BNE :+
005A1Ar 1  AD 29 9F        LDA VERA_dc_video
005A1Dr 1  49 40           EOR #%01000000
005A1Fr 1  8D 29 9F        STA VERA_dc_video
005A22r 1               
005A22r 1  C9 33         : CMP #THREE_CHAR
005A24r 1  D0 08           BNE :+
005A26r 1  AD 29 9F        LDA VERA_dc_video
005A29r 1  49 10           EOR #%00010000
005A2Br 1  8D 29 9F        STA VERA_dc_video
005A2Er 1               
005A2Er 1  C9 30         : CMP #ZERO_CHAR
005A30r 1  D0 13           BNE :+++
005A32r 1  AD 2A 9F        LDA VERA_dc_hscale
005A35r 1  C9 2B           CMP #43
005A37r 1  B0 04           BCS :+
005A39r 1  A9 33           LDA #51 ; #51 ; 51 is 255
005A3Br 1  80 02           BRA :++
005A3Dr 1  A9 20         : LDA #32
005A3Fr 1  8D 2A 9F      : STA VERA_dc_hscale
005A42r 1  8D 2B 9F        STA VERA_dc_vscale
005A45r 1               
005A45r 1  C9 39         : CMP #NINE_CHAR
005A47r 1  D0 08           BNE :+
005A49r 1  AD rr rr        LDA SPRITE_OBJECT_ENABLE
005A4Cr 1  49 FF           EOR #$FF
005A4Er 1  8D rr rr        STA SPRITE_OBJECT_ENABLE
005A51r 1               
005A51r 1  C9 38         : CMP #EIGHT_CHAR
005A53r 1  D0 08           BNE :+
005A55r 1  A9 FF           LDA #$FF
005A57r 1  4D rr rr        EOR DO_WATER
005A5Ar 1  8D rr rr        STA DO_WATER
005A5Dr 1               
005A5Dr 1  C9 37         : CMP #SEVEN_CHAR
005A5Fr 1  D0 08           BNE :+
005A61r 1  AD rr rr        LDA DO_WATER
005A64r 1  D0 03           BNE :+
005A66r 1  20 rr rr        JSR UPDATE_WATER_SIM
005A69r 1               
005A69r 1  C9 36         : CMP #SIX_CHAR
005A6Br 1  D0 08           BNE :+
005A6Dr 1  AD rr rr        LDA DO_FAUCET
005A70r 1  49 FF           EOR #$FF
005A72r 1  8D rr rr        STA DO_FAUCET
005A75r 1               
005A75r 1  4C rr rr      : JMP @do_update
005A78r 1               
005A78r 1               @cleanup_and_exit:
005A78r 1                  ; restore default IRQ vector
005A78r 1  78              sei
005A79r 1  AD rr rr        lda default_irq_vector
005A7Cr 1  8D 14 03        sta IRQVec
005A7Fr 1  AD rr rr        lda default_irq_vector+1
005A82r 1  8D 15 03        sta IRQVec+1
005A85r 1  58              cli
005A86r 1  20 81 FF        jsr CINT
005A89r 1  60              rts
005A8Ar 1               
005A8Ar 1               
005A8Ar 1               ; CURRENT
005A8Ar 1               push_world_to_object_list: ; as in.. let's try this again?? wait.. missing a STZ ZP_PTR...
005A8Ar 1               PWOL_TUB_PTR_AL   = ZP_PTR
005A8Ar 1               PWOL_TUB_PTR_AH   = ZP_PTR+1
005A8Ar 1               PWOL_TUB_PTR_BL   = ZP_PTR+2
005A8Ar 1               PWOL_TUB_PTR_BH   = ZP_PTR+3
005A8Ar 1               PWOL_CURRENT_XL   = ZP_PTR+4
005A8Ar 1               PWOL_CURRENT_XH   = ZP_PTR+5
005A8Ar 1               PWOL_CURRENT_YL   = ZP_PTR+6
005A8Ar 1               PWOL_CURRENT_YH   = ZP_PTR+7
005A8Ar 1               PWOL_ACROSS_ROW_XL= ZP_PTR+8
005A8Ar 1               PWOL_ACROSS_ROW_XH= ZP_PTR+9
005A8Ar 1               PWOL_ACROSS_ROW_YL= ZP_PTR+10
005A8Ar 1               PWOL_ACROSS_ROW_YH= ZP_PTR+11
005A8Ar 1               PWOL_NEXT_ROW_A_LEFT_XL  = ZP_PTR+12
005A8Ar 1               PWOL_NEXT_ROW_A_LEFT_XH  = ZP_PTR+13
005A8Ar 1               PWOL_NEXT_ROW_A_LEFT_YL  = ZP_PTR+14
005A8Ar 1               PWOL_NEXT_ROW_A_LEFT_YH  = ZP_PTR+15
005A8Ar 1               PWOL_NEXT_ROW_A_RIGHT_XL  = ZP_PTR+16
005A8Ar 1               PWOL_NEXT_ROW_A_RIGHT_XH  = ZP_PTR+17
005A8Ar 1               PWOL_NEXT_ROW_A_RIGHT_YL  = ZP_PTR+18
005A8Ar 1               PWOL_NEXT_ROW_A_RIGHT_YH  = ZP_PTR+19
005A8Ar 1               PWOL_NEXT_ROW_B_LEFT_XL  = ZP_PTR+20
005A8Ar 1               PWOL_NEXT_ROW_B_LEFT_XH  = ZP_PTR+21
005A8Ar 1               PWOL_NEXT_ROW_B_LEFT_YL  = ZP_PTR+22
005A8Ar 1               PWOL_NEXT_ROW_B_LEFT_YH  = ZP_PTR+23
005A8Ar 1               PWOL_NEXT_ROW_B_RIGHT_XL  = ZP_PTR+24
005A8Ar 1               PWOL_NEXT_ROW_B_RIGHT_XH  = ZP_PTR+25
005A8Ar 1               PWOL_NEXT_ROW_B_RIGHT_YL  = ZP_PTR+26
005A8Ar 1               PWOL_NEXT_ROW_B_RIGHT_YH  = ZP_PTR+27
005A8Ar 1               PWOL_Z_STARTS_PTR = ZP_PTR+28
005A8Ar 1               PWOL_Z_STARTS_PTRH = ZP_PTR+29
005A8Ar 1               PWOL_CONVERT_HEIGHTS = ZP_PTR+30
005A8Ar 1               PWOL_CONVERT_HEIGHTSH= ZP_PTR+31
005A8Ar 1               PWOL_CONVERT_HEIGHTS_L = ZP_PTR+32
005A8Ar 1               PWOL_CONVERT_HEIGHTS_LH = ZP_PTR+33
005A8Ar 1               PWOL_TRIES_COUNTER = ZP_PTR+34
005A8Ar 1               PWOL_START_XL = ZP_PTR+35
005A8Ar 1               PWOL_START_YL = ZP_PTR+36
005A8Ar 1               PWOL_START_XH = ZP_PTR+37
005A8Ar 1               PWOL_START_YH = ZP_PTR+38
005A8Ar 1               
005A8Ar 1               PWOL_START_COS_XL = ZP_PTR+39
005A8Ar 1               PWOL_START_COS_XH = ZP_PTR+40
005A8Ar 1               PWOL_START_COS_YL = ZP_PTR+41
005A8Ar 1               PWOL_START_COS_YH = ZP_PTR+42
005A8Ar 1               PWOL_START_SIN_XL = ZP_PTR+43
005A8Ar 1               PWOL_START_SIN_XH = ZP_PTR+44
005A8Ar 1               PWOL_START_SIN_YL = ZP_PTR+45
005A8Ar 1               PWOL_START_SIN_YH = ZP_PTR+46
005A8Ar 1               
005A8Ar 1               PWOL_camera_cell_xl = ZP_PTR+47
005A8Ar 1               PWOL_camera_cell_yl = ZP_PTR+48
005A8Ar 1               PWOL_CENTER_Y  =  ZP_PTR+49
005A8Ar 1               PWOL_CENTER_Y_TOP     =  ZP_PTR+50
005A8Ar 1               
005A8Ar 1               PWOL_TOP_CHECK = ZP_PTR+51
005A8Ar 1               PWOL_BOT_CHECK = ZP_PTR+52
005A8Ar 1               
005A8Ar 1               PWOL_MAP_PTR_AL = ZP_PTR+53
005A8Ar 1               PWOL_MAP_PTR_AH = ZP_PTR+54
005A8Ar 1               PWOL_MAP_PTR_BL = ZP_PTR+55
005A8Ar 1               PWOL_MAP_PTR_BH = ZP_PTR+56
005A8Ar 1               
005A8Ar 1               TRY_AGAIN = 6
005A8Ar 1  AD rr rr        LDA camera_screen_out_top
005A8Dr 1  85 55           STA PWOL_TOP_CHECK
005A8Fr 1  AD rr rr        LDA camera_screen_out_bottom
005A92r 1  85 56           STA PWOL_BOT_CHECK
005A94r 1               
005A94r 1  AD rr rr        LDA CAMERA_CENTER_YH
005A97r 1  1A              INC A
005A98r 1  85 53           STA PWOL_CENTER_Y
005A9Ar 1  AD rr rr        LDA CAMERA_CENTER_TOP_PX
005A9Dr 1  18              CLC
005A9Er 1  69 0A           ADC #10
005AA0r 1  85 54           STA PWOL_CENTER_Y_TOP
005AA2r 1               
005AA2r 1               
005AA2r 1  A9 rr           LDA #>CONVERT_HEIGHTS_PIXELS
005AA4r 1  85 41           STA PWOL_CONVERT_HEIGHTSH
005AA6r 1  A9 rr           LDA #>CONVERT_HEIGHTS_PIXELS_L
005AA8r 1  85 43           STA PWOL_CONVERT_HEIGHTS_LH
005AAAr 1               
005AAAr 1  A9 rr           LDA #>OBJECT_LIST_Z_START_POINTERS
005AACr 1  85 3F           STA PWOL_Z_STARTS_PTRH
005AAEr 1               
005AAEr 1  AE rr rr        LDX camera_facing
005AB1r 1  BD rr rr        LDA ACROSS_ROW_X_L,x    ; 0900  16 wide , 45* tilt ... this is added to go up row, sub for down row
005AB4r 1  85 2A           STA PWOL_ACROSS_ROW_XL
005AB6r 1  BD rr rr        LDA ACROSS_ROW_X_H,x
005AB9r 1  85 2B           STA PWOL_ACROSS_ROW_XH
005ABBr 1               
005ABBr 1  BD rr rr        LDA ACROSS_ROW_Y_L,x
005ABEr 1  85 2C           STA PWOL_ACROSS_ROW_YL
005AC0r 1  BD rr rr        LDA ACROSS_ROW_Y_H,x
005AC3r 1  85 2D           STA PWOL_ACROSS_ROW_YH
005AC5r 1               
005AC5r 1  18              CLC
005AC6r 1  BD rr rr        LDA NEXT_ROW_X_L,X  ; 0D00 next row LEFT/up when added
005AC9r 1  85 2E           STA PWOL_NEXT_ROW_A_LEFT_XL   ; -> next row is left, going up the screen ..  -1,-1
005ACBr 1  65 2A           ADC PWOL_ACROSS_ROW_XL   ; across row is for right , subtract to go left  +1 -> 0,1
005ACDr 1  85 32           STA PWOL_NEXT_ROW_A_RIGHT_XL  ;  -> next row is right, going up the screen .. -1,-1
005ACFr 1  BD rr rr        LDA NEXT_ROW_X_H,x
005AD2r 1  85 2F           STA PWOL_NEXT_ROW_A_LEFT_XH
005AD4r 1  65 2B           ADC PWOL_ACROSS_ROW_XH
005AD6r 1  85 33           STA PWOL_NEXT_ROW_A_RIGHT_XH
005AD8r 1               
005AD8r 1  18              CLC
005AD9r 1  BD rr rr        LDA NEXT_ROW_Y_L,X  ; 0F00 next row LEFT/up when added
005ADCr 1  85 30           STA PWOL_NEXT_ROW_A_LEFT_YL   ; -> next row is left, going up the screen
005ADEr 1  65 2C           ADC PWOL_ACROSS_ROW_YL   ; across row is for right
005AE0r 1  85 34           STA PWOL_NEXT_ROW_A_RIGHT_YL  ;  -> next row is right, going up the screen
005AE2r 1  BD rr rr        LDA NEXT_ROW_Y_H,x
005AE5r 1  85 31           STA PWOL_NEXT_ROW_A_LEFT_YH
005AE7r 1  65 2D           ADC PWOL_ACROSS_ROW_YH
005AE9r 1  85 35           STA PWOL_NEXT_ROW_A_RIGHT_YH
005AEBr 1               
005AEBr 1               
005AEBr 1               ; for zig B , the opposite of left/up is right/down.. so A_LEFT * -1 = B_RIGHT
005AEBr 1  38              SEC ; flip A_LEFT X to B_RIGHT X
005AECr 1  A9 00           LDA #0
005AEEr 1  E5 2E           SBC PWOL_NEXT_ROW_A_LEFT_XL
005AF0r 1  85 3A           STA PWOL_NEXT_ROW_B_RIGHT_XL
005AF2r 1  A9 00           LDA #0
005AF4r 1  E5 2F           SBC PWOL_NEXT_ROW_A_LEFT_XH
005AF6r 1  85 3B           STA PWOL_NEXT_ROW_B_RIGHT_XH
005AF8r 1               
005AF8r 1  38              SEC ; flip A_LEFT Y to B_RIGHT Y
005AF9r 1  A9 00           LDA #0
005AFBr 1  E5 30           SBC PWOL_NEXT_ROW_A_LEFT_YL
005AFDr 1  85 3C           STA PWOL_NEXT_ROW_B_RIGHT_YL
005AFFr 1  A9 00           LDA #0
005B01r 1  E5 31           SBC PWOL_NEXT_ROW_A_LEFT_YH
005B03r 1  85 3D           STA PWOL_NEXT_ROW_B_RIGHT_YH
005B05r 1               
005B05r 1  38              SEC ; flip A_RIGHT X to B_LEFT X
005B06r 1  A9 00           LDA #0
005B08r 1  E5 32           SBC PWOL_NEXT_ROW_A_RIGHT_XL
005B0Ar 1  85 36           STA PWOL_NEXT_ROW_B_LEFT_XL
005B0Cr 1  A9 00           LDA #0
005B0Er 1  E5 33           SBC PWOL_NEXT_ROW_A_RIGHT_XH
005B10r 1  85 37           STA PWOL_NEXT_ROW_B_LEFT_XH
005B12r 1               
005B12r 1  38              SEC ; flip A_RIGHT Y to B_LEFT Y
005B13r 1  A9 00           LDA #0
005B15r 1  E5 34           SBC PWOL_NEXT_ROW_A_RIGHT_YL
005B17r 1  85 38           STA PWOL_NEXT_ROW_B_LEFT_YL
005B19r 1  A9 00           LDA #0
005B1Br 1  E5 35           SBC PWOL_NEXT_ROW_A_RIGHT_YH
005B1Dr 1  85 39           STA PWOL_NEXT_ROW_B_LEFT_YH
005B1Fr 1               
005B1Fr 1  AD rr rr        LDA CAMERA_CENTER_XL
005B22r 1  85 26            STA PWOL_CURRENT_XL
005B24r 1  85 45            STA PWOL_START_XL
005B26r 1               
005B26r 1  AD rr rr        LDA CAMERA_CENTER_YL
005B29r 1  85 28            STA PWOL_CURRENT_YL
005B2Br 1  85 46            STA PWOL_START_YL
005B2Dr 1               
005B2Dr 1  AD rr rr        LDA CAMERA_CENTER_XH
005B30r 1  85 27            STA PWOL_CURRENT_XH
005B32r 1  85 47            STA PWOL_START_XH
005B34r 1               
005B34r 1               
005B34r 1  AD rr rr        LDA CAMERA_CENTER_YH
005B37r 1  85 29            STA PWOL_CURRENT_YH
005B39r 1  85 48            STA PWOL_START_YH
005B3Br 1               
005B3Br 1  AD rr rr         LDA CAMERA_CELL_LINE_PTR
005B3Er 1  85 22            STA PWOL_TUB_PTR_AL
005B40r 1  85 24            STA PWOL_TUB_PTR_BL
005B42r 1  AD rr rr         LDA CAMERA_CELL_LINE_PTR+1
005B45r 1  85 23            STA PWOL_TUB_PTR_AH
005B47r 1  85 25            STA PWOL_TUB_PTR_BH
005B49r 1               
005B49r 1  AD rr rr         LDA CAMERA_WORLD_LINE_PTR
005B4Cr 1  85 57            STA PWOL_MAP_PTR_AL
005B4Er 1  85 59            STA PWOL_MAP_PTR_BL
005B50r 1  AD rr rr         LDA CAMERA_WORLD_LINE_PTR+1
005B53r 1  85 58            STA PWOL_MAP_PTR_AH
005B55r 1  85 5A            STA PWOL_MAP_PTR_BH
005B57r 1               
005B57r 1                  ; STZ VERA_ctrl
005B57r 1                  ; LDA #<(VRAM_TEXT_SCREEN+17*64)
005B57r 1                  ; STA VERA_addr_low
005B57r 1                  ; LDA #>(VRAM_TEXT_SCREEN+17*64)
005B57r 1                  ; STA VERA_addr_high
005B57r 1                  ; LDA #$21
005B57r 1                  ; STA VERA_addr_bank
005B57r 1                  ; LDA #26
005B57r 1                  ; STA VERA_data0
005B57r 1               
005B57r 1                 @zigzag_A: ; going to right and up the screen, including where we are currently..
005B57r 1  AC rr rr         LDY camera_cell_x
005B5Ar 1  80 00            BRA @zigzag_A_right
005B5Cr 1                  @ZAR_OUT:
005B5Cr 1               
005B5Cr 1                   @zigzag_A_right:
005B5Cr 1  C0 40                CPY #64  ;  make sure we don't go outside level..
005B5Er 1  B0 6C                BCS @ZAR_NEXT ; if we're outside we'll just skip is OK here
005B60r 1  B1 57                LDA (PWOL_MAP_PTR_AL),y
005B62r 1  C9 81                CMP #129
005B64r 1  B0 66                BCS @ZAR_NEXT ; this isn't a valid spot in the level map..
005B66r 1                       ; bytes 1 and 4 were updated when we cleared the object list
005B66r 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
005B69r 1  D0 04                BNE :++
005B6Br 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
005B6Er 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
005B6Fr 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
005B71r 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
005B74r 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen... (could cause issues if we're high up? can't see behind?)
005B76r 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
005B78r 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
005B7Ar 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
005B7Dr 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
005B80r 1  8A                   TXA ; push new next to the Z buffer spot
005B81r 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
005B83r 1                       ; bytes .1..4.6 filled in already..
005B83r 1  B1 57                LDA (PWOL_MAP_PTR_AL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
005B85r 1  30 04                BMI @ZAR_HIT_WALL_OUCH
005B87r 1  B1 22                LDA (PWOL_TUB_PTR_AL),y
005B89r 1  80 08                BRA @ZAR_INSIDE_TUB
005B8Br 1                     @ZAR_HIT_WALL_OUCH:
005B8Br 1  AD rr rr               LDA WORLD_WALL_SPRITE_NUM
005B8Er 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
005B91r 1  A9 56                  LDA #86 ; max height..
005B93r 1                     @ZAR_INSIDE_TUB:
005B93r 1  85 40                  STA PWOL_CONVERT_HEIGHTS ;
005B95r 1  85 42                  STA PWOL_CONVERT_HEIGHTS_L;
005B97r 1  38                     SEC
005B98r 1  A5 28                  LDA PWOL_CURRENT_YL
005B9Ar 1  F2 42                  SBC (PWOL_CONVERT_HEIGHTS_L)
005B9Cr 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
005B9Er 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
005BA0r 1  C9 78                  CMP #SCREEN_OUT_BOTTOM    ;  are we even visible?
005BA2r 1  90 0E                  BCC :+
005BA4r 1  C5 55                  CMP PWOL_TOP_CHECK  ;     #SCREEN_OUT_TOP-50 ;PWOL_TOP_CHECK;
005BA6r 1  B0 0A                  BCS :+
005BA8r 1  CE rr rr               DEC OBJECT_LIST_BYTE6_NEXT
005BABr 1  BD rr rr               LDA OBJECT_LIST_BYTE6_NEXT,X ; grab the old next value
005BAEr 1  92 3E                  STA (PWOL_Z_STARTS_PTR) ; patch the old one back in..
005BB0r 1  80 1A                  BRA @ZAR_NEXT ; and skip THIS
005BB2r 1                       :
005BB2r 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
005BB5r 1  C5 54                  CMP PWOL_CENTER_Y_TOP ; is this above center on screen??
005BB7r 1  B0 0E                  BCS :+ ; is not covering us
005BB9r 1  A5 29                  LDA PWOL_CURRENT_YH
005BBBr 1  C5 53                  CMP PWOL_CENTER_Y
005BBDr 1  90 08                  BCC :+ ; its from ahead of us, OK
005BBFr 1                         ; it was from below and covers us ..
005BBFr 1  BD rr rr               LDA OBJECT_LIST_BYTE0_ADDRLOW,X
005BC2r 1  69 0F                  ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
005BC4r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X
005BC7r 1                         ;LDA #$D0
005BC7r 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
005BC7r 1  A5 27                : LDA PWOL_CURRENT_XH
005BC9r 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
005BCCr 1                         ; for debugging ...
005BCCr 1                     ;    STZ VERA_data0
005BCCr 1                     ;    STA VERA_data0
005BCCr 1                     ;    LDA PWOL_CURRENT_YH
005BCCr 1                     ;    STA VERA_data0
005BCCr 1                     ;    STZ VERA_data0
005BCCr 1               
005BCCr 1                    @ZAR_NEXT:
005BCCr 1                        ; calc next to the right..
005BCCr 1  C8                    INY
005BCDr 1  18                    CLC
005BCEr 1  A5 26                 LDA PWOL_CURRENT_XL
005BD0r 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
005BD2r 1  85 26                 STA PWOL_CURRENT_XL
005BD4r 1  A5 27                 LDA PWOL_CURRENT_XH
005BD6r 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
005BD8r 1  85 27                 STA PWOL_CURRENT_XH
005BDAr 1  AA                    TAX
005BDBr 1  18                    CLC
005BDCr 1  A5 28                 LDA PWOL_CURRENT_YL
005BDEr 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
005BE0r 1  85 28                 STA PWOL_CURRENT_YL
005BE2r 1  A5 29                 LDA PWOL_CURRENT_YH
005BE4r 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
005BE6r 1  85 29                 STA PWOL_CURRENT_YH
005BE8r 1               
005BE8r 1               
005BE8r 1  C5 56                 CMP PWOL_BOT_CHECK
005BEAr 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
005BECr 1  C9 F0                 CMP #SCREEN_OUT_TOP
005BEEr 1  90 0B                 BCC @ZAR_ZIG_LEFT_SWITCH ; its bottom_out <= Y < top out .. because negatives are bigger
005BF0r 1                      :
005BF0r 1  E0 A0                 CPX #SCREEN_OUT_RIGHT ; check against right side
005BF2r 1  90 04                 BCC :+                ; if its within right side then go do next thing..
005BF4r 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
005BF6r 1  90 03                 BCC @ZAR_ZIG_LEFT_SWITCH ; we're to the right of the screen but not far enough to wrap around..
005BF8r 1  4C rr rr            : JMP @zigzag_A_right
005BFBr 1                    @ZAR_ZIG_LEFT_SWITCH: ;PWOL_NEXT_ROW_A_LEFT_XL   ; -> next row is left, going up the screen ..  +0,-1
005BFBr 1  A9 06                 LDA #TRY_AGAIN
005BFDr 1  85 44                 STA PWOL_TRIES_COUNTER
005BFFr 1               ;         INY
005BFFr 1  38                    SEC
005C00r 1  A5 22                 LDA PWOL_TUB_PTR_AL
005C02r 1  E9 40                 SBC #64 ;   0,-1
005C04r 1  85 22                 STA PWOL_TUB_PTR_AL
005C06r 1  A5 23                 LDA PWOL_TUB_PTR_AH
005C08r 1  E9 00                 SBC #0
005C0Ar 1  C9 A0                 CMP #>TUB_WORLD ; are we inside the world still?
005C0Cr 1  B0 03                 BCS :+
005C0Er 1  4C rr rr              JMP @zigzag_B
005C11r 1  85 23               : STA PWOL_TUB_PTR_AH
005C13r 1  A5 57               	 LDA PWOL_MAP_PTR_AL
005C15r 1  E9 40               	 SBC #64
005C17r 1  85 57               	 STA PWOL_MAP_PTR_AL
005C19r 1  A5 58               	 LDA PWOL_MAP_PTR_AH
005C1Br 1  E9 00               	 SBC #0
005C1Dr 1  85 58               	 STA PWOL_MAP_PTR_AH
005C1Fr 1               
005C1Fr 1  18                    CLC
005C20r 1  A5 26                 LDA PWOL_CURRENT_XL
005C22r 1  65 2E                 ADC PWOL_NEXT_ROW_A_LEFT_XL
005C24r 1  85 26                 STA PWOL_CURRENT_XL
005C26r 1  A5 27                 LDA PWOL_CURRENT_XH
005C28r 1  65 2F                 ADC PWOL_NEXT_ROW_A_LEFT_XH
005C2Ar 1  85 27                 STA PWOL_CURRENT_XH
005C2Cr 1  AA                    TAX
005C2Dr 1  18                    CLC
005C2Er 1  A5 28                 LDA PWOL_CURRENT_YL
005C30r 1  65 30                 ADC PWOL_NEXT_ROW_A_LEFT_YL
005C32r 1  85 28                 STA PWOL_CURRENT_YL
005C34r 1  A5 29                 LDA PWOL_CURRENT_YH
005C36r 1  65 31                 ADC PWOL_NEXT_ROW_A_LEFT_YH
005C38r 1  80 21                 BRA @ZAR_ZIG_LEFT_SWITCH_CHECK
005C3Ar 1               
005C3Ar 1                  @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN:
005C3Ar 1  C6 44                 DEC PWOL_TRIES_COUNTER
005C3Cr 1  D0 03                 BNE @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT
005C3Er 1  4C rr rr              JMP @zigzag_B
005C41r 1                  @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT:
005C41r 1  88                    DEY
005C42r 1  38                    SEC
005C43r 1  A5 26                 LDA PWOL_CURRENT_XL
005C45r 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
005C47r 1  85 26                 STA PWOL_CURRENT_XL
005C49r 1  A5 27                 LDA PWOL_CURRENT_XH
005C4Br 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
005C4Dr 1  85 27                 STA PWOL_CURRENT_XH
005C4Fr 1  AA                    TAX
005C50r 1  38                    SEC
005C51r 1  A5 28                 LDA PWOL_CURRENT_YL
005C53r 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
005C55r 1  85 28                 STA PWOL_CURRENT_YL
005C57r 1  A5 29                 LDA PWOL_CURRENT_YH
005C59r 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
005C5Br 1               
005C5Br 1                  @ZAR_ZIG_LEFT_SWITCH_CHECK:
005C5Br 1  85 29                 STA PWOL_CURRENT_YH
005C5Dr 1  C5 56                 CMP PWOL_BOT_CHECK
005C5Fr 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
005C61r 1  C9 F0                 CMP #SCREEN_OUT_TOP
005C63r 1  90 D5                 BCC @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN   ; its bottom_out <= Y < top out .. because negatives are bigger
005C65r 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
005C67r 1  90 04                 BCC @zigzag_A_left
005C69r 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
005C6Br 1  90 CD                 BCC @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
005C6Dr 1               
005C6Dr 1               
005C6Dr 1               
005C6Dr 1                  @zigzag_A_left:
005C6Dr 1  C0 40                CPY #64  ;  make sure we don't go outside level..
005C6Fr 1  B0 72                BCS @ZAL_NEXT ; if we're outside we'll just skip is OK
005C71r 1  B1 57                LDA (PWOL_MAP_PTR_AL),y
005C73r 1  C9 81                CMP #129
005C75r 1  B0 6C                BCS @ZAL_NEXT ; we're outside level.
005C77r 1               
005C77r 1                       ; bytes 1 and 4 were updated when we cleared the object list
005C77r 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
005C7Ar 1  D0 04                BNE :++
005C7Cr 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
005C7Fr 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
005C80r 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
005C82r 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
005C85r 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen...
005C87r 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
005C89r 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
005C8Br 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
005C8Er 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
005C91r 1  8A                   TXA ; push new next to the Z buffer spot
005C92r 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
005C94r 1                       ; bytes .1..4.6 filled in already..
005C94r 1  AD rr rr             LDA WORLD_SPRITE_NUM
005C97r 1  9D rr rr             STA OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway..
005C9Ar 1  B1 57                LDA (PWOL_MAP_PTR_AL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
005C9Cr 1  30 04                BMI @ZAL_HIT_WALL_OUCH
005C9Er 1  B1 22                LDA (PWOL_TUB_PTR_AL),y
005CA0r 1  80 08                BRA @ZAL_INSIDE_TUB
005CA2r 1                     @ZAL_HIT_WALL_OUCH:
005CA2r 1  AD rr rr               LDA WORLD_WALL_SPRITE_NUM
005CA5r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
005CA8r 1  A9 56                  LDA #86 ; max height..
005CAAr 1                     @ZAL_INSIDE_TUB:
005CAAr 1  85 40                  STA PWOL_CONVERT_HEIGHTS ;
005CACr 1  85 42                  STA PWOL_CONVERT_HEIGHTS_L;
005CAEr 1  38                     SEC
005CAFr 1  A5 28                  LDA PWOL_CURRENT_YL
005CB1r 1  F2 42                  SBC (PWOL_CONVERT_HEIGHTS_L)
005CB3r 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
005CB5r 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
005CB7r 1  C9 78                  CMP #SCREEN_OUT_BOTTOM    ;  are we even visible?
005CB9r 1  90 0E                  BCC :+
005CBBr 1  C5 55                  CMP PWOL_TOP_CHECK  ;     #SCREEN_OUT_TOP-50 ;PWOL_TOP_CHECK;
005CBDr 1  B0 0A                  BCS :+
005CBFr 1  CE rr rr               DEC OBJECT_LIST_BYTE6_NEXT
005CC2r 1  BD rr rr               LDA OBJECT_LIST_BYTE6_NEXT,X ; grab the old next value
005CC5r 1  92 3E                  STA (PWOL_Z_STARTS_PTR) ; patch the old one back in..
005CC7r 1  80 1A                  BRA @ZAL_NEXT ; and skip THIS
005CC9r 1                       :
005CC9r 1               
005CC9r 1               
005CC9r 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
005CCCr 1  C5 54                  CMP PWOL_CENTER_Y_TOP ; is this above center on screen??
005CCEr 1  B0 0E                  BCS :+ ; is not covering us
005CD0r 1  A5 29                  LDA PWOL_CURRENT_YH
005CD2r 1  C5 53                  CMP PWOL_CENTER_Y
005CD4r 1  90 08                  BCC :+ ; its from ahead of us, OK
005CD6r 1                         ; it was from below and covers us ..
005CD6r 1  BD rr rr               LDA OBJECT_LIST_BYTE0_ADDRLOW,X
005CD9r 1  69 0F                  ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
005CDBr 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X
005CDEr 1                         ;LDA #$D0
005CDEr 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
005CDEr 1  A5 27                : LDA PWOL_CURRENT_XH
005CE0r 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
005CE3r 1                    @ZAL_NEXT:
005CE3r 1                        ; calc next to the LEFT
005CE3r 1  88                    DEY
005CE4r 1  38                    SEC
005CE5r 1  A5 26                 LDA PWOL_CURRENT_XL
005CE7r 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
005CE9r 1  85 26                 STA PWOL_CURRENT_XL
005CEBr 1  A5 27                 LDA PWOL_CURRENT_XH
005CEDr 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
005CEFr 1  85 27                 STA PWOL_CURRENT_XH
005CF1r 1  AA                    TAX
005CF2r 1  38                    SEC
005CF3r 1  A5 28                 LDA PWOL_CURRENT_YL
005CF5r 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
005CF7r 1  85 28                 STA PWOL_CURRENT_YL
005CF9r 1  A5 29                 LDA PWOL_CURRENT_YH
005CFBr 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
005CFDr 1  85 29                 STA PWOL_CURRENT_YH
005CFFr 1               
005CFFr 1               
005CFFr 1  C5 56                 CMP PWOL_BOT_CHECK
005D01r 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
005D03r 1  C9 F0                 CMP #SCREEN_OUT_TOP
005D05r 1  90 0B                 BCC @ZAL_ZIG_RIGHT_SWITCH   ; its bottom_out <= Y < top out .. because negatives are bigger
005D07r 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
005D09r 1  90 04                 BCC :+                ; if its within right side then go do next thing..
005D0Br 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
005D0Dr 1  90 03                 BCC @ZAL_ZIG_RIGHT_SWITCH     ; we're to the right of the screen but not far enough to wrap around..
005D0Fr 1  4C rr rr            : JMP @zigzag_A_left
005D12r 1               
005D12r 1                    @ZAL_ZIG_RIGHT_SWITCH: ; up/right is +1,+1  from where we is right now ..
005D12r 1  A9 06                 LDA #TRY_AGAIN
005D14r 1  85 44                 STA PWOL_TRIES_COUNTER
005D16r 1  C8                    INY
005D17r 1  38                    SEC
005D18r 1  A5 22                 LDA PWOL_TUB_PTR_AL
005D1Ar 1  E9 40                 SBC #64
005D1Cr 1  85 22                 STA PWOL_TUB_PTR_AL
005D1Er 1  A5 23                 LDA PWOL_TUB_PTR_AH
005D20r 1  E9 00                 SBC #0
005D22r 1  C9 A0                 CMP #>TUB_WORLD ; are we inside the world still?
005D24r 1  B0 03                 BCS :+
005D26r 1  4C rr rr              JMP @zigzag_B
005D29r 1  85 23               : STA PWOL_TUB_PTR_AH
005D2Br 1  A5 57                 LDA PWOL_MAP_PTR_AL
005D2Dr 1  E9 40                 SBC #64
005D2Fr 1  85 57                 STA PWOL_MAP_PTR_AL
005D31r 1  A5 58                 LDA PWOL_MAP_PTR_AH
005D33r 1  E9 00                 SBC #0
005D35r 1  85 58                 STA PWOL_MAP_PTR_AH
005D37r 1               
005D37r 1               
005D37r 1  18                    CLC
005D38r 1               
005D38r 1  A5 26                 LDA PWOL_CURRENT_XL
005D3Ar 1  65 32                 ADC PWOL_NEXT_ROW_A_RIGHT_XL
005D3Cr 1  85 26                 STA PWOL_CURRENT_XL
005D3Er 1               
005D3Er 1  A5 27                 LDA PWOL_CURRENT_XH
005D40r 1  65 33                 ADC PWOL_NEXT_ROW_A_RIGHT_XH
005D42r 1  85 27                 STA PWOL_CURRENT_XH
005D44r 1  AA                    TAX
005D45r 1               
005D45r 1               
005D45r 1  18                    CLC
005D46r 1  A5 28                 LDA PWOL_CURRENT_YL
005D48r 1  65 34                 ADC PWOL_NEXT_ROW_A_RIGHT_YL
005D4Ar 1  85 28                 STA PWOL_CURRENT_YL
005D4Cr 1  A5 29                 LDA PWOL_CURRENT_YH
005D4Er 1  65 35                 ADC PWOL_NEXT_ROW_A_RIGHT_YH
005D50r 1  80 1E                 BRA @ZAL_ZIG_RIGHT_SWITCH_CHECK
005D52r 1               
005D52r 1               
005D52r 1               
005D52r 1                  @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN:
005D52r 1  C6 44                 DEC PWOL_TRIES_COUNTER
005D54r 1  F0 2F                 BEQ @zigzag_B
005D56r 1                  @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN_GO_RIGHT:
005D56r 1  C8                    INY
005D57r 1  18                    CLC
005D58r 1  A5 26                 LDA PWOL_CURRENT_XL
005D5Ar 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
005D5Cr 1  85 26                 STA PWOL_CURRENT_XL
005D5Er 1  A5 27                 LDA PWOL_CURRENT_XH
005D60r 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
005D62r 1  85 27                 STA PWOL_CURRENT_XH
005D64r 1  AA                    TAX
005D65r 1  18                    CLC
005D66r 1  A5 28                 LDA PWOL_CURRENT_YL
005D68r 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
005D6Ar 1  85 28                 STA PWOL_CURRENT_YL
005D6Cr 1  A5 29                 LDA PWOL_CURRENT_YH
005D6Er 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
005D70r 1                  @ZAL_ZIG_RIGHT_SWITCH_CHECK:
005D70r 1  85 29                 STA PWOL_CURRENT_YH
005D72r 1  C5 56                 CMP PWOL_BOT_CHECK
005D74r 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
005D76r 1  C9 F0                 CMP #SCREEN_OUT_TOP
005D78r 1  90 D8                 BCC @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN    ; its bottom_out <= Y < top out .. because negatives are bigger
005D7Ar 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
005D7Cr 1  90 04                 BCC :+
005D7Er 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
005D80r 1  90 D0                 BCC @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
005D82r 1  4C rr rr            : JMP @zigzag_A_right
005D85r 1               
005D85r 1               
005D85r 1                 @zigzag_B: ; going to left and down the screen, including where we are currently..
005D85r 1  38                 SEC
005D86r 1  A5 45              LDA PWOL_START_XL
005D88r 1  E5 2A              SBC PWOL_ACROSS_ROW_XL
005D8Ar 1  85 26              STA PWOL_CURRENT_XL
005D8Cr 1  A5 47              LDA PWOL_START_XH
005D8Er 1  E5 2B              SBC PWOL_ACROSS_ROW_XH
005D90r 1  85 27              STA PWOL_CURRENT_XH
005D92r 1               
005D92r 1               
005D92r 1  38                 SEC
005D93r 1  A5 46              LDA PWOL_START_YL
005D95r 1  E5 2C              SBC PWOL_ACROSS_ROW_YL
005D97r 1  85 28              STA PWOL_CURRENT_YL
005D99r 1  A5 48              LDA PWOL_START_YH
005D9Br 1  E5 2D              SBC PWOL_ACROSS_ROW_YH
005D9Dr 1  85 29              STA PWOL_CURRENT_YH
005D9Fr 1               
005D9Fr 1  AC rr rr           LDY camera_cell_x   ;  eh voila! we haz pointer to ze row to start on .. woot!
005DA2r 1  88                 DEY ; start left
005DA3r 1               
005DA3r 1                  @zigzag_B_left:
005DA3r 1  C0 40                CPY #64  ;  make sure we don't go outside level..
005DA5r 1  B0 72                BCS @ZBL_NEXT ; if we're outside we'll just skip is OK
005DA7r 1  B1 59                LDA (PWOL_MAP_PTR_BL),y
005DA9r 1  C9 81                CMP #129
005DABr 1  B0 6C                BCS @ZBL_NEXT ; we're outside level.
005DADr 1               
005DADr 1                       ; bytes 1 and 4 were updated when we cleared the object list
005DADr 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
005DB0r 1  D0 04                BNE :++
005DB2r 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
005DB5r 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
005DB6r 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
005DB8r 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
005DBBr 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen...
005DBDr 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
005DBFr 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
005DC1r 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
005DC4r 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
005DC7r 1  8A                   TXA ; push new next to the Z buffer spot
005DC8r 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
005DCAr 1                       ; bytes .1..4.6 filled in already..
005DCAr 1  AD rr rr             LDA WORLD_SPRITE_NUM
005DCDr 1  9D rr rr             STA OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway..
005DD0r 1  B1 59                LDA (PWOL_MAP_PTR_BL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
005DD2r 1  30 04                BMI @ZBL_HIT_WALL_OUCH
005DD4r 1  B1 24                LDA (PWOL_TUB_PTR_BL),y
005DD6r 1  80 08                BRA @ZBL_INSIDE_TUB
005DD8r 1                     @ZBL_HIT_WALL_OUCH:
005DD8r 1  AD rr rr               LDA WORLD_WALL_SPRITE_NUM
005DDBr 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
005DDEr 1  A9 56                  LDA #86 ; max height..
005DE0r 1                     @ZBL_INSIDE_TUB:
005DE0r 1  85 40                  STA PWOL_CONVERT_HEIGHTS ;
005DE2r 1  85 42                  STA PWOL_CONVERT_HEIGHTS_L;
005DE4r 1  38                     SEC
005DE5r 1  A5 28                  LDA PWOL_CURRENT_YL
005DE7r 1  F2 42                  SBC (PWOL_CONVERT_HEIGHTS_L)
005DE9r 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
005DEBr 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
005DEDr 1  C9 78                  CMP #SCREEN_OUT_BOTTOM    ;  are we even visible?
005DEFr 1  90 0E                  BCC :+
005DF1r 1  C5 55                  CMP PWOL_TOP_CHECK  ;     #SCREEN_OUT_TOP-50 ;PWOL_TOP_CHECK;
005DF3r 1  B0 0A                  BCS :+
005DF5r 1  CE rr rr               DEC OBJECT_LIST_BYTE6_NEXT
005DF8r 1  BD rr rr               LDA OBJECT_LIST_BYTE6_NEXT,X ; grab the old next value
005DFBr 1  92 3E                  STA (PWOL_Z_STARTS_PTR) ; patch the old one back in..
005DFDr 1  80 1A                  BRA @ZBL_NEXT ; and skip THIS
005DFFr 1                       :
005DFFr 1               
005DFFr 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
005E02r 1  C5 54                  CMP PWOL_CENTER_Y_TOP ; is this above center on screen??
005E04r 1  B0 0E                  BCS :+ ; is not covering us
005E06r 1  A5 29                  LDA PWOL_CURRENT_YH
005E08r 1  C5 53                  CMP PWOL_CENTER_Y
005E0Ar 1  90 08                  BCC :+ ; its from ahead of us, OK
005E0Cr 1                         ; it was from below and covers us ..
005E0Cr 1  BD rr rr               LDA OBJECT_LIST_BYTE0_ADDRLOW,X
005E0Fr 1  69 0F                  ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
005E11r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X
005E14r 1                         ;LDA #$D0
005E14r 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
005E14r 1  A5 27                : LDA PWOL_CURRENT_XH
005E16r 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
005E19r 1                    @ZBL_NEXT:
005E19r 1                        ; calc next to the LEFT
005E19r 1  88                    DEY
005E1Ar 1  38                    SEC
005E1Br 1  A5 26                 LDA PWOL_CURRENT_XL
005E1Dr 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
005E1Fr 1  85 26                 STA PWOL_CURRENT_XL
005E21r 1  A5 27                 LDA PWOL_CURRENT_XH
005E23r 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
005E25r 1  85 27                 STA PWOL_CURRENT_XH
005E27r 1  AA                    TAX
005E28r 1  38                    SEC
005E29r 1  A5 28                 LDA PWOL_CURRENT_YL
005E2Br 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
005E2Dr 1  85 28                 STA PWOL_CURRENT_YL
005E2Fr 1  A5 29                 LDA PWOL_CURRENT_YH
005E31r 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
005E33r 1  85 29                 STA PWOL_CURRENT_YH
005E35r 1               
005E35r 1               
005E35r 1  C5 56                 CMP PWOL_BOT_CHECK
005E37r 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
005E39r 1  C9 F0                 CMP #SCREEN_OUT_TOP
005E3Br 1  90 0B                 BCC @ZBL_ZIG_RIGHT_SWITCH     ; its bottom_out <= Y < top out .. because negatives are bigger
005E3Dr 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
005E3Fr 1  90 04                 BCC :+                ; if its within right side then go do next thing..
005E41r 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
005E43r 1  90 03                 BCC @ZBL_ZIG_RIGHT_SWITCH     ; we're to the right of the screen but not far enough to wrap around..
005E45r 1  4C rr rr            : JMP @zigzag_B_left
005E48r 1               
005E48r 1               
005E48r 1               
005E48r 1                    @ZBL_ZIG_RIGHT_SWITCH: ; DOWN/LEFT to start right is is 0,+1  from where we is right now ..
005E48r 1                        ;INY
005E48r 1                        ;INY
005E48r 1  A9 06                 LDA #TRY_AGAIN
005E4Ar 1  85 44                 STA PWOL_TRIES_COUNTER
005E4Cr 1  18                    CLC
005E4Dr 1  A5 24                 LDA PWOL_TUB_PTR_BL
005E4Fr 1  69 40                 ADC #64
005E51r 1  85 24                 STA PWOL_TUB_PTR_BL
005E53r 1  A5 25                 LDA PWOL_TUB_PTR_BH
005E55r 1  69 00                 ADC #0
005E57r 1  C9 A8                 CMP #>TUB_WORLD+8
005E59r 1  90 01                 BCC :+
005E5Br 1  60                    rts
005E5Cr 1  85 25               : STA PWOL_TUB_PTR_BH
005E5Er 1               
005E5Er 1  A5 59               	 LDA PWOL_MAP_PTR_BL
005E60r 1  69 40               	 ADC #64
005E62r 1  85 59               	 STA PWOL_MAP_PTR_BL
005E64r 1  A5 5A               	 LDA PWOL_MAP_PTR_BH
005E66r 1  69 00               	 ADC #0
005E68r 1  85 5A               	 STA PWOL_MAP_PTR_BH
005E6Ar 1               
005E6Ar 1  18                    CLC
005E6Br 1               
005E6Br 1  A5 26                 LDA PWOL_CURRENT_XL
005E6Dr 1  65 3A                 ADC PWOL_NEXT_ROW_B_RIGHT_XL
005E6Fr 1  85 26                 STA PWOL_CURRENT_XL
005E71r 1               
005E71r 1  A5 27                 LDA PWOL_CURRENT_XH
005E73r 1  65 3B                 ADC PWOL_NEXT_ROW_B_RIGHT_XH
005E75r 1  85 27                 STA PWOL_CURRENT_XH
005E77r 1  AA                    TAX
005E78r 1               
005E78r 1               
005E78r 1  18                    CLC
005E79r 1  A5 28                 LDA PWOL_CURRENT_YL
005E7Br 1  65 3C                 ADC PWOL_NEXT_ROW_B_RIGHT_YL
005E7Dr 1  85 28                 STA PWOL_CURRENT_YL
005E7Fr 1  A5 29                 LDA PWOL_CURRENT_YH
005E81r 1  65 3D                 ADC PWOL_NEXT_ROW_B_RIGHT_YH
005E83r 1  80 1F                 BRA @ZBL_ZIG_RIGHT_SWITCH_CHECK
005E85r 1               
005E85r 1                  @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN:
005E85r 1  C6 44                 DEC PWOL_TRIES_COUNTER
005E87r 1  D0 01                 BNE @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN_GO_RIGHT
005E89r 1                  @ZBL_RTS:
005E89r 1               ;          STZ VERA_data0
005E89r 1                ;         STZ VERA_data0
005E89r 1                 ;        STZ VERA_data0
005E89r 1                  ;       STZ VERA_data0
005E89r 1  60                 rts
005E8Ar 1                  @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN_GO_RIGHT:
005E8Ar 1  C8                    INY
005E8Br 1  18                    CLC
005E8Cr 1  A5 26                 LDA PWOL_CURRENT_XL
005E8Er 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
005E90r 1  85 26                 STA PWOL_CURRENT_XL
005E92r 1  A5 27                 LDA PWOL_CURRENT_XH
005E94r 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
005E96r 1  85 27                 STA PWOL_CURRENT_XH
005E98r 1  AA                    TAX
005E99r 1  18                    CLC
005E9Ar 1  A5 28                 LDA PWOL_CURRENT_YL
005E9Cr 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
005E9Er 1  85 28                 STA PWOL_CURRENT_YL
005EA0r 1  A5 29                 LDA PWOL_CURRENT_YH
005EA2r 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
005EA4r 1                  @ZBL_ZIG_RIGHT_SWITCH_CHECK:
005EA4r 1  85 29                 STA PWOL_CURRENT_YH
005EA6r 1  C5 56                 CMP PWOL_BOT_CHECK
005EA8r 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
005EAAr 1  C9 F0                 CMP #SCREEN_OUT_TOP
005EACr 1  90 D7                 BCC @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN    ; its bottom_out <= Y < top out .. because negatives are bigger
005EAEr 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
005EB0r 1  90 04                 BCC @zigzag_B_right
005EB2r 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
005EB4r 1  90 CF                 BCC @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
005EB6r 1               
005EB6r 1               
005EB6r 1               
005EB6r 1                   @zigzag_B_right:
005EB6r 1  C0 40                CPY #64  ;  make sure we don't go outside level..
005EB8r 1  B0 72                BCS @ZBR_NEXT ; if we're outside we'll just skip is OK
005EBAr 1  B1 59                LDA (PWOL_MAP_PTR_BL),y
005EBCr 1  C9 81                CMP #129
005EBEr 1  B0 6C                BCS @ZBR_NEXT ; we're outside level.
005EC0r 1               
005EC0r 1                       ; bytes 1 and 4 were updated when we cleared the object list
005EC0r 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
005EC3r 1  D0 04                BNE :++
005EC5r 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
005EC8r 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
005EC9r 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
005ECBr 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
005ECEr 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen...
005ED0r 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
005ED2r 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
005ED4r 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
005ED7r 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
005EDAr 1  8A                   TXA ; push new next to the Z buffer spot
005EDBr 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
005EDDr 1                       ; bytes .1..4.6 filled in already..
005EDDr 1  AD rr rr             LDA WORLD_SPRITE_NUM
005EE0r 1  9D rr rr             STA OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway..
005EE3r 1  B1 59                LDA (PWOL_MAP_PTR_BL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
005EE5r 1  30 04                BMI @ZBR_HIT_WALL_OUCH
005EE7r 1  B1 24                LDA (PWOL_TUB_PTR_BL),y
005EE9r 1  80 08                BRA @ZBR_INSIDE_TUB
005EEBr 1                     @ZBR_HIT_WALL_OUCH:
005EEBr 1  AD rr rr               LDA WORLD_WALL_SPRITE_NUM
005EEEr 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
005EF1r 1  A9 56                  LDA #86 ; max height..
005EF3r 1                     @ZBR_INSIDE_TUB:
005EF3r 1  85 40                  STA PWOL_CONVERT_HEIGHTS ;
005EF5r 1  85 42                  STA PWOL_CONVERT_HEIGHTS_L;
005EF7r 1  38                     SEC
005EF8r 1  A5 28                  LDA PWOL_CURRENT_YL
005EFAr 1  F2 42                  SBC (PWOL_CONVERT_HEIGHTS_L)
005EFCr 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
005EFEr 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
005F00r 1  C9 78                  CMP #SCREEN_OUT_BOTTOM    ;  are we even visible?
005F02r 1  90 0E                  BCC :+
005F04r 1  C5 55                  CMP PWOL_TOP_CHECK  ;     #SCREEN_OUT_TOP-50 ;PWOL_TOP_CHECK;
005F06r 1  B0 0A                  BCS :+
005F08r 1  CE rr rr               DEC OBJECT_LIST_BYTE6_NEXT
005F0Br 1  BD rr rr               LDA OBJECT_LIST_BYTE6_NEXT,X ; grab the old next value
005F0Er 1  92 3E                  STA (PWOL_Z_STARTS_PTR) ; patch the old one back in..
005F10r 1  80 1A                  BRA @ZBR_NEXT ; and skip THIS
005F12r 1                       :
005F12r 1               
005F12r 1               
005F12r 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
005F15r 1  C5 54                  CMP PWOL_CENTER_Y_TOP ; is this above center on screen??
005F17r 1  B0 0E                  BCS :+ ; is not covering us
005F19r 1  A5 29                  LDA PWOL_CURRENT_YH
005F1Br 1  C5 53                  CMP PWOL_CENTER_Y
005F1Dr 1  90 08                  BCC :+ ; its from ahead of us, OK
005F1Fr 1                         ; it was from below and covers us ..
005F1Fr 1  BD rr rr               LDA OBJECT_LIST_BYTE0_ADDRLOW,X
005F22r 1  69 0F                  ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
005F24r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X
005F27r 1                         ;LDA #$D0
005F27r 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
005F27r 1  A5 27                : LDA PWOL_CURRENT_XH
005F29r 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
005F2Cr 1                    @ZBR_NEXT:
005F2Cr 1                        ; calc next to the right..
005F2Cr 1  C8                    INY
005F2Dr 1  18                    CLC
005F2Er 1  A5 26                 LDA PWOL_CURRENT_XL
005F30r 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
005F32r 1  85 26                 STA PWOL_CURRENT_XL
005F34r 1  A5 27                 LDA PWOL_CURRENT_XH
005F36r 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
005F38r 1  85 27                 STA PWOL_CURRENT_XH
005F3Ar 1  AA                    TAX
005F3Br 1  18                    CLC
005F3Cr 1  A5 28                 LDA PWOL_CURRENT_YL
005F3Er 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
005F40r 1  85 28                 STA PWOL_CURRENT_YL
005F42r 1  A5 29                 LDA PWOL_CURRENT_YH
005F44r 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
005F46r 1  85 29                 STA PWOL_CURRENT_YH
005F48r 1               
005F48r 1               
005F48r 1  C5 56                 CMP PWOL_BOT_CHECK
005F4Ar 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
005F4Cr 1  C9 F0                 CMP #SCREEN_OUT_TOP
005F4Er 1  90 0B                 BCC @ZBR_ZIG_LEFT_SWITCH     ; its bottom_out <= Y < top out .. because negatives are bigger
005F50r 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
005F52r 1  90 04                 BCC :+                ; if its within right side then go do next thing..
005F54r 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
005F56r 1  90 03                 BCC @ZBR_ZIG_LEFT_SWITCH        ; we're to the right of the screen but not far enough to wrap around..
005F58r 1  4C rr rr            : JMP @zigzag_B_right
005F5Br 1               
005F5Br 1               
005F5Br 1               
005F5Br 1                    @ZBR_ZIG_LEFT_SWITCH: ;PWOL_NEXT_ROW_A_LEFT_XL   ; -> next row is left, going down the screen ..  +1,+1
005F5Br 1  A9 06                 LDA #TRY_AGAIN
005F5Dr 1  85 44                 STA PWOL_TRIES_COUNTER
005F5Fr 1  88                   DEY ; have to go this to match where the thing is going .. 0,0
005F60r 1  18                    CLC
005F61r 1  A5 24                 LDA PWOL_TUB_PTR_BL
005F63r 1  69 40                 ADC #64 ;   0,-1
005F65r 1  85 24                 STA PWOL_TUB_PTR_BL
005F67r 1  A5 25                 LDA PWOL_TUB_PTR_BH
005F69r 1  69 00                 ADC #0
005F6Br 1  C9 A8                 CMP #>TUB_WORLD+8
005F6Dr 1  90 01                 BCC :+
005F6Fr 1  60                    rts
005F70r 1  85 25               : STA PWOL_TUB_PTR_BH
005F72r 1               
005F72r 1  A5 59                 LDA PWOL_MAP_PTR_BL
005F74r 1  69 40                 ADC #64 ;   0,-1
005F76r 1  85 59                 STA PWOL_MAP_PTR_BL
005F78r 1  A5 5A                 LDA PWOL_MAP_PTR_BH
005F7Ar 1  69 00                 ADC #0
005F7Cr 1  85 5A                 STA PWOL_MAP_PTR_BH
005F7Er 1               
005F7Er 1  18                    CLC
005F7Fr 1  A5 26                 LDA PWOL_CURRENT_XL
005F81r 1  65 36                 ADC PWOL_NEXT_ROW_B_LEFT_XL
005F83r 1  85 26                 STA PWOL_CURRENT_XL
005F85r 1  A5 27                 LDA PWOL_CURRENT_XH
005F87r 1  65 37                 ADC PWOL_NEXT_ROW_B_LEFT_XH
005F89r 1  85 27                 STA PWOL_CURRENT_XH
005F8Br 1  AA                    TAX
005F8Cr 1  18                    CLC
005F8Dr 1  A5 28                 LDA PWOL_CURRENT_YL
005F8Fr 1  65 38                 ADC PWOL_NEXT_ROW_B_LEFT_YL
005F91r 1  85 28                 STA PWOL_CURRENT_YL
005F93r 1  A5 29                 LDA PWOL_CURRENT_YH
005F95r 1  65 39                 ADC PWOL_NEXT_ROW_B_LEFT_YH
005F97r 1  80 1F                 BRA @ZBR_ZIG_LEFT_SWITCH_CHECK
005F99r 1               
005F99r 1               
005F99r 1               
005F99r 1                  @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN:
005F99r 1  C6 44                 DEC PWOL_TRIES_COUNTER
005F9Br 1  D0 01                 BNE @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT
005F9Dr 1                  @ZBR_RTS:
005F9Dr 1               ;          STZ VERA_data0
005F9Dr 1               ;          STZ VERA_data0
005F9Dr 1               ;          STZ VERA_data0
005F9Dr 1               ;          STZ VERA_data0
005F9Dr 1  60                    rts
005F9Er 1                  @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT:
005F9Er 1  88                    DEY
005F9Fr 1  38                    SEC
005FA0r 1  A5 26                 LDA PWOL_CURRENT_XL
005FA2r 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
005FA4r 1  85 26                 STA PWOL_CURRENT_XL
005FA6r 1  A5 27                 LDA PWOL_CURRENT_XH
005FA8r 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
005FAAr 1  85 27                 STA PWOL_CURRENT_XH
005FACr 1  AA                    TAX
005FADr 1  38                    SEC
005FAEr 1  A5 28                 LDA PWOL_CURRENT_YL
005FB0r 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
005FB2r 1  85 28                 STA PWOL_CURRENT_YL
005FB4r 1  A5 29                 LDA PWOL_CURRENT_YH
005FB6r 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
005FB8r 1               
005FB8r 1               @ZBR_ZIG_LEFT_SWITCH_CHECK:
005FB8r 1  85 29                 STA PWOL_CURRENT_YH
005FBAr 1  C5 56                 CMP PWOL_BOT_CHECK
005FBCr 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
005FBEr 1  C9 F0                 CMP #SCREEN_OUT_TOP
005FC0r 1  90 D7                 BCC @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN   ; its bottom_out <= Y < top out .. because negatives are bigger
005FC2r 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
005FC4r 1  90 04                 BCC :+
005FC6r 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
005FC8r 1  90 CF                 BCC @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
005FCAr 1  4C rr rr            : JMP @zigzag_B_left
005FCDr 1               
005FCDr 1               
005FCDr 1               draw_object_list:
005FCDr 1  AC rr rr          LDY NUM_AVAIL_SPRITES ; num sprites can write
005FD0r 1  D0 03             BNE :+
005FD2r 1  4C rr rr          JMP draw_object_list_to_BUFFER
005FD5r 1                  :
005FD5r 1  AD rr rr         LDA NUM_RESERVED_SPRITES
005FD8r 1               ;    INC VERA_LOCK
005FD8r 1               ;    BNE @unlock_vera   there's no actual way to get here and not have vera unlock.. s
005FD8r 1               ;  so instead, we're going to DEC the VERA_LOCK after the new frame is ready, which is after this function..
005FD8r 1               
005FD8r 1               
005FD8r 1               
005FD8r 1               
005FD8r 1  9C 25 9F         STZ VERA_ctrl
005FDBr 1  64 22            STZ ZP_PTR
005FDDr 1  0A               ASL
005FDEr 1  26 22            ROL ZP_PTR
005FE0r 1  0A               ASL
005FE1r 1  26 22            ROL ZP_PTR
005FE3r 1  0A               ASL
005FE4r 1  26 22            ROL ZP_PTR
005FE6r 1  8D 20 9F         STA VERA_addr_low
005FE9r 1  18               CLC
005FEAr 1  A5 22            LDA ZP_PTR
005FECr 1  69 EC            ADC #>VRAM_SPRITE_BUF;  #>VRAM_SPRITE_BUF ; #>VRAM_sprite_attributes;
005FEEr 1  8D 21 9F         sta VERA_addr_high
005FF1r 1  A9 11            lda #$11
005FF3r 1  8D 22 9F         sta VERA_addr_bank
005FF6r 1  AD rr rr         LDA SPRITE_OBJECT_ENABLE
005FF9r 1  D0 22            BNE @SET_Z_PTR
005FFBr 1  A9 01            LDA #1
005FFDr 1  A2 0C            LDX #$0C
005FFFr 1  9C 23 9F        : STZ VERA_data0  ; addr low
006002r 1  8D 23 9F          STA VERA_data0  ; mod/addr_hi
006005r 1  9C 23 9F          STZ VERA_data0  ; xl
006008r 1  9C 23 9F          STZ VERA_data0  ; Xh
00600Br 1  9C 23 9F          STZ VERA_data0  ; yl
00600Er 1  9C 23 9F          STZ VERA_data0  ; yh
006011r 1  8E 23 9F          STX VERA_data0
006014r 1  9C 23 9F          STZ VERA_data0
006017r 1  88                DEY
006018r 1  D0 E5             BNE :-
00601Ar 1  4C rr rr         JMP draw_object_list_to_BUFFER
00601Dr 1               
00601Dr 1               
00601Dr 1               @SET_Z_PTR:
00601Dr 1  64 22            STZ ZP_PTR
00601Fr 1  A9 rr            LDA #>OBJECT_LIST_Z_START_POINTERS
006021r 1  85 23            STA ZP_PTR+1
006023r 1               
006023r 1               
006023r 1                 @NEXT_Z: ; Z=0 is invalid...
006023r 1  E6 22              INC ZP_PTR
006025r 1  D0 1C              BNE @Z_LOOP
006027r 1  AD 23 9F           : LDA VERA_data0
00602Ar 1  AD 23 9F             LDA VERA_data0
00602Dr 1  9C 23 9F             STZ VERA_data0
006030r 1  9C 23 9F             STZ VERA_data0
006033r 1  AD 23 9F             LDA VERA_data0
006036r 1  AD 23 9F             LDA VERA_data0
006039r 1  AD 23 9F             LDA VERA_data0
00603Cr 1  AD 23 9F             LDA VERA_data0
00603Fr 1  88                   DEY
006040r 1  D0 E5                BNE :-
006042r 1                  @rts:
006042r 1  60                 rts
006043r 1                 @Z_LOOP:
006043r 1  B2 22              LDA (ZP_PTR) ; get our first victim
006045r 1  AA                 TAX
006046r 1  A9 00              LDA #0
006048r 1  92 22              STA (ZP_PTR) ; zero this Z_next for now
00604Ar 1  8A                 TXA
00604Br 1                    @OBJ_LOOP:
00604Br 1  AA                    TAX
00604Cr 1  F0 D5                 BEQ @NEXT_Z ; got a bum next pointer there ...
00604Er 1  BD rr rr              LDA OBJECT_LIST_BYTE0_ADDRLOW,X
006051r 1  8D 23 9F              STA VERA_data0
006054r 1  BD rr rr              LDA OBJECT_LIST_BYTE1_MODE,x
006057r 1  8D 23 9F              STA VERA_data0
00605Ar 1  BD rr rr              LDA OBJECT_LIST_BYTE2_X,x
00605Dr 1  8D 23 9F              STA VERA_data0
006060r 1  C9 A0                 CMP #SCREEN_OUT_RIGHT
006062r 1  A9 00                 LDA #0
006064r 1  90 02                 BCC :+
006066r 1  A9 FF                 LDA #$FF
006068r 1  8D 23 9F            : STA VERA_data0
00606Br 1               
00606Br 1  BD rr rr              LDA OBJECT_LIST_BYTE3_Y,x
00606Er 1  8D 23 9F              STA VERA_data0
006071r 1  C9 78                 CMP #SCREEN_OUT_BOTTOM
006073r 1  A9 00                 LDA #0
006075r 1  90 02                 BCC :+
006077r 1  A9 FF                 LDA #$FF
006079r 1  8D 23 9F            : STA VERA_data0
00607Cr 1  BD rr rr              LDA OBJECT_LIST_BYTE4_ZFLIPS,x
00607Fr 1  8D 23 9F              STA VERA_data0
006082r 1  BD rr rr              LDA OBJECT_LIST_BYTE5_SIZE,x
006085r 1  8D 23 9F              STA VERA_data0
006088r 1  BD rr rr              LDA OBJECT_LIST_BYTE6_NEXT,x
00608Br 1  88                    DEY ; decrement that Y
00608Cr 1  D0 BD                 BNE @OBJ_LOOP ; still sprite slots left.. woot!
00608Er 1  92 22                 STA (ZP_PTR) ; oops.. save that last thing and exit..
006090r 1               draw_object_list_to_BUFFER:
006090r 1               DOLB_ZTRACKER = ZP_PTR
006090r 1               DOLB_ZTRACKERH = ZP_PTR+1
006090r 1               DOLB_BUFFER_HIGH_BYTE = ZP_PTR+2
006090r 1               DOLB_CALC_DEST_LOW = ZP_PTR+3
006090r 1               DOLB_CALC_DEST_HIGH = ZP_PTR+4
006090r 1               DOLB_CALC_SCRATCH = ZP_PTR+5
006090r 1               DOLB_STOP_BOTTOM = ZP_PTR+6
006090r 1               DOLB_Y_CALC_POINTER = ZP_PTR+7
006090r 1               DOLB_Y_CALC_POINTERH = ZP_PTR+8
006090r 1               
006090r 1  A9 0C           LDA #12
006092r 1  8D 25 9F        STA VERA_ctrl
006095r 1  9C 29 9F        STZ FX_CACHE_L ; zero out the cache bytes..
006098r 1  9C 2A 9F        STZ FX_CACHE_M
00609Br 1  9C 2B 9F        STZ FX_CACHE_H
00609Er 1  9C 2C 9F        STZ FX_CACHE_U
0060A1r 1               
0060A1r 1  A9 04           LDA #4  ;    DCSEL 2 with address select 0.. to be used as destination..
0060A3r 1  8D 25 9F        STA VERA_ctrl
0060A6r 1  9C 2C 9F        STZ FX_MULT
0060A9r 1  A9 60           LDA #%01100000
0060ABr 1  8D 29 9F        STA FX_CTRL ;     cache write enable, cache fill and other stuff disabled
0060AEr 1               
0060AEr 1  9C 20 9F        STZ VERA_addr_low
0060B1r 1               ;        A        B     CURRENT BITMAP BUFFER
0060B1r 1               ;   0   display  dirty    A is being displayed, B to be drawn on
0060B1r 1               ;  64   display  ready    B  is ready for swap
0060B1r 1               ; 128   dirty    display  B is being displayed, A to be drawn on
0060B1r 1               ; 192   ready    display  A  is ready for swap
0060B1r 1               
0060B1r 1  64 29           STZ DOLB_Y_CALC_POINTER
0060B3r 1  AD rr rr        LDA CURRENT_BITMAP_BUFFER
0060B6r 1  10 08           BPL @DRAW_ON_B
0060B8r 1               @DRAW_ON_A:
0060B8r 1  A9 18           LDA #>VRAM_BITMAP_LAYERA
0060BAr 1  A2 80           LDX #>VRAM_BITMAP_LAYERB
0060BCr 1  A0 rr           LDY #>BUFFER_A_OFFSETS_HIGH
0060BEr 1  80 06           BRA @GO_DRAW
0060C0r 1               @DRAW_ON_B:
0060C0r 1  A9 80           LDA #>VRAM_BITMAP_LAYERB
0060C2r 1  A2 E4           LDX #>VRAM_TEXT_SCREEN
0060C4r 1  A0 rr           LDY #>BUFFER_B_OFFSETS_HIGH
0060C6r 1               @GO_DRAW:
0060C6r 1  85 24           STA DOLB_BUFFER_HIGH_BYTE
0060C8r 1  CA              DEX
0060C9r 1  86 28           STX DOLB_STOP_BOTTOM
0060CBr 1  84 2A           STY DOLB_Y_CALC_POINTERH
0060CDr 1  8D 21 9F        STA VERA_addr_high
0060D0r 1  A9 31           LDA #$31; 4 at a time
0060D2r 1  8D 22 9F        STA VERA_addr_bank
0060D5r 1                  ; clear the buffer ...
0060D5r 1               
0060D5r 1               
0060D5r 1  18              CLC
0060D6r 1  A9 00           LDA #0
0060D8r 1  A2 78           LDX #120;120 ; do 160*120 = 19,200/4 = 4,800 iterations.. if we do 20 iterations a pop.. 240 x iterations
0060DAr 1               
0060DAr 1               
0060DAr 1  9C 23 9F      : STZ VERA_data0 ;     trigger cache write - 4 bytes / 8px
0060DDr 1  9C 23 9F        STZ VERA_data0
0060E0r 1  9C 23 9F        STZ VERA_data0
0060E3r 1  9C 23 9F        STZ VERA_data0 ; 32 px cleared
0060E6r 1               
0060E6r 1  9C 23 9F        STZ VERA_data0
0060E9r 1  9C 23 9F        STZ VERA_data0
0060ECr 1  9C 23 9F        STZ VERA_data0
0060EFr 1  9C 23 9F        STZ VERA_data0 ; 64 px cleared
0060F2r 1               
0060F2r 1  9C 23 9F        STZ VERA_data0
0060F5r 1  9C 23 9F        STZ VERA_data0
0060F8r 1  9C 23 9F        STZ VERA_data0
0060FBr 1  9C 23 9F        STZ VERA_data0 ; 96
0060FEr 1               
0060FEr 1  9C 23 9F        STZ VERA_data0
006101r 1  9C 23 9F        STZ VERA_data0
006104r 1  9C 23 9F        STZ VERA_data0
006107r 1  9C 23 9F        STZ VERA_data0 ; 128
00610Ar 1               
00610Ar 1  9C 23 9F        STZ VERA_data0
00610Dr 1  9C 23 9F        STZ VERA_data0
006110r 1  9C 23 9F        STZ VERA_data0
006113r 1  9C 23 9F        STZ VERA_data0 ; 160 px cleared
006116r 1               
006116r 1  18              CLC
006117r 1  AD 20 9F        LDA VERA_addr_low
00611Ar 1  69 50           ADC #80     ;     increment A for the low part the address
00611Cr 1  8D 20 9F        STA VERA_addr_low
00611Fr 1  AD 21 9F        LDA VERA_addr_high
006122r 1  69 00           ADC #0
006124r 1  8D 21 9F        STA VERA_addr_high
006127r 1               
006127r 1  CA              DEX
006128r 1  D0 B0           BNE :- ; 85 * 120 = 10,200 .. + 119 * 14 =1,666 .. 11,866 cycles to clear entire screen.. ok
00612Ar 1               
00612Ar 1  A9 E0            LDA #$E0
00612Cr 1  8D 29 9F        STA FX_CTRL
00612Fr 1               ;    STZ FX_CTRL
00612Fr 1  A9 FF           LDA #$FF
006131r 1  85 22           STA DOLB_ZTRACKER
006133r 1  A9 rr           LDA #>OBJECT_LIST_Z_START_POINTERS
006135r 1  85 23           STA DOLB_ZTRACKERH
006137r 1  80 0B           BRA @GO_Z
006139r 1                 @DONE_Z: ; Z=0 is invalid...
006139r 1  9C 29 9F           STZ FX_CTRL ;     clear the cache writing for now
00613Cr 1  9C 25 9F           STZ VERA_ctrl  ;     switch back to regular mode for now..
00613Fr 1  60                 RTS
006140r 1                 @NEXT_Z:
006140r 1  C6 22              DEC DOLB_ZTRACKER
006142r 1  F0 F5              BEQ @DONE_Z
006144r 1                 @GO_Z:
006144r 1  B2 22              LDA (DOLB_ZTRACKER) ; get our first victim
006146r 1  D0 07              BNE @DO_OBJECT
006148r 1  80 F6              BRA @NEXT_Z
00614Ar 1                 @NEXT_OBJECT:
00614Ar 1  BD rr rr           LDA OBJECT_LIST_BYTE6_NEXT,x
00614Dr 1  F0 F1              BEQ @NEXT_Z
00614Fr 1                 @DO_OBJECT:
00614Fr 1  AA                 TAX      ;     get that pointer into X so we can do stuffs...
006150r 1                     ; OK so now reference OBJECT_LIST_BYTE*,X for whatever we're drawing.. and Y is free for whatever..
006150r 1                     ; first things first, let's figure out where in the buffer to draw.. starting with X location..
006150r 1  BC rr rr           LDY OBJECT_LIST_BYTE3_Y,X
006153r 1  BD rr rr           LDA OBJECT_LIST_BYTE2_X,X  ;
006156r 1  4A                 LSR
006157r 1  C9 50              CMP #80
006159r 1  90 04              BCC @X_POSITIVE ; check  outside screen.. left/right...
00615Br 1  18                 CLC
00615Cr 1  69 20              ADC #32 ; to <128, then to <160 of the previous Y ?
00615Er 1  88                 DEY
00615Fr 1                  @X_POSITIVE:
00615Fr 1  C0 78              CPY #120 ; check inside screen..
006161r 1  90 41              BCC @Y_POSITIVE ;   for now, just skip if outside..
006163r 1  C0 C1              CPY #193
006165r 1  90 E3              BCC @NEXT_OBJECT
006167r 1  8D 20 9F           STA VERA_addr_low
00616Ar 1  B2 29              LDA (DOLB_Y_CALC_POINTER)
00616Cr 1  8D 21 9F           STA VERA_addr_high
00616Fr 1  EE 25 9F           INC VERA_ctrl
006172r 1  98                 TYA
006173r 1  49 FF              EOR #$FF
006175r 1  1A                 INC A
006176r 1  0A                 ASL ; x2 bytes
006177r 1  0A                 ASL ; x4 bytes
006178r 1  0A                 ASL ; x8 bytes - is offset into sprite address start..
006179r 1  85 27              STA DOLB_CALC_SCRATCH
00617Br 1  AC rr rr           LDY OBJECT_LIST_BYTE1_MODE
00617Er 1               
00617Er 1  B9 rr rr           LDA LOW_NIBBLE_HIGH,Y
006181r 1  0A                 ASL
006182r 1  A8                 TAY
006183r 1  A9 08              LDA #$08
006185r 1  2A                 ROL
006186r 1  8D 22 9F           STA VERA_addr_bank
006189r 1  98                 TYA
00618Ar 1  BC rr rr           LDY OBJECT_LIST_BYTE0_ADDRLOW,X
00618Dr 1  19 rr rr           ORA SPRITE_ADDRESS_LOW_HIGH,Y
006190r 1  8D 21 9F           STA VERA_addr_high
006193r 1  18                 CLC
006194r 1  B9 rr rr           LDA SPRITE_ADDRESS_LOW_LOW,Y
006197r 1  65 27              ADC DOLB_CALC_SCRATCH
006199r 1  8D 20 9F           STA VERA_addr_low
00619Cr 1               
00619Cr 1  BD rr rr           LDA OBJECT_LIST_BYTE3_Y,X
00619Fr 1  69 40              ADC #64 ; push positive..
0061A1r 1  A8                 TAY
0061A2r 1  80 3B              BRA @Y_WAS_NEGATIVE
0061A4r 1               
0061A4r 1                  @Y_POSITIVE:
0061A4r 1  79 rr rr           ADC BITMAP_OFFSETS_LOW,Y ; note how this works because carry isn't set.. ?
0061A7r 1  8D 20 9F           STA VERA_addr_low
0061AAr 1  B1 29              LDA (DOLB_Y_CALC_POINTER),Y ; now do the high for the dest..
0061ACr 1  69 00              ADC #0
0061AEr 1  8D 21 9F           STA VERA_addr_high
0061B1r 1  EE 25 9F           INC VERA_ctrl  ;  now we need to calculate sprite source address..
0061B4r 1  BC rr rr           LDY OBJECT_LIST_BYTE1_MODE,X
0061B7r 1  B9 rr rr           LDA LOW_NIBBLE_HIGH,Y
0061BAr 1  0A                 ASL
0061BBr 1  A8                 TAY
0061BCr 1  A9 08              LDA #$08
0061BEr 1  2A                 ROL
0061BFr 1  8D 22 9F           STA VERA_addr_bank
0061C2r 1  98                 TYA
0061C3r 1  BC rr rr           LDY OBJECT_LIST_BYTE0_ADDRLOW,X
0061C6r 1  19 rr rr           ORA SPRITE_ADDRESS_LOW_HIGH,Y
0061C9r 1  8D 21 9F           STA VERA_addr_high
0061CCr 1  B9 rr rr           LDA SPRITE_ADDRESS_LOW_LOW,Y
0061CFr 1  8D 20 9F           STA VERA_addr_low
0061D2r 1               
0061D2r 1  38                 SEC
0061D3r 1  A9 78              LDA #120
0061D5r 1  FD rr rr           SBC OBJECT_LIST_BYTE3_Y,X ;   want to check if screenH-Y < 64
0061D8r 1  C9 41              CMP #65
0061DAr 1  90 02              BCC :+
0061DCr 1  A9 40              LDA #64
0061DEr 1  A8               : TAY
0061DFr 1                  @CHECK_ALIGN:
0061DFr 1                  @Y_WAS_NEGATIVE:
0061DFr 1  CE 25 9F           DEC VERA_ctrl  ;  regain dest address
0061E2r 1  AD 20 9F           LDA VERA_addr_low
0061E5r 1  29 03              AND #$03
0061E7r 1  F0 07              BEQ @DO_ZERO_RIGHT
0061E9r 1  0A                 ASL
0061EAr 1  0A                 ASL
0061EBr 1  8D 2C 9F           STA FX_MULT
0061EEr 1  D0 39              BNE @CHECK_OTHER_ALIGNS
0061F0r 1                  @DO_ZERO_RIGHT:
0061F0r 1  9C 2C 9F           STZ FX_MULT
0061F3r 1  80 10              BRA :++
0061F5r 1                  :
0061F5r 1  AD 20 9F           LDA VERA_addr_low
0061F8r 1  69 98              ADC #160-8
0061FAr 1  8D 20 9F           STA VERA_addr_low
0061FDr 1  AD 21 9F           LDA VERA_addr_high
006200r 1  69 00              ADC #0
006202r 1  8D 21 9F           STA VERA_addr_high
006205r 1                  :
006205r 1  AD 24 9F           LDA VERA_data1
006208r 1  AD 24 9F           LDA VERA_data1
00620Br 1  AD 24 9F           LDA VERA_data1
00620Er 1  AD 24 9F           LDA VERA_data1
006211r 1  9C 23 9F           STZ VERA_data0
006214r 1               
006214r 1  AD 24 9F           LDA VERA_data1
006217r 1  AD 24 9F           LDA VERA_data1
00621Ar 1  AD 24 9F           LDA VERA_data1
00621Dr 1  AD 24 9F           LDA VERA_data1
006220r 1  9C 23 9F           STZ VERA_data0
006223r 1  88                 DEY
006224r 1  D0 CF              BNE :--
006226r 1  4C rr rr           JMP @NEXT_OBJECT
006229r 1                  @CHECK_OTHER_ALIGNS:
006229r 1  C9 08              CMP #8   ;  is either 4,8,12
00622Br 1  90 16              BCC @DO_ONE_RIGHT
00622Dr 1  F0 4F              BEQ @DO_TWO_RIGHT
00622Fr 1  18                 CLC
006230r 1  4C rr rr           JMP @DO_THREE_RIGHT
006233r 1                   :
006233r 1  AD 20 9F           LDA VERA_addr_low
006236r 1  69 94              ADC #160-12
006238r 1  8D 20 9F           STA VERA_addr_low
00623Br 1  AD 21 9F           LDA VERA_addr_high
00623Er 1  69 00              ADC #0
006240r 1  8D 21 9F           STA VERA_addr_high
006243r 1                  @DO_ONE_RIGHT:
006243r 1  AD 24 9F           LDA VERA_data1
006246r 1  AD 24 9F           LDA VERA_data1
006249r 1  AD 24 9F           LDA VERA_data1
00624Cr 1  A9 03              LDA #%00000011
00624Er 1  8D 23 9F           STA VERA_data0
006251r 1               
006251r 1  AD 24 9F           LDA VERA_data1
006254r 1  AD 24 9F           LDA VERA_data1
006257r 1  AD 24 9F           LDA VERA_data1
00625Ar 1  AD 24 9F           LDA VERA_data1
00625Dr 1  9C 23 9F           STZ VERA_data0
006260r 1               
006260r 1  AD 24 9F           LDA VERA_data1
006263r 1  A9 FC              LDA #%11111100
006265r 1  8D 23 9F           STA VERA_data0
006268r 1  88                 DEY
006269r 1  D0 C8              BNE :-
00626Br 1  4C rr rr           JMP @NEXT_OBJECT
00626Er 1               
00626Er 1                   :
00626Er 1  AD 20 9F           LDA VERA_addr_low
006271r 1  69 94              ADC #160-12
006273r 1  8D 20 9F           STA VERA_addr_low
006276r 1  AD 21 9F           LDA VERA_addr_high
006279r 1  69 00              ADC #0
00627Br 1  8D 21 9F           STA VERA_addr_high
00627Er 1                  @DO_TWO_RIGHT:
00627Er 1  AD 24 9F           LDA VERA_data1
006281r 1  AD 24 9F           LDA VERA_data1
006284r 1  A9 0F              LDA #%00001111
006286r 1  8D 23 9F           STA VERA_data0
006289r 1               
006289r 1  AD 24 9F           LDA VERA_data1
00628Cr 1  AD 24 9F           LDA VERA_data1
00628Fr 1  AD 24 9F           LDA VERA_data1
006292r 1  AD 24 9F           LDA VERA_data1
006295r 1  9C 23 9F           STZ VERA_data0
006298r 1               
006298r 1  AD 24 9F           LDA VERA_data1
00629Br 1  AD 24 9F           LDA VERA_data1
00629Er 1  A9 F0              LDA #%11110000
0062A0r 1  8D 23 9F           STA VERA_data0
0062A3r 1  88                 DEY
0062A4r 1  D0 C8              BNE :-
0062A6r 1  4C rr rr           JMP @NEXT_OBJECT
0062A9r 1               
0062A9r 1                   :
0062A9r 1  AD 20 9F           LDA VERA_addr_low
0062ACr 1  69 94              ADC #160-12
0062AEr 1  8D 20 9F           STA VERA_addr_low
0062B1r 1  AD 21 9F           LDA VERA_addr_high
0062B4r 1  69 00              ADC #0
0062B6r 1  8D 21 9F           STA VERA_addr_high
0062B9r 1                  @DO_THREE_RIGHT:
0062B9r 1  AD 24 9F           LDA VERA_data1
0062BCr 1  A9 3F              LDA #%00111111
0062BEr 1  8D 23 9F           STA VERA_data0
0062C1r 1               
0062C1r 1  AD 24 9F           LDA VERA_data1
0062C4r 1  AD 24 9F           LDA VERA_data1
0062C7r 1  AD 24 9F           LDA VERA_data1
0062CAr 1  AD 24 9F           LDA VERA_data1
0062CDr 1  9C 23 9F           STZ VERA_data0
0062D0r 1               
0062D0r 1  AD 24 9F           LDA VERA_data1
0062D3r 1  AD 24 9F           LDA VERA_data1
0062D6r 1  AD 24 9F           LDA VERA_data1
0062D9r 1  A9 C0              LDA #%11000000
0062DBr 1  8D 23 9F           STA VERA_data0
0062DEr 1  88                 DEY
0062DFr 1  D0 C8              BNE :-
0062E1r 1  4C rr rr           JMP @NEXT_OBJECT
0062E4r 1               
0062E4r 1               
0062E4r 1               test_optimal_pal_data:
0062E4r 1               ;      GB   R  $1:FA00-$1:FBFF   VERA Color Palette (256 x 2 bytes)
0062E4r 1  00 00        .byte $00,$00  ; 0 - black/transparent
0062E6r 1  C8 0F        .byte $c8,$0f  ; 1 #ffcc88
0062E8r 1  04 06        .byte $04,$06  ; 2 #660044
0062EAr 1  00 0C        .byte $00,$0C  ; 3  #cc0000
0062ECr 1  F0 0C        .byte $F0,$0C  ; 4#ccff00
0062EEr 1  42 03        .byte $42,$03
0062F0r 1  60 0C        .byte $60,$0c   ; 6  #cc6600
0062F2r 1  40 08        .byte $40,$08   ; 7 #884400
0062F4r 1  C0 0C        .byte $c0,$0c   ; 8 #cccc00
0062F6r 1  6A 02        .byte $6a,$02   ; 9 #2266aa mid blue
0062F8r 1  C0 00        .byte $c0,$00   ; A #00cc00
0062FAr 1  AC 07        .byte $ac,$07   ; B #77aacc light blue
0062FCr 1  C0 00        .byte $c0,$00   ; C #0000c0 dark blue
0062FEr 1  0C 0C        .byte $0c,$0c   ; D #cc00cc
006300r 1  88 08        .byte $88,$08   ; E #888888
006302r 1  22 02        .byte $22,$02   ; F #222222
006304r 1               
006304r 1               test_vram_data:
006304r 1               ; 70 to 127 - start of 16x16 (each 128 byte) for testing directions / sizing..
006304r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11  ;  0-15 16x10 -  0
006308r 1  11 11 11 11  
00630Cr 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
006310r 1  FF FF FF F1  
006314r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
006318r 1  FF FF FF F1  
00631Cr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
006320r 1  FF FF FF F1  
006324r 1  1F FF FF F1  .byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$F1
006328r 1  FF FF FF F1  
00632Cr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
006330r 1  FF FF FF F1  
006334r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
006338r 1  FF FF FF F1  
00633Cr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
006340r 1  FF FF FF F1  
006344r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
006348r 1  FF FF FF F1  
00634Cr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11
006350r 1  11 11 11 11  
006354r 1  55 55 55 55  .repeat 54
006358r 1  55 55 55 55  
00635Cr 1  55 55 55 55  
006504r 1               .res 8,$55
006504r 1               .endrepeat
006504r 1               
006504r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11  ;  16-31    16x10 -  0 trans
006508r 1  11 11 11 11  
00650Cr 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
006510r 1  F0 F0 F0 F1  
006514r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
006518r 1  0F 0F 0F 01  
00651Cr 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
006520r 1  F0 F0 F0 F1  
006524r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
006528r 1  0F 0F 0F 01  
00652Cr 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
006530r 1  F0 F0 F0 F1  
006534r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
006538r 1  0F 0F 0F 01  
00653Cr 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
006540r 1  F0 F0 F0 F1  
006544r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
006548r 1  0F 0F 0F 01  
00654Cr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11
006550r 1  11 11 11 11  
006554r 1  50 50 50 50  .repeat 27
006558r 1  50 50 50 50  
00655Cr 1  05 05 05 05  
006704r 1               .res 8,$50
006704r 1               .res 8,$05
006704r 1               .endrepeat
006704r 1               
006704r 1               
006704r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11  ;  32-47    16x11 -  4
006708r 1  11 11 11 11  
00670Cr 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
006710r 1  FF FF FF F1  
006714r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
006718r 1  FF FF FF F1  
00671Cr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
006720r 1  FF FF FF F1  
006724r 1  1F FF FF F1  .byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$F1
006728r 1  FF FF FF F1  
00672Cr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
006730r 1  FF FF FF F1  
006734r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
006738r 1  FF FF FF F1  
00673Cr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
006740r 1  FF FF FF F1  
006744r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
006748r 1  FF FF FF F1  
00674Cr 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
006750r 1  FF FF FF F1  
006754r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11
006758r 1  11 11 11 11  
00675Cr 1  55 55 55 55  .repeat 53
006760r 1  55 55 55 55  
006764r 1  55 55 55 55  
006904r 1               .res 8,$55
006904r 1               .endrepeat
006904r 1               
006904r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11  ;  48-63    16x11 -  4 trans
006908r 1  11 11 11 11  
00690Cr 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
006910r 1  F0 F0 F0 F1  
006914r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
006918r 1  0F 0F 0F 01  
00691Cr 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
006920r 1  F0 F0 F0 F1  
006924r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
006928r 1  0F 0F 0F 01  
00692Cr 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
006930r 1  F0 F0 F0 F1  
006934r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
006938r 1  0F 0F 0F 01  
00693Cr 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
006940r 1  F0 F0 F0 F1  
006944r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
006948r 1  0F 0F 0F 01  
00694Cr 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
006950r 1  F0 F0 F0 F1  
006954r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11
006958r 1  11 11 11 11  
00695Cr 1  05 05 05 05  .res 7,$05
006960r 1  05 05 05     
006963r 1  00           .byte 0
006964r 1  50 50 50 50  .repeat 26
006968r 1  50 50 50 50  
00696Cr 1  05 05 05 05  
006B04r 1               .res 8,$50
006B04r 1               .res 7,$05
006B04r 1               .byte 0
006B04r 1               .endrepeat
006B04r 1               
006B04r 1               
006B04r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10  ;  64-79    15x11 - 10
006B08r 1  11 11 11 10  
006B0Cr 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
006B10r 1  FF FF FF 10  
006B14r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
006B18r 1  FF FF FF 10  
006B1Cr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
006B20r 1  FF FF FF 10  
006B24r 1  1F FF FF F1  .byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$10
006B28r 1  FF FF FF 10  
006B2Cr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
006B30r 1  FF FF FF 10  
006B34r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
006B38r 1  FF FF FF 10  
006B3Cr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
006B40r 1  FF FF FF 10  
006B44r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
006B48r 1  FF FF FF 10  
006B4Cr 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
006B50r 1  FF FF FF 10  
006B54r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
006B58r 1  11 11 11 10  
006B5Cr 1  55 55 55 55  .repeat 53
006B60r 1  55 55 55 50  
006B64r 1  55 55 55 55  
006D04r 1               .res 7,$55
006D04r 1               .byte $50
006D04r 1               .endrepeat
006D04r 1               
006D04r 1               
006D04r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10  ;  80-95    15x11 - 10 trans
006D08r 1  11 11 11 10  
006D0Cr 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
006D10r 1  F0 F0 F0 10  
006D14r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
006D18r 1  0F 0F 0F 10  
006D1Cr 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
006D20r 1  F0 F0 F0 10  
006D24r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
006D28r 1  0F 0F 0F 10  
006D2Cr 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
006D30r 1  F0 F0 F0 10  
006D34r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
006D38r 1  0F 0F 0F 10  
006D3Cr 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
006D40r 1  F0 F0 F0 10  
006D44r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
006D48r 1  0F 0F 0F 10  
006D4Cr 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
006D50r 1  F0 F0 F0 10  
006D54r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
006D58r 1  11 11 11 10  
006D5Cr 1  05 05 05 05  .res 7,$05
006D60r 1  05 05 05     
006D63r 1  00           .byte 0
006D64r 1  50 50 50 50  .repeat 26
006D68r 1  50 50 50 50  
006D6Cr 1  05 05 05 05  
006F04r 1               .res 8,$50
006F04r 1               .res 7,$05
006F04r 1               .byte 0
006F04r 1               .endrepeat
006F04r 1               
006F04r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10  ;  96-111    15x12 - 18
006F08r 1  11 11 11 10  
006F0Cr 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
006F10r 1  FF FF FF 10  
006F14r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
006F18r 1  FF FF FF 10  
006F1Cr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
006F20r 1  FF FF FF 10  
006F24r 1  1F FF FF F1  .byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$10
006F28r 1  FF FF FF 10  
006F2Cr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
006F30r 1  FF FF FF 10  
006F34r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
006F38r 1  FF FF FF 10  
006F3Cr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
006F40r 1  FF FF FF 10  
006F44r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
006F48r 1  FF FF FF 10  
006F4Cr 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
006F50r 1  FF FF FF 10  
006F54r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
006F58r 1  FF FF FF 10  
006F5Cr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
006F60r 1  11 11 11 10  
006F64r 1  55 55 55 55  .repeat 52
006F68r 1  55 55 55 50  
006F6Cr 1  55 55 55 55  
007104r 1               .res 7,$55
007104r 1               .byte $50
007104r 1               .endrepeat
007104r 1               
007104r 1               
007104r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10  ;  112-127    15x12 - 18 trans
007108r 1  11 11 11 10  
00710Cr 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
007110r 1  F0 F0 F0 10  
007114r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
007118r 1  0F 0F 0F 10  
00711Cr 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
007120r 1  F0 F0 F0 10  
007124r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
007128r 1  0F 0F 0F 10  
00712Cr 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
007130r 1  F0 F0 F0 10  
007134r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
007138r 1  0F 0F 0F 10  
00713Cr 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
007140r 1  F0 F0 F0 10  
007144r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
007148r 1  0F 0F 0F 10  
00714Cr 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
007150r 1  F0 F0 F0 10  
007154r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
007158r 1  0F 0F 0F 10  
00715Cr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
007160r 1  11 11 11 10  
007164r 1  50 50 50 50  .repeat 26
007168r 1  50 50 50 50  
00716Cr 1  05 05 05 05  
007304r 1               .res 8,$50
007304r 1               .res 7,$05
007304r 1               .byte 0
007304r 1               .endrepeat
007304r 1               
007304r 1               ; alernate tile graphic to use for tub wall .. 128-143 ; 16x tile
007304r 1  16 16 16 16  .repeat 32
007308r 1  16 16 16 16  
00730Cr 1  61 61 61 61  
007504r 1                   .byte $16, $16, $16, $16, $16, $16, $16, $16
007504r 1                   .byte $61, $61, $61, $61, $61, $61, $61, $61
007504r 1               .endrepeat
007504r 1               
007504r 1  10 10 10 10  .repeat 32  ;  144-159
007508r 1  10 10 10 10  
00750Cr 1  06 06 06 06  
007704r 1                   .byte $10, $10, $10, $10, $10, $10, $10, $10
007704r 1                   .byte $06, $06, $06, $06, $06, $06, $06, $06
007704r 1               .endrepeat
007704r 1               
007704r 1               
007704r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$00  ;  160-175    14x12
007708r 1  11 11 11 00  
00770Cr 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$fF,$FF,$F1,$00
007710r 1  FF FF F1 00  
007714r 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$fF,$FF,$F1,$00
007718r 1  FF FF F1 00  
00771Cr 1  1F FF FF FF  .byte $1f,$FF,$ff,$Ff,$Ff,$fF,$F1,$00
007720r 1  FF FF F1 00  
007724r 1  1F FF FF F1  .byte $1f,$FF,$FF,$f1,$fF,$FF,$F1,$00
007728r 1  FF FF F1 00  
00772Cr 1  1F FF FF FF  .byte $1f,$FF,$FF,$Ff,$Ff,$fF,$F1,$00
007730r 1  FF FF F1 00  
007734r 1  1F FF FF FF  .byte $1f,$FF,$FF,$fF,$FF,$FF,$F1,$00
007738r 1  FF FF F1 00  
00773Cr 1  1F FF FF FF  .byte $1f,$FF,$FF,$fF,$FF,$FF,$F1,$00
007740r 1  FF FF F1 00  
007744r 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$FF,$FF,$F1,$00
007748r 1  FF FF F1 00  
00774Cr 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$FF,$FF,$F1,$00
007750r 1  FF FF F1 00  
007754r 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$FF,$FF,$F1,$00
007758r 1  FF FF F1 00  
00775Cr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$00
007760r 1  11 11 11 00  
007764r 1  55 55 55 55  .repeat 52
007768r 1  55 55 55 00  
00776Cr 1  55 55 55 55  
007904r 1               .res 7,$55
007904r 1               .byte 0
007904r 1               .endrepeat
007904r 1               
007904r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$00  ;  176-191
007908r 1  11 11 11 00  
00790Cr 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
007910r 1  F0 F0 F0 10  
007914r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
007918r 1  0F 0F 0F 10  
00791Cr 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
007920r 1  F0 F0 F0 10  
007924r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
007928r 1  0F 0F 0F 10  
00792Cr 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
007930r 1  F0 F0 F0 10  
007934r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
007938r 1  0F 0F 0F 10  
00793Cr 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
007940r 1  F0 F0 F0 10  
007944r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
007948r 1  0F 0F 0F 10  
00794Cr 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
007950r 1  F0 F0 F0 10  
007954r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
007958r 1  0F 0F 0F 10  
00795Cr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
007960r 1  11 11 11 10  
007964r 1  50 50 50 50  .repeat 26
007968r 1  50 50 50 50  
00796Cr 1  05 05 05 05  
007B04r 1               .res 8,$50
007B04r 1               .res 7,$05
007B04r 1               .byte 0
007B04r 1               .endrepeat
007B04r 1               
007B04r 1               ; alernate tile graphic to use for tub wall .. 192-223 ; 15x tile
007B04r 1  16 16 16 16  .repeat 32
007B08r 1  16 16 16 10  
007B0Cr 1  61 61 61 61  
007D04r 1                   .byte $16, $16, $16, $16, $16, $16, $16, $10
007D04r 1                   .byte $61, $61, $61, $61, $61, $61, $61, $60
007D04r 1               .endrepeat
007D04r 1               
007D04r 1  10 10 10 10  .repeat 32  ;  144-159
007D08r 1  10 10 10 10  
007D0Cr 1  06 06 06 06  
007F04r 1                   .byte $10, $10, $10, $10, $10, $10, $10, $10
007F04r 1                   .byte $06, $06, $06, $06, $06, $06, $06, $00
007F04r 1               .endrepeat
007F04r 1               
007F04r 1               
007F04r 1               ; alernate tile graphic to use for tub wall .. 224 ; 14x tile
007F04r 1  16 16 16 16  .repeat 32
007F08r 1  16 16 16 00  
007F0Cr 1  61 61 61 61  
008104r 1                   .byte $16, $16, $16, $16, $16, $16, $16, $00
008104r 1                   .byte $61, $61, $61, $61, $61, $61, $61, $00
008104r 1               .endrepeat
008104r 1               
008104r 1  10 10 10 10  .repeat 32  ;  144-159
008108r 1  10 10 10 00  
00810Cr 1  06 06 06 06  
008304r 1                   .byte $10, $10, $10, $10, $10, $10, $10, $00
008304r 1                   .byte $06, $06, $06, $06, $06, $06, $06, $00
008304r 1               .endrepeat
008304r 1               
008304r 1               
008304r 1               
008304r 1               HEX_DISPLAY_FONT:       ; 8x8x16 color = 32 bytes ... sprite addr 256
008304r 1               ;     01   23   45   67
008304r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 0
008308r 1  01 00 00 10  .byte $01, $00, $00, $10
00830Cr 1  01 00 00 10  .byte $01, $00, $00, $10
008310r 1  00 00 00 00  .byte $00, $00, $00, $00
008314r 1  01 00 00 10  .byte $01, $00, $00, $10
008318r 1  01 00 00 10  .byte $01, $00, $00, $10
00831Cr 1  01 00 00 10  .byte $01, $00, $00, $10
008320r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 0 /
008324r 1               
008324r 1  00 00 00 00  .byte $00, $00, $00, $00 ; 1
008328r 1  00 00 00 10  .byte $00, $00, $00, $10
00832Cr 1  00 00 00 10  .byte $00, $00, $00, $10
008330r 1  00 00 00 00  .byte $00, $00, $00, $00
008334r 1  00 00 00 10  .byte $00, $00, $00, $10
008338r 1  00 00 00 10  .byte $00, $00, $00, $10
00833Cr 1  00 00 00 10  .byte $00, $00, $00, $10
008340r 1  00 00 00 00  .byte $00, $00, $00, $00
008344r 1               
008344r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 2
008348r 1  00 00 00 10  .byte $00, $00, $00, $10
00834Cr 1  00 00 00 10  .byte $00, $00, $00, $10
008350r 1  00 11 11 00  .byte $00, $11, $11, $00
008354r 1  01 00 00 00  .byte $01, $00, $00, $00
008358r 1  01 00 00 00  .byte $01, $00, $00, $00
00835Cr 1  01 00 00 00  .byte $01, $00, $00, $00
008360r 1  00 11 11 00  .byte $00, $11, $11, $00
008364r 1               
008364r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 3
008368r 1  00 00 00 10  .byte $00, $00, $00, $10
00836Cr 1  00 00 00 10  .byte $00, $00, $00, $10
008370r 1  00 11 11 00  .byte $00, $11, $11, $00
008374r 1  00 00 00 10  .byte $00, $00, $00, $10
008378r 1  00 00 00 10  .byte $00, $00, $00, $10
00837Cr 1  00 00 00 10  .byte $00, $00, $00, $10
008380r 1  00 11 11 00  .byte $00, $11, $11, $00
008384r 1               
008384r 1  00 00 00 00  .byte $00, $00, $00, $00   ; 4
008388r 1  01 00 00 10  .byte $01, $00, $00, $10
00838Cr 1  01 00 00 10  .byte $01, $00, $00, $10
008390r 1  00 11 11 00  .byte $00, $11, $11, $00
008394r 1  00 00 00 10  .byte $00, $00, $00, $10
008398r 1  00 00 00 10  .byte $00, $00, $00, $10
00839Cr 1  00 00 00 10  .byte $00, $00, $00, $10
0083A0r 1  00 00 00 00  .byte $00, $00, $00, $00
0083A4r 1               
0083A4r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 5
0083A8r 1  01 00 00 00  .byte $01, $00, $00, $00
0083ACr 1  01 00 00 00  .byte $01, $00, $00, $00
0083B0r 1  00 11 11 00  .byte $00, $11, $11, $00
0083B4r 1  00 00 00 10  .byte $00, $00, $00, $10
0083B8r 1  00 00 00 10  .byte $00, $00, $00, $10
0083BCr 1  00 00 00 10  .byte $00, $00, $00, $10
0083C0r 1  00 11 11 00  .byte $00, $11, $11, $00
0083C4r 1               
0083C4r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 6
0083C8r 1  01 00 00 00  .byte $01, $00, $00, $00
0083CCr 1  01 00 00 00  .byte $01, $00, $00, $00
0083D0r 1  00 11 11 00  .byte $00, $11, $11, $00
0083D4r 1  01 00 00 10  .byte $01, $00, $00, $10
0083D8r 1  01 00 00 10  .byte $01, $00, $00, $10
0083DCr 1  01 00 00 10  .byte $01, $00, $00, $10
0083E0r 1  00 11 11 00  .byte $00, $11, $11, $00
0083E4r 1               
0083E4r 1  00 01 01 00  .byte $00, $01, $01, $00 ; 7
0083E8r 1  00 00 00 10  .byte $00, $00, $00, $10
0083ECr 1  00 00 00 10  .byte $00, $00, $00, $10
0083F0r 1  00 00 00 00  .byte $00, $00, $00, $00
0083F4r 1  00 00 00 10  .byte $00, $00, $00, $10
0083F8r 1  00 00 00 10  .byte $00, $00, $00, $10
0083FCr 1  00 00 00 10  .byte $00, $00, $00, $10
008400r 1  00 00 00 00  .byte $00, $00, $00, $00
008404r 1               
008404r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 8
008408r 1  01 00 00 10  .byte $01, $00, $00, $10
00840Cr 1  01 00 00 10  .byte $01, $00, $00, $10
008410r 1  00 11 11 00  .byte $00, $11, $11, $00
008414r 1  01 00 00 10  .byte $01, $00, $00, $10
008418r 1  01 00 00 10  .byte $01, $00, $00, $10
00841Cr 1  01 00 00 10  .byte $01, $00, $00, $10
008420r 1  00 11 11 00  .byte $00, $11, $11, $00
008424r 1               
008424r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 9
008428r 1  01 00 00 10  .byte $01, $00, $00, $10
00842Cr 1  01 00 00 10  .byte $01, $00, $00, $10
008430r 1  00 11 11 00  .byte $00, $11, $11, $00
008434r 1  00 00 00 10  .byte $00, $00, $00, $10
008438r 1  00 00 00 10  .byte $00, $00, $00, $10
00843Cr 1  00 00 00 10  .byte $00, $00, $00, $10
008440r 1  00 11 11 00  .byte $00, $11, $11, $00
008444r 1               
008444r 1  00 11 11 00  .byte $00, $11, $11, $00   ; A
008448r 1  01 00 00 10  .byte $01, $00, $00, $10
00844Cr 1  01 00 00 10  .byte $01, $00, $00, $10
008450r 1  00 11 11 00  .byte $00, $11, $11, $00
008454r 1  01 00 00 10  .byte $01, $00, $00, $10
008458r 1  01 00 00 10  .byte $01, $00, $00, $10
00845Cr 1  01 00 00 10  .byte $01, $00, $00, $10
008460r 1  00 00 00 00  .byte $00, $00, $00, $00
008464r 1               
008464r 1               
008464r 1  00 00 00 00  .byte $00, $00, $00, $00   ; B
008468r 1  01 00 00 00  .byte $01, $00, $00, $00
00846Cr 1  01 00 00 00  .byte $01, $00, $00, $00
008470r 1  00 11 11 00  .byte $00, $11, $11, $00
008474r 1  01 00 00 10  .byte $01, $00, $00, $10
008478r 1  01 00 00 10  .byte $01, $00, $00, $10
00847Cr 1  01 00 00 10  .byte $01, $00, $00, $10
008480r 1  00 11 11 00  .byte $00, $11, $11, $00
008484r 1               
008484r 1  00 11 11 00  .byte $00, $11, $11, $00   ; C
008488r 1  01 00 00 00  .byte $01, $00, $00, $00
00848Cr 1  01 00 00 00  .byte $01, $00, $00, $00
008490r 1  00 00 00 00  .byte $00, $00, $00, $00
008494r 1  01 00 00 00  .byte $01, $00, $00, $00
008498r 1  01 00 00 00  .byte $01, $00, $00, $00
00849Cr 1  01 00 00 00  .byte $01, $00, $00, $00
0084A0r 1  00 11 11 00  .byte $00, $11, $11, $00
0084A4r 1               
0084A4r 1  00 00 00 00  .byte $00, $00, $00, $00   ; D
0084A8r 1  00 00 00 10  .byte $00, $00, $00, $10
0084ACr 1  00 00 00 10  .byte $00, $00, $00, $10
0084B0r 1  00 11 11 00  .byte $00, $11, $11, $00
0084B4r 1  01 00 00 10  .byte $01, $00, $00, $10
0084B8r 1  01 00 00 10  .byte $01, $00, $00, $10
0084BCr 1  01 00 00 10  .byte $01, $00, $00, $10
0084C0r 1  00 11 11 00  .byte $00, $11, $11, $00
0084C4r 1               
0084C4r 1  00 11 11 00  .byte $00, $11, $11, $00   ; E
0084C8r 1  01 00 00 00  .byte $01, $00, $00, $00
0084CCr 1  01 00 00 00  .byte $01, $00, $00, $00
0084D0r 1  00 11 11 00  .byte $00, $11, $11, $00
0084D4r 1  01 00 00 00  .byte $01, $00, $00, $00
0084D8r 1  01 00 00 00  .byte $01, $00, $00, $00
0084DCr 1  01 00 00 00  .byte $01, $00, $00, $00
0084E0r 1  00 11 11 00  .byte $00, $11, $11, $00
0084E4r 1               
0084E4r 1  00 11 11 00  .byte $00, $11, $11, $00   ; F   sprite addr 48
0084E8r 1  01 00 00 00  .byte $01, $00, $00, $00
0084ECr 1  01 00 00 00  .byte $01, $00, $00, $00
0084F0r 1  00 11 11 00  .byte $00, $11, $11, $00
0084F4r 1  01 00 00 00  .byte $01, $00, $00, $00
0084F8r 1  01 00 00 00  .byte $01, $00, $00, $00
0084FCr 1  01 00 00 00  .byte $01, $00, $00, $00
008500r 1  00 00 00 00  .byte $00, $00, $00, $00
008504r 1               
008504r 1               ; test circle thing ... 16.. 16x16 - 128 bytes..
008504r 1  00 00 00 AA  .byte $00, $00, $00, $AA, $AA, $00, $00, $00
008508r 1  AA 00 00 00  
00850Cr 1  00 00 AA AA  .byte $00, $00, $AA, $AA, $AA, $AA, $00, $00
008510r 1  AA AA 00 00  
008514r 1  00 0A AA AA  .byte $00, $0A, $AA, $AA, $AA, $AA, $A0, $00
008518r 1  AA AA A0 00  
00851Cr 1  00 AA AA AA  .byte $00, $AA, $AA, $AA, $AA, $AA, $AA, $00
008520r 1  AA AA AA 00  
008524r 1  0A AA AA AA  .byte $0A, $AA, $AA, $AA, $AA, $AA, $AA, $A0
008528r 1  AA AA AA A0  
00852Cr 1  0A AA AA AA  .byte $0A, $AA, $AA, $AA, $AA, $AA, $AA, $A0
008530r 1  AA AA AA A0  
008534r 1  AA AA AA AA  .byte $AA, $AA, $AA, $AA, $AA, $AA, $AA, $AA
008538r 1  AA AA AA AA  
00853Cr 1  AA AA AA AA  .byte $AA, $AA, $AA, $AA, $AA, $AA, $AA, $AA
008540r 1  AA AA AA AA  
008544r 1  AA AA AA AA  .byte $AA, $AA, $AA, $AA, $AA, $AA, $AA, $AA
008548r 1  AA AA AA AA  
00854Cr 1  AA AA AA AA  .byte $AA, $AA, $AA, $AA, $AA, $AA, $AA, $AA
008550r 1  AA AA AA AA  
008554r 1  0A AA AA AA  .byte $0A, $AA, $AA, $AA, $AA, $AA, $AA, $A0
008558r 1  AA AA AA A0  
00855Cr 1  0A AA AA AA  .byte $0A, $AA, $AA, $AA, $AA, $AA, $AA, $A0
008560r 1  AA AA AA A0  
008564r 1  00 AA AA AA  .byte $00, $AA, $AA, $AA, $AA, $AA, $AA, $00
008568r 1  AA AA AA 00  
00856Cr 1  00 0A AA AA  .byte $00, $0A, $AA, $AA, $AA, $AA, $A0, $00
008570r 1  AA AA A0 00  
008574r 1  00 00 AA AA  .byte $00, $00, $AA, $AA, $AA, $AA, $00, $00
008578r 1  AA AA 00 00  
00857Cr 1  00 00 00 AA  .byte $00, $00, $00, $AA, $AA, $00, $00, $00
008580r 1  AA 00 00 00  
008584r 1               
008584r 1  00 00 00 00  .res 384,0
008588r 1  00 00 00 00  
00858Cr 1  00 00 00 00  
008584r 1               
