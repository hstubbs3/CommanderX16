ca65 V2.19 - Git 8e6c0c1
Main file   : hex.s
Current file: hex.s

000000r 1               ; 	080D
000000r 1  4C rr rr     jmp start ; 	3 bytes
000003r 1               ;	0810 	- 240 bytes available for stuff that doesn't need alignment
000003r 1  DE AD BE EF  .repeat 28
000007r 1  DE AD BE EF  
00000Br 1  DE AD BE EF  
000073r 1               	.byte $DE,$AD,$BE,$EF
000073r 1               .endrepeat
000073r 1               SCRATCH128:
000073r 1  DE AD BE EF  .repeat 32
000077r 1  DE AD BE EF  
00007Br 1  DE AD BE EF  
0000F3r 1               	.byte $DE,$AD,$BE,$EF
0000F3r 1               .endrepeat
0000F3r 1               
0000F3r 1               ACROSS_ROW_X_L: ; 0900  16 wide , 45* tilt ... this is added to go up row, sub for down row
0000F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0000F3r 1  00 FE FB F4  .byte
0000F7r 1  EC E1 D3 C3  
0000FBr 1  B1 9C 85 6B  
0001F3r 1               
0001F3r 1               ACROSS_ROW_X_H: ; 0A00
0001F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0001F3r 1  10 0F 0F 0F  .byte $10, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $E, $E, $E, $E, $E, $E, $D, $D, $D, $D, $D, $C, $C, $C, $C, $B, $B, $B, $B, $A, $A, $A, $9, $9, $9, $8, $8, $8, $7, $7, $7, $6, $6, $6, $5, $5, $5, $4, $4, $3, $3, $3, $2, $2, $1, $1, $1, $0, $0, $0, $FF, $FF, $FE, $FE, $FE, $FD, $FD, $FC, $FC, $FC, $FB, $FB, $FA, $FA, $FA, $F9, $F9, $F9, $F8, $F8, $F8, $F7, $F7, $F7, $F6, $F6, $F6, $F5, $F5, $F5, $F4, $F4, $F4, $F4, $F3, $F3, $F3, $F3, $F2, $F2, $F2, $F2, $F2, $F1, $F1, $F1, $F1, $F1, $F1, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F1, $F1, $F1, $F1, $F1, $F1, $F2, $F2, $F2, $F2, $F2, $F3, $F3, $F3, $F3, $F4, $F4, $F4, $F4, $F5, $F5, $F5, $F6, $F6, $F6, $F7, $F7, $F7, $F8, $F8, $F8, $F9, $F9, $F9, $FA, $FA, $FA, $FB, $FB, $FC, $FC, $FC, $FD, $FD, $FE, $FE, $FE, $FF, $FF, $00, $0, $0, $1, $1, $1, $2, $2, $3, $3, $3, $4, $4, $5, $5, $5, $6, $6, $6, $7, $7, $7, $8, $8, $8, $9, $9, $9, $A, $A, $A, $B, $B, $B, $B, $C, $C, $C, $C, $D, $D, $D, $D, $D, $E, $E, $E, $E, $E, $E, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F
0001F7r 1  0F 0F 0F 0F  
0001FBr 1  0F 0F 0F 0F  
0002F3r 1               
0002F3r 1               ACROSS_ROW_Y_L: ; 0B00
0002F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0002F3r 1  00 B8 71 2A  .byte $0,$B8,$71,$2A,$E4,$9D,$57,$10,$CA,$85,$40,$FB,$B7,$73,$30,$ED,$AB,$6A,$29,$E9,$AA,$6C,$2E,$F2,$B6,$7C,$42,$A,$D2,$9C,$66,$32,$0,$CE,$9D,$6E,$41,$14,$E9,$C0,$97,$71,$4B,$27,$5,$E4,$C5,$A8,$8C,$71,$58,$41,$2C,$18,$6,$F6,$E7,$DA,$CF,$C5,$BD,$B7,$B3,$B0,$AF,$B0,$B3,$B7,$BD,$C5,$CF,$DA,$E7,$F6,$6,$18,$2C,$41,$58,$71,$8C,$A8,$C5,$E4,$5,$27,$4B,$71,$97,$C0,$E9,$14,$41,$6E,$9D,$CE,$0,$32,$66,$9C,$D2,$A,$42,$7C,$B6,$F2,$2E,$6C,$AA,$E9,$29,$6A,$AB,$ED,$30,$73,$B7,$FB,$40,$85,$CA,$10,$57,$9D,$E4,$2A,$71,$B8,$0,$47,$8E,$D5,$1B,$62,$A8,$EF,$35,$7A,$BF,$4,$48,$8C,$CF,$12,$54,$95,$D6,$16,$55,$93,$D1,$D,$49,$83,$BD,$F5,$2D,$63,$99,$CD,$0,$31,$62,$91,$BE,$EB,$16,$3F,$68,$8E,$B4,$D8,$FA,$1B,$3A,$57,$73,$8E,$A7,$BE,$D3,$E7,$F9,$9,$18,$25,$30,$3A,$42,$48,$4C,$4F,$50,$4F,$4C,$48,$42,$3A,$30,$25,$18,$9,$F9,$E7,$D3,$BE,$A7,$8E,$73,$57,$3A,$1B,$FA,$D8,$B4,$8E,$68,$3F,$16,$EB,$BE,$91,$62,$31,$0,$CD,$99,$63,$2D,$F5,$BD,$83,$49,$D,$D1,$93,$55,$16,$D6,$95,$54,$12,$CF,$8C,$48,$4,$BF,$7A,$35,$EF,$A8,$62,$1B,$D5,$8E,$47
0002F7r 1  E4 9D 57 10  
0002FBr 1  CA 85 40 FB  
0003F3r 1               
0003F3r 1               ACROSS_ROW_Y_H: ; 0C00
0003F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0003F3r 1  00 FF FF FF  .byte $0,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F9,$F8,$F8,$F8,$F8,$F8,$F7,$F7,$F7,$F7,$F7,$F6,$F6,$F6,$F6,$F6,$F6,$F6,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F6,$F6,$F6,$F6,$F6,$F6,$F6,$F7,$F7,$F7,$F7,$F7,$F8,$F8,$F8,$F8,$F8,$F9,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$00,$0,$0,$0,$1,$1,$1,$1,$2,$2,$2,$3,$3,$3,$3,$4,$4,$4,$4,$5,$5,$5,$5,$6,$6,$6,$6,$6,$7,$7,$7,$7,$8,$8,$8,$8,$8,$8,$9,$9,$9,$9,$9,$9,$9,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$9,$9,$9,$9,$9,$9,$9,$8,$8,$8,$8,$8,$8,$7,$7,$7,$7,$6,$6,$6,$6,$6,$5,$5,$5,$5,$4,$4,$4,$4,$3,$3,$3,$3,$2,$2,$2,$1,$1,$1,$1,$0,$0,$0
0003F7r 1  FE FE FE FE  
0003FBr 1  FD FD FD FC  
0004F3r 1               
0004F3r 1               NEXT_ROW_X_L: ; 0D00 next row LEFT/up when added
0004F3r 1  00 A9 54 00  .byte
0004F7r 1  AE 5D 0D BF  
0004FBr 1  73 28 DF 98  
0005F3r 1               
0005F3r 1               NEXT_ROW_X_H: ; 0E00
0005F3r 1  F8 F7 F7 F7  .byte
0005F7r 1  F6 F6 F6 F5  
0005FBr 1  F5 F5 F4 F4  
0006F3r 1               
0006F3r 1               NEXT_ROW_Y_L: ; 0F00
0006F3r 1  33 58 7D A5  .byte $33,$58,$7D,$A5,$CD,$F7,$23,$50,$7E,$AD,$DE,$10,$44,$78,$AE,$E4,$1C,$55,$8F,$CA,$6,$43,$81,$BF,$FE,$3F,$7F,$C1,$3,$46,$8A,$CD,$12,$57,$9C,$E2,$28,$6E,$B4,$FB,$42,$89,$D0,$17,$5E,$A5,$EC,$33,$7A,$C0,$6,$4C,$91,$D6,$1B,$5F,$A2,$E6,$28,$6A,$AB,$EB,$2B,$6A,$A8,$E5,$21,$5C,$97,$D0,$8,$3F,$75,$AA,$DE,$10,$41,$71,$A0,$CD,$F9,$24,$4D,$75,$9B,$C0,$E3,$5,$25,$44,$61,$7C,$96,$AE,$C5,$DA,$ED,$FF,$F,$1D,$29,$34,$3D,$44,$4A,$4D,$4F,$50,$4E,$4B,$46,$3F,$37,$2D,$21,$13,$4,$F3,$E0,$CC,$B6,$9E,$85,$6A,$4E,$30,$10,$EF,$CC,$A7,$82,$5A,$32,$8,$DC,$AF,$81,$52,$21,$EF,$BB,$87,$51,$1B,$E3,$AA,$70,$35,$F9,$BC,$7E,$40,$1,$C0,$80,$3E,$FC,$B9,$75,$32,$ED,$A8,$63,$1D,$D7,$91,$4B,$4,$BD,$76,$2F,$E8,$A1,$5A,$13,$CC,$85,$3F,$F9,$B3,$6E,$29,$E4,$A0,$5D,$19,$D7,$95,$54,$14,$D4,$95,$57,$1A,$DE,$A3,$68,$2F,$F7,$C0,$8A,$55,$21,$EF,$BE,$8E,$5F,$32,$6,$DB,$B2,$8A,$64,$3F,$1C,$FA,$DA,$BB,$9E,$83,$69,$51,$3A,$25,$12,$0,$F0,$E2,$D6,$CB,$C2,$BB,$B5,$B2,$B0,$AF,$B1,$B4,$B9,$C0,$C8,$D2,$DE,$EC,$FB,$C,$1F,$33,$49,$61,$7A,$95,$B1,$CF,$EF,$10
0006F7r 1  CD F7 23 50  
0006FBr 1  7E AD DE 10  
0007F3r 1               
0007F3r 1               NEXT_ROW_Y_H: ; 1000
0007F3r 1  F6 F6 F6 F6  .byte $F6,$F6,$F6,$F6,$F6,$F6,$F7,$F7,$F7,$F7,$F7,$F8,$F8,$F8,$F8,$F8,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$0,$0,$0,$0,$1,$1,$1,$2,$2,$2,$2,$3,$3,$3,$3,$4,$4,$4,$4,$5,$5,$5,$5,$6,$6,$6,$6,$7,$7,$7,$7,$7,$8,$8,$8,$8,$8,$8,$9,$9,$9,$9,$9,$9,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$9,$9,$9,$9,$9,$9,$9,$8,$8,$8,$8,$8,$7,$7,$7,$7,$7,$6,$6,$6,$6,$5,$5,$5,$5,$5,$4,$4,$4,$3,$3,$3,$3,$2,$2,$2,$2,$1,$1,$1,$1,$0,$0,$0,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F8,$F8,$F8,$F8,$F8,$F7,$F7,$F7,$F7,$F7,$F7,$F6,$F6,$F6,$F6,$F6,$F6,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F6
0007F7r 1  F6 F6 F7 F7  
0007FBr 1  F7 F7 F7 F8  
0008F3r 1               
0008F3r 1               TUB_WORLD: ; 32*64 = 2K ... is 1100 to 1900-1
0008F3r 1               .include "tub_world_hieghts_01.inc"
0008F3r 2               ; 0 to 128 will be water level. >128 = distance along row to water (neg) , 128 = no water this row.
0008F3r 2               ; rows are stored within 64 byte rows
0008F3r 2               ; 	  0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63
0008F3r 2  FF FF FF FF  .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 30
0008F7r 2  FF FF FF FF  
0008FBr 2  FF FF FF FF  
000933r 2  FF FF FF FF  .byte   $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF ; 29
000937r 2  FF FF FF FF  
00093Br 2  FF FF FF FF  
000973r 2  FF FF FF FF  .byte     $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF ; 28
000977r 2  FF FF FF FF  
00097Br 2  FF FF FF FF  
0009B3r 2  FF FF FF FF  .byte       $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF ; 27
0009B7r 2  FF FF FF FF  
0009BBr 2  FF FF FF FF  
0009F3r 2  FF FF FF FF  .byte         $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF ; 26
0009F7r 2  FF FF FF FF  
0009FBr 2  FF FF FF FF  
000A33r 2  FF FF FF FF  .byte           $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 25
000A37r 2  FF FF FF FF  
000A3Br 2  FF FF FF FF  
000A73r 2  FF FF FF FF  .byte             $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 24
000A77r 2  FF FF FF FF  
000A7Br 2  FF FF FF FF  
000AB3r 2  FF FF FF FF  .byte               $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 23
000AB7r 2  FF FF FF FF  
000ABBr 2  FF FF FF 80  
000AF3r 2  FF FF FF FF  .byte                 $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 22
000AF7r 2  FF FF FF FF  
000AFBr 2  FF FF 80 00  
000B33r 2  FF FF FF FF  .byte                   $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF; 21
000B37r 2  FF FF FF FF  
000B3Br 2  FF 80 00 00  
000B73r 2  FF FF FF FF  .byte                     $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF ; 20
000B77r 2  FF FF FF FF  
000B7Br 2  FF 80 00 00  
000BB3r 2  FF FF FF FF  .byte                       $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF ; 19
000BB7r 2  FF FF FF FF  
000BBBr 2  80 00 00 00  
000BF3r 2  FF FF FF FF  .byte                         $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 18
000BF7r 2  FF FF FF FF  
000BFBr 2  80 00 00 00  
000C33r 2  FF FF FF FF  .byte                           $FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 17
000C37r 2  FF FF FF 80  
000C3Br 2  00 00 00 00  
000C73r 2  FF FF FF FF  .byte                             $FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 16
000C77r 2  FF FF FF 80  
000C7Br 2  00 00 00 00  
000CB3r 2  FF FF FF FF  .byte                               $FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 15
000CB7r 2  FF FF 80 00  
000CBBr 2  00 00 00 00  
000CF3r 2  FF FF FF FF  .byte                                 $FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF ; 14
000CF7r 2  FF FF 80 00  
000CFBr 2  00 00 00 00  
000D33r 2  FF FF FF FF  .byte                                   $FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 13
000D37r 2  FF 80 00 00  
000D3Br 2  00 00 00 00  
000D73r 2  FF FF FF FF  .byte                                     $FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 12
000D77r 2  FF 80 00 00  
000D7Br 2  00 00 00 00  
000DB3r 2  FF FF FF FF  .byte                                       $FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 11
000DB7r 2  80 00 00 00  
000DBBr 2  00 00 00 00  
000DF3r 2  FF FF FF FF  .byte                                         $FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 10
000DF7r 2  80 00 00 00  
000DFBr 2  00 00 00 00  
000E33r 2  FF FF FF 80  .byte                                           $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 9
000E37r 2  00 00 00 00  
000E3Br 2  00 00 00 00  
000E73r 2  FF FF FF 80  .byte                                             $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 8
000E77r 2  00 00 00 00  
000E7Br 2  00 00 00 00  
000EB3r 2  FF FF FF 80  .byte                                               $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 7
000EB7r 2  00 00 00 00  
000EBBr 2  00 00 00 00  
000EF3r 2  FF FF FF 80  .byte                                                 $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 6
000EF7r 2  00 00 00 00  
000EFBr 2  00 00 00 00  
000F33r 2  FF FF FF 80  .byte                                                   $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 5
000F37r 2  00 00 00 00  
000F3Br 2  00 00 00 00  
000F73r 2  FF FF FF 80  .byte                                                     $FF,$FF,$FF,$80,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 4
000F77r 2  00 01 02 02  
000F7Br 2  01 01 00 01  
000FB3r 2  FF FF FF 80  .byte                                                       $FF,$FF,$FF,$80,$80,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 3
000FB7r 2  80 00 01 02  
000FBBr 2  02 01 01 00  
000FF3r 2  FF FF FF FF  .byte                                                         $FF,$FF,$FF,$FF,$80,$80,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 2
000FF7r 2  80 80 00 01  
000FFBr 2  02 02 01 01  
001033r 2  FF FF FF FF  .byte                                                           $FF,$FF,$FF,$FF,$FF,$80,$80,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 01
001037r 2  FF 80 80 00  
00103Br 2  01 02 02 01  
001073r 2  FF FF FF FF  .byte                                                             $FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 00 tub wall north
001077r 2  FF FF 80 80  
00107Br 2  80 80 80 80  
0010B3r 2  FF FF FF FF  .res 64,$FF
0010B7r 2  FF FF FF FF  
0010BBr 2  FF FF FF FF  
0010F3r 2               
0010F3r 2               
0010F3r 2               
0010F3r 1               
0010F3r 1               ; 1900
0010F3r 1               
0010F3r 1               OBJECT_LIST_Z_START_POINTERS: ; 1900
0010F3r 1  00 00 00 00  .res 256,0
0010F7r 1  00 00 00 00  
0010FBr 1  00 00 00 00  
0011F3r 1               OBJECT_LIST_BYTE0_ADDRLOW: ; 1A00 addr low
0011F3r 1  00 00 00 00  .res 256,0
0011F7r 1  00 00 00 00  
0011FBr 1  00 00 00 00  
0012F3r 1               OBJECT_LIST_BYTE1_MODE: ; 1B00 mode/addr bank
0012F3r 1  00 00 00 00  .res 256,0
0012F7r 1  00 00 00 00  
0012FBr 1  00 00 00 00  
0013F3r 1               OBJECT_LIST_BYTE2_X: ; 1C00 X position onscreen ( assumed positive for now)
0013F3r 1  00 00 00 00  .res 256,0
0013F7r 1  00 00 00 00  
0013FBr 1  00 00 00 00  
0014F3r 1               OBJECT_LIST_BYTE3_Y: ; 1D00 y position onscreen
0014F3r 1  00 00 00 00  .res 256,0
0014F7r 1  00 00 00 00  
0014FBr 1  00 00 00 00  
0015F3r 1               OBJECT_LIST_BYTE4_ZFLIPS: ; 1E00 collision / z / flips
0015F3r 1  00 00 00 00  .res 256,0
0015F7r 1  00 00 00 00  
0015FBr 1  00 00 00 00  
0016F3r 1               OBJECT_LIST_BYTE5_SIZE: ; 1F00 size / pal offset
0016F3r 1  00 00 00 00  .res 256,0
0016F7r 1  00 00 00 00  
0016FBr 1  00 00 00 00  
0017F3r 1               OBJECT_LIST_BYTE6_NEXT: ; 2000 NEXT
0017F3r 1  00 00 00 00  .res 256,0
0017F7r 1  00 00 00 00  
0017FBr 1  00 00 00 00  
0018F3r 1               
0018F3r 1               
0018F3r 1               
0018F3r 1               WORLD_TO_CELL_XH: ; 2100
0018F3r 1  00 00 01 02  .byte 0,0,1,2,3,4,5,6,6,7,8,9,10,11,12,12,13,14,15,16,17,18,19,19,20,21,22,23,24,25,25,26,27,28,29,30,31,32,32,33,34,35,36,37,38,38,39,40,41,42,43,44,45,45,46,47,48,49,50,51,51,52,53,54,55,56,57,58,58,59,60,61,62,63,64,64,65,66,67,68,69,70,71,71,72,73,74,75,76,77,77,78,79,80,81,82,83,84,84,85,86,87,88,89,90,90,91,92,93,94,95,96,96,97,98,99,100,101,102,103,103,104,105,106,107,108,109,109
0018F7r 1  03 04 05 06  
0018FBr 1  06 07 08 09  
001973r 1               WORLD_TO_CELL_XL:
001973r 1  00 DD BB 99  .byte 0,221,187,153,118,84,50,15,237,203,169,134,100,66,31,253,219,184,150,116,82,47,13,235,200,166,132,97,63,29,251,216,182,148,113,79,45,10,232,198,164,129,95,61,26,248,214,180,145,111,77,42,8,230,195,161,127,93,58,24,246,211,177,143,108,74,40,6,227,193,159,124,90,56,21,243,209,175,140,106,72,37,3,225,191,156,122,88,53,19,241,206,172,138,104,69,35,1,222,188,154,119,85,51,17,238,204,170,135,101,67,32,254,220,186,151,117,83,48,14,236,202,167,133,99,64,30,252
001977r 1  76 54 32 0F  
00197Br 1  ED CB A9 86  
0019F3r 1               
0019F3r 1               CELL_TO_WORLD_XH: ; 2200
0019F3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,8,9,10,11,12,13,15,16,17,18,19,20,21,23,24,25,26,27,28,30,31,32,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,50,51,53,54,55,56,57,58,60,61,62,63,64,65,66,68,69,70,71,72,73,75,76,77,78,79,80,81,83,84,85,86,87,88,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,112,113,114,115,116,117,118,120,121,122,123,124,125,127,128,129,130,131,132,133,135,136,137,138,139,140,142,143,144,145,146
0019F7r 1  04 05 06 08  
0019FBr 1  09 0A 0B 0C  
001A73r 1               CELL_TO_WORLD_XL: ; 2280
001A73r 1  00 27 4F 76  .byte 0,39,79,118,158,198,237,21,60,100,140,179,219,2,42,82,121,161,200,240,24,63,103,142,182,222,5,45,84,124,164,203,243,26,66,106,145,185,224,8,48,87,127,166,206,246,29,69,108,148,188,227,11,50,90,130,169,209,248,32,72,111,151,191,230,14,53,93,133,172,212,251,35,75,114,154,193,233,17,56,96,135,175,215,254,38,77,117,157,196,236,19,59,99,138,178,217,1,41,80,120,159,199,239,22,62,101,141,181,220,4,43,83,123,162,202,241,25,65,104,144,184,223,7,46,86,126,165
001A77r 1  9E C6 ED 15  
001A7Br 1  3C 64 8C B3  
001AF3r 1               
001AF3r 1               CELL_LOW_TO_WORLD_XH: ; 2300
001AF3r 1  00 00 00 00  .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
001AF7r 1  00 00 00 00  
001AFBr 1  00 00 00 00  
001BF3r 1               CELL_LOW_TO_WORLD_XL: ; 2400
001BF3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,8,9,10,11,12,13,15,16,17,18,19,20,21,23,24,25,26,27,28,30,31,32,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,50,51,53,54,55,56,57,58,60,61,62,63,64,65,66,68,69,70,71,72,73,75,76,77,78,79,80,81,83,84,85,86,87,88,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,112,113,114,115,116,117,118,120,121,122,123,124,125,127,128,129,130,131,132,133,135,136,137,138,139,140,142,143,144,145,146,147,148,150,151,152,153,154,155,157,158,159,160,161,162,163,165,166,167,168,169,170,172,173,174,175,176,177,178,180,181,182,183,184,185,187,188,189,190,191,192,193,195,196,197,198,199,200,202,203,204,205,206,207,209,210,211,212,213,214,215,217,218,219,220,221,222,224,225,226,227,228,229,230,232,233,234,235,236,237,239,240,241,242,243,244,245,247,248,249,250,251,252,254,255,0,1,2,3,4,6,7,8,9,10,11,13,14,15,16,17,18,19,21,22,23,24,25,26,28,29,30,31,32,33,34,36,37,38
001BF7r 1  04 05 06 08  
001BFBr 1  09 0A 0B 0C  
001CF3r 1               
001CF3r 1               MOVE_XH: ; 2500
001CF3r 1  00 00 00 00  .res 256,0
001CF7r 1  00 00 00 00  
001CFBr 1  00 00 00 00  
001DF3r 1               MOVE_XL: ; 2600
001DF3r 1  00 00 00 00  .res 256,0
001DF7r 1  00 00 00 00  
001DFBr 1  00 00 00 00  
001EF3r 1               MOVE_YH: ; 2700
001EF3r 1  00 00 00 00  .res 256,0
001EF7r 1  00 00 00 00  
001EFBr 1  00 00 00 00  
001FF3r 1               MOVE_YL: ; 2800
001FF3r 1  00 00 00 00  .res 256,0
001FF7r 1  00 00 00 00  
001FFBr 1  00 00 00 00  
0020F3r 1               
0020F3r 1               SPRITE_NUM_HIGH_NIBBLE: ; 2900
0020F3r 1  21 21 21 21  .res 16, 33
0020F7r 1  21 21 21 21  
0020FBr 1  21 21 21 21  
002103r 1  22 22 22 22  .res 16, 34
002107r 1  22 22 22 22  
00210Br 1  22 22 22 22  
002113r 1  23 23 23 23  .res 16, 35
002117r 1  23 23 23 23  
00211Br 1  23 23 23 23  
002123r 1  24 24 24 24  .res 16, 36
002127r 1  24 24 24 24  
00212Br 1  24 24 24 24  
002133r 1  25 25 25 25  .res 16, 37
002137r 1  25 25 25 25  
00213Br 1  25 25 25 25  
002143r 1  26 26 26 26  .res 16, 38
002147r 1  26 26 26 26  
00214Br 1  26 26 26 26  
002153r 1  27 27 27 27  .res 16, 39
002157r 1  27 27 27 27  
00215Br 1  27 27 27 27  
002163r 1  28 28 28 28  .res 16, 40
002167r 1  28 28 28 28  
00216Br 1  28 28 28 28  
002173r 1  29 29 29 29  .res 16, 41
002177r 1  29 29 29 29  
00217Br 1  29 29 29 29  
002183r 1  2A 2A 2A 2A  .res 16, 42
002187r 1  2A 2A 2A 2A  
00218Br 1  2A 2A 2A 2A  
002193r 1  2B 2B 2B 2B  .res 16, 43
002197r 1  2B 2B 2B 2B  
00219Br 1  2B 2B 2B 2B  
0021A3r 1  2C 2C 2C 2C  .res 16, 44
0021A7r 1  2C 2C 2C 2C  
0021ABr 1  2C 2C 2C 2C  
0021B3r 1  2D 2D 2D 2D  .res 16, 45
0021B7r 1  2D 2D 2D 2D  
0021BBr 1  2D 2D 2D 2D  
0021C3r 1  2E 2E 2E 2E  .res 16, 46
0021C7r 1  2E 2E 2E 2E  
0021CBr 1  2E 2E 2E 2E  
0021D3r 1  2F 2F 2F 2F  .res 16, 47
0021D7r 1  2F 2F 2F 2F  
0021DBr 1  2F 2F 2F 2F  
0021E3r 1  30 30 30 30  .res 16, 48
0021E7r 1  30 30 30 30  
0021EBr 1  30 30 30 30  
0021F3r 1               
0021F3r 1               SPRITE_NUM_LOW_NIBBLE: ; 2A00
0021F3r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
0021F7r 1  25 26 27 28  
0021FBr 1  29 2A 2B 2C  
002203r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
002207r 1  25 26 27 28  
00220Br 1  29 2A 2B 2C  
002213r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
002217r 1  25 26 27 28  
00221Br 1  29 2A 2B 2C  
002223r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
002227r 1  25 26 27 28  
00222Br 1  29 2A 2B 2C  
002233r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
002237r 1  25 26 27 28  
00223Br 1  29 2A 2B 2C  
002243r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
002247r 1  25 26 27 28  
00224Br 1  29 2A 2B 2C  
002253r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
002257r 1  25 26 27 28  
00225Br 1  29 2A 2B 2C  
002263r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
002267r 1  25 26 27 28  
00226Br 1  29 2A 2B 2C  
002273r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
002277r 1  25 26 27 28  
00227Br 1  29 2A 2B 2C  
002283r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
002287r 1  25 26 27 28  
00228Br 1  29 2A 2B 2C  
002293r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
002297r 1  25 26 27 28  
00229Br 1  29 2A 2B 2C  
0022A3r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
0022A7r 1  25 26 27 28  
0022ABr 1  29 2A 2B 2C  
0022B3r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
0022B7r 1  25 26 27 28  
0022BBr 1  29 2A 2B 2C  
0022C3r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
0022C7r 1  25 26 27 28  
0022CBr 1  29 2A 2B 2C  
0022D3r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
0022D7r 1  25 26 27 28  
0022DBr 1  29 2A 2B 2C  
0022E3r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
0022E7r 1  25 26 27 28  
0022EBr 1  29 2A 2B 2C  
0022F3r 1               
0022F3r 1               SCREEN_Y_TO_Z: ; 2B00
0022F3r 1  FF FD FB FA  .byte 255,253,251,250,248,247,245,243,242,240,239,237,235,234,232,231,229,227,226,224,223,221,220,218,216,215,213,212,210,208,207,205,204,202,200,199,197,196,194,192,191,189,188,186,185,183,181,180,178,177,175,173,172,170,169,167,165,164,162,161,159,158,156,154,153,151,150,148,146,145,143,142,140,138,137,135,134,132,130,129,127,126,124,123,121,119,118,116,115,113,111,110,108,107,105,103,102,100,99,97,95,94,92,91,89,88,86,84,83,81,80,78,76,75,73,72,70,68,67,65,64,62,61,59,57,56,54,53,51,49,48,46,45,43,41,40,38,37,35,33,32,30,29,27,26,24,22,21,19,18,16,14,13,11,10,8,6,5,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0022F7r 1  F8 F7 F5 F3  
0022FBr 1  F2 F0 EF ED  
0023F3r 1               
0023F3r 1               CONVERT_HEIGHTS_PIXELS: ; 2C00
0023F3r 1               ;.byte 0,0,1,1,2,3,3,4,4,5,6,6,7,7,8,9,9,10,11,11,12,12,13,14,14,15,15,16,17,17,18,18,19,20,20,21,22,22,23,23,24,25,25,26,26,27,28,28,29,30,30,31,31,32,33,33,34,34,35,36,36,37,37,38,39,39,40,41,41,42,42,43,44,44,45,45,46,47,47,48,48,49,50,50,51,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52;,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52
0023F3r 1  00 00 00 00  .res 128,0
0023F7r 1  00 00 00 00  
0023FBr 1  00 00 00 00  
002473r 1  00 00 00 00  .res 128,0
002477r 1  00 00 00 00  
00247Br 1  00 00 00 00  
0024F3r 1               CONVERT_HEIGHTS_PIXELS_SECONDARY: ; 2D00
0024F3r 1  00 00 00 00  .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,3,3,4,4,5,6,6,7,8,8,9,9,10,11,11,12,12,13,14,14,15,15,16,17,17,18,19,19,20,20,21,22,22,23,23,24,25,25,26,26,27,28,28,29,30,30,31,31,32,33,33,34,34,35,36,36,37,38,38,39,39,40,41,41,42,42,43,44,44,45,45,46,47,47,48,49,49,50,50,51,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52
0024F7r 1  00 00 00 00  
0024FBr 1  00 00 00 00  
0025F3r 1               
0025F3r 1               
0025F3r 1               SUBCELL_X_COS_L:
0025F3r 1  FF FC F8 F4  .byte $FF,$FC,$F8,$F4,$F1,$ED,$E9,$E5,$E1,$DD,$D9,$D5,$CF,$C9,$C3,$BD,$B8,$B2,$AD,$A7,$A2,$9D,$9D,$9E,$9E,$9E,$9E,$9E,$9E,$9E,$9D,$9D,$9C,$9A,$98,$96,$93,$91,$8E,$8B,$88,$85,$81,$7E,$76,$6F,$68,$61,$5A,$54,$4D,$47,$41,$3B,$34,$2E,$28,$23,$1D,$18,$13,$E,$9,$4,$0,$FB,$F6,$F1,$EC,$E7,$E2,$DC,$D7,$D1,$CB,$C4,$BE,$B8,$B2,$AB,$A5,$9E,$97,$90,$89,$81,$7E,$7A,$77,$74,$71,$6E,$6C,$69,$67,$65,$63,$62,$62,$61,$61,$61,$61,$61,$61,$61,$62,$62,$5D,$58,$52,$4D,$47,$42,$3C,$36,$30,$2A,$26,$22,$1E,$1A,$16,$12,$E,$B,$7,$3,$0,$3,$7,$B,$E,$12,$16,$1A,$1E,$22,$26,$2A,$30,$36,$3C,$42,$47,$4D,$52,$58,$5D,$62,$62,$61,$61,$61,$61,$61,$61,$61,$62,$62,$63,$65,$67,$69,$6C,$6E,$71,$74,$77,$7A,$7E,$81,$89,$90,$97,$9E,$A5,$AB,$B2,$B8,$BE,$C4,$CB,$D1,$D7,$DC,$E2,$E7,$EC,$F1,$F6,$FB,$0,$4,$9,$E,$13,$18,$1D,$23,$28,$2E,$34,$3B,$41,$47,$4D,$54,$5A,$61,$68,$6F,$76,$7E,$81,$85,$88,$8B,$8E,$91,$93,$96,$98,$9A,$9C,$9D,$9D,$9E,$9E,$9E,$9E,$9E,$9E,$9E,$9D,$9D,$A2,$A7,$AD,$B2,$B8,$BD,$C3,$C9,$CF,$D5,$D9,$DD,$E1,$E5,$E9,$ED,$F1,$F4,$F8,$FC
0025F7r 1  F1 ED E9 E5  
0025FBr 1  E1 DD D9 D5  
0026F3r 1               
0026F3r 1               SUBCELL_X_COS_H:
0026F3r 1  00 00 00 00  .byte
0026F7r 1  00 00 00 00  
0026FBr 1  00 00 00 00  
0027F3r 1               
0027F3r 1               SUBCELL_X_SIN_L:
0027F3r 1  00 06 0C 12  .byte $0,$6,$C,$12,$17,$1D,$22,$27,$2C,$31,$36,$3B,$3E,$42,$45,$49,$4C,$4F,$51,$54,$56,$59,$5E,$64,$69,$6F,$75,$7B,$82,$88,$8F,$95,$9C,$A2,$A8,$AE,$B4,$BA,$C0,$C6,$CC,$D2,$D8,$DE,$DE,$DD,$DD,$DC,$DB,$DA,$D9,$D8,$D7,$D5,$D2,$CF,$CC,$C9,$C6,$C4,$C1,$BE,$BB,$B8,$B5,$B8,$BB,$BE,$C1,$C4,$C6,$C9,$CC,$CF,$D2,$D5,$D7,$D8,$D9,$DA,$DB,$DC,$DD,$DD,$DE,$DE,$D8,$D2,$CC,$C6,$C0,$BA,$B4,$AE,$A8,$A2,$9C,$95,$8F,$88,$82,$7B,$75,$6F,$69,$64,$5E,$59,$56,$54,$51,$4F,$4C,$49,$45,$42,$3E,$3B,$36,$31,$2C,$27,$22,$1D,$17,$12,$C,$6,$0,$F9,$F3,$ED,$E8,$E2,$DD,$D8,$D3,$CE,$C9,$C4,$C1,$BD,$BA,$B6,$B3,$B0,$AE,$AB,$A9,$A6,$A1,$9B,$96,$90,$8A,$84,$7D,$77,$70,$6A,$63,$5D,$57,$51,$4B,$45,$3F,$39,$33,$2D,$27,$21,$21,$22,$22,$23,$24,$25,$26,$27,$28,$2A,$2D,$30,$33,$36,$39,$3B,$3E,$41,$44,$47,$4A,$47,$44,$41,$3E,$3B,$39,$36,$33,$30,$2D,$2A,$28,$27,$26,$25,$24,$23,$22,$22,$21,$21,$27,$2D,$33,$39,$3F,$45,$4B,$51,$57,$5D,$63,$6A,$70,$77,$7D,$84,$8A,$90,$96,$9B,$A1,$A6,$A9,$AB,$AE,$B0,$B3,$B6,$BA,$BD,$C1,$C4,$C9,$CE,$D3,$D8,$DD,$E2,$E8,$ED,$F3,$F9
0027F7r 1  17 1D 22 27  
0027FBr 1  2C 31 36 3B  
0028F3r 1               
0028F3r 1               SUBCELL_X_SIN_H:
0028F3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
0028F7r 1  00 00 00 00  
0028FBr 1  00 00 00 00  
0029F3r 1               
0029F3r 1               SUBCELL_Y_COS_L:
0029F3r 1  9C 9E A0 A2  .byte $9C,$9E,$A0,$A2,$A4,$A6,$A8,$A9,$AB,$AC,$AD,$AE,$B1,$B3,$B5,$B8,$BA,$BB,$BD,$BE,$BF,$C0,$BA,$B5,$AF,$A9,$A3,$9D,$97,$91,$8B,$85,$7F,$7B,$76,$71,$6D,$68,$63,$5F,$5A,$56,$51,$4D,$4B,$48,$46,$43,$40,$3D,$3A,$37,$33,$30,$2C,$29,$25,$21,$1D,$18,$14,$F,$A,$5,$0,$FA,$F5,$F0,$EB,$E7,$E2,$DE,$DA,$D6,$D3,$CF,$CC,$C8,$C5,$C2,$BF,$BC,$B9,$B7,$B4,$B2,$AE,$A9,$A5,$A0,$9C,$97,$92,$8E,$89,$84,$80,$7A,$74,$6E,$68,$62,$5C,$56,$50,$4A,$45,$3F,$40,$41,$42,$44,$45,$47,$4A,$4C,$4E,$51,$52,$53,$54,$56,$57,$59,$5B,$5D,$5F,$61,$63,$61,$5F,$5D,$5B,$59,$57,$56,$54,$53,$52,$51,$4E,$4C,$4A,$47,$45,$44,$42,$41,$40,$3F,$45,$4A,$50,$56,$5C,$62,$68,$6E,$74,$7A,$80,$84,$89,$8E,$92,$97,$9C,$A0,$A5,$A9,$AE,$B2,$B4,$B7,$B9,$BC,$BF,$C2,$C5,$C8,$CC,$CF,$D3,$D6,$DA,$DE,$E2,$E7,$EB,$F0,$F5,$FA,$0,$5,$A,$F,$14,$18,$1D,$21,$25,$29,$2C,$30,$33,$37,$3A,$3D,$40,$43,$46,$48,$4B,$4D,$51,$56,$5A,$5F,$63,$68,$6D,$71,$76,$7B,$7F,$85,$8B,$91,$97,$9D,$A3,$A9,$AF,$B5,$BA,$C0,$BF,$BE,$BD,$BB,$BA,$B8,$B5,$B3,$B1,$AE,$AD,$AC,$AB,$A9,$A8,$A6,$A4,$A2,$A0,$9E
0029F7r 1  A4 A6 A8 A9  
0029FBr 1  AB AC AD AE  
002AF3r 1               
002AF3r 1               SUBCELL_Y_COS_H:
002AF3r 1  00 00 00 00  .byte
002AF7r 1  00 00 00 00  
002AFBr 1  00 00 00 00  
002BF3r 1               
002BF3r 1               SUBCELL_Y_SIN_L:
002BF3r 1  00 03 07 0C  .byte $0,$3,$7,$C,$10,$14,$18,$1D,$22,$26,$2B,$30,$35,$3B,$41,$47,$4D,$53,$59,$60,$66,$6D,$70,$72,$75,$77,$79,$7A,$7C,$7D,$7E,$7F,$7F,$81,$82,$84,$85,$86,$86,$87,$87,$88,$88,$88,$8C,$90,$94,$98,$9C,$9F,$A3,$A7,$AA,$AE,$B3,$B7,$BC,$C0,$C5,$C9,$CD,$D2,$D6,$D9,$DD,$D9,$D6,$D2,$CD,$C9,$C5,$C0,$BC,$B7,$B3,$AE,$AA,$A7,$A3,$9F,$9C,$98,$94,$90,$8C,$88,$88,$88,$87,$87,$86,$86,$85,$84,$82,$81,$7F,$7F,$7E,$7D,$7C,$7A,$79,$77,$75,$72,$70,$6D,$66,$60,$59,$53,$4D,$47,$41,$3B,$35,$30,$2B,$26,$22,$1D,$18,$14,$10,$C,$7,$3,$0,$FC,$F8,$F3,$EF,$EB,$E7,$E2,$DD,$D9,$D4,$CF,$CA,$C4,$BE,$B8,$B2,$AC,$A6,$9F,$99,$92,$8F,$8D,$8A,$88,$86,$85,$83,$82,$81,$80,$80,$7E,$7D,$7B,$7A,$79,$79,$78,$78,$77,$77,$77,$73,$6F,$6B,$67,$63,$60,$5C,$58,$55,$51,$4C,$48,$43,$3F,$3A,$36,$32,$2D,$29,$26,$22,$26,$29,$2D,$32,$36,$3A,$3F,$43,$48,$4C,$51,$55,$58,$5C,$60,$63,$67,$6B,$6F,$73,$77,$77,$77,$78,$78,$79,$79,$7A,$7B,$7D,$7E,$80,$80,$81,$82,$83,$85,$86,$88,$8A,$8D,$8F,$92,$99,$9F,$A6,$AC,$B2,$B8,$BE,$C4,$CA,$CF,$D4,$D9,$DD,$E2,$E7,$EB,$EF,$F3,$F8,$FC
002BF7r 1  10 14 18 1D  
002BFBr 1  22 26 2B 30  
002CF3r 1               
002CF3r 1               SUBCELL_Y_SIN_H:
002CF3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
002CF7r 1  00 00 00 00  
002CFBr 1  00 00 00 00  
002DF3r 1               
002DF3r 1               
002DF3r 1               ;constants
002DF3r 1               
002DF3r 1               ; RAM Interrupt Vectors
002DF3r 1               IRQVec            = $0314
002DF3r 1               
002DF3r 1               ; VERA
002DF3r 1               VERA_addr_low     = $9F20
002DF3r 1               VERA_addr_high    = $9F21
002DF3r 1               VERA_addr_bank    = $9F22
002DF3r 1               VERA_data0        = $9F23
002DF3r 1               VERA_data1        = $9F24
002DF3r 1               VERA_ctrl         = $9F25
002DF3r 1               VERA_ien          = $9F26
002DF3r 1               VERA_isr          = $9F27
002DF3r 1               VERA_dc_video     = $9F29 ; DCSEL = 0
002DF3r 1               FX_CTRL           = $9F29 ; DCSEL = 2
002DF3r 1               FX_CACHE_L        = $9F29 ; DCSEL = 6
002DF3r 1               FX_CACHE_M        = $9F2A
002DF3r 1               FX_CACHE_H        = $9F2B
002DF3r 1               FX_CACHE_U        = $9F2C
002DF3r 1               ;   Current Field | Sprites Enable | Layer1 Enable  |Layer0 Enable
002DF3r 1               ; NTSC/RGB: 240P  | NTSC: Chroma Disable / RGB: HV Sync Output Mode
002DF3r 1               
002DF3r 1               VERA_dc_hscale    = $9F2A
002DF3r 1               VERA_dc_vscale    = $9F2B
002DF3r 1               
002DF3r 1               VERA_L0_config    = $9F2D
002DF3r 1               ;   7       6     5   4       3       2             1   0
002DF3r 1               ;   Map Height | Map Width | T256C | Bitmap Mode | Color Depth
002DF3r 1               ;   0 - 32                  0 - 16    0 tiled       0   1bpp mono
002DF3r 1               ;   1 - 64                  1 - 256   1 enabled     1   2bpp 4 color
002DF3r 1               ;   2 - 128                                         2   4bpp 16 color
002DF3r 1               ;   3 - 256                                         3   8bpp 256 color
002DF3r 1               ;   bitmap mode - tilebase points to bitmap data, mapbase not used
002DF3r 1               ;   tile width = 0 is 320 pixels / tile width=1 is 640 pixels.. so could do 4bpp x 320?
002DF3r 1               ;   The palette offset (in 'H-Scroll (11:8)') modifies the color indexes of the bitmap in the same way as in the tile modes.
002DF3r 1               
002DF3r 1               VERA_L0_mapbase   = $9F2E
002DF3r 1               VERA_L0_tilebase  = $9F2F ;   Tile Base Address (16:11) | Tile Height 0-8/1-16 | Tile Width 0-8/1-16
002DF3r 1               VERA_L0_HSCROLL_L = $9F30 ;  H-Scroll (7:0)
002DF3r 1               VERA_L0_HSCROLL_H = $9F31 ;  - H-Scroll (11:8)
002DF3r 1               VERA_L0_VSCROLL_L = $9F32 ;  V-Scroll (7:0)
002DF3r 1               VERA_L0_VSCROLL_H = $9F33 ;  - V-Scroll (11:8)
002DF3r 1               
002DF3r 1               VERA_L1_config    = $9F34
002DF3r 1               VERA_L1_mapbase   = $9F35
002DF3r 1               VERA_L1_tilebase  = $9F36
002DF3r 1               VERA_L1_HSCROLL_L = $9F37 ;  H-Scroll (7:0)
002DF3r 1               VERA_L1_HSCROLL_H = $9F38 ;  - H-Scroll (11:8)
002DF3r 1               VERA_L1_VSCROLL_L = $9F39 ;  V-Scroll (7:0)
002DF3r 1               VERA_L1_VSCROLL_H = $9F3A ;  - V-Scroll (11:8)
002DF3r 1               
002DF3r 1               VSYNC_BIT         = $01
002DF3r 1               
002DF3r 1               ; VRAM Addresses
002DF3r 1               ;   Address range Description
002DF3r 1               ;   $00000 - $1F9BF Video RAM   - 129,424 bytes -> 126K is 129,024 (1F800)
002DF3r 1               ;   $1F9C0 - $1F9FF PSG registers
002DF3r 1               ;   $1FA00 - $1FBFF Palette
002DF3r 1               ;   $1FC00 - $1FFFF Sprite attributes
002DF3r 1               
002DF3r 1               VRAM_UNRESERVED   = $1A000      ;
002DF3r 1               ; sprite starts must be 32byte aligned...
002DF3r 1               ; only can go to 126K ...
002DF3r 1               VRAM_palette      = $1FA00      ;
002DF3r 1               VRAM_sprite_attributes = $1FC00
002DF3r 1               
002DF3r 1               SPRITES_ONLY_VGA = $41
002DF3r 1               
002DF3r 1               
002DF3r 1               
002DF3r 1               ; Kernal
002DF3r 1               CHROUT            = $FFD2
002DF3r 1               GETIN             = $FFE4
002DF3r 1               CINT              = $FF81
002DF3r 1               
002DF3r 1               
002DF3r 1               ; PETSCII Codes
002DF3r 1               WHITE             = $05
002DF3r 1               RETURN            = $0D
002DF3r 1               SPACE             = $20
002DF3r 1               ZERO_CHAR         = $30
002DF3r 1               SIX_CHAR          = $36
002DF3r 1               NINE_CHAR         = $39
002DF3r 1               
002DF3r 1               A_CHAR            = $41
002DF3r 1               C_CHAR            = $43
002DF3r 1               D_CHAR            = $44
002DF3r 1               E_CHAR            = $45
002DF3r 1               I_CHAR            = $49
002DF3r 1               O_CHAR            = $4F
002DF3r 1               T_CHAR            = $54
002DF3r 1               W_CHAR            = $57
002DF3r 1               X_CHAR            = $58
002DF3r 1               Y_CHAR            = $59
002DF3r 1               Z_CHAR            = $5A
002DF3r 1               
002DF3r 1               CLR               = $93
002DF3r 1               
002DF3r 1               ; 	$0800-$9EFF	BASIC program/variables; available to the user
002DF3r 1               WORLD_DATA = $6000 	;	so is %100 [Y 5 bits ] : [ab] 0 [X - 6 bits
002DF3r 1               SCREEN_buffer = $8000
002DF3r 1               
002DF3r 1               ; zero page layout $0022-$007F is available to user
002DF3r 1               ZP_PTR = $22
002DF3r 1               SCRATCH_PTR = $7E
002DF3r 1               
002DF3r 1               ; global data ; 2E00
002DF3r 1  DE AD BE EF  .byte $DE,$AD,$BE,$EF ; 0-3
002DF7r 1  00 00        default_irq_vector:  .addr 0 ; 4-5
002DF9r 1  01           VSYNC_counter:       .byte 1 ; 6
002DFAr 1  01           camera_facing: 		 .byte 1 ; 7
002DFBr 1  2C           camera_world_pos_XH:    .byte 44 ; 8
002DFCr 1  30           camera_world_pos_XL:       .byte 48 ; 9
002DFDr 1  0F           camera_world_pos_YH:        .byte 15 ; A
002DFEr 1  80           camera_world_pos_YL:       .byte 128  ; B
002DFFr 1  00           camera_cell_x: 		 .byte 0 ; c
002E00r 1  00           camera_cell_xl:       .byte 0 ; d
002E01r 1  00           DEBUG_A: .byte 0  ; 12
002E02r 1  00           DEBUG_B: .byte 0  ; 13
002E03r 1  00           DEBUG_C: .byte 0
002E04r 1  00           DEBUG_D: .byte 0
002E05r 1  00           camera_cell_y: 		 .byte 0 ; e
002E06r 1  00           camera_cell_yl:       .byte 0 ; f
002E07r 1  00 00        MASTER_CLOCK:        .addr 0 ; 10-11
002E09r 1               
002E09r 1               .macro stash_scratch
002E09r 1               	STA (SCRATCH_PTR)
002E09r 1                   INC SCRATCH_PTR
002E09r 1               .endmacro
002E09r 1               
002E09r 1               custom_irq_handler: ; 2E12
002E09r 1  AD 27 9F        lda VERA_isr
002E0Cr 1  29 01           and #VSYNC_BIT
002E0Er 1  F0 03           beq @continue ; non-VSYNC IRQ, no tick update
002E10r 1  EE rr rr        inc VSYNC_counter
002E13r 1               @continue:
002E13r 1                  ; continue to default IRQ handler
002E13r 1  6C rr rr        jmp (default_irq_vector)
002E16r 1                  ; RTI will happen after jump
002E16r 1               
002E16r 1               start:
002E16r 1                 ; start of program - init globals
002E16r 1  AD 14 03       lda IRQVec
002E19r 1  8D rr rr       sta default_irq_vector
002E1Cr 1  AD 15 03       lda IRQVec+1
002E1Fr 1  8D rr rr       sta default_irq_vector+1
002E22r 1               
002E22r 1  9C 29 9F       stz VERA_dc_video   ; disable display
002E25r 1  A9 2B          lda #43 ; set scale for bitmap mode - going for 215x161 mode
002E27r 1  8D 2A 9F       sta VERA_dc_hscale
002E2Ar 1  8D 2B 9F       sta VERA_dc_vscale
002E2Dr 1                 ; for now no L0 or L1
002E2Dr 1               
002E2Dr 1                 ; let's stick that test sprite data into VRAM at zero for now..
002E2Dr 1  9C 25 9F       stz VERA_ctrl
002E30r 1  9C 20 9F       stz VERA_addr_low
002E33r 1  9C 21 9F       stz VERA_addr_high
002E36r 1  A9 10          lda #$10
002E38r 1  8D 22 9F       sta VERA_addr_bank
002E3Br 1                 ; load test VRAM data
002E3Br 1               
002E3Br 1                 ; is 512 bytes at test_cell_sprite label
002E3Br 1  A0 00          ldy #0
002E3Dr 1               
002E3Dr 1  A9 rr          LDA #<test_vram_data
002E3Fr 1  85 22          STA ZP_PTR
002E41r 1  A9 rr          LDA #>test_vram_data
002E43r 1  85 23          STA ZP_PTR+1
002E45r 1  A2 20          LDX #32   ;   num pages to copy - 16 pages / 8K  - sprite addr 0-255
002E47r 1  80 02          BRA :++
002E49r 1                 :
002E49r 1  E6 23             INC ZP_PTR+1
002E4Br 1                   :
002E4Br 1  B1 22              LDA (ZP_PTR),Y
002E4Dr 1  8D 23 9F           STA VERA_data0
002E50r 1  C8                 INY
002E51r 1  D0 F8              BNE :-
002E53r 1  CA                DEX
002E54r 1  D0 F3             BNE :--
002E56r 1               
002E56r 1                 ; initialize some waves
002E56r 1  64 22          STZ ZP_PTR
002E58r 1  A9 rr          LDA #>TUB_WORLD
002E5Ar 1  85 23          STA ZP_PTR+1
002E5Cr 1  A9 08          LDA #8
002E5Er 1  85 24          STA ZP_PTR+2 ; for use as page counter..
002E60r 1  A2 00          LDX #0
002E62r 1  B1 22          : LDA (ZP_PTR),y ; grab world data
002E64r 1  C9 80            CMP #128       ; is outside or inside tub?
002E66r 1  B0 08            BCS :+         ; skip this one
002E68r 1  8A               TXA
002E69r 1  91 22            STA (ZP_PTR),y
002E6Br 1  E8               INX
002E6Cr 1  E0 0F            CPX #15
002E6Er 1  B0 0B            BCS :++
002E70r 1  C8             : INY
002E71r 1  D0 EF            BNE :--
002E73r 1  E6 23            INC ZP_PTR+1
002E75r 1  C6 24            DEC ZP_PTR+2
002E77r 1  D0 E9            BNE :--
002E79r 1  80 15            BRA :+++
002E7Br 1  B1 22          : LDA (ZP_PTR),y
002E7Dr 1  C9 80            CMP #128       ; is outside or inside tub?
002E7Fr 1  B0 06            BCS :+         ; skip this one
002E81r 1  8A               TXA
002E82r 1  91 22            STA (ZP_PTR),y
002E84r 1  CA               DEX
002E85r 1  F0 E9            BEQ :--
002E87r 1  C8             : INY
002E88r 1  D0 F1            BNE :--
002E8Ar 1  E6 23            INC ZP_PTR+1
002E8Cr 1  C6 24            DEC ZP_PTR+2
002E8Er 1  D0 EB            BNE :--
002E90r 1                 :
002E90r 1                 ; write sprite test data
002E90r 1  A9 FF          LDA #255
002E92r 1  8D 20 9F       STA VERA_addr_low
002E95r 1  A9 FC          lda #>VRAM_sprite_attributes
002E97r 1  8D 21 9F       sta VERA_addr_high
002E9Ar 1  A9 19          lda #$19   ;  decrement 1 bank 1
002E9Cr 1  8D 22 9F       sta VERA_addr_bank
002E9Fr 1  A2 FF          LDX #255
002EA1r 1                 :
002EA1r 1  BD rr rr         LDA test_sprite_data,X
002EA4r 1  8D 23 9F         STA VERA_data0
002EA7r 1  CA               DEX
002EA8r 1  D0 F7            BNE :-
002EAAr 1  BD rr rr        LDA test_sprite_data,X
002EADr 1  8D 23 9F        STA VERA_data0
002EB0r 1               
002EB0r 1               
002EB0r 1                 ; write custom palette data  - 16 colors only for now.. $1:FA00-$1:FBFF   VERA Color Palette (256 x 2 bytes)
002EB0r 1  A2 1F          LDX #31
002EB2r 1  8E 20 9F       STX VERA_addr_low
002EB5r 1  A9 FA          LDA #$FA
002EB7r 1  8D 21 9F       STA VERA_addr_high
002EBAr 1  A9 19          LDA #$19
002EBCr 1  8D 22 9F       STA VERA_addr_bank
002EBFr 1                 :
002EBFr 1  BD rr rr         LDA test_optimal_pal_data,X
002EC2r 1  8D 23 9F         STA VERA_data0
002EC5r 1  CA               DEX
002EC6r 1  D0 F7            BNE :-
002EC8r 1  BD rr rr       LDA test_optimal_pal_data,X
002ECBr 1  8D 23 9F       STA VERA_data0
002ECEr 1               
002ECEr 1                 ; enable display
002ECEr 1  9C 25 9F       stz VERA_ctrl
002ED1r 1  A9 41          lda #SPRITES_ONLY_VGA
002ED3r 1  8D 29 9F       sta VERA_dc_video
002ED6r 1               
002ED6r 1                 ; overwrite RAM IRQ vector with custom handler address
002ED6r 1  78             sei ; disable IRQ while vector is changing
002ED7r 1  A9 rr          lda #<custom_irq_handler
002ED9r 1  8D 14 03       sta IRQVec
002EDCr 1  A9 rr          lda #>custom_irq_handler
002EDEr 1  8D 15 03       sta IRQVec+1
002EE1r 1  A9 01          lda #VSYNC_BIT ; make VERA only generate VSYNC IRQs
002EE3r 1  8D 26 9F       sta VERA_ien
002EE6r 1  58             cli ; enable IRQ now that vector is properly set
002EE7r 1               
002EE7r 1               
002EE7r 1                 ; calc movement table - using ACROSS_ROW_* but move 1/16 unit at a time .. at 30fps = 30/16 = ~2 units / second
002EE7r 1  A2 00          LDX #0
002EE9r 1  A0 40          LDY #64
002EEBr 1  BD rr rr      : LDA ACROSS_ROW_X_L,X
002EEEr 1  85 7E           STA $7E
002EF0r 1  BD rr rr        LDA ACROSS_ROW_X_H,X
002EF3r 1  4A              LSR
002EF4r 1  26 7E           ROL $7E  ;  /2
002EF6r 1  4A              LSR
002EF7r 1  26 7E           ROL $7E  ; /4
002EF9r 1  4A              LSR
002EFAr 1  26 7E           ROL $7E  ; /8
002EFCr 1  4A              LSR
002EFDr 1  26 7E           ROL $7E  ; /16
002EFFr 1  4A              LSR
002F00r 1  26 7E           ROL $7E  ; /32
002F02r 1  C9 04           CMP #4   ;  if original value was positive, this is the sign bit...
002F04r 1  90 02           BCC :+
002F06r 1  A9 FF           LDA #$FF
002F08r 1  9D rr rr      : STA MOVE_YH,X
002F0Br 1  A5 7E           LDA $7E
002F0Dr 1  9D rr rr        STA MOVE_YL,X
002F10r 1               
002F10r 1  B9 rr rr        LDA ACROSS_ROW_X_L,Y
002F13r 1  85 7E           STA $7E
002F15r 1  B9 rr rr        LDA ACROSS_ROW_X_H,Y
002F18r 1  4A              LSR
002F19r 1  26 7E           ROL $7E  ;  /2
002F1Br 1  4A              LSR
002F1Cr 1  26 7E           ROL $7E  ; /4
002F1Er 1  4A              LSR
002F1Fr 1  26 7E           ROL $7E  ; /8
002F21r 1  4A              LSR
002F22r 1  26 7E           ROL $7E  ; /16
002F24r 1  4A              LSR
002F25r 1  26 7E           ROL $7E  ; /32
002F27r 1  C9 04           CMP #4   ;  if original value was positive, this is the sign bit...
002F29r 1  90 02           BCC :+
002F2Br 1  A9 FF           LDA #$FF
002F2Dr 1  9D rr rr      : STA MOVE_XH,X
002F30r 1  A5 7E           LDA $7E
002F32r 1  9D rr rr        STA MOVE_XL,X
002F35r 1  C8              INY
002F36r 1  E8              INX
002F37r 1  D0 B2           BNE :---
002F39r 1               
002F39r 1                 ; main loop here...
002F39r 1  9C rr rr        STZ camera_facing
002F3Cr 1               
002F3Cr 1               @camera_world_changed:
002F3Cr 1  AE rr rr        LDX camera_world_pos_XH
002F3Fr 1  AC rr rr        LDY camera_world_pos_XL
002F42r 1  18              CLC
002F43r 1  B9 rr rr        LDA WORLD_TO_CELL_XH,Y ; that bit from pos_XL
002F46r 1  7D rr rr        ADC WORLD_TO_CELL_XL,X ; plus the bit from pos_XH
002F49r 1  A8              TAY   ;  cellXL from ratio
002F4Ar 1  BD rr rr        LDA WORLD_TO_CELL_XH,X
002F4Dr 1  69 00           ADC #0 ; gotta do that carry and all ..
002F4Fr 1  AA              TAX   ; cellXH from ratio
002F50r 1               
002F50r 1                  ; copy over cell YL as-is
002F50r 1  AD rr rr        LDA camera_world_pos_YL
002F53r 1  8D rr rr        STA camera_cell_yl
002F56r 1                  ; YH gets copied over ..
002F56r 1  AD rr rr        LDA camera_world_pos_YH
002F59r 1  8D rr rr        STA camera_cell_y
002F5Cr 1                  ; cellX = WORLDX*ratio - floor(cellY)/2
002F5Cr 1                  ;  halve floor(cellY)
002F5Cr 1  4A              LSR
002F5Dr 1  85 7F           STA $7F ; stash it for scratch
002F5Fr 1  B0 06           BCS :+ ; did we have a thing from before?
002F61r 1  8C rr rr        STY camera_cell_xl
002F64r 1  38              SEC ; no half to subtract.. OK
002F65r 1  80 06           BRA :++
002F67r 1  98            : TYA   ;  cellXL from ratio
002F68r 1  E9 80           SBC #128 ; subtract the half
002F6Ar 1  8D rr rr        STA camera_cell_xl
002F6Dr 1  8A            : TXA
002F6Er 1  E5 7F           SBC $7F ; now either carry is set because cellXL >=128 or was no half to sub.. subtract halfY
002F70r 1  8D rr rr        STA camera_cell_x
002F73r 1               
002F73r 1               @camera_cell_changed: ; run through this more as a normalization step for camera..
002F73r 1                  ; worldX = scaled(floor(cellY)/2 + cellX )
002F73r 1  AD rr rr        LDA camera_cell_y
002F76r 1  4A              LSR
002F77r 1  AA              TAX  ; high byte floor(Y)/2
002F78r 1  A9 00           LDA #0
002F7Ar 1  6A              ROR ; either is zero or 128 now ... either way, carry is cleared.
002F7Br 1  6D rr rr        ADC camera_cell_xl
002F7Er 1  A8              TAY ; stash the low to byte
002F7Fr 1  8A              TXA ; high byte floor (Y)/2 .. ready for adding
002F80r 1  6D rr rr        ADC camera_cell_x
002F83r 1  AA              TAX ; stash high byte ... carry _should_ be cleared unless X >255 ... ?
002F84r 1  B9 rr rr        LDA CELL_LOW_TO_WORLD_XL,Y
002F87r 1  7D rr rr        ADC CELL_TO_WORLD_XL,X
002F8Ar 1  8D rr rr        STA camera_world_pos_XL
002F8Dr 1  B9 rr rr        LDA CELL_LOW_TO_WORLD_XH,Y
002F90r 1  7D rr rr        ADC CELL_TO_WORLD_XH,X
002F93r 1  8D rr rr        STA camera_world_pos_XH
002F96r 1                  ;  jmp @do_update ; superfluous currently. redundant even..
002F96r 1               
002F96r 1               
002F96r 1               @do_update:
002F96r 1               
002F96r 1                  ; clear the object list ...
002F96r 1  9C rr rr         STZ OBJECT_LIST_BYTE6_NEXT ; because we can't use zero anyway..
002F99r 1  A2 00            LDX #0
002F9Br 1  A9 0C            LDA #$0C ; is basis for all the z_flips <- this may change depending on orientation..
002F9Dr 1  9E rr rr         : STZ OBJECT_LIST_Z_START_POINTERS,X
002FA0r 1  9E rr rr           STZ OBJECT_LIST_BYTE1_MODE,X          ; 16 color / low address
002FA3r 1  9C rr rr           STZ OBJECT_LIST_BYTE2_X
002FA6r 1  9D rr rr           STA OBJECT_LIST_BYTE4_ZFLIPS,X
002FA9r 1  E8                 INX
002FAAr 1  D0 F1              BNE :-
002FACr 1               
002FACr 1  20 rr rr        jsr push_world_to_object_list
002FAFr 1               
002FAFr 1  AE rr rr        LDX OBJECT_LIST_BYTE6_NEXT
002FB2r 1  8E rr rr        STX DEBUG_C
002FB5r 1               
002FB5r 1                  ;  write location datas..
002FB5r 1  A9 F8           lda #248
002FB7r 1  8D 20 9F        STA VERA_addr_low
002FBAr 1  A9 FC           LDA #$FC
002FBCr 1  8D 21 9F        STA VERA_addr_high
002FBFr 1  A9 49           LDA #$49
002FC1r 1  8D 22 9F        STA VERA_addr_bank
002FC4r 1               
002FC4r 1               
002FC4r 1  A0 0A           ldy #10
002FC6r 1  BE rr rr      : LDX camera_facing-1,y
002FC9r 1  BD rr rr        LDA SPRITE_NUM_LOW_NIBBLE,X
002FCCr 1  8D 23 9F        STA VERA_data0
002FCFr 1  BD rr rr        LDA SPRITE_NUM_HIGH_NIBBLE,X
002FD2r 1  8D 23 9F        STA VERA_data0
002FD5r 1  88              dey
002FD6r 1  D0 EE           BNE :-
002FD8r 1               
002FD8r 1               
002FD8r 1  20 rr rr        jsr draw_object_list
002FDBr 1               
002FDBr 1               
002FDBr 1               @FRAME_CHECK:
002FDBr 1  CB              wai
002FDCr 1  AD rr rr        lda VSYNC_counter
002FDFr 1  F0 FA           beq @FRAME_CHECK
002FE1r 1  9C rr rr        stz VSYNC_counter
002FE4r 1  18              CLC
002FE5r 1  6D rr rr        ADC MASTER_CLOCK
002FE8r 1  AA              TAX
002FE9r 1  8D rr rr        STA MASTER_CLOCK
002FECr 1  AD rr rr        LDA MASTER_CLOCK+1
002FEFr 1  69 00           ADC #0
002FF1r 1  8D rr rr        STA MASTER_CLOCK+1
002FF4r 1  8A              TXA
002FF5r 1  29 03           AND #3 ; restrict to 20 fps.. don't care missed cycle.
002FF7r 1  D0 E2           BNE @FRAME_CHECK
002FF9r 1                  ; poll keyboard for input
002FF9r 1  20 E4 FF        jsr GETIN
002FFCr 1  C9 00           cmp #0
002FFEr 1  F0 DB           beq @FRAME_CHECK
003000r 1  C9 1D           cmp #$1D 	;	cursor right
003002r 1  D0 06           BNE :+
003004r 1  EE rr rr        INC camera_facing
003007r 1  4C rr rr        JMP @do_update
00300Ar 1                  :
00300Ar 1  C9 9D           cmp  #$9D 	;	cursor left
00300Cr 1  D0 06           BNE :+
00300Er 1  CE rr rr        DEC camera_facing
003011r 1  4C rr rr        JMP @do_update
003014r 1  C9 11         : cmp #$11; cursor down
003016r 1  D0 2C           BNE :+
003018r 1  AE rr rr        LDX camera_facing
00301Br 1  18              CLC
00301Cr 1  AD rr rr        LDA camera_world_pos_XL
00301Fr 1  7D rr rr        ADC MOVE_XL,X
003022r 1  8D rr rr        STA camera_world_pos_XL
003025r 1  AD rr rr        LDA camera_world_pos_XH
003028r 1  7D rr rr        ADC MOVE_XH,X
00302Br 1  8D rr rr        STA camera_world_pos_XH
00302Er 1  18              CLC
00302Fr 1  BD rr rr        LDA MOVE_YL,X
003032r 1  6D rr rr        ADC camera_world_pos_YL
003035r 1  8D rr rr        STA camera_world_pos_YL
003038r 1  BD rr rr        LDA MOVE_YH,X
00303Br 1  6D rr rr        ADC camera_world_pos_YH
00303Er 1  8D rr rr        STA camera_world_pos_YH
003041r 1  4C rr rr        jmp @camera_world_changed
003044r 1               
003044r 1  C9 91         : cmp #$91 ; cursor up
003046r 1  D0 2C           BNE :+
003048r 1  AE rr rr        LDX camera_facing
00304Br 1  38              SEC
00304Cr 1  AD rr rr        LDA camera_world_pos_XL
00304Fr 1  FD rr rr        SBC MOVE_XL,X
003052r 1  8D rr rr        STA camera_world_pos_XL
003055r 1  AD rr rr        LDa camera_world_pos_XH
003058r 1  FD rr rr        SBC MOVE_XH,X
00305Br 1  8D rr rr        STA camera_world_pos_XH
00305Er 1  38              SEC
00305Fr 1  AD rr rr        LDA camera_world_pos_YL
003062r 1  FD rr rr        SBC MOVE_YL,X
003065r 1  8D rr rr        STA camera_world_pos_YL
003068r 1  AD rr rr        LDA camera_world_pos_YH
00306Br 1  FD rr rr        SBC MOVE_YH,X
00306Er 1  8D rr rr        STA camera_world_pos_YH
003071r 1  4C rr rr        jmp @camera_world_changed
003074r 1               
003074r 1  C9 45         : cmp  #E_CHAR ; cell up right
003076r 1  D0 15           BNE :+++
003078r 1  AD rr rr        LDA camera_cell_y
00307Br 1  F0 03           BEQ :+
00307Dr 1  CE rr rr        DEC camera_cell_y
003080r 1  AD rr rr      : LDA camera_cell_x
003083r 1  C9 3F           CMP #63
003085r 1  B0 03           BCS :+
003087r 1  EE rr rr        INC camera_cell_x
00308Ar 1  4C rr rr      : JMP @camera_cell_changed
00308Dr 1               
00308Dr 1  C9 57         : cmp #W_CHAR ; cell up left
00308Fr 1  D0 0B           BNE :++
003091r 1  AD rr rr        LDA camera_cell_y
003094r 1  F0 03           BEQ :+
003096r 1  CE rr rr        DEC camera_cell_y
003099r 1  4C rr rr      : JMP @camera_cell_changed
00309Cr 1               
00309Cr 1  C9 41         : cmp #A_CHAR ; cell left
00309Er 1  D0 0B           BNE :++
0030A0r 1  AD rr rr        LDA camera_cell_x
0030A3r 1  F0 03           BEQ :+
0030A5r 1  CE rr rr        DEC camera_cell_x
0030A8r 1  4C rr rr      : JMP @camera_cell_changed
0030ABr 1               
0030ABr 1  C9 44         : cmp #D_CHAR ; cell right
0030ADr 1  D0 0D           BNE :++
0030AFr 1  AD rr rr        LDA camera_cell_x
0030B2r 1  C9 3F           CMP #63
0030B4r 1  B0 03           BCS :+
0030B6r 1  EE rr rr        INC camera_cell_x
0030B9r 1  4C rr rr      : JMP @camera_cell_changed
0030BCr 1               
0030BCr 1  C9 58         : cmp #X_CHAR ; cell down right
0030BEr 1  D0 0D           BNE :++
0030C0r 1  AD rr rr        LDA camera_cell_y
0030C3r 1  C9 1E           CMP #30
0030C5r 1  B0 03           BCS :+
0030C7r 1  EE rr rr        INC camera_cell_y
0030CAr 1  4C rr rr      : JMP @camera_cell_changed
0030CDr 1               
0030CDr 1  C9 5A         : cmp  #Z_CHAR ; cell down left
0030CFr 1  D0 15           BNE :+++
0030D1r 1  AD rr rr        LDA camera_cell_y
0030D4r 1  C9 1E           CMP #30
0030D6r 1  B0 03           BCS :+
0030D8r 1  EE rr rr        INC camera_cell_y
0030DBr 1  AD rr rr      : LDA camera_cell_x
0030DEr 1  F0 03           BEQ :+
0030E0r 1  CE rr rr        DEC camera_cell_x
0030E3r 1  4C rr rr      : JMP @camera_cell_changed
0030E6r 1               
0030E6r 1  C9 20         : cmp #SPACE;
0030E8r 1  D0 09           BNE :+
0030EAr 1  9C rr rr        STZ camera_cell_xl
0030EDr 1  9C rr rr        STZ camera_cell_yl
0030F0r 1  4C rr rr        JMP @camera_cell_changed
0030F3r 1               
0030F3r 1  C9 00         : cmp #0 ;
0030F5r 1  D0 03           BNE :+
0030F7r 1  4C rr rr        JMP @do_update
0030FAr 1               
0030FAr 1  C9 00         : cmp #0 ;
0030FCr 1  D0 03           BNE :+
0030FEr 1  4C rr rr        JMP @do_update
003101r 1               
003101r 1  C9 00         : cmp #0 ;
003103r 1  D0 03           BNE :+
003105r 1  4C rr rr        JMP @do_update
003108r 1               
003108r 1               
003108r 1  4C rr rr      : JMP @FRAME_CHECK
00310Br 1               
00310Br 1               @cleanup_and_exit:
00310Br 1                  ; restore default IRQ vector
00310Br 1  78              sei
00310Cr 1  AD rr rr        lda default_irq_vector
00310Fr 1  8D 14 03        sta IRQVec
003112r 1  AD rr rr        lda default_irq_vector+1
003115r 1  8D 15 03        sta IRQVec+1
003118r 1  58              cli
003119r 1  20 81 FF        jsr CINT
00311Cr 1  60              rts
00311Dr 1               
00311Dr 1               
00311Dr 1               ; CURRENT
00311Dr 1               push_world_to_object_list: ; as in.. let's try this again?? wait.. missing a STZ ZP_PTR...
00311Dr 1               PWOL_TUB_PTR_AL   = ZP_PTR
00311Dr 1               PWOL_TUB_PTR_AH   = ZP_PTR+1
00311Dr 1               PWOL_TUB_PTR_BL   = ZP_PTR+2
00311Dr 1               PWOL_TUB_PTR_BH   = ZP_PTR+3
00311Dr 1               PWOL_CURRENT_XL   = ZP_PTR+4
00311Dr 1               PWOL_CURRENT_XH   = ZP_PTR+5
00311Dr 1               PWOL_CURRENT_YL   = ZP_PTR+6
00311Dr 1               PWOL_CURRENT_YH   = ZP_PTR+7
00311Dr 1               PWOL_ACROSS_ROW_XL= ZP_PTR+8
00311Dr 1               PWOL_ACROSS_ROW_XH= ZP_PTR+9
00311Dr 1               PWOL_ACROSS_ROW_YL= ZP_PTR+10
00311Dr 1               PWOL_ACROSS_ROW_YH= ZP_PTR+11
00311Dr 1               PWOL_NEXT_ROW_A_LEFT_XL  = ZP_PTR+12
00311Dr 1               PWOL_NEXT_ROW_A_LEFT_XH  = ZP_PTR+13
00311Dr 1               PWOL_NEXT_ROW_A_LEFT_YL  = ZP_PTR+14
00311Dr 1               PWOL_NEXT_ROW_A_LEFT_YH  = ZP_PTR+15
00311Dr 1               PWOL_NEXT_ROW_A_RIGHT_XL  = ZP_PTR+16
00311Dr 1               PWOL_NEXT_ROW_A_RIGHT_XH  = ZP_PTR+17
00311Dr 1               PWOL_NEXT_ROW_A_RIGHT_YL  = ZP_PTR+18
00311Dr 1               PWOL_NEXT_ROW_A_RIGHT_YH  = ZP_PTR+19
00311Dr 1               PWOL_NEXT_ROW_B_LEFT_XL  = ZP_PTR+20
00311Dr 1               PWOL_NEXT_ROW_B_LEFT_XH  = ZP_PTR+21
00311Dr 1               PWOL_NEXT_ROW_B_LEFT_YL  = ZP_PTR+22
00311Dr 1               PWOL_NEXT_ROW_B_LEFT_YH  = ZP_PTR+23
00311Dr 1               PWOL_NEXT_ROW_B_RIGHT_XL  = ZP_PTR+24
00311Dr 1               PWOL_NEXT_ROW_B_RIGHT_XH  = ZP_PTR+25
00311Dr 1               PWOL_NEXT_ROW_B_RIGHT_YL  = ZP_PTR+26
00311Dr 1               PWOL_NEXT_ROW_B_RIGHT_YH  = ZP_PTR+27
00311Dr 1               PWOL_Z_STARTS_PTR = ZP_PTR+28
00311Dr 1               PWOL_Z_STARTS_PTRH = ZP_PTR+29
00311Dr 1               PWOL_CONVERT_HEIGHTS = ZP_PTR+30
00311Dr 1               PWOL_CONVERT_HEIGHTSH= ZP_PTR+31
00311Dr 1               PWOL_CONVERT_HEIGHTS_SECONDARY = ZP_PTR+32
00311Dr 1               PWOL_CONVERT_HEIGHTS_SECONDARYH = ZP_PTR+33
00311Dr 1               PWOL_TRIES_COUNTER = ZP_PTR+34
00311Dr 1               PWOL_START_XL = ZP_PTR+35
00311Dr 1               PWOL_START_YL = ZP_PTR+36
00311Dr 1               PWOL_START_XH = ZP_PTR+37
00311Dr 1               PWOL_START_YH = ZP_PTR+38
00311Dr 1               
00311Dr 1               PWOL_START_COS_XL = ZP_PTR+39
00311Dr 1               PWOL_START_COS_XH = ZP_PTR+40
00311Dr 1               PWOL_START_COS_YL = ZP_PTR+41
00311Dr 1               PWOL_START_COS_YH = ZP_PTR+42
00311Dr 1               PWOL_START_SIN_XL = ZP_PTR+43
00311Dr 1               PWOL_START_SIN_XH = ZP_PTR+44
00311Dr 1               PWOL_START_SIN_YL = ZP_PTR+45
00311Dr 1               PWOL_START_SIN_YH = ZP_PTR+46
00311Dr 1               
00311Dr 1               PWOL_camera_cell_xl = ZP_PTR+47
00311Dr 1               PWOL_camera_cell_yl = ZP_PTR+48
00311Dr 1               
00311Dr 1               TRY_AGAIN = 6
00311Dr 1               SCREEN_MID_X = 108
00311Dr 1               SCREEN_MID_Y =  80
00311Dr 1               SCREEN_OUT_RIGHT  = 164 ; right of middle is 116, +48 = 164
00311Dr 1               SCREEN_OUT_LEFT   =  36 ; left of middle is 100, -48=52-16=36
00311Dr 1               SCREEN_OUT_TOP     = 24
00311Dr 1               SCREEN_OUT_BOTTOM  = 136
00311Dr 1               
00311Dr 1  A9 rr           LDA #>CONVERT_HEIGHTS_PIXELS_SECONDARY
00311Fr 1  85 43           STA PWOL_CONVERT_HEIGHTS_SECONDARYH
003121r 1  A9 rr           LDA #>CONVERT_HEIGHTS_PIXELS
003123r 1  85 41           STA PWOL_CONVERT_HEIGHTSH
003125r 1  A9 rr           LDA #>OBJECT_LIST_Z_START_POINTERS
003127r 1  85 3F           STA PWOL_Z_STARTS_PTRH
003129r 1               
003129r 1  AE rr rr        LDX camera_facing
00312Cr 1               
00312Cr 1               
00312Cr 1  BD rr rr        LDA ACROSS_ROW_X_L,x    ; 0900  16 wide , 45* tilt ... this is added to go up row, sub for down row
00312Fr 1  85 2A           STA PWOL_ACROSS_ROW_XL
003131r 1  BD rr rr        LDA ACROSS_ROW_X_H,x
003134r 1  85 2B           STA PWOL_ACROSS_ROW_XH
003136r 1  BD rr rr        LDA ACROSS_ROW_Y_L,x
003139r 1  85 2C           STA PWOL_ACROSS_ROW_YL
00313Br 1  BD rr rr        LDA ACROSS_ROW_Y_H,x
00313Er 1  85 2D           STA PWOL_ACROSS_ROW_YH
003140r 1               
003140r 1  18              CLC
003141r 1  BD rr rr        LDA NEXT_ROW_X_L,X  ; 0D00 next row LEFT/up when added
003144r 1  85 2E           STA PWOL_NEXT_ROW_A_LEFT_XL   ; -> next row is left, going up the screen ..  -1,-1
003146r 1  65 2A           ADC PWOL_ACROSS_ROW_XL   ; across row is for right , subtract to go left  +1 -> 0,1
003148r 1  85 32           STA PWOL_NEXT_ROW_A_RIGHT_XL  ;  -> next row is right, going up the screen .. -1,-1
00314Ar 1  BD rr rr        LDA NEXT_ROW_X_H,x
00314Dr 1  85 2F           STA PWOL_NEXT_ROW_A_LEFT_XH
00314Fr 1  65 2B           ADC PWOL_ACROSS_ROW_XH
003151r 1  85 33           STA PWOL_NEXT_ROW_A_RIGHT_XH
003153r 1               
003153r 1  18              CLC
003154r 1  BD rr rr        LDA NEXT_ROW_Y_L,X  ; 0F00 next row LEFT/up when added
003157r 1  85 30           STA PWOL_NEXT_ROW_A_LEFT_YL   ; -> next row is left, going up the screen
003159r 1  65 2C           ADC PWOL_ACROSS_ROW_YL   ; across row is for right
00315Br 1  85 34           STA PWOL_NEXT_ROW_A_RIGHT_YL  ;  -> next row is right, going up the screen
00315Dr 1  BD rr rr        LDA NEXT_ROW_Y_H,x
003160r 1  85 31           STA PWOL_NEXT_ROW_A_LEFT_YH
003162r 1  65 2D           ADC PWOL_ACROSS_ROW_YH
003164r 1  85 35           STA PWOL_NEXT_ROW_A_RIGHT_YH
003166r 1               
003166r 1               
003166r 1  BD rr rr        LDA SUBCELL_X_COS_L,X
003169r 1  85 49           STA PWOL_START_COS_XL
00316Br 1  BD rr rr        LDA SUBCELL_X_COS_H,X
00316Er 1  85 4A           STA PWOL_START_COS_XH
003170r 1               
003170r 1  BD rr rr        LDA SUBCELL_X_SIN_L,X
003173r 1  85 4D           STA PWOL_START_SIN_XL
003175r 1  BD rr rr        LDA SUBCELL_X_SIN_H,X
003178r 1  85 4E           STA PWOL_START_SIN_XH
00317Ar 1               
00317Ar 1  BD rr rr        LDA SUBCELL_Y_COS_L,X
00317Dr 1  85 4B           STA PWOL_START_COS_YL
00317Fr 1  BD rr rr        LDA SUBCELL_Y_COS_H,X
003182r 1  85 4C           STA PWOL_START_COS_YH
003184r 1               
003184r 1  BD rr rr        LDA SUBCELL_Y_SIN_L,X
003187r 1  85 4F           STA PWOL_START_SIN_YL
003189r 1  BD rr rr        LDA SUBCELL_Y_SIN_H,X
00318Cr 1  85 50           STA PWOL_START_SIN_YH
00318Er 1               
00318Er 1               ; for zig B , the opposite of left/up is right/down.. so A_LEFT * -1 = B_RIGHT
00318Er 1  38              SEC ; flip A_LEFT X to B_RIGHT X
00318Fr 1  A9 00           LDA #0
003191r 1  E5 2E           SBC PWOL_NEXT_ROW_A_LEFT_XL
003193r 1  85 3A           STA PWOL_NEXT_ROW_B_RIGHT_XL
003195r 1  A9 00           LDA #0
003197r 1  E5 2F           SBC PWOL_NEXT_ROW_A_LEFT_XH
003199r 1  85 3B           STA PWOL_NEXT_ROW_B_RIGHT_XH
00319Br 1               
00319Br 1  38              SEC ; flip A_LEFT Y to B_RIGHT Y
00319Cr 1  A9 00           LDA #0
00319Er 1  E5 30           SBC PWOL_NEXT_ROW_A_LEFT_YL
0031A0r 1  85 3C           STA PWOL_NEXT_ROW_B_RIGHT_YL
0031A2r 1  A9 00           LDA #0
0031A4r 1  E5 31           SBC PWOL_NEXT_ROW_A_LEFT_YH
0031A6r 1  85 3D           STA PWOL_NEXT_ROW_B_RIGHT_YH
0031A8r 1               
0031A8r 1  38              SEC ; flip A_RIGHT X to B_LEFT X
0031A9r 1  A9 00           LDA #0
0031ABr 1  E5 32           SBC PWOL_NEXT_ROW_A_RIGHT_XL
0031ADr 1  85 36           STA PWOL_NEXT_ROW_B_LEFT_XL
0031AFr 1  A9 00           LDA #0
0031B1r 1  E5 33           SBC PWOL_NEXT_ROW_A_RIGHT_XH
0031B3r 1  85 37           STA PWOL_NEXT_ROW_B_LEFT_XH
0031B5r 1               
0031B5r 1  38              SEC ; flip A_RIGHT Y to B_LEFT Y
0031B6r 1  A9 00           LDA #0
0031B8r 1  E5 34           SBC PWOL_NEXT_ROW_A_RIGHT_YL
0031BAr 1  85 38           STA PWOL_NEXT_ROW_B_LEFT_YL
0031BCr 1  A9 00           LDA #0
0031BEr 1  E5 35           SBC PWOL_NEXT_ROW_A_RIGHT_YH
0031C0r 1  85 39           STA PWOL_NEXT_ROW_B_LEFT_YH
0031C2r 1               
0031C2r 1                  ;  set up tub pointer
0031C2r 1  64 22            STZ PWOL_TUB_PTR_AL
0031C4r 1  AD rr rr         LDA camera_cell_y
0031C7r 1  4A               LSR  ;  y pages of 128
0031C8r 1  66 22            ROR PWOL_TUB_PTR_AL
0031CAr 1  4A               LSR  ; y pages of 64 !
0031CBr 1  66 22            ROR PWOL_TUB_PTR_AL
0031CDr 1  09 rr            ORA #>TUB_WORLD
0031CFr 1  85 23            STA PWOL_TUB_PTR_AH
0031D1r 1  85 25            STA PWOL_TUB_PTR_BH
0031D3r 1  A5 22            LDA PWOL_TUB_PTR_AL
0031D5r 1  85 24            STA PWOL_TUB_PTR_BL
0031D7r 1               
0031D7r 1               
0031D7r 1  64 26            STZ PWOL_CURRENT_XL
0031D9r 1  A9 64            LDA #SCREEN_MID_X-8
0031DBr 1  85 27            STA PWOL_CURRENT_XH
0031DDr 1               
0031DDr 1               
0031DDr 1               
0031DDr 1  64 28            STZ PWOL_CURRENT_YL
0031DFr 1  A9 4B            LDA #SCREEN_MID_Y-5
0031E1r 1  85 29            STA PWOL_CURRENT_YH
0031E3r 1               
0031E3r 1               
0031E3r 1  AD rr rr         LDA camera_cell_xl
0031E6r 1               ;    EOR #$FF
0031E6r 1  4A               LSR
0031E7r 1  4A               LSR
0031E8r 1  4A               LSR
0031E9r 1  4A               LSR
0031EAr 1  85 51            STA PWOL_camera_cell_xl
0031ECr 1  AD rr rr         LDA camera_cell_yl
0031EFr 1                ;   EOR #$FF
0031EFr 1  4A               LSR
0031F0r 1  4A               LSR
0031F1r 1  4A               LSR
0031F2r 1  4A               LSR
0031F3r 1  85 52            STA PWOL_camera_cell_yl
0031F5r 1               
0031F5r 1                     ; startX - COS * X - SIN Y
0031F5r 1                     ; startY- SIN * X + COS Y
0031F5r 1  A2 04            LDX #4
0031F7r 1  46 51           : LSR PWOL_camera_cell_xl ; StartX - needs cosX*X , startY = SINY*X
0031F9r 1  90 18             BCC :+ ; digit?
0031FBr 1  A5 26             LDA PWOL_CURRENT_XL   ;  X = - COS*X
0031FDr 1  65 49             ADC PWOL_START_COS_XL
0031FFr 1  85 26             STA PWOL_CURRENT_XL
003201r 1  A5 27             LDA PWOL_CURRENT_XH
003203r 1  65 4A             ADC PWOL_START_COS_XH
003205r 1  85 27             STA PWOL_CURRENT_XH
003207r 1  A5 28             LDA PWOL_CURRENT_YL   ;  Y = - SINY X
003209r 1  E5 4F             SBC PWOL_START_SIN_YL
00320Br 1  85 28             STA PWOL_CURRENT_YL
00320Dr 1  A5 29             LDA PWOL_CURRENT_YH
00320Fr 1  E5 50             SBC PWOL_START_SIN_YH
003211r 1  85 29             STA PWOL_CURRENT_YH
003213r 1                  : ; skip the X digit..
003213r 1  06 49             ASL PWOL_START_COS_XL
003215r 1  26 4A             ROL PWOL_START_COS_XH
003217r 1  06 4F             ASL PWOL_START_SIN_YL
003219r 1  26 50             ROL PWOL_START_SIN_YH
00321Br 1               
00321Br 1  46 52             LSR PWOL_camera_cell_yl ; StartX - needs sinX*Y, startY needs COSY*Y
00321Dr 1  90 18             BCC :+
00321Fr 1  A5 26             LDA PWOL_CURRENT_XL
003221r 1  E5 4D             SBC PWOL_START_SIN_XL
003223r 1  85 26             STA PWOL_CURRENT_XL
003225r 1  A5 27             LDA PWOL_CURRENT_XH
003227r 1  E5 4E             SBC PWOL_START_SIN_XH
003229r 1  85 27             STA PWOL_CURRENT_XH
00322Br 1  A5 28             LDA PWOL_CURRENT_YL
00322Dr 1  E5 4B             SBC PWOL_START_COS_YL
00322Fr 1  85 28             STA PWOL_CURRENT_YL
003231r 1  A5 29             LDA PWOL_CURRENT_YH
003233r 1  E5 4C             SBC PWOL_START_COS_YH
003235r 1  85 29             STA PWOL_CURRENT_YH
003237r 1                  : ; skip y digit.. do shit
003237r 1  06 4D             ASL PWOL_START_SIN_XL
003239r 1  26 4E             ROL PWOL_START_SIN_XH
00323Br 1  06 4B             ASL PWOL_START_COS_YL
00323Dr 1  26 4C             ROL PWOL_START_COS_YH
00323Fr 1               
00323Fr 1  CA                DEX
003240r 1  D0 B5             BNE :--- ; back to start of loop ..
003242r 1               
003242r 1               
003242r 1               
003242r 1  A5 26            LDA PWOL_CURRENT_XL
003244r 1  85 45            STA PWOL_START_XL
003246r 1  A5 27            LDA PWOL_CURRENT_XH
003248r 1  85 47            STA PWOL_START_XH
00324Ar 1               
00324Ar 1  A5 28            LDA PWOL_CURRENT_YL
00324Cr 1  85 46            STA PWOL_START_YL
00324Er 1  A5 29            LDA PWOL_CURRENT_YH
003250r 1  85 48            STA PWOL_START_YH
003252r 1               
003252r 1                 @zigzag_A: ; going to right and up the screen, including where we are currently..
003252r 1  AC rr rr           LDY camera_cell_x   ;  eh voila! we haz pointer to ze row to start on .. woot!
003255r 1                   @zigzag_A_right:
003255r 1  C0 40                CPY #64  ;  make sure we don't go outside level..
003257r 1  B0 44                BCS @ZAR_NEXT ; if we're outside we'll just skip is OK here
003259r 1  B1 22                LDA (PWOL_TUB_PTR_AL),y
00325Br 1  C9 81                CMP #129
00325Dr 1  B0 3E                BCS @ZAR_NEXT ; this isn't a valid spot in the level map..
00325Fr 1               
00325Fr 1                       ; bytes 1 and 4 were updated when we cleared the object list
00325Fr 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
003262r 1  D0 04                BNE :++
003264r 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
003267r 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
003268r 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
00326Ar 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
00326Dr 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen...
00326Fr 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
003271r 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
003273r 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
003276r 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
003279r 1  8A                   TXA ; push new next to the Z buffer spot
00327Ar 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
00327Cr 1                       ; bytes .1..4.6 filled in already..
00327Cr 1               
00327Cr 1  9E rr rr             STZ OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway..
00327Fr 1  B1 22                LDA (PWOL_TUB_PTR_AL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
003281r 1  10 03                BPL @ZAR_INSIDE_TUB
003283r 1                     @ZAR_HIT_WALL_OUCH:
003283r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
003286r 1                     @ZAR_INSIDE_TUB:
003286r 1  85 40                  STA PWOL_CONVERT_HEIGHTS; 0-128 valid as heights need convert to do sub though?
003288r 1                         ;STA PWOL_CONVERT_HEIGHTS_SECONDARY ; this would be check to see if we're "extra tall" - wall is set to 128, 26 pixels smaller than would be..
003288r 1  98                     TYA
003289r 1  29 0F                  AND #$0F
00328Br 1  09 D0                  ORA #$D0 ; #$D0
00328Dr 1  9D rr rr               STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
003290r 1               
003290r 1  38                     SEC
003291r 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
003293r 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
003295r 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
003298r 1                         ;LDA #$D0
003298r 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
003298r 1  A5 27                  LDA PWOL_CURRENT_XH
00329Ar 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
00329Dr 1                    @ZAR_NEXT:
00329Dr 1                        ; calc next to the right..
00329Dr 1  C8                    INY
00329Er 1  18                    CLC
00329Fr 1  A5 26                 LDA PWOL_CURRENT_XL
0032A1r 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
0032A3r 1  85 26                 STA PWOL_CURRENT_XL
0032A5r 1  A5 27                 LDA PWOL_CURRENT_XH
0032A7r 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
0032A9r 1  85 27                 STA PWOL_CURRENT_XH
0032ABr 1  AA                    TAX
0032ACr 1  18                    CLC
0032ADr 1  A5 28                 LDA PWOL_CURRENT_YL
0032AFr 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
0032B1r 1  85 28                 STA PWOL_CURRENT_YL
0032B3r 1  A5 29                 LDA PWOL_CURRENT_YH
0032B5r 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
0032B7r 1  85 29                 STA PWOL_CURRENT_YH
0032B9r 1               
0032B9r 1  8E rr rr              STX DEBUG_A
0032BCr 1  8D rr rr              STA DEBUG_B
0032BFr 1               
0032BFr 1  E0 A4                 CPX #SCREEN_OUT_RIGHT
0032C1r 1  B0 0C                 BCS @ZAR_ZIG_LEFT_SWITCH
0032C3r 1  E0 24                 CPX #SCREEN_OUT_LEFT
0032C5r 1  90 08                 BCC @ZAR_ZIG_LEFT_SWITCH
0032C7r 1  C9 18                 CMP #SCREEN_OUT_TOP
0032C9r 1  90 04                 BCC @ZAR_ZIG_LEFT_SWITCH
0032CBr 1  C9 88                 CMP #SCREEN_OUT_BOTTOM
0032CDr 1  90 86                 BCC @zigzag_A_right
0032CFr 1                    @ZAR_ZIG_LEFT_SWITCH: ;PWOL_NEXT_ROW_A_LEFT_XL   ; -> next row is left, going up the screen ..  +0,-1
0032CFr 1  A9 06                 LDA #TRY_AGAIN
0032D1r 1  85 44                 STA PWOL_TRIES_COUNTER
0032D3r 1  C8                    INY
0032D4r 1  38                    SEC
0032D5r 1  A5 22                 LDA PWOL_TUB_PTR_AL
0032D7r 1  E9 40                 SBC #64 ;   0,-1
0032D9r 1  85 22                 STA PWOL_TUB_PTR_AL
0032DBr 1  A5 23                 LDA PWOL_TUB_PTR_AH
0032DDr 1  E9 00                 SBC #0
0032DFr 1  C9 rr                 CMP #>TUB_WORLD ; are we inside the world still?
0032E1r 1  B0 03                 BCS :+
0032E3r 1  4C rr rr              JMP @zigzag_B
0032E6r 1  85 23               : STA PWOL_TUB_PTR_AH
0032E8r 1               
0032E8r 1  18                    CLC
0032E9r 1  A5 26                 LDA PWOL_CURRENT_XL
0032EBr 1  65 2E                 ADC PWOL_NEXT_ROW_A_LEFT_XL
0032EDr 1  85 26                 STA PWOL_CURRENT_XL
0032EFr 1  A5 27                 LDA PWOL_CURRENT_XH
0032F1r 1  65 2F                 ADC PWOL_NEXT_ROW_A_LEFT_XH
0032F3r 1  85 27                 STA PWOL_CURRENT_XH
0032F5r 1  AA                    TAX
0032F6r 1  18                    CLC
0032F7r 1  A5 28                 LDA PWOL_CURRENT_YL
0032F9r 1  65 30                 ADC PWOL_NEXT_ROW_A_LEFT_YL
0032FBr 1  85 28                 STA PWOL_CURRENT_YL
0032FDr 1  A5 29                 LDA PWOL_CURRENT_YH
0032FFr 1  65 31                 ADC PWOL_NEXT_ROW_A_LEFT_YH
003301r 1  85 29                 STA PWOL_CURRENT_YH
003303r 1                        ; check if we're outside ..
003303r 1               
003303r 1  E0 A4                 CPX #SCREEN_OUT_RIGHT
003305r 1  B0 0C                 BCS @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
003307r 1  E0 24                 CPX #SCREEN_OUT_LEFT
003309r 1  90 08                 BCC @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
00330Br 1  C9 18                 CMP #SCREEN_OUT_TOP
00330Dr 1  90 04                 BCC @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
00330Fr 1  C9 88                 CMP #SCREEN_OUT_BOTTOM
003311r 1  90 33                 BCC @zigzag_A_left
003313r 1                  @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN:
003313r 1  C6 44                 DEC PWOL_TRIES_COUNTER
003315r 1  D0 03                 BNE @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT
003317r 1  4C rr rr              JMP @zigzag_B
00331Ar 1                  @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT:
00331Ar 1  88                    DEY
00331Br 1  38                    SEC
00331Cr 1  A5 26                 LDA PWOL_CURRENT_XL
00331Er 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
003320r 1  85 26                 STA PWOL_CURRENT_XL
003322r 1  A5 27                 LDA PWOL_CURRENT_XH
003324r 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
003326r 1  85 27                 STA PWOL_CURRENT_XH
003328r 1  AA                    TAX
003329r 1  38                    SEC
00332Ar 1  A5 28                 LDA PWOL_CURRENT_YL
00332Cr 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
00332Er 1  85 28                 STA PWOL_CURRENT_YL
003330r 1  A5 29                 LDA PWOL_CURRENT_YH
003332r 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
003334r 1  85 29                 STA PWOL_CURRENT_YH
003336r 1  E0 A4                 CPX #SCREEN_OUT_RIGHT
003338r 1  B0 D9                 BCS @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
00333Ar 1  E0 24                 CPX #SCREEN_OUT_LEFT
00333Cr 1  90 D5                 BCC @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
00333Er 1  C9 18                 CMP #SCREEN_OUT_TOP
003340r 1  90 D1                 BCC @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
003342r 1  C9 88                 CMP #SCREEN_OUT_BOTTOM
003344r 1  B0 CD                 BCS @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
003346r 1                  @zigzag_A_left:
003346r 1  C0 40                CPY #64  ;  make sure we don't go outside level..
003348r 1  B0 44                BCS @ZAL_NEXT ; if we're outside we'll just skip is OK
00334Ar 1  B1 22                LDA (PWOL_TUB_PTR_AL),y
00334Cr 1  C9 81                CMP #129
00334Er 1  B0 3E                BCS @ZAL_NEXT ; we're outside level.
003350r 1               
003350r 1                       ; bytes 1 and 4 were updated when we cleared the object list
003350r 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
003353r 1  D0 04                BNE :++
003355r 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
003358r 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
003359r 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
00335Br 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
00335Er 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen...
003360r 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
003362r 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
003364r 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
003367r 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
00336Ar 1  8A                   TXA ; push new next to the Z buffer spot
00336Br 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
00336Dr 1                       ; bytes .1..4.6 filled in already..
00336Dr 1               
00336Dr 1  9E rr rr             STZ OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway..
003370r 1  B1 22                LDA (PWOL_TUB_PTR_AL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
003372r 1  10 03                BPL @ZAL_INSIDE_TUB
003374r 1                     @ZAL_HIT_WALL_OUCH:
003374r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
003377r 1                     @ZAL_INSIDE_TUB:
003377r 1                         ;STA PWOL_CONVERT_HEIGHTS_SECONDARY ; this would be check to see if we're "extra tall" - wall is set to 128, 26 pixels smaller than would be..
003377r 1  85 40                  STA PWOL_CONVERT_HEIGHTS; 0-128 valid as heights need convert to do sub though?
003379r 1  98                     TYA
00337Ar 1  29 0F                  AND #$0F
00337Cr 1  09 D0                  ORA #$D0 ; #$D0
00337Er 1  9D rr rr               STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
003381r 1               
003381r 1  38                     SEC
003382r 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
003384r 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
003386r 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
003389r 1                       ;  LDA #$D0
003389r 1                       ;  STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
003389r 1  A5 27                  LDA PWOL_CURRENT_XH
00338Br 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
00338Er 1                    @ZAL_NEXT:
00338Er 1                        ; calc next to the LEFT
00338Er 1  88                    DEY
00338Fr 1  38                    SEC
003390r 1  A5 26                 LDA PWOL_CURRENT_XL
003392r 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
003394r 1  85 26                 STA PWOL_CURRENT_XL
003396r 1  A5 27                 LDA PWOL_CURRENT_XH
003398r 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
00339Ar 1  85 27                 STA PWOL_CURRENT_XH
00339Cr 1  AA                    TAX
00339Dr 1  38                    SEC
00339Er 1  A5 28                 LDA PWOL_CURRENT_YL
0033A0r 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
0033A2r 1  85 28                 STA PWOL_CURRENT_YL
0033A4r 1  A5 29                 LDA PWOL_CURRENT_YH
0033A6r 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
0033A8r 1  85 29                 STA PWOL_CURRENT_YH
0033AAr 1               
0033AAr 1  8E rr rr              STX DEBUG_A
0033ADr 1  8D rr rr              STA DEBUG_B
0033B0r 1               
0033B0r 1  E0 A4                 CPX #SCREEN_OUT_RIGHT
0033B2r 1  B0 0C                 BCS @ZAL_ZIG_RIGHT_SWITCH
0033B4r 1  E0 24                 CPX #SCREEN_OUT_LEFT
0033B6r 1  90 08                 BCC @ZAL_ZIG_RIGHT_SWITCH
0033B8r 1  C9 18                 CMP #SCREEN_OUT_TOP
0033BAr 1  90 04                 BCC @ZAL_ZIG_RIGHT_SWITCH
0033BCr 1  C9 88                 CMP #SCREEN_OUT_BOTTOM
0033BEr 1  90 86                 BCC @zigzag_A_left
0033C0r 1                    @ZAL_ZIG_RIGHT_SWITCH: ; up/right is +1,+1  from where we is right now ..
0033C0r 1  A9 06                 LDA #TRY_AGAIN
0033C2r 1  85 44                 STA PWOL_TRIES_COUNTER
0033C4r 1  C8                    INY
0033C5r 1  38                    SEC
0033C6r 1  A5 22                 LDA PWOL_TUB_PTR_AL
0033C8r 1  E9 40                 SBC #64
0033CAr 1  85 22                 STA PWOL_TUB_PTR_AL
0033CCr 1  A5 23                 LDA PWOL_TUB_PTR_AH
0033CEr 1  E9 00                 SBC #0
0033D0r 1  C9 rr                 CMP #>TUB_WORLD ; are we inside the world still?
0033D2r 1  B0 03                 BCS :+
0033D4r 1  4C rr rr              JMP @zigzag_B
0033D7r 1  85 23               : STA PWOL_TUB_PTR_AH
0033D9r 1               
0033D9r 1               
0033D9r 1  18                    CLC
0033DAr 1               
0033DAr 1  A5 26                 LDA PWOL_CURRENT_XL
0033DCr 1  65 32                 ADC PWOL_NEXT_ROW_A_RIGHT_XL
0033DEr 1  85 26                 STA PWOL_CURRENT_XL
0033E0r 1               
0033E0r 1  A5 27                 LDA PWOL_CURRENT_XH
0033E2r 1  65 33                 ADC PWOL_NEXT_ROW_A_RIGHT_XH
0033E4r 1  85 27                 STA PWOL_CURRENT_XH
0033E6r 1  AA                    TAX
0033E7r 1               
0033E7r 1               
0033E7r 1  18                    CLC
0033E8r 1  A5 28                 LDA PWOL_CURRENT_YL
0033EAr 1  65 34                 ADC PWOL_NEXT_ROW_A_RIGHT_YL
0033ECr 1  85 28                 STA PWOL_CURRENT_YL
0033EEr 1  A5 29                 LDA PWOL_CURRENT_YH
0033F0r 1  65 35                 ADC PWOL_NEXT_ROW_A_RIGHT_YH
0033F2r 1  85 29                 STA PWOL_CURRENT_YH
0033F4r 1               
0033F4r 1  E0 A4                 CPX #SCREEN_OUT_RIGHT
0033F6r 1  B0 0F                 BCS @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
0033F8r 1  E0 24                 CPX #SCREEN_OUT_LEFT
0033FAr 1  90 0B                 BCC @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
0033FCr 1  C9 18                 CMP #SCREEN_OUT_TOP
0033FEr 1  90 07                 BCC @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003400r 1  C9 88                 CMP #SCREEN_OUT_BOTTOM
003402r 1  B0 03                 BCS @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003404r 1  4C rr rr              JMP @zigzag_A_right
003407r 1                  @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN:
003407r 1  C6 44                 DEC PWOL_TRIES_COUNTER
003409r 1  F0 2F                 BEQ @zigzag_B
00340Br 1                  @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN_GO_RIGHT:
00340Br 1  C8                    INY
00340Cr 1  18                    CLC
00340Dr 1  A5 26                 LDA PWOL_CURRENT_XL
00340Fr 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
003411r 1  85 26                 STA PWOL_CURRENT_XL
003413r 1  A5 27                 LDA PWOL_CURRENT_XH
003415r 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
003417r 1  85 27                 STA PWOL_CURRENT_XH
003419r 1  AA                    TAX
00341Ar 1  18                    CLC
00341Br 1  A5 28                 LDA PWOL_CURRENT_YL
00341Dr 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
00341Fr 1  85 28                 STA PWOL_CURRENT_YL
003421r 1  A5 29                 LDA PWOL_CURRENT_YH
003423r 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
003425r 1  85 29                 STA PWOL_CURRENT_YH
003427r 1               
003427r 1  E0 A4                 CPX #SCREEN_OUT_RIGHT
003429r 1  B0 DC                 BCS @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
00342Br 1  E0 24                 CPX #SCREEN_OUT_LEFT
00342Dr 1  90 D8                 BCC @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
00342Fr 1  C9 18                 CMP #SCREEN_OUT_TOP
003431r 1  90 D4                 BCC @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003433r 1  C9 88                 CMP #SCREEN_OUT_BOTTOM
003435r 1  B0 D0                 BCS @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003437r 1  4C rr rr              JMP @zigzag_A_right
00343Ar 1               
00343Ar 1               
00343Ar 1               
00343Ar 1                 @zigzag_B: ; going to left and down the screen, including where we are currently..
00343Ar 1  60                 RTS
00343Br 1  38                 SEC
00343Cr 1  A5 45              LDA PWOL_START_XL
00343Er 1  E5 2A              SBC PWOL_ACROSS_ROW_XL
003440r 1  85 26              STA PWOL_CURRENT_XL
003442r 1  A5 47              LDA PWOL_START_XH
003444r 1  E5 2B              SBC PWOL_ACROSS_ROW_XH
003446r 1  85 27              STA PWOL_CURRENT_XH
003448r 1               
003448r 1               
003448r 1  38                 SEC
003449r 1  A5 46              LDA PWOL_START_YL
00344Br 1  E5 2C              SBC PWOL_ACROSS_ROW_YL
00344Dr 1  85 28              STA PWOL_CURRENT_YL
00344Fr 1  A5 48              LDA PWOL_START_YH
003451r 1  E5 2D              SBC PWOL_ACROSS_ROW_YH
003453r 1  85 29              STA PWOL_CURRENT_YH
003455r 1               
003455r 1  AC rr rr           LDY camera_cell_x   ;  eh voila! we haz pointer to ze row to start on .. woot!
003458r 1  88                 DEY ; start left
003459r 1               
003459r 1                  @zigzag_B_left:
003459r 1  C0 40                CPY #64  ;  make sure we don't go outside level..
00345Br 1  B0 44                BCS @ZBL_NEXT ; if we're outside we'll just skip is OK
00345Dr 1  B1 24                LDA (PWOL_TUB_PTR_BL),y
00345Fr 1  C9 81                CMP #129
003461r 1  B0 3E                BCS @ZBL_NEXT ; we're outside level.
003463r 1               
003463r 1                       ; bytes 1 and 4 were updated when we cleared the object list
003463r 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
003466r 1  D0 04                BNE :++
003468r 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
00346Br 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
00346Cr 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
00346Er 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
003471r 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen...
003473r 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
003475r 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
003477r 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
00347Ar 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
00347Dr 1  8A                   TXA ; push new next to the Z buffer spot
00347Er 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
003480r 1                       ; bytes .1..4.6 filled in already..
003480r 1               
003480r 1  9E rr rr             STZ OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway..
003483r 1  B1 24                LDA (PWOL_TUB_PTR_BL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
003485r 1  10 03                BPL @ZBL_INSIDE_TUB
003487r 1                     @ZBL_HIT_WALL_OUCH:
003487r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
00348Ar 1                     @ZBL_INSIDE_TUB:
00348Ar 1  85 40                  STA PWOL_CONVERT_HEIGHTS; 0-128 valid as heights need convert to do sub though?
00348Cr 1                         ;STA PWOL_CONVERT_HEIGHTS_SECONDARY ; this would be check to see if we're "extra tall" - wall is set to 128, 26 pixels smaller than would be..
00348Cr 1  98                     TYA
00348Dr 1  29 0F                  AND #$0F
00348Fr 1  09 D0                  ORA #$D0 ; #$D0
003491r 1  9D rr rr               STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
003494r 1               
003494r 1  38                     SEC
003495r 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
003497r 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
003499r 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
00349Cr 1                       ;  LDA #$D0
00349Cr 1                       ;  STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
00349Cr 1  A5 27                  LDA PWOL_CURRENT_XH
00349Er 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
0034A1r 1                    @ZBL_NEXT:
0034A1r 1                        ; calc next to the LEFT
0034A1r 1  88                    DEY
0034A2r 1  38                    SEC
0034A3r 1  A5 26                 LDA PWOL_CURRENT_XL
0034A5r 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
0034A7r 1  85 26                 STA PWOL_CURRENT_XL
0034A9r 1  A5 27                 LDA PWOL_CURRENT_XH
0034ABr 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
0034ADr 1  85 27                 STA PWOL_CURRENT_XH
0034AFr 1  AA                    TAX
0034B0r 1  38                    SEC
0034B1r 1  A5 28                 LDA PWOL_CURRENT_YL
0034B3r 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
0034B5r 1  85 28                 STA PWOL_CURRENT_YL
0034B7r 1  A5 29                 LDA PWOL_CURRENT_YH
0034B9r 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
0034BBr 1  85 29                 STA PWOL_CURRENT_YH
0034BDr 1               
0034BDr 1  8E rr rr              STX DEBUG_A
0034C0r 1  8D rr rr              STA DEBUG_B
0034C3r 1               
0034C3r 1  E0 A4                 CPX #SCREEN_OUT_RIGHT
0034C5r 1  B0 0C                 BCS @ZBL_ZIG_RIGHT_SWITCH
0034C7r 1  E0 24                 CPX #SCREEN_OUT_LEFT
0034C9r 1  90 08                 BCC @ZBL_ZIG_RIGHT_SWITCH
0034CBr 1  C9 18                 CMP #SCREEN_OUT_TOP
0034CDr 1  90 04                 BCC @ZBL_ZIG_RIGHT_SWITCH
0034CFr 1  C9 88                 CMP #SCREEN_OUT_BOTTOM
0034D1r 1  90 86                 BCC @zigzag_B_left
0034D3r 1                    @ZBL_ZIG_RIGHT_SWITCH: ; DOWN/LEFT to start right is is 0,+1  from where we is right now ..
0034D3r 1  C8                    INY
0034D4r 1  A9 06                 LDA #TRY_AGAIN
0034D6r 1  85 44                 STA PWOL_TRIES_COUNTER
0034D8r 1  18                    CLC
0034D9r 1  A5 24                 LDA PWOL_TUB_PTR_BL
0034DBr 1  69 40                 ADC #64
0034DDr 1  85 24                 STA PWOL_TUB_PTR_BL
0034DFr 1  A5 25                 LDA PWOL_TUB_PTR_BH
0034E1r 1  69 00                 ADC #0
0034E3r 1  85 25                 STA PWOL_TUB_PTR_BH
0034E5r 1               
0034E5r 1               
0034E5r 1  18                    CLC
0034E6r 1               
0034E6r 1  A5 26                 LDA PWOL_CURRENT_XL
0034E8r 1  65 3A                 ADC PWOL_NEXT_ROW_B_RIGHT_XL
0034EAr 1  85 26                 STA PWOL_CURRENT_XL
0034ECr 1               
0034ECr 1  A5 27                 LDA PWOL_CURRENT_XH
0034EEr 1  65 3B                 ADC PWOL_NEXT_ROW_B_RIGHT_XH
0034F0r 1  85 27                 STA PWOL_CURRENT_XH
0034F2r 1  AA                    TAX
0034F3r 1               
0034F3r 1               
0034F3r 1  18                    CLC
0034F4r 1  A5 28                 LDA PWOL_CURRENT_YL
0034F6r 1  65 3C                 ADC PWOL_NEXT_ROW_B_RIGHT_YL
0034F8r 1  85 28                 STA PWOL_CURRENT_YL
0034FAr 1  A5 29                 LDA PWOL_CURRENT_YH
0034FCr 1  65 3D                 ADC PWOL_NEXT_ROW_B_RIGHT_YH
0034FEr 1  85 29                 STA PWOL_CURRENT_YH
003500r 1               
003500r 1  E0 A4                 CPX #SCREEN_OUT_RIGHT
003502r 1  B0 0F                 BCS @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003504r 1  E0 24                 CPX #SCREEN_OUT_LEFT
003506r 1  90 0B                 BCC @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003508r 1  C9 18                 CMP #SCREEN_OUT_TOP
00350Ar 1  90 07                 BCC @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
00350Cr 1  C9 88                 CMP #SCREEN_OUT_BOTTOM
00350Er 1  B0 03                 BCS @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003510r 1  4C rr rr              JMP @zigzag_B_right
003513r 1                  @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN:
003513r 1  C6 44                 DEC PWOL_TRIES_COUNTER
003515r 1  D0 01                 BNE @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN_GO_RIGHT
003517r 1                  @ZBL_RTS:
003517r 1  60                 rts
003518r 1                  @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN_GO_RIGHT:
003518r 1  C8                    INY
003519r 1  18                    CLC
00351Ar 1  A5 26                 LDA PWOL_CURRENT_XL
00351Cr 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
00351Er 1  85 26                 STA PWOL_CURRENT_XL
003520r 1  A5 27                 LDA PWOL_CURRENT_XH
003522r 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
003524r 1  85 27                 STA PWOL_CURRENT_XH
003526r 1  AA                    TAX
003527r 1  18                    CLC
003528r 1  A5 28                 LDA PWOL_CURRENT_YL
00352Ar 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
00352Cr 1  85 28                 STA PWOL_CURRENT_YL
00352Er 1  A5 29                 LDA PWOL_CURRENT_YH
003530r 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
003532r 1  85 29                 STA PWOL_CURRENT_YH
003534r 1               
003534r 1  E0 A4                 CPX #SCREEN_OUT_RIGHT
003536r 1  B0 DB                 BCS @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003538r 1  E0 24                 CPX #SCREEN_OUT_LEFT
00353Ar 1  90 D7                 BCC @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
00353Cr 1  C9 18                 CMP #SCREEN_OUT_TOP
00353Er 1  90 D3                 BCC @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003540r 1  C9 88                 CMP #SCREEN_OUT_BOTTOM
003542r 1  B0 CF                 BCS @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003544r 1               
003544r 1                   @zigzag_B_right:
003544r 1  C0 40                CPY #64  ;  make sure we don't go outside level..
003546r 1  B0 44                BCS @ZBR_NEXT ; if we're outside we'll just skip is OK
003548r 1  B1 24                LDA (PWOL_TUB_PTR_BL),y
00354Ar 1  C9 81                CMP #129
00354Cr 1  B0 3E                BCS @ZBR_NEXT ; we're outside level.
00354Er 1               
00354Er 1                       ; bytes 1 and 4 were updated when we cleared the object list
00354Er 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
003551r 1  D0 04                BNE :++
003553r 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
003556r 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
003557r 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
003559r 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
00355Cr 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen...
00355Er 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
003560r 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
003562r 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
003565r 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
003568r 1  8A                   TXA ; push new next to the Z buffer spot
003569r 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
00356Br 1                       ; bytes .1..4.6 filled in already..
00356Br 1               
00356Br 1  9E rr rr             STZ OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway..
00356Er 1  B1 24                LDA (PWOL_TUB_PTR_BL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
003570r 1  10 03                BPL @ZBR_INSIDE_TUB
003572r 1                     @ZBR_HIT_WALL_OUCH:
003572r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
003575r 1                     @ZBR_INSIDE_TUB:
003575r 1  85 40                  STA PWOL_CONVERT_HEIGHTS; 0-128 valid as heights need convert to do sub though?
003577r 1                         ;STA PWOL_CONVERT_HEIGHTS_SECONDARY ; this would be check to see if we're "extra tall" - wall is set to 128, 26 pixels smaller than would be..
003577r 1  98                     TYA
003578r 1  29 0F                  AND #$0F
00357Ar 1  09 D0                  ORA #$D0 ; #$D0
00357Cr 1  9D rr rr               STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
00357Fr 1               
00357Fr 1  38                     SEC
003580r 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
003582r 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
003584r 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
003587r 1                         ;LDA #$D0
003587r 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
003587r 1  A5 27                  LDA PWOL_CURRENT_XH
003589r 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
00358Cr 1                    @ZBR_NEXT:
00358Cr 1                        ; calc next to the right..
00358Cr 1  C8                    INY
00358Dr 1  18                    CLC
00358Er 1  A5 26                 LDA PWOL_CURRENT_XL
003590r 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
003592r 1  85 26                 STA PWOL_CURRENT_XL
003594r 1  A5 27                 LDA PWOL_CURRENT_XH
003596r 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
003598r 1  85 27                 STA PWOL_CURRENT_XH
00359Ar 1  AA                    TAX
00359Br 1  18                    CLC
00359Cr 1  A5 28                 LDA PWOL_CURRENT_YL
00359Er 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
0035A0r 1  85 28                 STA PWOL_CURRENT_YL
0035A2r 1  A5 29                 LDA PWOL_CURRENT_YH
0035A4r 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
0035A6r 1  85 29                 STA PWOL_CURRENT_YH
0035A8r 1               
0035A8r 1  8E rr rr              STX DEBUG_A
0035ABr 1  8D rr rr              STA DEBUG_B
0035AEr 1               
0035AEr 1  E0 A4                 CPX #SCREEN_OUT_RIGHT
0035B0r 1  B0 0C                 BCS @ZBR_ZIG_LEFT_SWITCH
0035B2r 1  E0 24                 CPX #SCREEN_OUT_LEFT
0035B4r 1  90 08                 BCC @ZBR_ZIG_LEFT_SWITCH
0035B6r 1  C9 18                 CMP #SCREEN_OUT_TOP
0035B8r 1  90 04                 BCC @ZBR_ZIG_LEFT_SWITCH
0035BAr 1  C9 88                 CMP #SCREEN_OUT_BOTTOM
0035BCr 1  90 86                 BCC @zigzag_B_right
0035BEr 1                    @ZBR_ZIG_LEFT_SWITCH: ;PWOL_NEXT_ROW_A_LEFT_XL   ; -> next row is left, going down the screen ..  +1,+1
0035BEr 1  A9 06                 LDA #TRY_AGAIN
0035C0r 1  85 44                 STA PWOL_TRIES_COUNTER
0035C2r 1               ;        INY ; have to go this to match where the thing is going .. 0,0
0035C2r 1  18                    CLC
0035C3r 1  A5 24                 LDA PWOL_TUB_PTR_BL
0035C5r 1  69 40                 ADC #64 ;   0,-1
0035C7r 1  85 24                 STA PWOL_TUB_PTR_BL
0035C9r 1  A5 25                 LDA PWOL_TUB_PTR_BH
0035CBr 1  69 00                 ADC #0
0035CDr 1  85 25                 STA PWOL_TUB_PTR_BH
0035CFr 1               
0035CFr 1  18                    CLC
0035D0r 1  A5 26                 LDA PWOL_CURRENT_XL
0035D2r 1  65 36                 ADC PWOL_NEXT_ROW_B_LEFT_XL
0035D4r 1  85 26                 STA PWOL_CURRENT_XL
0035D6r 1  A5 27                 LDA PWOL_CURRENT_XH
0035D8r 1  65 37                 ADC PWOL_NEXT_ROW_B_LEFT_XH
0035DAr 1  85 27                 STA PWOL_CURRENT_XH
0035DCr 1  AA                    TAX
0035DDr 1  18                    CLC
0035DEr 1  A5 28                 LDA PWOL_CURRENT_YL
0035E0r 1  65 38                 ADC PWOL_NEXT_ROW_B_LEFT_YL
0035E2r 1  85 28                 STA PWOL_CURRENT_YL
0035E4r 1  A5 29                 LDA PWOL_CURRENT_YH
0035E6r 1  65 39                 ADC PWOL_NEXT_ROW_B_LEFT_YH
0035E8r 1  85 29                 STA PWOL_CURRENT_YH
0035EAr 1                        ; check if we're outside ..
0035EAr 1               
0035EAr 1  E0 A4                 CPX #SCREEN_OUT_RIGHT
0035ECr 1  B0 0F                 BCS @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
0035EEr 1  E0 24                 CPX #SCREEN_OUT_LEFT
0035F0r 1  90 0B                 BCC @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
0035F2r 1  C9 18                 CMP #SCREEN_OUT_TOP
0035F4r 1  90 07                 BCC @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
0035F6r 1  C9 88                 CMP #SCREEN_OUT_BOTTOM
0035F8r 1  B0 03                 BCS @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
0035FAr 1  4C rr rr              jmp @zigzag_B_left
0035FDr 1                  @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN:
0035FDr 1  C6 44                 DEC PWOL_TRIES_COUNTER
0035FFr 1  D0 01                 BNE @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT
003601r 1                  @ZBR_RTS:
003601r 1  60                    rts
003602r 1                  @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT:
003602r 1  88                    DEY
003603r 1  38                    SEC
003604r 1  A5 26                 LDA PWOL_CURRENT_XL
003606r 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
003608r 1  85 26                 STA PWOL_CURRENT_XL
00360Ar 1  A5 27                 LDA PWOL_CURRENT_XH
00360Cr 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
00360Er 1  85 27                 STA PWOL_CURRENT_XH
003610r 1  AA                    TAX
003611r 1  38                    SEC
003612r 1  A5 28                 LDA PWOL_CURRENT_YL
003614r 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
003616r 1  85 28                 STA PWOL_CURRENT_YL
003618r 1  A5 29                 LDA PWOL_CURRENT_YH
00361Ar 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
00361Cr 1  85 29                 STA PWOL_CURRENT_YH
00361Er 1  E0 A4                 CPX #SCREEN_OUT_RIGHT
003620r 1  B0 DB                 BCS @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
003622r 1  E0 24                 CPX #SCREEN_OUT_LEFT
003624r 1  90 D7                 BCC @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
003626r 1  C9 18                 CMP #SCREEN_OUT_TOP
003628r 1  90 D3                 BCC @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
00362Ar 1  C9 88                 CMP #SCREEN_OUT_BOTTOM
00362Cr 1  B0 CF                 BCS @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
00362Er 1  4C rr rr              JMP @zigzag_B_left
003631r 1               
003631r 1               draw_object_list:
003631r 1  9C 25 9F         STZ VERA_ctrl
003634r 1  9C 20 9F         STZ VERA_addr_low
003637r 1  A9 FD            lda #(>VRAM_sprite_attributes)+1
003639r 1  8D 21 9F         sta VERA_addr_high
00363Cr 1  A9 11            lda #$11
00363Er 1  8D 22 9F         sta VERA_addr_bank
003641r 1  64 22            STZ ZP_PTR
003643r 1  A9 rr            LDA #>OBJECT_LIST_Z_START_POINTERS
003645r 1  85 23            STA ZP_PTR+1
003647r 1  A0 60            LDY #96 ; num sprites can write
003649r 1                 @NEXT_Z: ; Z=0 is invalid...
003649r 1  E6 22              INC ZP_PTR
00364Br 1  D0 1C              BNE @Z_LOOP
00364Dr 1  AD 23 9F           : LDA VERA_data0
003650r 1  AD 23 9F             LDA VERA_data0
003653r 1  9C 23 9F             STZ VERA_data0
003656r 1  9C 23 9F             STZ VERA_data0
003659r 1  AD 23 9F             LDA VERA_data0
00365Cr 1  AD 23 9F             LDA VERA_data0
00365Fr 1  AD 23 9F             LDA VERA_data0
003662r 1  AD 23 9F             LDA VERA_data0
003665r 1  88                   DEY
003666r 1  D0 E5                BNE :-
003668r 1               
003668r 1  60                 rts
003669r 1                 @Z_LOOP:
003669r 1  B2 22              LDA (ZP_PTR) ; get our first victim
00366Br 1  AA                 TAX
00366Cr 1  A9 00              LDA #0
00366Er 1  92 22              STA (ZP_PTR) ; zero this Z_next for now
003670r 1  8A                 TXA
003671r 1                    @OBJ_LOOP:
003671r 1  AA                    TAX
003672r 1  F0 D5                 BEQ @NEXT_Z ; got a bum next pointer there ...
003674r 1  BD rr rr              LDA OBJECT_LIST_BYTE0_ADDRLOW,X
003677r 1  8D 23 9F              STA VERA_data0
00367Ar 1  BD rr rr              LDA OBJECT_LIST_BYTE1_MODE,x
00367Dr 1  8D 23 9F              STA VERA_data0
003680r 1  BD rr rr              LDA OBJECT_LIST_BYTE2_X,x
003683r 1  8D 23 9F              STA VERA_data0
003686r 1               ;         CMP #216
003686r 1                 ;       LDA #0
003686r 1                ;        BCC :+
003686r 1                ;        LDA #$FF
003686r 1                 ;     : STA VERA_data0
003686r 1  9C 23 9F              STZ VERA_data0
003689r 1  BD rr rr              LDA OBJECT_LIST_BYTE3_Y,x
00368Cr 1  8D 23 9F              STA VERA_data0
00368Fr 1               ;         CMP #161
00368Fr 1                ;        LDA #0
00368Fr 1                 ;       BCC :+
00368Fr 1                  ;      LDA #$FF
00368Fr 1                   ;   : STA VERA_data0
00368Fr 1  9C 23 9F              STZ VERA_data0
003692r 1  BD rr rr              LDA OBJECT_LIST_BYTE4_ZFLIPS,x
003695r 1  8D 23 9F              STA VERA_data0
003698r 1  BD rr rr              LDA OBJECT_LIST_BYTE5_SIZE,x
00369Br 1  8D 23 9F              STA VERA_data0
00369Er 1  BD rr rr              LDA OBJECT_LIST_BYTE6_NEXT,x
0036A1r 1  88                    DEY ; decrement that Y
0036A2r 1  D0 CD                 BNE @OBJ_LOOP ; still sprite slots left.. woot!
0036A4r 1  92 22                 STA (ZP_PTR) ; oops.. save that last thing and exit..
0036A6r 1  60                    RTS
0036A7r 1               
0036A7r 1               
0036A7r 1               
0036A7r 1               test_sprite_data:
0036A7r 1               ; first 16 sprites reserved ...
0036A7r 1               ;      0   1   2   3   4   5   6  7
0036A7r 1               ;     add,mod, XL, XH, YL, YH,msk,hwp
0036A7r 1  42 00 64 00  .byte  66,$00,100,  0,72,  0,$0C,$50  ;  cursor middle - 8x8  sprite 0
0036ABr 1  48 00 0C 50  
0036AFr 1  10 00 0C 00  .byte  16,$00, 12,  0,  0,  0,$0C,$30  ;  border top - 64x8    sprite 1
0036B3r 1  00 00 0C 30  
0036B7r 1  10 00 4C 00  .byte  16,$00, 76,  0,SCREEN_OUT_TOP,  0,$0C,$30  ;  border top - 64x8    sprite 2
0036BBr 1  18 00 0C 30  
0036BFr 1  10 00 8C 00  .byte  16,$00,140,  0,  0,  0,$0C,$30  ;  border top - 64x8    sprite 3
0036C3r 1  00 00 0C 30  
0036C7r 1               
0036C7r 1  10 00 0C 00  .byte  16,$00, 12,  0,153,  0,$0F,$30  ;  border bottom - 64x8  sprite 4
0036CBr 1  99 00 0F 30  
0036CFr 1  10 00 4C 00  .byte  16,$00, 76,  0,SCREEN_OUT_BOTTOM,  0,$0F,$30  ;  border bottom - 64x8  sprite 5
0036D3r 1  88 00 0F 30  
0036D7r 1  10 00 8C 00  .byte  16,$00,140,  0,153,  0,$0F,$30  ;  border bottom - 64x8  sprite 6
0036DBr 1  99 00 0F 30  
0036DFr 1               
0036DFr 1  10 00 00 00  .byte  16,$00,  0,  0, 16,  0,$0C,$C0  ;  border left    8x64   sprite 7
0036E3r 1  10 00 0C C0  
0036E7r 1  10 00 2C 00  .byte  16,$00,SCREEN_OUT_LEFT+8,  0, 80,  0,$0C,$C0  ;  border left    8x64   sprite 8
0036EBr 1  50 00 0C C0  
0036EFr 1  10 00 D0 00  .byte  16,$00,208,  0, 16,  0,$0F,$C0  ;  border left    8x64   sprite 9
0036F3r 1  10 00 0F C0  
0036F7r 1  10 00 A4 00  .byte  16,$00,SCREEN_OUT_RIGHT,  0, 80,  0,$0F,$C0  ;  border left    8x64   sprite A
0036FBr 1  50 00 0F C0  
0036FFr 1  31 00 8C 00  .byte  49,$00,140,  0,109,  0,$0C,$00  ; sprite B   bearing  Label
003703r 1  6D 00 0C 00  
003707r 1               ;.byte  58,$00,140,  0,118,  0,$0c,$30  ; sprite C   WORLD
003707r 1               ;.byte  50,$00,140,  0,136,  0,$0c,$30  ; sprite D   Cell
003707r 1  21 00 94 00  .byte  33,$00,148,  0,109,  0,$0C,$00  ; 0 test    sprite 0E   bearing
00370Br 1  6D 00 0C 00  
00370Fr 1  22 00 9C 00  .byte  34,$00,156,  0,109,  0,$0C,$00  ; 1 test    sprite 0F
003713r 1  6D 00 0C 00  
003717r 1  27 00 8C 00  .byte  39,$00,140,  0,127,  0,$0C,$00  ; 6 test    sprite 10   world XH
00371Br 1  7F 00 0C 00  
00371Fr 1  28 00 94 00  .byte  40,$00,148,  0,127,  0,$0C,$00  ; 7 test    sprite 11
003723r 1  7F 00 0C 00  
003727r 1  29 00 9C 00  .byte  41,$00,156,  0,127,  0,$0C,$00  ; 8 test    sprite 12   world Xl
00372Br 1  7F 00 0C 00  
00372Fr 1  2A 00 A4 00  .byte  42,$00,164,  0,127,  0,$0C,$00  ; 9 test    sprite 13
003733r 1  7F 00 0C 00  
003737r 1  2B 00 B0 00  .byte  43,$00,176,  0,127,  0,$0C,$00  ; A test    sprite 14   world YH
00373Br 1  7F 00 0C 00  
00373Fr 1  2C 00 B8 00  .byte  44,$00,184,  0,127,  0,$0C,$00  ; B test    sprite 15
003743r 1  7F 00 0C 00  
003747r 1  2D 00 C0 00  .byte  45,$00,192,  0,127,  0,$0C,$00  ; C test    sprite 16   world Yl
00374Br 1  7F 00 0C 00  
00374Fr 1  2E 00 C8 00  .byte  46,$00,200,  0,127,  0,$0C,$00  ; D test    sprite 17
003753r 1  7F 00 0C 00  
003757r 1  23 00 8C 00  .byte  35,$00,140,  0,145,  0,$0C,$00  ; 2 test    sprite 18   Cell X
00375Br 1  91 00 0C 00  
00375Fr 1  24 00 94 00  .byte  36,$00,148,  0,145,  0,$0C,$00  ; 3 test    sprite 19
003763r 1  91 00 0C 00  
003767r 1  2F 00 9C 00  .byte  47,$00,156,  0,145,  0,$0C,$00  ; E test    sprite 1A   X Subcell
00376Br 1  91 00 0C 00  
00376Fr 1  2F 00 A4 00  .byte  47,$00,164,  0,145,  0,$0C,$00  ; E test    sprite 1A
003773r 1  91 00 0C 00  
003777r 1  25 00 B0 00  .byte  37,$00,176,  0,100,  0,$0C,$00  ; 4 test    sprite 1C   DEBUG_A
00377Br 1  64 00 0C 00  
00377Fr 1  26 00 B8 00  .byte  38,$00,184,  0,100,  0,$0C,$00  ; 5 test    sprite 1D
003783r 1  64 00 0C 00  
003787r 1  30 00 C0 00  .byte  48,$00,192,  0,100,  0,$0C,$00  ; F test    sprite 1E   DEBUG_B
00378Br 1  64 00 0C 00  
00378Fr 1  30 00 C8 00  .byte  48,$00,200,  0,100,  0,$0C,$00  ; F test    sprite 1F
003793r 1  64 00 0C 00  
003797r 1  21 00 C0 00  .byte  33,$00,192,  0, 91,  0,$0C,$00  ; 0 test    sprite 0E   DEBUG_C
00379Br 1  5B 00 0C 00  
00379Fr 1  21 00 C8 00  .byte  33,$00,200,  0, 91,  0,$0C,$00  ; 0 test    sprite 0E
0037A3r 1  5B 00 0C 00  
0037A7r 1               
0037A7r 1               test_optimal_pal_data:
0037A7r 1               ;      GB   R  $1:FA00-$1:FBFF   VERA Color Palette (256 x 2 bytes)
0037A7r 1  00 00        .byte $00,$00  ; 0 - black/transparent
0037A9r 1  C8 0F        .byte $c8,$0f  ; 1 #ffcc88
0037ABr 1               
0037ABr 1  04 06        .byte $04,$06  ; 2 #660044
0037ADr 1  00 0C        .byte $00,$0C  ; 3  #cc0000
0037AFr 1  F0 0C        .byte $F0,$0C  ; 4#ccff00
0037B1r 1  42 03        .byte $42,$03
0037B3r 1  60 0C        .byte $60,$0c   ; 6  #cc6600
0037B5r 1  40 08        .byte $40,$08   ; 7 #884400
0037B7r 1  C0 0C        .byte $c0,$0c   ; 8 #cccc00
0037B9r 1  6A 02        .byte $6a,$02   ; 9 #2266aa mid blue
0037BBr 1  C0 00        .byte $c0,$00   ; A #00cc00
0037BDr 1  AC 07        .byte $ac,$07   ; B #77aacc light blue
0037BFr 1  C0 00        .byte $c0,$00   ; C #0000c0 dark blue
0037C1r 1  0C 0C        .byte $0c,$0c   ; D #cc00cc
0037C3r 1  88 08        .byte $88,$08   ; E #888888
0037C5r 1  22 02        .byte $22,$02   ; F #222222
0037C7r 1               
0037C7r 1               test_vram_data:
0037C7r 1               test_cell_sprite: 	;	is 16x64x16 bit = 512 bytes   sprite addr = 0
0037C7r 1               ; 	   01   23   45   67   89   AB   CD   EF
0037C7r 1  CC C9 CC C9  .byte $CC, $C9, $CC, $C9, $CC, $C9, $CC, $C0    ;  0
0037CBr 1  CC C9 CC C0  
0037CFr 1  09 9B 99 9B  .byte $09, $9B, $99, $9B, $99, $9B, $99, $9C    ;  1
0037D3r 1  99 9B 99 9C  
0037D7r 1  CB BC BB BC  .byte $CB, $BC, $BB, $BC, $BB, $BC, $BB, $B0    ;  2
0037DBr 1  BB BC BB B0  
0037DFr 1  0C C9 CC C9  .byte $0C, $C9, $CC, $C9, $CC, $C9, $CC, $CC    ;  3
0037E3r 1  CC C9 CC CC  
0037E7r 1  C9 9B 99 9B  .byte $C9, $9B, $99, $9B, $99, $9B, $99, $90    ;  4
0037EBr 1  99 9B 99 90  
0037EFr 1  0B BC BB BC  .byte $0B, $BC, $BB, $BC, $BB, $BC, $BB, $BC    ;  5
0037F3r 1  BB BC BB BC  
0037F7r 1  CC C9 CC C9  .byte $CC, $C9, $CC, $C9, $CC, $C9, $CC, $C0    ;  6
0037FBr 1  CC C9 CC C0  
0037FFr 1  09 9B 99 9B  .byte $09, $9B, $99, $9B, $99, $9B, $99, $9C    ;  7
003803r 1  99 9B 99 9C  
003807r 1  CB BC BB BC  .byte $CB, $BC, $BB, $BC, $BB, $BC, $BB, $B0    ;  8 ; 45* is 9.5 ..
00380Br 1  BB BC BB B0  
00380Fr 1  0C 09 0C 09  .byte $0C, $09, $0C, $09, $0C, $09, $0C, $0C    ;  9
003813r 1  0C 09 0C 0C  
003817r 1  09 90 09 90  .byte $09, $90, $09, $90, $09, $90, $09, $90   ;  10
00381Br 1  09 90 09 90  
00381Fr 1  0E 9E E9 9E  .byte $0E, $9E, $E9, $9E, $E9, $9E, $E9, $9E   ;  11
003823r 1  E9 9E E9 9E  
003827r 1               
003827r 1  EE EE EE EE  .repeat 13
00382Br 1  EE EE EE E0  
00382Fr 1  0E EE 66 EE  
0039C7r 1                   .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $E0    ;  12
0039C7r 1                   .byte $0E, $EE, $66, $EE, $EE, $66, $EE, $EE    ;
0039C7r 1                   .byte $EE, $66, $EE, $66, $66, $EE, $66, $E0    ;
0039C7r 1                   .byte $06, $EE, $EE, $EE, $EE, $EE, $EE, $66    ;
0039C7r 1               .endrepeat
0039C7r 1               
0039C7r 1               test_border:
0039C7r 1  0B 0B 0B 0B  .repeat 64
0039CBr 1  B0 B0 B0 B0  
0039CFr 1  0B 0B 0B 0B  
003BC7r 1                  .res 4, $0B
003BC7r 1                  .res 4, $B0
003BC7r 1               .endrepeat
003BC7r 1               
003BC7r 1               test_cross_hair_8x8:    ;  8x8x16 color = 32 bytes ; sprite 32
003BC7r 1               ;     01   23   45   67
003BC7r 1  11 00 00 11  .byte $11, $00, $00, $11
003BCBr 1  10 00 00 01  .byte $10, $00, $00, $01
003BCFr 1  00 00 00 00  .byte $00, $00, $00, $00
003BD3r 1  00 01 10 00  .byte $00, $01, $10, $00
003BD7r 1  00 01 10 00  .byte $00, $01, $10, $00
003BDBr 1  00 00 00 00  .byte $00, $00, $00, $00
003BDFr 1  10 00 00 01  .byte $10, $00, $00, $01
003BE3r 1  11 00 00 11  .byte $11, $00, $00, $11
003BE7r 1               
003BE7r 1               HEX_DISPLAY_FONT:       ; 8x8x16 color = 32 bytes ... sprite addr 33+ ($0440)
003BE7r 1               ;     01   23   45   67
003BE7r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 0
003BEBr 1  01 00 00 10  .byte $01, $00, $00, $10
003BEFr 1  01 00 00 10  .byte $01, $00, $00, $10
003BF3r 1  00 00 00 00  .byte $00, $00, $00, $00
003BF7r 1  01 00 00 10  .byte $01, $00, $00, $10
003BFBr 1  01 00 00 10  .byte $01, $00, $00, $10
003BFFr 1  01 00 00 10  .byte $01, $00, $00, $10
003C03r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 0 /
003C07r 1               
003C07r 1  00 00 00 00  .byte $00, $00, $00, $00 ; 1
003C0Br 1  00 00 00 10  .byte $00, $00, $00, $10
003C0Fr 1  00 00 00 10  .byte $00, $00, $00, $10
003C13r 1  00 00 00 00  .byte $00, $00, $00, $00
003C17r 1  00 00 00 10  .byte $00, $00, $00, $10
003C1Br 1  00 00 00 10  .byte $00, $00, $00, $10
003C1Fr 1  00 00 00 10  .byte $00, $00, $00, $10
003C23r 1  00 00 00 00  .byte $00, $00, $00, $00
003C27r 1               
003C27r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 2
003C2Br 1  00 00 00 10  .byte $00, $00, $00, $10
003C2Fr 1  00 00 00 10  .byte $00, $00, $00, $10
003C33r 1  00 11 11 00  .byte $00, $11, $11, $00
003C37r 1  01 00 00 00  .byte $01, $00, $00, $00
003C3Br 1  01 00 00 00  .byte $01, $00, $00, $00
003C3Fr 1  01 00 00 00  .byte $01, $00, $00, $00
003C43r 1  00 11 11 00  .byte $00, $11, $11, $00
003C47r 1               
003C47r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 3
003C4Br 1  00 00 00 10  .byte $00, $00, $00, $10
003C4Fr 1  00 00 00 10  .byte $00, $00, $00, $10
003C53r 1  00 11 11 00  .byte $00, $11, $11, $00
003C57r 1  00 00 00 10  .byte $00, $00, $00, $10
003C5Br 1  00 00 00 10  .byte $00, $00, $00, $10
003C5Fr 1  00 00 00 10  .byte $00, $00, $00, $10
003C63r 1  00 11 11 00  .byte $00, $11, $11, $00
003C67r 1               
003C67r 1  00 00 00 00  .byte $00, $00, $00, $00   ; 4
003C6Br 1  01 00 00 10  .byte $01, $00, $00, $10
003C6Fr 1  01 00 00 10  .byte $01, $00, $00, $10
003C73r 1  00 11 11 00  .byte $00, $11, $11, $00
003C77r 1  00 00 00 10  .byte $00, $00, $00, $10
003C7Br 1  00 00 00 10  .byte $00, $00, $00, $10
003C7Fr 1  00 00 00 10  .byte $00, $00, $00, $10
003C83r 1  00 00 00 00  .byte $00, $00, $00, $00
003C87r 1               
003C87r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 5
003C8Br 1  01 00 00 00  .byte $01, $00, $00, $00
003C8Fr 1  01 00 00 00  .byte $01, $00, $00, $00
003C93r 1  00 11 11 00  .byte $00, $11, $11, $00
003C97r 1  00 00 00 10  .byte $00, $00, $00, $10
003C9Br 1  00 00 00 10  .byte $00, $00, $00, $10
003C9Fr 1  00 00 00 10  .byte $00, $00, $00, $10
003CA3r 1  00 11 11 00  .byte $00, $11, $11, $00
003CA7r 1               
003CA7r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 6
003CABr 1  01 00 00 00  .byte $01, $00, $00, $00
003CAFr 1  01 00 00 00  .byte $01, $00, $00, $00
003CB3r 1  00 11 11 00  .byte $00, $11, $11, $00
003CB7r 1  01 00 00 10  .byte $01, $00, $00, $10
003CBBr 1  01 00 00 10  .byte $01, $00, $00, $10
003CBFr 1  01 00 00 10  .byte $01, $00, $00, $10
003CC3r 1  00 11 11 00  .byte $00, $11, $11, $00
003CC7r 1               
003CC7r 1  00 01 01 00  .byte $00, $01, $01, $00 ; 7
003CCBr 1  00 00 00 10  .byte $00, $00, $00, $10
003CCFr 1  00 00 00 10  .byte $00, $00, $00, $10
003CD3r 1  00 00 00 00  .byte $00, $00, $00, $00
003CD7r 1  00 00 00 10  .byte $00, $00, $00, $10
003CDBr 1  00 00 00 10  .byte $00, $00, $00, $10
003CDFr 1  00 00 00 10  .byte $00, $00, $00, $10
003CE3r 1  00 00 00 00  .byte $00, $00, $00, $00
003CE7r 1               
003CE7r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 8
003CEBr 1  01 00 00 10  .byte $01, $00, $00, $10
003CEFr 1  01 00 00 10  .byte $01, $00, $00, $10
003CF3r 1  00 11 11 00  .byte $00, $11, $11, $00
003CF7r 1  01 00 00 10  .byte $01, $00, $00, $10
003CFBr 1  01 00 00 10  .byte $01, $00, $00, $10
003CFFr 1  01 00 00 10  .byte $01, $00, $00, $10
003D03r 1  00 11 11 00  .byte $00, $11, $11, $00
003D07r 1               
003D07r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 9
003D0Br 1  01 00 00 10  .byte $01, $00, $00, $10
003D0Fr 1  01 00 00 10  .byte $01, $00, $00, $10
003D13r 1  00 11 11 00  .byte $00, $11, $11, $00
003D17r 1  00 00 00 10  .byte $00, $00, $00, $10
003D1Br 1  00 00 00 10  .byte $00, $00, $00, $10
003D1Fr 1  00 00 00 10  .byte $00, $00, $00, $10
003D23r 1  00 11 11 00  .byte $00, $11, $11, $00
003D27r 1               
003D27r 1  00 11 11 00  .byte $00, $11, $11, $00   ; A
003D2Br 1  01 00 00 10  .byte $01, $00, $00, $10
003D2Fr 1  01 00 00 10  .byte $01, $00, $00, $10
003D33r 1  00 11 11 00  .byte $00, $11, $11, $00
003D37r 1  01 00 00 10  .byte $01, $00, $00, $10
003D3Br 1  01 00 00 10  .byte $01, $00, $00, $10
003D3Fr 1  01 00 00 10  .byte $01, $00, $00, $10
003D43r 1  00 00 00 00  .byte $00, $00, $00, $00
003D47r 1               
003D47r 1               
003D47r 1  00 00 00 00  .byte $00, $00, $00, $00   ; B
003D4Br 1  01 00 00 00  .byte $01, $00, $00, $00
003D4Fr 1  01 00 00 00  .byte $01, $00, $00, $00
003D53r 1  00 11 11 00  .byte $00, $11, $11, $00
003D57r 1  01 00 00 10  .byte $01, $00, $00, $10
003D5Br 1  01 00 00 10  .byte $01, $00, $00, $10
003D5Fr 1  01 00 00 10  .byte $01, $00, $00, $10
003D63r 1  00 11 11 00  .byte $00, $11, $11, $00
003D67r 1               
003D67r 1  00 11 11 00  .byte $00, $11, $11, $00   ; C
003D6Br 1  01 00 00 00  .byte $01, $00, $00, $00
003D6Fr 1  01 00 00 00  .byte $01, $00, $00, $00
003D73r 1  00 00 00 00  .byte $00, $00, $00, $00
003D77r 1  01 00 00 00  .byte $01, $00, $00, $00
003D7Br 1  01 00 00 00  .byte $01, $00, $00, $00
003D7Fr 1  01 00 00 00  .byte $01, $00, $00, $00
003D83r 1  00 11 11 00  .byte $00, $11, $11, $00
003D87r 1               
003D87r 1  00 00 00 00  .byte $00, $00, $00, $00   ; D
003D8Br 1  00 00 00 10  .byte $00, $00, $00, $10
003D8Fr 1  00 00 00 10  .byte $00, $00, $00, $10
003D93r 1  00 11 11 00  .byte $00, $11, $11, $00
003D97r 1  01 00 00 10  .byte $01, $00, $00, $10
003D9Br 1  01 00 00 10  .byte $01, $00, $00, $10
003D9Fr 1  01 00 00 10  .byte $01, $00, $00, $10
003DA3r 1  00 11 11 00  .byte $00, $11, $11, $00
003DA7r 1               
003DA7r 1  00 11 11 00  .byte $00, $11, $11, $00   ; E
003DABr 1  01 00 00 00  .byte $01, $00, $00, $00
003DAFr 1  01 00 00 00  .byte $01, $00, $00, $00
003DB3r 1  00 11 11 00  .byte $00, $11, $11, $00
003DB7r 1  01 00 00 00  .byte $01, $00, $00, $00
003DBBr 1  01 00 00 00  .byte $01, $00, $00, $00
003DBFr 1  01 00 00 00  .byte $01, $00, $00, $00
003DC3r 1  00 11 11 00  .byte $00, $11, $11, $00
003DC7r 1               
003DC7r 1  00 11 11 00  .byte $00, $11, $11, $00   ; F   sprite addr 48
003DCBr 1  01 00 00 00  .byte $01, $00, $00, $00
003DCFr 1  01 00 00 00  .byte $01, $00, $00, $00
003DD3r 1  00 11 11 00  .byte $00, $11, $11, $00
003DD7r 1  01 00 00 00  .byte $01, $00, $00, $00
003DDBr 1  01 00 00 00  .byte $01, $00, $00, $00
003DDFr 1  01 00 00 00  .byte $01, $00, $00, $00
003DE3r 1  00 00 00 00  .byte $00, $00, $00, $00
003DE7r 1               
003DE7r 1  00 00 00 00  .byte $00, $00, $00, $00  ;  bearing label   sprite addr 49
003DEBr 1  00 00 01 00  .byte $00, $00, $01, $00
003DEFr 1  00 00 10 00  .byte $00, $00, $10, $00
003DF3r 1  00 01 00 00  .byte $00, $01, $00, $00
003DF7r 1  00 10 00 00  .byte $00, $10, $00, $00
003DFBr 1  01 00 00 00  .byte $01, $00, $00, $00
003DFFr 1  11 11 11 00  .byte $11, $11, $11, $00
003E03r 1  00 00 00 00  .byte $00, $00, $00, $00
003E07r 1               
003E07r 1               ; cell position label sprite addr 50-57
003E07r 1  00 FF 00 FF  .byte $00,$FF,$00,$FF,$FF,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
003E0Br 1  FF 00 FF 00  
003E0Fr 1  00 FF 00 00  
003E27r 1  FF 00 00 FF  .byte $FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
003E2Br 1  00 00 FF 00  
003E2Fr 1  00 FF 00 00  
003E47r 1  FF 00 00 FF  .byte $FF,$00,$00,$FF,$FF,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
003E4Br 1  FF 00 FF 00  
003E4Fr 1  00 FF 00 00  
003E67r 1  FF 00 00 FF  .byte $FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
003E6Br 1  00 00 FF 00  
003E6Fr 1  00 FF 00 00  
003E87r 1  00 FF 00 FF  .byte $00,$FF,$00,$FF,$FF,$00,$FF,$FF,$00,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
003E8Br 1  FF 00 FF FF  
003E8Fr 1  00 FF FF 00  
003EA7r 1               ;      01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF
003EA7r 1               ;     XH                               $XL                            ___  __  YH                              YL
003EA7r 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$00,$00,$10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00
003EABr 1  00 00 00 00  
003EAFr 1  10 10 10 00  
003EC7r 1  01 00 11 10  .byte $01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00
003ECBr 1  00 00 00 00  
003ECFr 1  01 00 10 00  
003EE7r 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$11,$10,$00,$00,$00,$00,$00,$00,$01,$00,$10,$10,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00
003EEBr 1  00 00 00 00  
003EEFr 1  10 10 11 10  
003F07r 1               
003F07r 1               ; world position label 58-65
003F07r 1               ;     XH                 $XL                  ___  ___  YH                  YL
003F07r 1  FF 00 00 00  .byte $FF,$00,$00,$00,$FF,$00,$00,$FF,$00,$00,$FF,$FF,$00,$00,$FF,$00,$00,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
003F0Br 1  FF 00 00 FF  
003F0Fr 1  00 00 FF FF  
003F27r 1  FF 00 00 00  .byte $FF,$00,$00,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$00,$FF,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
003F2Br 1  FF 00 FF 00  
003F2Fr 1  FF 00 FF 00  
003F47r 1  FF 00 FF 00  .byte $FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$FF,$00,$00,$FF,$00,$00,$FF,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
003F4Br 1  FF 00 FF 00  
003F4Fr 1  FF 00 FF FF  
003F67r 1  FF 00 FF 00  .byte $FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$00,$FF,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
003F6Br 1  FF 00 FF 00  
003F6Fr 1  FF 00 FF 00  
003F87r 1  00 FF 00 FF  .byte $00,$FF,$00,$FF,$00,$00,$00,$FF,$00,$00,$FF,$00,$FF,$00,$FF,$FF,$00,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
003F8Br 1  00 00 00 FF  
003F8Fr 1  00 00 FF 00  
003FA7r 1               ;      01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF
003FA7r 1               ;     XH                               $XL                            ___  __  YH                              YL
003FA7r 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$00,$00,$10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00
003FABr 1  00 00 00 00  
003FAFr 1  10 10 10 00  
003FC7r 1  01 00 11 10  .byte $01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00
003FCBr 1  00 00 00 00  
003FCFr 1  01 00 10 00  
003FE7r 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$11,$10,$00,$00,$00,$00,$00,$00,$01,$00,$10,$10,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00
003FEBr 1  00 00 00 00  
003FEFr 1  10 10 11 10  
004007r 1               
004007r 1               ; directional cursor reminder... 16x16 - 66-69
004007r 1               
004007r 1  00 10 00 10  .byte $00, $10, $00, $10, $01, $11, $11, $00
00400Br 1  01 11 11 00  
00400Fr 1  00 10 00 10  .byte $00, $10, $00, $10, $01, $00, $00, $00
004013r 1  01 00 00 00  
004017r 1  00 10 10 10  .byte $00, $10, $10, $10, $01, $11, $00, $00
00401Br 1  01 11 00 00  
00401Fr 1  00 10 10 10  .byte $00, $10, $10, $10, $01, $00, $00, $00
004023r 1  01 00 00 00  
004027r 1  00 01 01 00  .byte $00, $01, $01, $00, $01, $11, $11, $00
00402Br 1  01 11 11 00  
00402Fr 1  00 00 00 00  .byte $00, $00, $00, $00, $00, $00, $00, $00
004033r 1  00 00 00 00  
004037r 1  01 11 00 00  .byte $01, $11, $00, $00, $00, $01, $11, $00
00403Br 1  00 01 11 00  
00403Fr 1  10 00 10 01  .byte $10, $00, $10, $01, $10, $01, $00, $01
004043r 1  10 01 00 01  
004047r 1  11 11 10 01  .byte $11, $11, $10, $01, $10, $01, $00, $01
00404Br 1  10 01 00 01  
00404Fr 1  10 00 10 00  .byte $10, $00, $10, $00, $00, $01, $11, $10
004053r 1  00 01 11 10  
004057r 1  00 00 00 00  .byte $00, $00, $00, $00, $00, $00, $00, $00
00405Br 1  00 00 00 00  
00405Fr 1  00 11 11 10  .byte $00, $11, $11, $10, $01, $00, $01, $00
004063r 1  01 00 01 00  
004067r 1  00 00 01 00  .byte $00, $00, $01, $00, $00, $10, $10, $00
00406Br 1  00 10 10 00  
00406Fr 1  00 00 10 00  .byte $00, $00, $10, $00, $00, $01, $00, $00
004073r 1  00 01 00 00  
004077r 1  00 01 00 00  .byte $00, $01, $00, $00, $00, $10, $10, $00
00407Br 1  00 10 10 00  
00407Fr 1  00 11 11 10  .byte $00, $11, $11, $10, $01, $00, $01, $00
004083r 1  01 00 01 00  
004087r 1               
004087r 1  80 80 80 80  .repeat 58 ; 128-70
00408Br 1  80 80 80 80  
00408Fr 1  80 80 80 80  
0047C7r 1                   .res 32,$80
0047C7r 1               .endrepeat
0047C7r 1               
0047C7r 1               ; alernate tile graphic to use for tub wall .. 128 to 159 16x64
0047C7r 1  16 16 16 16  .repeat 32
0047CBr 1  16 16 16 16  
0047CFr 1  61 61 61 61  
0047C7r 1                   .byte $16, $16, $16, $16, $16, $16, $16, $16
0047C7r 1                   .byte $61, $61, $61, $61, $61, $61, $61, $61
0047C7r 1               .endrepeat
0047C7r 1               
