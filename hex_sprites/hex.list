ca65 V2.19 - Git 8e6c0c1
Main file   : hex.s
Current file: hex.s

000000r 1               ; 	080D
000000r 1  4C rr rr     jmp start ; 	3 bytes
000003r 1               ;	0810 	- 240 bytes available for stuff that doesn't need alignment
000003r 1  DE AD BE EF  .repeat 28
000007r 1  DE AD BE EF  
00000Br 1  DE AD BE EF  
000073r 1               	.byte $DE,$AD,$BE,$EF
000073r 1               .endrepeat
000073r 1               SCRATCH128:
000073r 1  DE AD BE EF  .repeat 32
000077r 1  DE AD BE EF  
00007Br 1  DE AD BE EF  
0000F3r 1               	.byte $DE,$AD,$BE,$EF
0000F3r 1               .endrepeat
0000F3r 1               
0000F3r 1               ACROSS_ROW_X_H: ; 0900  16 wide , 45* tilt
0000F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0000F3r 1  10 0F 0F 0F  .byte $10, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $E, $E, $E, $E, $E, $E, $D, $D, $D, $D, $D, $C, $C, $C, $C, $B, $B, $B, $B, $A, $A, $A, $9, $9, $9, $8, $8, $8, $7, $7, $7, $6, $6, $6, $5, $5, $5, $4, $4, $3, $3, $3, $2, $2, $1, $1, $1, $0, $0, $0, $FF, $FF, $FE, $FE, $FE, $FD, $FD, $FC, $FC, $FC, $FB, $FB, $FA, $FA, $FA, $F9, $F9, $F9, $F8, $F8, $F8, $F7, $F7, $F7, $F6, $F6, $F6, $F5, $F5, $F5, $F4, $F4, $F4, $F4, $F3, $F3, $F3, $F3, $F2, $F2, $F2, $F2, $F2, $F1, $F1, $F1, $F1, $F1, $F1, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F1, $F1, $F1, $F1, $F1, $F1, $F2, $F2, $F2, $F2, $F2, $F3, $F3, $F3, $F3, $F4, $F4, $F4, $F4, $F5, $F5, $F5, $F6, $F6, $F6, $F7, $F7, $F7, $F8, $F8, $F8, $F9, $F9, $F9, $FA, $FA, $FA, $FB, $FB, $FC, $FC, $FC, $FD, $FD, $FE, $FE, $FE, $FF, $FF, $00, $0, $0, $1, $1, $1, $2, $2, $3, $3, $3, $4, $4, $5, $5, $5, $6, $6, $6, $7, $7, $7, $8, $8, $8, $9, $9, $9, $A, $A, $A, $B, $B, $B, $B, $C, $C, $C, $C, $D, $D, $D, $D, $D, $E, $E, $E, $E, $E, $E, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F
0000F7r 1  0F 0F 0F 0F  
0000FBr 1  0F 0F 0F 0F  
0001F3r 1               
0001F3r 1               ACROSS_ROW_X_L: ; 0A00
0001F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0001F3r 1  00 FE FB F4  .byte
0001F7r 1  EC E1 D3 C3  
0001FBr 1  B1 9C 85 6B  
0002F3r 1               
0002F3r 1               ACROSS_ROW_Y_H: ; 0B00
0002F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0002F3r 1  00 00 00 00  .byte
0002F7r 1  01 01 01 01  
0002FBr 1  02 02 02 03  
0003F3r 1               
0003F3r 1               ACROSS_ROW_Y_L: ; 0C00
0003F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0003F3r 1  00 47 8E D5  .byte $0, $47, $8E, $D5, $1B, $62, $A8, $EF, $35, $7A, $BF, $4, $48, $8C, $CF, $12, $54, $95, $D6, $16, $55, $93, $D1, $D, $49, $83, $BD, $F5, $2D, $63, $99, $CD, $0, $31, $62, $91, $BE, $EB, $16, $3F, $68, $8E, $B4, $D8, $FA, $1B, $3A, $57, $73, $8E, $A7, $BE, $D3, $E7, $F9, $9, $18, $25, $30, $3A, $42, $48, $4C, $4F, $50, $4F, $4C, $48, $42, $3A, $30, $25, $18, $9, $F9, $E7, $D3, $BE, $A7, $8E, $73, $57, $3A, $1B, $FA, $D8, $B4, $8E, $68, $3F, $16, $EB, $BE, $91, $62, $31, $0, $CD, $99, $63, $2D, $F5, $BD, $83, $49, $D, $D1, $93, $55, $16, $D6, $95, $54, $12, $CF, $8C, $48, $4, $BF, $7A, $35, $EF, $A8, $62, $1B, $D5, $8E, $47, $0, $B8, $71, $2A, $E4, $9D, $57, $10, $CA, $85, $40, $FB, $B7, $73, $30, $ED, $AB, $6A, $29, $E9, $AA, $6C, $2E, $F2, $B6, $7C, $42, $A, $D2, $9C, $66, $32, $0, $CE, $9D, $6E, $41, $14, $E9, $C0, $97, $71, $4B, $27, $5, $E4, $C5, $A8, $8C, $71, $58, $41, $2C, $18, $6, $F6, $E7, $DA, $CF, $C5, $BD, $B7, $B3, $B0, $AF, $B0, $B3, $B7, $BD, $C5, $CF, $DA, $E7, $F6, $6, $18, $2C, $41, $58, $71, $8C, $A8, $C5, $E4, $5, $27, $4B, $71, $97, $C0, $E9, $14, $41, $6E, $9D, $CE, $0, $32, $66, $9C, $D2, $A, $42, $7C, $B6, $F2, $2E, $6C, $AA, $E9, $29, $6A, $AB, $ED, $30, $73, $B7, $FB, $40, $85, $CA, $10, $57, $9D, $E4, $2A, $71, $B8
0003F7r 1  1B 62 A8 EF  
0003FBr 1  35 7A BF 04  
0004F3r 1               
0004F3r 1               NEXT_ROW_X_H: ; 0D00
0004F3r 1  F8 F7 F7 F7  .byte $F8, $F7, $F7, $F7, $F6, $F6, $F6, $F5, $F5, $F5, $F4, $F4, $F4, $F4, $F3, $F3, $F3, $F3, $F2, $F2, $F2, $F2, $F2, $F1, $F1, $F1, $F1, $F1, $F1, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F1, $F1, $F1, $F1, $F1, $F1, $F2, $F2, $F2, $F2, $F2, $F3, $F3, $F3, $F3, $F4, $F4, $F4, $F5, $F5, $F5, $F5, $F6, $F6, $F6, $F7, $F7, $F7, $F8, $F8, $F8, $F9, $F9, $F9, $FA, $FA, $FB, $FB, $FB, $FC, $FC, $FD, $FD, $FD, $FE, $FE, $FE, $FF, $FF, $0, $0, $0, $1, $1, $2, $2, $2, $3, $3, $4, $4, $4, $5, $5, $5, $6, $6, $6, $7, $7, $8, $8, $8, $8, $9, $9, $9, $A, $A, $A, $B, $B, $B, $B, $C, $C, $C, $C, $D, $D, $D, $D, $D, $E, $E, $E, $E, $E, $E, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $E, $E, $E, $E, $E, $E, $D, $D, $D, $D, $D, $C, $C, $C, $C, $B, $B, $B, $A, $A, $A, $A, $9, $9, $9, $8, $8, $8, $7, $7, $7, $6, $6, $6, $5, $5, $4, $4, $4, $3, $3, $2, $2, $2, $1, $1, $1, $0, $0, $FF, $FF, $FF, $FE, $FE, $FD, $FD, $FD, $FC, $FC, $FB, $FB, $FB, $FA, $FA, $FA, $F9, $F9, $F9, $F8, $F8
0004F7r 1  F6 F6 F6 F5  
0004FBr 1  F5 F5 F4 F4  
0005F3r 1               
0005F3r 1               NEXT_ROW_X_L: ; 0E00
0005F3r 1  00 A9 54 00  .byte
0005F7r 1  AE 5D 0D BF  
0005FBr 1  73 28 DF 98  
0006F3r 1               
0006F3r 1               NEXT_ROW_Y_H: ; 0F00
0006F3r 1  09 09 09 09  .byte $9, $9, $9, $9, $9, $9, $8, $8, $8, $8, $8, $7, $7, $7, $7, $7, $6, $6, $6, $6, $5, $5, $5, $5, $5, $4, $4, $4, $3, $3, $3, $3, $2, $2, $2, $2, $1, $1, $1, $1, $0, $0, $0, $FF, $FF, $FF, $FF, $FE, $FE, $FE, $FD, $FD, $FD, $FD, $FC, $FC, $FC, $FC, $FB, $FB, $FB, $FB, $FA, $FA, $FA, $FA, $F9, $F9, $F9, $F9, $F8, $F8, $F8, $F8, $F8, $F7, $F7, $F7, $F7, $F7, $F7, $F6, $F6, $F6, $F6, $F6, $F6, $F5, $F5, $F5, $F5, $F5, $F5, $F5, $F5, $F5, $F5, $F5, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F5, $F5, $F5, $F5, $F5, $F5, $F5, $F5, $F5, $F5, $F6, $F6, $F6, $F6, $F6, $F6, $F6, $F7, $F7, $F7, $F7, $F7, $F8, $F8, $F8, $F8, $F8, $F9, $F9, $F9, $F9, $FA, $FA, $FA, $FA, $FA, $FB, $FB, $FB, $FC, $FC, $FC, $FC, $FD, $FD, $FD, $FD, $FE, $FE, $FE, $FE, $FF, $FF, $FF, $0, $0, $0, $0, $1, $1, $1, $2, $2, $2, $2, $3, $3, $3, $3, $4, $4, $4, $4, $5, $5, $5, $5, $6, $6, $6, $6, $7, $7, $7, $7, $7, $8, $8, $8, $8, $8, $8, $9, $9, $9, $9, $9, $9, $A, $A, $A, $A, $A, $A, $A, $A, $A, $A, $A, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B, $A, $A, $A, $A, $A, $A, $A, $A, $A, $A, $9
0006F7r 1  09 09 08 08  
0006FBr 1  08 08 08 07  
0007F3r 1               
0007F3r 1               TUB_WORLD: ; 32*64 = 2K ... is 1000 to 1800
0007F3r 1               .include "tub_world.inc"
0007F3r 2               ; 0 to 128 will be water level. >128 = distance along row to water (neg) , 128 = no water this row.
0007F3r 2               ; rows are stored within 64 byte rows
0007F3r 2               ; 	                                                              0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63
0007F3r 2  80 80 80 80  .byte                                                             $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80  ; 00 - tub
0007F7r 2  80 80 80 80  
0007FBr 2  80 80 80 80  
000833r 2  80 80 80 FC  .byte                                                           $80,$80,$80,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4,$F3,$F2,$F1,$F0,$EF,$EE,$ED,$EC,$EB  ; 01
000837r 2  FD FE FF 00  
00083Br 2  00 00 00 00  
000873r 2  80 80 80 FD  .byte                                                         $80,$80,$80,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4,$F3,$F2,$F1,$F0,$EF,$EE,$ED  ; 2
000877r 2  FE FF 00 00  
00087Br 2  00 00 00 00  
0008B3r 2  80 80 80 FE  .byte                                                       $80,$80,$80,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4,$F3,$F2,$F1,$F0,$EF  ; 3
0008B7r 2  FF 00 00 00  
0008BBr 2  00 00 00 00  
0008F3r 2  80 80 FE FF  .byte                                                     $80,$80,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4,$F3,$F2,$F1  ; 4
0008F7r 2  00 00 00 00  
0008FBr 2  00 00 00 00  
000933r 2  80 80 FE FF  .byte                                                   $80,$80,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4,$F3,$F2  ; 5
000937r 2  00 00 00 00  
00093Br 2  00 00 00 00  
000973r 2  80 80 FE FF  .byte                                                 $80,$80,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4,$F3 ; 6
000977r 2  00 00 00 00  
00097Br 2  00 00 00 00  
0009B3r 2  80 80 FE FF  .byte                                               $80,$80,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4 ; 7
0009B7r 2  00 00 00 00  
0009BBr 2  00 00 00 00  
0009F3r 2  80 80 FE FF  .byte                                             $80,$80,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5 ; 8
0009F7r 2  00 00 00 00  
0009FBr 2  00 00 00 00  
000A33r 2  80 80 FE FF  .byte                                           $80,$80,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6 ; 9
000A37r 2  00 00 00 00  
000A3Br 2  00 00 00 00  
000A73r 2  80 80 80 FE  .byte                                         $80,$80,$80,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6 ; 10
000A77r 2  FF 00 00 00  
000A7Br 2  00 00 00 00  
000AB3r 2  80 80 80 FE  .byte                                       $80,$80,$80,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6 ; 11
000AB7r 2  FF 00 00 00  
000ABBr 2  00 00 00 00  
000AF3r 2  FA FB FC FD  .byte                                     $FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7 ; 12
000AF7r 2  FE FF 00 00  
000AFBr 2  00 00 00 00  
000B33r 2  FA FB FC FD  .byte                                   $FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8 ; 13
000B37r 2  FE FF 00 00  
000B3Br 2  00 00 00 00  
000B73r 2  FA FB FC FD  .byte                                 $FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8 ; 14
000B77r 2  FE FF 00 00  
000B7Br 2  00 00 00 00  
000BB2r 2  F9 FA FB FC  .byte                               $F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9 ; 15
000BB6r 2  FD FE FF 00  
000BBAr 2  00 00 00 00  
000BF2r 2  80 80 80 FB  .byte                             $80,$80,$80,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9 ; 16
000BF6r 2  FC FD FE FF  
000BFAr 2  00 00 00 00  
000C32r 2  80 80 80 FB  .byte                           $80,$80,$80,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA ; 17
000C36r 2  FC FD FE FF  
000C3Ar 2  00 00 00 00  
000C72r 2  80 80 80 FC  .byte                         $80,$80,$80,$FC,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA ; 18
000C76r 2  FB FC FD FE  
000C7Ar 2  FF 00 00 00  
000CB2r 2  80 80 80 FA  .byte                       $80,$80,$80,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB ; 19
000CB6r 2  FB FC FD FE  
000CBAr 2  FF 00 00 00  
000CF2r 2  80 80 80 F9  .byte                     $80,$80,$80,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB ; 20
000CF6r 2  FA FB FC FD  
000CFAr 2  FE FF 00 00  
000D32r 2  80 80 80 F9  .byte                   $80,$80,$80,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC ; 21
000D36r 2  FA FB FC FD  
000D3Ar 2  FE FF 00 00  
000D72r 2  80 80 80 F8  .byte                 $80,$80,$80,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC ; 22
000D76r 2  F9 FA FB FC  
000D7Ar 2  FD FE FF 00  
000DB2r 2  80 80 80 F7  .byte               $80,$80,$80,$F7,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC ; 23
000DB6r 2  F8 F9 FA FB  
000DBAr 2  FC FD FE FF  
000DF2r 2  80 80 80 F6  .byte             $80,$80,$80,$F6,$F7,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC ; 24
000DF6r 2  F7 F8 F9 FA  
000DFAr 2  FB FC FD FE  
000E32r 2  80 80 80 F5  .byte           $80,$80,$80,$F5,$F6,$F7,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC ; 25
000E36r 2  F6 F7 F8 F9  
000E3Ar 2  FA FB FC FD  
000E72r 2  80 80 80 F4  .byte         $80,$80,$80,$F4,$F5,$F6,$F7,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB ; 26
000E76r 2  F5 F6 F7 F8  
000E7Ar 2  F9 FA FB FC  
000EB2r 2  80 80 80 F2  .byte       $80,$80,$80,$F2,$F3,$F4,$F5,$F6,$F7,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA ; 27
000EB6r 2  F3 F4 F5 F6  
000EBAr 2  F7 F8 F9 FA  
000EF2r 2  80 80 80 F0  .byte     $80,$80,$80,$F0,$F1,$F2,$F3,$F4,$F5,$F6,$F7,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9 ; 28
000EF6r 2  F1 F2 F3 F4  
000EFAr 2  F5 F6 F7 F8  
000F32r 2  80 80 80 EE  .byte   $80,$80,$80,$EE,$EF,$F0,$F1,$F2,$F3,$F4,$F5,$F6,$F7,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8 ; 29
000F36r 2  EF F0 F1 F2  
000F3Ar 2  F3 F4 F5 F6  
000F72r 2  80 80 80 80  .byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80  ; 30
000F76r 2  80 80 80 80  
000F7Ar 2  80 80 80 80  
000FB2r 2  80 80 80 80  .byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80  ; 30
000FB6r 2  80 80 80 80  
000FBAr 2  80 80 80 80  
000FF2r 2               
000FF2r 2               
000FF2r 2               
000FF2r 1               
000FF2r 1               
000FF2r 1               OBJECT_LIST_Z_START_POINTERS: ; 1900
000FF2r 1  00 00 00 00  .res 256,0
000FF6r 1  00 00 00 00  
000FFAr 1  00 00 00 00  
0010F2r 1               OBJECT_LIST_BYTE0_ADDRLOW: ; addr low
0010F2r 1  00 00 00 00  .res 256,0
0010F6r 1  00 00 00 00  
0010FAr 1  00 00 00 00  
0011F2r 1               OBJECT_LIST_BYTE1_MODE: ; mode/addr bank
0011F2r 1  00 00 00 00  .res 256,0
0011F6r 1  00 00 00 00  
0011FAr 1  00 00 00 00  
0012F2r 1               OBJECT_LIST_BYTE2_X: ; X position onscreen ( assumed positive for now)
0012F2r 1  00 00 00 00  .res 256,0
0012F6r 1  00 00 00 00  
0012FAr 1  00 00 00 00  
0013F2r 1               OBJECT_LIST_BYTE3_Y: ; y position onscreen
0013F2r 1  00 00 00 00  .res 256,0
0013F6r 1  00 00 00 00  
0013FAr 1  00 00 00 00  
0014F2r 1               OBJECT_LIST_BYTE4_ZFLIPS: ; collision / z / flips
0014F2r 1  00 00 00 00  .res 256,0
0014F6r 1  00 00 00 00  
0014FAr 1  00 00 00 00  
0015F2r 1               OBJECT_LIST_BYTE5_SIZE: ; size / pal offset
0015F2r 1  00 00 00 00  .res 256,0
0015F6r 1  00 00 00 00  
0015FAr 1  00 00 00 00  
0016F2r 1               OBJECT_LIST_BYTE6_NEXT: ; NEXT
0016F2r 1  00 00 00 00  .res 256,0
0016F6r 1  00 00 00 00  
0016FAr 1  00 00 00 00  
0017F2r 1               
0017F2r 1               ; makes 8*256 = 2k
0017F2r 1               
0017F2r 1               
0017F2r 1               NEXT_ROW_Y_L: ; 1000
0017F2r 1  CC A7 82 5A  .byte
0017F6r 1  32 08 DC AF  
0017FAr 1  81 52 21 EF  
0018F2r 1               
0018F2r 1               WORLD_TO_CELL_XH:
0018F2r 1  00 00 01 02  .byte 0,0,1,2,3,4,5,6,6,7,8,9,10,11,12,12,13,14,15,16,17,18,19,19,20,21,22,23,24,25,25,26,27,28,29,30,31,32,32,33,34,35,36,37,38,38,39,40,41,42,43,44,45,45,46,47,48,49,50,51,51,52,53,54,55,56,57,58,58,59,60,61,62,63,64,64,65,66,67,68,69,70,71,71,72,73,74,75,76,77,77,78,79,80,81,82,83,84,84,85,86,87,88,89,90,90,91,92,93,94,95,96,96,97,98,99,100,101,102,103,103,104,105,106,107,108,109,109
0018F6r 1  03 04 05 06  
0018FAr 1  06 07 08 09  
001972r 1               WORLD_TO_CELL_XL:
001972r 1  00 DD BB 99  .byte 0,221,187,153,118,84,50,15,237,203,169,134,100,66,31,253,219,184,150,116,82,47,13,235,200,166,132,97,63,29,251,216,182,148,113,79,45,10,232,198,164,129,95,61,26,248,214,180,145,111,77,42,8,230,195,161,127,93,58,24,246,211,177,143,108,74,40,6,227,193,159,124,90,56,21,243,209,175,140,106,72,37,3,225,191,156,122,88,53,19,241,206,172,138,104,69,35,1,222,188,154,119,85,51,17,238,204,170,135,101,67,32,254,220,186,151,117,83,48,14,236,202,167,133,99,64,30,252
001976r 1  76 54 32 0F  
00197Ar 1  ED CB A9 86  
0019F2r 1               
0019F2r 1               CELL_TO_WORLD_XH:
0019F2r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,8,9,10,11,12,13,15,16,17,18,19,20,21,23,24,25,26,27,28,30,31,32,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,50,51,53,54,55,56,57,58,60,61,62,63,64,65,66,68,69,70,71,72,73,75,76,77,78,79,80,81,83,84,85,86,87,88,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,112,113,114,115,116,117,118,120,121,122,123,124,125,127,128,129,130,131,132,133,135,136,137,138,139,140,142,143,144,145,146
0019F6r 1  04 05 06 08  
0019FAr 1  09 0A 0B 0C  
001A72r 1               CELL_TO_WORLD_XL:
001A72r 1  00 27 4F 76  .byte 0,39,79,118,158,198,237,21,60,100,140,179,219,2,42,82,121,161,200,240,24,63,103,142,182,222,5,45,84,124,164,203,243,26,66,106,145,185,224,8,48,87,127,166,206,246,29,69,108,148,188,227,11,50,90,130,169,209,248,32,72,111,151,191,230,14,53,93,133,172,212,251,35,75,114,154,193,233,17,56,96,135,175,215,254,38,77,117,157,196,236,19,59,99,138,178,217,1,41,80,120,159,199,239,22,62,101,141,181,220,4,43,83,123,162,202,241,25,65,104,144,184,223,7,46,86,126,165
001A76r 1  9E C6 ED 15  
001A7Ar 1  3C 64 8C B3  
001AF2r 1               
001AF2r 1               CELL_LOW_TO_WORLD_XH:
001AF2r 1  00 00 00 00  .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
001AF6r 1  00 00 00 00  
001AFAr 1  00 00 00 00  
001BF2r 1               CELL_LOW_TO_WORLD_XL:
001BF2r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,8,9,10,11,12,13,15,16,17,18,19,20,21,23,24,25,26,27,28,30,31,32,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,50,51,53,54,55,56,57,58,60,61,62,63,64,65,66,68,69,70,71,72,73,75,76,77,78,79,80,81,83,84,85,86,87,88,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,112,113,114,115,116,117,118,120,121,122,123,124,125,127,128,129,130,131,132,133,135,136,137,138,139,140,142,143,144,145,146,147,148,150,151,152,153,154,155,157,158,159,160,161,162,163,165,166,167,168,169,170,172,173,174,175,176,177,178,180,181,182,183,184,185,187,188,189,190,191,192,193,195,196,197,198,199,200,202,203,204,205,206,207,209,210,211,212,213,214,215,217,218,219,220,221,222,224,225,226,227,228,229,230,232,233,234,235,236,237,239,240,241,242,243,244,245,247,248,249,250,251,252,254,255,0,1,2,3,4,6,7,8,9,10,11,13,14,15,16,17,18,19,21,22,23,24,25,26,28,29,30,31,32,33,34,36,37,38
001BF6r 1  04 05 06 08  
001BFAr 1  09 0A 0B 0C  
001CF2r 1               
001CF2r 1               MOVE_XH:
001CF2r 1  00 00 00 00  .res 256,0
001CF6r 1  00 00 00 00  
001CFAr 1  00 00 00 00  
001DF2r 1               MOVE_XL:
001DF2r 1  00 00 00 00  .res 256,0
001DF6r 1  00 00 00 00  
001DFAr 1  00 00 00 00  
001EF2r 1               MOVE_YH:
001EF2r 1  00 00 00 00  .res 256,0
001EF6r 1  00 00 00 00  
001EFAr 1  00 00 00 00  
001FF2r 1               MOVE_YL:
001FF2r 1  00 00 00 00  .res 256,0
001FF6r 1  00 00 00 00  
001FFAr 1  00 00 00 00  
0020F2r 1               
0020F2r 1               SPRITE_NUM_HIGH_NIBBLE:
0020F2r 1  21 21 21 21  .res 16, 33
0020F6r 1  21 21 21 21  
0020FAr 1  21 21 21 21  
002102r 1  22 22 22 22  .res 16, 34
002106r 1  22 22 22 22  
00210Ar 1  22 22 22 22  
002112r 1  23 23 23 23  .res 16, 35
002116r 1  23 23 23 23  
00211Ar 1  23 23 23 23  
002122r 1  24 24 24 24  .res 16, 36
002126r 1  24 24 24 24  
00212Ar 1  24 24 24 24  
002132r 1  25 25 25 25  .res 16, 37
002136r 1  25 25 25 25  
00213Ar 1  25 25 25 25  
002142r 1  26 26 26 26  .res 16, 38
002146r 1  26 26 26 26  
00214Ar 1  26 26 26 26  
002152r 1  27 27 27 27  .res 16, 39
002156r 1  27 27 27 27  
00215Ar 1  27 27 27 27  
002162r 1  28 28 28 28  .res 16, 40
002166r 1  28 28 28 28  
00216Ar 1  28 28 28 28  
002172r 1  29 29 29 29  .res 16, 41
002176r 1  29 29 29 29  
00217Ar 1  29 29 29 29  
002182r 1  2A 2A 2A 2A  .res 16, 42
002186r 1  2A 2A 2A 2A  
00218Ar 1  2A 2A 2A 2A  
002192r 1  2B 2B 2B 2B  .res 16, 43
002196r 1  2B 2B 2B 2B  
00219Ar 1  2B 2B 2B 2B  
0021A2r 1  2C 2C 2C 2C  .res 16, 44
0021A6r 1  2C 2C 2C 2C  
0021AAr 1  2C 2C 2C 2C  
0021B2r 1  2D 2D 2D 2D  .res 16, 45
0021B6r 1  2D 2D 2D 2D  
0021BAr 1  2D 2D 2D 2D  
0021C2r 1  2E 2E 2E 2E  .res 16, 46
0021C6r 1  2E 2E 2E 2E  
0021CAr 1  2E 2E 2E 2E  
0021D2r 1  2F 2F 2F 2F  .res 16, 47
0021D6r 1  2F 2F 2F 2F  
0021DAr 1  2F 2F 2F 2F  
0021E2r 1  30 30 30 30  .res 16, 48
0021E6r 1  30 30 30 30  
0021EAr 1  30 30 30 30  
0021F2r 1               
0021F2r 1               SPRITE_NUM_LOW_NIBBLE:
0021F2r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
0021F6r 1  25 26 27 28  
0021FAr 1  29 2A 2B 2C  
002202r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
002206r 1  25 26 27 28  
00220Ar 1  29 2A 2B 2C  
002212r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
002216r 1  25 26 27 28  
00221Ar 1  29 2A 2B 2C  
002222r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
002226r 1  25 26 27 28  
00222Ar 1  29 2A 2B 2C  
002232r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
002236r 1  25 26 27 28  
00223Ar 1  29 2A 2B 2C  
002242r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
002246r 1  25 26 27 28  
00224Ar 1  29 2A 2B 2C  
002252r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
002256r 1  25 26 27 28  
00225Ar 1  29 2A 2B 2C  
002262r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
002266r 1  25 26 27 28  
00226Ar 1  29 2A 2B 2C  
002272r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
002276r 1  25 26 27 28  
00227Ar 1  29 2A 2B 2C  
002282r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
002286r 1  25 26 27 28  
00228Ar 1  29 2A 2B 2C  
002292r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
002296r 1  25 26 27 28  
00229Ar 1  29 2A 2B 2C  
0022A2r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
0022A6r 1  25 26 27 28  
0022AAr 1  29 2A 2B 2C  
0022B2r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
0022B6r 1  25 26 27 28  
0022BAr 1  29 2A 2B 2C  
0022C2r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
0022C6r 1  25 26 27 28  
0022CAr 1  29 2A 2B 2C  
0022D2r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
0022D6r 1  25 26 27 28  
0022DAr 1  29 2A 2B 2C  
0022E2r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
0022E6r 1  25 26 27 28  
0022EAr 1  29 2A 2B 2C  
0022F2r 1               
0022F2r 1               ;constants
0022F2r 1               
0022F2r 1               ; RAM Interrupt Vectors
0022F2r 1               IRQVec            = $0314
0022F2r 1               
0022F2r 1               ; VERA
0022F2r 1               VERA_addr_low     = $9F20
0022F2r 1               VERA_addr_high    = $9F21
0022F2r 1               VERA_addr_bank    = $9F22
0022F2r 1               VERA_data0        = $9F23
0022F2r 1               VERA_data1        = $9F24
0022F2r 1               VERA_ctrl         = $9F25
0022F2r 1               VERA_ien          = $9F26
0022F2r 1               VERA_isr          = $9F27
0022F2r 1               VERA_dc_video     = $9F29 ; DCSEL = 0
0022F2r 1               FX_CTRL           = $9F29 ; DCSEL = 2
0022F2r 1               FX_CACHE_L        = $9F29 ; DCSEL = 6
0022F2r 1               FX_CACHE_M        = $9F2A
0022F2r 1               FX_CACHE_H        = $9F2B
0022F2r 1               FX_CACHE_U        = $9F2C
0022F2r 1               ;   Current Field | Sprites Enable | Layer1 Enable  |Layer0 Enable
0022F2r 1               ; NTSC/RGB: 240P  | NTSC: Chroma Disable / RGB: HV Sync Output Mode
0022F2r 1               
0022F2r 1               VERA_dc_hscale    = $9F2A
0022F2r 1               VERA_dc_vscale    = $9F2B
0022F2r 1               
0022F2r 1               VERA_L0_config    = $9F2D
0022F2r 1               ;   7       6     5   4       3       2             1   0
0022F2r 1               ;   Map Height | Map Width | T256C | Bitmap Mode | Color Depth
0022F2r 1               ;   0 - 32                  0 - 16    0 tiled       0   1bpp mono
0022F2r 1               ;   1 - 64                  1 - 256   1 enabled     1   2bpp 4 color
0022F2r 1               ;   2 - 128                                         2   4bpp 16 color
0022F2r 1               ;   3 - 256                                         3   8bpp 256 color
0022F2r 1               ;   bitmap mode - tilebase points to bitmap data, mapbase not used
0022F2r 1               ;   tile width = 0 is 320 pixels / tile width=1 is 640 pixels.. so could do 4bpp x 320?
0022F2r 1               ;   The palette offset (in 'H-Scroll (11:8)') modifies the color indexes of the bitmap in the same way as in the tile modes.
0022F2r 1               
0022F2r 1               VERA_L0_mapbase   = $9F2E
0022F2r 1               VERA_L0_tilebase  = $9F2F ;   Tile Base Address (16:11) | Tile Height 0-8/1-16 | Tile Width 0-8/1-16
0022F2r 1               VERA_L0_HSCROLL_L = $9F30 ;  H-Scroll (7:0)
0022F2r 1               VERA_L0_HSCROLL_H = $9F31 ;  - H-Scroll (11:8)
0022F2r 1               VERA_L0_VSCROLL_L = $9F32 ;  V-Scroll (7:0)
0022F2r 1               VERA_L0_VSCROLL_H = $9F33 ;  - V-Scroll (11:8)
0022F2r 1               
0022F2r 1               VERA_L1_config    = $9F34
0022F2r 1               VERA_L1_mapbase   = $9F35
0022F2r 1               VERA_L1_tilebase  = $9F36
0022F2r 1               VERA_L1_HSCROLL_L = $9F37 ;  H-Scroll (7:0)
0022F2r 1               VERA_L1_HSCROLL_H = $9F38 ;  - H-Scroll (11:8)
0022F2r 1               VERA_L1_VSCROLL_L = $9F39 ;  V-Scroll (7:0)
0022F2r 1               VERA_L1_VSCROLL_H = $9F3A ;  - V-Scroll (11:8)
0022F2r 1               
0022F2r 1               VSYNC_BIT         = $01
0022F2r 1               
0022F2r 1               ; VRAM Addresses
0022F2r 1               ;   Address range Description
0022F2r 1               ;   $00000 - $1F9BF Video RAM   - 129,424 bytes -> 126K is 129,024 (1F800)
0022F2r 1               ;   $1F9C0 - $1F9FF PSG registers
0022F2r 1               ;   $1FA00 - $1FBFF Palette
0022F2r 1               ;   $1FC00 - $1FFFF Sprite attributes
0022F2r 1               
0022F2r 1               VRAM_UNRESERVED   = $1A000      ;
0022F2r 1               ; sprite starts must be 32byte aligned...
0022F2r 1               ; only can go to 126K ...
0022F2r 1               VRAM_palette      = $1FA00      ;
0022F2r 1               VRAM_sprite_attributes = $1FC00
0022F2r 1               
0022F2r 1               SPRITES_ONLY_VGA = $41
0022F2r 1               
0022F2r 1               
0022F2r 1               
0022F2r 1               ; Kernal
0022F2r 1               CHROUT            = $FFD2
0022F2r 1               GETIN             = $FFE4
0022F2r 1               CINT              = $FF81
0022F2r 1               
0022F2r 1               
0022F2r 1               ; PETSCII Codes
0022F2r 1               WHITE             = $05
0022F2r 1               RETURN            = $0D
0022F2r 1               SPACE             = $20
0022F2r 1               ZERO_CHAR         = $30
0022F2r 1               SIX_CHAR          = $36
0022F2r 1               NINE_CHAR         = $39
0022F2r 1               
0022F2r 1               A_CHAR            = $41
0022F2r 1               C_CHAR            = $43
0022F2r 1               D_CHAR            = $44
0022F2r 1               E_CHAR            = $45
0022F2r 1               I_CHAR            = $49
0022F2r 1               O_CHAR            = $4F
0022F2r 1               T_CHAR            = $54
0022F2r 1               W_CHAR            = $57
0022F2r 1               X_CHAR            = $58
0022F2r 1               Y_CHAR            = $59
0022F2r 1               Z_CHAR            = $5A
0022F2r 1               
0022F2r 1               CLR               = $93
0022F2r 1               
0022F2r 1               ; 	$0800-$9EFF	BASIC program/variables; available to the user
0022F2r 1               WORLD_DATA = $6000 	;	so is %100 [Y 5 bits ] : [ab] 0 [X - 6 bits
0022F2r 1               SCREEN_buffer = $8000
0022F2r 1               
0022F2r 1               ; zero page layout $0022-$007F is available to user
0022F2r 1               ZP_PTR = $22
0022F2r 1               SCRATCH_PTR = $7E
0022F2r 1               
0022F2r 1               ; global data
0022F2r 1  DE AD BE EF  .byte $DE,$AD,$BE,$EF
0022F6r 1  00 00        default_irq_vector:  .addr 0
0022F8r 1  01           VSYNC_counter:       .byte 1
0022F9r 1  01           camera_facing: 		 .byte 1
0022FAr 1  13           camera_world_pos_XH:    .byte 19
0022FBr 1  A1           camera_world_pos_XL:       .byte 161
0022FCr 1  0F           camera_world_pos_YH:        .byte 15
0022FDr 1  00           camera_world_pos_YL:       .byte 0
0022FEr 1  00           camera_cell_x: 		 .byte 0
0022FFr 1  00           camera_cell_xl:       .byte 0
002300r 1  00           camera_cell_y: 		 .byte 0
002301r 1  00           camera_cell_yl:       .byte 0
002302r 1  00 00        MASTER_CLOCK:        .addr 0
002304r 1               
002304r 1               .macro stash_scratch
002304r 1               	STA (SCRATCH_PTR)
002304r 1                   INC SCRATCH_PTR
002304r 1               .endmacro
002304r 1               
002304r 1               custom_irq_handler:
002304r 1  AD 27 9F        lda VERA_isr
002307r 1  29 01           and #VSYNC_BIT
002309r 1  F0 03           beq @continue ; non-VSYNC IRQ, no tick update
00230Br 1  EE rr rr        inc VSYNC_counter
00230Er 1               @continue:
00230Er 1                  ; continue to default IRQ handler
00230Er 1  6C rr rr        jmp (default_irq_vector)
002311r 1                  ; RTI will happen after jump
002311r 1               
002311r 1               start:
002311r 1                 ; start of program - init globals
002311r 1  AD 14 03       lda IRQVec
002314r 1  8D rr rr       sta default_irq_vector
002317r 1  AD 15 03       lda IRQVec+1
00231Ar 1  8D rr rr       sta default_irq_vector+1
00231Dr 1  9C 29 9F       stz VERA_dc_video   ; disable display
002320r 1  A9 2B          lda #43 ; set scale for bitmap mode - going for 215x161 mode
002322r 1  8D 2A 9F       sta VERA_dc_hscale
002325r 1  8D 2B 9F       sta VERA_dc_vscale
002328r 1                 ; for now no L0 or L1
002328r 1               
002328r 1                 ; let's stick that test sprite data into VRAM at zero for now..
002328r 1  9C 25 9F       stz VERA_ctrl
00232Br 1  9C 20 9F       stz VERA_addr_low
00232Er 1  9C 21 9F       stz VERA_addr_high
002331r 1  A9 10          lda #$10
002333r 1  8D 22 9F       sta VERA_addr_bank
002336r 1                 ; load test VRAM data
002336r 1               
002336r 1                 ; is 512 bytes at test_cell_sprite label
002336r 1  A0 00          ldy #0
002338r 1               
002338r 1  A9 rr          LDA #<test_vram_data
00233Ar 1  85 22          STA ZP_PTR
00233Cr 1  A9 rr          LDA #>test_vram_data
00233Er 1  85 23          STA ZP_PTR+1
002340r 1  A2 10          LDX #16   ;   num pages to copy - 16 pages / 4K  - sprite addr 0-127
002342r 1  80 02          BRA :++
002344r 1                 :
002344r 1  E6 23             INC ZP_PTR+1
002346r 1                   :
002346r 1  B1 22              LDA (ZP_PTR),Y
002348r 1  8D 23 9F           STA VERA_data0
00234Br 1  C8                 INY
00234Cr 1  D0 F8              BNE :-
00234Er 1  CA                DEX
00234Fr 1  D0 F3             BNE :--
002351r 1               
002351r 1                 ; write sprite test data
002351r 1  A9 FF          LDA #255
002353r 1  8D 20 9F       STA VERA_addr_low
002356r 1  A9 FC          lda #>VRAM_sprite_attributes
002358r 1  8D 21 9F       sta VERA_addr_high
00235Br 1  A9 19          lda #$19   ;  decrement 1 bank 1
00235Dr 1  8D 22 9F       sta VERA_addr_bank
002360r 1  A2 FF          LDX #255
002362r 1                 :
002362r 1  BD rr rr         LDA test_sprite_data,X
002365r 1  8D 23 9F         STA VERA_data0
002368r 1  CA               DEX
002369r 1  D0 F7            BNE :-
00236Br 1  BD rr rr        LDA test_sprite_data,X
00236Er 1  8D 23 9F        STA VERA_data0
002371r 1               
002371r 1               
002371r 1                 ; write custom palette data  - 16 colors only for now.. $1:FA00-$1:FBFF   VERA Color Palette (256 x 2 bytes)
002371r 1  A2 1F          LDX #31
002373r 1  8E 20 9F       STX VERA_addr_low
002376r 1  A9 FA          LDA #$FA
002378r 1  8D 21 9F       STA VERA_addr_high
00237Br 1  A9 19          LDA #$19
00237Dr 1  8D 22 9F       STA VERA_addr_bank
002380r 1                 :
002380r 1  BD rr rr         LDA test_optimal_pal_data,X
002383r 1  8D 23 9F         STA VERA_data0
002386r 1  CA               DEX
002387r 1  D0 F7            BNE :-
002389r 1  BD rr rr       LDA test_optimal_pal_data,X
00238Cr 1  8D 23 9F       STA VERA_data0
00238Fr 1               
00238Fr 1                 ; enable display
00238Fr 1  9C 25 9F       stz VERA_ctrl
002392r 1  A9 41          lda #SPRITES_ONLY_VGA
002394r 1  8D 29 9F       sta VERA_dc_video
002397r 1               
002397r 1                 ; overwrite RAM IRQ vector with custom handler address
002397r 1  78             sei ; disable IRQ while vector is changing
002398r 1  A9 rr          lda #<custom_irq_handler
00239Ar 1  8D 14 03       sta IRQVec
00239Dr 1  A9 rr          lda #>custom_irq_handler
00239Fr 1  8D 15 03       sta IRQVec+1
0023A2r 1  A9 01          lda #VSYNC_BIT ; make VERA only generate VSYNC IRQs
0023A4r 1  8D 26 9F       sta VERA_ien
0023A7r 1  58             cli ; enable IRQ now that vector is properly set
0023A8r 1               
0023A8r 1                 ; calc movement table - using ACROSS_ROW_* but move 1/16 unit at a time .. at 30fps = 30/16 = ~2 units / second
0023A8r 1  A2 00          LDX #0
0023AAr 1  BD rr rr      : LDA ACROSS_ROW_Y_L,X
0023ADr 1  85 7E           STA $7E
0023AFr 1  BD rr rr        LDA ACROSS_ROW_Y_H,X
0023B2r 1  4A              LSR
0023B3r 1  26 7E           ROL $7E  ;  /2
0023B5r 1  4A              LSR
0023B6r 1  26 7E           ROL $7E  ; /4
0023B8r 1  4A              LSR
0023B9r 1  26 7E           ROL $7E  ; /8
0023BBr 1  4A              LSR
0023BCr 1  26 7E           ROL $7E  ; /16
0023BEr 1  A8              TAY
0023BFr 1  C0 08           CPY #8   ;  if original value was positive, this is the sign bit...
0023C1r 1  90 02           BCC :+
0023C3r 1  A9 FF           LDA #$FF
0023C5r 1  9D rr rr      : STA MOVE_XH,X
0023C8r 1  A5 7E           LDA $7E
0023CAr 1  9D rr rr        STA MOVE_XL,X
0023CDr 1               
0023CDr 1  BD rr rr        LDA ACROSS_ROW_X_L,X
0023D0r 1  85 7E           STA $7E
0023D2r 1  BD rr rr        LDA ACROSS_ROW_X_H,X
0023D5r 1  4A              LSR
0023D6r 1  26 7E           ROL $7E  ;  /2
0023D8r 1  4A              LSR
0023D9r 1  26 7E           ROL $7E  ; /4
0023DBr 1  4A              LSR
0023DCr 1  26 7E           ROL $7E  ; /8
0023DEr 1  4A              LSR
0023DFr 1  26 7E           ROL $7E  ; /16
0023E1r 1  A8              TAY
0023E2r 1  C0 08           CPY #8   ;  if original value was positive, this is the sign bit...
0023E4r 1  90 02           BCC :+
0023E6r 1  A9 FF           LDA #$FF
0023E8r 1  9D rr rr      : STA MOVE_YH,X
0023EBr 1  A5 7E           LDA $7E
0023EDr 1  9D rr rr        STA MOVE_YL,X
0023F0r 1  E8              INX
0023F1r 1  D0 B7           BNE :---
0023F3r 1               
0023F3r 1                 ; main loop here...
0023F3r 1  9C rr rr        STz camera_facing
0023F6r 1               
0023F6r 1               @camera_world_changed:
0023F6r 1  AD rr rr        LDA camera_world_pos_YH
0023F9r 1  8D rr rr        STA camera_cell_y
0023FCr 1  4A              LSR
0023FDr 1  85 7F           STA $7F  ; high byte
0023FFr 1  AD rr rr        LDA camera_world_pos_YL
002402r 1  8D rr rr        STA camera_cell_yl
002405r 1  6A              ROR
002406r 1  85 7E           STA $7E  ; low byte cellY.2
002408r 1                  ; cellX = WORLDX*ratio - (31-cellY)/2
002408r 1                  ; cellX = WORLDX*ratio - 15.5 + cellY/2
002408r 1  AE rr rr        LDX camera_world_pos_XH
00240Br 1  AC rr rr        LDY camera_world_pos_XL
00240Er 1  18              CLC
00240Fr 1  B9 rr rr        LDA WORLD_TO_CELL_XH,Y ; that bit from pos_XL
002412r 1  7D rr rr        ADC WORLD_TO_CELL_XL,X ; plus the bit from pos_XH
002415r 1  A8              TAY   ;  cellXL from ratio
002416r 1  BD rr rr        LDA WORLD_TO_CELL_XH,X
002419r 1  69 00           ADC #0 ; gotta do that carry and all ..
00241Br 1  AA              TAX   ; cellXH from ratio
00241Cr 1  38              SEC
00241Dr 1  98              TYA   ;  cellXL from ratio
00241Er 1  E9 80           SBC #128 ; minus 15.5L
002420r 1  A8              TAY
002421r 1  8A              TXA
002422r 1  E9 0F           SBC #15 ; minus 15.5H
002424r 1  AA              TAX
002425r 1  18              CLC
002426r 1  98              TYA ; cellXL from ratio minute 15.5
002427r 1  65 7E           ADC $7E  ; plis cellY/2
002429r 1  8D rr rr        STA camera_cell_xl
00242Cr 1  8A              TXA
00242Dr 1  65 7F           ADC $7F
00242Fr 1  D0 01           BNE :+
002431r 1  1A              INC A
002432r 1  C9 40         : CMP #64
002434r 1  90 02           BCC :+
002436r 1  A9 3F           LDA #63
002438r 1  8D rr rr      : STA camera_cell_x
00243Br 1  AD rr rr        LDA camera_cell_y
00243Er 1  D0 01           BNE :+
002440r 1  1A              INC A
002441r 1  C9 1E         : CMP #30
002443r 1  90 02           BCC :+
002445r 1  A9 1D           LDA #29
002447r 1  8D rr rr      : STA camera_cell_y
00244Ar 1               
00244Ar 1                ;  jmp @do_update
00244Ar 1               
00244Ar 1               @camera_cell_changed:
00244Ar 1  AD rr rr        LDA camera_cell_y
00244Dr 1  8D rr rr        STA camera_world_pos_YH
002450r 1  4A              LSR
002451r 1  85 7F           STA $7F  ; high byte
002453r 1  AD rr rr        LDA camera_cell_yl
002456r 1  8D rr rr        STA camera_world_pos_YL
002459r 1  6A              ROR
00245Ar 1  85 7E           STA $7E  ; low byte cellY.2
00245Cr 1                  ; worldX = (cellX + 15.5 - cellY/2)*ratio
00245Cr 1  18              CLC
00245Dr 1  AD rr rr        LDA camera_cell_xl ; +15.5
002460r 1  69 80           ADC #128
002462r 1  AA              TAX
002463r 1  AD rr rr        LDA camera_cell_x
002466r 1  69 0F           ADC #15
002468r 1  A8              TAY
002469r 1  38              SEC
00246Ar 1  8A              TXA
00246Br 1  E5 7E           SBC $7E
00246Dr 1  AA              TAX
00246Er 1  98              TYA
00246Fr 1  E5 7F           SBC $7F
002471r 1  A8              TAY
002472r 1  18              CLC
002473r 1  BD rr rr        LDA CELL_LOW_TO_WORLD_XL,X
002476r 1  79 rr rr        ADC CELL_TO_WORLD_XL,Y
002479r 1  8D rr rr        STA camera_world_pos_XL
00247Cr 1  BD rr rr        LDA CELL_LOW_TO_WORLD_XH,X
00247Fr 1  79 rr rr        ADC CELL_TO_WORLD_XH,Y
002482r 1  8D rr rr        STA camera_world_pos_XH
002485r 1  4C rr rr        jmp @do_update
002488r 1               
002488r 1               
002488r 1               @do_update:
002488r 1                  ;  write location datas..
002488r 1  A9 F8           lda #248
00248Ar 1  8D 20 9F        STA VERA_addr_low
00248Dr 1  A9 FC           LDA #$FC
00248Fr 1  8D 21 9F        STA VERA_addr_high
002492r 1  A9 49           LDA #$49
002494r 1  8D 22 9F        STA VERA_addr_bank
002497r 1               
002497r 1                  ; value of cell we are in
002497r 1  AD rr rr         LDA camera_cell_y
00249Ar 1  4A               LSR  ;  y pages of 128
00249Br 1  66 22            ROR ZP_PTR
00249Dr 1  4A               LSR  ; y pages of 64 !
00249Er 1  66 22            ROR ZP_PTR
0024A0r 1  09 rr            ORA #>TUB_WORLD
0024A2r 1  85 23            STA ZP_PTR+1
0024A4r 1  AC rr rr         LDY camera_cell_x
0024A7r 1  B1 22            LDA (ZP_PTR),y
0024A9r 1  AA               TAX
0024AAr 1  BD rr rr        LDA SPRITE_NUM_LOW_NIBBLE,X
0024ADr 1  8D 23 9F        STA VERA_data0
0024B0r 1  BD rr rr        LDA SPRITE_NUM_HIGH_NIBBLE,X
0024B3r 1  8D 23 9F        STA VERA_data0
0024B6r 1               
0024B6r 1               
0024B6r 1  A0 08           ldy #8
0024B8r 1  BE rr rr      : LDX camera_facing-1,y
0024BBr 1  BD rr rr        LDA SPRITE_NUM_LOW_NIBBLE,X
0024BEr 1  8D 23 9F        STA VERA_data0
0024C1r 1  BD rr rr        LDA SPRITE_NUM_HIGH_NIBBLE,X
0024C4r 1  8D 23 9F        STA VERA_data0
0024C7r 1  88              dey
0024C8r 1  D0 EE           BNE :-
0024CAr 1               
0024CAr 1                  ; jsr draw_test
0024CAr 1                  ; clear the object list ...
0024CAr 1  9C rr rr         STZ OBJECT_LIST_BYTE6_NEXT ; because we can't use zero anyway..
0024CDr 1  A2 00            LDX #0
0024CFr 1  9E rr rr         : STZ OBJECT_LIST_Z_START_POINTERS,X
0024D2r 1  E8                 INX
0024D3r 1  D0 FA              BNE :-
0024D5r 1               
0024D5r 1  20 rr rr        jsr push_world_to_object_list
0024D8r 1  20 rr rr        jsr draw_object_list
0024DBr 1               
0024DBr 1               @FRAME_CHECK:
0024DBr 1  CB              wai
0024DCr 1  AD rr rr        lda VSYNC_counter
0024DFr 1  F0 FA           beq @FRAME_CHECK
0024E1r 1  9C rr rr        stz VSYNC_counter
0024E4r 1  18              CLC
0024E5r 1  6D rr rr        ADC MASTER_CLOCK
0024E8r 1  AA              TAX
0024E9r 1  8D rr rr        STA MASTER_CLOCK
0024ECr 1  AD rr rr        LDA MASTER_CLOCK+1
0024EFr 1  69 00           ADC #0
0024F1r 1  8D rr rr        STA MASTER_CLOCK+1
0024F4r 1  8A              TXA
0024F5r 1                  ;AND #1 ; restrict to 20 fps.. don't care missed cycle.
0024F5r 1                  ;BNE @FRAME_CHECK
0024F5r 1                  ; poll keyboard for input
0024F5r 1  20 E4 FF        jsr GETIN
0024F8r 1  C9 00           cmp #0
0024FAr 1  F0 DF           beq @FRAME_CHECK
0024FCr 1  C9 1D           cmp #$1D 	;	cursor right
0024FEr 1  D0 05           BNE :+
002500r 1  CE rr rr        DEC camera_facing
002503r 1  80 83           BRA @do_update
002505r 1                  :
002505r 1  C9 9D           cmp  #$9D 	;	cursor left
002507r 1  D0 06           BNE :+
002509r 1  EE rr rr        INC camera_facing
00250Cr 1  4C rr rr        JMP @do_update
00250Fr 1  C9 11         : cmp #$11; cursor down
002511r 1  D0 2C           BNE :+
002513r 1  AE rr rr        LDX camera_facing
002516r 1  18              CLC
002517r 1  AD rr rr        LDA camera_world_pos_XL
00251Ar 1  7D rr rr        ADC MOVE_XL,X
00251Dr 1  8D rr rr        STA camera_world_pos_XL
002520r 1  AD rr rr        LDA camera_world_pos_XH
002523r 1  7D rr rr        ADC MOVE_XH,X
002526r 1  8D rr rr        STA camera_world_pos_XH
002529r 1  18              CLC
00252Ar 1  BD rr rr        LDA MOVE_YL,X
00252Dr 1  6D rr rr        ADC camera_world_pos_YL
002530r 1  8D rr rr        STA camera_world_pos_YL
002533r 1  BD rr rr        LDA MOVE_YH,X
002536r 1  6D rr rr        ADC camera_world_pos_YH
002539r 1  8D rr rr        STA camera_world_pos_YH
00253Cr 1  4C rr rr        jmp @camera_world_changed
00253Fr 1               
00253Fr 1  C9 91         : cmp #$91 ; cursor up
002541r 1  D0 2C           BNE :+
002543r 1  AE rr rr        LDX camera_facing
002546r 1  38              SEC
002547r 1  AD rr rr        LDA camera_world_pos_XL
00254Ar 1  FD rr rr        SBC MOVE_XL,X
00254Dr 1  8D rr rr        STA camera_world_pos_XL
002550r 1  AD rr rr        LDa camera_world_pos_XH
002553r 1  FD rr rr        SBC MOVE_XH,X
002556r 1  8D rr rr        STA camera_world_pos_XH
002559r 1  38              SEC
00255Ar 1  AD rr rr        LDA camera_world_pos_YL
00255Dr 1  FD rr rr        SBC MOVE_YL,X
002560r 1  8D rr rr        STA camera_world_pos_YL
002563r 1  AD rr rr        LDA camera_world_pos_YH
002566r 1  FD rr rr        SBC MOVE_YH,X
002569r 1  8D rr rr        STA camera_world_pos_YH
00256Cr 1  4C rr rr        jmp @camera_world_changed
00256Fr 1               
00256Fr 1  C9 57         : cmp #W_CHAR ; cell up left
002571r 1  D0 13           BNE :+++
002573r 1  AD rr rr        LDA camera_cell_y
002576r 1  F0 03           BEQ :+
002578r 1  CE rr rr        DEC camera_cell_y
00257Br 1  AD rr rr      : LDA camera_cell_x
00257Er 1  F0 03           BEQ :+
002580r 1  CE rr rr        DEC camera_cell_x
002583r 1  4C rr rr      : JMP @camera_cell_changed
002586r 1               
002586r 1  C9 45         : cmp #E_CHAR ; cell up right
002588r 1  D0 0B           BNE :++
00258Ar 1  AD rr rr        LDA camera_cell_y
00258Dr 1  F0 03           BEQ :+
00258Fr 1  CE rr rr        DEC camera_cell_y
002592r 1  4C rr rr      : JMP @camera_cell_changed
002595r 1               
002595r 1  C9 41         : cmp #A_CHAR ; cell left
002597r 1  D0 0B           BNE :++
002599r 1  AD rr rr        LDA camera_cell_x
00259Cr 1  F0 03           BEQ :+
00259Er 1  CE rr rr        DEC camera_cell_x
0025A1r 1  4C rr rr      : JMP @camera_cell_changed
0025A4r 1               
0025A4r 1  C9 44         : cmp #D_CHAR ; cell right
0025A6r 1  D0 0D           BNE :++
0025A8r 1  AD rr rr        LDA camera_cell_x
0025ABr 1  C9 3F           CMP #63
0025ADr 1  B0 03           BCS :+
0025AFr 1  EE rr rr        INC camera_cell_x
0025B2r 1  4C rr rr      : JMP @camera_cell_changed
0025B5r 1               
0025B5r 1  C9 5A         : cmp #Z_CHAR ; cell down left
0025B7r 1  D0 0D           BNE :++
0025B9r 1  AD rr rr        LDA camera_cell_y
0025BCr 1  C9 1E           CMP #30
0025BEr 1  B0 03           BCS :+
0025C0r 1  EE rr rr        INC camera_cell_y
0025C3r 1  4C rr rr      : JMP @camera_cell_changed
0025C6r 1               
0025C6r 1  C9 58         : cmp #X_CHAR ; cell down right
0025C8r 1  D0 17           BNE :+++
0025CAr 1  AD rr rr        LDA camera_cell_y
0025CDr 1  C9 1E           CMP #30
0025CFr 1  B0 03           BCS :+
0025D1r 1  EE rr rr        INC camera_cell_y
0025D4r 1  AD rr rr      : LDA camera_cell_x
0025D7r 1  C9 3F           CMP #63
0025D9r 1  B0 03           BCS :+
0025DBr 1  EE rr rr        INC camera_cell_x
0025DEr 1  4C rr rr      : JMP @camera_cell_changed
0025E1r 1               
0025E1r 1  C9 20         : cmp #SPACE;
0025E3r 1  D0 09           BNE :+
0025E5r 1  9C rr rr        STZ camera_cell_xl
0025E8r 1  9C rr rr        STZ camera_cell_yl
0025EBr 1  4C rr rr        JMP @camera_cell_changed
0025EEr 1               
0025EEr 1  C9 00         : cmp #0 ;
0025F0r 1  D0 03           BNE :+
0025F2r 1  4C rr rr        JMP @do_update
0025F5r 1               
0025F5r 1  C9 00         : cmp #0 ;
0025F7r 1  D0 03           BNE :+
0025F9r 1  4C rr rr        JMP @do_update
0025FCr 1               
0025FCr 1  C9 00         : cmp #0 ;
0025FEr 1  D0 03           BNE :+
002600r 1  4C rr rr        JMP @do_update
002603r 1               
002603r 1               
002603r 1  4C rr rr      : JMP @FRAME_CHECK
002606r 1               
002606r 1               @cleanup_and_exit:
002606r 1                  ; restore default IRQ vector
002606r 1  78              sei
002607r 1  AD rr rr        lda default_irq_vector
00260Ar 1  8D 14 03        sta IRQVec
00260Dr 1  AD rr rr        lda default_irq_vector+1
002610r 1  8D 15 03        sta IRQVec+1
002613r 1  58              cli
002614r 1  20 81 FF        jsr CINT
002617r 1  60              rts
002618r 1               
002618r 1               
002618r 1               ; CURRENT
002618r 1               push_world_to_object_list: ; as in.. let's try this again?? wait.. missing a STZ ZP_PTR...
002618r 1               PWOL_TUB_PTR_L    = ZP_PTR
002618r 1               PWOL_TUB_PTR_H    = ZP_PTR+1
002618r 1               PWOL_TUB_PTR_CUR_L= ZP_PTR+2
002618r 1               PWOL_TUB_PTR_CUR_H= ZP_PTR+3
002618r 1               PWOL_ROW_START_XL = ZP_PTR+4
002618r 1               PWOL_ROW_START_XH = ZP_PTR+5
002618r 1               PWOL_ROW_START_YL = ZP_PTR+6
002618r 1               PWOL_ROW_START_YH = ZP_PTR+7
002618r 1               PWOL_CURRENT_XL   = ZP_PTR+8
002618r 1               PWOL_CURRENT_XH   = ZP_PTR+9
002618r 1               PWOL_CURRENT_YL   = ZP_PTR+10
002618r 1               PWOL_CURRENT_YH   = ZP_PTR+11
002618r 1               PWOL_ACROSS_ROW_XL= ZP_PTR+12
002618r 1               PWOL_ACROSS_ROW_XH= ZP_PTR+13
002618r 1               PWOL_ACROSS_ROW_YL= ZP_PTR+14
002618r 1               PWOL_ACROSS_ROW_YH= ZP_PTR+15
002618r 1               PWOL_NEXT_ROW_XL  = ZP_PTR+16
002618r 1               PWOL_NEXT_ROW_XH  = ZP_PTR+17
002618r 1               PWOL_NEXT_ROW_YL  = ZP_PTR+18
002618r 1               PWOL_NEXT_ROW_YH  = ZP_PTR+19
002618r 1               PWOL_Z_STARTS_PTR = ZP_PTR+20
002618r 1               PWOL_Z_STARTS_PTRH = ZP_PTR+21
002618r 1               
002618r 1  A9 rr           LDA #>OBJECT_LIST_Z_START_POINTERS
00261Ar 1  85 37           STA PWOL_Z_STARTS_PTRH
00261Cr 1  AE rr rr        LDX camera_facing
00261Fr 1               
00261Fr 1  BD rr rr        LDA ACROSS_ROW_X_L,x
002622r 1  85 2E           STA PWOL_ACROSS_ROW_XL
002624r 1  BD rr rr        LDA ACROSS_ROW_X_H,x
002627r 1  85 2F           STA PWOL_ACROSS_ROW_XH
002629r 1  BD rr rr        LDA ACROSS_ROW_Y_L,x
00262Cr 1  85 30           STA PWOL_ACROSS_ROW_YL
00262Er 1  BD rr rr        LDA ACROSS_ROW_Y_H,x
002631r 1  85 31           STA PWOL_ACROSS_ROW_YH
002633r 1               
002633r 1  BD rr rr        LDA NEXT_ROW_X_L,x
002636r 1  85 32           STA PWOL_NEXT_ROW_XL
002638r 1  BD rr rr        LDA NEXT_ROW_X_H,x
00263Br 1  85 33           STA PWOL_NEXT_ROW_XH
00263Dr 1  BD rr rr        LDA NEXT_ROW_Y_L,x
002640r 1  85 34           STA PWOL_NEXT_ROW_YL
002642r 1  BD rr rr        LDA NEXT_ROW_Y_H,x
002645r 1  85 35           STA PWOL_NEXT_ROW_YH
002647r 1               
002647r 1               
002647r 1  64 22            STZ PWOL_TUB_PTR_L
002649r 1  AD rr rr         LDA camera_cell_y
00264Cr 1  4A               LSR  ;  y pages of 128
00264Dr 1  66 22            ROR PWOL_TUB_PTR_L
00264Fr 1  4A               LSR  ; y pages of 64 !
002650r 1  66 22            ROR PWOL_TUB_PTR_L
002652r 1  09 rr            ORA #>TUB_WORLD
002654r 1  85 23            STA PWOL_TUB_PTR_H
002656r 1  85 25            STA PWOL_TUB_PTR_CUR_H
002658r 1  A5 22            LDA PWOL_TUB_PTR_L
00265Ar 1  85 24            STA PWOL_TUB_PTR_CUR_L    ;  this only changes per row not quadrant like the other values..
00265Cr 1               
00265Cr 1               
00265Cr 1               ;  quadrant A -> left along rows, then row counts down... across row - subtract XY, next row subtract XY
00265Cr 1  64 26            STZ PWOL_ROW_START_XL
00265Er 1  64 2A            STZ PWOL_CURRENT_XL
002660r 1  A9 64            LDA #100
002662r 1  85 27            STA PWOL_ROW_START_XH
002664r 1  85 2B            STA PWOL_CURRENT_XH
002666r 1               
002666r 1  64 28            STZ PWOL_ROW_START_YL
002668r 1  64 2C            STZ PWOL_CURRENT_YL
00266Ar 1  A9 82            LDA #130
00266Cr 1  85 29            STA PWOL_ROW_START_YH
00266Er 1                  @QUAD_A_NEW_ROW_LOOP:
00266Er 1  A5 26               LDA PWOL_ROW_START_XL
002670r 1  85 2A               STA PWOL_CURRENT_XL
002672r 1               
002672r 1  A5 27               LDA PWOL_ROW_START_XH
002674r 1  85 2B               STA PWOL_CURRENT_XH
002676r 1               
002676r 1  A5 28               LDA PWOL_ROW_START_YL
002678r 1  85 2C               STA PWOL_CURRENT_YL
00267Ar 1               
00267Ar 1  A5 29               LDA PWOL_ROW_START_YH
00267Cr 1  85 2D               STA PWOL_CURRENT_YH
00267Er 1               
00267Er 1  AC rr rr            LDY camera_cell_x   ;  eh voila! we haz pointer to ze row to start on .. woot!
002681r 1               
002681r 1                  @QUAD_A_ROW_LOOP:
002681r 1  38                  SEC
002682r 1  A9 FF               LDA #255
002684r 1  E5 2D               SBC PWOL_CURRENT_YH    ;  current screenY .. to calculate effective Z for the buffer
002686r 1  85 36               STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
002688r 1  B2 36               LDA (PWOL_Z_STARTS_PTR)
00268Ar 1  EE rr rr            INC OBJECT_LIST_BYTE6_NEXT ;
00268Dr 1  AE rr rr            LDX OBJECT_LIST_BYTE6_NEXT ; grabbed next available thingy
002690r 1  9D rr rr            STA OBJECT_LIST_BYTE6_NEXT,X ; old next saved to this next object .. sweet !
002693r 1  8A                  TXA
002694r 1  92 36               STA (PWOL_Z_STARTS_PTR)   ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
002696r 1               
002696r 1                      ; these are all the same.. so 1,2,4,5,6 filled in.. need 0,3 - addr and Y, which will depend on what we find there..
002696r 1  9E rr rr            STZ OBJECT_LIST_BYTE1_MODE,X ; 16 color low address
002699r 1  A9 0C               LDA #$0C
00269Br 1  9D rr rr            STA OBJECT_LIST_BYTE4_ZFLIPS,X
00269Er 1  A9 50               LDA #$50
0026A0r 1  9D rr rr            STA OBJECT_LIST_BYTE5_SIZE,X
0026A3r 1  A5 2B               LDA PWOL_CURRENT_XH
0026A5r 1  9D rr rr            STA OBJECT_LIST_BYTE2_X,X
0026A8r 1               
0026A8r 1  B1 24               LDA (PWOL_TUB_PTR_CUR_L),y   ; get "height" of object.. for now we only care is it zero or neg..
0026AAr 1  10 0C               BPL @QA_IS_INSIDE_TUB
0026ACr 1  A9 46                 LDA #70
0026AEr 1  9D rr rr              STA OBJECT_LIST_BYTE0_ADDRLOW,X
0026B1r 1  A5 2D                 LDA PWOL_CURRENT_YH
0026B3r 1  9D rr rr              STA OBJECT_LIST_BYTE3_Y,X
0026B6r 1  80 08                 BRA @NEXT_OBJ
0026B8r 1               
0026B8r 1                      @QA_IS_INSIDE_TUB:
0026B8r 1  9E rr rr              STZ OBJECT_LIST_BYTE0_ADDRLOW,X
0026BBr 1  A5 2D                 LDA PWOL_CURRENT_YH
0026BDr 1  9D rr rr              STA OBJECT_LIST_BYTE3_Y,X
0026C0r 1                      @NEXT_OBJ:
0026C0r 1  38                      SEC
0026C1r 1  A5 2A                   LDA PWOL_CURRENT_XL
0026C3r 1  E5 2E                   SBC PWOL_ACROSS_ROW_XL
0026C5r 1  85 2A                   STA PWOL_CURRENT_XL
0026C7r 1  A5 2B                   LDA PWOL_CURRENT_XH
0026C9r 1  E5 2F                   SBC PWOL_ACROSS_ROW_XH
0026CBr 1  C9 D0                   CMP #208
0026CDr 1  B0 16                   BCS @quad_A_next_row
0026CFr 1  85 2B                   STA PWOL_CURRENT_XH
0026D1r 1  38                      SEC
0026D2r 1  A5 2C                   LDA PWOL_CURRENT_YL
0026D4r 1  E5 30                   SBC PWOL_ACROSS_ROW_YL
0026D6r 1  85 2C                   STA PWOL_CURRENT_YL
0026D8r 1  A5 2D                   LDA PWOL_CURRENT_YH
0026DAr 1  E5 31                   SBC PWOL_ACROSS_ROW_YH
0026DCr 1  C9 99                   CMP #153
0026DEr 1  B0 05                   BCS @quad_A_next_row
0026E0r 1  85 2D                   STA PWOL_CURRENT_YH
0026E2r 1  88                      DEY
0026E3r 1  D0 9C                   BNE @QUAD_A_ROW_LOOP
0026E5r 1                     @quad_A_next_row:
0026E5r 1  38                    SEC
0026E6r 1  A5 24                 LDA PWOL_TUB_PTR_CUR_L
0026E8r 1  E9 40                 SBC #64
0026EAr 1  85 24                 STA PWOL_TUB_PTR_CUR_L
0026ECr 1  A5 25                 LDA PWOL_TUB_PTR_CUR_H
0026EEr 1  E9 00                 SBC #0
0026F0r 1  C9 10                 CMP #$10    ;  did we go out top of world
0026F2r 1  90 27                 BCC @quad_B
0026F4r 1  85 25                 STA PWOL_TUB_PTR_CUR_H
0026F6r 1  38                    SEC
0026F7r 1  A5 26                 LDA PWOL_ROW_START_XL
0026F9r 1  E5 32                 SBC PWOL_NEXT_ROW_XL
0026FBr 1  85 26                 STA PWOL_ROW_START_XL
0026FDr 1  A5 27                 LDA PWOL_ROW_START_XH
0026FFr 1  E5 33                 SBC PWOL_NEXT_ROW_XH
002701r 1  C9 D0                 CMP #208
002703r 1  B0 16                 BCS @quad_B
002705r 1  85 27                 STA PWOL_ROW_START_XH
002707r 1  38                    SEC
002708r 1  A5 28                 LDA PWOL_ROW_START_YL
00270Ar 1  E5 34                 SBC PWOL_NEXT_ROW_YL
00270Cr 1  85 28                 STA PWOL_ROW_START_YL
00270Er 1  A5 29                 LDA PWOL_ROW_START_YH
002710r 1  E5 35                 SBC PWOL_NEXT_ROW_YH
002712r 1  C9 99                 CMP #153
002714r 1  B0 05                 BCS @quad_B
002716r 1  85 29                 STA PWOL_ROW_START_YH
002718r 1  4C rr rr              JMP @QUAD_A_NEW_ROW_LOOP
00271Br 1               
00271Br 1                  @quad_B:
00271Br 1  60                    rts
00271Cr 1               ; push_world_to_object_list:
00271Cr 1  64 22            STZ ZP_PTR
00271Er 1  AD rr rr         LDA camera_cell_y
002721r 1  4A               LSR  ;  y pages of 128
002722r 1  66 22            ROR ZP_PTR
002724r 1  4A               LSR  ; y pages of 64 !
002725r 1  66 22            ROR ZP_PTR
002727r 1  09 rr            ORA #>TUB_WORLD
002729r 1  85 23            STA ZP_PTR+1   ; for first quadrant start
00272Br 1  85 27            STA ZP_PTR+5   ; second quadrant starts same row
00272Dr 1  AD rr rr         LDA camera_cell_x
002730r 1  29 3F            AND #63
002732r 1  05 22            ORA ZP_PTR
002734r 1  85 22            STA ZP_PTR     ; first quadrant start - center and right/up
002736r 1  3A               DEC A
002737r 1  85 24            STA ZP_PTR+2   ; second quadrant start - left of center and to left/up
002739r 1  18               CLC
00273Ar 1  A5 22            LDA ZP_PTR    ; batter up!
00273Cr 1  69 40            ADC #64       ;  next row time
00273Er 1  AA               TAX           ; stash it
00273Fr 1  85 26            STA ZP_PTR+4   ; third quadrant start - row below center going right/down
002741r 1  A5 23            LDA ZP_PTR+1
002743r 1  69 00            ADC #0
002745r 1  85 27            STA ZP_PTR+5
002747r 1  85 29            STA ZP_PTR+7
002749r 1  CA               DEX
00274Ar 1  86 28            STX ZP_PTR+6   ; forth quadrant start - left center, down/left
00274Cr 1                  @quadrant_one_center_right_up:
00274Cr 1  64 2A               STZ ZP_PTR+8 ; X row start
00274Er 1  64 2E               STZ ZP_PTR+12 ; current spot
002750r 1  A9 64               LDA #100
002752r 1  85 2B               STA ZP_PTR+9
002754r 1  85 2F               STA ZP_PTR+13
002756r 1               
002756r 1  64 2C               STZ ZP_PTR+10 ; Y row start
002758r 1  64 30               STZ ZP_PTR+14 ; current spot
00275Ar 1  A9 78               LDA #120
00275Cr 1  85 2D               STA ZP_PTR+11
00275Er 1  85 31               STA ZP_PTR+15
002760r 1               
002760r 1  AE rr rr            LDX camera_facing
002763r 1  BD rr rr            LDA ACROSS_ROW_X_L,x
002766r 1  85 32               STA ZP_PTR+16
002768r 1  BD rr rr            LDA ACROSS_ROW_X_H,x
00276Br 1  85 33               STA ZP_PTR+17
00276Dr 1  BD rr rr            LDA ACROSS_ROW_Y_L,x
002770r 1  85 34               STA ZP_PTR+18
002772r 1  BD rr rr            LDA ACROSS_ROW_Y_H,x
002775r 1  85 35               STA ZP_PTR+19
002777r 1               
002777r 1  BD rr rr            LDA NEXT_ROW_X_L,X
00277Ar 1  85 36               STA ZP_PTR+20
00277Cr 1  BD rr rr            LDA NEXT_ROW_X_H,X
00277Fr 1  85 37               STA ZP_PTR+21
002781r 1  BD rr rr            LDA NEXT_ROW_Y_L,X
002784r 1  85 38               STA ZP_PTR+22
002786r 1  BD rr rr            LDA NEXT_ROW_Y_H,X
002789r 1  85 39               STA ZP_PTR+23
00278Br 1  A5 22               LDA ZP_PTR
00278Dr 1  85 3A               STA ZP_PTR+24 ; for going along the row... right!
00278Fr 1  A5 23               LDA ZP_PTR+1
002791r 1  85 3B               STA ZP_PTR+25
002793r 1  80 14               bra @quad_one_row_loop
002795r 1                     @quad_one_row_loop_next:
002795r 1  85 2D                    STA ZP_PTR+11
002797r 1  85 31                    STA ZP_PTR+15
002799r 1  A5 22                    LDA ZP_PTR
00279Br 1  E9 3F                    SBC #63
00279Dr 1  85 22                    STA ZP_PTR
00279Fr 1  85 3A                    STA ZP_PTR+24
0027A1r 1  A5 23                    LDA ZP_PTR+1
0027A3r 1  E9 00                    SBC #0
0027A5r 1  85 23                    STA ZP_PTR+1
0027A7r 1  85 3B                    STA ZP_PTR+25
0027A9r 1                     @quad_one_row_loop:
0027A9r 1  EE rr rr               INC OBJECT_LIST_BYTE6_NEXT ;
0027ACr 1  AE rr rr               LDX OBJECT_LIST_BYTE6_NEXT ; grabbed next available thingy
0027AFr 1  A4 31                  LDY ZP_PTR+15 ; current screen Y ... sneaky? maybe..
0027B1r 1  B9 rr rr               LDA OBJECT_LIST_Z_START_POINTERS,Y ; old next pointer
0027B4r 1  9D rr rr               STA OBJECT_LIST_BYTE6_NEXT,X
0027B7r 1  8A                     TXA
0027B8r 1  99 rr rr               STA OBJECT_LIST_Z_START_POINTERS,Y ; set new next pointer
0027BBr 1  98                     TYA
0027BCr 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X
0027BFr 1  B2 3A                  LDA (ZP_PTR+24)
0027C1r 1  F0 02                  BEQ :+
0027C3r 1  A9 46                  LDA #70 ; is non zero.. for now means outside world..
0027C5r 1  9D rr rr             : STA OBJECT_LIST_BYTE0_ADDRLOW,X
0027C8r 1  9E rr rr               STZ OBJECT_LIST_BYTE1_MODE,X ; 16 color low address
0027CBr 1  A9 0C                  LDA #$0C
0027CDr 1  9D rr rr               STA OBJECT_LIST_BYTE4_ZFLIPS,X
0027D0r 1  A9 50                  LDA #$50
0027D2r 1  9D rr rr               STA OBJECT_LIST_BYTE5_SIZE,X
0027D5r 1                         ; attempt move along row
0027D5r 1  18                     CLC
0027D6r 1  A5 2E                  LDA ZP_PTR+12
0027D8r 1  65 32                  ADC ZP_PTR+16
0027DAr 1  85 2E                  STA ZP_PTR+12
0027DCr 1  A5 2F                  LDA ZP_PTR+13
0027DEr 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X
0027E1r 1  65 33                  ADC ZP_PTR+17
0027E3r 1  C9 D0                  CMP #208
0027E5r 1  B0 0F                  BCS @quad_one_next_row
0027E7r 1  85 2F                  STA ZP_PTR+13
0027E9r 1  A5 30                  LDA ZP_PTR+14
0027EBr 1  65 34                  ADC ZP_PTR+18
0027EDr 1  85 2F                  STA ZP_PTR+13
0027EFr 1  98                     TYA
0027F0r 1  65 35                  ADC ZP_PTR+19
0027F2r 1  C9 9A                  CMP #154
0027F4r 1  90 B3                  BCC @quad_one_row_loop
0027F6r 1                       @quad_one_next_row:
0027F6r 1  18                       CLC
0027F7r 1  A5 2A                    LDA ZP_PTR+8
0027F9r 1  65 36                    ADC ZP_PTR+20
0027FBr 1  85 2A                    STA ZP_PTR+8
0027FDr 1  85 2E                    STA ZP_PTR+12
0027FFr 1  A5 2B                    LDA ZP_PTR+9
002801r 1  65 37                    ADC ZP_PTR+21
002803r 1  C9 D0                    CMP #208
002805r 1  85 2B                    STA ZP_PTR+9
002807r 1  85 2F                    STA ZP_PTR+13
002809r 1  B0 13                    BCS @quad_two
00280Br 1  A5 2C                    LDA ZP_PTR+10
00280Dr 1  65 38                    ADC ZP_PTR+22
00280Fr 1  85 2C                    STA ZP_PTR+10
002811r 1  85 30                    STA ZP_PTR+14
002813r 1  A5 2D                    LDA ZP_PTR+11
002815r 1  65 39                    ADC ZP_PTR+23
002817r 1  C9 9A                    CMP #154
002819r 1  B0 03                    BCS @quad_two
00281Br 1  4C rr rr                 jmp @quad_one_row_loop_next
00281Er 1                     @quad_two:
00281Er 1               
00281Er 1  60               rts
00281Fr 1               
00281Fr 1               draw_object_list:
00281Fr 1  9C 25 9F         STZ VERA_ctrl
002822r 1  9C 20 9F         STZ VERA_addr_low
002825r 1  A9 FD            lda #(>VRAM_sprite_attributes)+1
002827r 1  8D 21 9F         sta VERA_addr_high
00282Ar 1  A9 11            lda #$11
00282Cr 1  8D 22 9F         sta VERA_addr_bank
00282Fr 1  64 22            STZ ZP_PTR
002831r 1  A9 rr            LDA #>OBJECT_LIST_Z_START_POINTERS
002833r 1  85 23            STA ZP_PTR+1
002835r 1  A0 60            LDY #96 ; num sprites can write
002837r 1  80 05            BRA @Z_LOOP ; skip to the good stuff
002839r 1                 @NEXT_Z:
002839r 1  E6 22              INC ZP_PTR
00283Br 1  D0 01              BNE @Z_LOOP
00283Dr 1  60                 rts
00283Er 1                 @Z_LOOP:
00283Er 1  B2 22              LDA (ZP_PTR) ; get our first victim
002840r 1  AA                 TAX
002841r 1  A9 00              LDA #0
002843r 1  92 22              STA (ZP_PTR) ; zero this Z_next for now
002845r 1  8A                 TXA
002846r 1                    @OBJ_LOOP:
002846r 1  AA                    TAX
002847r 1  F0 F0                 BEQ @NEXT_Z ; got a bum next pointer there ...
002849r 1  BD rr rr              LDA OBJECT_LIST_BYTE0_ADDRLOW,X
00284Cr 1  8D 23 9F              STA VERA_data0
00284Fr 1  BD rr rr              LDA OBJECT_LIST_BYTE1_MODE,x
002852r 1  8D 23 9F              STA VERA_data0
002855r 1  BD rr rr              LDA OBJECT_LIST_BYTE2_X,x
002858r 1  8D 23 9F              STA VERA_data0
00285Br 1  9C 23 9F              STZ VERA_data0
00285Er 1  BD rr rr              LDA OBJECT_LIST_BYTE3_Y,x
002861r 1  8D 23 9F              STA VERA_data0
002864r 1  9C 23 9F              STZ VERA_data0
002867r 1  BD rr rr              LDA OBJECT_LIST_BYTE4_ZFLIPS,x
00286Ar 1  8D 23 9F              STA VERA_data0
00286Dr 1  BD rr rr              LDA OBJECT_LIST_BYTE5_SIZE,x
002870r 1  8D 23 9F              STA VERA_data0
002873r 1  BD rr rr              LDA OBJECT_LIST_BYTE6_NEXT,x
002876r 1  88                    DEY ; decrement that Y
002877r 1  D0 CD                 BNE @OBJ_LOOP ; still sprite slots left.. woot!
002879r 1  92 22                 STA (ZP_PTR) ; oops.. save that last thing and exit..
00287Br 1  60                    RTS
00287Cr 1               
00287Cr 1               
00287Cr 1               ; all the objects need to get into a structure to be drawn at each screen Y..
00287Cr 1               ; need object type, screenX .. store back to front .. track # objects to be drawn ?
00287Cr 1               ; there's 120 lines on screen.. up to say 32 objects per line would need about 8K RAM for the list.. each line needs 64 bytes
00287Cr 1               
00287Cr 1               draw_test:
00287Cr 1  9C 20 9F         STZ VERA_addr_low
00287Fr 1  A9 FD            lda #(>VRAM_sprite_attributes)+1
002881r 1  8D 21 9F         sta VERA_addr_high
002884r 1  A9 11            lda #$11
002886r 1  8D 22 9F         sta VERA_addr_bank
002889r 1               
002889r 1               
002889r 1  AD 25 9F         LDA VERA_ctrl
00288Cr 1  49 01            EOR #1
00288Er 1  8D 25 9F         STA VERA_ctrl ; switch to set addr1
002891r 1                   ; 64x64 pixel in the middle would be 32x32.. 2048+32 = 2080 $820
002891r 1  A9 20            LDA #$20
002893r 1  8D 20 9F         STA VERA_addr_low
002896r 1  85 4A            STA ZP_PTR+40
002898r 1  A9 08            LDA #$08
00289Ar 1  8D 21 9F         STA VERA_addr_high
00289Dr 1  85 4B            STA ZP_PTR+41
00289Fr 1  A9 11            LDA #$11            ;  draw 1 to the right at a time..
0028A1r 1  8D 22 9F         STA VERA_addr_bank
0028A4r 1               
0028A4r 1               
0028A4r 1                   ; load increments and set start position...
0028A4r 1  AE rr rr         LDX camera_facing
0028A7r 1  8A               TXA
0028A8r 1  49 80            EOR #$80
0028AAr 1  85 33            STA ZP_PTR+17
0028ACr 1                   ; increments across rows
0028ACr 1  64 32            STZ ZP_PTR+16   ; 	set quad jump index
0028AEr 1               
0028AEr 1  64 2E            STZ ZP_PTR+12 	;	next row  start XL at ZP_PTR+12
0028B0r 1  64 30            STZ ZP_PTR+14 	;	next row  start YL at ZP_PTR+14
0028B2r 1               
0028B2r 1  A9 64            LDA #100
0028B4r 1  85 2F            STA ZP_PTR+13 	;	next row start at XH ZP_PTR+13
0028B6r 1  A9 84            LDA #132
0028B8r 1  85 31         	 STA ZP_PTR+15 	;	next row start YH at ZP_PTR+15
0028BAr 1               
0028BAr 1  BD rr rr         LDA ACROSS_ROW_X_L,X
0028BDr 1  85 26            STA ZP_PTR+4 	; 	ZP_PTR+4 = spriteX increment Low byte
0028BFr 1  BD rr rr         LDA ACROSS_ROW_X_H,X
0028C2r 1  85 27            STA ZP_PTR+5 	;	ZP_PTR+4 = spriteX increment high byte
0028C4r 1  BD rr rr         LDA ACROSS_ROW_Y_L,X
0028C7r 1  85 28            STA ZP_PTR+6 	; 	ZP_PTR+6 = spriteY increment low byte
0028C9r 1  BD rr rr         LDA ACROSS_ROW_Y_H,X
0028CCr 1  85 29            STA ZP_PTR+7 	; 	ZP_PTR+3 = spriteY increment
0028CEr 1                   ; increments o next rows
0028CEr 1  BD rr rr         LDA NEXT_ROW_X_L,X
0028D1r 1  85 2A            STA ZP_PTR+8 	; 	ZP_PTR+4 = spriteX increment Low byte
0028D3r 1  BD rr rr         LDA NEXT_ROW_X_H,X
0028D6r 1  85 2B            STA ZP_PTR+9 	;	ZP_PTR+4 = spriteX increment high byte
0028D8r 1  BD rr rr         LDA NEXT_ROW_Y_L,X
0028DBr 1  85 2C            STA ZP_PTR+10 	; 	ZP_PTR+6 = spriteY increment low byte
0028DDr 1  BD rr rr         LDA NEXT_ROW_Y_H,X
0028E0r 1  85 2D            STA ZP_PTR+11	; 	ZP_PTR+3 = spriteY increment
0028E2r 1               
0028E2r 1  A9 50            LDA #$50
0028E4r 1  85 40            STA ZP_PTR+30
0028E6r 1               
0028E6r 1  64 42            STZ ZP_PTR+32
0028E8r 1  AD rr rr         LDA camera_cell_y
0028EBr 1  4A               LSR  ;  y pages of 128
0028ECr 1  66 42            ROR ZP_PTR+32
0028EEr 1  4A               LSR  ; y pages of 64 !
0028EFr 1  66 42            ROR ZP_PTR+32
0028F1r 1  09 rr            ORA #>TUB_WORLD
0028F3r 1  85 43            STA ZP_PTR+33
0028F5r 1  85 45            STA ZP_PTR+35
0028F7r 1  85 47            STA ZP_PTR+37
0028F9r 1  AD rr rr         LDA camera_cell_x
0028FCr 1  29 3F            AND #63
0028FEr 1  05 42            ORA ZP_PTR+32
002900r 1  85 42            STA ZP_PTR+32    ;  lookup pointer configured for start  - for setting up quadrants
002902r 1  85 44            STA ZP_PTR+34    ;  this is copy for going to next row
002904r 1  85 46            STA ZP_PTR+36    ;  this one's for incrementing along the row..
002906r 1                   ; first quadrant increments along the row
002906r 1  A9 01            LDA #1
002908r 1  85 48            STA ZP_PTR+38
00290Ar 1                   ; next row goes up-right
00290Ar 1  A9 C0            LDA #192
00290Cr 1  85 49            STA ZP_PTR+39
00290Er 1               
00290Er 1  A0 60            LDY #96		;	amount of sprites we can write max
002910r 1               
002910r 1                 @quad_loop:
002910r 1  A2 0A           LDX #10
002912r 1  86 7F           STX $7F
002914r 1  80 28          	bra @do_row
002916r 1                 @next_row:
002916r 1  38                 SEC
002917r 1  A5 44              LDA ZP_PTR+34
002919r 1  E9 40              SBC #64
00291Br 1  85 44              STA ZP_PTR+34
00291Dr 1  85 46              STA ZP_PTR+36
00291Fr 1  A5 45              LDA ZP_PTR+35
002921r 1  E9 00              SBC #0
002923r 1  85 45              STA ZP_PTR+35
002925r 1  85 47              STA ZP_PTR+37
002927r 1               
002927r 1  38                 SEC
002928r 1  A5 4A              LDA ZP_PTR+40
00292Ar 1  E9 40              SBC #64
00292Cr 1  85 4A              STA ZP_PTR+40
00292Er 1  8D 20 9F           STA VERA_addr_low
002931r 1  A5 4B              LDA ZP_PTR+41
002933r 1  E9 00              SBC #0
002935r 1  85 4B              STA ZP_PTR+41
002937r 1  8D 21 9F           STA VERA_addr_high
00293Ar 1  88                 DEY
00293Br 1  D0 01              BNE @do_row
00293Dr 1  60                 rts
00293Er 1                 @do_row:
00293Er 1  C6 7F              DEC $7F
002940r 1  D0 03              BNE :+
002942r 1  4C rr rr           JMP @next_quad
002945r 1                    :
002945r 1  A2 07           LDX #7
002947r 1  A5 2E          	LDA ZP_PTR+12 	;
002949r 1  85 22          	STA ZP_PTR 		;	current row XL
00294Br 1               
00294Br 1  38               SEC  ; clear before doing 16bit add!
00294Cr 1  E5 2A            SBC ZP_PTR+8
00294Er 1  85 2E            STA ZP_PTR+12 	;	next row XL
002950r 1  A5 2F            LDA ZP_PTR+13 	;
002952r 1  85 23            STA ZP_PTR+1  ;  current row XH
002954r 1  E5 2B            SBC ZP_PTR+9  ;
002956r 1  85 2F            STA ZP_PTR+13    ;  next row XH
002958r 1               
002958r 1  A5 23            LDA ZP_PTR+1
00295Ar 1  C9 C9            CMP #201
00295Cr 1  90 03            BCC :+
00295Er 1  4C rr rr         JMP @next_quad 		;	off screen
002961r 1                   :
002961r 1  38               SEC  ; clear before doing 16bit add!
002962r 1  A5 30            LDA ZP_PTR+14
002964r 1  85 24            STA ZP_PTR+2 	;	current row YL
002966r 1  E5 2C            SBC ZP_PTR+10
002968r 1  85 30            STA ZP_PTR+14 	;	next row YL
00296Ar 1  A5 31            LDA ZP_PTR+15
00296Cr 1  85 25            STA ZP_PTR+3
00296Er 1  E5 2D            SBC ZP_PTR+11
002970r 1  85 31            STA ZP_PTR+15    ;  next row YH
002972r 1               
002972r 1  A5 25            LDA ZP_PTR+3
002974r 1  C9 99            CMP #153
002976r 1  B0 78            BCS @next_quad;	off screen
002978r 1                 @forward_row_loop:
002978r 1  B2 46              LDA (ZP_PTR+36)   ; read the thing
00297Ar 1  F0 04              BEQ :+
00297Cr 1  A9 46              LDA #70
00297Er 1  80 02              BRA :++
002980r 1  A9 00            : LDA #0 ; 	address 12:5
002982r 1  8D 23 9F         : STA VERA_data0
002985r 1  8D 24 9F           STA VERA_data1
002988r 1  9C 23 9F           STZ VERA_data0 ;  mode  | address 16:13
00298Br 1  A5 23              LDA ZP_PTR+1
00298Dr 1  8D 23 9F           STA VERA_data0 ; 	X 7:0
002990r 1  9C 23 9F           STZ VERA_data0 ; 	X 9:8
002993r 1  A5 25              LDA ZP_PTR+3  ; 	spriteY
002995r 1  8D 23 9F           STA VERA_data0 ;  Y 7:0
002998r 1  9C 23 9F           STZ VERA_data0 ; 	Y 9:8
00299Br 1  A9 0C              LDA #$0C
00299Dr 1  8D 23 9F           STA VERA_data0 	; 	3 z depth no flip
0029A0r 1  A9 50              LDA #$50 			; 	16x8 no palette offset
0029A2r 1  A5 40              LDA ZP_PTR+30;
0029A4r 1  8D 23 9F           STA VERA_data0
0029A7r 1                   ; increment along row
0029A7r 1  18               CLC
0029A8r 1  A5 46            LDA ZP_PTR+36
0029AAr 1  65 48            ADC ZP_PTR+38
0029ACr 1  85 46            STA ZP_PTR+36 ; this _should_ be only +/- 1 ... right?
0029AEr 1               
0029AEr 1                   ; increment X
0029AEr 1  18               CLC  ; clear before doing 16bit add!
0029AFr 1  A5 22              LDA ZP_PTR 	;	load X_l
0029B1r 1               
0029B1r 1  65 26              ADC ZP_PTR+4
0029B3r 1  85 22              STA ZP_PTR
0029B5r 1               
0029B5r 1  A5 23              LDA ZP_PTR+1
0029B7r 1  65 27              ADC ZP_PTR+5
0029B9r 1  C9 20              CMP #32
0029BBr 1  90 04              BCC :+
0029BDr 1  C9 A7              CMP #167
0029BFr 1  90 03              BCC :++
0029C1r 1  4C rr rr           : JMP @next_row		; covers negatives even..
0029C4r 1  85 23              : STA ZP_PTR+1
0029C6r 1                   ; increment Y
0029C6r 1  18               CLC  ; clear before doing 16bit add!
0029C7r 1               
0029C7r 1  A5 24              LDA ZP_PTR+2 	;
0029C9r 1  65 28              ADC ZP_PTR+6
0029CBr 1  85 24              STA ZP_PTR+2
0029CDr 1               
0029CDr 1  A5 25              LDA ZP_PTR+3
0029CFr 1  65 29              ADC ZP_PTR+7
0029D1r 1  C9 20              CMP #32
0029D3r 1  90 04              BCC :+
0029D5r 1  C9 99              CMP #153
0029D7r 1  90 03              BCC :++
0029D9r 1  4C rr rr           : JMP @next_row     ; covers negatives even..
0029DCr 1                     :
0029DCr 1  85 25              STA ZP_PTR+3
0029DEr 1  CA                 DEX
0029DFr 1  D0 03              BNE :+
0029E1r 1  4C rr rr           JMP @next_row     ; covers negatives even..
0029E4r 1                     :
0029E4r 1  88                 DEY
0029E5r 1  D0 91              BNE @forward_row_loop
0029E7r 1                 @end:
0029E7r 1  AD 25 9F         LDA VERA_ctrl
0029EAr 1  49 01            EOR #1
0029ECr 1  8D 25 9F         STA VERA_ctrl ; switch to unset addr1
0029EFr 1  60                rts
0029F0r 1               
0029F0r 1                 @next_quad:
0029F0r 1               
0029F0r 1  E6 40          	  inc ZP_PTR+30
0029F2r 1  A6 32          	  LDX ZP_PTR+16 	;
0029F4r 1  8A             	  TXA
0029F5r 1  18             	  CLC
0029F6r 1  69 02          	  ADC #2
0029F8r 1  85 32          	  STA ZP_PTR+16
0029FAr 1  7C rr rr       	  jmp (@t_quads,X) 	;
0029FDr 1                 	@t_quads:
0029FDr 1  rr rr          	  .addr @quad_1
0029FFr 1                 	  ;.addr @quad_2
0029FFr 1                 	  ;.addr @quad_3
0029FFr 1  rr rr          	  .addr @end
002A01r 1                 @quad_1: 	;	need invert across row to make next bits . next row stays same
002A01r 1                     ; first quadrant increments along the row
002A01r 1  A9 1F            LDA #$1F
002A03r 1  8D 20 9F         STA VERA_addr_low
002A06r 1  85 4A            STA ZP_PTR+40
002A08r 1  A9 08            LDA #$08
002A0Ar 1  8D 21 9F         STA VERA_addr_high
002A0Dr 1  85 4B            STA ZP_PTR+41
002A0Fr 1  A9 19            LDA #$19            ;  draw 1 to the left at a time..
002A11r 1  8D 22 9F         STA VERA_addr_bank
002A14r 1               
002A14r 1  A9 FF            LDA #255
002A16r 1  85 48            STA ZP_PTR+38
002A18r 1  A5 42            LDA ZP_PTR+32
002A1Ar 1  3A               DEC A
002A1Br 1  85 44            STA ZP_PTR+34    ;  this is copy for going to next row
002A1Dr 1  85 46            STA ZP_PTR+36    ;  this one's for incrementing along the row..
002A1Fr 1               
002A1Fr 1  A5 43            LDA ZP_PTR+33
002A21r 1  85 45            STA ZP_PTR+35
002A23r 1  85 47            STA ZP_PTR+37
002A25r 1               
002A25r 1  A6 33        	LDX ZP_PTR+17
002A27r 1  18               CLC  ; clear before doing 16bit add!
002A28r 1  BD rr rr         LDA ACROSS_ROW_X_L,X
002A2Br 1  85 26            STA ZP_PTR+4 	; 	ZP_PTR+4 = spriteX increment Low byte
002A2Dr 1  85 2E            STA ZP_PTR+12
002A2Fr 1  BD rr rr         LDA ACROSS_ROW_X_H,X
002A32r 1  85 27            STA ZP_PTR+5 	;	ZP_PTR+4 = spriteX increment high byte
002A34r 1  69 64            ADC #100
002A36r 1  85 2F            STA ZP_PTR+13
002A38r 1  18               CLC  ; clear before doing 16bit add!
002A39r 1  BD rr rr         LDA ACROSS_ROW_Y_L,X
002A3Cr 1  85 28            STA ZP_PTR+6 	; 	ZP_PTR+6 = spriteY increment low byte
002A3Er 1  85 30            STA ZP_PTR+14
002A40r 1  BD rr rr         LDA ACROSS_ROW_Y_H,X
002A43r 1  85 29            STA ZP_PTR+7 	; 	ZP_PTR+3 = spriteY increment
002A45r 1  69 84            ADC #132
002A47r 1  85 31            STA ZP_PTR+15
002A49r 1  4C rr rr         jmp @quad_loop
002A4Cr 1               @quad_2: ; invert next row - start 1 row up
002A4Cr 1  A6 33        	LDX ZP_PTR+17
002A4Er 1               
002A4Er 1  A9 C0            LDA #192
002A50r 1  85 49            STA ZP_PTR+39
002A52r 1               
002A52r 1  A5 42            LDA ZP_PTR+32
002A54r 1  38               SEC
002A55r 1  E9 40            SBC #64
002A57r 1  85 44            STA ZP_PTR+34    ;  this is copy for going to next row
002A59r 1  85 46            STA ZP_PTR+36    ;  this one's for incrementing along the row..
002A5Br 1               
002A5Br 1  A5 43            LDA ZP_PTR+33
002A5Dr 1  E9 00            SBC #0
002A5Fr 1  85 45            STA ZP_PTR+35
002A61r 1  85 47            STA ZP_PTR+37
002A63r 1               
002A63r 1  18               CLC  ; clear before doing 16bit add!
002A64r 1  BD rr rr         LDA NEXT_ROW_X_L,X
002A67r 1  85 2A            STA ZP_PTR+8 	; 	ZP_PTR+4 = spriteX increment Low byte
002A69r 1  85 2E            STA ZP_PTR+12
002A6Br 1  85 34            STA ZP_PTR+18
002A6Dr 1  BD rr rr         LDA NEXT_ROW_X_H,X
002A70r 1  85 2B            STA ZP_PTR+9 	;	ZP_PTR+4 = spriteX increment high byte
002A72r 1  69 64            ADC #100
002A74r 1  85 2F            STA ZP_PTR+13
002A76r 1  85 35            STA ZP_PTR+19
002A78r 1               
002A78r 1  18               CLC  ; clear before doing 16bit add!
002A79r 1  BD rr rr         LDA NEXT_ROW_Y_L,X
002A7Cr 1  85 2C            STA ZP_PTR+10 	; 	ZP_PTR+6 = spriteY increment low byte
002A7Er 1  85 30            STA ZP_PTR+14
002A80r 1  85 36            STA ZP_PTR+20
002A82r 1  BD rr rr         LDA NEXT_ROW_Y_H,X
002A85r 1  85 2D            STA ZP_PTR+11 	; 	ZP_PTR+3 = spriteY increment
002A87r 1  69 84            ADC #132
002A89r 1  85 31            STA ZP_PTR+15
002A8Br 1  85 37            STA ZP_PTR+21
002A8Dr 1  4C rr rr         jmp @quad_loop
002A90r 1               @quad_3: ; restore across row and increment ..
002A90r 1  A9 01           LDA #1
002A92r 1  85 48           STA ZP_PTR+38
002A94r 1  A5 42           LDA ZP_PTR+32
002A96r 1  38              SEC
002A97r 1  E9 3F           SBC #63
002A99r 1  85 44           STA ZP_PTR+34
002A9Br 1  85 46           STA ZP_PTR+36
002A9Dr 1  A5 43           LDA ZP_PTR+33
002A9Fr 1  E9 00           SBC #0
002AA1r 1  85 45            STA ZP_PTR+35
002AA3r 1  85 47            STA ZP_PTR+37
002AA5r 1               
002AA5r 1  AE rr rr     	LDX camera_facing
002AA8r 1               
002AA8r 1               
002AA8r 1  18               CLC  ; clear before doing 16bit add!
002AA9r 1  BD rr rr         LDA ACROSS_ROW_X_L,X
002AACr 1  85 26            STA ZP_PTR+4 	; 	ZP_PTR+4 = spriteX increment Low byte
002AAEr 1  65 34            ADC ZP_PTR+18
002AB0r 1  85 2E            STA ZP_PTR+12
002AB2r 1  BD rr rr         LDA ACROSS_ROW_X_H,X
002AB5r 1  85 27            STA ZP_PTR+5 	;	ZP_PTR+4 = spriteX increment high byte
002AB7r 1  65 35            ADC ZP_PTR+19
002AB9r 1  85 2F            STA ZP_PTR+13
002ABBr 1               
002ABBr 1  18               CLC  ; clear before doing 16bit add!
002ABCr 1  BD rr rr         LDA ACROSS_ROW_Y_L,X
002ABFr 1  85 28            STA ZP_PTR+6 	; 	ZP_PTR+6 = spriteY increment low byte
002AC1r 1  65 36            ADC ZP_PTR+20
002AC3r 1  85 30            STA ZP_PTR+14
002AC5r 1  BD rr rr         LDA ACROSS_ROW_Y_H,X
002AC8r 1  85 29            STA ZP_PTR+7 	; 	ZP_PTR+3 = spriteY increment
002ACAr 1  65 37            ADC ZP_PTR+21
002ACCr 1  85 31            STA ZP_PTR+15
002ACEr 1  4C rr rr         jmp @quad_loop
002AD1r 1               
002AD1r 1               test_sprite_data:
002AD1r 1               ; first 16 sprites reserved ...
002AD1r 1               ;      0   1   2   3   4   5   6  7
002AD1r 1               ;     add,mod, XL, XH, YL, YH,msk,hwp
002AD1r 1  42 00 64 00  .byte  66,$00,100,  0,128,  0,$0C,$50  ;  cursor middle - 8x8  sprite 0
002AD5r 1  80 00 0C 50  
002AD9r 1  10 00 0C 00  .byte  16,$00, 12,  0,  0,  0,$0C,$30  ;  border top - 64x8    sprite 1
002ADDr 1  00 00 0C 30  
002AE1r 1  10 00 4C 00  .byte  16,$00, 76,  0,  0,  0,$0C,$30  ;  border top - 64x8    sprite 2
002AE5r 1  00 00 0C 30  
002AE9r 1  10 00 8C 00  .byte  16,$00,140,  0,  0,  0,$0C,$30  ;  border top - 64x8    sprite 3
002AEDr 1  00 00 0C 30  
002AF1r 1               
002AF1r 1  10 00 0C 00  .byte  16,$00, 12,  0,153,  0,$0F,$30  ;  border bottom - 64x8  sprite 4
002AF5r 1  99 00 0F 30  
002AF9r 1  10 00 4C 00  .byte  16,$00, 76,  0,153,  0,$0F,$30  ;  border bottom - 64x8  sprite 5
002AFDr 1  99 00 0F 30  
002B01r 1  10 00 8C 00  .byte  16,$00,140,  0,153,  0,$0F,$30  ;  border bottom - 64x8  sprite 6
002B05r 1  99 00 0F 30  
002B09r 1               
002B09r 1  10 00 00 00  .byte  16,$00,  0,  0, 16,  0,$0C,$C0  ;  border left    8x64   sprite 7
002B0Dr 1  10 00 0C C0  
002B11r 1  10 00 00 00  .byte  16,$00,  0,  0, 80,  0,$0C,$C0  ;  border left    8x64   sprite 8
002B15r 1  50 00 0C C0  
002B19r 1  10 00 D0 00  .byte  16,$00,208,  0, 16,  0,$0F,$C0  ;  border left    8x64   sprite 9
002B1Dr 1  10 00 0F C0  
002B21r 1  10 00 D0 00  .byte  16,$00,208,  0, 80,  0,$0F,$C0  ;  border left    8x64   sprite A
002B25r 1  50 00 0F C0  
002B29r 1  31 00 8C 00  .byte  49,$00,140,  0,109,  0,$0C,$00  ; sprite B   bearing  Label
002B2Dr 1  6D 00 0C 00  
002B31r 1  3A 00 8C 00  .byte  58,$00,140,  0,118,  0,$0c,$30  ; sprite C   WORLD
002B35r 1  76 00 0C 30  
002B39r 1  32 00 8C 00  .byte  50,$00,140,  0,136,  0,$0c,$30  ; sprite D   Cell
002B3Dr 1  88 00 0C 30  
002B41r 1  21 00 94 00  .byte  33,$00,148,  0,109,  0,$0C,$00  ; 0 test    sprite 0E   bearing
002B45r 1  6D 00 0C 00  
002B49r 1  22 00 9C 00  .byte  34,$00,156,  0,109,  0,$0C,$00  ; 1 test    sprite 0F
002B4Dr 1  6D 00 0C 00  
002B51r 1  27 00 8C 00  .byte  39,$00,140,  0,127,  0,$0C,$00  ; 6 test    sprite 10   world XH
002B55r 1  7F 00 0C 00  
002B59r 1  28 00 94 00  .byte  40,$00,148,  0,127,  0,$0C,$00  ; 7 test    sprite 11
002B5Dr 1  7F 00 0C 00  
002B61r 1  29 00 9C 00  .byte  41,$00,156,  0,127,  0,$0C,$00  ; 8 test    sprite 12   world Xl
002B65r 1  7F 00 0C 00  
002B69r 1  2A 00 A4 00  .byte  42,$00,164,  0,127,  0,$0C,$00  ; 9 test    sprite 13
002B6Dr 1  7F 00 0C 00  
002B71r 1  2B 00 B0 00  .byte  43,$00,176,  0,127,  0,$0C,$00  ; A test    sprite 14   world YH
002B75r 1  7F 00 0C 00  
002B79r 1  2C 00 B8 00  .byte  44,$00,184,  0,127,  0,$0C,$00  ; B test    sprite 15
002B7Dr 1  7F 00 0C 00  
002B81r 1  2D 00 C0 00  .byte  45,$00,192,  0,127,  0,$0C,$00  ; C test    sprite 16   world Yl
002B85r 1  7F 00 0C 00  
002B89r 1  2E 00 C8 00  .byte  46,$00,200,  0,127,  0,$0C,$00  ; D test    sprite 17
002B8Dr 1  7F 00 0C 00  
002B91r 1  23 00 8C 00  .byte  35,$00,140,  0,145,  0,$0C,$00  ; 2 test    sprite 18   Cell X
002B95r 1  91 00 0C 00  
002B99r 1  24 00 94 00  .byte  36,$00,148,  0,145,  0,$0C,$00  ; 3 test    sprite 19
002B9Dr 1  91 00 0C 00  
002BA1r 1  2F 00 9C 00  .byte  47,$00,156,  0,145,  0,$0C,$00  ; E test    sprite 1A   X Subcell
002BA5r 1  91 00 0C 00  
002BA9r 1  2F 00 A4 00  .byte  47,$00,164,  0,145,  0,$0C,$00  ; E test    sprite 1A
002BADr 1  91 00 0C 00  
002BB1r 1  25 00 B0 00  .byte  37,$00,176,  0,145,  0,$0C,$00  ; 4 test    sprite 1C   Cell Y
002BB5r 1  91 00 0C 00  
002BB9r 1  26 00 B8 00  .byte  38,$00,184,  0,145,  0,$0C,$00  ; 5 test    sprite 1D
002BBDr 1  91 00 0C 00  
002BC1r 1  30 00 C0 00  .byte  48,$00,192,  0,100,  0,$0C,$00  ; F test    sprite 1E   value at current cell
002BC5r 1  64 00 0C 00  
002BC9r 1  30 00 C8 00  .byte  48,$00,200,  0,100,  0,$0C,$00  ; F test    sprite 1F
002BCDr 1  64 00 0C 00  
002BD1r 1               
002BD1r 1               test_optimal_pal_data:
002BD1r 1               ;      GB   R  $1:FA00-$1:FBFF   VERA Color Palette (256 x 2 bytes)
002BD1r 1  00 00        .byte $00,$00  ; 0 - black/transparent
002BD3r 1  C8 0F        .byte $c8,$0f  ; 1 #ffcc88
002BD5r 1               
002BD5r 1  04 06        .byte $04,$06  ; 2 #660044
002BD7r 1  00 0C        .byte $00,$0C  ; 3  #cc0000
002BD9r 1  F0 0C        .byte $F0,$0C  ; 4#ccff00
002BDBr 1  42 03        .byte $42,$03
002BDDr 1  60 0C        .byte $60,$0c   ; 6  #cc6600
002BDFr 1  40 08        .byte $40,$08   ; 7 #884400
002BE1r 1  C0 0C        .byte $c0,$0c   ; 8 #cccc00
002BE3r 1  6A 02        .byte $6a,$02   ; 9 #2266aa mid blue
002BE5r 1  C0 00        .byte $c0,$00   ; A #00cc00
002BE7r 1  AC 07        .byte $ac,$07   ; B #77aacc light blue
002BE9r 1  C0 00        .byte $c0,$00   ; C #0000c0 dark blue
002BEBr 1  0C 0C        .byte $0c,$0c   ; D #cc00cc
002BEDr 1  88 08        .byte $88,$08   ; E #888888
002BEFr 1  22 02        .byte $22,$02   ; F #222222
002BF1r 1               
002BF1r 1               test_vram_data:
002BF1r 1               test_cell_sprite: 	;	is 16x64x16 bit = 512 bytes   sprite addr = 0
002BF1r 1               ; 	   01   23   45   67   89   AB   CD   EF
002BF1r 1  CC C9 CC C9  .byte $CC, $C9, $CC, $C9, $CC, $C9, $CC, $C0    ;  0
002BF5r 1  CC C9 CC C0  
002BF9r 1  09 9B 99 9B  .byte $09, $9B, $99, $9B, $99, $9B, $99, $9C    ;  1
002BFDr 1  99 9B 99 9C  
002C01r 1  CB BC BB BC  .byte $CB, $BC, $BB, $BC, $BB, $BC, $BB, $B0    ;  2
002C05r 1  BB BC BB B0  
002C09r 1  0C C9 CC C9  .byte $0C, $C9, $CC, $C9, $CC, $C9, $CC, $CC    ;  3
002C0Dr 1  CC C9 CC CC  
002C11r 1  C9 9B 99 9B  .byte $C9, $9B, $99, $9B, $99, $9B, $99, $90    ;  4
002C15r 1  99 9B 99 90  
002C19r 1  0B BC BB BC  .byte $0B, $BC, $BB, $BC, $BB, $BC, $BB, $BC    ;  5
002C1Dr 1  BB BC BB BC  
002C21r 1  CC C9 CC C9  .byte $CC, $C9, $CC, $C9, $CC, $C9, $CC, $C0    ;  6
002C25r 1  CC C9 CC C0  
002C29r 1  09 9B 99 9B  .byte $09, $9B, $99, $9B, $99, $9B, $99, $9C    ;  7
002C2Dr 1  99 9B 99 9C  
002C31r 1  CB BC BB BC  .byte $CB, $BC, $BB, $BC, $BB, $BC, $BB, $B0    ;  8 ; 45* is 9.5 ..
002C35r 1  BB BC BB B0  
002C39r 1  0C 09 0C 09  .byte $0C, $09, $0C, $09, $0C, $09, $0C, $0C    ;  9
002C3Dr 1  0C 09 0C 0C  
002C41r 1  09 90 09 90  .byte $09, $90, $09, $90, $09, $90, $09, $90   ;  10
002C45r 1  09 90 09 90  
002C49r 1  90 09 90 09  .byte $90, $09, $90, $09, $90, $09, $90, $09   ; 11
002C4Dr 1  90 09 90 09  
002C51r 1  00 00 00 00  .res 32, 0  ;  5 lines zeroed
002C55r 1  00 00 00 00  
002C59r 1  00 00 00 00  
002C71r 1               
002C71r 1               
002C71r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	16
002C75r 1  EE EE EE EE  
002C79r 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
002C7Dr 1  EE 66 EE EE  
002C81r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
002C85r 1  66 EE 66 EE  
002C89r 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
002C8Dr 1  EE EE EE 66  
002C91r 1               
002C91r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	20
002C95r 1  EE EE EE EE  
002C99r 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
002C9Dr 1  EE 66 EE EE  
002CA1r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
002CA5r 1  66 EE 66 EE  
002CA9r 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
002CADr 1  EE EE EE 66  
002CB1r 1               
002CB1r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	24
002CB5r 1  EE EE EE EE  
002CB9r 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
002CBDr 1  EE 66 EE EE  
002CC1r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
002CC5r 1  66 EE 66 EE  
002CC9r 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
002CCDr 1  EE EE EE 66  
002CD1r 1               
002CD1r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	28
002CD5r 1  EE EE EE EE  
002CD9r 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
002CDDr 1  EE 66 EE EE  
002CE1r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
002CE5r 1  66 EE 66 EE  
002CE9r 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
002CEDr 1  EE EE EE 66  
002CF1r 1               
002CF1r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	32
002CF5r 1  EE EE EE EE  
002CF9r 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
002CFDr 1  EE 66 EE EE  
002D01r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
002D05r 1  66 EE 66 EE  
002D09r 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
002D0Dr 1  EE EE EE 66  
002D11r 1               
002D11r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	36
002D15r 1  EE EE EE EE  
002D19r 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
002D1Dr 1  EE 66 EE EE  
002D21r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
002D25r 1  66 EE 66 EE  
002D29r 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
002D2Dr 1  EE EE EE 66  
002D31r 1               
002D31r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	40
002D35r 1  EE EE EE EE  
002D39r 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
002D3Dr 1  EE 66 EE EE  
002D41r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
002D45r 1  66 EE 66 EE  
002D49r 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
002D4Dr 1  EE EE EE 66  
002D51r 1               
002D51r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	44
002D55r 1  EE EE EE EE  
002D59r 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
002D5Dr 1  EE 66 EE EE  
002D61r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
002D65r 1  66 EE 66 EE  
002D69r 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
002D6Dr 1  EE EE EE 66  
002D71r 1               
002D71r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	48
002D75r 1  EE EE EE EE  
002D79r 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
002D7Dr 1  EE 66 EE EE  
002D81r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
002D85r 1  66 EE 66 EE  
002D89r 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
002D8Dr 1  EE EE EE 66  
002D91r 1               
002D91r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	52
002D95r 1  EE EE EE EE  
002D99r 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
002D9Dr 1  EE 66 EE EE  
002DA1r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
002DA5r 1  66 EE 66 EE  
002DA9r 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
002DADr 1  EE EE EE 66  
002DB1r 1               
002DB1r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	56
002DB5r 1  EE EE EE EE  
002DB9r 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
002DBDr 1  EE 66 EE EE  
002DC1r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
002DC5r 1  66 EE 66 EE  
002DC9r 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
002DCDr 1  EE EE EE 66  
002DD1r 1               
002DD1r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	60
002DD5r 1  EE EE EE EE  
002DD9r 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
002DDDr 1  EE 66 EE EE  
002DE1r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
002DE5r 1  66 EE 66 EE  
002DE9r 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63   512 bytes - next sprite addr = 16
002DEDr 1  EE EE EE 66  
002DF1r 1               
002DF1r 1               
002DF1r 1               test_border:
002DF1r 1  0B 0B 0B 0B  .repeat 64
002DF5r 1  B0 B0 B0 B0  
002DF9r 1  0B 0B 0B 0B  
002FF1r 1                  .res 4, $0B
002FF1r 1                  .res 4, $B0
002FF1r 1               .endrepeat
002FF1r 1               
002FF1r 1               test_cross_hair_8x8:    ;  8x8x16 color = 32 bytes ; sprite 32
002FF1r 1               ;     01   23   45   67
002FF1r 1  11 00 00 11  .byte $11, $00, $00, $11
002FF5r 1  10 00 00 01  .byte $10, $00, $00, $01
002FF9r 1  00 00 00 00  .byte $00, $00, $00, $00
002FFDr 1  00 01 10 00  .byte $00, $01, $10, $00
003001r 1  00 01 10 00  .byte $00, $01, $10, $00
003005r 1  00 00 00 00  .byte $00, $00, $00, $00
003009r 1  10 00 00 01  .byte $10, $00, $00, $01
00300Dr 1  11 00 00 11  .byte $11, $00, $00, $11
003011r 1               
003011r 1               HEX_DISPLAY_FONT:       ; 8x8x16 color = 32 bytes ... sprite addr 33+ ($0440)
003011r 1               ;     01   23   45   67
003011r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 0
003015r 1  01 00 00 10  .byte $01, $00, $00, $10
003019r 1  01 00 00 10  .byte $01, $00, $00, $10
00301Dr 1  00 00 00 00  .byte $00, $00, $00, $00
003021r 1  01 00 00 10  .byte $01, $00, $00, $10
003025r 1  01 00 00 10  .byte $01, $00, $00, $10
003029r 1  01 00 00 10  .byte $01, $00, $00, $10
00302Dr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 0 /
003031r 1               
003031r 1  00 00 00 00  .byte $00, $00, $00, $00 ; 1
003035r 1  00 00 00 10  .byte $00, $00, $00, $10
003039r 1  00 00 00 10  .byte $00, $00, $00, $10
00303Dr 1  00 00 00 00  .byte $00, $00, $00, $00
003041r 1  00 00 00 10  .byte $00, $00, $00, $10
003045r 1  00 00 00 10  .byte $00, $00, $00, $10
003049r 1  00 00 00 10  .byte $00, $00, $00, $10
00304Dr 1  00 00 00 00  .byte $00, $00, $00, $00
003051r 1               
003051r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 2
003055r 1  00 00 00 10  .byte $00, $00, $00, $10
003059r 1  00 00 00 10  .byte $00, $00, $00, $10
00305Dr 1  00 11 11 00  .byte $00, $11, $11, $00
003061r 1  01 00 00 00  .byte $01, $00, $00, $00
003065r 1  01 00 00 00  .byte $01, $00, $00, $00
003069r 1  01 00 00 00  .byte $01, $00, $00, $00
00306Dr 1  00 11 11 00  .byte $00, $11, $11, $00
003071r 1               
003071r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 3
003075r 1  00 00 00 10  .byte $00, $00, $00, $10
003079r 1  00 00 00 10  .byte $00, $00, $00, $10
00307Dr 1  00 11 11 00  .byte $00, $11, $11, $00
003081r 1  00 00 00 10  .byte $00, $00, $00, $10
003085r 1  00 00 00 10  .byte $00, $00, $00, $10
003089r 1  00 00 00 10  .byte $00, $00, $00, $10
00308Dr 1  00 11 11 00  .byte $00, $11, $11, $00
003091r 1               
003091r 1  00 00 00 00  .byte $00, $00, $00, $00   ; 4
003095r 1  01 00 00 10  .byte $01, $00, $00, $10
003099r 1  01 00 00 10  .byte $01, $00, $00, $10
00309Dr 1  00 11 11 00  .byte $00, $11, $11, $00
0030A1r 1  00 00 00 10  .byte $00, $00, $00, $10
0030A5r 1  00 00 00 10  .byte $00, $00, $00, $10
0030A9r 1  00 00 00 10  .byte $00, $00, $00, $10
0030ADr 1  00 00 00 00  .byte $00, $00, $00, $00
0030B1r 1               
0030B1r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 5
0030B5r 1  01 00 00 00  .byte $01, $00, $00, $00
0030B9r 1  01 00 00 00  .byte $01, $00, $00, $00
0030BDr 1  00 11 11 00  .byte $00, $11, $11, $00
0030C1r 1  00 00 00 10  .byte $00, $00, $00, $10
0030C5r 1  00 00 00 10  .byte $00, $00, $00, $10
0030C9r 1  00 00 00 10  .byte $00, $00, $00, $10
0030CDr 1  00 11 11 00  .byte $00, $11, $11, $00
0030D1r 1               
0030D1r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 6
0030D5r 1  01 00 00 00  .byte $01, $00, $00, $00
0030D9r 1  01 00 00 00  .byte $01, $00, $00, $00
0030DDr 1  00 11 11 00  .byte $00, $11, $11, $00
0030E1r 1  01 00 00 10  .byte $01, $00, $00, $10
0030E5r 1  01 00 00 10  .byte $01, $00, $00, $10
0030E9r 1  01 00 00 10  .byte $01, $00, $00, $10
0030EDr 1  00 11 11 00  .byte $00, $11, $11, $00
0030F1r 1               
0030F1r 1  00 01 01 00  .byte $00, $01, $01, $00 ; 7
0030F5r 1  00 00 00 10  .byte $00, $00, $00, $10
0030F9r 1  00 00 00 10  .byte $00, $00, $00, $10
0030FDr 1  00 00 00 00  .byte $00, $00, $00, $00
003101r 1  00 00 00 10  .byte $00, $00, $00, $10
003105r 1  00 00 00 10  .byte $00, $00, $00, $10
003109r 1  00 00 00 10  .byte $00, $00, $00, $10
00310Dr 1  00 00 00 00  .byte $00, $00, $00, $00
003111r 1               
003111r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 8
003115r 1  01 00 00 10  .byte $01, $00, $00, $10
003119r 1  01 00 00 10  .byte $01, $00, $00, $10
00311Dr 1  00 11 11 00  .byte $00, $11, $11, $00
003121r 1  01 00 00 10  .byte $01, $00, $00, $10
003125r 1  01 00 00 10  .byte $01, $00, $00, $10
003129r 1  01 00 00 10  .byte $01, $00, $00, $10
00312Dr 1  00 11 11 00  .byte $00, $11, $11, $00
003131r 1               
003131r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 9
003135r 1  01 00 00 10  .byte $01, $00, $00, $10
003139r 1  01 00 00 10  .byte $01, $00, $00, $10
00313Dr 1  00 11 11 00  .byte $00, $11, $11, $00
003141r 1  00 00 00 10  .byte $00, $00, $00, $10
003145r 1  00 00 00 10  .byte $00, $00, $00, $10
003149r 1  00 00 00 10  .byte $00, $00, $00, $10
00314Dr 1  00 11 11 00  .byte $00, $11, $11, $00
003151r 1               
003151r 1  00 11 11 00  .byte $00, $11, $11, $00   ; A
003155r 1  01 00 00 10  .byte $01, $00, $00, $10
003159r 1  01 00 00 10  .byte $01, $00, $00, $10
00315Dr 1  00 11 11 00  .byte $00, $11, $11, $00
003161r 1  01 00 00 10  .byte $01, $00, $00, $10
003165r 1  01 00 00 10  .byte $01, $00, $00, $10
003169r 1  01 00 00 10  .byte $01, $00, $00, $10
00316Dr 1  00 00 00 00  .byte $00, $00, $00, $00
003171r 1               
003171r 1               
003171r 1  00 00 00 00  .byte $00, $00, $00, $00   ; B
003175r 1  01 00 00 00  .byte $01, $00, $00, $00
003179r 1  01 00 00 00  .byte $01, $00, $00, $00
00317Dr 1  00 11 11 00  .byte $00, $11, $11, $00
003181r 1  01 00 00 10  .byte $01, $00, $00, $10
003185r 1  01 00 00 10  .byte $01, $00, $00, $10
003189r 1  01 00 00 10  .byte $01, $00, $00, $10
00318Dr 1  00 11 11 00  .byte $00, $11, $11, $00
003191r 1               
003191r 1  00 11 11 00  .byte $00, $11, $11, $00   ; C
003195r 1  01 00 00 00  .byte $01, $00, $00, $00
003199r 1  01 00 00 00  .byte $01, $00, $00, $00
00319Dr 1  00 00 00 00  .byte $00, $00, $00, $00
0031A1r 1  01 00 00 00  .byte $01, $00, $00, $00
0031A5r 1  01 00 00 00  .byte $01, $00, $00, $00
0031A9r 1  01 00 00 00  .byte $01, $00, $00, $00
0031ADr 1  00 11 11 00  .byte $00, $11, $11, $00
0031B1r 1               
0031B1r 1  00 00 00 00  .byte $00, $00, $00, $00   ; D
0031B5r 1  00 00 00 10  .byte $00, $00, $00, $10
0031B9r 1  00 00 00 10  .byte $00, $00, $00, $10
0031BDr 1  00 11 11 00  .byte $00, $11, $11, $00
0031C1r 1  01 00 00 10  .byte $01, $00, $00, $10
0031C5r 1  01 00 00 10  .byte $01, $00, $00, $10
0031C9r 1  01 00 00 10  .byte $01, $00, $00, $10
0031CDr 1  00 11 11 00  .byte $00, $11, $11, $00
0031D1r 1               
0031D1r 1  00 11 11 00  .byte $00, $11, $11, $00   ; E
0031D5r 1  01 00 00 00  .byte $01, $00, $00, $00
0031D9r 1  01 00 00 00  .byte $01, $00, $00, $00
0031DDr 1  00 11 11 00  .byte $00, $11, $11, $00
0031E1r 1  01 00 00 00  .byte $01, $00, $00, $00
0031E5r 1  01 00 00 00  .byte $01, $00, $00, $00
0031E9r 1  01 00 00 00  .byte $01, $00, $00, $00
0031EDr 1  00 11 11 00  .byte $00, $11, $11, $00
0031F1r 1               
0031F1r 1  00 11 11 00  .byte $00, $11, $11, $00   ; F   sprite addr 48
0031F5r 1  01 00 00 00  .byte $01, $00, $00, $00
0031F9r 1  01 00 00 00  .byte $01, $00, $00, $00
0031FDr 1  00 11 11 00  .byte $00, $11, $11, $00
003201r 1  01 00 00 00  .byte $01, $00, $00, $00
003205r 1  01 00 00 00  .byte $01, $00, $00, $00
003209r 1  01 00 00 00  .byte $01, $00, $00, $00
00320Dr 1  00 00 00 00  .byte $00, $00, $00, $00
003211r 1               
003211r 1  00 00 00 00  .byte $00, $00, $00, $00  ;  bearing label   sprite addr 49
003215r 1  00 00 01 00  .byte $00, $00, $01, $00
003219r 1  00 00 10 00  .byte $00, $00, $10, $00
00321Dr 1  00 01 00 00  .byte $00, $01, $00, $00
003221r 1  00 10 00 00  .byte $00, $10, $00, $00
003225r 1  01 00 00 00  .byte $01, $00, $00, $00
003229r 1  11 11 11 00  .byte $11, $11, $11, $00
00322Dr 1  00 00 00 00  .byte $00, $00, $00, $00
003231r 1               
003231r 1               ; cell position label sprite addr 50-57
003231r 1  00 FF 00 FF  .byte $00,$FF,$00,$FF,$FF,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
003235r 1  FF 00 FF 00  
003239r 1  00 FF 00 00  
003251r 1  FF 00 00 FF  .byte $FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
003255r 1  00 00 FF 00  
003259r 1  00 FF 00 00  
003271r 1  FF 00 00 FF  .byte $FF,$00,$00,$FF,$FF,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
003275r 1  FF 00 FF 00  
003279r 1  00 FF 00 00  
003291r 1  FF 00 00 FF  .byte $FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
003295r 1  00 00 FF 00  
003299r 1  00 FF 00 00  
0032B1r 1  00 FF 00 FF  .byte $00,$FF,$00,$FF,$FF,$00,$FF,$FF,$00,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0032B5r 1  FF 00 FF FF  
0032B9r 1  00 FF FF 00  
0032D1r 1               ;      01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF
0032D1r 1               ;     XH                               $XL                            ___  __  YH                              YL
0032D1r 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$00,$00,$10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00
0032D5r 1  00 00 00 00  
0032D9r 1  10 10 10 00  
0032F1r 1  01 00 11 10  .byte $01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00
0032F5r 1  00 00 00 00  
0032F9r 1  01 00 10 00  
003311r 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$11,$10,$00,$00,$00,$00,$00,$00,$01,$00,$10,$10,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00
003315r 1  00 00 00 00  
003319r 1  10 10 11 10  
003331r 1               
003331r 1               ; world position label 58-65
003331r 1               ;     XH                 $XL                  ___  ___  YH                  YL
003331r 1  FF 00 00 00  .byte $FF,$00,$00,$00,$FF,$00,$00,$FF,$00,$00,$FF,$FF,$00,$00,$FF,$00,$00,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
003335r 1  FF 00 00 FF  
003339r 1  00 00 FF FF  
003351r 1  FF 00 00 00  .byte $FF,$00,$00,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$00,$FF,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
003355r 1  FF 00 FF 00  
003359r 1  FF 00 FF 00  
003371r 1  FF 00 FF 00  .byte $FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$FF,$00,$00,$FF,$00,$00,$FF,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
003375r 1  FF 00 FF 00  
003379r 1  FF 00 FF FF  
003391r 1  FF 00 FF 00  .byte $FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$00,$FF,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
003395r 1  FF 00 FF 00  
003399r 1  FF 00 FF 00  
0033B1r 1  00 FF 00 FF  .byte $00,$FF,$00,$FF,$00,$00,$00,$FF,$00,$00,$FF,$00,$FF,$00,$FF,$FF,$00,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0033B5r 1  00 00 00 FF  
0033B9r 1  00 00 FF 00  
0033D1r 1               ;      01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF
0033D1r 1               ;     XH                               $XL                            ___  __  YH                              YL
0033D1r 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$00,$00,$10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00
0033D5r 1  00 00 00 00  
0033D9r 1  10 10 10 00  
0033F1r 1  01 00 11 10  .byte $01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00
0033F5r 1  00 00 00 00  
0033F9r 1  01 00 10 00  
003411r 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$11,$10,$00,$00,$00,$00,$00,$00,$01,$00,$10,$10,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00
003415r 1  00 00 00 00  
003419r 1  10 10 11 10  
003431r 1               
003431r 1               ; directional cursor reminder... 16x16 - 66-69
003431r 1               
003431r 1  00 10 00 10  .byte $00, $10, $00, $10, $01, $11, $11, $00
003435r 1  01 11 11 00  
003439r 1  00 10 00 10  .byte $00, $10, $00, $10, $01, $00, $00, $00
00343Dr 1  01 00 00 00  
003441r 1  00 10 10 10  .byte $00, $10, $10, $10, $01, $11, $00, $00
003445r 1  01 11 00 00  
003449r 1  00 10 10 10  .byte $00, $10, $10, $10, $01, $00, $00, $00
00344Dr 1  01 00 00 00  
003451r 1  00 01 01 00  .byte $00, $01, $01, $00, $01, $11, $11, $00
003455r 1  01 11 11 00  
003459r 1  00 00 00 00  .byte $00, $00, $00, $00, $00, $00, $00, $00
00345Dr 1  00 00 00 00  
003461r 1  01 11 00 00  .byte $01, $11, $00, $00, $00, $01, $11, $00
003465r 1  00 01 11 00  
003469r 1  10 00 10 00  .byte $10, $00, $10, $00, $00, $01, $00, $01
00346Dr 1  00 01 00 01  
003471r 1  11 11 10 00  .byte $11, $11, $10, $00, $00, $01, $00, $01
003475r 1  00 01 00 01  
003479r 1  10 00 10 00  .byte $10, $00, $10, $00, $00, $01, $11, $10
00347Dr 1  00 01 11 10  
003481r 1  00 00 00 00  .byte $00, $00, $00, $00, $00, $00, $00, $00
003485r 1  00 00 00 00  
003489r 1  00 11 11 10  .byte $00, $11, $11, $10, $01, $00, $01, $00
00348Dr 1  01 00 01 00  
003491r 1  00 00 01 00  .byte $00, $00, $01, $00, $00, $10, $10, $00
003495r 1  00 10 10 00  
003499r 1  00 00 10 00  .byte $00, $00, $10, $00, $00, $01, $00, $00
00349Dr 1  00 01 00 00  
0034A1r 1  00 01 00 00  .byte $00, $01, $00, $00, $00, $10, $10, $00
0034A5r 1  00 10 10 00  
0034A9r 1  00 11 11 10  .byte $00, $11, $11, $10, $01, $00, $01, $00
0034ADr 1  01 00 01 00  
0034B1r 1               
0034B1r 1               ; alernate tile graphic to use for tub wall .. 70-73
0034B1r 1  16 16 16 16  .byte $16, $16, $16, $16, $16, $16, $16, $10
0034B5r 1  16 16 16 10  
0034B9r 1  01 61 61 61  .byte $01, $61, $61, $61, $61, $61, $61, $61
0034BDr 1  61 61 61 61  
0034C1r 1               
0034C1r 1  16 16 16 16  .byte $16, $16, $16, $16, $16, $16, $16, $10
0034C5r 1  16 16 16 10  
0034C9r 1  01 61 61 61  .byte $01, $61, $61, $61, $61, $61, $61, $61
0034CDr 1  61 61 61 61  
0034D1r 1               
0034D1r 1  16 16 16 16  .byte $16, $16, $16, $16, $16, $16, $16, $10
0034D5r 1  16 16 16 10  
0034D9r 1  01 61 61 61  .byte $01, $61, $61, $61, $61, $61, $61, $61
0034DDr 1  61 61 61 61  
0034E1r 1               
0034E1r 1  16 16 16 16  .byte $16, $16, $16, $16, $16, $16, $16, $10
0034E5r 1  16 16 16 10  
0034E9r 1  01 61 61 61  .byte $01, $61, $61, $61, $61, $61, $61, $61
0034EDr 1  61 61 61 61  
0034F1r 1               
0034F1r 1  16 16 16 16  .byte $16, $16, $16, $16, $16, $16, $16, $10
0034F5r 1  16 16 16 10  
0034F9r 1  01 61 61 61  .byte $01, $61, $61, $61, $61, $61, $61, $61
0034FDr 1  61 61 61 61  
003501r 1               
003501r 1  10 10 10 10  .byte $10, $10, $10, $10, $10, $10, $10, $10
003505r 1  10 10 10 10  
003509r 1  01 01 01 01  .byte $01, $01, $01, $01, $01, $01, $01, $01
00350Dr 1  01 01 01 01  
003511r 1  00 00 00 00  .res 32,0
003515r 1  00 00 00 00  
003519r 1  00 00 00 00  
003511r 1               
