ca65 V2.19 - Git 8e6c0c1
Main file   : hex.s
Current file: hex.s

000000r 1               ; 	080D
000000r 1  4C rr rr     jmp start ; 	3 bytes
000003r 1               ;	0810 	- 240 bytes available for stuff that doesn't need alignment
000003r 1  DE AD BE EF  .repeat 28
000007r 1  DE AD BE EF  
00000Br 1  DE AD BE EF  
000073r 1               	.byte $DE,$AD,$BE,$EF
000073r 1               .endrepeat
000073r 1               SCRATCH128:
000073r 1  DE AD BE EF  .repeat 32
000077r 1  DE AD BE EF  
00007Br 1  DE AD BE EF  
0000F3r 1               	.byte $DE,$AD,$BE,$EF
0000F3r 1               .endrepeat
0000F3r 1               
0000F3r 1               ACROSS_ROW_X_H: ; 0900
0000F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0000F3r 1  10 0F 0F 0F  .byte $10,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $E
0000F7r 1  0F 0F 0F 0F  
0000FBr 1  0F 0F 0F 0F  
000103r 1  0E 0E 0E 0E  .byte  $E,  $E,  $E,  $E,  $E,  $D,  $D,  $D,  $D,  $D,  $C,  $C,  $C,  $C,  $B,  $B
000107r 1  0E 0D 0D 0D  
00010Br 1  0D 0D 0C 0C  
000113r 1  0B 0B 0A 0A  .byte  $B,  $B,  $A,  $A,  $A,  $9,  $9,  $9,  $8,  $8,  $8,  $7,  $7,  $7,  $6,  $6
000117r 1  0A 09 09 09  
00011Br 1  08 08 08 07  
000123r 1  06 05 05 05  .byte  $6,  $5,  $5,  $5,  $4,  $4,  $3,  $3,  $3,  $2,  $2,  $1,  $1,  $1,  $0,  $0
000127r 1  04 04 03 03  
00012Br 1  03 02 02 01  
000133r 1  00 FF FF FE  .byte  $0, $FF, $FF, $FE, $FE, $FE, $FD, $FD, $FC, $FC, $FC, $FB, $FB, $FA, $FA, $FA
000137r 1  FE FE FD FD  
00013Br 1  FC FC FC FB  
000143r 1  F9 F9 F9 F8  .byte $F9, $F9, $F9, $F8, $F8, $F8, $F7, $F7, $F7, $F6, $F6, $F6, $F5, $F5, $F5, $F4
000147r 1  F8 F8 F7 F7  
00014Br 1  F7 F6 F6 F6  
000153r 1  F4 F4 F4 F3  .byte $F4, $F4, $F4, $F3, $F3, $F3, $F3, $F2, $F2, $F2, $F2, $F2, $F1, $F1, $F1, $F1
000157r 1  F3 F3 F3 F2  
00015Br 1  F2 F2 F2 F2  
000163r 1  F1 F1 F0 F0  .byte $F1, $F1, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
000167r 1  F0 F0 F0 F0  
00016Br 1  F0 F0 F0 F0  
000173r 1  F0 F0 F0 F0  .byte $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F1
000177r 1  F0 F0 F0 F0  
00017Br 1  F0 F0 F0 F0  
000183r 1  F1 F1 F1 F1  .byte $F1, $F1, $F1, $F1, $F1, $F2, $F2, $F2, $F2, $F2, $F3, $F3, $F3, $F3, $F4, $F4
000187r 1  F1 F2 F2 F2  
00018Br 1  F2 F2 F3 F3  
000193r 1  F4 F4 F5 F5  .byte $F4, $F4, $F5, $F5, $F5, $F6, $F6, $F6, $F7, $F7, $F7, $F8, $F8, $F8, $F9, $F9
000197r 1  F5 F6 F6 F6  
00019Br 1  F7 F7 F7 F8  
0001A3r 1  F9 FA FA FA  .byte $F9, $FA, $FA, $FA, $FB, $FB, $FC, $FC, $FC, $FD, $FD, $FE, $FE, $FE, $FF, $FF
0001A7r 1  FB FB FC FC  
0001ABr 1  FC FD FD FE  
0001B3r 1  00 00 00 01  .byte $00,  $0,  $0,  $1,  $1,  $1,  $2,  $2,  $3,  $3,  $3,  $4,  $4,  $5,  $5,  $5
0001B7r 1  01 01 02 02  
0001BBr 1  03 03 03 04  
0001C3r 1  06 06 06 07  .byte  $6,  $6,  $6,  $7,  $7,  $7,  $8,  $8,  $8,  $9,  $9,  $9,  $A,  $A,  $A,  $B
0001C7r 1  07 07 08 08  
0001CBr 1  08 09 09 09  
0001D3r 1  0B 0B 0B 0C  .byte  $B,  $B,  $B,  $C,  $C,  $C,  $C,  $D,  $D,  $D,  $D,  $D,  $E,  $E,  $E,  $E
0001D7r 1  0C 0C 0C 0D  
0001DBr 1  0D 0D 0D 0D  
0001E3r 1  0E 0E 0F 0F  .byte  $E,  $E,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F
0001E7r 1  0F 0F 0F 0F  
0001EBr 1  0F 0F 0F 0F  
0001F3r 1               
0001F3r 1               ACROSS_ROW_X_L: ; 0A00
0001F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0001F3r 1  00 FE FB F4  .byte  $0, $FE, $FB, $F4, $EC, $E1, $D3, $C3, $B1, $9C, $85, $6B, $4F, $31, $10, $ED
0001F7r 1  EC E1 D3 C3  
0001FBr 1  B1 9C 85 6B  
000203r 1  C8 A0 76 4A  .byte $C8, $A0, $76, $4A, $1C, $EB, $B9, $84, $4D, $14, $D9, $9D, $5E, $1D, $DA, $96
000207r 1  1C EB B9 84  
00020Br 1  4D 14 D9 9D  
000213r 1  50 08 BE 73  .byte $50,  $8, $BE, $73, $26, $D7, $87, $36, $E3, $8F, $39, $E2, $8A, $31, $D7, $7B
000217r 1  26 D7 87 36  
00021Br 1  E3 8F 39 E2  
000223r 1  1F C2 63 04  .byte $1F, $C2, $63,  $4, $A5, $44, $E3, $81, $1F, $BC, $59, $F5, $91, $2D, $C8, $64
000227r 1  A5 44 E3 81  
00022Br 1  1F BC 59 F5  
000233r 1  00 9B 37 D2  .byte  $0, $9B, $37, $D2, $6E,  $A, $A6, $43, $E0, $7E, $1C, $BB, $5A, $FB, $9C, $3D
000237r 1  6E 0A A6 43  
00023Br 1  E0 7E 1C BB  
000243r 1  E0 84 28 CE  .byte $E0, $84, $28, $CE, $75, $1D, $C6, $70, $1C, $C9, $78, $28, $D9, $8C, $41, $F7
000247r 1  75 1D C6 70  
00024Br 1  1C C9 78 28  
000253r 1  AF 69 25 E2  .byte $AF, $69, $25, $E2, $A1, $62, $26, $EB, $B2, $7B, $46, $14, $E3, $B5, $89, $5F
000257r 1  A1 62 26 EB  
00025Br 1  B2 7B 46 14  
000263r 1  37 12 EF CE  .byte $37, $12, $EF, $CE, $B0, $94, $7A, $63, $4E, $3C, $2C, $1E, $13,  $B,  $4,  $1
000267r 1  B0 94 7A 63  
00026Br 1  4E 3C 2C 1E  
000273r 1  00 01 04 0B  .byte  $0,  $1,  $4,  $B, $13, $1E, $2C, $3C, $4E, $63, $7A, $94, $B0, $CE, $EF, $12
000277r 1  13 1E 2C 3C  
00027Br 1  4E 63 7A 94  
000283r 1  37 5F 89 B5  .byte $37, $5F, $89, $B5, $E3, $14, $46, $7B, $B2, $EB, $26, $62, $A1, $E2, $25, $69
000287r 1  E3 14 46 7B  
00028Br 1  B2 EB 26 62  
000293r 1  AF F7 41 8C  .byte $AF, $F7, $41, $8C, $D9, $28, $78, $C9, $1C, $70, $C6, $1D, $75, $CE, $28, $84
000297r 1  D9 28 78 C9  
00029Br 1  1C 70 C6 1D  
0002A3r 1  E0 3D 9C FB  .byte $E0, $3D, $9C, $FB, $5A, $BB, $1C, $7E, $E0, $43, $A6,  $A, $6E, $D2, $37, $9B
0002A7r 1  5A BB 1C 7E  
0002ABr 1  E0 43 A6 0A  
0002B3r 1  00 64 C8 2D  .byte  $0, $64, $C8, $2D, $91, $F5, $59, $BC, $1F, $81, $E3, $44, $A5,  $4, $63, $C2
0002B7r 1  91 F5 59 BC  
0002BBr 1  1F 81 E3 44  
0002C3r 1  1F 7B D7 31  .byte $1F, $7B, $D7, $31, $8A, $E2, $39, $8F, $E3, $36, $87, $D7, $26, $73, $BE,  $8
0002C7r 1  8A E2 39 8F  
0002CBr 1  E3 36 87 D7  
0002D3r 1  50 96 DA 1D  .byte $50, $96, $DA, $1D, $5E, $9D, $D9, $14, $4D, $84, $B9, $EB, $1C, $4A, $76, $A0
0002D7r 1  5E 9D D9 14  
0002DBr 1  4D 84 B9 EB  
0002E3r 1  C8 ED 10 31  .byte $C8, $ED, $10, $31, $4F, $6B, $85, $9C, $B1, $C3, $D3, $E1, $EC, $F4, $FB, $FE
0002E7r 1  4F 6B 85 9C  
0002EBr 1  B1 C3 D3 E1  
0002F3r 1               
0002F3r 1               ACROSS_ROW_Y_H: ; 0B00
0002F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0002F3r 1  00 00 00 00  .byte
0002F7r 1  00 00 01 01  
0002FBr 1  01 01 01 02  
0003F3r 1               
0003F3r 1               ACROSS_ROW_Y_L: ; 0C00
0003F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0003F3r 1  00 32 64 96  .byte  $0, $32, $64, $96, $C8, $FA, $2C, $5E, $8F, $C0, $F1, $22, $52, $82
0003F7r 1  C8 FA 2C 5E  
0003FBr 1  8F C0 F1 22  
000401r 1  B1 E1 0F 3D  .byte $B1, $E1,  $F, $3D, $6B, $98, $C5, $F1, $1C, $47, $71, $9B, $C3
000405r 1  6B 98 C5 F1  
000409r 1  1C 47 71 9B  
00040Er 1  EB 13 39 5F  .byte $EB, $13, $39, $5F, $84, $A8, $CB, $ED,  $E, $2F, $4E, $6C, $8A
000412r 1  84 A8 CB ED  
000416r 1  0E 2F 4E 6C  
00041Br 1  A6 C2 DC F5  .byte $A6, $C2, $DC, $F5,  $E, $25, $3B, $50, $64, $76, $88, $98, $A7
00041Fr 1  0E 25 3B 50  
000423r 1  64 76 88 98  
000428r 1  B5 C2 CE D8  .byte $B5, $C2, $CE, $D8, $E1, $E9, $F0, $F6, $FA, $FD, $FF,  $0, $FF
00042Cr 1  E1 E9 F0 F6  
000430r 1  FA FD FF 00  
000435r 1  FD FA F6 F0  .byte $FD, $FA, $F6, $F0, $E9, $E1, $D8, $CE, $C2, $B5, $A7, $98, $88
000439r 1  E9 E1 D8 CE  
00043Dr 1  C2 B5 A7 98  
000442r 1  76 64 50 3B  .byte $76, $64, $50, $3B, $25,  $E, $F5, $DC, $C2, $A6, $8A, $6C, $4E
000446r 1  25 0E F5 DC  
00044Ar 1  C2 A6 8A 6C  
00044Fr 1  2F 0E ED CB  .byte
000453r 1  A8 84 5F 39  
000457r 1  13 EB C3 9B  
0004F3r 1               
0004F3r 1               
0004F3r 1               NEXT_ROW_X_H:
0004F3r 1               ; 		0 	1 	2 	3 		4 	5 	6 	7 		8 	9 	A 	B 		C 	D 	E 	F
0004F3r 1  F8 F7 F7 F7  .byte $F8, $F7, $F7, $F7, $F6, $F6, $F6, $F5, $F5, $F5, $F4, $F4, $F4, $F4, $F3, $F3
0004F7r 1  F6 F6 F6 F5  
0004FBr 1  F5 F5 F4 F4  
000503r 1  F3 F3 F2 F2  .byte $F3, $F3, $F2, $F2, $F2, $F2, $F2, $F1, $F1, $F1, $F1, $F1, $F1, $F0, $F0, $F0
000507r 1  F2 F2 F2 F1  
00050Br 1  F1 F1 F1 F1  
000513r 1  F0 F0 F0 F0  .byte $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
000517r 1  F0 F0 F0 F0  
00051Br 1  F0 F0 F0 F0  
000523r 1  F0 F0 F0 F0  .byte $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F1, $F1, $F1, $F1, $F1, $F1
000527r 1  F0 F0 F0 F0  
00052Br 1  F0 F0 F1 F1  
000533r 1  F2 F2 F2 F2  .byte $F2, $F2, $F2, $F2, $F2, $F3, $F3, $F3, $F3, $F4, $F4, $F4, $F5, $F5, $F5, $F5
000537r 1  F2 F3 F3 F3  
00053Br 1  F3 F4 F4 F4  
000543r 1  F6 F6 F6 F7  .byte $F6, $F6, $F6, $F7, $F7, $F7, $F8, $F8, $F8, $F9, $F9, $F9, $FA, $FA, $FB, $FB
000547r 1  F7 F7 F8 F8  
00054Br 1  F8 F9 F9 F9  
000553r 1  FB FC FC FD  .byte $FB, $FC, $FC, $FD, $FD, $FD, $FE, $FE, $FE, $FF, $FF,  $0,  $0,  $0,  $1,  $1
000557r 1  FD FD FE FE  
00055Br 1  FE FF FF 00  
000563r 1  02 02 02 03  .byte  $2,  $2,  $2,  $3,  $3,  $4,  $4,  $4,  $5,  $5,  $5,  $6,  $6,  $6,  $7,  $7
000567r 1  03 04 04 04  
00056Br 1  05 05 05 06  
000573r 1  08 08 08 08  .byte  $8,  $8,  $8,  $8,  $9,  $9,  $9,  $A,  $A,  $A,  $B,  $B,  $B,  $B,  $C,  $C
000577r 1  09 09 09 0A  
00057Br 1  0A 0A 0B 0B  
000583r 1  0C 0C 0D 0D  .byte  $C,  $C,  $D,  $D,  $D,  $D,  $D,  $E,  $E,  $E,  $E,  $E,  $E,  $F,  $F,  $F
000587r 1  0D 0D 0D 0E  
00058Br 1  0E 0E 0E 0E  
000593r 1  0F 0F 0F 0F  .byte  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F , $F
000597r 1  0F 0F 0F 0F  
00059Br 1  0F 0F 0F 0F  
0005A3r 1  0F 0F 0F 0F  .byte  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $E,  $E,  $E,  $E,  $E,  $E
0005A7r 1  0F 0F 0F 0F  
0005ABr 1  0F 0F 0E 0E  
0005B3r 1  0D 0D 0D 0D  .byte  $D,  $D,  $D,  $D,  $D,  $C,  $C,  $C,  $C,  $B,  $B,  $B,  $A,  $A,  $A,  $A
0005B7r 1  0D 0C 0C 0C  
0005BBr 1  0C 0B 0B 0B  
0005C3r 1  09 09 09 08  .byte  $9,  $9,  $9,  $8,  $8,  $8,  $7,  $7,  $7,  $6,  $6,  $6,  $5,  $5,  $4,  $4
0005C7r 1  08 08 07 07  
0005CBr 1  07 06 06 06  
0005D3r 1  04 03 03 02  .byte  $4,  $3,  $3,  $2,  $2,  $2,  $1,  $1,  $1,  $0,  $0, $FF, $FF, $FF, $FE, $FE
0005D7r 1  02 02 01 01  
0005DBr 1  01 00 00 FF  
0005E3r 1  FD FD FD FC  .byte $FD, $FD, $FD, $FC, $FC, $FB, $FB, $FB, $FA, $FA, $FA, $F9, $F9, $F9, $F8, $F8
0005E7r 1  FC FB FB FB  
0005EBr 1  FA FA FA F9  
0005F3r 1               
0005F3r 1               NEXT_ROW_X_L:
0005F3r 1  00 A9 54 00  .byte
0005F7r 1  AE 5D 0D BF  
0005FBr 1  73 28 DF 98  
0006F3r 1               
0006F3r 1               NEXT_ROW_Y_H:
0006F3r 1  06 06 06 06  .byte
0006F7r 1  06 06 06 06  
0006FBr 1  06 05 05 05  
0007F3r 1               
0007F3r 1               NEXT_ROW_Y_L:
0007F3r 1  ED D3 B9 9D  .byte
0007F7r 1  80 62 44 24  
0007FBr 1  03 E2 BF 9C  
0008F3r 1               
0008F3r 1               TUB_WORLD:
0008F3r 1               .include "tub_world.inc"
0008F3r 2               ; 0 to 128 will be water level. >128 = distance along row to water (neg) , 128 = no water this row.
0008F3r 2               ; rows are stored within 64 byte rows
0008F3r 2               ; 	                                                              0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63
0008F3r 2  80 80 80 80  .byte                                                             $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80  ; 00 - tub
0008F7r 2  80 80 80 80  
0008FBr 2  80 80 80 80  
000933r 2  80 80 80 FC  .byte                                                           $80,$80,$80,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4,$F3,$F2,$F1,$F0,$EF,$EE,$ED,$EC,$EB  ; 01
000937r 2  FD FE FF 00  
00093Br 2  00 00 00 00  
000973r 2  80 80 80 FD  .byte                                                         $80,$80,$80,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4,$F3,$F2,$F1,$F0,$EF,$EE,$ED  ; 2
000977r 2  FE FF 00 00  
00097Br 2  00 00 00 00  
0009B3r 2  80 80 80 FE  .byte                                                       $80,$80,$80,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4,$F3,$F2,$F1,$F0,$EF  ; 3
0009B7r 2  FF 00 00 00  
0009BBr 2  00 00 00 00  
0009F3r 2  80 80 FE FF  .byte                                                     $80,$80,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4,$F3,$F2,$F1  ; 4
0009F7r 2  00 00 00 00  
0009FBr 2  00 00 00 00  
000A33r 2  80 80 FE FF  .byte                                                   $80,$80,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4,$F3,$F2  ; 5
000A37r 2  00 00 00 00  
000A3Br 2  00 00 00 00  
000A73r 2  80 80 FE FF  .byte                                                 $80,$80,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4,$F3 ; 6
000A77r 2  00 00 00 00  
000A7Br 2  00 00 00 00  
000AB3r 2  80 80 FE FF  .byte                                               $80,$80,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4 ; 7
000AB7r 2  00 00 00 00  
000ABBr 2  00 00 00 00  
000AF3r 2  80 80 FE FF  .byte                                             $80,$80,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5 ; 8
000AF7r 2  00 00 00 00  
000AFBr 2  00 00 00 00  
000B33r 2  80 80 FE FF  .byte                                           $80,$80,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6 ; 9
000B37r 2  00 00 00 00  
000B3Br 2  00 00 00 00  
000B73r 2  80 80 80 FE  .byte                                         $80,$80,$80,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6 ; 10
000B77r 2  FF 00 00 00  
000B7Br 2  00 00 00 00  
000BB3r 2  80 80 80 FE  .byte                                       $80,$80,$80,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6 ; 11
000BB7r 2  FF 00 00 00  
000BBBr 2  00 00 00 00  
000BF3r 2  FA FB FC FD  .byte                                     $FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7 ; 12
000BF7r 2  FE FF 00 00  
000BFBr 2  00 00 00 00  
000C33r 2  FA FB FC FD  .byte                                   $FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8 ; 13
000C37r 2  FE FF 00 00  
000C3Br 2  00 00 00 00  
000C73r 2  FA FB FC FD  .byte                                 $FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8 ; 14
000C77r 2  FE FF 00 00  
000C7Br 2  00 00 00 00  
000CB2r 2  F9 FA FB FC  .byte                               $F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9 ; 15
000CB6r 2  FD FE FF 00  
000CBAr 2  00 00 00 00  
000CF2r 2  80 80 80 FB  .byte                             $80,$80,$80,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9 ; 16
000CF6r 2  FC FD FE FF  
000CFAr 2  00 00 00 00  
000D32r 2  80 80 80 FB  .byte                           $80,$80,$80,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA ; 17
000D36r 2  FC FD FE FF  
000D3Ar 2  00 00 00 00  
000D72r 2  80 80 80 FC  .byte                         $80,$80,$80,$FC,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA ; 18
000D76r 2  FB FC FD FE  
000D7Ar 2  FF 00 00 00  
000DB2r 2  80 80 80 FA  .byte                       $80,$80,$80,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB ; 19
000DB6r 2  FB FC FD FE  
000DBAr 2  FF 00 00 00  
000DF2r 2  80 80 80 F9  .byte                     $80,$80,$80,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB ; 20
000DF6r 2  FA FB FC FD  
000DFAr 2  FE FF 00 00  
000E32r 2  80 80 80 F9  .byte                   $80,$80,$80,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC ; 21
000E36r 2  FA FB FC FD  
000E3Ar 2  FE FF 00 00  
000E72r 2  80 80 80 F8  .byte                 $80,$80,$80,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC ; 22
000E76r 2  F9 FA FB FC  
000E7Ar 2  FD FE FF 00  
000EB2r 2  80 80 80 F7  .byte               $80,$80,$80,$F7,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC ; 23
000EB6r 2  F8 F9 FA FB  
000EBAr 2  FC FD FE FF  
000EF2r 2  80 80 80 F6  .byte             $80,$80,$80,$F6,$F7,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC ; 24
000EF6r 2  F7 F8 F9 FA  
000EFAr 2  FB FC FD FE  
000F32r 2  80 80 80 F5  .byte           $80,$80,$80,$F5,$F6,$F7,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC ; 25
000F36r 2  F6 F7 F8 F9  
000F3Ar 2  FA FB FC FD  
000F72r 2  80 80 80 F4  .byte         $80,$80,$80,$F4,$F5,$F6,$F7,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB ; 26
000F76r 2  F5 F6 F7 F8  
000F7Ar 2  F9 FA FB FC  
000FB2r 2  80 80 80 F2  .byte       $80,$80,$80,$F2,$F3,$F4,$F5,$F6,$F7,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA ; 27
000FB6r 2  F3 F4 F5 F6  
000FBAr 2  F7 F8 F9 FA  
000FF2r 2  80 80 80 F0  .byte     $80,$80,$80,$F0,$F1,$F2,$F3,$F4,$F5,$F6,$F7,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9 ; 28
000FF6r 2  F1 F2 F3 F4  
000FFAr 2  F5 F6 F7 F8  
001032r 2  80 80 80 EE  .byte   $80,$80,$80,$EE,$EF,$F0,$F1,$F2,$F3,$F4,$F5,$F6,$F7,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8 ; 29
001036r 2  EF F0 F1 F2  
00103Ar 2  F3 F4 F5 F6  
001072r 2  80 80 80 80  .byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80  ; 30
001076r 2  80 80 80 80  
00107Ar 2  80 80 80 80  
0010B2r 2               
0010B2r 2               
0010B2r 2               
0010B2r 1               ;constants
0010B2r 1               
0010B2r 1               ; RAM Interrupt Vectors
0010B2r 1               IRQVec            = $0314
0010B2r 1               
0010B2r 1               ; VERA
0010B2r 1               VERA_addr_low     = $9F20
0010B2r 1               VERA_addr_high    = $9F21
0010B2r 1               VERA_addr_bank    = $9F22
0010B2r 1               VERA_data0        = $9F23
0010B2r 1               VERA_data1        = $9F24
0010B2r 1               VERA_ctrl         = $9F25
0010B2r 1               VERA_ien          = $9F26
0010B2r 1               VERA_isr          = $9F27
0010B2r 1               VERA_dc_video     = $9F29 ; DCSEL = 0
0010B2r 1               ;   Current Field | Sprites Enable | Layer1 Enable  |Layer0 Enable
0010B2r 1               ; NTSC/RGB: 240P  | NTSC: Chroma Disable / RGB: HV Sync Output Mode
0010B2r 1               
0010B2r 1               VERA_dc_hscale    = $9F2A
0010B2r 1               VERA_dc_vscale    = $9F2B
0010B2r 1               
0010B2r 1               VERA_L0_config    = $9F2D
0010B2r 1               ;   7       6     5   4       3       2             1   0
0010B2r 1               ;   Map Height | Map Width | T256C | Bitmap Mode | Color Depth
0010B2r 1               ;   0 - 32                  0 - 16    0 tiled       0   1bpp mono
0010B2r 1               ;   1 - 64                  1 - 256   1 enabled     1   2bpp 4 color
0010B2r 1               ;   2 - 128                                         2   4bpp 16 color
0010B2r 1               ;   3 - 256                                         3   8bpp 256 color
0010B2r 1               ;   bitmap mode - tilebase points to bitmap data, mapbase not used
0010B2r 1               ;   tile width = 0 is 320 pixels / tile width=1 is 640 pixels.. so could do 4bpp x 320?
0010B2r 1               ;   The palette offset (in 'H-Scroll (11:8)') modifies the color indexes of the bitmap in the same way as in the tile modes.
0010B2r 1               
0010B2r 1               VERA_L0_mapbase   = $9F2E
0010B2r 1               VERA_L0_tilebase  = $9F2F ;   Tile Base Address (16:11) | Tile Height 0-8/1-16 | Tile Width 0-8/1-16
0010B2r 1               VERA_L0_HSCROLL_L = $9F30 ;  H-Scroll (7:0)
0010B2r 1               VERA_L0_HSCROLL_H = $9F31 ;  - H-Scroll (11:8)
0010B2r 1               VERA_L0_VSCROLL_L = $9F32 ;  V-Scroll (7:0)
0010B2r 1               VERA_L0_VSCROLL_H = $9F33 ;  - V-Scroll (11:8)
0010B2r 1               
0010B2r 1               VERA_L1_config    = $9F34
0010B2r 1               VERA_L1_mapbase   = $9F35
0010B2r 1               VERA_L1_tilebase  = $9F36
0010B2r 1               VERA_L1_HSCROLL_L = $9F37 ;  H-Scroll (7:0)
0010B2r 1               VERA_L1_HSCROLL_H = $9F38 ;  - H-Scroll (11:8)
0010B2r 1               VERA_L1_VSCROLL_L = $9F39 ;  V-Scroll (7:0)
0010B2r 1               VERA_L1_VSCROLL_H = $9F3A ;  - V-Scroll (11:8)
0010B2r 1               
0010B2r 1               VSYNC_BIT         = $01
0010B2r 1               
0010B2r 1               ; VRAM Addresses
0010B2r 1               ;   Address range Description
0010B2r 1               ;   $00000 - $1F9BF Video RAM   - 129,424 bytes -> 126K is 129,024 (1F800)
0010B2r 1               ;   $1F9C0 - $1F9FF PSG registers
0010B2r 1               ;   $1FA00 - $1FBFF Palette
0010B2r 1               ;   $1FC00 - $1FFFF Sprite attributes
0010B2r 1               
0010B2r 1               VRAM_UNRESERVED   = $1A000      ;
0010B2r 1               ; sprite starts must be 32byte aligned...
0010B2r 1               ; only can go to 126K ...
0010B2r 1               VRAM_palette      = $1FA00      ;
0010B2r 1               VRAM_sprite_attributes = $1FC00
0010B2r 1               
0010B2r 1               SPRITES_ONLY_VGA = $41
0010B2r 1               
0010B2r 1               
0010B2r 1               
0010B2r 1               ; Kernal
0010B2r 1               CHROUT            = $FFD2
0010B2r 1               GETIN             = $FFE4
0010B2r 1               CINT              = $FF81
0010B2r 1               
0010B2r 1               
0010B2r 1               ; PETSCII Codes
0010B2r 1               WHITE             = $05
0010B2r 1               RETURN            = $0D
0010B2r 1               SPACE             = $20
0010B2r 1               ZERO_CHAR         = $30
0010B2r 1               SIX_CHAR          = $36
0010B2r 1               NINE_CHAR         = $39
0010B2r 1               C_CHAR            = $43
0010B2r 1               I_CHAR            = $49
0010B2r 1               O_CHAR            = $4F
0010B2r 1               T_CHAR            = $54
0010B2r 1               CLR               = $93
0010B2r 1               
0010B2r 1               ; 	$0800-$9EFF	BASIC program/variables; available to the user
0010B2r 1               WORLD_DATA = $6000 	;	so is %100 [Y 5 bits ] : [ab] 0 [X - 6 bits
0010B2r 1               SCREEN_buffer = $8000
0010B2r 1               
0010B2r 1               ; zero page layout $0022-$007F is available to user
0010B2r 1               ZP_PTR = $22
0010B2r 1               SCRATCH_PTR = $7E
0010B2r 1               
0010B2r 1               ; global data
0010B2r 1  DE AD BE EF  .byte $DE,$AD,$BE,$EF
0010B6r 1  00 00        default_irq_vector:  .addr 0
0010B8r 1  01           VSYNC_counter:       .byte 1
0010B9r 1  01           camera_facing: 		 .byte 1
0010BAr 1               
0010BAr 1  20           camera_cell_x: 		 .byte 32
0010BBr 1  0F           camera_cell_y: 		 .byte 15
0010BCr 1               
0010BCr 1               .macro stash_scratch
0010BCr 1               	STA (SCRATCH_PTR)
0010BCr 1                   INC SCRATCH_PTR
0010BCr 1               .endmacro
0010BCr 1               
0010BCr 1               custom_irq_handler:
0010BCr 1  AD 27 9F        lda VERA_isr
0010BFr 1  29 01           and #VSYNC_BIT
0010C1r 1  F0 03           beq @continue ; non-VSYNC IRQ, no tick update
0010C3r 1  EE rr rr        inc VSYNC_counter
0010C6r 1               @continue:
0010C6r 1                  ; continue to default IRQ handler
0010C6r 1  6C rr rr        jmp (default_irq_vector)
0010C9r 1                  ; RTI will happen after jump
0010C9r 1               
0010C9r 1               start:
0010C9r 1                 ; start of program - init globals
0010C9r 1  AD 14 03       lda IRQVec
0010CCr 1  8D rr rr       sta default_irq_vector
0010CFr 1  AD 15 03       lda IRQVec+1
0010D2r 1  8D rr rr       sta default_irq_vector+1
0010D5r 1  9C 29 9F       stz VERA_dc_video   ; disable display
0010D8r 1  A9 2B          lda #43 ; set scale for bitmap mode - going for 215x161 mode
0010DAr 1  8D 2A 9F       sta VERA_dc_hscale
0010DDr 1  8D 2B 9F       sta VERA_dc_vscale
0010E0r 1                 ; for now no L0 or L1
0010E0r 1               
0010E0r 1                 ; let's stick that test sprite data into VRAM at zero for now..
0010E0r 1  9C 25 9F       stz VERA_ctrl
0010E3r 1  9C 20 9F       stz VERA_addr_low
0010E6r 1  9C 21 9F       stz VERA_addr_high
0010E9r 1  A9 10          lda #$10
0010EBr 1  8D 22 9F       sta VERA_addr_bank
0010EEr 1                 ; load test VRAM data
0010EEr 1               
0010EEr 1                 ; is 512 bytes at test_cell_sprite label
0010EEr 1  A0 00          ldy #0
0010F0r 1               
0010F0r 1  A9 rr          LDA #<test_vram_data
0010F2r 1  85 22          STA ZP_PTR
0010F4r 1  A9 rr          LDA #>test_vram_data
0010F6r 1  85 23          STA ZP_PTR+1
0010F8r 1  A2 05          LDX #5   ;   num pages to copy
0010FAr 1  80 02          BRA :++
0010FCr 1                 :
0010FCr 1  E6 23             INC ZP_PTR+1
0010FEr 1                   :
0010FEr 1  B1 22              LDA (ZP_PTR),Y
001100r 1  8D 23 9F           STA VERA_data0
001103r 1  C8                 INY
001104r 1  D0 F8              BNE :-
001106r 1  CA                DEX
001107r 1  D0 F3             BNE :--
001109r 1               
001109r 1                 ; write sprite test data
001109r 1  A9 80          LDA #128
00110Br 1  8D 20 9F       STA VERA_addr_low
00110Er 1  A9 FC          lda #>VRAM_sprite_attributes
001110r 1  8D 21 9F       sta VERA_addr_high
001113r 1  A9 19          lda #$19   ;  decrement 1 bank 1
001115r 1  8D 22 9F       sta VERA_addr_bank
001118r 1  A2 80          LDX #128
00111Ar 1                 :
00111Ar 1  BD rr rr         LDA test_sprite_data,X
00111Dr 1  8D 23 9F         STA VERA_data0
001120r 1  CA               DEX
001121r 1  D0 F7            BNE :-
001123r 1  BD rr rr        LDA test_sprite_data,X
001126r 1  8D 23 9F        STA VERA_data0
001129r 1               
001129r 1                 ; enable display
001129r 1  9C 25 9F       stz VERA_ctrl
00112Cr 1  A9 41          lda #SPRITES_ONLY_VGA
00112Er 1  8D 29 9F       sta VERA_dc_video
001131r 1               
001131r 1                 ; overwrite RAM IRQ vector with custom handler address
001131r 1  78             sei ; disable IRQ while vector is changing
001132r 1  A9 rr          lda #<custom_irq_handler
001134r 1  8D 14 03       sta IRQVec
001137r 1  A9 rr          lda #>custom_irq_handler
001139r 1  8D 15 03       sta IRQVec+1
00113Cr 1  A9 01          lda #VSYNC_BIT ; make VERA only generate VSYNC IRQs
00113Er 1  8D 26 9F       sta VERA_ien
001141r 1  58             cli ; enable IRQ now that vector is properly set
001142r 1               
001142r 1                 ; main loop here...
001142r 1  9C rr rr        STz camera_facing
001145r 1               
001145r 1               @do_update:
001145r 1  20 rr rr        jsr draw_test
001148r 1               
001148r 1               @FRAME_CHECK:
001148r 1  A9 04           lda #4
00114Ar 1                 @frame_A:
00114Ar 1  CB              wai
00114Br 1  AC rr rr        ldy VSYNC_counter
00114Er 1  F0 FA           beq @frame_A
001150r 1  9C rr rr        stz VSYNC_counter
001153r 1  3A              DEC A
001154r 1  D0 F4           BNE @frame_A
001156r 1                  ; poll keyboard for input
001156r 1  20 E4 FF        jsr GETIN
001159r 1  C9 00           cmp #0
00115Br 1  F0 EB           beq @FRAME_CHECK
00115Dr 1  C9 1D           cmp #$1D 	;	cursor right
00115Fr 1  D0 05           BNE :+
001161r 1  CE rr rr        DEC camera_facing
001164r 1  80 DF           BRA @do_update
001166r 1                  :
001166r 1  C9 9D           cmp  #$9D 	;	cursor left
001168r 1  D0 DB           BNE @do_update
00116Ar 1  EE rr rr        INC camera_facing
00116Dr 1  80 D6           BRA @do_update
00116Fr 1               
00116Fr 1               @cleanup_and_exit:
00116Fr 1                  ; restore default IRQ vector
00116Fr 1  78              sei
001170r 1  AD rr rr        lda default_irq_vector
001173r 1  8D 14 03        sta IRQVec
001176r 1  AD rr rr        lda default_irq_vector+1
001179r 1  8D 15 03        sta IRQVec+1
00117Cr 1  58              cli
00117Dr 1  20 81 FF        jsr CINT
001180r 1  60              rts
001181r 1               
001181r 1               ; all the objects need to get into a structure to be drawn at each screen Y..
001181r 1               ; need object type, screenX .. store back to front .. track # objects to be drawn ?
001181r 1               ; there's 120 lines on screen.. up to say 32 objects per line would need about 8K RAM for the list.. each line needs 64 bytes
001181r 1               
001181r 1               draw_test:
001181r 1  A9 80        	lda #128
001183r 1  8D 20 9F     	STA VERA_addr_low
001186r 1  A9 FC            lda #>VRAM_sprite_attributes
001188r 1  8D 21 9F         sta VERA_addr_high
00118Br 1  A9 11            lda #$11
00118Dr 1  8D 22 9F         sta VERA_addr_bank
001190r 1               
001190r 1               
001190r 1                   ; load increments and set start position...
001190r 1  AE rr rr         LDX camera_facing
001193r 1  8A               TXA
001194r 1  18               CLC
001195r 1  69 80            ADC #128
001197r 1  85 33            STA ZP_PTR+17
001199r 1                   ; increments across rows
001199r 1  64 32            STZ ZP_PTR+16   ; 	is driving me nuts so ..
00119Br 1  A9 80            LDA #128
00119Dr 1  85 2E            STA ZP_PTR+12 	;	next row  start XL at ZP_PTR+12
00119Fr 1  85 30            STA ZP_PTR+14 	;	next row  start YL at ZP_PTR+14
0011A1r 1  A9 64            LDA #100
0011A3r 1  85 2F            STA ZP_PTR+13 	;	next row start at XH ZP_PTR+13
0011A5r 1  A9 84            LDA #132
0011A7r 1  85 31         	STA ZP_PTR+15 	;	next row start YH at ZP_PTR+15
0011A9r 1               
0011A9r 1               
0011A9r 1  BD rr rr         LDA ACROSS_ROW_X_L,X
0011ACr 1  85 26            STA ZP_PTR+4 	; 	ZP_PTR+4 = spriteX increment Low byte
0011AEr 1  BD rr rr         LDA ACROSS_ROW_X_H,X
0011B1r 1  85 27            STA ZP_PTR+5 	;	ZP_PTR+4 = spriteX increment high byte
0011B3r 1  BD rr rr         LDA ACROSS_ROW_Y_L,X
0011B6r 1  85 28            STA ZP_PTR+6 	; 	ZP_PTR+6 = spriteY increment low byte
0011B8r 1  BD rr rr         LDA ACROSS_ROW_Y_H,X
0011BBr 1  85 29            STA ZP_PTR+7 	; 	ZP_PTR+3 = spriteY increment
0011BDr 1                   ; increments o next rows
0011BDr 1  BD rr rr         LDA NEXT_ROW_X_L,X
0011C0r 1  85 2A            STA ZP_PTR+8 	; 	ZP_PTR+4 = spriteX increment Low byte
0011C2r 1  BD rr rr         LDA NEXT_ROW_X_H,X
0011C5r 1  85 2B            STA ZP_PTR+9 	;	ZP_PTR+4 = spriteX increment high byte
0011C7r 1  BD rr rr         LDA NEXT_ROW_Y_L,X
0011CAr 1  85 2C            STA ZP_PTR+10 	; 	ZP_PTR+6 = spriteY increment low byte
0011CCr 1  BD rr rr         LDA NEXT_ROW_Y_H,X
0011CFr 1  85 2D            STA ZP_PTR+11	; 	ZP_PTR+3 = spriteY increment
0011D1r 1               
0011D1r 1  A9 10            LDA #16
0011D3r 1  85 40            STA ZP_PTR+30
0011D5r 1               
0011D5r 1  A0 70            LDY #112		;	amount of sprites we can write max
0011D7r 1                 @quad_loop:
0011D7r 1  A2 08           LDX #8
0011D9r 1  86 7F           STX $7F
0011DBr 1  80 04          	bra @do_row
0011DDr 1                 @next_row:
0011DDr 1  88                 DEY
0011DEr 1  D0 01              BNE @do_row
0011E0r 1  60                 rts
0011E1r 1                 @do_row:
0011E1r 1  C6 7F              DEC $7F
0011E3r 1  F0 73              BEQ @next_quad
0011E5r 1               
0011E5r 1  A2 1B           LDX #27
0011E7r 1  A5 2E          	LDA ZP_PTR+12 	;
0011E9r 1  85 22          	STA ZP_PTR 		;	current row XL
0011EBr 1  65 2A            ADC ZP_PTR+8
0011EDr 1  85 2E            STA ZP_PTR+12 	;	next row XL
0011EFr 1  A5 2F            LDA ZP_PTR+13 	;
0011F1r 1  C9 C9            CMP #201
0011F3r 1  B0 63            BCS @next_quad 		;	off screen
0011F5r 1  85 23            STA ZP_PTR+1 	;	current row XH
0011F7r 1  65 2B            ADC ZP_PTR+9 	;
0011F9r 1  85 2F            STA ZP_PTR+13 	;	next row XH
0011FBr 1               
0011FBr 1  A5 30            LDA ZP_PTR+14
0011FDr 1  85 24            STA ZP_PTR+2 	;	current row YL
0011FFr 1  65 2C            ADC ZP_PTR+10
001201r 1  85 30            STA ZP_PTR+14 	;	next row YL
001203r 1  A5 31            LDA ZP_PTR+15
001205r 1  C9 99            CMP #153
001207r 1  B0 4F            BCS @next_quad;	off screen
001209r 1  85 25            STA ZP_PTR+3
00120Br 1  65 2D            ADC ZP_PTR+11
00120Dr 1  85 31            STA ZP_PTR+15 	;	next row YH
00120Fr 1                 @forward_row_loop:
00120Fr 1  9C 23 9F           STZ VERA_data0 ; 	address 12:5
001212r 1  9C 23 9F           STZ VERA_data0 ;  mode  | address 16:13
001215r 1  A5 23              LDA ZP_PTR+1
001217r 1  8D 23 9F           STA VERA_data0 ; 	X 7:0
00121Ar 1  9C 23 9F           STZ VERA_data0 ; 	X 9:8
00121Dr 1  A5 25              LDA ZP_PTR+3  ; 	spriteY
00121Fr 1  8D 23 9F           STA VERA_data0 ;  Y 7:0
001222r 1  9C 23 9F           STZ VERA_data0 ; 	Y 9:8
001225r 1  A9 0C              LDA #$0C
001227r 1  8D 23 9F           STA VERA_data0 	; 	3 z depth no flip
00122Ar 1  A9 10              LDA #$10 			; 	16x8 no palette offset
00122Cr 1  A5 40              LDA ZP_PTR+30;
00122Er 1  8D 23 9F           STA VERA_data0
001231r 1                   ; increment X
001231r 1  A5 22              LDA ZP_PTR 	;	load X_l
001233r 1  65 26              ADC ZP_PTR+4
001235r 1  85 22              STA ZP_PTR
001237r 1               
001237r 1  A5 23              LDA ZP_PTR+1
001239r 1  65 27              ADC ZP_PTR+5
00123Br 1  C9 D0              CMP #208
00123Dr 1  B0 9E              BCS @next_row		; covers negatives even..
00123Fr 1  85 23              STA ZP_PTR+1
001241r 1                   ; increment Y
001241r 1  A5 24              LDA ZP_PTR+2 	;
001243r 1  65 28              ADC ZP_PTR+6
001245r 1  85 24              STA ZP_PTR+2
001247r 1               
001247r 1  A5 25              LDA ZP_PTR+3
001249r 1  65 29              ADC ZP_PTR+7
00124Br 1  C9 99              CMP #153
00124Dr 1  B0 8E              BCS @next_row		; 	 covers negatives even..
00124Fr 1  85 25              STA ZP_PTR+3
001251r 1  CA                 DEX
001252r 1  F0 89              BEQ @next_row
001254r 1  88                 DEY
001255r 1  D0 B8              BNE @forward_row_loop
001257r 1                 @end:
001257r 1  60                rts
001258r 1               
001258r 1                 @next_quad:
001258r 1  E6 40          	  inc ZP_PTR+30
00125Ar 1  A6 32          	  LDX ZP_PTR+16 	;
00125Cr 1  8A             	  TXA
00125Dr 1  18             	  CLC
00125Er 1  69 02          	  ADC #2
001260r 1  85 32          	  STA ZP_PTR+16
001262r 1  7C rr rr       	  jmp (@t_quads,X) 	;
001265r 1                 	@t_quads:
001265r 1  rr rr          	  .addr @quad_1
001267r 1  rr rr          	  .addr @quad_2
001269r 1  rr rr          	  .addr @quad_3
00126Br 1  rr rr          	  .addr @end
00126Dr 1                 @quad_1: 	;	need invert across row to make next bits . next row stays same
00126Dr 1  A6 33        	LDX ZP_PTR+17
00126Fr 1  BD rr rr         LDA ACROSS_ROW_X_L,X
001272r 1  85 26            STA ZP_PTR+4 	; 	ZP_PTR+4 = spriteX increment Low byte
001274r 1  69 80            ADC #128
001276r 1  85 2E            STA ZP_PTR+12
001278r 1  BD rr rr         LDA ACROSS_ROW_X_H,X
00127Br 1  85 27            STA ZP_PTR+5 	;	ZP_PTR+4 = spriteX increment high byte
00127Dr 1  69 64            ADC #100
00127Fr 1  85 2F            STA ZP_PTR+13
001281r 1  BD rr rr         LDA ACROSS_ROW_Y_L,X
001284r 1  85 28            STA ZP_PTR+6 	; 	ZP_PTR+6 = spriteY increment low byte
001286r 1  69 80            ADC #128
001288r 1  85 30            STA ZP_PTR+14
00128Ar 1  BD rr rr         LDA ACROSS_ROW_Y_H,X
00128Dr 1  85 29            STA ZP_PTR+7 	; 	ZP_PTR+3 = spriteY increment
00128Fr 1  69 84            ADC #132
001291r 1  85 31            STA ZP_PTR+15
001293r 1  4C rr rr         jmp @quad_loop
001296r 1               @quad_2: ; invert next row - start 1 row up
001296r 1  A6 33        	LDX ZP_PTR+17
001298r 1  BD rr rr         LDA NEXT_ROW_X_L,X
00129Br 1  85 2A            STA ZP_PTR+8 	; 	ZP_PTR+4 = spriteX increment Low byte
00129Dr 1  69 80            ADC #128
00129Fr 1  85 2E            STA ZP_PTR+12
0012A1r 1  85 34            STA ZP_PTR+18
0012A3r 1               
0012A3r 1  BD rr rr         LDA NEXT_ROW_X_H,X
0012A6r 1  85 2B            STA ZP_PTR+9 	;	ZP_PTR+4 = spriteX increment high byte
0012A8r 1  69 64            ADC #100
0012AAr 1  85 2F            STA ZP_PTR+13
0012ACr 1  85 35            STA ZP_PTR+19
0012AEr 1               
0012AEr 1  BD rr rr         LDA NEXT_ROW_Y_L,X
0012B1r 1  85 2C            STA ZP_PTR+10 	; 	ZP_PTR+6 = spriteY increment low byte
0012B3r 1  69 80            ADC #128
0012B5r 1  85 30            STA ZP_PTR+14
0012B7r 1  85 36            STA ZP_PTR+20
0012B9r 1               
0012B9r 1  BD rr rr         LDA NEXT_ROW_Y_H,X
0012BCr 1  85 2D            STA ZP_PTR+11 	; 	ZP_PTR+3 = spriteY increment
0012BEr 1  69 84            ADC #132
0012C0r 1  85 31            STA ZP_PTR+15
0012C2r 1  85 37            STA ZP_PTR+21
0012C4r 1  4C rr rr         jmp @quad_loop
0012C7r 1               @quad_3: ; restore across row and increment ..
0012C7r 1  AE rr rr     	LDX camera_facing
0012CAr 1  BD rr rr         LDA ACROSS_ROW_X_L,X
0012CDr 1  85 26            STA ZP_PTR+4 	; 	ZP_PTR+4 = spriteX increment Low byte
0012CFr 1  65 34            ADC ZP_PTR+18
0012D1r 1  85 2E            STA ZP_PTR+12
0012D3r 1  BD rr rr         LDA ACROSS_ROW_X_H,X
0012D6r 1  85 27            STA ZP_PTR+5 	;	ZP_PTR+4 = spriteX increment high byte
0012D8r 1  65 35            ADC ZP_PTR+19
0012DAr 1  85 2F            STA ZP_PTR+13
0012DCr 1  BD rr rr         LDA ACROSS_ROW_Y_L,X
0012DFr 1  85 28            STA ZP_PTR+6 	; 	ZP_PTR+6 = spriteY increment low byte
0012E1r 1  65 36            ADC ZP_PTR+20
0012E3r 1  85 30            STA ZP_PTR+14
0012E5r 1  BD rr rr         LDA ACROSS_ROW_Y_H,X
0012E8r 1  85 29            STA ZP_PTR+7 	; 	ZP_PTR+3 = spriteY increment
0012EAr 1  65 37            ADC ZP_PTR+21
0012ECr 1  85 31            STA ZP_PTR+15
0012EEr 1  4C rr rr         jmp @quad_loop
0012F1r 1               
0012F1r 1               draw_world:
0012F1r 1                 ; clear first entry for each line...
0012F1r 1  64 22          STZ ZP_PTR
0012F3r 1  A9 80          LDA #>SCREEN_buffer
0012F5r 1  85 23          STA ZP_PTR+1
0012F7r 1  A2 1E          LDX #30
0012F9r 1  A9 00          LDA #0
0012FBr 1                 @loop:
0012FBr 1  A8               TAY
0012FCr 1  91 22            STA (ZP_PTR),y 	;	set first buffer entry for line mod 4 = 0
0012FEr 1  A0 40            LDY #64 		; 	move buffer pointer to next line
001300r 1  91 22            STA (ZP_PTR),y 	;	set first buffer entry for line mode 4 =1
001302r 1  A0 80            LDY #128 		; 	move buffer pointer to next line
001304r 1  91 22            STA (ZP_PTR),y 	;	set first buffer entry for line mode 4 =2
001306r 1  A0 C0            LDY #192 		; 	move buffer pointer to next line
001308r 1  91 22            STA (ZP_PTR),y 	;	set first buffer entry for line mode 4 =3
00130Ar 1  E6 23            INC ZP_PTR+1 	;	next page plz
00130Cr 1  CA               DEX
00130Dr 1  D0 EC            BNE @loop
00130Fr 1                 ; fetch bearing data ..
00130Fr 1  AD rr rr       LDA camera_facing
001312r 1  0A             ASL
001313r 1  AA             TAX
001314r 1  7C rr rr       jmp (@T_BEARINGS,X)
001317r 1               @T_BEARINGS:
001317r 1  rr rr        	.addr BEARING_ZERO
001319r 1  rr rr        	.addr BEARING_ONE
00131Br 1  rr rr        	.addr BEARING_TWO
00131Dr 1               
00131Dr 1               BEARING_ZERO:
00131Dr 1  A9 70            LDA #112 ; starting at screen Y=112
00131Fr 1                 @E_loop:
00131Fr 1  85 24            STA ZP_PTR+2 ; stash the Y we're working at...
001321r 1  64 22              STZ ZP_PTR   ; zero this out to use pointer ..
001323r 1  4A                 LSR
001324r 1  66 22              ROR ZP_PTR ;
001326r 1  4A                 LSR
001327r 1  66 22              ROR ZP_PTR ; because is 64 avail for each
001329r 1  09 80              ORA #>SCREEN_buffer ; making pointer woot!
00132Br 1  85 23              STA ZP_PTR+1 ; ZP_PTR points to the line..
00132Dr 1  A0 00              LDY #0 	;	set to first offset in that buffer.. we'll add other objects to the lines later so this will always be null object
00132Fr 1  A9 08              LDA #8 	;   start at X=0
001331r 1                   @E_loopE:
001331r 1  AA                   TAX
001332r 1  A9 02                LDA #2 	;	water type
001334r 1  91 22                STA (ZP_PTR),y
001336r 1  C8                   iny
001337r 1  8A                   TXA ;	get X value
001338r 1  91 22                STA (ZP_PTR),y
00133Ar 1  C8                   iny
00133Br 1  18                   CLC
00133Cr 1  69 10                adc #16
00133Er 1  C9 88                CMP #136
001340r 1  90 EF                BCC @E_loopE 	;kk
001342r 1  A9 00              LDA #0
001344r 1  91 22              STA (ZP_PTR),y ; stash zero value to end the thing
001346r 1  A5 24              LDA ZP_PTR+2
001348r 1  E9 0F              SBC #15 	;	borrow is set ...
00134Ar 1  B0 D3              BCS @E_loop ; still spots left on screen.. otay
00134Cr 1  4C rr rr         jmp update_screen
00134Fr 1               BEARING_ONE:
00134Fr 1               BEARING_TWO: ; 30 degrees ..
00134Fr 1  A9 74            LDA #116 ; starting at screen Y=112
001351r 1                 @E_loop:
001351r 1  85 24            STA ZP_PTR+2 ; stash the Y we're working at...
001353r 1  64 22              STZ ZP_PTR   ; zero this out to use pointer ..
001355r 1  4A                 LSR
001356r 1  66 22              ROR ZP_PTR ;
001358r 1  4A                 LSR
001359r 1  66 22              ROR ZP_PTR ; because is 64 avail for each
00135Br 1  09 80              ORA #>SCREEN_buffer ; making pointer woot!
00135Dr 1  85 23              STA ZP_PTR+1 ; ZP_PTR points to the line..
00135Fr 1  A0 00              LDY #0 	;	set to first offset in that buffer.. we'll add other objects to the lines later so this will always be null object
001361r 1  A9 0C              LDA #12 	;   start at X=0
001363r 1                   @E_loopE:
001363r 1  AA                   TAX
001364r 1  A9 02                LDA #2 	;	water type
001366r 1  91 22                STA (ZP_PTR),y
001368r 1  C8                   iny
001369r 1  8A                   TXA ;	get X value
00136Ar 1  91 22                STA (ZP_PTR),y
00136Cr 1  C8                   iny
00136Dr 1  18                   CLC
00136Er 1  69 1C                adc #28
001370r 1  C9 88                CMP #136
001372r 1  90 EF                BCC @E_loopE 	;kk
001374r 1  A9 00              LDA #0
001376r 1  91 22              STA (ZP_PTR),y ; stash zero value to end the thing
001378r 1  A5 24              LDA ZP_PTR+2
00137Ar 1  E9 0D              SBC #13 	;	borrow is set ...
00137Cr 1  B0 D3              BCS @E_loop ; still spots left on screen.. otay
00137Er 1  4C rr rr         jmp update_screen
001381r 1               
001381r 1  60             rts
001382r 1               
001382r 1               update_screen:
001382r 1  9C 20 9F       stz VERA_addr_low
001385r 1  A9 FC          lda #>VRAM_sprite_attributes
001387r 1  8D 21 9F       sta VERA_addr_high
00138Ar 1  A9 11          lda #$11
00138Cr 1  8D 22 9F       sta VERA_addr_bank
00138Fr 1  A9 77            LDA #119
001391r 1  85 24            STA ZP_PTR+2 ; stash line we at ..
001393r 1  64 22              STZ ZP_PTR
001395r 1  4A                 LSR
001396r 1  66 22              ROR ZP_PTR ;
001398r 1  4A                 LSR
001399r 1  66 22              ROR ZP_PTR ; because is 64 avail for each
00139Br 1  09 80              ORA #>SCREEN_buffer ; making pointer woot!
00139Dr 1  85 23              STA ZP_PTR+1 ; ZP_PTR points to the line..
00139Fr 1                 @y_line_loop:
00139Fr 1  A0 00              LDY #0 ; set to check that first point ..
0013A1r 1  C6 24              dec ZP_PTR+2
0013A3r 1                   @do_check_line:
0013A3r 1  B1 22                LDA (ZP_PTR),Y ;	get type
0013A5r 1  C8                   INY
0013A6r 1  AA                   TAX
0013A7r 1  7C rr rr             JMP (@T_objtypes,X) ;
0013AAr 1                   @T_objtypes:
0013AAr 1  rr rr                .addr @end_line
0013ACr 1  rr rr                .addr @do_water
0013AEr 1                   @do_water:
0013AEr 1  9C 23 9F           stz VERA_data0 	; 	address 12:5
0013B1r 1  9C 23 9F           STZ VERA_data0 	; 	4bit color address 16:13
0013B4r 1  B1 22              LDA (ZP_PTR),Y  	;	get the X
0013B6r 1  C8                 iny
0013B7r 1  8D 23 9F           STA VERA_data0 	;	X
0013BAr 1  9C 23 9F           STZ VERA_data0 	;	 X
0013BDr 1  A5 24              LDA ZP_PTR+2
0013BFr 1  8D 23 9F           STA VERA_data0 	;	y
0013C2r 1  9C 23 9F           STZ VERA_data0 	; 	y
0013C5r 1  A9 0C              LDA #$0C
0013C7r 1  8D 23 9F           STA VERA_data0 	; 	3 z depth no flip
0013CAr 1  A9 D0              LDA #$D0 			; 	16x64 no palette offset
0013CCr 1  8D 23 9F           STA VERA_data0
0013CFr 1  80 D2              bra @do_check_line
0013D1r 1                   @end_line:
0013D1r 1  38                   SEC
0013D2r 1  A5 22                LDA ZP_PTR
0013D4r 1  E9 40                SBC #64
0013D6r 1  85 22                STA ZP_PTR
0013D8r 1  A5 23                LDA ZP_PTR+1
0013DAr 1  E9 00                SBC #0
0013DCr 1  85 23                STA ZP_PTR+1
0013DEr 1  C9 80                CMP #>SCREEN_buffer
0013E0r 1  B0 BD                BCS @y_line_loop
0013E2r 1  60           rts
0013E3r 1               
0013E3r 1               test_sprite_data:
0013E3r 1               ; first 16 sprites reserved ...
0013E3r 1               ;      0   1   2   3   4   5   6  7
0013E3r 1               ;     add,mod, XL, XH, YL, YH,msk,hwp
0013E3r 1  20 00 68 00  .byte  32,$00,104,  0,132,  0,$0C,$00  ;  cursor middle - 8x8  sprite 0
0013E7r 1  84 00 0C 00  
0013EBr 1  10 00 0C 00  .byte  16,$00, 12,  0,  0,  0,$0C,$30  ;  border top - 64x8    sprite 1
0013EFr 1  00 00 0C 30  
0013F3r 1  10 00 4C 00  .byte  16,$00, 76,  0,  0,  0,$0C,$30  ;  border top - 64x8    sprite 2
0013F7r 1  00 00 0C 30  
0013FBr 1  10 00 8C 00  .byte  16,$00,140,  0,  0,  0,$0C,$30  ;  border top - 64x8    sprite 3
0013FFr 1  00 00 0C 30  
001403r 1               
001403r 1  10 00 0C 00  .byte  16,$00, 12,  0,153,  0,$0F,$30  ;  border bottom - 64x8  sprite 4
001407r 1  99 00 0F 30  
00140Br 1  10 00 4C 00  .byte  16,$00, 76,  0,153,  0,$0F,$30  ;  border bottom - 64x8  sprite 5
00140Fr 1  99 00 0F 30  
001413r 1  10 00 8C 00  .byte  16,$00,140,  0,153,  0,$0F,$30  ;  border bottom - 64x8  sprite 6
001417r 1  99 00 0F 30  
00141Br 1               
00141Br 1  10 00 00 00  .byte  16,$00,  0,  0, 16,  0,$0C,$C0  ;  border left    8x64   sprite 7
00141Fr 1  10 00 0C C0  
001423r 1  10 00 00 00  .byte  16,$00,  0,  0, 80,  0,$0C,$C0  ;  border left    8x64   sprite 8
001427r 1  50 00 0C C0  
00142Br 1  10 00 D0 00  .byte  16,$00,208,  0, 16,  0,$0F,$C0  ;  border left    8x64   sprite 9
00142Fr 1  10 00 0F C0  
001433r 1  10 00 D0 00  .byte  16,$00,208,  0, 80,  0,$0F,$C0  ;  border left    8x64   sprite A
001437r 1  50 00 0F C0  
00143Br 1               
00143Br 1  00 00 00 00  .res 40, 0
00143Fr 1  00 00 00 00  
001443r 1  00 00 00 00  
001463r 1               
001463r 1               
001463r 1               test_vram_data:
001463r 1               test_cell_sprite: 	;	is 16x64x16 bit = 512 bytes   sprite addr = 0
001463r 1               ; 	   01   23   45   67   89   AB   CD   EF
001463r 1  00 00 66 66  .byte $00, $00, $66, $66, $66, $66, $00, $00 	; 	0
001467r 1  66 66 00 00  
00146Br 1  00 66 EE EE  .byte $00, $66, $EE, $EE, $EE, $EE, $66, $00  	;	1
00146Fr 1  EE EE 66 00  
001473r 1  06 EE EE EE  .byte $06, $EE, $EE, $EE, $EE, $EE, $EE, $60 	;	2
001477r 1  EE EE EE 60  
00147Br 1  6E EE EE EE  .byte $6E, $EE, $EE, $EE, $EE, $EE, $EE, $E6 	;	3
00147Fr 1  EE EE EE E6  
001483r 1  6E EE EE EE  .byte $6E, $EE, $EE, $EE, $EE, $EE, $EE, $E6 	;	4
001487r 1  EE EE EE E6  
00148Br 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $E6, $66 	;	5
00148Fr 1  EE EE E6 66  
001493r 1  66 66 EE EE  .byte $66, $66, $EE, $EE, $EE, $EE, $66, $66 	;	6
001497r 1  EE EE 66 66  
00149Br 1  EE 66 66 66  .byte $EE, $66, $66, $66, $66, $66, $66, $EE 	;	7
00149Fr 1  66 66 66 EE  
0014A3r 1               
0014A3r 1  EE EE 66 66  .byte $EE, $EE, $66, $66, $66, $66, $EE, $EE 	; 	8
0014A7r 1  66 66 EE EE  
0014ABr 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
0014AFr 1  EE 66 EE EE  
0014B3r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
0014B7r 1  66 EE 66 EE  
0014BBr 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
0014BFr 1  EE EE EE 66  
0014C3r 1               
0014C3r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	12
0014C7r 1  EE EE EE EE  
0014CBr 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
0014CFr 1  EE 66 EE EE  
0014D3r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
0014D7r 1  66 EE 66 EE  
0014DBr 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
0014DFr 1  EE EE EE 66  
0014E3r 1               
0014E3r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	16
0014E7r 1  EE EE EE EE  
0014EBr 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
0014EFr 1  EE 66 EE EE  
0014F3r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
0014F7r 1  66 EE 66 EE  
0014FBr 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
0014FFr 1  EE EE EE 66  
001503r 1               
001503r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	20
001507r 1  EE EE EE EE  
00150Br 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
00150Fr 1  EE 66 EE EE  
001513r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
001517r 1  66 EE 66 EE  
00151Br 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
00151Fr 1  EE EE EE 66  
001523r 1               
001523r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	24
001527r 1  EE EE EE EE  
00152Br 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
00152Fr 1  EE 66 EE EE  
001533r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
001537r 1  66 EE 66 EE  
00153Br 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
00153Fr 1  EE EE EE 66  
001543r 1               
001543r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	28
001547r 1  EE EE EE EE  
00154Br 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
00154Fr 1  EE 66 EE EE  
001553r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
001557r 1  66 EE 66 EE  
00155Br 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
00155Fr 1  EE EE EE 66  
001563r 1               
001563r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	32
001567r 1  EE EE EE EE  
00156Br 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
00156Fr 1  EE 66 EE EE  
001573r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
001577r 1  66 EE 66 EE  
00157Br 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
00157Fr 1  EE EE EE 66  
001583r 1               
001583r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	36
001587r 1  EE EE EE EE  
00158Br 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
00158Fr 1  EE 66 EE EE  
001593r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
001597r 1  66 EE 66 EE  
00159Br 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
00159Fr 1  EE EE EE 66  
0015A3r 1               
0015A3r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	40
0015A7r 1  EE EE EE EE  
0015ABr 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
0015AFr 1  EE 66 EE EE  
0015B3r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
0015B7r 1  66 EE 66 EE  
0015BBr 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
0015BFr 1  EE EE EE 66  
0015C3r 1               
0015C3r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	44
0015C7r 1  EE EE EE EE  
0015CBr 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
0015CFr 1  EE 66 EE EE  
0015D3r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
0015D7r 1  66 EE 66 EE  
0015DBr 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
0015DFr 1  EE EE EE 66  
0015E3r 1               
0015E3r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	48
0015E7r 1  EE EE EE EE  
0015EBr 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
0015EFr 1  EE 66 EE EE  
0015F3r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
0015F7r 1  66 EE 66 EE  
0015FBr 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
0015FFr 1  EE EE EE 66  
001603r 1               
001603r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	52
001607r 1  EE EE EE EE  
00160Br 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
00160Fr 1  EE 66 EE EE  
001613r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
001617r 1  66 EE 66 EE  
00161Br 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
00161Fr 1  EE EE EE 66  
001623r 1               
001623r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	56
001627r 1  EE EE EE EE  
00162Br 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
00162Fr 1  EE 66 EE EE  
001633r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
001637r 1  66 EE 66 EE  
00163Br 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
00163Fr 1  EE EE EE 66  
001643r 1               
001643r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	60
001647r 1  EE EE EE EE  
00164Br 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
00164Fr 1  EE 66 EE EE  
001653r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
001657r 1  66 EE 66 EE  
00165Br 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63   512 bytes - next sprite addr = 16
00165Fr 1  EE EE EE 66  
001663r 1               
001663r 1               
001663r 1               test_border:
001663r 1  0B 0B 0B 0B  .repeat 64
001667r 1  B0 B0 B0 B0  
00166Br 1  0B 0B 0B 0B  
001863r 1                  .res 4, $0B
001863r 1                  .res 4, $B0
001863r 1               .endrepeat
001863r 1               
001863r 1               test_cross_hair_8x8:    ;  8x8x16 color = 32 bytes ; sprite 32
001863r 1               ;     01   23   45   67
001863r 1  11 00 00 11  .byte $11, $00, $00, $11
001867r 1  10 00 00 01  .byte $10, $00, $00, $01
00186Br 1  00 00 00 00  .byte $00, $00, $00, $00
00186Fr 1  00 01 10 00  .byte $00, $01, $10, $00
001873r 1  00 01 10 00  .byte $00, $01, $10, $00
001877r 1  00 00 00 00  .byte $00, $00, $00, $00
00187Br 1  10 00 00 01  .byte $10, $00, $00, $01
00187Fr 1  11 00 00 11  .byte $11, $00, $00, $11
001882r 1               
