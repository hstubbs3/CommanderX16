ca65 V2.19 - Git 8e6c0c1
Main file   : hex.s
Current file: hex.s

000000r 1               ; 	080D
000000r 1  4C rr rr     jmp start ; 	3 bytes
000003r 1               ;	0810 	- 240 bytes available for stuff that doesn't need alignment
000003r 1  DE AD BE EF  .repeat 28
000007r 1  DE AD BE EF  
00000Br 1  DE AD BE EF  
000073r 1               	.byte $DE,$AD,$BE,$EF
000073r 1               .endrepeat
000073r 1               SCRATCH128:
000073r 1  DE AD BE EF  .repeat 32
000077r 1  DE AD BE EF  
00007Br 1  DE AD BE EF  
0000F3r 1               	.byte $DE,$AD,$BE,$EF
0000F3r 1               .endrepeat
0000F3r 1               
0000F3r 1               ACROSS_ROW_X_L: ; 0900  16 wide , 45* tilt ... this is added to go up row, sub for down row
0000F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0000F3r 1  00 FE FB F4  .byte
0000F7r 1  EC E1 D3 C3  
0000FBr 1  B1 9C 85 6B  
0001F3r 1               
0001F3r 1               ACROSS_ROW_X_H: ; 0A00
0001F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0001F3r 1  10 0F 0F 0F  .byte $10, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $E, $E, $E, $E, $E, $E, $D, $D, $D, $D, $D, $C, $C, $C, $C, $B, $B, $B, $B, $A, $A, $A, $9, $9, $9, $8, $8, $8, $7, $7, $7, $6, $6, $6, $5, $5, $5, $4, $4, $3, $3, $3, $2, $2, $1, $1, $1, $0, $0, $0, $FF, $FF, $FE, $FE, $FE, $FD, $FD, $FC, $FC, $FC, $FB, $FB, $FA, $FA, $FA, $F9, $F9, $F9, $F8, $F8, $F8, $F7, $F7, $F7, $F6, $F6, $F6, $F5, $F5, $F5, $F4, $F4, $F4, $F4, $F3, $F3, $F3, $F3, $F2, $F2, $F2, $F2, $F2, $F1, $F1, $F1, $F1, $F1, $F1, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F1, $F1, $F1, $F1, $F1, $F1, $F2, $F2, $F2, $F2, $F2, $F3, $F3, $F3, $F3, $F4, $F4, $F4, $F4, $F5, $F5, $F5, $F6, $F6, $F6, $F7, $F7, $F7, $F8, $F8, $F8, $F9, $F9, $F9, $FA, $FA, $FA, $FB, $FB, $FC, $FC, $FC, $FD, $FD, $FE, $FE, $FE, $FF, $FF, $00, $0, $0, $1, $1, $1, $2, $2, $3, $3, $3, $4, $4, $5, $5, $5, $6, $6, $6, $7, $7, $7, $8, $8, $8, $9, $9, $9, $A, $A, $A, $B, $B, $B, $B, $C, $C, $C, $C, $D, $D, $D, $D, $D, $E, $E, $E, $E, $E, $E, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F
0001F7r 1  0F 0F 0F 0F  
0001FBr 1  0F 0F 0F 0F  
0002F3r 1               
0002F3r 1               ACROSS_ROW_Y_L: ; 0B00
0002F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0002F3r 1  00 B8 71 2A  .byte $0,$B8,$71,$2A,$E4,$9D,$57,$10,$CA,$85,$40,$FB,$B7,$73,$30,$ED,$AB,$6A,$29,$E9,$AA,$6C,$2E,$F2,$B6,$7C,$42,$A,$D2,$9C,$66,$32,$0,$CE,$9D,$6E,$41,$14,$E9,$C0,$97,$71,$4B,$27,$5,$E4,$C5,$A8,$8C,$71,$58,$41,$2C,$18,$6,$F6,$E7,$DA,$CF,$C5,$BD,$B7,$B3,$B0,$AF,$B0,$B3,$B7,$BD,$C5,$CF,$DA,$E7,$F6,$6,$18,$2C,$41,$58,$71,$8C,$A8,$C5,$E4,$5,$27,$4B,$71,$97,$C0,$E9,$14,$41,$6E,$9D,$CE,$0,$32,$66,$9C,$D2,$A,$42,$7C,$B6,$F2,$2E,$6C,$AA,$E9,$29,$6A,$AB,$ED,$30,$73,$B7,$FB,$40,$85,$CA,$10,$57,$9D,$E4,$2A,$71,$B8,$0,$47,$8E,$D5,$1B,$62,$A8,$EF,$35,$7A,$BF,$4,$48,$8C,$CF,$12,$54,$95,$D6,$16,$55,$93,$D1,$D,$49,$83,$BD,$F5,$2D,$63,$99,$CD,$0,$31,$62,$91,$BE,$EB,$16,$3F,$68,$8E,$B4,$D8,$FA,$1B,$3A,$57,$73,$8E,$A7,$BE,$D3,$E7,$F9,$9,$18,$25,$30,$3A,$42,$48,$4C,$4F,$50,$4F,$4C,$48,$42,$3A,$30,$25,$18,$9,$F9,$E7,$D3,$BE,$A7,$8E,$73,$57,$3A,$1B,$FA,$D8,$B4,$8E,$68,$3F,$16,$EB,$BE,$91,$62,$31,$0,$CD,$99,$63,$2D,$F5,$BD,$83,$49,$D,$D1,$93,$55,$16,$D6,$95,$54,$12,$CF,$8C,$48,$4,$BF,$7A,$35,$EF,$A8,$62,$1B,$D5,$8E,$47
0002F7r 1  E4 9D 57 10  
0002FBr 1  CA 85 40 FB  
0003F3r 1               
0003F3r 1               ACROSS_ROW_Y_H: ; 0C00
0003F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0003F3r 1  00 FF FF FF  .byte $0,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F9,$F8,$F8,$F8,$F8,$F8,$F7,$F7,$F7,$F7,$F7,$F6,$F6,$F6,$F6,$F6,$F6,$F6,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F6,$F6,$F6,$F6,$F6,$F6,$F6,$F7,$F7,$F7,$F7,$F7,$F8,$F8,$F8,$F8,$F8,$F9,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$00,$0,$0,$0,$1,$1,$1,$1,$2,$2,$2,$3,$3,$3,$3,$4,$4,$4,$4,$5,$5,$5,$5,$6,$6,$6,$6,$6,$7,$7,$7,$7,$8,$8,$8,$8,$8,$8,$9,$9,$9,$9,$9,$9,$9,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$9,$9,$9,$9,$9,$9,$9,$8,$8,$8,$8,$8,$8,$7,$7,$7,$7,$6,$6,$6,$6,$6,$5,$5,$5,$5,$4,$4,$4,$4,$3,$3,$3,$3,$2,$2,$2,$1,$1,$1,$1,$0,$0,$0
0003F7r 1  FE FE FE FE  
0003FBr 1  FD FD FD FC  
0004F3r 1               
0004F3r 1               NEXT_ROW_X_L: ; 0D00 next row LEFT/up when added
0004F3r 1  00 A9 54 00  .byte
0004F7r 1  AE 5D 0D BF  
0004FBr 1  73 28 DF 98  
0005F3r 1               
0005F3r 1               NEXT_ROW_X_H: ; 0E00
0005F3r 1  F8 F7 F7 F7  .byte
0005F7r 1  F6 F6 F6 F5  
0005FBr 1  F5 F5 F4 F4  
0006F3r 1               
0006F3r 1               NEXT_ROW_Y_L: ; 0F00
0006F3r 1  33 58 7D A5  .byte $33,$58,$7D,$A5,$CD,$F7,$23,$50,$7E,$AD,$DE,$10,$44,$78,$AE,$E4,$1C,$55,$8F,$CA,$6,$43,$81,$BF,$FE,$3F,$7F,$C1,$3,$46,$8A,$CD,$12,$57,$9C,$E2,$28,$6E,$B4,$FB,$42,$89,$D0,$17,$5E,$A5,$EC,$33,$7A,$C0,$6,$4C,$91,$D6,$1B,$5F,$A2,$E6,$28,$6A,$AB,$EB,$2B,$6A,$A8,$E5,$21,$5C,$97,$D0,$8,$3F,$75,$AA,$DE,$10,$41,$71,$A0,$CD,$F9,$24,$4D,$75,$9B,$C0,$E3,$5,$25,$44,$61,$7C,$96,$AE,$C5,$DA,$ED,$FF,$F,$1D,$29,$34,$3D,$44,$4A,$4D,$4F,$50,$4E,$4B,$46,$3F,$37,$2D,$21,$13,$4,$F3,$E0,$CC,$B6,$9E,$85,$6A,$4E,$30,$10,$EF,$CC,$A7,$82,$5A,$32,$8,$DC,$AF,$81,$52,$21,$EF,$BB,$87,$51,$1B,$E3,$AA,$70,$35,$F9,$BC,$7E,$40,$1,$C0,$80,$3E,$FC,$B9,$75,$32,$ED,$A8,$63,$1D,$D7,$91,$4B,$4,$BD,$76,$2F,$E8,$A1,$5A,$13,$CC,$85,$3F,$F9,$B3,$6E,$29,$E4,$A0,$5D,$19,$D7,$95,$54,$14,$D4,$95,$57,$1A,$DE,$A3,$68,$2F,$F7,$C0,$8A,$55,$21,$EF,$BE,$8E,$5F,$32,$6,$DB,$B2,$8A,$64,$3F,$1C,$FA,$DA,$BB,$9E,$83,$69,$51,$3A,$25,$12,$0,$F0,$E2,$D6,$CB,$C2,$BB,$B5,$B2,$B0,$AF,$B1,$B4,$B9,$C0,$C8,$D2,$DE,$EC,$FB,$C,$1F,$33,$49,$61,$7A,$95,$B1,$CF,$EF,$10
0006F7r 1  CD F7 23 50  
0006FBr 1  7E AD DE 10  
0007F3r 1               
0007F3r 1               NEXT_ROW_Y_H: ; 1000
0007F3r 1  F6 F6 F6 F6  .byte $F6,$F6,$F6,$F6,$F6,$F6,$F7,$F7,$F7,$F7,$F7,$F8,$F8,$F8,$F8,$F8,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$0,$0,$0,$0,$1,$1,$1,$2,$2,$2,$2,$3,$3,$3,$3,$4,$4,$4,$4,$5,$5,$5,$5,$6,$6,$6,$6,$7,$7,$7,$7,$7,$8,$8,$8,$8,$8,$8,$9,$9,$9,$9,$9,$9,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$9,$9,$9,$9,$9,$9,$9,$8,$8,$8,$8,$8,$7,$7,$7,$7,$7,$6,$6,$6,$6,$5,$5,$5,$5,$5,$4,$4,$4,$3,$3,$3,$3,$2,$2,$2,$2,$1,$1,$1,$1,$0,$0,$0,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F8,$F8,$F8,$F8,$F8,$F7,$F7,$F7,$F7,$F7,$F7,$F6,$F6,$F6,$F6,$F6,$F6,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F6
0007F7r 1  F6 F6 F7 F7  
0007FBr 1  F7 F7 F7 F8  
0008F3r 1               
0008F3r 1               TUB_WORLD: ; 32*64 = 2K ... is 1100 to 1900-1
0008F3r 1               .include "tub_world_hieghts_01.inc"
0008F3r 2               ; 0 to 128 will be water level. >128 = distance along row to water (neg) , 128 = no water this row.
0008F3r 2               ; rows are stored within 64 byte rows
0008F3r 2               ; 	  0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63
0008F3r 2  FF FF FF FF  .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 30
0008F7r 2  FF FF FF FF  
0008FBr 2  FF FF FF FF  
000933r 2  FF FF FF FF  .byte   $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF ; 29
000937r 2  FF FF FF FF  
00093Br 2  FF FF FF FF  
000973r 2  FF FF FF FF  .byte     $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF ; 28
000977r 2  FF FF FF FF  
00097Br 2  FF FF FF FF  
0009B3r 2  FF FF FF FF  .byte       $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF ; 27
0009B7r 2  FF FF FF FF  
0009BBr 2  FF FF FF FF  
0009F3r 2  FF FF FF FF  .byte         $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF ; 26
0009F7r 2  FF FF FF FF  
0009FBr 2  FF FF FF FF  
000A33r 2  FF FF FF FF  .byte           $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 25
000A37r 2  FF FF FF FF  
000A3Br 2  FF FF FF FF  
000A73r 2  FF FF FF FF  .byte             $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 24
000A77r 2  FF FF FF FF  
000A7Br 2  FF FF FF FF  
000AB3r 2  FF FF FF FF  .byte               $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 23
000AB7r 2  FF FF FF FF  
000ABBr 2  FF FF FF 80  
000AF3r 2  FF FF FF FF  .byte                 $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 22
000AF7r 2  FF FF FF FF  
000AFBr 2  FF FF 80 00  
000B33r 2  FF FF FF FF  .byte                   $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF; 21
000B37r 2  FF FF FF FF  
000B3Br 2  FF 80 00 00  
000B73r 2  FF FF FF FF  .byte                     $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF ; 20
000B77r 2  FF FF FF FF  
000B7Br 2  FF 80 00 00  
000BB3r 2  FF FF FF FF  .byte                       $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF ; 19
000BB7r 2  FF FF FF FF  
000BBBr 2  80 00 00 00  
000BF3r 2  FF FF FF FF  .byte                         $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 18
000BF7r 2  FF FF FF FF  
000BFBr 2  80 00 00 00  
000C33r 2  FF FF FF FF  .byte                           $FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 17
000C37r 2  FF FF FF 80  
000C3Br 2  00 00 00 00  
000C73r 2  FF FF FF FF  .byte                             $FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 16
000C77r 2  FF FF FF 80  
000C7Br 2  00 00 00 00  
000CB3r 2  FF FF FF FF  .byte                               $FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 15
000CB7r 2  FF FF 80 00  
000CBBr 2  00 00 00 00  
000CF3r 2  FF FF FF FF  .byte                                 $FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF ; 14
000CF7r 2  FF FF 80 00  
000CFBr 2  00 00 00 00  
000D33r 2  FF FF FF FF  .byte                                   $FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 13
000D37r 2  FF 80 00 00  
000D3Br 2  00 00 00 00  
000D73r 2  FF FF FF FF  .byte                                     $FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 12
000D77r 2  FF 80 00 00  
000D7Br 2  00 00 00 00  
000DB3r 2  FF FF FF FF  .byte                                       $FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 11
000DB7r 2  80 00 00 00  
000DBBr 2  00 00 00 00  
000DF3r 2  FF FF FF FF  .byte                                         $FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 10
000DF7r 2  80 00 00 00  
000DFBr 2  00 00 00 00  
000E33r 2  FF FF FF 80  .byte                                           $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 9
000E37r 2  00 00 00 00  
000E3Br 2  00 00 00 00  
000E73r 2  FF FF FF 80  .byte                                             $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 8
000E77r 2  00 00 00 00  
000E7Br 2  00 00 00 00  
000EB3r 2  FF FF FF 80  .byte                                               $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 7
000EB7r 2  00 00 00 00  
000EBBr 2  00 00 00 00  
000EF3r 2  FF FF FF 80  .byte                                                 $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 6
000EF7r 2  00 00 00 00  
000EFBr 2  00 00 00 00  
000F33r 2  FF FF FF 80  .byte                                                   $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 5
000F37r 2  00 00 00 00  
000F3Br 2  00 00 00 00  
000F73r 2  FF FF FF 80  .byte                                                     $FF,$FF,$FF,$80,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 4
000F77r 2  00 01 02 02  
000F7Br 2  01 01 00 01  
000FB3r 2  FF FF FF 80  .byte                                                       $FF,$FF,$FF,$80,$80,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 3
000FB7r 2  80 00 01 02  
000FBBr 2  02 01 01 00  
000FF3r 2  FF FF FF FF  .byte                                                         $FF,$FF,$FF,$FF,$80,$80,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 2
000FF7r 2  80 80 00 01  
000FFBr 2  02 02 01 01  
001033r 2  FF FF FF FF  .byte                                                           $FF,$FF,$FF,$FF,$FF,$80,$80,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 01
001037r 2  FF 80 80 00  
00103Br 2  01 02 02 01  
001073r 2  FF FF FF FF  .byte                                                             $FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 00 tub wall north
001077r 2  FF FF 80 80  
00107Br 2  80 80 80 80  
0010B3r 2  FF FF FF FF  .res 64,$FF
0010B7r 2  FF FF FF FF  
0010BBr 2  FF FF FF FF  
0010F3r 2               
0010F3r 2               
0010F3r 2               
0010F3r 1               
0010F3r 1               ; 1900
0010F3r 1               
0010F3r 1               OBJECT_LIST_Z_START_POINTERS: ; 1900
0010F3r 1  00 00 00 00  .res 256,0
0010F7r 1  00 00 00 00  
0010FBr 1  00 00 00 00  
0011F3r 1               OBJECT_LIST_BYTE0_ADDRLOW: ; 1A00 addr low
0011F3r 1  00 00 00 00  .res 256,0
0011F7r 1  00 00 00 00  
0011FBr 1  00 00 00 00  
0012F3r 1               OBJECT_LIST_BYTE1_MODE: ; 1B00 mode/addr bank
0012F3r 1  00 00 00 00  .res 256,0
0012F7r 1  00 00 00 00  
0012FBr 1  00 00 00 00  
0013F3r 1               OBJECT_LIST_BYTE2_X: ; 1C00 X position onscreen ( assumed positive for now)
0013F3r 1  00 00 00 00  .res 256,0
0013F7r 1  00 00 00 00  
0013FBr 1  00 00 00 00  
0014F3r 1               OBJECT_LIST_BYTE3_Y: ; 1D00 y position onscreen
0014F3r 1  00 00 00 00  .res 256,0
0014F7r 1  00 00 00 00  
0014FBr 1  00 00 00 00  
0015F3r 1               OBJECT_LIST_BYTE4_ZFLIPS: ; 1E00 collision / z / flips
0015F3r 1  00 00 00 00  .res 256,0
0015F7r 1  00 00 00 00  
0015FBr 1  00 00 00 00  
0016F3r 1               OBJECT_LIST_BYTE5_SIZE: ; 1F00 size / pal offset
0016F3r 1  00 00 00 00  .res 256,0
0016F7r 1  00 00 00 00  
0016FBr 1  00 00 00 00  
0017F3r 1               OBJECT_LIST_BYTE6_NEXT: ; 2000 NEXT
0017F3r 1  00 00 00 00  .res 256,0
0017F7r 1  00 00 00 00  
0017FBr 1  00 00 00 00  
0018F3r 1               
0018F3r 1               
0018F3r 1               
0018F3r 1               WORLD_TO_CELL_XH: ; 2100
0018F3r 1  00 00 01 02  .byte 0,0,1,2,3,4,5,6,6,7,8,9,10,11,12,12,13,14,15,16,17,18,19,19,20,21,22,23,24,25,25,26,27,28,29,30,31,32,32,33,34,35,36,37,38,38,39,40,41,42,43,44,45,45,46,47,48,49,50,51,51,52,53,54,55,56,57,58,58,59,60,61,62,63,64,64,65,66,67,68,69,70,71,71,72,73,74,75,76,77,77,78,79,80,81,82,83,84,84,85,86,87,88,89,90,90,91,92,93,94,95,96,96,97,98,99,100,101,102,103,103,104,105,106,107,108,109,109,110,111,112,113,114,115,116,116,117,118,119,120,121,122,122,123,124,125,126,127,128,129,129,130,131,132,133,134,135,135,136,137,138,139,140,141,142,142,143,144,145,146,147,148,148,149,150,151,152,153,154,155,155,156,157,158,159,160,161,161,162,163,164,165,166,167,168,168,169,170,171,172,173,174,174,175,176,177,178,179,180,180,181,182,183,184,185,186,187,187,188,189,190,191,192,193,193,194,195,196,197,198,199,200,200,201,202,203,204,205,206,206,207,208,209,210,211,212,213,213,214,215,216,217,218,219,219,220
0018F7r 1  03 04 05 06  
0018FBr 1  06 07 08 09  
0019F3r 1               ;.byte 0,0,1,2,3,4,5,6,6,7,8,9,10,11,12,12,13,14,15,16,17,18,19,19,20,21,22,23,24,25,25,26,27,28,29,30,31,32,32,33,34,35,36,37,38,38,39,40,41,42,43,44,45,45,46,47,48,49,50,51,51,52,53,54,55,56,57,58,58,59,60,61,62,63,64,64,65,66,67,68,69,70,71,71,72,73,74,75,76,77,77,78,79,80,81,82,83,84,84,85,86,87,88,89,90,90,91,92,93,94,95,96,96,97,98,99,100,101,102,103,103,104,105,106,107,108,109,109
0019F3r 1               ;.res 128,128
0019F3r 1               WORLD_TO_CELL_XL:
0019F3r 1  00 DD BB 99  .byte 0,221,187,153,118,84,50,15,237,203,169,134,100,66,31,253,219,184,150,116,82,47,13,235,200,166,132,97,63,29,251,216,182,148,113,79,45,10,232,198,164,129,95,61,26,248,214,180,145,111,77,42,8,230,195,161,127,93,58,24,246,211,177,143,108,74,40,6,227,193,159,124,90,56,21,243,209,175,140,106,72,37,3,225,191,156,122,88,53,19,241,206,172,138,104,69,35,1,222,188,154,119,85,51,17,238,204,170,135,101,67,32,254,220,186,151,117,83,48,14,236,202,167,133,99,64,30,252,217,183,149,115,80,46,12,233,199,165,130,96,62,28,249,215,181,146,112,78,43,9,231,197,162,128,94,59,25,247,212,178,144,110,75,41,7,228,194,160,126,91,57,23,244,210,176,141,107,73,39,4,226,192,157,123,89,54,20,242,208,173,139,105,70,36,2,223,189,155,121,86,52,18,239,205,171,137,102,68,34,255,221,187,152,118,84,50,15,237,203,168,134,100,65,31,253,219,184,150,116,81,47,13,234,200,166,132,97,63,29,250,216,182,148,113,79,45,10,232,198,163,129,95,61,26,248,214
0019F7r 1  76 54 32 0F  
0019FBr 1  ED CB A9 86  
001AF3r 1               ;.byte 0,221,187,153,118,84,50,15,237,203,169,134,100,66,31,253,219,184,150,116,82,47,13,235,200,166,132,97,63,29,251,216,182,148,113,79,45,10,232,198,164,129,95,61,26,248,214,180,145,111,77,42,8,230,195,161,127,93,58,24,246,211,177,143,108,74,40,6,227,193,159,124,90,56,21,243,209,175,140,106,72,37,3,225,191,156,122,88,53,19,241,206,172,138,104,69,35,1,222,188,154,119,85,51,17,238,204,170,135,101,67,32,254,220,186,151,117,83,48,14,236,202,167,133,99,64,30,252
001AF3r 1               ;.res 128,0
001AF3r 1               CELL_TO_WORLD_XH: ; 2200
001AF3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,8,9,10,11,12,13,15,16,17,18,19,20,21,23,24,25,26,27,28,30,31,32,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,50,51,53,54,55,56,57,58,60,61,62,63,64,65,66,68,69,70,71,72,73,75,76,77,78,79,80,81,83,84,85,86,87,88,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,112,113,114,115,116,117,118,120,121,122,123,124,125,127,128,129,130,131,132,133,135,136,137,138,139,140,142,143,144,145,146
001AF7r 1  04 05 06 08  
001AFBr 1  09 0A 0B 0C  
001B73r 1               CELL_TO_WORLD_XL: ; 2280
001B73r 1  00 27 4F 76  .byte 0,39,79,118,158,198,237,21,60,100,140,179,219,2,42,82,121,161,200,240,24,63,103,142,182,222,5,45,84,124,164,203,243,26,66,106,145,185,224,8,48,87,127,166,206,246,29,69,108,148,188,227,11,50,90,130,169,209,248,32,72,111,151,191,230,14,53,93,133,172,212,251,35,75,114,154,193,233,17,56,96,135,175,215,254,38,77,117,157,196,236,19,59,99,138,178,217,1,41,80,120,159,199,239,22,62,101,141,181,220,4,43,83,123,162,202,241,25,65,104,144,184,223,7,46,86,126,165
001B77r 1  9E C6 ED 15  
001B7Br 1  3C 64 8C B3  
001BF3r 1               
001BF3r 1               CELL_LOW_TO_WORLD_XH: ; 2300
001BF3r 1  00 00 00 00  .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
001BF7r 1  00 00 00 00  
001BFBr 1  00 00 00 00  
001CF3r 1               CELL_LOW_TO_WORLD_XL: ; 2400
001CF3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,8,9,10,11,12,13,15,16,17,18,19,20,21,23,24,25,26,27,28,30,31,32,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,50,51,53,54,55,56,57,58,60,61,62,63,64,65,66,68,69,70,71,72,73,75,76,77,78,79,80,81,83,84,85,86,87,88,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,112,113,114,115,116,117,118,120,121,122,123,124,125,127,128,129,130,131,132,133,135,136,137,138,139,140,142,143,144,145,146,147,148,150,151,152,153,154,155,157,158,159,160,161,162,163,165,166,167,168,169,170,172,173,174,175,176,177,178,180,181,182,183,184,185,187,188,189,190,191,192,193,195,196,197,198,199,200,202,203,204,205,206,207,209,210,211,212,213,214,215,217,218,219,220,221,222,224,225,226,227,228,229,230,232,233,234,235,236,237,239,240,241,242,243,244,245,247,248,249,250,251,252,254,255,0,1,2,3,4,6,7,8,9,10,11,13,14,15,16,17,18,19,21,22,23,24,25,26,28,29,30,31,32,33,34,36,37,38
001CF7r 1  04 05 06 08  
001CFBr 1  09 0A 0B 0C  
001DF3r 1               
001DF3r 1               SPRITE_NUM_HIGH_NIBBLE: ; 2900
001DF3r 1  00 00 00 00  .res 16, 0
001DF7r 1  00 00 00 00  
001DFBr 1  00 00 00 00  
001E03r 1  01 01 01 01  .res 16, 1
001E07r 1  01 01 01 01  
001E0Br 1  01 01 01 01  
001E13r 1  02 02 02 02  .res 16, 2
001E17r 1  02 02 02 02  
001E1Br 1  02 02 02 02  
001E23r 1  03 03 03 03  .res 16, 3
001E27r 1  03 03 03 03  
001E2Br 1  03 03 03 03  
001E33r 1  04 04 04 04  .res 16, 4
001E37r 1  04 04 04 04  
001E3Br 1  04 04 04 04  
001E43r 1  05 05 05 05  .res 16, 5
001E47r 1  05 05 05 05  
001E4Br 1  05 05 05 05  
001E53r 1  06 06 06 06  .res 16, 6
001E57r 1  06 06 06 06  
001E5Br 1  06 06 06 06  
001E63r 1  07 07 07 07  .res 16, 7
001E67r 1  07 07 07 07  
001E6Br 1  07 07 07 07  
001E73r 1  08 08 08 08  .res 16, 8
001E77r 1  08 08 08 08  
001E7Br 1  08 08 08 08  
001E83r 1  09 09 09 09  .res 16, 9
001E87r 1  09 09 09 09  
001E8Br 1  09 09 09 09  
001E93r 1  0A 0A 0A 0A  .res 16, 10
001E97r 1  0A 0A 0A 0A  
001E9Br 1  0A 0A 0A 0A  
001EA3r 1  0B 0B 0B 0B  .res 16, 11
001EA7r 1  0B 0B 0B 0B  
001EABr 1  0B 0B 0B 0B  
001EB3r 1  0C 0C 0C 0C  .res 16, 12
001EB7r 1  0C 0C 0C 0C  
001EBBr 1  0C 0C 0C 0C  
001EC3r 1  0D 0D 0D 0D  .res 16, 13
001EC7r 1  0D 0D 0D 0D  
001ECBr 1  0D 0D 0D 0D  
001ED3r 1  0E 0E 0E 0E  .res 16, 14
001ED7r 1  0E 0E 0E 0E  
001EDBr 1  0E 0E 0E 0E  
001EE3r 1  0F 0F 0F 0F  .res 16, 15
001EE7r 1  0F 0F 0F 0F  
001EEBr 1  0F 0F 0F 0F  
001EF3r 1               
001EF3r 1               SPRITE_NUM_LOW_NIBBLE: ; 2A00
001EF3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001EF7r 1  04 05 06 07  
001EFBr 1  08 09 0A 0B  
001F03r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F07r 1  04 05 06 07  
001F0Br 1  08 09 0A 0B  
001F13r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F17r 1  04 05 06 07  
001F1Br 1  08 09 0A 0B  
001F23r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F27r 1  04 05 06 07  
001F2Br 1  08 09 0A 0B  
001F33r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F37r 1  04 05 06 07  
001F3Br 1  08 09 0A 0B  
001F43r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F47r 1  04 05 06 07  
001F4Br 1  08 09 0A 0B  
001F53r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F57r 1  04 05 06 07  
001F5Br 1  08 09 0A 0B  
001F63r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F67r 1  04 05 06 07  
001F6Br 1  08 09 0A 0B  
001F73r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F77r 1  04 05 06 07  
001F7Br 1  08 09 0A 0B  
001F83r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F87r 1  04 05 06 07  
001F8Br 1  08 09 0A 0B  
001F93r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F97r 1  04 05 06 07  
001F9Br 1  08 09 0A 0B  
001FA3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001FA7r 1  04 05 06 07  
001FABr 1  08 09 0A 0B  
001FB3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001FB7r 1  04 05 06 07  
001FBBr 1  08 09 0A 0B  
001FC3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001FC7r 1  04 05 06 07  
001FCBr 1  08 09 0A 0B  
001FD3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001FD7r 1  04 05 06 07  
001FDBr 1  08 09 0A 0B  
001FE3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001FE7r 1  04 05 06 07  
001FEBr 1  08 09 0A 0B  
001FF3r 1               
001FF3r 1               LOW_NIBBLE_TO_HEX: ;
001FF3r 1  30 31 32 33  .repeat 16
001FF7r 1  34 35 36 37  
001FFBr 1  38 39 01 02  
0020F3r 1               ;      0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
0020F3r 1               .byte  48, 49, 50, 51, 52, 53, 54, 55, 56, 57,  1,  2,  3,  4,  5,  6
0020F3r 1               .endrepeat
0020F3r 1               
0020F3r 1               HIGH_NIBBLE_TO_HEX: ;
0020F3r 1  30 30 30 30  .res 16,48
0020F7r 1  30 30 30 30  
0020FBr 1  30 30 30 30  
002103r 1  31 31 31 31  .res 16,49
002107r 1  31 31 31 31  
00210Br 1  31 31 31 31  
002113r 1  32 32 32 32  .res 16,50
002117r 1  32 32 32 32  
00211Br 1  32 32 32 32  
002123r 1  33 33 33 33  .res 16,51
002127r 1  33 33 33 33  
00212Br 1  33 33 33 33  
002133r 1  34 34 34 34  .res 16,52
002137r 1  34 34 34 34  
00213Br 1  34 34 34 34  
002143r 1  35 35 35 35  .res 16,53
002147r 1  35 35 35 35  
00214Br 1  35 35 35 35  
002153r 1  36 36 36 36  .res 16,54
002157r 1  36 36 36 36  
00215Br 1  36 36 36 36  
002163r 1  37 37 37 37  .res 16,55
002167r 1  37 37 37 37  
00216Br 1  37 37 37 37  
002173r 1  38 38 38 38  .res 16,56
002177r 1  38 38 38 38  
00217Br 1  38 38 38 38  
002183r 1  39 39 39 39  .res 16,57
002187r 1  39 39 39 39  
00218Br 1  39 39 39 39  
002193r 1  01 01 01 01  .res 16,1
002197r 1  01 01 01 01  
00219Br 1  01 01 01 01  
0021A3r 1  02 02 02 02  .res 16,2
0021A7r 1  02 02 02 02  
0021ABr 1  02 02 02 02  
0021B3r 1  03 03 03 03  .res 16,3
0021B7r 1  03 03 03 03  
0021BBr 1  03 03 03 03  
0021C3r 1  04 04 04 04  .res 16,4
0021C7r 1  04 04 04 04  
0021CBr 1  04 04 04 04  
0021D3r 1  05 05 05 05  .res 16,5
0021D7r 1  05 05 05 05  
0021DBr 1  05 05 05 05  
0021E3r 1  06 06 06 06  .res 16,6
0021E7r 1  06 06 06 06  
0021EBr 1  06 06 06 06  
0021F3r 1               
0021F3r 1               SCREEN_Y_TO_Z: ; 2B00
0021F3r 1  FF FD FC FA  .byte 255,253,252,250,249,247,246,244,243,241,240,238,237,235,234,232,231,229,228,227,225,224,222,221,219,218,216,215,213,212,210,209,207,206,204,203,202,200,199,197,196,194,193,191,190,188,187,185,184,182,181,179,178,177,175,174,172,171,169,168,166,165,163,162,160,159,157,156,154,153,152,150,149,147,146,144,143,141,140,138,137,135,134,132,131,129,128,127,125,124,122,121,119,118,116,115,113,112,110,109,107,106,104,103,101,100,99,97,96,94,93,91,90,88,87,85,84,82,81,79,78,76,75,74,72,71,69,68,66,65,63,62,60,59,57,56,54,53,51,50,49,47,46,44,43,41,40,38,37,35,34,32,31,29,28,26,25,24,22,21,19,18,16,15,13,12,10,9,7,6,4,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0021F7r 1  F9 F7 F6 F4  
0021FBr 1  F3 F1 F0 EE  
0022F3r 1               ;.byte 255,253,251,250,248,247,245,243,242,240,239,237,235,234,232,231,229,227,226,224,223,221,220,218,216,215,213,212,210,208,207,205,204,202,200,199,197,196,194,192,191,189,188,186,185,183,181,180,178,177,175,173,172,170,169,167,165,164,162,161,159,158,156,154,153,151,150,148,146,145,143,142,140,138,137,135,134,132,130,129,127,126,124,123,121,119,118,116,115,113,111,110,108,107,105,103,102,100,99,97,95,94,92,91,89,88,86,84,83,81,80,78,76,75,73,72,70,68,67,65,64,62,61,59,57,56,54,53,51,49,48,46,45,43,41,40,38,37,35,33,32,30,29,27,26,24,22,21,19,18,16,14,13,11,10,8,6,5,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0022F3r 1               
0022F3r 1               CONVERT_HEIGHTS_PIXELS: ; 2C00
0022F3r 1               ;.res 256,0
0022F3r 1  00 00 01 01  .byte 0,0,1,1,2,3,3,4,4,5,6,6,7,7,8,9,9,10,11,11,12,12,13,14,14,15,15,16,17,17,18,18,19,20,20,21,22,22,23,23,24,25,25,26,26,27,28,28,29,30,30,31,31,32,33,33,34,34,35,36,36,37,37,38,39,39,40,41,41,42,42,43,44,44,45,45,46,47,47,48,48,49,50,50,51,52,52,53,53,54,55,55,56,56,57,58,58,59,60,60,61,61,62,63,63,64,64,65,66,66,67,67,68,69,69,70,71,71,72,72,73,74,74,75,75,76,77,77,78,78,79,80,80,81,82,82,83,83,84,85,85,86,86,87,88,88,89,90,90,91,91,92,93,93,94,94,95,96,96,97,97,98,99,99,100,101,101,102,102,103,104,104,105,105,106,107,107,108,109,109,110,110,111,112,112,113,113,114,115,115,116,116,117,118,118,119,120,120,121,121,122,123,123,124,124,125,126,126,127,127,128,129,129,130,131,131,132,132,133,134,134,135,135,136,137,137,138,139,139,140,140,141,142,142,143,143,144,145,145,146,146,147,148,148,149,150,150,151,151,152,153,153,154,154,155,156
0022F7r 1  02 03 03 04  
0022FBr 1  04 05 06 06  
0023F3r 1               ;.byte 0,0,1,1,2,3,3,4,4,5,6,6,7,7,8,9,9,10,11,11,12,12,13,14,14,15,15,16,17,17,18,18,19,20,20,21,22,22,23,23,24,25,25,26,26,27,28,28,29,30,30,31,31,32,33,33,34,34,35,36,36,37,37,38,39,39,40,41,41,42,42,43,44,44,45,45,46,47,47,48,48,49,50,50,51,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52;,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52
0023F3r 1               ;.res 128,0
0023F3r 1               CONVERT_HEIGHTS_PIXELS_L:
0023F3r 1               ;.res 256,0
0023F3r 1  00 9C 39 D6  .byte 0,156,57,214,115,15,172,73,230,130,31,188,89,245,146,47,204,105,5,162,63,220,120,21,178,79,235,136,37,194,95,251,152,53,210,110,11,168,69,225,126,27,184,84,241,142,43,200,100,1,158,59,215,116,17,174,74,231,132,33,190,90,247,148,49,205,106,7,164,64,221,122,23,180,80,237,138,39,195,96,253,154,54,211,112,0,169,70,227,128,29,185,86,243,144,44,201,102,3,159,60,217,118,19,175,76,233,134,34,191,92,249,149,50,207,108,9,165,66,223,124,24,181,82,239,139,40,197,98,254,155,56,213,114,14,171,72,229,129,30,187,88,244,145,46,203,104,4,161,62,219,119,20,177,78,234,135,36,193,94,250,151,52,209,109,10,167,68,224,125,26,183,83,240,141,42,199,99,0,157,58,214,115,16,173,73,230,131,32,189,89,246,147,48,204,105,6,163,63,220,121,22,179,79,236,137,38,194,95,252,153,53,210,111,12,168,69,226,127,28,184,85,242,143,43,200,101,2,158,59,216,117,18,174,75,232,133,33,190,91,248,148,49,206,107,7,164,65,222,123,23,180,81,238,138,39
0023F7r 1  73 0F AC 49  
0023FBr 1  E6 82 1F BC  
0024F3r 1               
0024F3r 1               SUBCELL_X_COS_L:
0024F3r 1  00 FF FF FF  .byte $0,$FF,$FF,$FF,$FE,$FE,$FD,$FC,$FB,$F9,$F8,$F6,$F4,$F3,$F1,$EE,$EC,$EA,$E7,$E4,$E1,$DE,$DB,$D8,$D4,$D1,$CD,$C9,$C5,$C1,$BD,$B9,$B5,$B0,$AB,$A7,$A2,$9D,$98,$93,$8E,$88,$83,$7E,$78,$73,$6D,$67,$61,$5C,$56,$50,$4A,$44,$3E,$38,$31,$2B,$25,$1F,$19,$12,$C,$6,$0,$F9,$F3,$ED,$E6,$E0,$DA,$D4,$CE,$C7,$C1,$BB,$B5,$AF,$A9,$A3,$9E,$98,$92,$8C,$87,$81,$7C,$77,$71,$6C,$67,$62,$5D,$58,$54,$4F,$4A,$46,$42,$3E,$3A,$36,$32,$2E,$2B,$27,$24,$21,$1E,$1B,$18,$15,$13,$11,$E,$C,$B,$9,$7,$6,$4,$3,$2,$1,$1,$0,$0,$0,$0,$0,$0,$0,$1,$1,$2,$3,$4,$6,$7,$9,$B,$C,$E,$11,$13,$15,$18,$1B,$1E,$21,$24,$27,$2B,$2E,$32,$36,$3A,$3E,$42,$46,$4A,$4F,$54,$58,$5D,$62,$67,$6C,$71,$77,$7C,$81,$87,$8C,$92,$98,$9E,$A3,$A9,$AF,$B5,$BB,$C1,$C7,$CE,$D4,$DA,$E0,$E6,$ED,$F3,$F9,$0,$6,$C,$12,$19,$1F,$25,$2B,$31,$38,$3E,$44,$4A,$50,$56,$5C,$61,$67,$6D,$73,$78,$7E,$83,$88,$8E,$93,$98,$9D,$A2,$A7,$AB,$B0,$B5,$B9,$BD,$C1,$C5,$C9,$CD,$D1,$D4,$D8,$DB,$DE,$E1,$E4,$E7,$EA,$EC,$EE,$F1,$F3,$F4,$F6,$F8,$F9,$FB,$FC,$FD,$FE,$FE,$FF,$FF,$FF
0024F7r 1  FE FE FD FC  
0024FBr 1  FB F9 F8 F6  
0025F3r 1               SUBCELL_X_COS_H:
0025F3r 1  01 00 00 00  .byte
0025F7r 1  00 00 00 00  
0025FBr 1  00 00 00 00  
0026F3r 1               SUBCELL_X_SIN_H:
0026F3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
0026F7r 1  00 00 00 00  
0026FBr 1  00 00 00 00  
0027F3r 1               SUBCELL_X_SIN_L:
0027F3r 1  00 05 0A 10  .byte $0,$5,$A,$10,$15,$1B,$20,$25,$2B,$30,$35,$3B,$40,$45,$4A,$4F,$54,$59,$5E,$63,$68,$6D,$71,$76,$7B,$7F,$84,$88,$8C,$90,$94,$98,$9C,$A0,$A4,$A7,$AB,$AE,$B2,$B5,$B8,$BB,$BE,$C0,$C3,$C6,$C8,$CA,$CC,$CE,$D0,$D2,$D4,$D5,$D7,$D8,$D9,$DA,$DB,$DC,$DC,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DC,$DC,$DB,$DA,$D9,$D8,$D7,$D5,$D4,$D2,$D0,$CE,$CC,$CA,$C8,$C6,$C3,$C0,$BE,$BB,$B8,$B5,$B2,$AE,$AB,$A7,$A4,$A0,$9C,$98,$94,$90,$8C,$88,$84,$7F,$7B,$76,$71,$6D,$68,$63,$5E,$59,$54,$4F,$4A,$45,$40,$3B,$35,$30,$2B,$25,$20,$1B,$15,$10,$A,$5,$0,$FA,$F5,$EF,$EA,$E4,$DF,$DA,$D4,$CF,$CA,$C4,$BF,$BA,$B5,$B0,$AB,$A6,$A1,$9C,$97,$92,$8E,$89,$84,$80,$7B,$77,$73,$6F,$6B,$67,$63,$5F,$5B,$58,$54,$51,$4D,$4A,$47,$44,$41,$3F,$3C,$39,$37,$35,$33,$31,$2F,$2D,$2B,$2A,$28,$27,$26,$25,$24,$23,$23,$22,$22,$22,$22,$22,$22,$22,$23,$23,$24,$25,$26,$27,$28,$2A,$2B,$2D,$2F,$31,$33,$35,$37,$39,$3C,$3F,$41,$44,$47,$4A,$4D,$51,$54,$58,$5B,$5F,$63,$67,$6B,$6F,$73,$77,$7B,$80,$84,$89,$8E,$92,$97,$9C,$A1,$A6,$AB,$B0,$B5,$BA,$BF,$C4,$CA,$CF,$D4,$DA,$DF,$E4,$EA,$EF,$F5,$FA
0027F7r 1  15 1B 20 25  
0027FBr 1  2B 30 35 3B  
0028F3r 1               SUBCELL_Y_COS_H:
0028F3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0028F7r 1  00 00 00 00  
0028FBr 1  00 00 00 00  
0029F3r 1               SUBCELL_Y_COS_L:
0029F3r 1  9C 9C 9C 9C  .byte $9C,$9C,$9C,$9C,$9C,$9B,$9B,$9A,$99,$98,$98,$97,$96,$94,$93,$92,$90,$8F,$8D,$8C,$8A,$88,$86,$84,$82,$80,$7D,$7B,$79,$76,$74,$71,$6E,$6C,$69,$66,$63,$60,$5D,$5A,$57,$53,$50,$4D,$49,$46,$43,$3F,$3B,$38,$34,$31,$2D,$29,$26,$22,$1E,$1A,$17,$13,$F,$B,$7,$3,$0,$FC,$F8,$F4,$F0,$EC,$E8,$E5,$E1,$DD,$D9,$D6,$D2,$CE,$CB,$C7,$C4,$C0,$BC,$B9,$B6,$B2,$AF,$AC,$A8,$A5,$A2,$9F,$9C,$99,$96,$93,$91,$8E,$8B,$89,$86,$84,$82,$7F,$7D,$7B,$79,$77,$75,$73,$72,$70,$6F,$6D,$6C,$6B,$69,$68,$67,$67,$66,$65,$64,$64,$63,$63,$63,$63,$63,$63,$63,$63,$63,$64,$64,$65,$66,$67,$67,$68,$69,$6B,$6C,$6D,$6F,$70,$72,$73,$75,$77,$79,$7B,$7D,$7F,$82,$84,$86,$89,$8B,$8E,$91,$93,$96,$99,$9C,$9F,$A2,$A5,$A8,$AC,$AF,$B2,$B6,$B9,$BC,$C0,$C4,$C7,$CB,$CE,$D2,$D6,$D9,$DD,$E1,$E5,$E8,$EC,$F0,$F4,$F8,$FC,$0,$3,$7,$B,$F,$13,$17,$1A,$1E,$22,$26,$29,$2D,$31,$34,$38,$3B,$3F,$43,$46,$49,$4D,$50,$53,$57,$5A,$5D,$60,$63,$66,$69,$6C,$6E,$71,$74,$76,$79,$7B,$7D,$80,$82,$84,$86,$88,$8A,$8C,$8D,$8F,$90,$92,$93,$94,$96,$97,$98,$98,$99,$9A,$9B,$9B,$9C,$9C,$9C,$9C
0029F7r 1  9C 9B 9B 9A  
0029FBr 1  99 98 98 97  
002AF3r 1               SUBCELL_Y_SIN_H:
002AF3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
002AF7r 1  00 00 00 00  
002AFBr 1  00 00 00 00  
002BF3r 1               SUBCELL_Y_SIN_L:
002BF3r 1  00 04 08 0D  .byte $0,$4,$8,$D,$11,$16,$1A,$1E,$23,$27,$2B,$30,$34,$38,$3C,$41,$45,$49,$4D,$51,$55,$59,$5D,$60,$64,$68,$6B,$6F,$72,$76,$79,$7C,$7F,$83,$86,$89,$8B,$8E,$91,$93,$96,$98,$9B,$9D,$9F,$A1,$A3,$A5,$A7,$A8,$AA,$AB,$AD,$AE,$AF,$B0,$B1,$B2,$B3,$B3,$B4,$B4,$B4,$B4,$B5,$B4,$B4,$B4,$B4,$B3,$B3,$B2,$B1,$B0,$AF,$AE,$AD,$AB,$AA,$A8,$A7,$A5,$A3,$A1,$9F,$9D,$9B,$98,$96,$93,$91,$8E,$8B,$89,$86,$83,$80,$7C,$79,$76,$72,$6F,$6B,$68,$64,$60,$5D,$59,$55,$51,$4D,$49,$45,$41,$3C,$38,$34,$30,$2B,$27,$23,$1E,$1A,$16,$11,$D,$8,$4,$0,$FB,$F7,$F2,$EE,$E9,$E5,$E1,$DC,$D8,$D4,$CF,$CB,$C7,$C3,$BE,$BA,$B6,$B2,$AE,$AA,$A6,$A2,$9F,$9B,$97,$94,$90,$8D,$89,$86,$83,$80,$7C,$79,$76,$74,$71,$6E,$6C,$69,$67,$64,$62,$60,$5E,$5C,$5A,$58,$57,$55,$54,$52,$51,$50,$4F,$4E,$4D,$4C,$4C,$4B,$4B,$4B,$4B,$4A,$4B,$4B,$4B,$4B,$4C,$4C,$4D,$4E,$4F,$50,$51,$52,$54,$55,$57,$58,$5A,$5C,$5E,$60,$62,$64,$67,$69,$6C,$6E,$71,$74,$76,$79,$7C,$80,$83,$86,$89,$8D,$90,$94,$97,$9B,$9F,$A2,$A6,$AA,$AE,$B2,$B6,$BA,$BE,$C3,$C7,$CB,$CF,$D4,$D8,$DC,$E1,$E5,$E9,$EE,$F2,$F7,$FB
002BF7r 1  11 16 1A 1E  
002BFBr 1  23 27 2B 30  
002CF3r 1               
002CF3r 1               MOVE_Y_H:
002CF3r 1  00 00 00 00  .byte
002CF7r 1  00 00 00 00  
002CFBr 1  00 00 00 00  
002DF3r 1               MOVE_Y_L:
002DF3r 1  08 07 07 07  .byte $8,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$6,$6,$6,$6,$6,$6,$6,$6,$6,$5,$5,$5,$5,$5,$5,$5,$4,$4,$4,$4,$4,$4,$3,$3,$3,$3,$3,$3,$2,$2,$2,$2,$2,$1,$1,$1,$1,$1,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF,$FF,$0,$0,$0,$0,$0,$0,$1,$1,$1,$1,$1,$2,$2,$2,$2,$2,$3,$3,$3,$3,$3,$3,$4,$4,$4,$4,$4,$4,$5,$5,$5,$5,$5,$5,$5,$6,$6,$6,$6,$6,$6,$6,$6,$6,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7
002DF7r 1  07 07 07 07  
002DFBr 1  07 07 07 07  
002EF3r 1               MOVE_X_H:
002EF3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
002EF7r 1  00 00 00 00  
002EFBr 1  00 00 00 00  
002FF3r 1               MOVE_X_L:
002FF3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$1,$1,$1,$1,$1,$1,$2,$2,$2,$2,$2,$2,$2,$3,$3,$3,$3,$3,$3,$3,$4,$4,$4,$4,$4,$4,$4,$5,$5,$5,$5,$5,$5,$5,$5,$5,$5,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$5,$5,$5,$5,$5,$5,$5,$5,$5,$5,$4,$4,$4,$4,$4,$4,$4,$3,$3,$3,$3,$3,$3,$3,$2,$2,$2,$2,$2,$2,$2,$1,$1,$1,$1,$1,$1,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FB,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF,$FF
002FF7r 1  00 00 01 01  
002FFBr 1  01 01 01 01  
0030F3r 1               
0030F3r 1               
0030F3r 1               WORLD_SPRITE_CENTER_XH: ; 128 bytes
0030F3r 1  64 64 64 64  .byte
0030F7r 1  64 64 64 64  
0030FBr 1  64 64 64 64  
003173r 1               WORLD_SPRITE_CENTER_XL: ; 128 bytes
003173r 1  00 0D 1B 29  .byte $0,$D,$1B,$29,$36,$43,$51,$5E,$6B,$78,$85,$92,$9F,$AB,$B8,$C4,$D1,$DD,$E9,$F6,$2,$E,$A,$FE,$F2,$E5,$D9,$CD,$C0,$B4,$A7,$9A,$8E,$81,$74,$67,$5A,$4C,$3F,$32,$24,$16,$9,$4,$12,$20,$2D,$3B,$48,$55,$62,$6F,$7C,$89,$96,$A3,$B0,$BC,$C9,$D5,$E1,$EE,$FA,$6,$12,$13,$FA,$EE,$E1,$D5,$C9,$BC,$B0,$A3,$96,$89,$7C,$6F,$62,$55,$48,$3B,$2D,$20,$12,$4,$9,$16,$24,$32,$3F,$4C,$5A,$67,$74,$81,$8E,$9A,$A7,$B4,$C0,$CD,$D9,$E5,$F2,$FE,$A,$E,$2,$F6,$E9,$DD,$D1,$C4,$B8,$AB,$9F,$92,$85,$78,$6B,$5E,$51,$43,$36,$29,$1B,$D
003177r 1  36 43 51 5E  
00317Br 1  6B 78 85 92  
0031F3r 1               WORLD_SPRITE_CENTER_YH: ; 128 bytes
0031F3r 1  4C 4C 4C 4C  .byte $4C,$4C,$4C,$4C,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4C,$4C,$4C,$4C,$4C,$4C,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4C,$4C,$4C,$4C,$4C,$4C,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4C,$4C,$4C
0031F7r 1  4B 4B 4B 4B  
0031FBr 1  4B 4B 4B 4B  
003273r 1               WORLD_SPRITE_CENTER_YL: ; 128 bytes
003273r 1  19 11 08 00  .byte $19,$11,$8,$0,$F7,$EE,$E6,$DD,$D4,$CB,$C2,$B9,$B0,$A7,$9D,$94,$8B,$81,$78,$6E,$64,$5B,$5E,$68,$71,$7B,$84,$8E,$97,$A0,$AA,$B3,$BC,$C5,$CE,$D7,$E0,$E8,$F1,$FA,$3,$B,$14,$17,$E,$5,$FD,$F4,$EB,$E3,$DA,$D1,$C8,$BF,$B6,$AD,$A3,$9A,$91,$87,$7E,$74,$6B,$61,$57,$57,$6B,$74,$7E,$87,$91,$9A,$A3,$AD,$B6,$BF,$C8,$D1,$DA,$E3,$EB,$F4,$FD,$5,$E,$17,$14,$B,$3,$FA,$F1,$E8,$E0,$D7,$CE,$C5,$BC,$B3,$AA,$A0,$97,$8E,$84,$7B,$71,$68,$5E,$5B,$64,$6E,$78,$81,$8B,$94,$9D,$A7,$B0,$B9,$C2,$CB,$D4,$DD,$E6,$EE,$F7,$0,$8,$11
003277r 1  F7 EE E6 DD  
00327Br 1  D4 CB C2 B9  
0032F3r 1               
0032F3r 1               WORLD_SPRITE_NUM_lookies: ; 128 bytes
0032F3r 1               ;      0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
0032F3r 1  00 00 00 00  .byte   0,  0,  0,  0, 32, 32, 32, 32, 32, 32, 64, 64, 64, 64, 64, 64
0032F7r 1  20 20 20 20  
0032FBr 1  20 20 40 40  
003303r 1  40 40 60 60  .byte  64, 64, 96, 96,160,160,160, 96, 96, 96, 64, 64, 64, 64, 64, 64
003307r 1  A0 A0 A0 60  
00330Br 1  60 60 40 40  
003313r 1  40 40 20 20  .byte  64, 64, 32, 32, 32, 32, 32, 32,  0,  0,  0,  0,  0,  0, 32, 32
003317r 1  20 20 20 20  
00331Br 1  00 00 00 00  
003323r 1  20 20 20 20  .byte  32, 32, 32, 32, 32, 64, 64, 64, 64, 64, 64, 64, 96, 96, 96,160
003327r 1  20 40 40 40  
00332Br 1  40 40 40 40  
003333r 1  A0 A0 60 60  .byte 160,160, 96, 96, 96, 64, 64, 64, 64, 64, 64, 64, 32, 32, 32, 32
003337r 1  60 40 40 40  
00333Br 1  40 40 40 40  
003343r 1  20 20 20 00  .byte  32, 32, 32,  0,  0,  0,  0,  0,  0, 32, 32, 32, 32, 32, 32, 64
003347r 1  00 00 00 00  
00334Br 1  00 20 20 20  
003353r 1  40 40 40 40  .byte  64, 64, 64, 64, 64, 64, 64, 96, 96, 96,160,160,160, 96, 96, 64
003357r 1  40 40 40 60  
00335Br 1  60 60 A0 A0  
003363r 1  40 40 40 40  .byte  64, 64, 64, 64, 64, 64, 64, 32, 32, 32, 32, 32, 32,  0,  0,  0
003367r 1  40 40 40 20  
00336Br 1  20 20 20 20  
003373r 1               WORLD_WALL_SPRITE_NUM_lookies:
003373r 1  80 80 80 80  .byte 128,128,128,128,128,128,128,128,128,128,192,192,192,192,192,192
003377r 1  80 80 80 80  
00337Br 1  80 80 C0 C0  
003383r 1  C0 C0 C0 C0  .byte 192,192,192,192,224,224,224,192,192,192,192,192,192,192,192,192
003387r 1  E0 E0 E0 C0  
00338Br 1  C0 C0 C0 C0  
003393r 1  C0 C0 80 80  .byte 192,192,128,128,128,128,128,128,128,128,128,128,128,128,128,128
003397r 1  80 80 80 80  
00339Br 1  80 80 80 80  
0033A3r 1  80 80 80 80  .byte 128,128,128,128,128,192,192,192,192,192,192,192,192,192,192,224
0033A7r 1  80 C0 C0 C0  
0033ABr 1  C0 C0 C0 C0  
0033B3r 1  E0 E0 C0 C0  .byte 224,224,192,192,192,192,192,192,192,192,192,192,128,128,128,128
0033B7r 1  C0 C0 C0 C0  
0033BBr 1  C0 C0 C0 C0  
0033C3r 1  80 80 80 80  .byte 128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,192
0033C7r 1  80 80 80 80  
0033CBr 1  80 80 80 80  
0033D3r 1  C0 C0 C0 C0  .byte 192,192,192,192,192,192,192,192,192,192,224,224,224,192,192,192
0033D7r 1  C0 C0 C0 C0  
0033DBr 1  C0 C0 E0 E0  
0033E3r 1  C0 C0 C0 C0  .byte 192,192,192,192,192,192,192,128,128,128,128,128,128,128,128,128
0033E7r 1  C0 C0 C0 80  
0033EBr 1  80 80 80 80  
0033F3r 1               
0033F3r 1               BITMAP_OFFSETS_HIGH:
0033F3r 1  00 00 01 01  .byte 0,0,1,1,2,3,3,4,5,5,6,6,7,8,8,9,10,10,11,11,12,13,13,14,15,15,16,16,17,18,18,19,20,20,21,21,22,23,23,24,25,25,26,26,27,28,28,29,30,30,31,31,32,33,33,34,35,35,36,36,37,38,38,39,40,40,41,41,42,43,43,44,45,45,46,46,47,48,48,49,50,50,51,51,52,53,53,54,55,55,56,56,57,58,58,59,60,60,61,61,62,63,63,64,65,65,66,66,67,68,68,69,70,70,71,71,72,73,73,74,75,75,76,76,77,78,78,79,80,80,81,81,82,83,83,84,85,85,86,86,87,88,88,89,90,90,91,91,92,93,93,94,95,95,96,96,97,98,98,99,100,100,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
0033F7r 1  02 03 03 04  
0033FBr 1  05 05 06 06  
0034F3r 1               BITMAP_OFFSETS_LOW:
0034F3r 1  00 A0 40 E0  .byte 0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96
0034F7r 1  80 20 C0 60  
0034FBr 1  00 A0 40 E0  
0035F3r 1               ;constants
0035F3r 1               
0035F3r 1               ; RAM Interrupt Vectors
0035F3r 1               IRQVec            = $0314
0035F3r 1               
0035F3r 1               ; VERA
0035F3r 1               VERA_addr_low     = $9F20
0035F3r 1               VERA_addr_high    = $9F21
0035F3r 1               VERA_addr_bank    = $9F22
0035F3r 1               VERA_data0        = $9F23
0035F3r 1               VERA_data1        = $9F24
0035F3r 1               VERA_ctrl         = $9F25
0035F3r 1               VERA_ien          = $9F26
0035F3r 1               VERA_isr          = $9F27
0035F3r 1               VERA_dc_video     = $9F29 ; DCSEL = 0
0035F3r 1               FX_CTRL           = $9F29 ; DCSEL = 2
0035F3r 1               FX_MULT           = $9F2C ; DCSEL = 2
0035F3r 1               FX_CACHE_L        = $9F29 ; DCSEL = 6
0035F3r 1               FX_CACHE_M        = $9F2A
0035F3r 1               FX_CACHE_H        = $9F2B
0035F3r 1               FX_CACHE_U        = $9F2C
0035F3r 1               ;   Current Field | Sprites Enable | Layer1 Enable  |Layer0 Enable
0035F3r 1               ; NTSC/RGB: 240P  | NTSC: Chroma Disable / RGB: HV Sync Output Mode
0035F3r 1               
0035F3r 1               VERA_dc_hscale    = $9F2A
0035F3r 1               VERA_dc_vscale    = $9F2B
0035F3r 1               
0035F3r 1               VERA_L0_config    = $9F2D
0035F3r 1               ;   7       6     5   4       3       2             1   0
0035F3r 1               ;   Map Height | Map Width | T256C | Bitmap Mode | Color Depth
0035F3r 1               ;   0 - 32                  0 - 16    0 tiled       0   1bpp mono
0035F3r 1               ;   1 - 64                  1 - 256   1 enabled     1   2bpp 4 color
0035F3r 1               ;   2 - 128                                         2   4bpp 16 color
0035F3r 1               ;   3 - 256                                         3   8bpp 256 color
0035F3r 1               ;   bitmap mode - tilebase points to bitmap data, mapbase not used
0035F3r 1               ;   tile width = 0 is 320 pixels / tile width=1 is 640 pixels.. so could do 4bpp x 320?
0035F3r 1               ;   The palette offset (in 'H-Scroll (11:8)') modifies the color indexes of the bitmap in the same way as in the tile modes.
0035F3r 1               
0035F3r 1               VERA_L0_mapbase   = $9F2E
0035F3r 1               VERA_L0_tilebase  = $9F2F ;   Tile Base Address (16:11) | Tile Height 0-8/1-16 | Tile Width 0-8/1-16
0035F3r 1               VERA_L0_HSCROLL_L = $9F30 ;  H-Scroll (7:0)
0035F3r 1               VERA_L0_HSCROLL_H = $9F31 ;  - H-Scroll (11:8)
0035F3r 1               VERA_L0_VSCROLL_L = $9F32 ;  V-Scroll (7:0)
0035F3r 1               VERA_L0_VSCROLL_H = $9F33 ;  - V-Scroll (11:8)
0035F3r 1               
0035F3r 1               VERA_L1_config    = $9F34
0035F3r 1               VERA_L1_mapbase   = $9F35
0035F3r 1               VERA_L1_tilebase  = $9F36
0035F3r 1               VERA_L1_HSCROLL_L = $9F37 ;  H-Scroll (7:0)
0035F3r 1               VERA_L1_HSCROLL_H = $9F38 ;  - H-Scroll (11:8)
0035F3r 1               VERA_L1_VSCROLL_L = $9F39 ;  V-Scroll (7:0)
0035F3r 1               VERA_L1_VSCROLL_H = $9F3A ;  - V-Scroll (11:8)
0035F3r 1               
0035F3r 1               VSYNC_BIT         = $01
0035F3r 1               
0035F3r 1               ; VRAM Addresses
0035F3r 1               ;   Address range Description
0035F3r 1               ;   $00000 - $1F9BF Video RAM   - 129,424 bytes -> 126K is 129,024 (1F800)
0035F3r 1               ;   $1F9C0 - $1F9FF PSG registers
0035F3r 1               ;   $1FA00 - $1FBFF Palette
0035F3r 1               ;   $1FC00 - $1FFFF Sprite attributes
0035F3r 1               VRAM_SPRITES =      $00000  ; putting sprite data at start of VRAM for now.. may move later?
0035F3r 1               VRAM_BITMAP_LAYERA =$11800  ; starts at 70K ... so up to ~70K for sprites.. not too shabby..
0035F3r 1               VRAM_BITMAP_LAYERB =$18000  ; ~25K needs to start at 2K boundary... 121.5-25= 96k
0035F3r 1               VRAM_TEXT_SCREEN =  $1E400  ; 121.5K    256 x 21 => 32 x 24 would take 1.5K tiles is min.. 64*32 = 2K 8 config..
0035F3r 1               VRAM_SPRITE_BUF =   $1EC00  ; 123K - sprite attribute buffer for swapping data in ..
0035F3r 1               VRAM_CHARSET =      $1F000  ;  $1:F000-$1:F7FF Charset loaded by kernal here .. is at 124K ..
0035F3r 1               ; only can go to 126K ...
0035F3r 1               VRAM_palette      = $1FA00      ;
0035F3r 1               VRAM_sprite_attributes = $1FC00
0035F3r 1               
0035F3r 1               SPRITES_ONLY_VGA = $41
0035F3r 1               SPRITES_LAYER1_LAYER0_VGA = $71
0035F3r 1               
0035F3r 1               
0035F3r 1               ; Kernal
0035F3r 1               CHROUT            = $FFD2
0035F3r 1               GETIN             = $FFE4
0035F3r 1               CINT              = $FF81
0035F3r 1               
0035F3r 1               
0035F3r 1               ; PETSCII Codes
0035F3r 1               WHITE             = $05
0035F3r 1               RETURN            = $0D
0035F3r 1               SPACE             = $20
0035F3r 1               ZERO_CHAR         = $30
0035F3r 1               ONE_CHAR          = $31
0035F3r 1               TWO_CHAR          = $32
0035F3r 1               THREE_CHAR        = $33
0035F3r 1               FOUR_CHAR         = $34
0035F3r 1               FIVE_CHAR         = $35
0035F3r 1               SIX_CHAR          = $36
0035F3r 1               SEVEN_CHAR        = $37
0035F3r 1               EIGHT_CHAR        = $38
0035F3r 1               NINE_CHAR         = $39
0035F3r 1               
0035F3r 1               A_CHAR            = $41
0035F3r 1               C_CHAR            = $43
0035F3r 1               D_CHAR            = $44
0035F3r 1               E_CHAR            = $45
0035F3r 1               I_CHAR            = $49
0035F3r 1               J_CHAR            = $4A
0035F3r 1               K_CHAR            = $4B
0035F3r 1               L_CHAR            = $4C
0035F3r 1               O_CHAR            = $4F
0035F3r 1               T_CHAR            = $54
0035F3r 1               W_CHAR            = $57
0035F3r 1               X_CHAR            = $58
0035F3r 1               Y_CHAR            = $59
0035F3r 1               Z_CHAR            = $5A
0035F3r 1               
0035F3r 1               CLR               = $93
0035F3r 1               
0035F3r 1               ; 	$0800-$9EFF	BASIC program/variables; available to the user
0035F3r 1               WORLD_DATA = $6000 	;	so is %100 [Y 5 bits ] : [ab] 0 [X - 6 bits
0035F3r 1               SCREEN_buffer = $8000
0035F3r 1               
0035F3r 1               ; zero page layout $0022-$007F is available to user
0035F3r 1               ZP_PTR = $22
0035F3r 1               SCRATCH_PTR = $7E
0035F3r 1               
0035F3r 1               SPRITE_SIZE_ORA = $D0 ; $D0 for 16x64, $50 for 16x16
0035F3r 1               
0035F3r 1               diff_sprite_to_transparent = 15
0035F3r 1               
0035F3r 1               SCREEN_OUT_RIGHT  = 156 ; right of middle is 116, +48 = 164
0035F3r 1               SCREEN_OUT_LEFT   = 255+4-8  ; left of middle is 100, -48=52-16=36
0035F3r 1               SCREEN_OUT_TOP     = 255+4-12
0035F3r 1               SCREEN_OUT_BOTTOM  = 120
0035F3r 1               
0035F3r 1               ; global data ; 2E00
0035F3r 1               ;line 0
0035F3r 1  DE AD BE EF  GLOBAL_DATA:         .byte $DE,$AD,$BE,$EF ; 0-3
0035F7r 1               ;line 1
0035F7r 1  00 00        default_irq_vector:  .addr 0 ; 4-5
0035F9r 1  00 00        MASTER_CLOCK:        .addr 0 ; 6-7
0035FBr 1               ; line 2
0035FBr 1  00           VERA_LOCK:           .byte 0 ; 9 value written to screen is value at time DEBUG_WRITE
0035FCr 1  50           IRQ_VERA_LOCK:       .byte 80 ; value of VERA_LOCK when reached the Interrupt
0035FDr 1  00 00        .byte 0,0
0035FFr 1               ; line 3
0035FFr 1  00           STALL_COUNTER:       .byte 0
003600r 1  00           STALL_COUNTERH:      .byte 0
003601r 1  00           LAST_VSYNC_COUNTER:  .byte 0
003602r 1  01           VSYNC_counter:       .byte 1 ; 8
003603r 1               ; line 4
003603r 1  01           camera_facing: 		 .byte 1 ; 7
003604r 1  00           .byte 0
003605r 1  00           CAMERA_CENTER_XH:    .byte 0 ; 13
003606r 1  00           CAMERA_CENTER_YH:    .byte 0 ; 15
003607r 1               ; line 5
003607r 1               
003607r 1  00           camera_cell_x: 		 .byte 0 ; c
003608r 1  00           camera_cell_xl:       .byte 0 ; d
003609r 1  00           camera_cell_y: 		 .byte 0 ; e
00360Ar 1  00           camera_cell_yl:       .byte 0 ; f
00360Br 1               ; line 6
00360Br 1  2C           camera_world_pos_XH:    .byte 44 ; 8
00360Cr 1  30           camera_world_pos_XL:       .byte 48 ; 9
00360Dr 1  0F           camera_world_pos_YH:        .byte 15 ; A
00360Er 1  80           camera_world_pos_YL:       .byte 128  ; B
00360Fr 1               
00360Fr 1  00           DEBUG_A: .byte 0  ; B
003610r 1  00           DEBUG_B: .byte 0  ; C
003611r 1  00           DEBUG_C: .byte 0  ; D
003612r 1  00           DEBUG_D: .byte 0  ; E
003613r 1               
003613r 1               
003613r 1  00           NUM_AVAIL_SPRITES:   .byte 0 ; A
003614r 1  00           NUM_RESERVED_SPRITES:    .byte  0;(1+NUM_RESERVED_SPRITES-MASTER_CLOCK) << 1 ; F
003615r 1               
003615r 1               
003615r 1  00           CAMERA_CENTER_XL:    .byte 0 ; 12
003616r 1  00           CAMERA_CENTER_YL:    .byte 0 ; 14
003617r 1  00           CAMERA_CENTER_TOP_PX: .byte 0 ; 16
003618r 1  00 00        CAMERA_CELL_LINE_PTR: .addr 0 ; 17-18
00361Ar 1  00           WORLD_SPRITE_NUM:    .byte 0 ; 1B
00361Br 1  00           WORLD_WALL_SPRITE_NUM: .byte 0; 1C
00361Cr 1  00           CURRENT_BITMAP_BUFFER: .byte 0 ; "A"
00361Dr 1               
00361Dr 1  F7           camera_screen_out_top: .byte SCREEN_OUT_TOP       ; for determining visibility / stop conditions for checking if within range to view..
00361Er 1  78           camera_screen_out_bottom: .byte SCREEN_OUT_BOTTOM
00361Fr 1               
00361Fr 1               .macro stash_scratch
00361Fr 1               	STA (SCRATCH_PTR)
00361Fr 1                   INC SCRATCH_PTR
00361Fr 1               .endmacro
00361Fr 1               
00361Fr 1               custom_irq_handler: ; 2E12
00361Fr 1  AD 27 9F        lda VERA_isr
003622r 1  29 01           and #VSYNC_BIT
003624r 1  F0 11           BEQ :+
003626r 1                  ;  for debug ..
003626r 1  AD rr rr        LDA VERA_LOCK
003629r 1  8D rr rr        STA IRQ_VERA_LOCK
00362Cr 1               
00362Cr 1  EE rr rr        INC VSYNC_counter
00362Fr 1               
00362Fr 1  EE rr rr        INC VERA_LOCK
003632r 1  F0 06           BEQ :++  ; @unlock_vera ; if we don't have lock we'll just fail this frame..
003634r 1  CE rr rr        DEC VERA_LOCK
003637r 1  6C rr rr      : jmp (default_irq_vector)
00363Ar 1               
00363Ar 1  EE rr rr      : INC DEBUG_C
00363Dr 1  AD rr rr        LDA CURRENT_BITMAP_BUFFER
003640r 1  F0 07           BEQ :+
003642r 1  9C rr rr        STZ CURRENT_BITMAP_BUFFER
003645r 1  A9 8C           LDA #VRAM_BITMAP_LAYERA>>9
003647r 1  80 06           BRA :++
003649r 1  3A            : DEC A
00364Ar 1  8D rr rr        STA CURRENT_BITMAP_BUFFER
00364Dr 1  A9 C0           LDA #VRAM_BITMAP_LAYERB>>9
00364Fr 1  8D 2F 9F      : STA VERA_L0_tilebase
003652r 1               
003652r 1               ;   JMP @patched
003652r 1               
003652r 1               ;   JMP @USE_CACHE
003652r 1  A9 01           LDA #$01
003654r 1  8D 25 9F        STA VERA_ctrl
003657r 1               
003657r 1  A2 FF           LDX #$FF
003659r 1  8E 20 9F        STX VERA_addr_low
00365Cr 1  8E 21 9F        STX VERA_addr_high
00365Fr 1  A9 19           LDA #$19
003661r 1  8D 22 9F        STA VERA_addr_bank
003664r 1               
003664r 1  9C 25 9F        STZ VERA_ctrl  ;  reset to address 0
003667r 1  8D 22 9F        STA VERA_addr_bank
00366Ar 1               
00366Ar 1  A9 EF           LDA #$EF
00366Cr 1  8D 21 9F        STA VERA_addr_high
00366Fr 1  8E 20 9F        STX VERA_addr_low
003672r 1               
003672r 1                  ;SEC
003672r 1                 ; LDA #128
003672r 1                ;  SBC NUM_RESERVED_SPRITES
003672r 1               ;   TAX
003672r 1  AE rr rr        LDX NUM_AVAIL_SPRITES
003675r 1  AD 23 9F      : LDA VERA_data0   ;  4
003678r 1  8D 24 9F        STA VERA_data1   ;  4  20
00367Br 1  AD 23 9F        LDA VERA_data0   ;  4  8
00367Er 1  8D 24 9F        STA VERA_data1   ;  4  20
003681r 1  AD 23 9F        LDA VERA_data0   ;  4  12
003684r 1  8D 24 9F        STA VERA_data1   ;  4  20
003687r 1  AD 23 9F        LDA VERA_data0   ;  4  16
00368Ar 1  8D 24 9F        STA VERA_data1   ;  4  20
00368Dr 1  AD 23 9F        LDA VERA_data0   ;  4
003690r 1  8D 24 9F        STA VERA_data1   ;  4  20
003693r 1  AD 23 9F        LDA VERA_data0   ;  4  8
003696r 1  8D 24 9F        STA VERA_data1   ;  4  20
003699r 1  AD 23 9F        LDA VERA_data0   ;  4  12
00369Cr 1  8D 24 9F        STA VERA_data1   ;  4  20
00369Fr 1  AD 23 9F        LDA VERA_data0   ;  4  16
0036A2r 1  8D 24 9F        STA VERA_data1   ;  4  20
0036A5r 1  CA              DEX         ;  2  22
0036A6r 1  D0 CD           BNE :-      ;  3  25       8per byte = 64 per sprite + 5 = 69 per * 128 = 8,832 cycles
0036A8r 1               
0036A8r 1  4C rr rr        JMP @patched
0036ABr 1                @USE_CACHE:
0036ABr 1  9C 20 9F        STZ VERA_addr_low
0036AEr 1  A9 ED           LDA #>VRAM_SPRITE_BUF+1
0036B0r 1  8D 21 9F        STA VERA_addr_high
0036B3r 1  A9 11           LDA #$11
0036B5r 1  8D 22 9F        STA VERA_addr_bank
0036B8r 1  A9 05           LDA #$05 ; DCSEL 2, addrsel1 , main FX config..
0036BAr 1  8D 25 9F        STA VERA_ctrl
0036BDr 1  9C 20 9F        STZ VERA_addr_low
0036C0r 1  A9 FD           LDA #>VRAM_sprite_attributes+1
0036C2r 1  8D 21 9F        STA VERA_addr_high
0036C5r 1  A9 31           LDA #$31 ; increment 4 at a time
0036C7r 1  8D 22 9F        STA VERA_addr_bank
0036CAr 1               
0036CAr 1  A9 60           LDA #%01100000 ; no trans, cache write, cache fill,not one byte cycle | no hop, no 4bit, addr1 mode=0
0036CCr 1  8D 29 9F        STA FX_CTRL
0036CFr 1  9C 2C 9F        STZ FX_MULT ; zero out the cache thingy
0036D2r 1  A2 60           LDX #96
0036D4r 1  AD 23 9F      : LDA VERA_data0   ;  4
0036D7r 1  AD 23 9F        LDA VERA_data0   ;  4  8
0036DAr 1  AD 23 9F        LDA VERA_data0   ;  4  12
0036DDr 1  AD 23 9F        LDA VERA_data0   ;  4  16
0036E0r 1  9C 24 9F        STZ VERA_data1   ;  4  20
0036E3r 1  AD 23 9F        LDA VERA_data0   ;  4
0036E6r 1  AD 23 9F        LDA VERA_data0   ;  4  8
0036E9r 1  AD 23 9F        LDA VERA_data0   ;  4  12
0036ECr 1  AD 23 9F        LDA VERA_data0   ;  4  16
0036EFr 1  9C 24 9F        STZ VERA_data1   ;  4  20
0036F2r 1  CA              DEX         ;  2  22
0036F3r 1  D0 DF           BNE :-      ;  3  25       25 per 4 bytes = 6,400 cycles
0036F5r 1  9C 29 9F        STZ FX_CTRL
0036F8r 1               
0036F8r 1  9C 25 9F        STZ VERA_ctrl
0036FBr 1  9C 29 9F       stz VERA_dc_video
0036FEr 1  A9 41          lda #SPRITES_ONLY_VGA
003700r 1  8D 29 9F       sta VERA_dc_video
003703r 1  4C rr rr       jmp @patched
003706r 1  A9 06           LDA #6
003708r 1  8D 20 9F        STA VERA_addr_low
00370Br 1  A9 FD           LDA #>VRAM_sprite_attributes+1
00370Dr 1  8D 21 9F        STA VERA_addr_high
003710r 1  A9 41           LDA #$41 ; increment 8 at a time
003712r 1  8D 22 9F        STA VERA_addr_bank
003715r 1               
003715r 1  A9 0C           LDA #$0C
003717r 1  A2 60           LDX #96
003719r 1  8D 23 9F      : STA VERA_data0
00371Cr 1  CA              DEX
00371Dr 1  D0 FA           BNE :-
00371Fr 1               
00371Fr 1  9C 25 9F        STZ VERA_ctrl
003722r 1               
003722r 1               @patched:
003722r 1               @unlock_vera:
003722r 1               ;   INC VERA_LOCK ; push VERA_LOCK to 1 from zero.. indicating we've done the swap needed
003722r 1               @continue:
003722r 1                  ; continue to default IRQ handler
003722r 1  6C rr rr        jmp (default_irq_vector)
003725r 1                  ; RTI will happen after jump
003725r 1               
003725r 1               start:
003725r 1                 ; start of program - init globals
003725r 1  AD 14 03       lda IRQVec
003728r 1  8D rr rr       sta default_irq_vector
00372Br 1  AD 15 03       lda IRQVec+1
00372Er 1  8D rr rr       sta default_irq_vector+1
003731r 1               
003731r 1  9C 29 9F       stz VERA_dc_video   ; disable display
003734r 1  A9 33          lda #51 ; #43 ; set scale for bitmap mode - going for 215x161 mode
003736r 1  8D 2A 9F       sta VERA_dc_hscale
003739r 1  8D 2B 9F       sta VERA_dc_vscale
00373Cr 1                 ; for now no L0 or L1
00373Cr 1               
00373Cr 1                 ; let's stick that test sprite data into VRAM at zero for now..
00373Cr 1  9C 25 9F       stz VERA_ctrl
00373Fr 1  9C 20 9F       stz VERA_addr_low
003742r 1  9C 21 9F       stz VERA_addr_high
003745r 1  A9 10          lda #$10
003747r 1  8D 22 9F       sta VERA_addr_bank
00374Ar 1                 ; load test VRAM data
00374Ar 1               
00374Ar 1                 ; is 512 bytes at test_cell_sprite label
00374Ar 1  A0 00          ldy #0
00374Cr 1               
00374Cr 1  A9 rr          LDA #<test_vram_data
00374Er 1  85 22          STA ZP_PTR
003750r 1  A9 rr          LDA #>test_vram_data
003752r 1  85 23          STA ZP_PTR+1
003754r 1  A2 40          LDX #64   ;   num pages to copy - 16 pages / 8K  - sprite addr 0-255
003756r 1  80 02          BRA :++
003758r 1                 :
003758r 1  E6 23             INC ZP_PTR+1
00375Ar 1                   :
00375Ar 1  B1 22              LDA (ZP_PTR),Y
00375Cr 1  8D 23 9F           STA VERA_data0
00375Fr 1  C8                 INY
003760r 1  D0 F8              BNE :-
003762r 1  CA                DEX
003763r 1  D0 F3             BNE :--
003765r 1               
003765r 1                 ; initialize some waves
003765r 1  64 22          STZ ZP_PTR
003767r 1  A9 rr          LDA #>TUB_WORLD
003769r 1  85 23          STA ZP_PTR+1
00376Br 1  A9 08          LDA #8
00376Dr 1  85 24          STA ZP_PTR+2 ; for use as page counter..
00376Fr 1  A2 00          LDX #0
003771r 1  B1 22          : LDA (ZP_PTR),y ; grab world data
003773r 1  C9 80            CMP #128       ; is outside or inside tub?
003775r 1  B0 0B            BCS :+         ; skip this one
003777r 1  8A               TXA
003778r 1  91 22            STA (ZP_PTR),y
00377Ar 1  E8               INX
00377Br 1  E8               INX
00377Cr 1  E8               INX
00377Dr 1  E8               INX
00377Er 1  E0 34            CPX #52
003780r 1  B0 0B            BCS :++
003782r 1  C8             : INY
003783r 1  D0 EC            BNE :--
003785r 1  E6 23            INC ZP_PTR+1
003787r 1  C6 24            DEC ZP_PTR+2
003789r 1  D0 E6            BNE :--
00378Br 1  80 18            BRA :+++
00378Dr 1  B1 22          : LDA (ZP_PTR),y
00378Fr 1  C9 80            CMP #128       ; is outside or inside tub?
003791r 1  B0 09            BCS :+         ; skip this one
003793r 1  8A               TXA
003794r 1  91 22            STA (ZP_PTR),y
003796r 1  CA               DEX
003797r 1  CA               DEX
003798r 1  CA               DEX
003799r 1  CA               DEX
00379Ar 1  F0 E6            BEQ :--
00379Cr 1  C8             : INY
00379Dr 1  D0 EE            BNE :--
00379Fr 1  E6 23            INC ZP_PTR+1
0037A1r 1  C6 24            DEC ZP_PTR+2
0037A3r 1  D0 E8            BNE :--
0037A5r 1                 :
0037A5r 1               
0037A5r 1               
0037A5r 1                 ; write custom palette data  - 16 colors only for now.. $1:FA00-$1:FBFF   VERA Color Palette (256 x 2 bytes)
0037A5r 1  A2 1F          LDX #31
0037A7r 1  8E 20 9F       STX VERA_addr_low
0037AAr 1  A9 FA          LDA #$FA
0037ACr 1  8D 21 9F       STA VERA_addr_high
0037AFr 1  A9 19          LDA #$19
0037B1r 1  8D 22 9F       STA VERA_addr_bank
0037B4r 1                 :
0037B4r 1  BD rr rr         LDA test_optimal_pal_data,X
0037B7r 1  8D 23 9F         STA VERA_data0
0037BAr 1  CA               DEX
0037BBr 1  D0 F7            BNE :-
0037BDr 1  BD rr rr       LDA test_optimal_pal_data,X
0037C0r 1  8D 23 9F       STA VERA_data0
0037C3r 1               
0037C3r 1  A9 08          LDA #8
0037C5r 1  9C 34 9F       STz VERA_L1_config
0037C8r 1  A9 F8          LDA #VRAM_CHARSET >> 9
0037CAr 1  8D 36 9F       STA VERA_L1_tilebase
0037CDr 1  A9 F2          LDA #VRAM_TEXT_SCREEN >> 9
0037CFr 1  8D 35 9F       STA VERA_L1_mapbase
0037D2r 1               
0037D2r 1  9C 20 9F       STZ VERA_addr_low
0037D5r 1  A9 18          LDA #>VRAM_BITMAP_LAYERA
0037D7r 1  8D 21 9F       STA VERA_addr_high
0037DAr 1  A9 11          LDA #$11
0037DCr 1  8D 22 9F       STA VERA_addr_bank
0037DFr 1  A2 67          LDX #103  ;  need to zero out from 70K to 121.5K where that sprite buffer is.. 206 pages, 53K ; well.. zero out 70 to 96..
0037E1r 1  A0 00          LDY #0
0037E3r 1  9C 23 9F     : STZ VERA_data0
0037E6r 1  C8             INY
0037E7r 1  D0 FA          BNE :-
0037E9r 1  CA             DEX
0037EAr 1  D0 F7          BNE :-
0037ECr 1  A2 65          LDX #101  ;  need to zero out from 70K to 121.5K where that sprite buffer is.. 206 pages, 53K ; well.. zero out 70 to 96..
0037EEr 1                 ;LDA #255
0037EEr 1  8D 23 9F     : STA VERA_data0
0037F1r 1  C8             INY
0037F2r 1  D0 FA          BNE :-
0037F4r 1  CA             DEX
0037F5r 1  D0 F7          BNE :-
0037F7r 1               
0037F7r 1  9C 23 9F       STZ VERA_data0
0037FAr 1  A9 21          LDA #$21
0037FCr 1  8D 22 9F       STA VERA_addr_bank
0037FFr 1  A9 F1          LDA #$F1
003801r 1  A2 21          LDX #33
003803r 1  8D 23 9F     : STA VERA_data0
003806r 1  CA             DEX
003807r 1  D0 FA          BNE :-
003809r 1  A2 0E          LDX #14
00380Br 1  A0 13        : LDY #19
00380Dr 1  A9 01          LDA #$01
00380Fr 1  8D 23 9F       : STA VERA_data0
003812r 1  88               DEY
003813r 1  D0 FA            BNE :-
003815r 1  A0 F1            LDY #$F1
003817r 1  8C 23 9F         STY VERA_data0
00381Ar 1  8C 23 9F         STY VERA_data0
00381Dr 1  8C 23 9F         STY VERA_data0
003820r 1  8C 23 9F         STY VERA_data0
003823r 1               
003823r 1  8C 23 9F         STY VERA_data0
003826r 1  8C 23 9F         STY VERA_data0
003829r 1  8C 23 9F         STY VERA_data0
00382Cr 1  8C 23 9F         STY VERA_data0
00382Fr 1  8C 23 9F         STY VERA_data0
003832r 1  8C 23 9F         STY VERA_data0
003835r 1               
003835r 1  8C 23 9F         STY VERA_data0
003838r 1  8C 23 9F         STY VERA_data0
00383Br 1  8C 23 9F         STY VERA_data0
00383Er 1  CA              DEX
00383Fr 1  D0 CA           BNE :--
003841r 1  A2 A0          LDX #160
003843r 1  8C 23 9F       : STY VERA_data0
003846r 1  8C 23 9F         STY VERA_data0
003849r 1  CA               DEX
00384Ar 1  D0 F7            BNE :-
00384Cr 1               ;  LDA #4
00384Cr 1               ;  STA VERA_L1_HSCROLL_L
00384Cr 1               ;  STA VERA_L1_VSCROLL_L
00384Cr 1               
00384Cr 1  9C 20 9F       STZ VERA_addr_low
00384Fr 1  A9 E4          LDA #>VRAM_TEXT_SCREEN
003851r 1  8D 21 9F       STA VERA_addr_high
003854r 1  A2 04          LDX #4
003856r 1  A9 20          LDA #32
003858r 1  8D 23 9F     : STA VERA_data0
00385Br 1  C8             INY
00385Cr 1  D0 FA          BNE :-
00385Er 1  CA             DEX
00385Fr 1  D0 F7          BNE :-
003861r 1               
003861r 1  A9 06          LDA #$06
003863r 1  8D 2D 9F       STA VERA_L0_config
003866r 1  A9 8C          LDA #VRAM_BITMAP_LAYERA >>9
003868r 1  8D 2F 9F       STA VERA_L0_tilebase
00386Br 1               
00386Br 1  A9 06          LDA #6
00386Dr 1  8D 20 9F       STA VERA_addr_low
003870r 1  A9 EC          LDA #>VRAM_SPRITE_BUF
003872r 1  8D 21 9F       STA VERA_addr_high
003875r 1  A9 41          LDA #$41
003877r 1  8D 22 9F       STA VERA_addr_bank
00387Ar 1  9C 23 9F       : STZ VERA_data0
00387Dr 1  E8               INX
00387Er 1  D0 FA            BNE :-
003880r 1                 ; enable display
003880r 1  9C 25 9F       stz VERA_ctrl
003883r 1  A9 71          lda #SPRITES_LAYER1_LAYER0_VGA ; #SPRITES_ONLY_VGA
003885r 1  8D 29 9F       sta VERA_dc_video
003888r 1               
003888r 1               ;  DEC VERA_LOCK ; unlock the vera for first go...
003888r 1               ;   BRA @camera_world_changed
003888r 1                 ; overwrite RAM IRQ vector with custom handler address
003888r 1  78             sei ; disable IRQ while vector is changing
003889r 1  A9 rr          lda #<custom_irq_handler
00388Br 1  8D 14 03       sta IRQVec
00388Er 1  A9 rr          lda #>custom_irq_handler
003890r 1  8D 15 03       sta IRQVec+1
003893r 1  A9 01          lda #VSYNC_BIT ; make VERA only generate VSYNC IRQs
003895r 1  8D 26 9F       sta VERA_ien
003898r 1  58             cli ; enable IRQ now that vector is properly set
003899r 1               
003899r 1               
003899r 1                 ; main loop here...
003899r 1  9C rr rr        STZ camera_facing
00389Cr 1               
00389Cr 1               @camera_world_changed:
00389Cr 1                  ; copy over cell YL as-is
00389Cr 1  AD rr rr        LDA camera_world_pos_YL
00389Fr 1  8D rr rr        STA camera_cell_yl
0038A2r 1                  ; YH gets copied over ..
0038A2r 1  AD rr rr        LDA camera_world_pos_YH
0038A5r 1  8D rr rr        STA camera_cell_y
0038A8r 1                  ; cellX = WORLDX*ratio - floor(cellY)/2
0038A8r 1                  ;  halve floor(cellY)
0038A8r 1  4A              LSR
0038A9r 1  85 7F           STA $7F ; stash it for scratch
0038ABr 1  A9 00           LDA #0
0038ADr 1  6A              ROR
0038AEr 1  85 7E           STA $7E ; and there's the half..
0038B0r 1               
0038B0r 1  AE rr rr        LDX camera_world_pos_XH
0038B3r 1  AC rr rr        LDY camera_world_pos_XL
0038B6r 1  18              CLC
0038B7r 1  B9 rr rr        LDA WORLD_TO_CELL_XH,Y ; that bit from pos_XL
0038BAr 1  7D rr rr        ADC WORLD_TO_CELL_XL,X ; plus the bit from pos_XH
0038BDr 1  A8              TAY   ;  cellXL from ratio
0038BEr 1  BD rr rr        LDA WORLD_TO_CELL_XH,X
0038C1r 1  69 00           ADC #0 ; gotta do that carry and all ..
0038C3r 1  AA              TAX   ; cellXH from ratio
0038C4r 1               
0038C4r 1  98              TYA
0038C5r 1  38              SEC
0038C6r 1  E5 7E           SBC $7E
0038C8r 1  8D rr rr        STA camera_cell_xl
0038CBr 1  8A              TXA
0038CCr 1  E5 7F           SBC $7F
0038CEr 1  8D rr rr        STA camera_cell_x
0038D1r 1  4C rr rr        jmp @do_update
0038D4r 1               
0038D4r 1               @camera_cell_changed: ; run through this more as a normalization step for camera..
0038D4r 1                  ; worldX = scaled(floor(cellY)/2 + cellX )
0038D4r 1  AD rr rr        LDA camera_cell_yl
0038D7r 1  8D rr rr        STA camera_world_pos_YL
0038DAr 1  AD rr rr        LDA camera_cell_y
0038DDr 1  8D rr rr        STA camera_world_pos_YH
0038E0r 1  4A              LSR
0038E1r 1  AA              TAX  ; high byte floor(Y)/2
0038E2r 1  A9 00           LDA #0
0038E4r 1  6A              ROR ; either is zero or 128 now ... either way, carry is cleared.
0038E5r 1  6D rr rr        ADC camera_cell_xl
0038E8r 1  A8              TAY ; stash the low to byte
0038E9r 1  8A              TXA ; high byte floor (Y)/2 .. ready for adding
0038EAr 1  6D rr rr        ADC camera_cell_x
0038EDr 1  AA              TAX ; stash high byte ... carry _should_ be cleared unless X >255 ... ?
0038EEr 1  B9 rr rr        LDA CELL_LOW_TO_WORLD_XL,Y
0038F1r 1  7D rr rr        ADC CELL_TO_WORLD_XL,X
0038F4r 1  8D rr rr        STA camera_world_pos_XL
0038F7r 1  B9 rr rr        LDA CELL_LOW_TO_WORLD_XH,Y
0038FAr 1  7D rr rr        ADC CELL_TO_WORLD_XH,X
0038FDr 1  8D rr rr        STA camera_world_pos_XH
003900r 1                  ;  jmp @do_update ; superfluous currently. redundant even..
003900r 1               
003900r 1               
003900r 1               @do_update:
003900r 1                  ;  set up screen center stuff
003900r 1               
003900r 1               
003900r 1  AD rr rr        LDA camera_facing
003903r 1  29 7F           AND #127
003905r 1  AA              TAX
003906r 1  BD rr rr        LDA WORLD_SPRITE_NUM_lookies,X
003909r 1  8D rr rr        STA WORLD_SPRITE_NUM
00390Cr 1  BD rr rr        LDA WORLD_WALL_SPRITE_NUM_lookies,X
00390Fr 1  8D rr rr        STA WORLD_WALL_SPRITE_NUM
003912r 1               
003912r 1  38              SEC
003913r 1  BD rr rr        LDA WORLD_SPRITE_CENTER_XL,X
003916r 1  8D rr rr        STA CAMERA_CENTER_XL
003919r 1  BD rr rr        LDA WORLD_SPRITE_CENTER_XH,X
00391Cr 1  E9 1C           SBC #28
00391Er 1  8D rr rr        STA CAMERA_CENTER_XH
003921r 1               
003921r 1  BD rr rr        LDA WORLD_SPRITE_CENTER_YL,X
003924r 1  8D rr rr        STA CAMERA_CENTER_YL
003927r 1  38              SEC
003928r 1  BD rr rr        LDA WORLD_SPRITE_CENTER_YH,X
00392Br 1  E9 14           SBC #20
00392Dr 1  8D rr rr        STA CAMERA_CENTER_TOP_PX
003930r 1               
003930r 1  AE rr rr         LDX camera_facing
003933r 1               
003933r 1  AD rr rr         LDA camera_cell_xl
003936r 1  4A               LSR ;   /2
003937r 1  4A               LSR ;   /4
003938r 1  4A               LSR ;   /8
003939r 1  4A               LSR ;   /16
00393Ar 1  38               SEC
00393Br 1  E9 08            SBC #8 ;   subtract le middle..
00393Dr 1  A8               TAY
00393Er 1  B0 29            BCS :++    ;  is positive..
003940r 1  18             : CLC
003941r 1  AD rr rr         LDA CAMERA_CENTER_XL
003944r 1  7D rr rr         ADC SUBCELL_X_COS_L,X
003947r 1  8D rr rr         STA CAMERA_CENTER_XL
00394Ar 1  AD rr rr         LDA CAMERA_CENTER_XH
00394Dr 1  7D rr rr         ADC SUBCELL_X_COS_H,X
003950r 1  8D rr rr         STA CAMERA_CENTER_XH
003953r 1  38               SEC
003954r 1  AD rr rr         LDA CAMERA_CENTER_YL
003957r 1  FD rr rr         SBC SUBCELL_Y_SIN_L,X
00395Ar 1  8D rr rr         STA CAMERA_CENTER_YL
00395Dr 1  AD rr rr         LDA CAMERA_CENTER_TOP_PX
003960r 1  FD rr rr         SBC SUBCELL_Y_SIN_H,X
003963r 1  8D rr rr         STA CAMERA_CENTER_TOP_PX
003966r 1  C8               INY
003967r 1  D0 D7            BNE :-
003969r 1  F0 29          : BEQ :++
00396Br 1  38             : SEC
00396Cr 1  AD rr rr         LDA CAMERA_CENTER_XL
00396Fr 1  FD rr rr         SBC SUBCELL_X_COS_L,X
003972r 1  8D rr rr         STA CAMERA_CENTER_XL
003975r 1  AD rr rr         LDA CAMERA_CENTER_XH
003978r 1  FD rr rr         SBC SUBCELL_X_COS_H,X
00397Br 1  8D rr rr         STA CAMERA_CENTER_XH
00397Er 1  18               CLC
00397Fr 1  AD rr rr         LDA CAMERA_CENTER_YL
003982r 1  7D rr rr         ADC SUBCELL_Y_SIN_L,X
003985r 1  8D rr rr         STA CAMERA_CENTER_YL
003988r 1  AD rr rr         LDA CAMERA_CENTER_TOP_PX
00398Br 1  7D rr rr         ADC SUBCELL_Y_SIN_H,X
00398Er 1  8D rr rr         STA CAMERA_CENTER_TOP_PX
003991r 1  88               DEY
003992r 1  D0 D7            BNE :-
003994r 1                 :
003994r 1               
003994r 1  AD rr rr         LDA camera_cell_yl
003997r 1  4A               LSR ;   /2
003998r 1  4A               LSR ;   /4
003999r 1  4A               LSR ;   /8
00399Ar 1  4A               LSR ;   /16
00399Br 1  38               SEC
00399Cr 1  E9 08            SBC #8 ;   subtract le middle..
00399Er 1  A8               TAY
00399Fr 1  B0 29            BCS :++    ;  is positive..
0039A1r 1  18             : CLC
0039A2r 1  AD rr rr         LDA CAMERA_CENTER_XL
0039A5r 1  7D rr rr         ADC SUBCELL_X_SIN_L,X
0039A8r 1  8D rr rr         STA CAMERA_CENTER_XL
0039ABr 1  AD rr rr         LDA CAMERA_CENTER_XH
0039AEr 1  7D rr rr         ADC SUBCELL_X_SIN_H,X
0039B1r 1  8D rr rr         STA CAMERA_CENTER_XH
0039B4r 1  18               CLC
0039B5r 1  AD rr rr         LDA CAMERA_CENTER_YL
0039B8r 1  7D rr rr         ADC SUBCELL_Y_COS_L,X
0039BBr 1  8D rr rr         STA CAMERA_CENTER_YL
0039BEr 1  AD rr rr         LDA CAMERA_CENTER_TOP_PX
0039C1r 1  7D rr rr         ADC SUBCELL_Y_COS_H,X
0039C4r 1  8D rr rr         STA CAMERA_CENTER_TOP_PX
0039C7r 1  C8               INY
0039C8r 1  D0 D7            BNE :-
0039CAr 1  F0 29          : BEQ :++
0039CCr 1  38             : SEC
0039CDr 1  AD rr rr         LDA CAMERA_CENTER_XL
0039D0r 1  FD rr rr         SBC SUBCELL_X_SIN_L,X
0039D3r 1  8D rr rr         STA CAMERA_CENTER_XL
0039D6r 1  AD rr rr         LDA CAMERA_CENTER_XH
0039D9r 1  FD rr rr         SBC SUBCELL_X_SIN_H,X
0039DCr 1  8D rr rr         STA CAMERA_CENTER_XH
0039DFr 1               
0039DFr 1  38               SEC
0039E0r 1  AD rr rr         LDA CAMERA_CENTER_YL
0039E3r 1  FD rr rr         SBC SUBCELL_Y_COS_L,X
0039E6r 1  8D rr rr         STA CAMERA_CENTER_YL
0039E9r 1  AD rr rr         LDA CAMERA_CENTER_TOP_PX
0039ECr 1  FD rr rr         SBC SUBCELL_Y_COS_H,X
0039EFr 1  8D rr rr         STA CAMERA_CENTER_TOP_PX
0039F2r 1  88               DEY
0039F3r 1  D0 D7            BNE :-
0039F5r 1                 :
0039F5r 1                  ;  set up tub pointer .. this will let us grab the height value for current location..
0039F5r 1  64 7E            STZ $7E
0039F7r 1  AD rr rr         LDA camera_cell_y
0039FAr 1  4A               LSR  ;  y pages of 128
0039FBr 1  66 7E            ROR $7E
0039FDr 1  4A               LSR  ; y pages of 64 !
0039FEr 1  66 7E            ROR $7E
003A00r 1  69 rr            ADC #>TUB_WORLD
003A02r 1  85 7F            STA $7F
003A04r 1  8D rr rr         STA CAMERA_CELL_LINE_PTR+1
003A07r 1  A5 7E            LDA $7E
003A09r 1  8D rr rr         STA CAMERA_CELL_LINE_PTR
003A0Cr 1               
003A0Cr 1  AC rr rr         LDY camera_cell_x
003A0Fr 1  B1 7E            LDA ($7E),y
003A11r 1  C9 56            CMP #86 ; is largest value we will allow .. accounts for tub heights..
003A13r 1  90 02            BCC :+
003A15r 1  A9 56            LDA #86    ;
003A17r 1  A8              : TAY
003A18r 1               
003A18r 1  18              CLC
003A19r 1  AD rr rr        LDA CAMERA_CENTER_YL
003A1Cr 1  79 rr rr        ADC CONVERT_HEIGHTS_PIXELS_L,Y
003A1Fr 1  8D rr rr        STA CAMERA_CENTER_YL
003A22r 1  AD rr rr        LDA CAMERA_CENTER_TOP_PX
003A25r 1  79 rr rr        ADC CONVERT_HEIGHTS_PIXELS,Y
003A28r 1  8D rr rr        STA CAMERA_CENTER_YH
003A2Br 1               
003A2Br 1  18              CLC
003A2Cr 1  A9 78           LDA #SCREEN_OUT_BOTTOM
003A2Er 1  79 rr rr        ADC CONVERT_HEIGHTS_PIXELS,Y
003A31r 1  8D rr rr        STA camera_screen_out_bottom
003A34r 1  18              CLC
003A35r 1  A9 F7           LDA #SCREEN_OUT_TOP
003A37r 1  79 rr rr        ADC CONVERT_HEIGHTS_PIXELS,Y
003A3Ar 1  8D rr rr        STA camera_screen_out_top
003A3Dr 1               
003A3Dr 1                  ; clear the object list ...
003A3Dr 1  38               SEC
003A3Er 1  A9 80            LDA #128
003A40r 1  ED rr rr         SBC NUM_RESERVED_SPRITES
003A43r 1  8D rr rr         STA NUM_AVAIL_SPRITES
003A46r 1               
003A46r 1  9C rr rr         STZ OBJECT_LIST_BYTE6_NEXT ; because we can't use zero anyway..
003A49r 1  A9 08            LDA #$08 ; is basis for all the z_flips <- this may change depending on orientation..
003A4Br 1  A2 00            LDX #0
003A4Dr 1  9E rr rr         : STZ OBJECT_LIST_Z_START_POINTERS,X
003A50r 1  9E rr rr           STZ OBJECT_LIST_BYTE1_MODE,X          ; 16 color / low address
003A53r 1  9C rr rr           STZ OBJECT_LIST_BYTE2_X
003A56r 1  9D rr rr           STA OBJECT_LIST_BYTE4_ZFLIPS,X
003A59r 1  9D rr rr           STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
003A5Cr 1  E8                 INX
003A5Dr 1  D0 EE              BNE :-
003A5Fr 1               
003A5Fr 1  A9 D0            LDA #SPRITE_SIZE_ORA
003A61r 1  9D rr rr         : STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
003A64r 1  E8                 INX
003A65r 1  D0 FA              BNE :-
003A67r 1  AD rr rr         LDA WORLD_SPRITE_NUM
003A6Ar 1  9D rr rr         : STA OBJECT_LIST_BYTE0_ADDRLOW,X ; 01.3456 done .
003A6Dr 1  E8                 INX
003A6Er 1  D0 FA              BNE :-
003A70r 1               
003A70r 1               
003A70r 1  20 rr rr       jsr push_world_to_object_list
003A73r 1               
003A73r 1  A9 D1           LDA #$D1
003A75r 1  8D rr rr        STA OBJECT_LIST_BYTE5_SIZE+1
003A78r 1               
003A78r 1  9C rr rr        STZ VERA_LOCK
003A7Br 1  20 rr rr        jsr draw_object_list
003A7Er 1               
003A7Er 1               @WRITE_DEBUG:
003A7Er 1  9C 25 9F        STZ VERA_ctrl
003A81r 1  A9 2A           LDA #42;+64
003A83r 1  8D 20 9F        STA VERA_addr_low
003A86r 1  A9 E4           LDA #>VRAM_TEXT_SCREEN
003A88r 1  8D 21 9F        STA VERA_addr_high
003A8Br 1  A9 21           LDA #$21
003A8Dr 1  8D 22 9F        STA VERA_addr_bank
003A90r 1  A0 00           LDY #0
003A92r 1  BE rr rr      : LDX GLOBAL_DATA,Y
003A95r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X ; 1
003A98r 1  8D 23 9F        STA VERA_data0
003A9Br 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X  ; 2
003A9Er 1  8D 23 9F        STA VERA_data0
003AA1r 1  C8              INY
003AA2r 1  BE rr rr        LDX GLOBAL_DATA,Y
003AA5r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X   ;  3
003AA8r 1  8D 23 9F        STA VERA_data0
003AABr 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X    ;  4
003AAEr 1  8D 23 9F        STA VERA_data0
003AB1r 1  C8              INY
003AB2r 1  AD 23 9F        LDA VERA_data0             ;  5
003AB5r 1  AD 20 9F        LDA VERA_addr_low
003AB8r 1  BE rr rr        LDX GLOBAL_DATA,Y
003ABBr 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X   ;  6
003ABEr 1  8D 23 9F        STA VERA_data0
003AC1r 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X    ;  7
003AC4r 1  8D 23 9F        STA VERA_data0
003AC7r 1  C8              INY
003AC8r 1  BE rr rr        LDX GLOBAL_DATA,Y
003ACBr 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X   ;  8
003ACEr 1  8D 23 9F        STA VERA_data0
003AD1r 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X    ;  9
003AD4r 1  8D 23 9F        STA VERA_data0
003AD7r 1  C8              INY
003AD8r 1  18              CLC
003AD9r 1  AD 20 9F        LDA VERA_addr_low          ;  moved 18 out of 64 bytes...
003ADCr 1  69 2E           ADC #64-18
003ADEr 1  8D 20 9F        STA VERA_addr_low
003AE1r 1  90 03           BCC :+
003AE3r 1  EE 21 9F        INC VERA_addr_high
003AE6r 1  C0 44         : CPY #68  ;  show first 64 bytes of global data
003AE8r 1  90 A8           BCC :--
003AEAr 1               
003AEAr 1  A9 FF           LDA #$FF
003AECr 1  8D rr rr        STA VERA_LOCK
003AEFr 1               
003AEFr 1               ;   rts
003AEFr 1               
003AEFr 1               @FRAME_CHECK:
003AEFr 1  A2 FF           LDX #255
003AF1r 1  A0 FF           LDY #255
003AF3r 1  AD rr rr        LDA VSYNC_counter
003AF6r 1  8D rr rr        STA LAST_VSYNC_COUNTER
003AF9r 1  9C rr rr        STZ VSYNC_counter
003AFCr 1  E8           :  INX                     ;  2 cycles
003AFDr 1  D0 01           BNE :+                  ;  ~3 cycles   5
003AFFr 1  C8              INY
003B00r 1                 ;wai   disables the busy wait..
003B00r 1  AD rr rr     :  lda VSYNC_counter       ;  4  cyles    9
003B03r 1  F0 F7           beq :--                ;  3  cycles   ~12 cycles per count
003B05r 1  9C rr rr        STZ VSYNC_counter
003B08r 1  8E rr rr        STX STALL_COUNTER
003B0Br 1  8C rr rr        STY STALL_COUNTERH
003B0Er 1  AD rr rr        LDA MASTER_CLOCK
003B11r 1  1A              INC A
003B12r 1  18              CLC
003B13r 1  6D rr rr        ADC LAST_VSYNC_COUNTER
003B16r 1  8D rr rr        STA MASTER_CLOCK
003B19r 1  D0 03           BNE :+
003B1Br 1  EE rr rr        INC MASTER_CLOCK+1
003B1Er 1               :
003B1Er 1               ;   AND #1 ; restrict to 30 fps.. don't care missed cycle.
003B1Er 1               ;   BEQ :+
003B1Er 1               ;   JMP @WRITE_DEBUG
003B1Er 1                  ; poll keyboard for input
003B1Er 1               ; :
003B1Er 1  20 E4 FF        jsr GETIN
003B21r 1  C9 00           cmp #0
003B23r 1  D0 03           BNE :+
003B25r 1  4C rr rr        JMP @do_update
003B28r 1  C9 1D         : cmp #$1D 	;	cursor right
003B2Ar 1  D0 06           BNE :+
003B2Cr 1  EE rr rr        INC camera_facing
003B2Fr 1  4C rr rr        JMP @do_update
003B32r 1                  :
003B32r 1  C9 9D           cmp  #$9D 	;	cursor left
003B34r 1  D0 06           BNE :+
003B36r 1  CE rr rr        DEC camera_facing
003B39r 1  4C rr rr        JMP @do_update
003B3Cr 1  C9 11         : cmp #$11; cursor down
003B3Er 1  D0 2C           BNE :+
003B40r 1  AE rr rr        LDX camera_facing
003B43r 1  38              SEC
003B44r 1  AD rr rr        LDA camera_world_pos_XL
003B47r 1  FD rr rr        SBC MOVE_X_L,X
003B4Ar 1  8D rr rr        STA camera_world_pos_XL
003B4Dr 1  AD rr rr        LDA camera_world_pos_XH
003B50r 1  FD rr rr        SBC MOVE_X_H,X
003B53r 1  8D rr rr        STA camera_world_pos_XH
003B56r 1  18              CLC
003B57r 1  AD rr rr        LDA camera_world_pos_YL
003B5Ar 1  7D rr rr        ADC MOVE_Y_L,X
003B5Dr 1  8D rr rr        STA camera_world_pos_YL
003B60r 1  AD rr rr        LDA camera_world_pos_YH
003B63r 1  7D rr rr        ADC MOVE_Y_H,X
003B66r 1  8D rr rr        STA camera_world_pos_YH
003B69r 1  4C rr rr        jmp @camera_world_changed
003B6Cr 1               
003B6Cr 1  C9 91         : cmp #$91 ; cursor up
003B6Er 1  D0 2C           BNE :+
003B70r 1  AE rr rr        LDX camera_facing
003B73r 1  18              CLC
003B74r 1  AD rr rr        LDA camera_world_pos_XL
003B77r 1  7D rr rr        ADC MOVE_X_L,X
003B7Ar 1  8D rr rr        STA camera_world_pos_XL
003B7Dr 1  AD rr rr        LDa camera_world_pos_XH
003B80r 1  7D rr rr        ADC MOVE_X_H,X
003B83r 1  8D rr rr        STA camera_world_pos_XH
003B86r 1  38              SEC
003B87r 1  AD rr rr        LDA camera_world_pos_YL
003B8Ar 1  FD rr rr        SBC MOVE_Y_L,X
003B8Dr 1  8D rr rr        STA camera_world_pos_YL
003B90r 1  AD rr rr        LDA camera_world_pos_YH
003B93r 1  FD rr rr        SBC MOVE_Y_H,X
003B96r 1  8D rr rr        STA camera_world_pos_YH
003B99r 1  4C rr rr        jmp @camera_world_changed
003B9Cr 1               
003B9Cr 1  C9 45         : cmp  #E_CHAR ; cell up right
003B9Er 1  D0 15           BNE :+++
003BA0r 1  AD rr rr        LDA camera_cell_y
003BA3r 1  F0 03           BEQ :+
003BA5r 1  CE rr rr        DEC camera_cell_y
003BA8r 1  AD rr rr      : LDA camera_cell_x
003BABr 1  C9 3F           CMP #63
003BADr 1  B0 03           BCS :+
003BAFr 1  EE rr rr        INC camera_cell_x
003BB2r 1  4C rr rr      : JMP @camera_cell_changed
003BB5r 1               
003BB5r 1  C9 57         : cmp #W_CHAR ; cell up left
003BB7r 1  D0 0B           BNE :++
003BB9r 1  AD rr rr        LDA camera_cell_y
003BBCr 1  F0 03           BEQ :+
003BBEr 1  CE rr rr        DEC camera_cell_y
003BC1r 1  4C rr rr      : JMP @camera_cell_changed
003BC4r 1               
003BC4r 1  C9 41         : cmp #A_CHAR ; cell left
003BC6r 1  D0 0B           BNE :++
003BC8r 1  AD rr rr        LDA camera_cell_x
003BCBr 1  F0 03           BEQ :+
003BCDr 1  CE rr rr        DEC camera_cell_x
003BD0r 1  4C rr rr      : JMP @camera_cell_changed
003BD3r 1               
003BD3r 1  C9 44         : cmp #D_CHAR ; cell right
003BD5r 1  D0 0D           BNE :++
003BD7r 1  AD rr rr        LDA camera_cell_x
003BDAr 1  C9 3F           CMP #63
003BDCr 1  B0 03           BCS :+
003BDEr 1  EE rr rr        INC camera_cell_x
003BE1r 1  4C rr rr      : JMP @camera_cell_changed
003BE4r 1               
003BE4r 1  C9 58         : cmp #X_CHAR ; cell down right
003BE6r 1  D0 0D           BNE :++
003BE8r 1  AD rr rr        LDA camera_cell_y
003BEBr 1  C9 1E           CMP #30
003BEDr 1  B0 03           BCS :+
003BEFr 1  EE rr rr        INC camera_cell_y
003BF2r 1  4C rr rr      : JMP @camera_cell_changed
003BF5r 1               
003BF5r 1  C9 5A         : cmp  #Z_CHAR ; cell down left
003BF7r 1  D0 15           BNE :+++
003BF9r 1  AD rr rr        LDA camera_cell_y
003BFCr 1  C9 1E           CMP #30
003BFEr 1  B0 03           BCS :+
003C00r 1  EE rr rr        INC camera_cell_y
003C03r 1  AD rr rr      : LDA camera_cell_x
003C06r 1  F0 03           BEQ :+
003C08r 1  CE rr rr        DEC camera_cell_x
003C0Br 1  4C rr rr      : JMP @camera_cell_changed
003C0Er 1               
003C0Er 1  C9 20         : cmp #SPACE;
003C10r 1  D0 09           BNE :+
003C12r 1  9C rr rr        STZ camera_cell_xl
003C15r 1  9C rr rr        STZ camera_cell_yl
003C18r 1  4C rr rr        JMP @camera_cell_changed
003C1Br 1               
003C1Br 1  C9 49         : cmp #I_CHAR ; cell y - 1/16
003C1Dr 1  D0 25           BNE :++
003C1Fr 1  38              SEC
003C20r 1  AD rr rr        LDA camera_cell_yl
003C23r 1  E9 10           SBC #16
003C25r 1  8D rr rr        STA camera_cell_yl
003C28r 1  B0 17           BCS :+
003C2Ar 1  AD rr rr        LDA camera_cell_y
003C2Dr 1  F0 12           BEQ :+
003C2Fr 1  3A              DEC A
003C30r 1  8D rr rr        STA camera_cell_y
003C33r 1  18              CLC
003C34r 1  AD rr rr        LDA camera_cell_xl
003C37r 1  69 80           ADC #128
003C39r 1  8D rr rr        STA camera_cell_xl
003C3Cr 1  90 03           BCC :+
003C3Er 1  EE rr rr        INC camera_cell_x
003C41r 1  4C rr rr      : JMP @camera_cell_changed
003C44r 1               
003C44r 1  C9 4A         : cmp #J_CHAR ; cell x - 1/16
003C46r 1  D0 17           BNE :++
003C48r 1  38              SEC
003C49r 1  AD rr rr        LDA camera_cell_xl
003C4Cr 1  E9 10           SBC #16
003C4Er 1  8D rr rr        STA camera_cell_xl
003C51r 1  B0 09           BCS :+
003C53r 1  AD rr rr        LDA camera_cell_x
003C56r 1  F0 04           BEQ :+
003C58r 1  3A              DEC A
003C59r 1  8D rr rr        STA camera_cell_x
003C5Cr 1  4C rr rr      : JMP @camera_cell_changed
003C5Fr 1               
003C5Fr 1  C9 4B         : cmp #K_CHAR ; cell y + 1/16
003C61r 1  D0 27           BNE :++
003C63r 1  18              CLC
003C64r 1  AD rr rr        LDA camera_cell_yl
003C67r 1  69 10           ADC #16
003C69r 1  8D rr rr        STA camera_cell_yl
003C6Cr 1  90 19           BCC :+
003C6Er 1  AD rr rr        LDA camera_cell_y
003C71r 1  C9 1F           CMP #31
003C73r 1  B0 12           BCS :+
003C75r 1  1A              INC A
003C76r 1  8D rr rr        STA camera_cell_y
003C79r 1  38              SEC
003C7Ar 1  AD rr rr        LDA camera_cell_xl
003C7Dr 1  E9 80           SBC #128
003C7Fr 1  8D rr rr        STA camera_cell_xl
003C82r 1  B0 03           BCS :+
003C84r 1  CE rr rr        DEC camera_cell_x
003C87r 1  4C rr rr      : JMP @camera_cell_changed
003C8Ar 1               
003C8Ar 1  C9 4C         : cmp #L_CHAR ; cell x + 1/16
003C8Cr 1  D0 11           BNE :++
003C8Er 1  18              CLC
003C8Fr 1  AD rr rr        LDA camera_cell_xl
003C92r 1  69 10           ADC #16
003C94r 1  8D rr rr        STA camera_cell_xl
003C97r 1  90 03           BCC :+
003C99r 1  EE rr rr        INC camera_cell_x
003C9Cr 1  4C rr rr      : JMP @camera_cell_changed
003C9Fr 1               
003C9Fr 1  C9 31         : CMP #ONE_CHAR
003CA1r 1  D0 08           BNE :+
003CA3r 1  AD 29 9F        LDA VERA_dc_video
003CA6r 1  49 20           EOR #%00100000
003CA8r 1  8D 29 9F        STA VERA_dc_video
003CABr 1               
003CABr 1  C9 32         : CMP #TWO_CHAR
003CADr 1  D0 08           BNE :+
003CAFr 1  AD 29 9F        LDA VERA_dc_video
003CB2r 1  49 40           EOR #%01000000
003CB4r 1  8D 29 9F        STA VERA_dc_video
003CB7r 1               
003CB7r 1  C9 33         : CMP #THREE_CHAR
003CB9r 1  D0 08           BNE :+
003CBBr 1  AD 29 9F        LDA VERA_dc_video
003CBEr 1  49 10           EOR #%00010000
003CC0r 1  8D 29 9F        STA VERA_dc_video
003CC3r 1               
003CC3r 1  C9 30         : CMP #ZERO_CHAR
003CC5r 1  D0 1E           BNE :+++
003CC7r 1  AD 2A 9F        LDA VERA_dc_hscale
003CCAr 1  C9 2B           CMP #43
003CCCr 1  B0 04           BCS :+
003CCEr 1  A9 33           LDA #51
003CD0r 1  80 02           BRA :++
003CD2r 1  A9 20         : LDA #32
003CD4r 1  8D 2A 9F      : STA VERA_dc_hscale
003CD7r 1  8D 2B 9F        STA VERA_dc_vscale
003CDAr 1  AD 37 9F        LDA VERA_L1_HSCROLL_L
003CDDr 1  49 04           EOR #4
003CDFr 1  8D 37 9F        STA VERA_L1_HSCROLL_L
003CE2r 1  8D 39 9F        STA VERA_L1_VSCROLL_L
003CE5r 1               
003CE5r 1  4C rr rr      : JMP @do_update
003CE8r 1               
003CE8r 1               @cleanup_and_exit:
003CE8r 1                  ; restore default IRQ vector
003CE8r 1  78              sei
003CE9r 1  AD rr rr        lda default_irq_vector
003CECr 1  8D 14 03        sta IRQVec
003CEFr 1  AD rr rr        lda default_irq_vector+1
003CF2r 1  8D 15 03        sta IRQVec+1
003CF5r 1  58              cli
003CF6r 1  20 81 FF        jsr CINT
003CF9r 1  60              rts
003CFAr 1               
003CFAr 1               
003CFAr 1               ; CURRENT
003CFAr 1               push_world_to_object_list: ; as in.. let's try this again?? wait.. missing a STZ ZP_PTR...
003CFAr 1               PWOL_TUB_PTR_AL   = ZP_PTR
003CFAr 1               PWOL_TUB_PTR_AH   = ZP_PTR+1
003CFAr 1               PWOL_TUB_PTR_BL   = ZP_PTR+2
003CFAr 1               PWOL_TUB_PTR_BH   = ZP_PTR+3
003CFAr 1               PWOL_CURRENT_XL   = ZP_PTR+4
003CFAr 1               PWOL_CURRENT_XH   = ZP_PTR+5
003CFAr 1               PWOL_CURRENT_YL   = ZP_PTR+6
003CFAr 1               PWOL_CURRENT_YH   = ZP_PTR+7
003CFAr 1               PWOL_ACROSS_ROW_XL= ZP_PTR+8
003CFAr 1               PWOL_ACROSS_ROW_XH= ZP_PTR+9
003CFAr 1               PWOL_ACROSS_ROW_YL= ZP_PTR+10
003CFAr 1               PWOL_ACROSS_ROW_YH= ZP_PTR+11
003CFAr 1               PWOL_NEXT_ROW_A_LEFT_XL  = ZP_PTR+12
003CFAr 1               PWOL_NEXT_ROW_A_LEFT_XH  = ZP_PTR+13
003CFAr 1               PWOL_NEXT_ROW_A_LEFT_YL  = ZP_PTR+14
003CFAr 1               PWOL_NEXT_ROW_A_LEFT_YH  = ZP_PTR+15
003CFAr 1               PWOL_NEXT_ROW_A_RIGHT_XL  = ZP_PTR+16
003CFAr 1               PWOL_NEXT_ROW_A_RIGHT_XH  = ZP_PTR+17
003CFAr 1               PWOL_NEXT_ROW_A_RIGHT_YL  = ZP_PTR+18
003CFAr 1               PWOL_NEXT_ROW_A_RIGHT_YH  = ZP_PTR+19
003CFAr 1               PWOL_NEXT_ROW_B_LEFT_XL  = ZP_PTR+20
003CFAr 1               PWOL_NEXT_ROW_B_LEFT_XH  = ZP_PTR+21
003CFAr 1               PWOL_NEXT_ROW_B_LEFT_YL  = ZP_PTR+22
003CFAr 1               PWOL_NEXT_ROW_B_LEFT_YH  = ZP_PTR+23
003CFAr 1               PWOL_NEXT_ROW_B_RIGHT_XL  = ZP_PTR+24
003CFAr 1               PWOL_NEXT_ROW_B_RIGHT_XH  = ZP_PTR+25
003CFAr 1               PWOL_NEXT_ROW_B_RIGHT_YL  = ZP_PTR+26
003CFAr 1               PWOL_NEXT_ROW_B_RIGHT_YH  = ZP_PTR+27
003CFAr 1               PWOL_Z_STARTS_PTR = ZP_PTR+28
003CFAr 1               PWOL_Z_STARTS_PTRH = ZP_PTR+29
003CFAr 1               PWOL_CONVERT_HEIGHTS = ZP_PTR+30
003CFAr 1               PWOL_CONVERT_HEIGHTSH= ZP_PTR+31
003CFAr 1               PWOL_CONVERT_HEIGHTS_L = ZP_PTR+32
003CFAr 1               PWOL_CONVERT_HEIGHTS_LH = ZP_PTR+33
003CFAr 1               PWOL_TRIES_COUNTER = ZP_PTR+34
003CFAr 1               PWOL_START_XL = ZP_PTR+35
003CFAr 1               PWOL_START_YL = ZP_PTR+36
003CFAr 1               PWOL_START_XH = ZP_PTR+37
003CFAr 1               PWOL_START_YH = ZP_PTR+38
003CFAr 1               
003CFAr 1               PWOL_START_COS_XL = ZP_PTR+39
003CFAr 1               PWOL_START_COS_XH = ZP_PTR+40
003CFAr 1               PWOL_START_COS_YL = ZP_PTR+41
003CFAr 1               PWOL_START_COS_YH = ZP_PTR+42
003CFAr 1               PWOL_START_SIN_XL = ZP_PTR+43
003CFAr 1               PWOL_START_SIN_XH = ZP_PTR+44
003CFAr 1               PWOL_START_SIN_YL = ZP_PTR+45
003CFAr 1               PWOL_START_SIN_YH = ZP_PTR+46
003CFAr 1               
003CFAr 1               PWOL_camera_cell_xl = ZP_PTR+47
003CFAr 1               PWOL_camera_cell_yl = ZP_PTR+48
003CFAr 1               PWOL_CENTER_Y  =  ZP_PTR+49
003CFAr 1               PWOL_CENTER_Y_TOP     =  ZP_PTR+50
003CFAr 1               
003CFAr 1               PWOL_TOP_CHECK = ZP_PTR+51
003CFAr 1               PWOL_BOT_CHECK = ZP_PTR+52
003CFAr 1               
003CFAr 1               TRY_AGAIN = 6
003CFAr 1  AD rr rr        LDA camera_screen_out_top
003CFDr 1  85 55           STA PWOL_TOP_CHECK
003CFFr 1  AD rr rr        LDA camera_screen_out_bottom
003D02r 1  85 56           STA PWOL_BOT_CHECK
003D04r 1               
003D04r 1  AD rr rr        LDA CAMERA_CENTER_YH
003D07r 1  1A              INC A
003D08r 1  85 53           STA PWOL_CENTER_Y
003D0Ar 1  AD rr rr        LDA CAMERA_CENTER_TOP_PX
003D0Dr 1  18              CLC
003D0Er 1  69 0A           ADC #10
003D10r 1  85 54           STA PWOL_CENTER_Y_TOP
003D12r 1               
003D12r 1               
003D12r 1  A9 rr           LDA #>CONVERT_HEIGHTS_PIXELS
003D14r 1  85 41           STA PWOL_CONVERT_HEIGHTSH
003D16r 1  A9 rr           LDA #>CONVERT_HEIGHTS_PIXELS_L
003D18r 1  85 43           STA PWOL_CONVERT_HEIGHTS_LH
003D1Ar 1               
003D1Ar 1  A9 rr           LDA #>OBJECT_LIST_Z_START_POINTERS
003D1Cr 1  85 3F           STA PWOL_Z_STARTS_PTRH
003D1Er 1               
003D1Er 1  AE rr rr        LDX camera_facing
003D21r 1  BD rr rr        LDA ACROSS_ROW_X_L,x    ; 0900  16 wide , 45* tilt ... this is added to go up row, sub for down row
003D24r 1  85 2A           STA PWOL_ACROSS_ROW_XL
003D26r 1  BD rr rr        LDA ACROSS_ROW_X_H,x
003D29r 1  85 2B           STA PWOL_ACROSS_ROW_XH
003D2Br 1               
003D2Br 1  BD rr rr        LDA ACROSS_ROW_Y_L,x
003D2Er 1  85 2C           STA PWOL_ACROSS_ROW_YL
003D30r 1  BD rr rr        LDA ACROSS_ROW_Y_H,x
003D33r 1  85 2D           STA PWOL_ACROSS_ROW_YH
003D35r 1               
003D35r 1  18              CLC
003D36r 1  BD rr rr        LDA NEXT_ROW_X_L,X  ; 0D00 next row LEFT/up when added
003D39r 1  85 2E           STA PWOL_NEXT_ROW_A_LEFT_XL   ; -> next row is left, going up the screen ..  -1,-1
003D3Br 1  65 2A           ADC PWOL_ACROSS_ROW_XL   ; across row is for right , subtract to go left  +1 -> 0,1
003D3Dr 1  85 32           STA PWOL_NEXT_ROW_A_RIGHT_XL  ;  -> next row is right, going up the screen .. -1,-1
003D3Fr 1  BD rr rr        LDA NEXT_ROW_X_H,x
003D42r 1  85 2F           STA PWOL_NEXT_ROW_A_LEFT_XH
003D44r 1  65 2B           ADC PWOL_ACROSS_ROW_XH
003D46r 1  85 33           STA PWOL_NEXT_ROW_A_RIGHT_XH
003D48r 1               
003D48r 1  18              CLC
003D49r 1  BD rr rr        LDA NEXT_ROW_Y_L,X  ; 0F00 next row LEFT/up when added
003D4Cr 1  85 30           STA PWOL_NEXT_ROW_A_LEFT_YL   ; -> next row is left, going up the screen
003D4Er 1  65 2C           ADC PWOL_ACROSS_ROW_YL   ; across row is for right
003D50r 1  85 34           STA PWOL_NEXT_ROW_A_RIGHT_YL  ;  -> next row is right, going up the screen
003D52r 1  BD rr rr        LDA NEXT_ROW_Y_H,x
003D55r 1  85 31           STA PWOL_NEXT_ROW_A_LEFT_YH
003D57r 1  65 2D           ADC PWOL_ACROSS_ROW_YH
003D59r 1  85 35           STA PWOL_NEXT_ROW_A_RIGHT_YH
003D5Br 1               
003D5Br 1               
003D5Br 1               ; for zig B , the opposite of left/up is right/down.. so A_LEFT * -1 = B_RIGHT
003D5Br 1  38              SEC ; flip A_LEFT X to B_RIGHT X
003D5Cr 1  A9 00           LDA #0
003D5Er 1  E5 2E           SBC PWOL_NEXT_ROW_A_LEFT_XL
003D60r 1  85 3A           STA PWOL_NEXT_ROW_B_RIGHT_XL
003D62r 1  A9 00           LDA #0
003D64r 1  E5 2F           SBC PWOL_NEXT_ROW_A_LEFT_XH
003D66r 1  85 3B           STA PWOL_NEXT_ROW_B_RIGHT_XH
003D68r 1               
003D68r 1  38              SEC ; flip A_LEFT Y to B_RIGHT Y
003D69r 1  A9 00           LDA #0
003D6Br 1  E5 30           SBC PWOL_NEXT_ROW_A_LEFT_YL
003D6Dr 1  85 3C           STA PWOL_NEXT_ROW_B_RIGHT_YL
003D6Fr 1  A9 00           LDA #0
003D71r 1  E5 31           SBC PWOL_NEXT_ROW_A_LEFT_YH
003D73r 1  85 3D           STA PWOL_NEXT_ROW_B_RIGHT_YH
003D75r 1               
003D75r 1  38              SEC ; flip A_RIGHT X to B_LEFT X
003D76r 1  A9 00           LDA #0
003D78r 1  E5 32           SBC PWOL_NEXT_ROW_A_RIGHT_XL
003D7Ar 1  85 36           STA PWOL_NEXT_ROW_B_LEFT_XL
003D7Cr 1  A9 00           LDA #0
003D7Er 1  E5 33           SBC PWOL_NEXT_ROW_A_RIGHT_XH
003D80r 1  85 37           STA PWOL_NEXT_ROW_B_LEFT_XH
003D82r 1               
003D82r 1  38              SEC ; flip A_RIGHT Y to B_LEFT Y
003D83r 1  A9 00           LDA #0
003D85r 1  E5 34           SBC PWOL_NEXT_ROW_A_RIGHT_YL
003D87r 1  85 38           STA PWOL_NEXT_ROW_B_LEFT_YL
003D89r 1  A9 00           LDA #0
003D8Br 1  E5 35           SBC PWOL_NEXT_ROW_A_RIGHT_YH
003D8Dr 1  85 39           STA PWOL_NEXT_ROW_B_LEFT_YH
003D8Fr 1               
003D8Fr 1  AD rr rr        LDA CAMERA_CENTER_XL
003D92r 1  85 26            STA PWOL_CURRENT_XL
003D94r 1  85 45            STA PWOL_START_XL
003D96r 1               
003D96r 1  AD rr rr        LDA CAMERA_CENTER_YL
003D99r 1  85 28            STA PWOL_CURRENT_YL
003D9Br 1  85 46            STA PWOL_START_YL
003D9Dr 1               
003D9Dr 1  AD rr rr        LDA CAMERA_CENTER_XH
003DA0r 1  85 27            STA PWOL_CURRENT_XH
003DA2r 1  85 47            STA PWOL_START_XH
003DA4r 1               
003DA4r 1               
003DA4r 1  AD rr rr        LDA CAMERA_CENTER_YH
003DA7r 1  85 29            STA PWOL_CURRENT_YH
003DA9r 1  85 48            STA PWOL_START_YH
003DABr 1               
003DABr 1  AD rr rr         LDA CAMERA_CELL_LINE_PTR
003DAEr 1  85 22            STA PWOL_TUB_PTR_AL
003DB0r 1  85 24            STA PWOL_TUB_PTR_BL
003DB2r 1  AD rr rr         LDA CAMERA_CELL_LINE_PTR+1
003DB5r 1  85 23            STA PWOL_TUB_PTR_AH
003DB7r 1  85 25            STA PWOL_TUB_PTR_BH
003DB9r 1               
003DB9r 1  9C 25 9F         STZ VERA_ctrl
003DBCr 1  A9 40            LDA #<(VRAM_TEXT_SCREEN+17*64)
003DBEr 1  8D 20 9F         STA VERA_addr_low
003DC1r 1  A9 E8            LDA #>(VRAM_TEXT_SCREEN+17*64)
003DC3r 1  8D 21 9F         STA VERA_addr_high
003DC6r 1  A9 21            LDA #$21
003DC8r 1  8D 22 9F         STA VERA_addr_bank
003DCBr 1  A9 1A            LDA #26
003DCDr 1  8D 23 9F         STA VERA_data0
003DD0r 1               
003DD0r 1                 @zigzag_A: ; going to right and up the screen, including where we are currently..
003DD0r 1  AC rr rr         LDY camera_cell_x
003DD3r 1  80 00            BRA @zigzag_A_right
003DD5r 1                  @ZAR_OUT:
003DD5r 1               
003DD5r 1                   @zigzag_A_right:
003DD5r 1  C0 40                CPY #64  ;  make sure we don't go outside level..
003DD7r 1  B0 72                BCS @ZAR_NEXT ; if we're outside we'll just skip is OK here
003DD9r 1  B1 22                LDA (PWOL_TUB_PTR_AL),y
003DDBr 1  C9 81                CMP #129
003DDDr 1  B0 6C                BCS @ZAR_NEXT ; this isn't a valid spot in the level map..
003DDFr 1                       ; bytes 1 and 4 were updated when we cleared the object list
003DDFr 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
003DE2r 1  D0 04                BNE :++
003DE4r 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
003DE7r 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
003DE8r 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
003DEAr 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
003DEDr 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen... (could cause issues if we're high up? can't see behind?)
003DEFr 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
003DF1r 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
003DF3r 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
003DF6r 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
003DF9r 1  8A                   TXA ; push new next to the Z buffer spot
003DFAr 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
003DFCr 1                       ; bytes .1..4.6 filled in already..
003DFCr 1  B1 22                LDA (PWOL_TUB_PTR_AL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
003DFEr 1  10 08                BPL @ZAR_INSIDE_TUB
003E00r 1                     @ZAR_HIT_WALL_OUCH:
003E00r 1  AD rr rr               LDA WORLD_WALL_SPRITE_NUM
003E03r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
003E06r 1  A9 56                  LDA #86 ; max height..
003E08r 1                     @ZAR_INSIDE_TUB:
003E08r 1  85 40                  STA PWOL_CONVERT_HEIGHTS ;
003E0Ar 1  85 42                  STA PWOL_CONVERT_HEIGHTS_L;
003E0Cr 1  38                     SEC
003E0Dr 1  A5 28                  LDA PWOL_CURRENT_YL
003E0Fr 1  F2 42                  SBC (PWOL_CONVERT_HEIGHTS_L)
003E11r 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
003E13r 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
003E15r 1  C9 78                  CMP #SCREEN_OUT_BOTTOM    ;  are we even visible?
003E17r 1  90 0A                  BCC :+
003E19r 1  CE rr rr               DEC OBJECT_LIST_BYTE6_NEXT
003E1Cr 1  BD rr rr               LDA OBJECT_LIST_BYTE6_NEXT,X ; grab the old next value
003E1Fr 1  92 3E                  STA (PWOL_Z_STARTS_PTR) ; patch the old one back in..
003E21r 1  80 28                  BRA @ZAR_NEXT ; and skip THIS
003E23r 1  9D rr rr             : STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
003E26r 1  C5 54                  CMP PWOL_CENTER_Y_TOP ; is this above center on screen??
003E28r 1  B0 0E                  BCS :+ ; is not covering us
003E2Ar 1  A5 29                  LDA PWOL_CURRENT_YH
003E2Cr 1  C5 53                  CMP PWOL_CENTER_Y
003E2Er 1  90 08                  BCC :+ ; its from ahead of us, OK
003E30r 1                         ; it was from below and covers us ..
003E30r 1  BD rr rr               LDA OBJECT_LIST_BYTE0_ADDRLOW,X
003E33r 1  69 0F                  ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
003E35r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X
003E38r 1                         ;LDA #$D0
003E38r 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
003E38r 1  A5 27                : LDA PWOL_CURRENT_XH
003E3Ar 1                         ; for debugging ...
003E3Ar 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
003E3Dr 1  9C 23 9F               STZ VERA_data0
003E40r 1  8D 23 9F               STA VERA_data0
003E43r 1  A5 29                  LDA PWOL_CURRENT_YH
003E45r 1  8D 23 9F               STA VERA_data0
003E48r 1  9C 23 9F               STZ VERA_data0
003E4Br 1               
003E4Br 1                    @ZAR_NEXT:
003E4Br 1                        ; calc next to the right..
003E4Br 1  C8                    INY
003E4Cr 1  18                    CLC
003E4Dr 1  A5 26                 LDA PWOL_CURRENT_XL
003E4Fr 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
003E51r 1  85 26                 STA PWOL_CURRENT_XL
003E53r 1  A5 27                 LDA PWOL_CURRENT_XH
003E55r 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
003E57r 1  85 27                 STA PWOL_CURRENT_XH
003E59r 1  AA                    TAX
003E5Ar 1  18                    CLC
003E5Br 1  A5 28                 LDA PWOL_CURRENT_YL
003E5Dr 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
003E5Fr 1  85 28                 STA PWOL_CURRENT_YL
003E61r 1  A5 29                 LDA PWOL_CURRENT_YH
003E63r 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
003E65r 1  85 29                 STA PWOL_CURRENT_YH
003E67r 1               
003E67r 1  8E rr rr              STX DEBUG_A
003E6Ar 1  8D rr rr              STA DEBUG_B
003E6Dr 1               
003E6Dr 1  E0 9C                 CPX #SCREEN_OUT_RIGHT
003E6Fr 1  B0 0F                 BCS @ZAR_ZIG_LEFT_SWITCH
003E71r 1  E0 FB                 CPX #SCREEN_OUT_LEFT
003E73r 1  B0 0B                 BCS @ZAR_ZIG_LEFT_SWITCH
003E75r 1  C5 55                 CMP PWOL_TOP_CHECK
003E77r 1  90 07                 BCC @ZAR_ZIG_LEFT_SWITCH
003E79r 1  C5 56                 CMP PWOL_BOT_CHECK
003E7Br 1  B0 03                 BCS @ZAR_ZIG_LEFT_SWITCH
003E7Dr 1  4C rr rr              JMP @zigzag_A_right
003E80r 1                    @ZAR_ZIG_LEFT_SWITCH: ;PWOL_NEXT_ROW_A_LEFT_XL   ; -> next row is left, going up the screen ..  +0,-1
003E80r 1  A9 06                 LDA #TRY_AGAIN
003E82r 1  85 44                 STA PWOL_TRIES_COUNTER
003E84r 1               ;         INY
003E84r 1  38                    SEC
003E85r 1  A5 22                 LDA PWOL_TUB_PTR_AL
003E87r 1  E9 40                 SBC #64 ;   0,-1
003E89r 1  85 22                 STA PWOL_TUB_PTR_AL
003E8Br 1  A5 23                 LDA PWOL_TUB_PTR_AH
003E8Dr 1  E9 00                 SBC #0
003E8Fr 1  C9 rr                 CMP #>TUB_WORLD ; are we inside the world still?
003E91r 1  B0 03                 BCS :+
003E93r 1  4C rr rr              JMP @zigzag_B
003E96r 1  85 23               : STA PWOL_TUB_PTR_AH
003E98r 1               
003E98r 1  18                    CLC
003E99r 1  A5 26                 LDA PWOL_CURRENT_XL
003E9Br 1  65 2E                 ADC PWOL_NEXT_ROW_A_LEFT_XL
003E9Dr 1  85 26                 STA PWOL_CURRENT_XL
003E9Fr 1  A5 27                 LDA PWOL_CURRENT_XH
003EA1r 1  65 2F                 ADC PWOL_NEXT_ROW_A_LEFT_XH
003EA3r 1  85 27                 STA PWOL_CURRENT_XH
003EA5r 1  AA                    TAX
003EA6r 1  18                    CLC
003EA7r 1  A5 28                 LDA PWOL_CURRENT_YL
003EA9r 1  65 30                 ADC PWOL_NEXT_ROW_A_LEFT_YL
003EABr 1  85 28                 STA PWOL_CURRENT_YL
003EADr 1  A5 29                 LDA PWOL_CURRENT_YH
003EAFr 1  65 31                 ADC PWOL_NEXT_ROW_A_LEFT_YH
003EB1r 1  85 29                 STA PWOL_CURRENT_YH
003EB3r 1                        ; check if we're outside ..
003EB3r 1               
003EB3r 1  E0 9C                 CPX #SCREEN_OUT_RIGHT
003EB5r 1  B0 0C                 BCS @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
003EB7r 1  E0 FB                 CPX #SCREEN_OUT_LEFT
003EB9r 1  B0 08                 BCS @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
003EBBr 1  C9 F7                 CMP #SCREEN_OUT_TOP
003EBDr 1  90 04                 BCC @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
003EBFr 1  C9 78                 CMP #SCREEN_OUT_BOTTOM
003EC1r 1  80 33                 BRA @zigzag_A_left ; BCC @zigzag_A_left
003EC3r 1                  @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN:
003EC3r 1  C6 44                 DEC PWOL_TRIES_COUNTER
003EC5r 1  D0 03                 BNE @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT
003EC7r 1  4C rr rr              JMP @zigzag_B
003ECAr 1                  @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT:
003ECAr 1  88                    DEY
003ECBr 1  38                    SEC
003ECCr 1  A5 26                 LDA PWOL_CURRENT_XL
003ECEr 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
003ED0r 1  85 26                 STA PWOL_CURRENT_XL
003ED2r 1  A5 27                 LDA PWOL_CURRENT_XH
003ED4r 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
003ED6r 1  85 27                 STA PWOL_CURRENT_XH
003ED8r 1  AA                    TAX
003ED9r 1  38                    SEC
003EDAr 1  A5 28                 LDA PWOL_CURRENT_YL
003EDCr 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
003EDEr 1  85 28                 STA PWOL_CURRENT_YL
003EE0r 1  A5 29                 LDA PWOL_CURRENT_YH
003EE2r 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
003EE4r 1  85 29                 STA PWOL_CURRENT_YH
003EE6r 1  E0 9C                 CPX #SCREEN_OUT_RIGHT
003EE8r 1  B0 D9                 BCS @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
003EEAr 1  E0 FB                 CPX #SCREEN_OUT_LEFT
003EECr 1  B0 D5                 BCS @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
003EEEr 1  C9 F7                 CMP #SCREEN_OUT_TOP
003EF0r 1  90 D1                 BCC @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
003EF2r 1  C9 78                 CMP #SCREEN_OUT_BOTTOM
003EF4r 1  B0 CD                 BCS @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
003EF6r 1                  @zigzag_A_left:
003EF6r 1  C0 40                CPY #64  ;  make sure we don't go outside level..
003EF8r 1  B0 5C                BCS @ZAL_NEXT ; if we're outside we'll just skip is OK
003EFAr 1  B1 22                LDA (PWOL_TUB_PTR_AL),y
003EFCr 1  C9 81                CMP #129
003EFEr 1  B0 56                BCS @ZAL_NEXT ; we're outside level.
003F00r 1               
003F00r 1                       ; bytes 1 and 4 were updated when we cleared the object list
003F00r 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
003F03r 1  D0 04                BNE :++
003F05r 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
003F08r 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
003F09r 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
003F0Br 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
003F0Er 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen...
003F10r 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
003F12r 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
003F14r 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
003F17r 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
003F1Ar 1  8A                   TXA ; push new next to the Z buffer spot
003F1Br 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
003F1Dr 1                       ; bytes .1..4.6 filled in already..
003F1Dr 1  AD rr rr             LDA WORLD_SPRITE_NUM
003F20r 1  9D rr rr             STA OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway..
003F23r 1  B1 22                LDA (PWOL_TUB_PTR_AL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
003F25r 1  10 08                BPL @ZAL_INSIDE_TUB
003F27r 1                     @ZAL_HIT_WALL_OUCH:
003F27r 1  AD rr rr               LDA WORLD_WALL_SPRITE_NUM
003F2Ar 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
003F2Dr 1  A9 56                  LDA #86 ; max height..
003F2Fr 1                     @ZAL_INSIDE_TUB:
003F2Fr 1  85 40                  STA PWOL_CONVERT_HEIGHTS ;
003F31r 1  85 42                  STA PWOL_CONVERT_HEIGHTS_L;
003F33r 1  38                     SEC
003F34r 1  A5 28                  LDA PWOL_CURRENT_YL
003F36r 1  F2 42                  SBC (PWOL_CONVERT_HEIGHTS_L)
003F38r 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
003F3Ar 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
003F3Cr 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
003F3Fr 1  C5 54                  CMP PWOL_CENTER_Y_TOP ; is this above center on screen??
003F41r 1  B0 0E                  BCS :+ ; is not covering us
003F43r 1  A5 29                  LDA PWOL_CURRENT_YH
003F45r 1  C5 53                  CMP PWOL_CENTER_Y
003F47r 1  90 08                  BCC :+ ; its from ahead of us, OK
003F49r 1                         ; it was from below and covers us ..
003F49r 1  BD rr rr               LDA OBJECT_LIST_BYTE0_ADDRLOW,X
003F4Cr 1  69 0F                  ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
003F4Er 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X
003F51r 1                         ;LDA #$D0
003F51r 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
003F51r 1  A5 27                : LDA PWOL_CURRENT_XH
003F53r 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
003F56r 1                    @ZAL_NEXT:
003F56r 1                        ; calc next to the LEFT
003F56r 1  88                    DEY
003F57r 1  38                    SEC
003F58r 1  A5 26                 LDA PWOL_CURRENT_XL
003F5Ar 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
003F5Cr 1  85 26                 STA PWOL_CURRENT_XL
003F5Er 1  A5 27                 LDA PWOL_CURRENT_XH
003F60r 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
003F62r 1  85 27                 STA PWOL_CURRENT_XH
003F64r 1  AA                    TAX
003F65r 1  38                    SEC
003F66r 1  A5 28                 LDA PWOL_CURRENT_YL
003F68r 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
003F6Ar 1  85 28                 STA PWOL_CURRENT_YL
003F6Cr 1  A5 29                 LDA PWOL_CURRENT_YH
003F6Er 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
003F70r 1  85 29                 STA PWOL_CURRENT_YH
003F72r 1               
003F72r 1  8E rr rr              STX DEBUG_A
003F75r 1  8D rr rr              STA DEBUG_B
003F78r 1               
003F78r 1  E0 9C                 CPX #SCREEN_OUT_RIGHT
003F7Ar 1  B0 0F                 BCS @ZAL_ZIG_RIGHT_SWITCH
003F7Cr 1  E0 FB                 CPX #SCREEN_OUT_LEFT
003F7Er 1  B0 0B                 BCS @ZAL_ZIG_RIGHT_SWITCH
003F80r 1  C9 F7                 CMP #SCREEN_OUT_TOP
003F82r 1  90 07                 BCC @ZAL_ZIG_RIGHT_SWITCH
003F84r 1  C9 78                 CMP #SCREEN_OUT_BOTTOM
003F86r 1  B0 03                 BCS @ZAL_ZIG_RIGHT_SWITCH
003F88r 1  4C rr rr              JMP @zigzag_A_left
003F8Br 1                    @ZAL_ZIG_RIGHT_SWITCH: ; up/right is +1,+1  from where we is right now ..
003F8Br 1  A9 06                 LDA #TRY_AGAIN
003F8Dr 1  85 44                 STA PWOL_TRIES_COUNTER
003F8Fr 1  C8                    INY
003F90r 1  38                    SEC
003F91r 1  A5 22                 LDA PWOL_TUB_PTR_AL
003F93r 1  E9 40                 SBC #64
003F95r 1  85 22                 STA PWOL_TUB_PTR_AL
003F97r 1  A5 23                 LDA PWOL_TUB_PTR_AH
003F99r 1  E9 00                 SBC #0
003F9Br 1  C9 rr                 CMP #>TUB_WORLD ; are we inside the world still?
003F9Dr 1  B0 03                 BCS :+
003F9Fr 1  4C rr rr              JMP @zigzag_B
003FA2r 1  85 23               : STA PWOL_TUB_PTR_AH
003FA4r 1               
003FA4r 1               
003FA4r 1  18                    CLC
003FA5r 1               
003FA5r 1  A5 26                 LDA PWOL_CURRENT_XL
003FA7r 1  65 32                 ADC PWOL_NEXT_ROW_A_RIGHT_XL
003FA9r 1  85 26                 STA PWOL_CURRENT_XL
003FABr 1               
003FABr 1  A5 27                 LDA PWOL_CURRENT_XH
003FADr 1  65 33                 ADC PWOL_NEXT_ROW_A_RIGHT_XH
003FAFr 1  85 27                 STA PWOL_CURRENT_XH
003FB1r 1  AA                    TAX
003FB2r 1               
003FB2r 1               
003FB2r 1  18                    CLC
003FB3r 1  A5 28                 LDA PWOL_CURRENT_YL
003FB5r 1  65 34                 ADC PWOL_NEXT_ROW_A_RIGHT_YL
003FB7r 1  85 28                 STA PWOL_CURRENT_YL
003FB9r 1  A5 29                 LDA PWOL_CURRENT_YH
003FBBr 1  65 35                 ADC PWOL_NEXT_ROW_A_RIGHT_YH
003FBDr 1  85 29                 STA PWOL_CURRENT_YH
003FBFr 1               
003FBFr 1  E0 9C                 CPX #SCREEN_OUT_RIGHT
003FC1r 1  B0 0F                 BCS @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003FC3r 1  E0 FB                 CPX #SCREEN_OUT_LEFT
003FC5r 1  B0 0B                 BCS @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003FC7r 1  C9 F7                 CMP #SCREEN_OUT_TOP
003FC9r 1  90 07                 BCC @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003FCBr 1  C9 78                 CMP #SCREEN_OUT_BOTTOM
003FCDr 1  B0 03                 BCS @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003FCFr 1  4C rr rr              JMP @zigzag_A_right
003FD2r 1                  @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN:
003FD2r 1  C6 44                 DEC PWOL_TRIES_COUNTER
003FD4r 1  F0 2F                 BEQ @zigzag_B
003FD6r 1                  @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN_GO_RIGHT:
003FD6r 1  C8                    INY
003FD7r 1  18                    CLC
003FD8r 1  A5 26                 LDA PWOL_CURRENT_XL
003FDAr 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
003FDCr 1  85 26                 STA PWOL_CURRENT_XL
003FDEr 1  A5 27                 LDA PWOL_CURRENT_XH
003FE0r 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
003FE2r 1  85 27                 STA PWOL_CURRENT_XH
003FE4r 1  AA                    TAX
003FE5r 1  18                    CLC
003FE6r 1  A5 28                 LDA PWOL_CURRENT_YL
003FE8r 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
003FEAr 1  85 28                 STA PWOL_CURRENT_YL
003FECr 1  A5 29                 LDA PWOL_CURRENT_YH
003FEEr 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
003FF0r 1  85 29                 STA PWOL_CURRENT_YH
003FF2r 1               
003FF2r 1  E0 9C                 CPX #SCREEN_OUT_RIGHT
003FF4r 1  B0 DC                 BCS @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003FF6r 1  E0 FB                 CPX #SCREEN_OUT_LEFT
003FF8r 1  B0 D8                 BCS @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003FFAr 1  C9 F7                 CMP #SCREEN_OUT_TOP
003FFCr 1  90 D4                 BCC @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003FFEr 1  C9 78                 CMP #SCREEN_OUT_BOTTOM
004000r 1  B0 D0                 BCS @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
004002r 1  4C rr rr              JMP @zigzag_A_right
004005r 1               
004005r 1               
004005r 1               
004005r 1                 @zigzag_B: ; going to left and down the screen, including where we are currently..
004005r 1                    ; RTS
004005r 1  38                 SEC
004006r 1  A5 45              LDA PWOL_START_XL
004008r 1  E5 2A              SBC PWOL_ACROSS_ROW_XL
00400Ar 1  85 26              STA PWOL_CURRENT_XL
00400Cr 1  A5 47              LDA PWOL_START_XH
00400Er 1  E5 2B              SBC PWOL_ACROSS_ROW_XH
004010r 1  85 27              STA PWOL_CURRENT_XH
004012r 1               
004012r 1               
004012r 1  38                 SEC
004013r 1  A5 46              LDA PWOL_START_YL
004015r 1  E5 2C              SBC PWOL_ACROSS_ROW_YL
004017r 1  85 28              STA PWOL_CURRENT_YL
004019r 1  A5 48              LDA PWOL_START_YH
00401Br 1  E5 2D              SBC PWOL_ACROSS_ROW_YH
00401Dr 1  85 29              STA PWOL_CURRENT_YH
00401Fr 1               
00401Fr 1  AC rr rr           LDY camera_cell_x   ;  eh voila! we haz pointer to ze row to start on .. woot!
004022r 1  88                 DEY ; start left
004023r 1               
004023r 1                  @zigzag_B_left:
004023r 1  C0 40                CPY #64  ;  make sure we don't go outside level..
004025r 1  B0 5C                BCS @ZBL_NEXT ; if we're outside we'll just skip is OK
004027r 1  B1 24                LDA (PWOL_TUB_PTR_BL),y
004029r 1  C9 81                CMP #129
00402Br 1  B0 56                BCS @ZBL_NEXT ; we're outside level.
00402Dr 1               
00402Dr 1                       ; bytes 1 and 4 were updated when we cleared the object list
00402Dr 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
004030r 1  D0 04                BNE :++
004032r 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
004035r 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
004036r 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
004038r 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
00403Br 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen...
00403Dr 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
00403Fr 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
004041r 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
004044r 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
004047r 1  8A                   TXA ; push new next to the Z buffer spot
004048r 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
00404Ar 1                       ; bytes .1..4.6 filled in already..
00404Ar 1  AD rr rr             LDA WORLD_SPRITE_NUM
00404Dr 1  9D rr rr             STA OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway..
004050r 1  B1 24                LDA (PWOL_TUB_PTR_BL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
004052r 1  10 08                BPL @ZBL_INSIDE_TUB
004054r 1                     @ZBL_HIT_WALL_OUCH:
004054r 1  AD rr rr               LDA WORLD_WALL_SPRITE_NUM
004057r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
00405Ar 1  A9 56                  LDA #86 ; max height..
00405Cr 1                     @ZBL_INSIDE_TUB:
00405Cr 1  85 40                  STA PWOL_CONVERT_HEIGHTS ;
00405Er 1  85 42                  STA PWOL_CONVERT_HEIGHTS_L;
004060r 1  38                     SEC
004061r 1  A5 28                  LDA PWOL_CURRENT_YL
004063r 1  F2 42                  SBC (PWOL_CONVERT_HEIGHTS_L)
004065r 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
004067r 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
004069r 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
00406Cr 1  C5 54                  CMP PWOL_CENTER_Y_TOP ; is this above center on screen??
00406Er 1  B0 0E                  BCS :+ ; is not covering us
004070r 1  A5 29                  LDA PWOL_CURRENT_YH
004072r 1  C5 53                  CMP PWOL_CENTER_Y
004074r 1  90 08                  BCC :+ ; its from ahead of us, OK
004076r 1                         ; it was from below and covers us ..
004076r 1  BD rr rr               LDA OBJECT_LIST_BYTE0_ADDRLOW,X
004079r 1  69 0F                  ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
00407Br 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X
00407Er 1                         ;LDA #$D0
00407Er 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
00407Er 1  A5 27                : LDA PWOL_CURRENT_XH
004080r 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
004083r 1                    @ZBL_NEXT:
004083r 1                        ; calc next to the LEFT
004083r 1  88                    DEY
004084r 1  38                    SEC
004085r 1  A5 26                 LDA PWOL_CURRENT_XL
004087r 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
004089r 1  85 26                 STA PWOL_CURRENT_XL
00408Br 1  A5 27                 LDA PWOL_CURRENT_XH
00408Dr 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
00408Fr 1  85 27                 STA PWOL_CURRENT_XH
004091r 1  AA                    TAX
004092r 1  38                    SEC
004093r 1  A5 28                 LDA PWOL_CURRENT_YL
004095r 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
004097r 1  85 28                 STA PWOL_CURRENT_YL
004099r 1  A5 29                 LDA PWOL_CURRENT_YH
00409Br 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
00409Dr 1  85 29                 STA PWOL_CURRENT_YH
00409Fr 1               
00409Fr 1  8E rr rr              STX DEBUG_A
0040A2r 1  8D rr rr              STA DEBUG_B
0040A5r 1               
0040A5r 1  E0 9C                 CPX #SCREEN_OUT_RIGHT
0040A7r 1  B0 0F                 BCS @ZBL_ZIG_RIGHT_SWITCH
0040A9r 1  E0 FB                 CPX #SCREEN_OUT_LEFT
0040ABr 1  B0 0B                 BCS @ZBL_ZIG_RIGHT_SWITCH
0040ADr 1  C9 F7                 CMP #SCREEN_OUT_TOP
0040AFr 1  90 07                 BCC @ZBL_ZIG_RIGHT_SWITCH
0040B1r 1  C9 78                 CMP #SCREEN_OUT_BOTTOM
0040B3r 1  B0 03                 BCS @ZBL_ZIG_RIGHT_SWITCH
0040B5r 1  4C rr rr              JMP @zigzag_B_left
0040B8r 1                    @ZBL_ZIG_RIGHT_SWITCH: ; DOWN/LEFT to start right is is 0,+1  from where we is right now ..
0040B8r 1                        ;INY
0040B8r 1                        ;INY
0040B8r 1  A9 06                 LDA #TRY_AGAIN
0040BAr 1  85 44                 STA PWOL_TRIES_COUNTER
0040BCr 1  18                    CLC
0040BDr 1  A5 24                 LDA PWOL_TUB_PTR_BL
0040BFr 1  69 40                 ADC #64
0040C1r 1  85 24                 STA PWOL_TUB_PTR_BL
0040C3r 1  A5 25                 LDA PWOL_TUB_PTR_BH
0040C5r 1  69 00                 ADC #0
0040C7r 1  C9 rr                 CMP #>TUB_WORLD+8
0040C9r 1  90 01                 BCC :+
0040CBr 1  60                    rts
0040CCr 1  85 25               : STA PWOL_TUB_PTR_BH
0040CEr 1               
0040CEr 1               
0040CEr 1  18                    CLC
0040CFr 1               
0040CFr 1  A5 26                 LDA PWOL_CURRENT_XL
0040D1r 1  65 3A                 ADC PWOL_NEXT_ROW_B_RIGHT_XL
0040D3r 1  85 26                 STA PWOL_CURRENT_XL
0040D5r 1               
0040D5r 1  A5 27                 LDA PWOL_CURRENT_XH
0040D7r 1  65 3B                 ADC PWOL_NEXT_ROW_B_RIGHT_XH
0040D9r 1  85 27                 STA PWOL_CURRENT_XH
0040DBr 1  AA                    TAX
0040DCr 1               
0040DCr 1               
0040DCr 1  18                    CLC
0040DDr 1  A5 28                 LDA PWOL_CURRENT_YL
0040DFr 1  65 3C                 ADC PWOL_NEXT_ROW_B_RIGHT_YL
0040E1r 1  85 28                 STA PWOL_CURRENT_YL
0040E3r 1  A5 29                 LDA PWOL_CURRENT_YH
0040E5r 1  65 3D                 ADC PWOL_NEXT_ROW_B_RIGHT_YH
0040E7r 1  85 29                 STA PWOL_CURRENT_YH
0040E9r 1               
0040E9r 1  E0 9C                 CPX #SCREEN_OUT_RIGHT
0040EBr 1  B0 0F                 BCS @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
0040EDr 1  E0 FB                 CPX #SCREEN_OUT_LEFT
0040EFr 1  90 0B                 BCC @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
0040F1r 1  C9 F7                 CMP #SCREEN_OUT_TOP
0040F3r 1  90 07                 BCC @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
0040F5r 1  C9 78                 CMP #SCREEN_OUT_BOTTOM
0040F7r 1  B0 03                 BCS @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
0040F9r 1  4C rr rr              JMP @zigzag_B_right
0040FCr 1                  @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN:
0040FCr 1  C6 44                 DEC PWOL_TRIES_COUNTER
0040FEr 1  D0 0D                 BNE @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN_GO_RIGHT
004100r 1                  @ZBL_RTS:
004100r 1  9C 23 9F               STZ VERA_data0
004103r 1  9C 23 9F               STZ VERA_data0
004106r 1  9C 23 9F               STZ VERA_data0
004109r 1  9C 23 9F               STZ VERA_data0
00410Cr 1  60                 rts
00410Dr 1                  @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN_GO_RIGHT:
00410Dr 1  C8                    INY
00410Er 1  18                    CLC
00410Fr 1  A5 26                 LDA PWOL_CURRENT_XL
004111r 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
004113r 1  85 26                 STA PWOL_CURRENT_XL
004115r 1  A5 27                 LDA PWOL_CURRENT_XH
004117r 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
004119r 1  85 27                 STA PWOL_CURRENT_XH
00411Br 1  AA                    TAX
00411Cr 1  18                    CLC
00411Dr 1  A5 28                 LDA PWOL_CURRENT_YL
00411Fr 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
004121r 1  85 28                 STA PWOL_CURRENT_YL
004123r 1  A5 29                 LDA PWOL_CURRENT_YH
004125r 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
004127r 1  85 29                 STA PWOL_CURRENT_YH
004129r 1               
004129r 1  E0 9C                 CPX #SCREEN_OUT_RIGHT
00412Br 1  B0 CF                 BCS @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
00412Dr 1  E0 FB                 CPX #SCREEN_OUT_LEFT
00412Fr 1  B0 CB                 BCS @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
004131r 1  C9 F7                 CMP #SCREEN_OUT_TOP
004133r 1  90 C7                 BCC @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
004135r 1  C9 78                 CMP #SCREEN_OUT_BOTTOM
004137r 1  B0 C3                 BCS @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
004139r 1               
004139r 1                   @zigzag_B_right:
004139r 1  C0 40                CPY #64  ;  make sure we don't go outside level..
00413Br 1  B0 5C                BCS @ZBR_NEXT ; if we're outside we'll just skip is OK
00413Dr 1  B1 24                LDA (PWOL_TUB_PTR_BL),y
00413Fr 1  C9 81                CMP #129
004141r 1  B0 56                BCS @ZBR_NEXT ; we're outside level.
004143r 1               
004143r 1                       ; bytes 1 and 4 were updated when we cleared the object list
004143r 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
004146r 1  D0 04                BNE :++
004148r 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
00414Br 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
00414Cr 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
00414Er 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
004151r 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen...
004153r 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
004155r 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
004157r 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
00415Ar 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
00415Dr 1  8A                   TXA ; push new next to the Z buffer spot
00415Er 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
004160r 1                       ; bytes .1..4.6 filled in already..
004160r 1  AD rr rr             LDA WORLD_SPRITE_NUM
004163r 1  9D rr rr             STA OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway..
004166r 1  B1 24                LDA (PWOL_TUB_PTR_BL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
004168r 1  10 08                BPL @ZBR_INSIDE_TUB
00416Ar 1                     @ZBR_HIT_WALL_OUCH:
00416Ar 1  AD rr rr               LDA WORLD_WALL_SPRITE_NUM
00416Dr 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
004170r 1  A9 56                  LDA #86 ; max height..
004172r 1                     @ZBR_INSIDE_TUB:
004172r 1  85 40                  STA PWOL_CONVERT_HEIGHTS ;
004174r 1  85 42                  STA PWOL_CONVERT_HEIGHTS_L;
004176r 1  38                     SEC
004177r 1  A5 28                  LDA PWOL_CURRENT_YL
004179r 1  F2 42                  SBC (PWOL_CONVERT_HEIGHTS_L)
00417Br 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
00417Dr 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
00417Fr 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
004182r 1  C5 54                  CMP PWOL_CENTER_Y_TOP ; is this above center on screen??
004184r 1  B0 0E                  BCS :+ ; is not covering us
004186r 1  A5 29                  LDA PWOL_CURRENT_YH
004188r 1  C5 53                  CMP PWOL_CENTER_Y
00418Ar 1  90 08                  BCC :+ ; its from ahead of us, OK
00418Cr 1                         ; it was from below and covers us ..
00418Cr 1  BD rr rr               LDA OBJECT_LIST_BYTE0_ADDRLOW,X
00418Fr 1  69 0F                  ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
004191r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X
004194r 1                         ;LDA #$D0
004194r 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
004194r 1  A5 27                : LDA PWOL_CURRENT_XH
004196r 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
004199r 1                    @ZBR_NEXT:
004199r 1                        ; calc next to the right..
004199r 1  C8                    INY
00419Ar 1  18                    CLC
00419Br 1  A5 26                 LDA PWOL_CURRENT_XL
00419Dr 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
00419Fr 1  85 26                 STA PWOL_CURRENT_XL
0041A1r 1  A5 27                 LDA PWOL_CURRENT_XH
0041A3r 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
0041A5r 1  85 27                 STA PWOL_CURRENT_XH
0041A7r 1  AA                    TAX
0041A8r 1  18                    CLC
0041A9r 1  A5 28                 LDA PWOL_CURRENT_YL
0041ABr 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
0041ADr 1  85 28                 STA PWOL_CURRENT_YL
0041AFr 1  A5 29                 LDA PWOL_CURRENT_YH
0041B1r 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
0041B3r 1  85 29                 STA PWOL_CURRENT_YH
0041B5r 1               
0041B5r 1  8E rr rr              STX DEBUG_A
0041B8r 1  8D rr rr              STA DEBUG_B
0041BBr 1               
0041BBr 1  E0 9C                 CPX #SCREEN_OUT_RIGHT
0041BDr 1  B0 0F                 BCS @ZBR_ZIG_LEFT_SWITCH
0041BFr 1  E0 FB                 CPX #SCREEN_OUT_LEFT
0041C1r 1  90 0B                 BCC @ZBR_ZIG_LEFT_SWITCH
0041C3r 1  C9 F7                 CMP #SCREEN_OUT_TOP
0041C5r 1  90 07                 BCC @ZBR_ZIG_LEFT_SWITCH
0041C7r 1  C9 78                 CMP #SCREEN_OUT_BOTTOM
0041C9r 1  B0 03                 BCS @ZBR_ZIG_LEFT_SWITCH
0041CBr 1  4C rr rr              jmp @zigzag_B_right
0041CEr 1                    @ZBR_ZIG_LEFT_SWITCH: ;PWOL_NEXT_ROW_A_LEFT_XL   ; -> next row is left, going down the screen ..  +1,+1
0041CEr 1  A9 06                 LDA #TRY_AGAIN
0041D0r 1  85 44                 STA PWOL_TRIES_COUNTER
0041D2r 1  88                   DEY ; have to go this to match where the thing is going .. 0,0
0041D3r 1  18                    CLC
0041D4r 1  A5 24                 LDA PWOL_TUB_PTR_BL
0041D6r 1  69 40                 ADC #64 ;   0,-1
0041D8r 1  85 24                 STA PWOL_TUB_PTR_BL
0041DAr 1  A5 25                 LDA PWOL_TUB_PTR_BH
0041DCr 1  69 00                 ADC #0
0041DEr 1  C9 rr                 CMP #>TUB_WORLD+8
0041E0r 1  90 01                 BCC :+
0041E2r 1  60                    rts
0041E3r 1  85 25               : STA PWOL_TUB_PTR_BH
0041E5r 1               
0041E5r 1  18                    CLC
0041E6r 1  A5 26                 LDA PWOL_CURRENT_XL
0041E8r 1  65 36                 ADC PWOL_NEXT_ROW_B_LEFT_XL
0041EAr 1  85 26                 STA PWOL_CURRENT_XL
0041ECr 1  A5 27                 LDA PWOL_CURRENT_XH
0041EEr 1  65 37                 ADC PWOL_NEXT_ROW_B_LEFT_XH
0041F0r 1  85 27                 STA PWOL_CURRENT_XH
0041F2r 1  AA                    TAX
0041F3r 1  18                    CLC
0041F4r 1  A5 28                 LDA PWOL_CURRENT_YL
0041F6r 1  65 38                 ADC PWOL_NEXT_ROW_B_LEFT_YL
0041F8r 1  85 28                 STA PWOL_CURRENT_YL
0041FAr 1  A5 29                 LDA PWOL_CURRENT_YH
0041FCr 1  65 39                 ADC PWOL_NEXT_ROW_B_LEFT_YH
0041FEr 1  85 29                 STA PWOL_CURRENT_YH
004200r 1                        ; check if we're outside ..
004200r 1               
004200r 1  E0 9C                 CPX #SCREEN_OUT_RIGHT
004202r 1  B0 0F                 BCS @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
004204r 1  E0 FB                 CPX #SCREEN_OUT_LEFT
004206r 1  90 0B                 BCC @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
004208r 1  C9 F7                 CMP #SCREEN_OUT_TOP
00420Ar 1  90 07                 BCC @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
00420Cr 1  C9 78                 CMP #SCREEN_OUT_BOTTOM
00420Er 1  B0 03                 BCS @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
004210r 1  4C rr rr              jmp @zigzag_B_left
004213r 1                  @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN:
004213r 1  C6 44                 DEC PWOL_TRIES_COUNTER
004215r 1  D0 0D                 BNE @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT
004217r 1                  @ZBR_RTS:
004217r 1  9C 23 9F               STZ VERA_data0
00421Ar 1  9C 23 9F               STZ VERA_data0
00421Dr 1  9C 23 9F               STZ VERA_data0
004220r 1  9C 23 9F               STZ VERA_data0
004223r 1  60                    rts
004224r 1                  @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT:
004224r 1  88                    DEY
004225r 1  38                    SEC
004226r 1  A5 26                 LDA PWOL_CURRENT_XL
004228r 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
00422Ar 1  85 26                 STA PWOL_CURRENT_XL
00422Cr 1  A5 27                 LDA PWOL_CURRENT_XH
00422Er 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
004230r 1  85 27                 STA PWOL_CURRENT_XH
004232r 1  AA                    TAX
004233r 1  38                    SEC
004234r 1  A5 28                 LDA PWOL_CURRENT_YL
004236r 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
004238r 1  85 28                 STA PWOL_CURRENT_YL
00423Ar 1  A5 29                 LDA PWOL_CURRENT_YH
00423Cr 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
00423Er 1  85 29                 STA PWOL_CURRENT_YH
004240r 1  E0 9C                 CPX #SCREEN_OUT_RIGHT
004242r 1  B0 CF                 BCS @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
004244r 1  E0 FB                 CPX #SCREEN_OUT_LEFT
004246r 1  90 CB                 BCC @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
004248r 1  C9 F7                 CMP #SCREEN_OUT_TOP
00424Ar 1  90 C7                 BCC @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
00424Cr 1  C9 78                 CMP #SCREEN_OUT_BOTTOM
00424Er 1  B0 C3                 BCS @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
004250r 1  4C rr rr              JMP @zigzag_B_left
004253r 1               
004253r 1               draw_object_list:
004253r 1  AC rr rr         LDY NUM_AVAIL_SPRITES ; num sprites can write
004256r 1  D0 03            BNE :+
004258r 1  4C rr rr         JMP draw_object_list_to_BUFFER
00425Br 1                  :
00425Br 1  AD rr rr         LDA NUM_RESERVED_SPRITES
00425Er 1               ;    INC VERA_LOCK
00425Er 1               ;    BNE @unlock_vera   there's no actual way to get here and not have vera unlock.. s
00425Er 1               ;  so instead, we're going to DEC the VERA_LOCK after the new frame is ready, which is after this function..
00425Er 1               
00425Er 1               
00425Er 1  EE rr rr         INC DEBUG_D
004261r 1               
004261r 1  9C 25 9F         STZ VERA_ctrl
004264r 1  64 22            STZ ZP_PTR
004266r 1  0A               ASL
004267r 1  26 22            ROL ZP_PTR
004269r 1  0A               ASL
00426Ar 1  26 22            ROL ZP_PTR
00426Cr 1  0A               ASL
00426Dr 1  26 22            ROL ZP_PTR
00426Fr 1  8D 20 9F         STA VERA_addr_low
004272r 1  18               CLC
004273r 1  A5 22            LDA ZP_PTR
004275r 1  69 EC            ADC #>VRAM_SPRITE_BUF;  #>VRAM_SPRITE_BUF ; #>VRAM_sprite_attributes;
004277r 1  8D 21 9F         sta VERA_addr_high
00427Ar 1  A9 11            lda #$11
00427Cr 1  8D 22 9F         sta VERA_addr_bank
00427Fr 1  64 22            STZ ZP_PTR
004281r 1  A9 rr            LDA #>OBJECT_LIST_Z_START_POINTERS
004283r 1  85 23            STA ZP_PTR+1
004285r 1                 @NEXT_Z: ; Z=0 is invalid...
004285r 1  E6 22              INC ZP_PTR
004287r 1  D0 1C              BNE @Z_LOOP
004289r 1  AD 23 9F           : LDA VERA_data0
00428Cr 1  AD 23 9F             LDA VERA_data0
00428Fr 1  9C 23 9F             STZ VERA_data0
004292r 1  9C 23 9F             STZ VERA_data0
004295r 1  AD 23 9F             LDA VERA_data0
004298r 1  AD 23 9F             LDA VERA_data0
00429Br 1  AD 23 9F             LDA VERA_data0
00429Er 1  AD 23 9F             LDA VERA_data0
0042A1r 1  88                   DEY
0042A2r 1  D0 E5                BNE :-
0042A4r 1                  @rts:
0042A4r 1  60                 rts
0042A5r 1                 @Z_LOOP:
0042A5r 1  B2 22              LDA (ZP_PTR) ; get our first victim
0042A7r 1  AA                 TAX
0042A8r 1  A9 00              LDA #0
0042AAr 1  92 22              STA (ZP_PTR) ; zero this Z_next for now
0042ACr 1  8A                 TXA
0042ADr 1                    @OBJ_LOOP:
0042ADr 1  AA                    TAX
0042AEr 1  F0 D5                 BEQ @NEXT_Z ; got a bum next pointer there ...
0042B0r 1  BD rr rr              LDA OBJECT_LIST_BYTE0_ADDRLOW,X
0042B3r 1  8D 23 9F              STA VERA_data0
0042B6r 1  BD rr rr              LDA OBJECT_LIST_BYTE1_MODE,x
0042B9r 1  8D 23 9F              STA VERA_data0
0042BCr 1  BD rr rr              LDA OBJECT_LIST_BYTE2_X,x
0042BFr 1  8D 23 9F              STA VERA_data0
0042C2r 1               ;         CMP #216
0042C2r 1                 ;       LDA #0
0042C2r 1                ;        BCC :+
0042C2r 1                ;        LDA #$FF
0042C2r 1                 ;     : STA VERA_data0
0042C2r 1  9C 23 9F              STZ VERA_data0
0042C5r 1  BD rr rr              LDA OBJECT_LIST_BYTE3_Y,x
0042C8r 1  8D 23 9F              STA VERA_data0
0042CBr 1               ;         CMP #161
0042CBr 1                ;        LDA #0
0042CBr 1                 ;       BCC :+
0042CBr 1                  ;      LDA #$FF
0042CBr 1                   ;   : STA VERA_data0
0042CBr 1  9C 23 9F              STZ VERA_data0
0042CEr 1  BD rr rr              LDA OBJECT_LIST_BYTE4_ZFLIPS,x
0042D1r 1  8D 23 9F              STA VERA_data0
0042D4r 1  BD rr rr              LDA OBJECT_LIST_BYTE5_SIZE,x
0042D7r 1  8D 23 9F              STA VERA_data0
0042DAr 1  BD rr rr              LDA OBJECT_LIST_BYTE6_NEXT,x
0042DDr 1  88                    DEY ; decrement that Y
0042DEr 1  D0 CD                 BNE @OBJ_LOOP ; still sprite slots left.. woot!
0042E0r 1  92 22                 STA (ZP_PTR) ; oops.. save that last thing and exit..
0042E2r 1               draw_object_list_to_BUFFER:
0042E2r 1  60                 RTS
0042E3r 1               
0042E3r 1  AD rr rr        LDA CURRENT_BITMAP_BUFFER
0042E6r 1  F0 04           BEQ :+
0042E8r 1  A9 18           LDA #>VRAM_BITMAP_LAYERA
0042EAr 1  80 02           BRA :++
0042ECr 1  A9 80         : LDA #>VRAM_BITMAP_LAYERB
0042EEr 1  85 7F         : STA $7F
0042F0r 1  64 22           STZ ZP_PTR
0042F2r 1                 @NEXT_Z: ; Z=0 is invalid...
0042F2r 1  C6 22              DEC ZP_PTR
0042F4r 1  D0 01              BNE @Z_LOOP
0042F6r 1  60                 RTS
0042F7r 1                 @Z_LOOP:
0042F7r 1  B2 22              LDA (ZP_PTR) ; get our first victim
0042F9r 1  F0 F7              BEQ @NEXT_Z
0042FBr 1  AA                 TAX
0042FCr 1  A9 00              LDA #0
0042FEr 1  92 22              STA (ZP_PTR) ; zero this Z_next for now
004300r 1  8A                 TXA
004301r 1                    @OBJ_LOOP:
004301r 1  AA                    TAX
004302r 1  F0 EE                 BEQ @NEXT_Z ; got a bum next pointer there ...
004304r 1  A9 08                 LDA #8
004306r 1  85 25                 STA ZP_PTR+3 ; BANK bit for source
004308r 1  AD rr rr              LDA OBJECT_LIST_BYTE1_MODE
00430Br 1  85 24                 STA ZP_PTR+2 ; high mem for source
00430Dr 1  BD rr rr              LDA OBJECT_LIST_BYTE0_ADDRLOW,X ; 12:5
004310r 1  0A                    ASL ; 11:4
004311r 1  26 24                 ROL ZP_PTR+2
004313r 1  0A                    ASL ; 10:3
004314r 1  26 24                 ROL ZP_PTR+2
004316r 1  0A                    ASL ; 9:2
004317r 1  26 24                 ROL ZP_PTR+2
004319r 1  0A                    ASL ; 8:1
00431Ar 1  26 24                 ROL ZP_PTR+2
00431Cr 1  0A                    ASL ; 7:0 -> low
00431Dr 1  26 24                 ROL ZP_PTR+2 ; high
00431Fr 1  26 25                 ROL ZP_PTR+3 ; bank
004321r 1  8D 20 9F              STA VERA_addr_low
004324r 1  A5 24                 LDA ZP_PTR+2
004326r 1  8D 21 9F              STA VERA_addr_high
004329r 1  A5 25                 LDA ZP_PTR+3
00432Br 1  8D 22 9F              STA VERA_addr_bank
00432Er 1  A9 01                 LDA #1
004330r 1  8D 25 9F              STA VERA_ctrl
004333r 1  BC rr rr              LDY OBJECT_LIST_BYTE3_Y,X
004336r 1  C0 A0                 CPY #160
004338r 1  B0 B8                 BCS @NEXT_Z
00433Ar 1  18                    CLC
00433Br 1  B9 rr rr              LDA BITMAP_OFFSETS_LOW,Y
00433Er 1  7D rr rr              ADC OBJECT_LIST_BYTE2_X,X
004341r 1  8D 20 9F              STA VERA_addr_low
004344r 1  BD rr rr              LDA BITMAP_OFFSETS_HIGH,X
004347r 1  65 7F                 ADC $7F
004349r 1  8D 21 9F              STA VERA_addr_high
00434Cr 1  A9 11                 LDA #$11
00434Er 1  8D 22 9F              STA VERA_addr_bank
004351r 1  A0 01                 LDY #1
004353r 1  AD 23 9F            : LDA VERA_data0 ; 1
004356r 1  8D 24 9F              STA VERA_data1
004359r 1  AD 23 9F              LDA VERA_data0 ; 2
00435Cr 1  8D 24 9F              STA VERA_data1
00435Fr 1  AD 23 9F              LDA VERA_data0 ; 3
004362r 1  8D 24 9F              STA VERA_data1
004365r 1  AD 23 9F              LDA VERA_data0 ; 4
004368r 1  8D 24 9F              STA VERA_data1
00436Br 1  AD 23 9F              LDA VERA_data0 ; 5
00436Er 1  8D 24 9F              STA VERA_data1
004371r 1  AD 23 9F              LDA VERA_data0 ; 6
004374r 1  8D 24 9F              STA VERA_data1
004377r 1  AD 23 9F              LDA VERA_data0 ; 7
00437Ar 1  8D 24 9F              STA VERA_data1
00437Dr 1  AD 23 9F              LDA VERA_data0 ; 8
004380r 1  8D 24 9F              STA VERA_data1
004383r 1  AD 20 9F              LDA VERA_addr_low
004386r 1  18                    CLC
004387r 1  69 98                 ADC #152
004389r 1  8D 20 9F              STA VERA_addr_low
00438Cr 1  90 03                 BCC :+
00438Er 1  EE 21 9F              INC VERA_addr_high
004391r 1  88                  : DEY
004392r 1  D0 BF                 BNE :--
004394r 1  9C 25 9F              STZ VERA_ctrl
004397r 1  BD rr rr              LDA OBJECT_LIST_BYTE6_NEXT,x
00439Ar 1  4C rr rr              JMP @OBJ_LOOP
00439Dr 1               
00439Dr 1               test_optimal_pal_data:
00439Dr 1               ;      GB   R  $1:FA00-$1:FBFF   VERA Color Palette (256 x 2 bytes)
00439Dr 1  00 00        .byte $00,$00  ; 0 - black/transparent
00439Fr 1  C8 0F        .byte $c8,$0f  ; 1 #ffcc88
0043A1r 1               
0043A1r 1  04 06        .byte $04,$06  ; 2 #660044
0043A3r 1  00 0C        .byte $00,$0C  ; 3  #cc0000
0043A5r 1  F0 0C        .byte $F0,$0C  ; 4#ccff00
0043A7r 1  42 03        .byte $42,$03
0043A9r 1  60 0C        .byte $60,$0c   ; 6  #cc6600
0043ABr 1  40 08        .byte $40,$08   ; 7 #884400
0043ADr 1  C0 0C        .byte $c0,$0c   ; 8 #cccc00
0043AFr 1  6A 02        .byte $6a,$02   ; 9 #2266aa mid blue
0043B1r 1  C0 00        .byte $c0,$00   ; A #00cc00
0043B3r 1  AC 07        .byte $ac,$07   ; B #77aacc light blue
0043B5r 1  C0 00        .byte $c0,$00   ; C #0000c0 dark blue
0043B7r 1  0C 0C        .byte $0c,$0c   ; D #cc00cc
0043B9r 1  88 08        .byte $88,$08   ; E #888888
0043BBr 1  22 02        .byte $22,$02   ; F #222222
0043BDr 1               
0043BDr 1               test_vram_data:
0043BDr 1               ; 70 to 127 - start of 16x16 (each 128 byte) for testing directions / sizing..
0043BDr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11  ;  0-15 16x10 -  0
0043C1r 1  11 11 11 11  
0043C5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
0043C9r 1  FF FF FF F1  
0043CDr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0043D1r 1  FF FF FF F1  
0043D5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0043D9r 1  FF FF FF F1  
0043DDr 1  1F FF FF F1  .byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$F1
0043E1r 1  FF FF FF F1  
0043E5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0043E9r 1  FF FF FF F1  
0043EDr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0043F1r 1  FF FF FF F1  
0043F5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0043F9r 1  FF FF FF F1  
0043FDr 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
004401r 1  FF FF FF F1  
004405r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11
004409r 1  11 11 11 11  
00440Dr 1  55 55 55 55  .repeat 54
004411r 1  55 55 55 55  
004415r 1  55 55 55 55  
0045BDr 1               .res 8,$55
0045BDr 1               .endrepeat
0045BDr 1               
0045BDr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11  ;  16-31    16x10 -  0 trans
0045C1r 1  11 11 11 11  
0045C5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0045C9r 1  F0 F0 F0 F1  
0045CDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
0045D1r 1  0F 0F 0F 01  
0045D5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0045D9r 1  F0 F0 F0 F1  
0045DDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
0045E1r 1  0F 0F 0F 01  
0045E5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0045E9r 1  F0 F0 F0 F1  
0045EDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
0045F1r 1  0F 0F 0F 01  
0045F5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0045F9r 1  F0 F0 F0 F1  
0045FDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
004601r 1  0F 0F 0F 01  
004605r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11
004609r 1  11 11 11 11  
00460Dr 1  50 50 50 50  .repeat 27
004611r 1  50 50 50 50  
004615r 1  05 05 05 05  
0047BDr 1               .res 8,$50
0047BDr 1               .res 8,$05
0047BDr 1               .endrepeat
0047BDr 1               
0047BDr 1               
0047BDr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11  ;  32-47    16x11 -  4
0047C1r 1  11 11 11 11  
0047C5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
0047C9r 1  FF FF FF F1  
0047CDr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0047D1r 1  FF FF FF F1  
0047D5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0047D9r 1  FF FF FF F1  
0047DDr 1  1F FF FF F1  .byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$F1
0047E1r 1  FF FF FF F1  
0047E5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0047E9r 1  FF FF FF F1  
0047EDr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0047F1r 1  FF FF FF F1  
0047F5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0047F9r 1  FF FF FF F1  
0047FDr 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
004801r 1  FF FF FF F1  
004805r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
004809r 1  FF FF FF F1  
00480Dr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11
004811r 1  11 11 11 11  
004815r 1  55 55 55 55  .repeat 53
004819r 1  55 55 55 55  
00481Dr 1  55 55 55 55  
0049BDr 1               .res 8,$55
0049BDr 1               .endrepeat
0049BDr 1               
0049BDr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11  ;  48-63    16x11 -  4 trans
0049C1r 1  11 11 11 11  
0049C5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0049C9r 1  F0 F0 F0 F1  
0049CDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
0049D1r 1  0F 0F 0F 01  
0049D5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0049D9r 1  F0 F0 F0 F1  
0049DDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
0049E1r 1  0F 0F 0F 01  
0049E5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0049E9r 1  F0 F0 F0 F1  
0049EDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
0049F1r 1  0F 0F 0F 01  
0049F5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0049F9r 1  F0 F0 F0 F1  
0049FDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
004A01r 1  0F 0F 0F 01  
004A05r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
004A09r 1  F0 F0 F0 F1  
004A0Dr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11
004A11r 1  11 11 11 11  
004A15r 1  05 05 05 05  .res 7,$05
004A19r 1  05 05 05     
004A1Cr 1  00           .byte 0
004A1Dr 1  50 50 50 50  .repeat 26
004A21r 1  50 50 50 50  
004A25r 1  05 05 05 05  
004BBDr 1               .res 8,$50
004BBDr 1               .res 7,$05
004BBDr 1               .byte 0
004BBDr 1               .endrepeat
004BBDr 1               
004BBDr 1               
004BBDr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10  ;  64-79    15x11 - 10
004BC1r 1  11 11 11 10  
004BC5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
004BC9r 1  FF FF FF 10  
004BCDr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
004BD1r 1  FF FF FF 10  
004BD5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
004BD9r 1  FF FF FF 10  
004BDDr 1  1F FF FF F1  .byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$10
004BE1r 1  FF FF FF 10  
004BE5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
004BE9r 1  FF FF FF 10  
004BEDr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
004BF1r 1  FF FF FF 10  
004BF5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
004BF9r 1  FF FF FF 10  
004BFDr 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
004C01r 1  FF FF FF 10  
004C05r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
004C09r 1  FF FF FF 10  
004C0Dr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
004C11r 1  11 11 11 10  
004C15r 1  55 55 55 55  .repeat 53
004C19r 1  55 55 55 50  
004C1Dr 1  55 55 55 55  
004DBDr 1               .res 7,$55
004DBDr 1               .byte $50
004DBDr 1               .endrepeat
004DBDr 1               
004DBDr 1               
004DBDr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10  ;  80-95    15x11 - 10 trans
004DC1r 1  11 11 11 10  
004DC5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
004DC9r 1  F0 F0 F0 10  
004DCDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
004DD1r 1  0F 0F 0F 10  
004DD5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
004DD9r 1  F0 F0 F0 10  
004DDDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
004DE1r 1  0F 0F 0F 10  
004DE5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
004DE9r 1  F0 F0 F0 10  
004DEDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
004DF1r 1  0F 0F 0F 10  
004DF5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
004DF9r 1  F0 F0 F0 10  
004DFDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
004E01r 1  0F 0F 0F 10  
004E05r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
004E09r 1  F0 F0 F0 10  
004E0Dr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
004E11r 1  11 11 11 10  
004E15r 1  05 05 05 05  .res 7,$05
004E19r 1  05 05 05     
004E1Cr 1  00           .byte 0
004E1Dr 1  50 50 50 50  .repeat 26
004E21r 1  50 50 50 50  
004E25r 1  05 05 05 05  
004FBDr 1               .res 8,$50
004FBDr 1               .res 7,$05
004FBDr 1               .byte 0
004FBDr 1               .endrepeat
004FBDr 1               
004FBDr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10  ;  96-111    15x12 - 18
004FC1r 1  11 11 11 10  
004FC5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
004FC9r 1  FF FF FF 10  
004FCDr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
004FD1r 1  FF FF FF 10  
004FD5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
004FD9r 1  FF FF FF 10  
004FDDr 1  1F FF FF F1  .byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$10
004FE1r 1  FF FF FF 10  
004FE5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
004FE9r 1  FF FF FF 10  
004FEDr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
004FF1r 1  FF FF FF 10  
004FF5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
004FF9r 1  FF FF FF 10  
004FFDr 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
005001r 1  FF FF FF 10  
005005r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
005009r 1  FF FF FF 10  
00500Dr 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
005011r 1  FF FF FF 10  
005015r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
005019r 1  11 11 11 10  
00501Dr 1  55 55 55 55  .repeat 52
005021r 1  55 55 55 50  
005025r 1  55 55 55 55  
0051BDr 1               .res 7,$55
0051BDr 1               .byte $50
0051BDr 1               .endrepeat
0051BDr 1               
0051BDr 1               
0051BDr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10  ;  112-127    15x12 - 18 trans
0051C1r 1  11 11 11 10  
0051C5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0051C9r 1  F0 F0 F0 10  
0051CDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0051D1r 1  0F 0F 0F 10  
0051D5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0051D9r 1  F0 F0 F0 10  
0051DDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0051E1r 1  0F 0F 0F 10  
0051E5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0051E9r 1  F0 F0 F0 10  
0051EDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0051F1r 1  0F 0F 0F 10  
0051F5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0051F9r 1  F0 F0 F0 10  
0051FDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
005201r 1  0F 0F 0F 10  
005205r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
005209r 1  F0 F0 F0 10  
00520Dr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
005211r 1  0F 0F 0F 10  
005215r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
005219r 1  11 11 11 10  
00521Dr 1  50 50 50 50  .repeat 26
005221r 1  50 50 50 50  
005225r 1  05 05 05 05  
0053BDr 1               .res 8,$50
0053BDr 1               .res 7,$05
0053BDr 1               .byte 0
0053BDr 1               .endrepeat
0053BDr 1               
0053BDr 1               ; alernate tile graphic to use for tub wall .. 128-143 ; 16x tile
0053BDr 1  16 16 16 16  .repeat 32
0053C1r 1  16 16 16 16  
0053C5r 1  61 61 61 61  
0055BDr 1                   .byte $16, $16, $16, $16, $16, $16, $16, $16
0055BDr 1                   .byte $61, $61, $61, $61, $61, $61, $61, $61
0055BDr 1               .endrepeat
0055BDr 1               
0055BDr 1  10 10 10 10  .repeat 32  ;  144-159
0055C1r 1  10 10 10 10  
0055C5r 1  06 06 06 06  
0057BDr 1                   .byte $10, $10, $10, $10, $10, $10, $10, $10
0057BDr 1                   .byte $06, $06, $06, $06, $06, $06, $06, $06
0057BDr 1               .endrepeat
0057BDr 1               
0057BDr 1               
0057BDr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$00  ;  160-175    14x12
0057C1r 1  11 11 11 00  
0057C5r 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$fF,$FF,$F1,$00
0057C9r 1  FF FF F1 00  
0057CDr 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$fF,$FF,$F1,$00
0057D1r 1  FF FF F1 00  
0057D5r 1  1F FF FF FF  .byte $1f,$FF,$ff,$Ff,$Ff,$fF,$F1,$00
0057D9r 1  FF FF F1 00  
0057DDr 1  1F FF FF F1  .byte $1f,$FF,$FF,$f1,$fF,$FF,$F1,$00
0057E1r 1  FF FF F1 00  
0057E5r 1  1F FF FF FF  .byte $1f,$FF,$FF,$Ff,$Ff,$fF,$F1,$00
0057E9r 1  FF FF F1 00  
0057EDr 1  1F FF FF FF  .byte $1f,$FF,$FF,$fF,$FF,$FF,$F1,$00
0057F1r 1  FF FF F1 00  
0057F5r 1  1F FF FF FF  .byte $1f,$FF,$FF,$fF,$FF,$FF,$F1,$00
0057F9r 1  FF FF F1 00  
0057FDr 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$FF,$FF,$F1,$00
005801r 1  FF FF F1 00  
005805r 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$FF,$FF,$F1,$00
005809r 1  FF FF F1 00  
00580Dr 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$FF,$FF,$F1,$00
005811r 1  FF FF F1 00  
005815r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$00
005819r 1  11 11 11 00  
00581Dr 1  55 55 55 55  .repeat 52
005821r 1  55 55 55 00  
005825r 1  55 55 55 55  
0059BDr 1               .res 7,$55
0059BDr 1               .byte 0
0059BDr 1               .endrepeat
0059BDr 1               
0059BDr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$00  ;  176-191
0059C1r 1  11 11 11 00  
0059C5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0059C9r 1  F0 F0 F0 10  
0059CDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0059D1r 1  0F 0F 0F 10  
0059D5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0059D9r 1  F0 F0 F0 10  
0059DDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0059E1r 1  0F 0F 0F 10  
0059E5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0059E9r 1  F0 F0 F0 10  
0059EDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0059F1r 1  0F 0F 0F 10  
0059F5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0059F9r 1  F0 F0 F0 10  
0059FDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
005A01r 1  0F 0F 0F 10  
005A05r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
005A09r 1  F0 F0 F0 10  
005A0Dr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
005A11r 1  0F 0F 0F 10  
005A15r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
005A19r 1  11 11 11 10  
005A1Dr 1  50 50 50 50  .repeat 26
005A21r 1  50 50 50 50  
005A25r 1  05 05 05 05  
005BBDr 1               .res 8,$50
005BBDr 1               .res 7,$05
005BBDr 1               .byte 0
005BBDr 1               .endrepeat
005BBDr 1               
005BBDr 1               ; alernate tile graphic to use for tub wall .. 192-223 ; 15x tile
005BBDr 1  16 16 16 16  .repeat 32
005BC1r 1  16 16 16 10  
005BC5r 1  61 61 61 61  
005DBDr 1                   .byte $16, $16, $16, $16, $16, $16, $16, $10
005DBDr 1                   .byte $61, $61, $61, $61, $61, $61, $61, $60
005DBDr 1               .endrepeat
005DBDr 1               
005DBDr 1  10 10 10 10  .repeat 32  ;  144-159
005DC1r 1  10 10 10 10  
005DC5r 1  06 06 06 06  
005FBDr 1                   .byte $10, $10, $10, $10, $10, $10, $10, $10
005FBDr 1                   .byte $06, $06, $06, $06, $06, $06, $06, $00
005FBDr 1               .endrepeat
005FBDr 1               
005FBDr 1               
005FBDr 1               ; alernate tile graphic to use for tub wall .. 224 ; 14x tile
005FBDr 1  16 16 16 16  .repeat 32
005FC1r 1  16 16 16 00  
005FC5r 1  61 61 61 61  
0061BDr 1                   .byte $16, $16, $16, $16, $16, $16, $16, $00
0061BDr 1                   .byte $61, $61, $61, $61, $61, $61, $61, $00
0061BDr 1               .endrepeat
0061BDr 1               
0061BDr 1  10 10 10 10  .repeat 32  ;  144-159
0061C1r 1  10 10 10 00  
0061C5r 1  06 06 06 06  
0063BDr 1                   .byte $10, $10, $10, $10, $10, $10, $10, $00
0063BDr 1                   .byte $06, $06, $06, $06, $06, $06, $06, $00
0063BDr 1               .endrepeat
0063BDr 1               
0063BDr 1               
0063BDr 1               
0063BDr 1               HEX_DISPLAY_FONT:       ; 8x8x16 color = 32 bytes ... sprite addr 256
0063BDr 1               ;     01   23   45   67
0063BDr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 0
0063C1r 1  01 00 00 10  .byte $01, $00, $00, $10
0063C5r 1  01 00 00 10  .byte $01, $00, $00, $10
0063C9r 1  00 00 00 00  .byte $00, $00, $00, $00
0063CDr 1  01 00 00 10  .byte $01, $00, $00, $10
0063D1r 1  01 00 00 10  .byte $01, $00, $00, $10
0063D5r 1  01 00 00 10  .byte $01, $00, $00, $10
0063D9r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 0 /
0063DDr 1               
0063DDr 1  00 00 00 00  .byte $00, $00, $00, $00 ; 1
0063E1r 1  00 00 00 10  .byte $00, $00, $00, $10
0063E5r 1  00 00 00 10  .byte $00, $00, $00, $10
0063E9r 1  00 00 00 00  .byte $00, $00, $00, $00
0063EDr 1  00 00 00 10  .byte $00, $00, $00, $10
0063F1r 1  00 00 00 10  .byte $00, $00, $00, $10
0063F5r 1  00 00 00 10  .byte $00, $00, $00, $10
0063F9r 1  00 00 00 00  .byte $00, $00, $00, $00
0063FDr 1               
0063FDr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 2
006401r 1  00 00 00 10  .byte $00, $00, $00, $10
006405r 1  00 00 00 10  .byte $00, $00, $00, $10
006409r 1  00 11 11 00  .byte $00, $11, $11, $00
00640Dr 1  01 00 00 00  .byte $01, $00, $00, $00
006411r 1  01 00 00 00  .byte $01, $00, $00, $00
006415r 1  01 00 00 00  .byte $01, $00, $00, $00
006419r 1  00 11 11 00  .byte $00, $11, $11, $00
00641Dr 1               
00641Dr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 3
006421r 1  00 00 00 10  .byte $00, $00, $00, $10
006425r 1  00 00 00 10  .byte $00, $00, $00, $10
006429r 1  00 11 11 00  .byte $00, $11, $11, $00
00642Dr 1  00 00 00 10  .byte $00, $00, $00, $10
006431r 1  00 00 00 10  .byte $00, $00, $00, $10
006435r 1  00 00 00 10  .byte $00, $00, $00, $10
006439r 1  00 11 11 00  .byte $00, $11, $11, $00
00643Dr 1               
00643Dr 1  00 00 00 00  .byte $00, $00, $00, $00   ; 4
006441r 1  01 00 00 10  .byte $01, $00, $00, $10
006445r 1  01 00 00 10  .byte $01, $00, $00, $10
006449r 1  00 11 11 00  .byte $00, $11, $11, $00
00644Dr 1  00 00 00 10  .byte $00, $00, $00, $10
006451r 1  00 00 00 10  .byte $00, $00, $00, $10
006455r 1  00 00 00 10  .byte $00, $00, $00, $10
006459r 1  00 00 00 00  .byte $00, $00, $00, $00
00645Dr 1               
00645Dr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 5
006461r 1  01 00 00 00  .byte $01, $00, $00, $00
006465r 1  01 00 00 00  .byte $01, $00, $00, $00
006469r 1  00 11 11 00  .byte $00, $11, $11, $00
00646Dr 1  00 00 00 10  .byte $00, $00, $00, $10
006471r 1  00 00 00 10  .byte $00, $00, $00, $10
006475r 1  00 00 00 10  .byte $00, $00, $00, $10
006479r 1  00 11 11 00  .byte $00, $11, $11, $00
00647Dr 1               
00647Dr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 6
006481r 1  01 00 00 00  .byte $01, $00, $00, $00
006485r 1  01 00 00 00  .byte $01, $00, $00, $00
006489r 1  00 11 11 00  .byte $00, $11, $11, $00
00648Dr 1  01 00 00 10  .byte $01, $00, $00, $10
006491r 1  01 00 00 10  .byte $01, $00, $00, $10
006495r 1  01 00 00 10  .byte $01, $00, $00, $10
006499r 1  00 11 11 00  .byte $00, $11, $11, $00
00649Dr 1               
00649Dr 1  00 01 01 00  .byte $00, $01, $01, $00 ; 7
0064A1r 1  00 00 00 10  .byte $00, $00, $00, $10
0064A5r 1  00 00 00 10  .byte $00, $00, $00, $10
0064A9r 1  00 00 00 00  .byte $00, $00, $00, $00
0064ADr 1  00 00 00 10  .byte $00, $00, $00, $10
0064B1r 1  00 00 00 10  .byte $00, $00, $00, $10
0064B5r 1  00 00 00 10  .byte $00, $00, $00, $10
0064B9r 1  00 00 00 00  .byte $00, $00, $00, $00
0064BDr 1               
0064BDr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 8
0064C1r 1  01 00 00 10  .byte $01, $00, $00, $10
0064C5r 1  01 00 00 10  .byte $01, $00, $00, $10
0064C9r 1  00 11 11 00  .byte $00, $11, $11, $00
0064CDr 1  01 00 00 10  .byte $01, $00, $00, $10
0064D1r 1  01 00 00 10  .byte $01, $00, $00, $10
0064D5r 1  01 00 00 10  .byte $01, $00, $00, $10
0064D9r 1  00 11 11 00  .byte $00, $11, $11, $00
0064DDr 1               
0064DDr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 9
0064E1r 1  01 00 00 10  .byte $01, $00, $00, $10
0064E5r 1  01 00 00 10  .byte $01, $00, $00, $10
0064E9r 1  00 11 11 00  .byte $00, $11, $11, $00
0064EDr 1  00 00 00 10  .byte $00, $00, $00, $10
0064F1r 1  00 00 00 10  .byte $00, $00, $00, $10
0064F5r 1  00 00 00 10  .byte $00, $00, $00, $10
0064F9r 1  00 11 11 00  .byte $00, $11, $11, $00
0064FDr 1               
0064FDr 1  00 11 11 00  .byte $00, $11, $11, $00   ; A
006501r 1  01 00 00 10  .byte $01, $00, $00, $10
006505r 1  01 00 00 10  .byte $01, $00, $00, $10
006509r 1  00 11 11 00  .byte $00, $11, $11, $00
00650Dr 1  01 00 00 10  .byte $01, $00, $00, $10
006511r 1  01 00 00 10  .byte $01, $00, $00, $10
006515r 1  01 00 00 10  .byte $01, $00, $00, $10
006519r 1  00 00 00 00  .byte $00, $00, $00, $00
00651Dr 1               
00651Dr 1               
00651Dr 1  00 00 00 00  .byte $00, $00, $00, $00   ; B
006521r 1  01 00 00 00  .byte $01, $00, $00, $00
006525r 1  01 00 00 00  .byte $01, $00, $00, $00
006529r 1  00 11 11 00  .byte $00, $11, $11, $00
00652Dr 1  01 00 00 10  .byte $01, $00, $00, $10
006531r 1  01 00 00 10  .byte $01, $00, $00, $10
006535r 1  01 00 00 10  .byte $01, $00, $00, $10
006539r 1  00 11 11 00  .byte $00, $11, $11, $00
00653Dr 1               
00653Dr 1  00 11 11 00  .byte $00, $11, $11, $00   ; C
006541r 1  01 00 00 00  .byte $01, $00, $00, $00
006545r 1  01 00 00 00  .byte $01, $00, $00, $00
006549r 1  00 00 00 00  .byte $00, $00, $00, $00
00654Dr 1  01 00 00 00  .byte $01, $00, $00, $00
006551r 1  01 00 00 00  .byte $01, $00, $00, $00
006555r 1  01 00 00 00  .byte $01, $00, $00, $00
006559r 1  00 11 11 00  .byte $00, $11, $11, $00
00655Dr 1               
00655Dr 1  00 00 00 00  .byte $00, $00, $00, $00   ; D
006561r 1  00 00 00 10  .byte $00, $00, $00, $10
006565r 1  00 00 00 10  .byte $00, $00, $00, $10
006569r 1  00 11 11 00  .byte $00, $11, $11, $00
00656Dr 1  01 00 00 10  .byte $01, $00, $00, $10
006571r 1  01 00 00 10  .byte $01, $00, $00, $10
006575r 1  01 00 00 10  .byte $01, $00, $00, $10
006579r 1  00 11 11 00  .byte $00, $11, $11, $00
00657Dr 1               
00657Dr 1  00 11 11 00  .byte $00, $11, $11, $00   ; E
006581r 1  01 00 00 00  .byte $01, $00, $00, $00
006585r 1  01 00 00 00  .byte $01, $00, $00, $00
006589r 1  00 11 11 00  .byte $00, $11, $11, $00
00658Dr 1  01 00 00 00  .byte $01, $00, $00, $00
006591r 1  01 00 00 00  .byte $01, $00, $00, $00
006595r 1  01 00 00 00  .byte $01, $00, $00, $00
006599r 1  00 11 11 00  .byte $00, $11, $11, $00
00659Dr 1               
00659Dr 1  00 11 11 00  .byte $00, $11, $11, $00   ; F   sprite addr 48
0065A1r 1  01 00 00 00  .byte $01, $00, $00, $00
0065A5r 1  01 00 00 00  .byte $01, $00, $00, $00
0065A9r 1  00 11 11 00  .byte $00, $11, $11, $00
0065ADr 1  01 00 00 00  .byte $01, $00, $00, $00
0065B1r 1  01 00 00 00  .byte $01, $00, $00, $00
0065B5r 1  01 00 00 00  .byte $01, $00, $00, $00
0065B9r 1  00 00 00 00  .byte $00, $00, $00, $00
0065BDr 1               
0065BDr 1               test_cell_sprite:    ;  is 16x64x16 bit = 512 bytes   sprite addr = 10
0065BDr 1               ;     01   23   45   67   89   AB   CD   EF
0065BDr 1  CC C9 CC C9  .byte $CC, $C9, $CC, $C9, $CC, $C9, $CC, $C0    ;  0
0065C1r 1  CC C9 CC C0  
0065C5r 1  09 9B 99 9B  .byte $09, $9B, $99, $9B, $99, $9B, $99, $9C    ;  1
0065C9r 1  99 9B 99 9C  
0065CDr 1  CB BC BB BC  .byte $CB, $BC, $BB, $BC, $BB, $BC, $BB, $B0    ;  2
0065D1r 1  BB BC BB B0  
0065D5r 1  0C C9 CC C9  .byte $0C, $C9, $CC, $C9, $CC, $C9, $CC, $CC    ;  3
0065D9r 1  CC C9 CC CC  
0065DDr 1  C9 9B 99 9B  .byte $C9, $9B, $99, $9B, $99, $9B, $99, $90    ;  4
0065E1r 1  99 9B 99 90  
0065E5r 1  0B BC BB BC  .byte $0B, $BC, $BB, $BC, $BB, $BC, $BB, $BC    ;  5
0065E9r 1  BB BC BB BC  
0065EDr 1  CC C9 CC C9  .byte $CC, $C9, $CC, $C9, $CC, $C9, $CC, $C0    ;  6
0065F1r 1  CC C9 CC C0  
0065F5r 1  09 9B 99 9B  .byte $09, $9B, $99, $9B, $99, $9B, $99, $9C    ;  7
0065F9r 1  99 9B 99 9C  
0065FDr 1  CB BC BB BC  .byte $CB, $BC, $BB, $BC, $BB, $BC, $BB, $B0    ;  8 ; 45* is 9.5 ..
006601r 1  BB BC BB B0  
006605r 1  0C 09 0C 09  .byte $0C, $09, $0C, $09, $0C, $09, $0C, $0C    ;  9
006609r 1  0C 09 0C 0C  
00660Dr 1  09 90 09 90  .byte $09, $90, $09, $90, $09, $90, $09, $90   ;  10
006611r 1  09 90 09 90  
006615r 1  0E 9E E9 9E  .byte $0E, $9E, $E9, $9E, $E9, $9E, $E9, $9E   ;  11
006619r 1  E9 9E E9 9E  
00661Dr 1               
00661Dr 1  EE EE EE EE  .repeat 13
006621r 1  EE EE EE E0  
006625r 1  0E EE 66 EE  
0067BDr 1                   .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $E0    ;  12
0067BDr 1                   .byte $0E, $EE, $66, $EE, $EE, $66, $EE, $EE    ;
0067BDr 1                   .byte $EE, $66, $EE, $66, $66, $EE, $66, $E0    ;
0067BDr 1                   .byte $06, $EE, $EE, $EE, $EE, $EE, $EE, $66    ;
0067BDr 1               .endrepeat
0067BDr 1               
0067BDr 1               test_border: ; 32
0067BDr 1  0B 0B 0B 0B  .repeat 64
0067C1r 1  B0 B0 B0 B0  
0067C5r 1  0B 0B 0B 0B  
0069BDr 1                  .res 4, $0B
0069BDr 1                  .res 4, $B0
0069BDr 1               .endrepeat
0069BDr 1               
0069BDr 1               test_cross_hair_8x8:    ;  8x8x16 color = 32 bytes ; sprite 96
0069BDr 1               ;     01   23   45   67
0069BDr 1  11 00 00 11  .byte $11, $00, $00, $11
0069C1r 1  10 00 00 01  .byte $10, $00, $00, $01
0069C5r 1  00 00 00 00  .byte $00, $00, $00, $00
0069C9r 1  00 01 10 00  .byte $00, $01, $10, $00
0069CDr 1  00 01 10 00  .byte $00, $01, $10, $00
0069D1r 1  00 00 00 00  .byte $00, $00, $00, $00
0069D5r 1  10 00 00 01  .byte $10, $00, $00, $01
0069D9r 1  11 00 00 11  .byte $11, $00, $00, $11
0069DDr 1               
0069DDr 1  00 00 00 00  .byte $00, $00, $00, $00  ;  bearing label   sprite addr 97
0069E1r 1  00 00 01 00  .byte $00, $00, $01, $00
0069E5r 1  00 00 10 00  .byte $00, $00, $10, $00
0069E9r 1  00 01 00 00  .byte $00, $01, $00, $00
0069EDr 1  00 10 00 00  .byte $00, $10, $00, $00
0069F1r 1  01 00 00 00  .byte $01, $00, $00, $00
0069F5r 1  11 11 11 00  .byte $11, $11, $11, $00
0069F9r 1  00 00 00 00  .byte $00, $00, $00, $00
0069FDr 1               
0069FDr 1               ; cell position label sprite addr 50-57
0069FDr 1  00 FF 00 FF  .byte $00,$FF,$00,$FF,$FF,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
006A01r 1  FF 00 FF 00  
006A05r 1  00 FF 00 00  
006A1Dr 1  FF 00 00 FF  .byte $FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
006A21r 1  00 00 FF 00  
006A25r 1  00 FF 00 00  
006A3Dr 1  FF 00 00 FF  .byte $FF,$00,$00,$FF,$FF,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
006A41r 1  FF 00 FF 00  
006A45r 1  00 FF 00 00  
006A5Dr 1  FF 00 00 FF  .byte $FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
006A61r 1  00 00 FF 00  
006A65r 1  00 FF 00 00  
006A7Dr 1  00 FF 00 FF  .byte $00,$FF,$00,$FF,$FF,$00,$FF,$FF,$00,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
006A81r 1  FF 00 FF FF  
006A85r 1  00 FF FF 00  
006A9Dr 1               ;      01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF
006A9Dr 1               ;     XH                               $XL                            ___  __  YH                              YL
006A9Dr 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$00,$00,$10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00
006AA1r 1  00 00 00 00  
006AA5r 1  10 10 10 00  
006ABDr 1  01 00 11 10  .byte $01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00
006AC1r 1  00 00 00 00  
006AC5r 1  01 00 10 00  
006ADDr 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$11,$10,$00,$00,$00,$00,$00,$00,$01,$00,$10,$10,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00
006AE1r 1  00 00 00 00  
006AE5r 1  10 10 11 10  
006AFDr 1               
006AFDr 1               ; world position label 58-65
006AFDr 1               ;     XH                 $XL                  ___  ___  YH                  YL
006AFDr 1  FF 00 00 00  .byte $FF,$00,$00,$00,$FF,$00,$00,$FF,$00,$00,$FF,$FF,$00,$00,$FF,$00,$00,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
006B01r 1  FF 00 00 FF  
006B05r 1  00 00 FF FF  
006B1Dr 1  FF 00 00 00  .byte $FF,$00,$00,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$00,$FF,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
006B21r 1  FF 00 FF 00  
006B25r 1  FF 00 FF 00  
006B3Dr 1  FF 00 FF 00  .byte $FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$FF,$00,$00,$FF,$00,$00,$FF,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
006B41r 1  FF 00 FF 00  
006B45r 1  FF 00 FF FF  
006B5Dr 1  FF 00 FF 00  .byte $FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$00,$FF,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
006B61r 1  FF 00 FF 00  
006B65r 1  FF 00 FF 00  
006B7Dr 1  00 FF 00 FF  .byte $00,$FF,$00,$FF,$00,$00,$00,$FF,$00,$00,$FF,$00,$FF,$00,$FF,$FF,$00,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
006B81r 1  00 00 00 FF  
006B85r 1  00 00 FF 00  
006B9Dr 1               ;      01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF
006B9Dr 1               ;     XH                               $XL                            ___  __  YH                              YL
006B9Dr 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$00,$00,$10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00
006BA1r 1  00 00 00 00  
006BA5r 1  10 10 10 00  
006BBDr 1  01 00 11 10  .byte $01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00
006BC1r 1  00 00 00 00  
006BC5r 1  01 00 10 00  
006BDDr 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$11,$10,$00,$00,$00,$00,$00,$00,$01,$00,$10,$10,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00
006BE1r 1  00 00 00 00  
006BE5r 1  10 10 11 10  
006BFDr 1               
006BFDr 1               ; directional cursor reminder... 16x16 - 66-69
006BFDr 1  00 10 00 10  .byte $00, $10, $00, $10, $01, $11, $11, $00
006C01r 1  01 11 11 00  
006C05r 1  00 10 00 10  .byte $00, $10, $00, $10, $01, $00, $00, $00
006C09r 1  01 00 00 00  
006C0Dr 1  00 10 10 10  .byte $00, $10, $10, $10, $01, $11, $00, $00
006C11r 1  01 11 00 00  
006C15r 1  00 10 10 10  .byte $00, $10, $10, $10, $01, $00, $00, $00
006C19r 1  01 00 00 00  
006C1Dr 1  00 01 01 00  .byte $00, $01, $01, $00, $01, $11, $11, $00
006C21r 1  01 11 11 00  
006C25r 1  00 00 00 00  .byte $00, $00, $00, $00, $00, $00, $00, $00
006C29r 1  00 00 00 00  
006C2Dr 1  01 11 00 00  .byte $01, $11, $00, $00, $00, $01, $11, $00
006C31r 1  00 01 11 00  
006C35r 1  10 00 10 01  .byte $10, $00, $10, $01, $10, $01, $00, $01
006C39r 1  10 01 00 01  
006C3Dr 1  11 11 10 01  .byte $11, $11, $10, $01, $10, $01, $00, $01
006C41r 1  10 01 00 01  
006C45r 1  10 00 10 00  .byte $10, $00, $10, $00, $00, $01, $11, $10
006C49r 1  00 01 11 10  
006C4Dr 1  00 00 00 00  .byte $00, $00, $00, $00, $00, $00, $00, $00
006C51r 1  00 00 00 00  
006C55r 1  00 11 11 10  .byte $00, $11, $11, $10, $01, $00, $01, $00
006C59r 1  01 00 01 00  
006C5Dr 1  00 00 01 00  .byte $00, $00, $01, $00, $00, $10, $10, $00
006C61r 1  00 10 10 00  
006C65r 1  00 00 10 00  .byte $00, $00, $10, $00, $00, $01, $00, $00
006C69r 1  00 01 00 00  
006C6Dr 1  00 01 00 00  .byte $00, $01, $00, $00, $00, $10, $10, $00
006C71r 1  00 10 10 00  
006C75r 1  00 11 11 10  .byte $00, $11, $11, $10, $01, $00, $01, $00
006C79r 1  01 00 01 00  
006C7Cr 1               
