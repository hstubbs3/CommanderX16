ca65 V2.19 - Git 8e6c0c1
Main file   : hex.s
Current file: hex.s

000000r 1               ; 	080D
000000r 1  4C rr rr     jmp start ; 	3 bytes
000003r 1               ;	0810 	- 240 bytes available for stuff that doesn't need alignment
000003r 1  DE AD BE EF  .repeat 28
000007r 1  DE AD BE EF  
00000Br 1  DE AD BE EF  
000073r 1               	.byte $DE,$AD,$BE,$EF
000073r 1               .endrepeat
000073r 1               SCRATCH128:
000073r 1  DE AD BE EF  .repeat 32
000077r 1  DE AD BE EF  
00007Br 1  DE AD BE EF  
0000F3r 1               	.byte $DE,$AD,$BE,$EF
0000F3r 1               .endrepeat
0000F3r 1               
0000F3r 1               ACROSS_ROW_X_L: ; 0900  16 wide , 45* tilt ... this is added to go up row, sub for down row
0000F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0000F3r 1  00 FE FB F4  .byte
0000F7r 1  EC E1 D3 C3  
0000FBr 1  B1 9C 85 6B  
0001F3r 1               
0001F3r 1               ACROSS_ROW_X_H: ; 0A00
0001F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0001F3r 1  10 0F 0F 0F  .byte $10, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $E, $E, $E, $E, $E, $E, $D, $D, $D, $D, $D, $C, $C, $C, $C, $B, $B, $B, $B, $A, $A, $A, $9, $9, $9, $8, $8, $8, $7, $7, $7, $6, $6, $6, $5, $5, $5, $4, $4, $3, $3, $3, $2, $2, $1, $1, $1, $0, $0, $0, $FF, $FF, $FE, $FE, $FE, $FD, $FD, $FC, $FC, $FC, $FB, $FB, $FA, $FA, $FA, $F9, $F9, $F9, $F8, $F8, $F8, $F7, $F7, $F7, $F6, $F6, $F6, $F5, $F5, $F5, $F4, $F4, $F4, $F4, $F3, $F3, $F3, $F3, $F2, $F2, $F2, $F2, $F2, $F1, $F1, $F1, $F1, $F1, $F1, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F1, $F1, $F1, $F1, $F1, $F1, $F2, $F2, $F2, $F2, $F2, $F3, $F3, $F3, $F3, $F4, $F4, $F4, $F4, $F5, $F5, $F5, $F6, $F6, $F6, $F7, $F7, $F7, $F8, $F8, $F8, $F9, $F9, $F9, $FA, $FA, $FA, $FB, $FB, $FC, $FC, $FC, $FD, $FD, $FE, $FE, $FE, $FF, $FF, $00, $0, $0, $1, $1, $1, $2, $2, $3, $3, $3, $4, $4, $5, $5, $5, $6, $6, $6, $7, $7, $7, $8, $8, $8, $9, $9, $9, $A, $A, $A, $B, $B, $B, $B, $C, $C, $C, $C, $D, $D, $D, $D, $D, $E, $E, $E, $E, $E, $E, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F
0001F7r 1  0F 0F 0F 0F  
0001FBr 1  0F 0F 0F 0F  
0002F3r 1               
0002F3r 1               ACROSS_ROW_Y_L: ; 0B00
0002F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0002F3r 1  00 B8 71 2A  .byte $0,$B8,$71,$2A,$E4,$9D,$57,$10,$CA,$85,$40,$FB,$B7,$73,$30,$ED,$AB,$6A,$29,$E9,$AA,$6C,$2E,$F2,$B6,$7C,$42,$A,$D2,$9C,$66,$32,$0,$CE,$9D,$6E,$41,$14,$E9,$C0,$97,$71,$4B,$27,$5,$E4,$C5,$A8,$8C,$71,$58,$41,$2C,$18,$6,$F6,$E7,$DA,$CF,$C5,$BD,$B7,$B3,$B0,$AF,$B0,$B3,$B7,$BD,$C5,$CF,$DA,$E7,$F6,$6,$18,$2C,$41,$58,$71,$8C,$A8,$C5,$E4,$5,$27,$4B,$71,$97,$C0,$E9,$14,$41,$6E,$9D,$CE,$0,$32,$66,$9C,$D2,$A,$42,$7C,$B6,$F2,$2E,$6C,$AA,$E9,$29,$6A,$AB,$ED,$30,$73,$B7,$FB,$40,$85,$CA,$10,$57,$9D,$E4,$2A,$71,$B8,$0,$47,$8E,$D5,$1B,$62,$A8,$EF,$35,$7A,$BF,$4,$48,$8C,$CF,$12,$54,$95,$D6,$16,$55,$93,$D1,$D,$49,$83,$BD,$F5,$2D,$63,$99,$CD,$0,$31,$62,$91,$BE,$EB,$16,$3F,$68,$8E,$B4,$D8,$FA,$1B,$3A,$57,$73,$8E,$A7,$BE,$D3,$E7,$F9,$9,$18,$25,$30,$3A,$42,$48,$4C,$4F,$50,$4F,$4C,$48,$42,$3A,$30,$25,$18,$9,$F9,$E7,$D3,$BE,$A7,$8E,$73,$57,$3A,$1B,$FA,$D8,$B4,$8E,$68,$3F,$16,$EB,$BE,$91,$62,$31,$0,$CD,$99,$63,$2D,$F5,$BD,$83,$49,$D,$D1,$93,$55,$16,$D6,$95,$54,$12,$CF,$8C,$48,$4,$BF,$7A,$35,$EF,$A8,$62,$1B,$D5,$8E,$47
0002F7r 1  E4 9D 57 10  
0002FBr 1  CA 85 40 FB  
0003F3r 1               
0003F3r 1               ACROSS_ROW_Y_H: ; 0C00
0003F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0003F3r 1  00 FF FF FF  .byte $0,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F9,$F8,$F8,$F8,$F8,$F8,$F7,$F7,$F7,$F7,$F7,$F6,$F6,$F6,$F6,$F6,$F6,$F6,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F6,$F6,$F6,$F6,$F6,$F6,$F6,$F7,$F7,$F7,$F7,$F7,$F8,$F8,$F8,$F8,$F8,$F9,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$00,$0,$0,$0,$1,$1,$1,$1,$2,$2,$2,$3,$3,$3,$3,$4,$4,$4,$4,$5,$5,$5,$5,$6,$6,$6,$6,$6,$7,$7,$7,$7,$8,$8,$8,$8,$8,$8,$9,$9,$9,$9,$9,$9,$9,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$9,$9,$9,$9,$9,$9,$9,$8,$8,$8,$8,$8,$8,$7,$7,$7,$7,$6,$6,$6,$6,$6,$5,$5,$5,$5,$4,$4,$4,$4,$3,$3,$3,$3,$2,$2,$2,$1,$1,$1,$1,$0,$0,$0
0003F7r 1  FE FE FE FE  
0003FBr 1  FD FD FD FC  
0004F3r 1               
0004F3r 1               NEXT_ROW_X_L: ; 0D00 next row LEFT/up when added
0004F3r 1  00 A9 54 00  .byte
0004F7r 1  AE 5D 0D BF  
0004FBr 1  73 28 DF 98  
0005F3r 1               
0005F3r 1               NEXT_ROW_X_H: ; 0E00
0005F3r 1  F8 F7 F7 F7  .byte
0005F7r 1  F6 F6 F6 F5  
0005FBr 1  F5 F5 F4 F4  
0006F3r 1               
0006F3r 1               NEXT_ROW_Y_L: ; 0F00
0006F3r 1  33 58 7D A5  .byte $33,$58,$7D,$A5,$CD,$F7,$23,$50,$7E,$AD,$DE,$10,$44,$78,$AE,$E4,$1C,$55,$8F,$CA,$6,$43,$81,$BF,$FE,$3F,$7F,$C1,$3,$46,$8A,$CD,$12,$57,$9C,$E2,$28,$6E,$B4,$FB,$42,$89,$D0,$17,$5E,$A5,$EC,$33,$7A,$C0,$6,$4C,$91,$D6,$1B,$5F,$A2,$E6,$28,$6A,$AB,$EB,$2B,$6A,$A8,$E5,$21,$5C,$97,$D0,$8,$3F,$75,$AA,$DE,$10,$41,$71,$A0,$CD,$F9,$24,$4D,$75,$9B,$C0,$E3,$5,$25,$44,$61,$7C,$96,$AE,$C5,$DA,$ED,$FF,$F,$1D,$29,$34,$3D,$44,$4A,$4D,$4F,$50,$4E,$4B,$46,$3F,$37,$2D,$21,$13,$4,$F3,$E0,$CC,$B6,$9E,$85,$6A,$4E,$30,$10,$EF,$CC,$A7,$82,$5A,$32,$8,$DC,$AF,$81,$52,$21,$EF,$BB,$87,$51,$1B,$E3,$AA,$70,$35,$F9,$BC,$7E,$40,$1,$C0,$80,$3E,$FC,$B9,$75,$32,$ED,$A8,$63,$1D,$D7,$91,$4B,$4,$BD,$76,$2F,$E8,$A1,$5A,$13,$CC,$85,$3F,$F9,$B3,$6E,$29,$E4,$A0,$5D,$19,$D7,$95,$54,$14,$D4,$95,$57,$1A,$DE,$A3,$68,$2F,$F7,$C0,$8A,$55,$21,$EF,$BE,$8E,$5F,$32,$6,$DB,$B2,$8A,$64,$3F,$1C,$FA,$DA,$BB,$9E,$83,$69,$51,$3A,$25,$12,$0,$F0,$E2,$D6,$CB,$C2,$BB,$B5,$B2,$B0,$AF,$B1,$B4,$B9,$C0,$C8,$D2,$DE,$EC,$FB,$C,$1F,$33,$49,$61,$7A,$95,$B1,$CF,$EF,$10
0006F7r 1  CD F7 23 50  
0006FBr 1  7E AD DE 10  
0007F3r 1               
0007F3r 1               NEXT_ROW_Y_H: ; 1000
0007F3r 1  F6 F6 F6 F6  .byte $F6,$F6,$F6,$F6,$F6,$F6,$F7,$F7,$F7,$F7,$F7,$F8,$F8,$F8,$F8,$F8,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$0,$0,$0,$0,$1,$1,$1,$2,$2,$2,$2,$3,$3,$3,$3,$4,$4,$4,$4,$5,$5,$5,$5,$6,$6,$6,$6,$7,$7,$7,$7,$7,$8,$8,$8,$8,$8,$8,$9,$9,$9,$9,$9,$9,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$9,$9,$9,$9,$9,$9,$9,$8,$8,$8,$8,$8,$7,$7,$7,$7,$7,$6,$6,$6,$6,$5,$5,$5,$5,$5,$4,$4,$4,$3,$3,$3,$3,$2,$2,$2,$2,$1,$1,$1,$1,$0,$0,$0,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F8,$F8,$F8,$F8,$F8,$F7,$F7,$F7,$F7,$F7,$F7,$F6,$F6,$F6,$F6,$F6,$F6,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F6
0007F7r 1  F6 F6 F7 F7  
0007FBr 1  F7 F7 F7 F8  
0008F3r 1               
0008F3r 1               TUB_WORLD: ; 32*64 = 2K ... is 1100 to 1900-1
0008F3r 1               .include "tub_world_hieghts_01.inc"
0008F3r 2               ; 0 to 128 will be water level. >128 = distance along row to water (neg) , 128 = no water this row.
0008F3r 2               ; rows are stored within 64 byte rows
0008F3r 2               ; 	  0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63
0008F3r 2  FF FF FF FF  .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 30
0008F7r 2  FF FF FF FF  
0008FBr 2  FF FF FF FF  
000933r 2  FF FF FF FF  .byte   $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF ; 29
000937r 2  FF FF FF FF  
00093Br 2  FF FF FF FF  
000973r 2  FF FF FF FF  .byte     $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF ; 28
000977r 2  FF FF FF FF  
00097Br 2  FF FF FF FF  
0009B3r 2  FF FF FF FF  .byte       $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF ; 27
0009B7r 2  FF FF FF FF  
0009BBr 2  FF FF FF FF  
0009F3r 2  FF FF FF FF  .byte         $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF ; 26
0009F7r 2  FF FF FF FF  
0009FBr 2  FF FF FF FF  
000A33r 2  FF FF FF FF  .byte           $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 25
000A37r 2  FF FF FF FF  
000A3Br 2  FF FF FF FF  
000A73r 2  FF FF FF FF  .byte             $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 24
000A77r 2  FF FF FF FF  
000A7Br 2  FF FF FF FF  
000AB3r 2  FF FF FF FF  .byte               $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 23
000AB7r 2  FF FF FF FF  
000ABBr 2  FF FF FF 80  
000AF3r 2  FF FF FF FF  .byte                 $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 22
000AF7r 2  FF FF FF FF  
000AFBr 2  FF FF 80 00  
000B33r 2  FF FF FF FF  .byte                   $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF; 21
000B37r 2  FF FF FF FF  
000B3Br 2  FF 80 00 00  
000B73r 2  FF FF FF FF  .byte                     $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF ; 20
000B77r 2  FF FF FF FF  
000B7Br 2  FF 80 00 00  
000BB3r 2  FF FF FF FF  .byte                       $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF ; 19
000BB7r 2  FF FF FF FF  
000BBBr 2  80 00 00 00  
000BF3r 2  FF FF FF FF  .byte                         $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 18
000BF7r 2  FF FF FF FF  
000BFBr 2  80 00 00 00  
000C33r 2  FF FF FF FF  .byte                           $FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 17
000C37r 2  FF FF FF 80  
000C3Br 2  00 00 00 00  
000C73r 2  FF FF FF FF  .byte                             $FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 16
000C77r 2  FF FF FF 80  
000C7Br 2  00 00 00 00  
000CB3r 2  FF FF FF FF  .byte                               $FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 15
000CB7r 2  FF FF 80 00  
000CBBr 2  00 00 00 00  
000CF3r 2  FF FF FF FF  .byte                                 $FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF ; 14
000CF7r 2  FF FF 80 00  
000CFBr 2  00 00 00 00  
000D33r 2  FF FF FF FF  .byte                                   $FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 13
000D37r 2  FF 80 00 00  
000D3Br 2  00 00 00 00  
000D73r 2  FF FF FF FF  .byte                                     $FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 12
000D77r 2  FF 80 00 00  
000D7Br 2  00 00 00 00  
000DB3r 2  FF FF FF FF  .byte                                       $FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 11
000DB7r 2  80 00 00 00  
000DBBr 2  00 00 00 00  
000DF3r 2  FF FF FF FF  .byte                                         $FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 10
000DF7r 2  80 00 00 00  
000DFBr 2  00 00 00 00  
000E33r 2  FF FF FF 80  .byte                                           $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 9
000E37r 2  00 00 00 00  
000E3Br 2  00 00 00 00  
000E73r 2  FF FF FF 80  .byte                                             $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 8
000E77r 2  00 00 00 00  
000E7Br 2  00 00 00 00  
000EB3r 2  FF FF FF 80  .byte                                               $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 7
000EB7r 2  00 00 00 00  
000EBBr 2  00 00 00 00  
000EF3r 2  FF FF FF 80  .byte                                                 $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 6
000EF7r 2  00 00 00 00  
000EFBr 2  00 00 00 00  
000F33r 2  FF FF FF 80  .byte                                                   $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 5
000F37r 2  00 00 00 00  
000F3Br 2  00 00 00 00  
000F73r 2  FF FF FF 80  .byte                                                     $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 4
000F77r 2  00 00 00 00  
000F7Br 2  00 00 00 00  
000FB3r 2  FF FF FF 80  .byte                                                       $FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 3
000FB7r 2  80 00 00 00  
000FBBr 2  00 00 00 00  
000FF3r 2  FF FF FF FF  .byte                                                         $FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 2
000FF7r 2  80 80 00 00  
000FFBr 2  00 00 00 00  
001033r 2  FF FF FF FF  .byte                                                           $FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 01
001037r 2  FF 80 80 00  
00103Br 2  00 00 00 00  
001073r 2  FF FF FF FF  .byte                                                             $FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 00 tub wall north
001077r 2  FF FF 80 80  
00107Br 2  80 80 80 80  
0010B3r 2  FF FF FF FF  .res 64,$FF
0010B7r 2  FF FF FF FF  
0010BBr 2  FF FF FF FF  
0010F3r 2               
0010F3r 2               
0010F3r 2               
0010F3r 1               
0010F3r 1               WATER_CALC_SCRATCH:
0010F3r 1               .include "tub_world_hieghts_01.inc"
0010F3r 2               ; 0 to 128 will be water level. >128 = distance along row to water (neg) , 128 = no water this row.
0010F3r 2               ; rows are stored within 64 byte rows
0010F3r 2               ; 	  0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63
0010F3r 2  FF FF FF FF  .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 30
0010F7r 2  FF FF FF FF  
0010FBr 2  FF FF FF FF  
001133r 2  FF FF FF FF  .byte   $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF ; 29
001137r 2  FF FF FF FF  
00113Br 2  FF FF FF FF  
001173r 2  FF FF FF FF  .byte     $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF ; 28
001177r 2  FF FF FF FF  
00117Br 2  FF FF FF FF  
0011B3r 2  FF FF FF FF  .byte       $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF ; 27
0011B7r 2  FF FF FF FF  
0011BBr 2  FF FF FF FF  
0011F3r 2  FF FF FF FF  .byte         $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF ; 26
0011F7r 2  FF FF FF FF  
0011FBr 2  FF FF FF FF  
001233r 2  FF FF FF FF  .byte           $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 25
001237r 2  FF FF FF FF  
00123Br 2  FF FF FF FF  
001273r 2  FF FF FF FF  .byte             $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 24
001277r 2  FF FF FF FF  
00127Br 2  FF FF FF FF  
0012B3r 2  FF FF FF FF  .byte               $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 23
0012B7r 2  FF FF FF FF  
0012BBr 2  FF FF FF 80  
0012F3r 2  FF FF FF FF  .byte                 $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 22
0012F7r 2  FF FF FF FF  
0012FBr 2  FF FF 80 00  
001333r 2  FF FF FF FF  .byte                   $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF; 21
001337r 2  FF FF FF FF  
00133Br 2  FF 80 00 00  
001373r 2  FF FF FF FF  .byte                     $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF ; 20
001377r 2  FF FF FF FF  
00137Br 2  FF 80 00 00  
0013B3r 2  FF FF FF FF  .byte                       $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF ; 19
0013B7r 2  FF FF FF FF  
0013BBr 2  80 00 00 00  
0013F3r 2  FF FF FF FF  .byte                         $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 18
0013F7r 2  FF FF FF FF  
0013FBr 2  80 00 00 00  
001433r 2  FF FF FF FF  .byte                           $FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 17
001437r 2  FF FF FF 80  
00143Br 2  00 00 00 00  
001473r 2  FF FF FF FF  .byte                             $FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 16
001477r 2  FF FF FF 80  
00147Br 2  00 00 00 00  
0014B3r 2  FF FF FF FF  .byte                               $FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 15
0014B7r 2  FF FF 80 00  
0014BBr 2  00 00 00 00  
0014F3r 2  FF FF FF FF  .byte                                 $FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF ; 14
0014F7r 2  FF FF 80 00  
0014FBr 2  00 00 00 00  
001533r 2  FF FF FF FF  .byte                                   $FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 13
001537r 2  FF 80 00 00  
00153Br 2  00 00 00 00  
001573r 2  FF FF FF FF  .byte                                     $FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 12
001577r 2  FF 80 00 00  
00157Br 2  00 00 00 00  
0015B3r 2  FF FF FF FF  .byte                                       $FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 11
0015B7r 2  80 00 00 00  
0015BBr 2  00 00 00 00  
0015F3r 2  FF FF FF FF  .byte                                         $FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 10
0015F7r 2  80 00 00 00  
0015FBr 2  00 00 00 00  
001633r 2  FF FF FF 80  .byte                                           $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 9
001637r 2  00 00 00 00  
00163Br 2  00 00 00 00  
001673r 2  FF FF FF 80  .byte                                             $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 8
001677r 2  00 00 00 00  
00167Br 2  00 00 00 00  
0016B3r 2  FF FF FF 80  .byte                                               $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 7
0016B7r 2  00 00 00 00  
0016BBr 2  00 00 00 00  
0016F3r 2  FF FF FF 80  .byte                                                 $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 6
0016F7r 2  00 00 00 00  
0016FBr 2  00 00 00 00  
001733r 2  FF FF FF 80  .byte                                                   $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 5
001737r 2  00 00 00 00  
00173Br 2  00 00 00 00  
001773r 2  FF FF FF 80  .byte                                                     $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 4
001777r 2  00 00 00 00  
00177Br 2  00 00 00 00  
0017B3r 2  FF FF FF 80  .byte                                                       $FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 3
0017B7r 2  80 00 00 00  
0017BBr 2  00 00 00 00  
0017F3r 2  FF FF FF FF  .byte                                                         $FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 2
0017F7r 2  80 80 00 00  
0017FBr 2  00 00 00 00  
001833r 2  FF FF FF FF  .byte                                                           $FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 01
001837r 2  FF 80 80 00  
00183Br 2  00 00 00 00  
001873r 2  FF FF FF FF  .byte                                                             $FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 00 tub wall north
001877r 2  FF FF 80 80  
00187Br 2  80 80 80 80  
0018B3r 2  FF FF FF FF  .res 64,$FF
0018B7r 2  FF FF FF FF  
0018BBr 2  FF FF FF FF  
0018F3r 2               
0018F3r 2               
0018F3r 2               
0018F3r 1               
0018F3r 1               ; 1900
0018F3r 1               
0018F3r 1               OBJECT_LIST_Z_START_POINTERS: ; 1900
0018F3r 1  00 00 00 00  .res 256,0
0018F7r 1  00 00 00 00  
0018FBr 1  00 00 00 00  
0019F3r 1               OBJECT_LIST_BYTE0_ADDRLOW: ; 1A00 addr low
0019F3r 1  00 00 00 00  .res 256,0
0019F7r 1  00 00 00 00  
0019FBr 1  00 00 00 00  
001AF3r 1               OBJECT_LIST_BYTE1_MODE: ; 1B00 mode/addr bank
001AF3r 1  00 00 00 00  .res 256,0
001AF7r 1  00 00 00 00  
001AFBr 1  00 00 00 00  
001BF3r 1               OBJECT_LIST_BYTE2_X: ; 1C00 X position onscreen ( assumed positive for now)
001BF3r 1  00 00 00 00  .res 256,0
001BF7r 1  00 00 00 00  
001BFBr 1  00 00 00 00  
001CF3r 1               OBJECT_LIST_BYTE3_Y: ; 1D00 y position onscreen
001CF3r 1  00 00 00 00  .res 256,0
001CF7r 1  00 00 00 00  
001CFBr 1  00 00 00 00  
001DF3r 1               OBJECT_LIST_BYTE4_ZFLIPS: ; 1E00 collision / z / flips
001DF3r 1  00 00 00 00  .res 256,0
001DF7r 1  00 00 00 00  
001DFBr 1  00 00 00 00  
001EF3r 1               OBJECT_LIST_BYTE5_SIZE: ; 1F00 size / pal offset
001EF3r 1  00 00 00 00  .res 256,0
001EF7r 1  00 00 00 00  
001EFBr 1  00 00 00 00  
001FF3r 1               OBJECT_LIST_BYTE6_NEXT: ; 2000 NEXT
001FF3r 1  00 00 00 00  .res 256,0
001FF7r 1  00 00 00 00  
001FFBr 1  00 00 00 00  
0020F3r 1               
0020F3r 1               
0020F3r 1               
0020F3r 1               WORLD_TO_CELL_XH: ; 2100
0020F3r 1  00 00 01 02  .byte 0,0,1,2,3,4,5,6,6,7,8,9,10,11,12,12,13,14,15,16,17,18,19,19,20,21,22,23,24,25,25,26,27,28,29,30,31,32,32,33,34,35,36,37,38,38,39,40,41,42,43,44,45,45,46,47,48,49,50,51,51,52,53,54,55,56,57,58,58,59,60,61,62,63,64,64,65,66,67,68,69,70,71,71,72,73,74,75,76,77,77,78,79,80,81,82,83,84,84,85,86,87,88,89,90,90,91,92,93,94,95,96,96,97,98,99,100,101,102,103,103,104,105,106,107,108,109,109,110,111,112,113,114,115,116,116,117,118,119,120,121,122,122,123,124,125,126,127,128,129,129,130,131,132,133,134,135,135,136,137,138,139,140,141,142,142,143,144,145,146,147,148,148,149,150,151,152,153,154,155,155,156,157,158,159,160,161,161,162,163,164,165,166,167,168,168,169,170,171,172,173,174,174,175,176,177,178,179,180,180,181,182,183,184,185,186,187,187,188,189,190,191,192,193,193,194,195,196,197,198,199,200,200,201,202,203,204,205,206,206,207,208,209,210,211,212,213,213,214,215,216,217,218,219,219,220
0020F7r 1  03 04 05 06  
0020FBr 1  06 07 08 09  
0021F3r 1               ;.byte 0,0,1,2,3,4,5,6,6,7,8,9,10,11,12,12,13,14,15,16,17,18,19,19,20,21,22,23,24,25,25,26,27,28,29,30,31,32,32,33,34,35,36,37,38,38,39,40,41,42,43,44,45,45,46,47,48,49,50,51,51,52,53,54,55,56,57,58,58,59,60,61,62,63,64,64,65,66,67,68,69,70,71,71,72,73,74,75,76,77,77,78,79,80,81,82,83,84,84,85,86,87,88,89,90,90,91,92,93,94,95,96,96,97,98,99,100,101,102,103,103,104,105,106,107,108,109,109
0021F3r 1               ;.res 128,128
0021F3r 1               WORLD_TO_CELL_XL:
0021F3r 1  00 DD BB 99  .byte 0,221,187,153,118,84,50,15,237,203,169,134,100,66,31,253,219,184,150,116,82,47,13,235,200,166,132,97,63,29,251,216,182,148,113,79,45,10,232,198,164,129,95,61,26,248,214,180,145,111,77,42,8,230,195,161,127,93,58,24,246,211,177,143,108,74,40,6,227,193,159,124,90,56,21,243,209,175,140,106,72,37,3,225,191,156,122,88,53,19,241,206,172,138,104,69,35,1,222,188,154,119,85,51,17,238,204,170,135,101,67,32,254,220,186,151,117,83,48,14,236,202,167,133,99,64,30,252,217,183,149,115,80,46,12,233,199,165,130,96,62,28,249,215,181,146,112,78,43,9,231,197,162,128,94,59,25,247,212,178,144,110,75,41,7,228,194,160,126,91,57,23,244,210,176,141,107,73,39,4,226,192,157,123,89,54,20,242,208,173,139,105,70,36,2,223,189,155,121,86,52,18,239,205,171,137,102,68,34,255,221,187,152,118,84,50,15,237,203,168,134,100,65,31,253,219,184,150,116,81,47,13,234,200,166,132,97,63,29,250,216,182,148,113,79,45,10,232,198,163,129,95,61,26,248,214
0021F7r 1  76 54 32 0F  
0021FBr 1  ED CB A9 86  
0022F3r 1               ;.byte 0,221,187,153,118,84,50,15,237,203,169,134,100,66,31,253,219,184,150,116,82,47,13,235,200,166,132,97,63,29,251,216,182,148,113,79,45,10,232,198,164,129,95,61,26,248,214,180,145,111,77,42,8,230,195,161,127,93,58,24,246,211,177,143,108,74,40,6,227,193,159,124,90,56,21,243,209,175,140,106,72,37,3,225,191,156,122,88,53,19,241,206,172,138,104,69,35,1,222,188,154,119,85,51,17,238,204,170,135,101,67,32,254,220,186,151,117,83,48,14,236,202,167,133,99,64,30,252
0022F3r 1               ;.res 128,0
0022F3r 1               CELL_TO_WORLD_XH: ; 2200
0022F3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,8,9,10,11,12,13,15,16,17,18,19,20,21,23,24,25,26,27,28,30,31,32,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,50,51,53,54,55,56,57,58,60,61,62,63,64,65,66,68,69,70,71,72,73,75,76,77,78,79,80,81,83,84,85,86,87,88,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,112,113,114,115,116,117,118,120,121,122,123,124,125,127,128,129,130,131,132,133,135,136,137,138,139,140,142,143,144,145,146
0022F7r 1  04 05 06 08  
0022FBr 1  09 0A 0B 0C  
002373r 1               CELL_TO_WORLD_XL: ; 2280
002373r 1  00 27 4F 76  .byte 0,39,79,118,158,198,237,21,60,100,140,179,219,2,42,82,121,161,200,240,24,63,103,142,182,222,5,45,84,124,164,203,243,26,66,106,145,185,224,8,48,87,127,166,206,246,29,69,108,148,188,227,11,50,90,130,169,209,248,32,72,111,151,191,230,14,53,93,133,172,212,251,35,75,114,154,193,233,17,56,96,135,175,215,254,38,77,117,157,196,236,19,59,99,138,178,217,1,41,80,120,159,199,239,22,62,101,141,181,220,4,43,83,123,162,202,241,25,65,104,144,184,223,7,46,86,126,165
002377r 1  9E C6 ED 15  
00237Br 1  3C 64 8C B3  
0023F3r 1               
0023F3r 1               CELL_LOW_TO_WORLD_XH: ; 2300
0023F3r 1  00 00 00 00  .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
0023F7r 1  00 00 00 00  
0023FBr 1  00 00 00 00  
0024F3r 1               CELL_LOW_TO_WORLD_XL: ; 2400
0024F3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,8,9,10,11,12,13,15,16,17,18,19,20,21,23,24,25,26,27,28,30,31,32,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,50,51,53,54,55,56,57,58,60,61,62,63,64,65,66,68,69,70,71,72,73,75,76,77,78,79,80,81,83,84,85,86,87,88,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,112,113,114,115,116,117,118,120,121,122,123,124,125,127,128,129,130,131,132,133,135,136,137,138,139,140,142,143,144,145,146,147,148,150,151,152,153,154,155,157,158,159,160,161,162,163,165,166,167,168,169,170,172,173,174,175,176,177,178,180,181,182,183,184,185,187,188,189,190,191,192,193,195,196,197,198,199,200,202,203,204,205,206,207,209,210,211,212,213,214,215,217,218,219,220,221,222,224,225,226,227,228,229,230,232,233,234,235,236,237,239,240,241,242,243,244,245,247,248,249,250,251,252,254,255,0,1,2,3,4,6,7,8,9,10,11,13,14,15,16,17,18,19,21,22,23,24,25,26,28,29,30,31,32,33,34,36,37,38
0024F7r 1  04 05 06 08  
0024FBr 1  09 0A 0B 0C  
0025F3r 1               
0025F3r 1               SPRITE_NUM_HIGH_NIBBLE: ; 2900
0025F3r 1  00 00 00 00  .res 16, 0
0025F7r 1  00 00 00 00  
0025FBr 1  00 00 00 00  
002603r 1  01 01 01 01  .res 16, 1
002607r 1  01 01 01 01  
00260Br 1  01 01 01 01  
002613r 1  02 02 02 02  .res 16, 2
002617r 1  02 02 02 02  
00261Br 1  02 02 02 02  
002623r 1  03 03 03 03  .res 16, 3
002627r 1  03 03 03 03  
00262Br 1  03 03 03 03  
002633r 1  04 04 04 04  .res 16, 4
002637r 1  04 04 04 04  
00263Br 1  04 04 04 04  
002643r 1  05 05 05 05  .res 16, 5
002647r 1  05 05 05 05  
00264Br 1  05 05 05 05  
002653r 1  06 06 06 06  .res 16, 6
002657r 1  06 06 06 06  
00265Br 1  06 06 06 06  
002663r 1  07 07 07 07  .res 16, 7
002667r 1  07 07 07 07  
00266Br 1  07 07 07 07  
002673r 1  08 08 08 08  .res 16, 8
002677r 1  08 08 08 08  
00267Br 1  08 08 08 08  
002683r 1  09 09 09 09  .res 16, 9
002687r 1  09 09 09 09  
00268Br 1  09 09 09 09  
002693r 1  0A 0A 0A 0A  .res 16, 10
002697r 1  0A 0A 0A 0A  
00269Br 1  0A 0A 0A 0A  
0026A3r 1  0B 0B 0B 0B  .res 16, 11
0026A7r 1  0B 0B 0B 0B  
0026ABr 1  0B 0B 0B 0B  
0026B3r 1  0C 0C 0C 0C  .res 16, 12
0026B7r 1  0C 0C 0C 0C  
0026BBr 1  0C 0C 0C 0C  
0026C3r 1  0D 0D 0D 0D  .res 16, 13
0026C7r 1  0D 0D 0D 0D  
0026CBr 1  0D 0D 0D 0D  
0026D3r 1  0E 0E 0E 0E  .res 16, 14
0026D7r 1  0E 0E 0E 0E  
0026DBr 1  0E 0E 0E 0E  
0026E3r 1  0F 0F 0F 0F  .res 16, 15
0026E7r 1  0F 0F 0F 0F  
0026EBr 1  0F 0F 0F 0F  
0026F3r 1               
0026F3r 1               SPRITE_NUM_LOW_NIBBLE: ; 2A00
0026F3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
0026F7r 1  04 05 06 07  
0026FBr 1  08 09 0A 0B  
002703r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
002707r 1  04 05 06 07  
00270Br 1  08 09 0A 0B  
002713r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
002717r 1  04 05 06 07  
00271Br 1  08 09 0A 0B  
002723r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
002727r 1  04 05 06 07  
00272Br 1  08 09 0A 0B  
002733r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
002737r 1  04 05 06 07  
00273Br 1  08 09 0A 0B  
002743r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
002747r 1  04 05 06 07  
00274Br 1  08 09 0A 0B  
002753r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
002757r 1  04 05 06 07  
00275Br 1  08 09 0A 0B  
002763r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
002767r 1  04 05 06 07  
00276Br 1  08 09 0A 0B  
002773r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
002777r 1  04 05 06 07  
00277Br 1  08 09 0A 0B  
002783r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
002787r 1  04 05 06 07  
00278Br 1  08 09 0A 0B  
002793r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
002797r 1  04 05 06 07  
00279Br 1  08 09 0A 0B  
0027A3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
0027A7r 1  04 05 06 07  
0027ABr 1  08 09 0A 0B  
0027B3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
0027B7r 1  04 05 06 07  
0027BBr 1  08 09 0A 0B  
0027C3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
0027C7r 1  04 05 06 07  
0027CBr 1  08 09 0A 0B  
0027D3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
0027D7r 1  04 05 06 07  
0027DBr 1  08 09 0A 0B  
0027E3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
0027E7r 1  04 05 06 07  
0027EBr 1  08 09 0A 0B  
0027F3r 1               
0027F3r 1               LOW_NIBBLE_TO_HEX: ;
0027F3r 1  30 31 32 33  .repeat 16
0027F7r 1  34 35 36 37  
0027FBr 1  38 39 01 02  
0028F3r 1               ;      0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
0028F3r 1               .byte  48, 49, 50, 51, 52, 53, 54, 55, 56, 57,  1,  2,  3,  4,  5,  6
0028F3r 1               .endrepeat
0028F3r 1               
0028F3r 1               HIGH_NIBBLE_TO_HEX: ;
0028F3r 1  30 30 30 30  .res 16,48
0028F7r 1  30 30 30 30  
0028FBr 1  30 30 30 30  
002903r 1  31 31 31 31  .res 16,49
002907r 1  31 31 31 31  
00290Br 1  31 31 31 31  
002913r 1  32 32 32 32  .res 16,50
002917r 1  32 32 32 32  
00291Br 1  32 32 32 32  
002923r 1  33 33 33 33  .res 16,51
002927r 1  33 33 33 33  
00292Br 1  33 33 33 33  
002933r 1  34 34 34 34  .res 16,52
002937r 1  34 34 34 34  
00293Br 1  34 34 34 34  
002943r 1  35 35 35 35  .res 16,53
002947r 1  35 35 35 35  
00294Br 1  35 35 35 35  
002953r 1  36 36 36 36  .res 16,54
002957r 1  36 36 36 36  
00295Br 1  36 36 36 36  
002963r 1  37 37 37 37  .res 16,55
002967r 1  37 37 37 37  
00296Br 1  37 37 37 37  
002973r 1  38 38 38 38  .res 16,56
002977r 1  38 38 38 38  
00297Br 1  38 38 38 38  
002983r 1  39 39 39 39  .res 16,57
002987r 1  39 39 39 39  
00298Br 1  39 39 39 39  
002993r 1  01 01 01 01  .res 16,1
002997r 1  01 01 01 01  
00299Br 1  01 01 01 01  
0029A3r 1  02 02 02 02  .res 16,2
0029A7r 1  02 02 02 02  
0029ABr 1  02 02 02 02  
0029B3r 1  03 03 03 03  .res 16,3
0029B7r 1  03 03 03 03  
0029BBr 1  03 03 03 03  
0029C3r 1  04 04 04 04  .res 16,4
0029C7r 1  04 04 04 04  
0029CBr 1  04 04 04 04  
0029D3r 1  05 05 05 05  .res 16,5
0029D7r 1  05 05 05 05  
0029DBr 1  05 05 05 05  
0029E3r 1  06 06 06 06  .res 16,6
0029E7r 1  06 06 06 06  
0029EBr 1  06 06 06 06  
0029F3r 1               
0029F3r 1               SCREEN_Y_TO_Z: ; 2B00 this is shifted to be within range so that 192 =0 and -16 is 255
0029F3r 1  EB EA E8 E7  .byte 235,234,232,231,230,229,227,226,225,224,223,221,220,219,218,216,215,214,213,211,210,209,208,207,205,204,203,202,200,199,198,197,195,194,193,192,191,189,188,187,186,184,183,182,181,179,178,177,176,175,173,172,171,170,168,167,166,165,163,162,161,160,159,157,156,155,154,152,151,150,149,147,146,145,144,143,141,140,139,138,136,135,134,133,131,130,129,128,127,125,124,123,122,120,119,118,117,115,114,113,112,111,109,108,107,106,104,103,102,101,99,98,97,96,95,93,92,91,90,88,87,86,85,83,82,81,80,79,77,76,75,74,72,71,70,69,67,66,65,64,63,61,60,59,58,56,55,54,53,51,50,49,48,47,45,44,43,42,40,39,38,37,35,34,33,32,31,29,28,27,26,24,23,22,21,19,18,17,16,15,13,12,11,10,8,7,6,5,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,253,252,251,250,248,247,246,245,243,242,241,240,239,237,236
0029F7r 1  E6 E5 E3 E2  
0029FBr 1  E1 E0 DF DD  
002AF3r 1               ;.byte 255,253,252,250,249,247,246,244,243,241,240,238,237,235,234,232,231,229,228,227,225,224,222,221,219,218,216,215,213,212,210,209,207,206,204,203,202,200,199,197,196,194,193,191,190,188,187,185,184,182,181,179,178,177,175,174,172,171,169,168,166,165,163,162,160,159,157,156,154,153,152,150,149,147,146,144,143,141,140,138,137,135,134,132,131,129,128,127,125,124,122,121,119,118,116,115,113,112,110,109,107,106,104,103,101,100,99,97,96,94,93,91,90,88,87,85,84,82,81,79,78,76,75,74,72,71,69,68,66,65,63,62,60,59,57,56,54,53,51,50,49,47,46,44,43,41,40,38,37,35,34,32,31,29,28,26,25,24,22,21,19,18,16,15,13,12,10,9,7,6,4,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255
002AF3r 1               ;.byte 255,253,251,250,248,247,245,243,242,240,239,237,235,234,232,231,229,227,226,224,223,221,220,218,216,215,213,212,210,208,207,205,204,202,200,199,197,196,194,192,191,189,188,186,185,183,181,180,178,177,175,173,172,170,169,167,165,164,162,161,159,158,156,154,153,151,150,148,146,145,143,142,140,138,137,135,134,132,130,129,127,126,124,123,121,119,118,116,115,113,111,110,108,107,105,103,102,100,99,97,95,94,92,91,89,88,86,84,83,81,80,78,76,75,73,72,70,68,67,65,64,62,61,59,57,56,54,53,51,49,48,46,45,43,41,40,38,37,35,33,32,30,29,27,26,24,22,21,19,18,16,14,13,11,10,8,6,5,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
002AF3r 1               
002AF3r 1               CONVERT_HEIGHTS_PIXELS: ; 2C00
002AF3r 1               ;.res 256,0
002AF3r 1               ;.byte 0,0,1,1,2,3,3,4,4,5,6,6,7,7,8,9,9,10,11,11,12,12,13,14,14,15,15,16,17,17,18,18,19,20,20,21,22,22,23,23,24,25,25,26,26,27,28,28,29,30,30,31,31,32,33,33,34,34,35,36,36,37,37,38,39,39,40,41,41,42,42,43,44,44,45,45,46,47,47,48,48,49,50,50,51,52,52,53,53,54,55,55,56,56,57,58,58,59,60,60,61,61,62,63,63,64,64,65,66,66,67,67,68,69,69,70,71,71,72,72,73,74,74,75,75,76,77,77,78,78,79,80,80,81,82,82,83,83,84,85,85,86,86,87,88,88,89,90,90,91,91,92,93,93,94,94,95,96,96,97,97,98,99,99,100,101,101,102,102,103,104,104,105,105,106,107,107,108,109,109,110,110,111,112,112,113,113,114,115,115,116,116,117,118,118,119,120,120,121,121,122,123,123,124,124,125,126,126,127,127,128,129,129,130,131,131,132,132,133,134,134,135,135,136,137,137,138,139,139,140,140,141,142,142,143,143,144,145,145,146,146,147,148,148,149,150,150,151,151,152,153,153,154,154,155,156
002AF3r 1  00 00 01 01  .byte 0,0,1,1,2,3,3,4,4,5,6,6,7,7,8,9,9,10,11,11,12,12,13,14,14,15,15,16,17,17,18,18,19,20,20,21,22,22,23,23,24,25,25,26,26,27,28,28,29,30,30,31,31,32,33,33,34,34,35,36,36,37,37,38,39,39,40,41,41,42,42,43,44,44,45,45,46,47,47,48,48,49,50,50,51,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52;,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52
002AF7r 1  02 03 03 04  
002AFBr 1  04 05 06 06  
002B73r 1  00 00 00 00  .res 128,0
002B77r 1  00 00 00 00  
002B7Br 1  00 00 00 00  
002BF3r 1               CONVERT_HEIGHTS_PIXELS_L:
002BF3r 1               ;.res 256,0
002BF3r 1  00 9C 39 D6  .byte 0,156,57,214,115,15,172,73,230,130,31,188,89,245,146,47,204,105,5,162,63,220,120,21,178,79,235,136,37,194,95,251,152,53,210,110,11,168,69,225,126,27,184,84,241,142,43,200,100,1,158,59,215,116,17,174,74,231,132,33,190,90,247,148,49,205,106,7,164,64,221,122,23,180,80,237,138,39,195,96,253,154,54,211,112,0,169,70,227,128,29,185,86,243,144,44,201,102,3,159,60,217,118,19,175,76,233,134,34,191,92,249,149,50,207,108,9,165,66,223,124,24,181,82,239,139,40,197,98,254,155,56,213,114,14,171,72,229,129,30,187,88,244,145,46,203,104,4,161,62,219,119,20,177,78,234,135,36,193,94,250,151,52,209,109,10,167,68,224,125,26,183,83,240,141,42,199,99,0,157,58,214,115,16,173,73,230,131,32,189,89,246,147,48,204,105,6,163,63,220,121,22,179,79,236,137,38,194,95,252,153,53,210,111,12,168,69,226,127,28,184,85,242,143,43,200,101,2,158,59,216,117,18,174,75,232,133,33,190,91,248,148,49,206,107,7,164,65,222,123,23,180,81,238,138,39
002BF7r 1  73 0F AC 49  
002BFBr 1  E6 82 1F BC  
002CF3r 1               
002CF3r 1               SUBCELL_X_COS_L:
002CF3r 1  00 FF FF FF  .byte $0,$FF,$FF,$FF,$FE,$FE,$FD,$FC,$FB,$F9,$F8,$F6,$F4,$F3,$F1,$EE,$EC,$EA,$E7,$E4,$E1,$DE,$DB,$D8,$D4,$D1,$CD,$C9,$C5,$C1,$BD,$B9,$B5,$B0,$AB,$A7,$A2,$9D,$98,$93,$8E,$88,$83,$7E,$78,$73,$6D,$67,$61,$5C,$56,$50,$4A,$44,$3E,$38,$31,$2B,$25,$1F,$19,$12,$C,$6,$0,$F9,$F3,$ED,$E6,$E0,$DA,$D4,$CE,$C7,$C1,$BB,$B5,$AF,$A9,$A3,$9E,$98,$92,$8C,$87,$81,$7C,$77,$71,$6C,$67,$62,$5D,$58,$54,$4F,$4A,$46,$42,$3E,$3A,$36,$32,$2E,$2B,$27,$24,$21,$1E,$1B,$18,$15,$13,$11,$E,$C,$B,$9,$7,$6,$4,$3,$2,$1,$1,$0,$0,$0,$0,$0,$0,$0,$1,$1,$2,$3,$4,$6,$7,$9,$B,$C,$E,$11,$13,$15,$18,$1B,$1E,$21,$24,$27,$2B,$2E,$32,$36,$3A,$3E,$42,$46,$4A,$4F,$54,$58,$5D,$62,$67,$6C,$71,$77,$7C,$81,$87,$8C,$92,$98,$9E,$A3,$A9,$AF,$B5,$BB,$C1,$C7,$CE,$D4,$DA,$E0,$E6,$ED,$F3,$F9,$0,$6,$C,$12,$19,$1F,$25,$2B,$31,$38,$3E,$44,$4A,$50,$56,$5C,$61,$67,$6D,$73,$78,$7E,$83,$88,$8E,$93,$98,$9D,$A2,$A7,$AB,$B0,$B5,$B9,$BD,$C1,$C5,$C9,$CD,$D1,$D4,$D8,$DB,$DE,$E1,$E4,$E7,$EA,$EC,$EE,$F1,$F3,$F4,$F6,$F8,$F9,$FB,$FC,$FD,$FE,$FE,$FF,$FF,$FF
002CF7r 1  FE FE FD FC  
002CFBr 1  FB F9 F8 F6  
002DF3r 1               SUBCELL_X_COS_H:
002DF3r 1  01 00 00 00  .byte
002DF7r 1  00 00 00 00  
002DFBr 1  00 00 00 00  
002EF3r 1               SUBCELL_X_SIN_H:
002EF3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
002EF7r 1  00 00 00 00  
002EFBr 1  00 00 00 00  
002FF3r 1               SUBCELL_X_SIN_L:
002FF3r 1  00 05 0A 10  .byte $0,$5,$A,$10,$15,$1B,$20,$25,$2B,$30,$35,$3B,$40,$45,$4A,$4F,$54,$59,$5E,$63,$68,$6D,$71,$76,$7B,$7F,$84,$88,$8C,$90,$94,$98,$9C,$A0,$A4,$A7,$AB,$AE,$B2,$B5,$B8,$BB,$BE,$C0,$C3,$C6,$C8,$CA,$CC,$CE,$D0,$D2,$D4,$D5,$D7,$D8,$D9,$DA,$DB,$DC,$DC,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DC,$DC,$DB,$DA,$D9,$D8,$D7,$D5,$D4,$D2,$D0,$CE,$CC,$CA,$C8,$C6,$C3,$C0,$BE,$BB,$B8,$B5,$B2,$AE,$AB,$A7,$A4,$A0,$9C,$98,$94,$90,$8C,$88,$84,$7F,$7B,$76,$71,$6D,$68,$63,$5E,$59,$54,$4F,$4A,$45,$40,$3B,$35,$30,$2B,$25,$20,$1B,$15,$10,$A,$5,$0,$FA,$F5,$EF,$EA,$E4,$DF,$DA,$D4,$CF,$CA,$C4,$BF,$BA,$B5,$B0,$AB,$A6,$A1,$9C,$97,$92,$8E,$89,$84,$80,$7B,$77,$73,$6F,$6B,$67,$63,$5F,$5B,$58,$54,$51,$4D,$4A,$47,$44,$41,$3F,$3C,$39,$37,$35,$33,$31,$2F,$2D,$2B,$2A,$28,$27,$26,$25,$24,$23,$23,$22,$22,$22,$22,$22,$22,$22,$23,$23,$24,$25,$26,$27,$28,$2A,$2B,$2D,$2F,$31,$33,$35,$37,$39,$3C,$3F,$41,$44,$47,$4A,$4D,$51,$54,$58,$5B,$5F,$63,$67,$6B,$6F,$73,$77,$7B,$80,$84,$89,$8E,$92,$97,$9C,$A1,$A6,$AB,$B0,$B5,$BA,$BF,$C4,$CA,$CF,$D4,$DA,$DF,$E4,$EA,$EF,$F5,$FA
002FF7r 1  15 1B 20 25  
002FFBr 1  2B 30 35 3B  
0030F3r 1               SUBCELL_Y_COS_H:
0030F3r 1  00 00 00 00  .byte
0030F7r 1  00 00 00 00  
0030FBr 1  00 00 00 00  
0031F3r 1               SUBCELL_Y_COS_L:
0031F3r 1  9C 9C 9C 9C  .byte $9C,$9C,$9C,$9C,$9C,$9B,$9B,$9A,$99,$98,$98,$97,$96,$94,$93,$92,$90,$8F,$8D,$8C,$8A,$88,$86,$84,$82,$80,$7D,$7B,$79,$76,$74,$71,$6E,$6C,$69,$66,$63,$60,$5D,$5A,$57,$53,$50,$4D,$49,$46,$43,$3F,$3B,$38,$34,$31,$2D,$29,$26,$22,$1E,$1A,$17,$13,$F,$B,$7,$3,$0,$FC,$F8,$F4,$F0,$EC,$E8,$E5,$E1,$DD,$D9,$D6,$D2,$CE,$CB,$C7,$C4,$C0,$BC,$B9,$B6,$B2,$AF,$AC,$A8,$A5,$A2,$9F,$9C,$99,$96,$93,$91,$8E,$8B,$89,$86,$84,$82,$7F,$7D,$7B,$79,$77,$75,$73,$72,$70,$6F,$6D,$6C,$6B,$69,$68,$67,$67,$66,$65,$64,$64,$63,$63,$63,$63,$63,$63,$63,$63,$63,$64,$64,$65,$66,$67,$67,$68,$69,$6B,$6C,$6D,$6F,$70,$72,$73,$75,$77,$79,$7B,$7D,$7F,$82,$84,$86,$89,$8B,$8E,$91,$93,$96,$99,$9C,$9F,$A2,$A5,$A8,$AC,$AF,$B2,$B6,$B9,$BC,$C0,$C4,$C7,$CB,$CE,$D2,$D6,$D9,$DD,$E1,$E5,$E8,$EC,$F0,$F4,$F8,$FC,$0,$3,$7,$B,$F,$13,$17,$1A,$1E,$22,$26,$29,$2D,$31,$34,$38,$3B,$3F,$43,$46,$49,$4D,$50,$53,$57,$5A,$5D,$60,$63,$66,$69,$6C,$6E,$71,$74,$76,$79,$7B,$7D,$80,$82,$84,$86,$88,$8A,$8C,$8D,$8F,$90,$92,$93,$94,$96,$97,$98,$98,$99,$9A,$9B,$9B,$9C,$9C,$9C,$9C
0031F7r 1  9C 9B 9B 9A  
0031FBr 1  99 98 98 97  
0032F3r 1               SUBCELL_Y_SIN_H:
0032F3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
0032F7r 1  00 00 00 00  
0032FBr 1  00 00 00 00  
0033F3r 1               SUBCELL_Y_SIN_L:
0033F3r 1  00 04 08 0D  .byte $0,$4,$8,$D,$11,$16,$1A,$1E,$23,$27,$2B,$30,$34,$38,$3C,$41,$45,$49,$4D,$51,$55,$59,$5D,$60,$64,$68,$6B,$6F,$72,$76,$79,$7C,$7F,$83,$86,$89,$8B,$8E,$91,$93,$96,$98,$9B,$9D,$9F,$A1,$A3,$A5,$A7,$A8,$AA,$AB,$AD,$AE,$AF,$B0,$B1,$B2,$B3,$B3,$B4,$B4,$B4,$B4,$B5,$B4,$B4,$B4,$B4,$B3,$B3,$B2,$B1,$B0,$AF,$AE,$AD,$AB,$AA,$A8,$A7,$A5,$A3,$A1,$9F,$9D,$9B,$98,$96,$93,$91,$8E,$8B,$89,$86,$83,$80,$7C,$79,$76,$72,$6F,$6B,$68,$64,$60,$5D,$59,$55,$51,$4D,$49,$45,$41,$3C,$38,$34,$30,$2B,$27,$23,$1E,$1A,$16,$11,$D,$8,$4,$0,$FB,$F7,$F2,$EE,$E9,$E5,$E1,$DC,$D8,$D4,$CF,$CB,$C7,$C3,$BE,$BA,$B6,$B2,$AE,$AA,$A6,$A2,$9F,$9B,$97,$94,$90,$8D,$89,$86,$83,$80,$7C,$79,$76,$74,$71,$6E,$6C,$69,$67,$64,$62,$60,$5E,$5C,$5A,$58,$57,$55,$54,$52,$51,$50,$4F,$4E,$4D,$4C,$4C,$4B,$4B,$4B,$4B,$4A,$4B,$4B,$4B,$4B,$4C,$4C,$4D,$4E,$4F,$50,$51,$52,$54,$55,$57,$58,$5A,$5C,$5E,$60,$62,$64,$67,$69,$6C,$6E,$71,$74,$76,$79,$7C,$80,$83,$86,$89,$8D,$90,$94,$97,$9B,$9F,$A2,$A6,$AA,$AE,$B2,$B6,$BA,$BE,$C3,$C7,$CB,$CF,$D4,$D8,$DC,$E1,$E5,$E9,$EE,$F2,$F7,$FB
0033F7r 1  11 16 1A 1E  
0033FBr 1  23 27 2B 30  
0034F3r 1               
0034F3r 1               MOVE_Y_H:
0034F3r 1  00 00 00 00  .byte
0034F7r 1  00 00 00 00  
0034FBr 1  00 00 00 00  
0035F3r 1               MOVE_Y_L:
0035F3r 1  08 07 07 07  .byte $8,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$6,$6,$6,$6,$6,$6,$6,$6,$6,$5,$5,$5,$5,$5,$5,$5,$4,$4,$4,$4,$4,$4,$3,$3,$3,$3,$3,$3,$2,$2,$2,$2,$2,$1,$1,$1,$1,$1,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF,$FF,$0,$0,$0,$0,$0,$0,$1,$1,$1,$1,$1,$2,$2,$2,$2,$2,$3,$3,$3,$3,$3,$3,$4,$4,$4,$4,$4,$4,$5,$5,$5,$5,$5,$5,$5,$6,$6,$6,$6,$6,$6,$6,$6,$6,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7
0035F7r 1  07 07 07 07  
0035FBr 1  07 07 07 07  
0036F3r 1               MOVE_X_H:
0036F3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
0036F7r 1  00 00 00 00  
0036FBr 1  00 00 00 00  
0037F3r 1               MOVE_X_L:
0037F3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$1,$1,$1,$1,$1,$1,$2,$2,$2,$2,$2,$2,$2,$3,$3,$3,$3,$3,$3,$3,$4,$4,$4,$4,$4,$4,$4,$5,$5,$5,$5,$5,$5,$5,$5,$5,$5,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$5,$5,$5,$5,$5,$5,$5,$5,$5,$5,$4,$4,$4,$4,$4,$4,$4,$3,$3,$3,$3,$3,$3,$3,$2,$2,$2,$2,$2,$2,$2,$1,$1,$1,$1,$1,$1,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FB,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF,$FF
0037F7r 1  00 00 01 01  
0037FBr 1  01 01 01 01  
0038F3r 1               
0038F3r 1               
0038F3r 1               WORLD_SPRITE_CENTER_XH: ; 128 bytes
0038F3r 1  64 64 64 64  .byte $64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$65,$65,$65,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$65,$65,$65,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$65,$65,$65,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64
0038F7r 1  64 64 64 64  
0038FBr 1  64 64 64 64  
003973r 1               WORLD_SPRITE_CENTER_XL: ; 128 bytes
003973r 1  00 0D 1B 29  .byte $0,$D,$1B,$29,$36,$43,$51,$5E,$6B,$78,$85,$92,$9F,$AB,$B8,$C4,$D1,$DD,$E9,$F6,$2,$E,$A,$FE,$F2,$E5,$D9,$CD,$C0,$B4,$A7,$9A,$8E,$81,$74,$67,$5A,$4C,$3F,$32,$24,$16,$9,$4,$12,$20,$2D,$3B,$48,$55,$62,$6F,$7C,$89,$96,$A3,$B0,$BC,$C9,$D5,$E1,$EE,$FA,$6,$12,$13,$FA,$EE,$E1,$D5,$C9,$BC,$B0,$A3,$96,$89,$7C,$6F,$62,$55,$48,$3B,$2D,$20,$12,$4,$9,$16,$24,$32,$3F,$4C,$5A,$67,$74,$81,$8E,$9A,$A7,$B4,$C0,$CD,$D9,$E5,$F2,$FE,$A,$E,$2,$F6,$E9,$DD,$D1,$C4,$B8,$AB,$9F,$92,$85,$78,$6B,$5E,$51,$43,$36,$29,$1B,$D
003977r 1  36 43 51 5E  
00397Br 1  6B 78 85 92  
0039F3r 1               WORLD_SPRITE_CENTER_YH: ; 128 bytes
0039F3r 1  4C 4C 4C 4C  .byte $4C,$4C,$4C,$4C,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4C,$4C,$4C,$4C,$4C,$4C,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4C,$4C,$4C,$4C,$4C,$4C,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4C,$4C,$4C
0039F7r 1  4B 4B 4B 4B  
0039FBr 1  4B 4B 4B 4B  
003A73r 1               WORLD_SPRITE_CENTER_YL: ; 128 bytes
003A73r 1  19 11 08 00  .byte $19,$11,$8,$0,$F7,$EE,$E6,$DD,$D4,$CB,$C2,$B9,$B0,$A7,$9D,$94,$8B,$81,$78,$6E,$64,$5B,$5E,$68,$71,$7B,$84,$8E,$97,$A0,$AA,$B3,$BC,$C5,$CE,$D7,$E0,$E8,$F1,$FA,$3,$B,$14,$17,$E,$5,$FD,$F4,$EB,$E3,$DA,$D1,$C8,$BF,$B6,$AD,$A3,$9A,$91,$87,$7E,$74,$6B,$61,$57,$57,$6B,$74,$7E,$87,$91,$9A,$A3,$AD,$B6,$BF,$C8,$D1,$DA,$E3,$EB,$F4,$FD,$5,$E,$17,$14,$B,$3,$FA,$F1,$E8,$E0,$D7,$CE,$C5,$BC,$B3,$AA,$A0,$97,$8E,$84,$7B,$71,$68,$5E,$5B,$64,$6E,$78,$81,$8B,$94,$9D,$A7,$B0,$B9,$C2,$CB,$D4,$DD,$E6,$EE,$F7,$0,$8,$11
003A77r 1  F7 EE E6 DD  
003A7Br 1  D4 CB C2 B9  
003AF3r 1               
003AF3r 1               WORLD_SPRITE_NUM_lookies: ; 128 bytes
003AF3r 1               ;      0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
003AF3r 1  00 00 00 00  .byte   0,  0,  0,  0, 32, 32, 32, 32, 32, 32, 64, 64, 64, 64, 64, 64
003AF7r 1  20 20 20 20  
003AFBr 1  20 20 40 40  
003B03r 1  40 40 60 60  .byte  64, 64, 96, 96,160,160,160, 96, 96, 96, 64, 64, 64, 64, 64, 64
003B07r 1  A0 A0 A0 60  
003B0Br 1  60 60 40 40  
003B13r 1  40 40 20 20  .byte  64, 64, 32, 32, 32, 32, 32, 32,  0,  0,  0,  0,  0,  0, 32, 32
003B17r 1  20 20 20 20  
003B1Br 1  00 00 00 00  
003B23r 1  20 20 20 20  .byte  32, 32, 32, 32, 32, 64, 64, 64, 64, 64, 64, 64, 96, 96, 96,160
003B27r 1  20 40 40 40  
003B2Br 1  40 40 40 40  
003B33r 1  A0 A0 60 60  .byte 160,160, 96, 96, 96, 64, 64, 64, 64, 64, 64, 64, 32, 32, 32, 32
003B37r 1  60 40 40 40  
003B3Br 1  40 40 40 40  
003B43r 1  20 20 20 00  .byte  32, 32, 32,  0,  0,  0,  0,  0,  0, 32, 32, 32, 32, 32, 32, 64
003B47r 1  00 00 00 00  
003B4Br 1  00 20 20 20  
003B53r 1  40 40 40 40  .byte  64, 64, 64, 64, 64, 64, 64, 96, 96, 96,160,160,160, 96, 96, 64
003B57r 1  40 40 40 60  
003B5Br 1  60 60 A0 A0  
003B63r 1  40 40 40 40  .byte  64, 64, 64, 64, 64, 64, 64, 32, 32, 32, 32, 32, 32,  0,  0,  0
003B67r 1  40 40 40 20  
003B6Br 1  20 20 20 20  
003B73r 1               WORLD_WALL_SPRITE_NUM_lookies:
003B73r 1  80 80 80 80  .byte 128,128,128,128,128,128,128,128,128,128,192,192,192,192,192,192
003B77r 1  80 80 80 80  
003B7Br 1  80 80 C0 C0  
003B83r 1  C0 C0 C0 C0  .byte 192,192,192,192,224,224,224,192,192,192,192,192,192,192,192,192
003B87r 1  E0 E0 E0 C0  
003B8Br 1  C0 C0 C0 C0  
003B93r 1  C0 C0 80 80  .byte 192,192,128,128,128,128,128,128,128,128,128,128,128,128,128,128
003B97r 1  80 80 80 80  
003B9Br 1  80 80 80 80  
003BA3r 1  80 80 80 80  .byte 128,128,128,128,128,192,192,192,192,192,192,192,192,192,192,224
003BA7r 1  80 C0 C0 C0  
003BABr 1  C0 C0 C0 C0  
003BB3r 1  E0 E0 C0 C0  .byte 224,224,192,192,192,192,192,192,192,192,192,192,128,128,128,128
003BB7r 1  C0 C0 C0 C0  
003BBBr 1  C0 C0 C0 C0  
003BC3r 1  80 80 80 80  .byte 128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,192
003BC7r 1  80 80 80 80  
003BCBr 1  80 80 80 80  
003BD3r 1  C0 C0 C0 C0  .byte 192,192,192,192,192,192,192,192,192,192,224,224,224,192,192,192
003BD7r 1  C0 C0 C0 C0  
003BDBr 1  C0 C0 E0 E0  
003BE3r 1  C0 C0 C0 C0  .byte 192,192,192,192,192,192,192,128,128,128,128,128,128,128,128,128
003BE7r 1  C0 C0 C0 80  
003BEBr 1  80 80 80 80  
003BF3r 1               
003BF3r 1               SPRITE_ADDRESS_LOW_HIGH:
003BF3r 1  00 00 00 00  .byte 0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31
003BF7r 1  00 00 00 00  
003BFBr 1  01 01 01 01  
003CF3r 1               
003CF3r 1               SPRITE_ADDRESS_LOW_LOW:
003CF3r 1  00 20 40 60  .byte 0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224
003CF7r 1  80 A0 C0 E0  
003CFBr 1  00 20 40 60  
003DF3r 1               
003DF3r 1               NIBBLE_SWAPPER:
003DF3r 1               ;      0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
003DF3r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003DF7r 1  40 50 60 70  
003DFBr 1  80 90 A0 B0  
003E03r 1  01 11 21 31  .byte $01,$11,$21,$31,$41,$51,$61,$71,$81,$91,$A1,$B1,$C1,$D1,$E1,$F1
003E07r 1  41 51 61 71  
003E0Br 1  81 91 A1 B1  
003E13r 1  02 12 22 32  .byte $02,$12,$22,$32,$42,$52,$62,$72,$82,$92,$A2,$B2,$C2,$D2,$E2,$F2
003E17r 1  42 52 62 72  
003E1Br 1  82 92 A2 B2  
003E23r 1  03 13 23 33  .byte $03,$13,$23,$33,$43,$53,$63,$73,$83,$93,$A3,$B3,$C3,$D3,$E3,$F3
003E27r 1  43 53 63 73  
003E2Br 1  83 93 A3 B3  
003E33r 1  04 14 24 34  .byte $04,$14,$24,$34,$44,$54,$64,$74,$84,$94,$A4,$B4,$C4,$D4,$E4,$F4
003E37r 1  44 54 64 74  
003E3Br 1  84 94 A4 B4  
003E43r 1  05 15 25 35  .byte $05,$15,$25,$35,$45,$55,$65,$75,$85,$95,$A5,$B5,$C5,$D5,$E5,$F5
003E47r 1  45 55 65 75  
003E4Br 1  85 95 A5 B5  
003E53r 1  06 16 26 36  .byte $06,$16,$26,$36,$46,$56,$66,$76,$86,$96,$A6,$B6,$C6,$D6,$E6,$F6
003E57r 1  46 56 66 76  
003E5Br 1  86 96 A6 B6  
003E63r 1  07 17 27 37  .byte $07,$17,$27,$37,$47,$57,$67,$77,$87,$97,$A7,$B7,$C7,$D7,$E7,$F7
003E67r 1  47 57 67 77  
003E6Br 1  87 97 A7 B7  
003E73r 1  08 18 28 38  .byte $08,$18,$28,$38,$48,$58,$68,$78,$88,$98,$A8,$B8,$C8,$D8,$E8,$F8
003E77r 1  48 58 68 78  
003E7Br 1  88 98 A8 B8  
003E83r 1  09 19 29 39  .byte $09,$19,$29,$39,$49,$59,$69,$79,$89,$99,$A9,$B9,$C9,$D9,$E9,$F9
003E87r 1  49 59 69 79  
003E8Br 1  89 99 A9 B9  
003E93r 1  0A 1A 2A 3A  .byte $0A,$1A,$2A,$3A,$4A,$5A,$6A,$7A,$8A,$9A,$AA,$BA,$CA,$DA,$EA,$FA
003E97r 1  4A 5A 6A 7A  
003E9Br 1  8A 9A AA BA  
003EA3r 1  0B 1B 2B 3B  .byte $0B,$1B,$2B,$3B,$4B,$5B,$6B,$7B,$8B,$9B,$AB,$BB,$CB,$DB,$EB,$FB
003EA7r 1  4B 5B 6B 7B  
003EABr 1  8B 9B AB BB  
003EB3r 1  0C 1C 2C 3C  .byte $0C,$1C,$2C,$3C,$4C,$5C,$6C,$7C,$8C,$9C,$AC,$BC,$CC,$DC,$EC,$FC
003EB7r 1  4C 5C 6C 7C  
003EBBr 1  8C 9C AC BC  
003EC3r 1  0D 1D 2D 3D  .byte $0D,$1D,$2D,$3D,$4D,$5D,$6D,$7D,$8D,$9D,$AD,$BD,$CD,$DD,$ED,$FD
003EC7r 1  4D 5D 6D 7D  
003ECBr 1  8D 9D AD BD  
003ED3r 1  0E 1E 2E 3E  .byte $0E,$1E,$2E,$3E,$4E,$5E,$6E,$7E,$8E,$9E,$AE,$BE,$CE,$DE,$EE,$FE
003ED7r 1  4E 5E 6E 7E  
003EDBr 1  8E 9E AE BE  
003EE3r 1  0F 1F 2F 3F  .byte $0F,$1F,$2F,$3F,$4F,$5F,$6F,$7F,$8F,$9F,$AF,$BF,$CF,$DF,$EF,$FF
003EE7r 1  4F 5F 6F 7F  
003EEBr 1  8F 9F AF BF  
003EF3r 1               
003EF3r 1               LOW_NIBBLE_HIGH:
003EF3r 1               ;      0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
003EF3r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003EF7r 1  40 50 60 70  
003EFBr 1  80 90 A0 B0  
003F03r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003F07r 1  40 50 60 70  
003F0Br 1  80 90 A0 B0  
003F13r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003F17r 1  40 50 60 70  
003F1Br 1  80 90 A0 B0  
003F23r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003F27r 1  40 50 60 70  
003F2Br 1  80 90 A0 B0  
003F33r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003F37r 1  40 50 60 70  
003F3Br 1  80 90 A0 B0  
003F43r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003F47r 1  40 50 60 70  
003F4Br 1  80 90 A0 B0  
003F53r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003F57r 1  40 50 60 70  
003F5Br 1  80 90 A0 B0  
003F63r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003F67r 1  40 50 60 70  
003F6Br 1  80 90 A0 B0  
003F73r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003F77r 1  40 50 60 70  
003F7Br 1  80 90 A0 B0  
003F83r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003F87r 1  40 50 60 70  
003F8Br 1  80 90 A0 B0  
003F93r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003F97r 1  40 50 60 70  
003F9Br 1  80 90 A0 B0  
003FA3r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003FA7r 1  40 50 60 70  
003FABr 1  80 90 A0 B0  
003FB3r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003FB7r 1  40 50 60 70  
003FBBr 1  80 90 A0 B0  
003FC3r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003FC7r 1  40 50 60 70  
003FCBr 1  80 90 A0 B0  
003FD3r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003FD7r 1  40 50 60 70  
003FDBr 1  80 90 A0 B0  
003FE3r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003FE7r 1  40 50 60 70  
003FEBr 1  80 90 A0 B0  
003FF3r 1               
003FF3r 1               MISSING_ONE_NEIGHBOR_MUL:
003FF3r 1  00 01 02 04  .byte 0,1,2,4,5,6,7,8,10,11,12,13,14,16,17,18,19,20,22,23,24,25,26,28,29,30,31,32,34,35,36,37,38,40,41,42,43,44,46,47,48,49,50,52,53,54,55,56,58,59,60,61,62,64,65,66,67,68,70,71,72,73,74,76,77,78,79,80,82,83,84,85,86,88,89,90,91,92,94,95,96,97,98,100,101,102,103,104,106,107,108,109,110,112,113,114,115,116,118,119,120,121,122,124,125,126,127,128,130,131,132,133,134,136,137,138,139,140,142,143,144,145,146,148,149,150,151,152,154,155,156,157,158,160,161,162,163,164,166,167,168,169,170,172,173,174,175,176,178,179,180,181,182,184,185,186,187,188,190,191,192,193,194,196,197,198,199,200,202,203,204,205,206,208,209,210,211,212,214,215,216,217,218,220,221,222,223,224,226,227,228,229,230,232,233,234,235,236,238,239,240,241,242,244,245,246,247,248,250,251,252,253,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
003FF7r 1  05 06 07 08  
003FFBr 1  0A 0B 0C 0D  
0040F3r 1               
0040F3r 1               MISSING_TWO_NEIGHBOR_MUL:
0040F3r 1  00 02 03 05  .byte 0,2,3,5,6,8,9,11,12,14,15,17,18,20,21,23,24,26,27,29,30,32,33,35,36,38,39,41,42,44,45,47,48,50,51,53,54,56,57,59,60,62,63,65,66,68,69,71,72,74,75,77,78,80,81,83,84,86,87,89,90,92,93,95,96,98,99,101,102,104,105,107,108,110,111,113,114,116,117,119,120,122,123,125,126,128,129,131,132,134,135,137,138,140,141,143,144,146,147,149,150,152,153,155,156,158,159,161,162,164,165,167,168,170,171,173,174,176,177,179,180,182,183,185,186,188,189,191,192,194,195,197,198,200,201,203,204,206,207,209,210,212,213,215,216,218,219,221,222,224,225,227,228,230,231,233,234,236,237,239,240,242,243,245,246,248,249,251,252,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
0040F7r 1  06 08 09 0B  
0040FBr 1  0C 0E 0F 11  
0041F3r 1               BUFFER_A_OFFSETS_HIGH: ; 128 bytes
0041F3r 1  18 18 19 19  .byte 24,24,25,25,26,27,27,28,29,29,30,30,31,32,32,33,34,34,35,35,36,37,37,38,39,39,40,40,41,42,42,43,44,44,45,45,46,47,47,48,49,49,50,50,51,52,52,53,54,54,55,55,56,57,57,58,59,59,60,60,61,62,62,63,64,64,65,65,66,67,67,68,69,69,70,70,71,72,72,73,74,74,75,75,76,77,77,78,79,79,80,80,81,82,82,83,84,84,85,85,86,87,87,88,89,89,90,90,91,92,92,93,94,94,95,95,96,97,97,98,99,99,100,100,101,102,102,103
0041F7r 1  1A 1B 1B 1C  
0041FBr 1  1D 1D 1E 1E  
004273r 1               
004273r 1               BITMAP_OFFSETS_LOW: ; 128 bytes
004273r 1  00 A0 40 E0  .byte 0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96
004277r 1  80 20 C0 60  
00427Br 1  00 A0 40 E0  
0042F3r 1               
0042F3r 1               BUFFER_B_OFFSETS_HIGH: ; 128 bytes
0042F3r 1  80 80 81 81  .byte 128,128,129,129,130,131,131,132,133,133,134,134,135,136,136,137,138,138,139,139,140,141,141,142,143,143,144,144,145,146,146,147,148,148,149,149,150,151,151,152,153,153,154,154,155,156,156,157,158,158,159,159,160,161,161,162,163,163,164,164,165,166,166,167,168,168,169,169,170,171,171,172,173,173,174,174,175,176,176,177,178,178,179,179,180,181,181,182,183,183,184,184,185,186,186,187,188,188,189,189,190,191,191,192,193,193,194,194,195,196,196,197,198,198,199,199,200,201,201,202,203,203,204,204,205,206,206,207
0042F7r 1  82 83 83 84  
0042FBr 1  85 85 86 86  
004373r 1               
004373r 1               
004373r 1               
004373r 1               ;constants
004373r 1               ;--------------------------------
004373r 1               
004373r 1               ; RAM Interrupt Vectors
004373r 1               IRQVec            = $0314
004373r 1               
004373r 1               ; VERA
004373r 1               VERA_addr_low     = $9F20
004373r 1               VERA_addr_high    = $9F21
004373r 1               VERA_addr_bank    = $9F22
004373r 1               VERA_data0        = $9F23
004373r 1               VERA_data1        = $9F24
004373r 1               VERA_ctrl         = $9F25
004373r 1               VERA_ien          = $9F26
004373r 1               VERA_isr          = $9F27
004373r 1               VERA_dc_video     = $9F29 ; DCSEL = 0
004373r 1               FX_CTRL           = $9F29 ; DCSEL = 2
004373r 1               FX_MULT           = $9F2C ; DCSEL = 2
004373r 1               FX_CACHE_L        = $9F29 ; DCSEL = 6
004373r 1               FX_CACHE_M        = $9F2A
004373r 1               FX_CACHE_H        = $9F2B
004373r 1               FX_CACHE_U        = $9F2C
004373r 1               ;   Current Field | Sprites Enable | Layer1 Enable  |Layer0 Enable
004373r 1               ; NTSC/RGB: 240P  | NTSC: Chroma Disable / RGB: HV Sync Output Mode
004373r 1               
004373r 1               VERA_dc_hscale    = $9F2A
004373r 1               VERA_dc_vscale    = $9F2B
004373r 1               
004373r 1               VERA_L0_config    = $9F2D
004373r 1               ;   7       6     5   4       3       2             1   0
004373r 1               ;   Map Height | Map Width | T256C | Bitmap Mode | Color Depth
004373r 1               ;   0 - 32                  0 - 16    0 tiled       0   1bpp mono
004373r 1               ;   1 - 64                  1 - 256   1 enabled     1   2bpp 4 color
004373r 1               ;   2 - 128                                         2   4bpp 16 color
004373r 1               ;   3 - 256                                         3   8bpp 256 color
004373r 1               ;   bitmap mode - tilebase points to bitmap data, mapbase not used
004373r 1               ;   tile width = 0 is 320 pixels / tile width=1 is 640 pixels.. so could do 4bpp x 320?
004373r 1               ;   The palette offset (in 'H-Scroll (11:8)') modifies the color indexes of the bitmap in the same way as in the tile modes.
004373r 1               
004373r 1               VERA_L0_mapbase   = $9F2E
004373r 1               VERA_L0_tilebase  = $9F2F ;   Tile Base Address (16:11) | Tile Height 0-8/1-16 | Tile Width 0-8/1-16
004373r 1               VERA_L0_HSCROLL_L = $9F30 ;  H-Scroll (7:0)
004373r 1               VERA_L0_HSCROLL_H = $9F31 ;  - H-Scroll (11:8)
004373r 1               VERA_L0_VSCROLL_L = $9F32 ;  V-Scroll (7:0)
004373r 1               VERA_L0_VSCROLL_H = $9F33 ;  - V-Scroll (11:8)
004373r 1               
004373r 1               VERA_L1_config    = $9F34
004373r 1               VERA_L1_mapbase   = $9F35
004373r 1               VERA_L1_tilebase  = $9F36
004373r 1               VERA_L1_HSCROLL_L = $9F37 ;  H-Scroll (7:0)
004373r 1               VERA_L1_HSCROLL_H = $9F38 ;  - H-Scroll (11:8)
004373r 1               VERA_L1_VSCROLL_L = $9F39 ;  V-Scroll (7:0)
004373r 1               VERA_L1_VSCROLL_H = $9F3A ;  - V-Scroll (11:8)
004373r 1               
004373r 1               VSYNC_BIT         = $01
004373r 1               
004373r 1               ; VRAM Addresses
004373r 1               ;   Address range Description
004373r 1               ;   $00000 - $1F9BF Video RAM   - 129,424 bytes -> 126K is 129,024 (1F800)
004373r 1               ;   $1F9C0 - $1F9FF PSG registers
004373r 1               ;   $1FA00 - $1FBFF Palette
004373r 1               ;   $1FC00 - $1FFFF Sprite attributes
004373r 1               VRAM_SPRITES =      $00000  ; putting sprite data at start of VRAM for now.. may move later?
004373r 1               VRAM_BITMAP_LAYERA =$11800  ; setting this to 68K ; was starts at 70K ... so up to ~70K for sprites.. not too shabby..
004373r 1               VRAM_BITMAP_LAYERB =$18000  ; ~25K needs to start at 2K boundary... 121.5-25= 96k
004373r 1               VRAM_TEXT_SCREEN =  $1E400  ; 121.5K    256 x 21 => 32 x 24 would take 1.5K tiles is min.. 64*32 = 2K 8 config..
004373r 1               VRAM_SPRITE_BUF =   $1EC00  ; 123K - sprite attribute buffer for swapping data in ..
004373r 1               VRAM_CHARSET =      $1F000  ;  $1:F000-$1:F7FF Charset loaded by kernal here .. is at 124K ..
004373r 1               ; only can go to 126K ...
004373r 1               VRAM_palette      = $1FA00      ;
004373r 1               VRAM_sprite_attributes = $1FC00
004373r 1               
004373r 1               SPRITES_ONLY_VGA = $41
004373r 1               SPRITES_LAYER1_LAYER0_VGA = $71
004373r 1               
004373r 1               
004373r 1               ; Kernal
004373r 1               CHROUT            = $FFD2
004373r 1               GETIN             = $FFE4
004373r 1               CINT              = $FF81
004373r 1               
004373r 1               
004373r 1               ; PETSCII Codes
004373r 1               WHITE             = $05
004373r 1               RETURN            = $0D
004373r 1               SPACE             = $20
004373r 1               ZERO_CHAR         = $30
004373r 1               ONE_CHAR          = $31
004373r 1               TWO_CHAR          = $32
004373r 1               THREE_CHAR        = $33
004373r 1               FOUR_CHAR         = $34
004373r 1               FIVE_CHAR         = $35
004373r 1               SIX_CHAR          = $36
004373r 1               SEVEN_CHAR        = $37
004373r 1               EIGHT_CHAR        = $38
004373r 1               NINE_CHAR         = $39
004373r 1               
004373r 1               A_CHAR            = $41
004373r 1               C_CHAR            = $43
004373r 1               D_CHAR            = $44
004373r 1               E_CHAR            = $45
004373r 1               I_CHAR            = $49
004373r 1               J_CHAR            = $4A
004373r 1               K_CHAR            = $4B
004373r 1               L_CHAR            = $4C
004373r 1               O_CHAR            = $4F
004373r 1               T_CHAR            = $54
004373r 1               W_CHAR            = $57
004373r 1               X_CHAR            = $58
004373r 1               Y_CHAR            = $59
004373r 1               Z_CHAR            = $5A
004373r 1               
004373r 1               CLR               = $93
004373r 1               
004373r 1               ; 	$0800-$9EFF	BASIC program/variables; available to the user
004373r 1               WORLD_DATA = $6000 	;	so is %100 [Y 5 bits ] : [ab] 0 [X - 6 bits
004373r 1               SCREEN_buffer = $8000
004373r 1               
004373r 1               ; zero page layout $0022-$007F is available to user
004373r 1               ZP_PTR = $22
004373r 1               SCRATCH_PTR = $7E
004373r 1               
004373r 1               SPRITE_SIZE_ORA = $D0 ; $D0 for 16x64, $50 for 16x16
004373r 1               
004373r 1               diff_sprite_to_transparent = 15
004373r 1               
004373r 1               SCREEN_OUT_RIGHT  = 160 ; right of middle is 116, +48 = 164
004373r 1               SCREEN_OUT_LEFT8    = 256-8
004373r 1               SCREEN_OUT_LEFT16   = 256-16  ; left of middle is 100, -48=52-16=36
004373r 1               SCREEN_OUT_LEFT32   = 256-32  ; left of middle is 100, -48=52-16=36
004373r 1               SCREEN_OUT_LEFT64   = 256-64  ; left of middle is 100, -48=52-16=36
004373r 1               SCREEN_OUT_TOP     = 240
004373r 1               SCREEN_OUT_BOTTOM  = 120
004373r 1               
004373r 1               ; global data ; 2E00
004373r 1  00 00        default_irq_vector:  .addr 0 ; 4-5
004375r 1               ; current cell values in neighborhood...
004375r 1  FF           CELL_VAL_UPLEFT:  .byte 255
004376r 1  FF           CELL_VAL_UPRIGHT: .byte 255
004377r 1  FF           CELL_VAL_LEFT:    .byte 255
004378r 1  FF           CELL_VAL_SELF:    .byte 255
004379r 1  FF           CELL_VAL_RIGHT:   .byte 255
00437Ar 1  FF           CELL_VAL_DOWNLEFT: .byte 255
00437Br 1  FF           CELL_VAL_DOWNRIGHT: .byte 255
00437Cr 1               
00437Cr 1  DE AD BE EF  GLOBAL_DATA:         .byte $DE,$AD,$BE,$EF ; 0-1
004380r 1               ;line 0
004380r 1  00 00        MASTER_CLOCK:        .addr 0 ; 6-7
004382r 1  00           .byte 0
004383r 1  00           STATUS:              .byte 0
004384r 1               ;line 1
004384r 1  00           .byte 0
004385r 1  01           VSYNC_counter:       .byte 1 ; 8
004386r 1  00           STALL_COUNTERH:      .byte 0
004387r 1  00           STALL_COUNTER:       .byte 0
004388r 1               ;line 2
004388r 1  00           .byte 0
004389r 1  00           LAST_VSYNC_COUNTER:  .byte 0
00438Ar 1  00           LAST_STALLCOUNTERH:  .byte 0
00438Br 1  00           LAST_STALLCOUNTER:   .byte 0
00438Cr 1               ; line 3
00438Cr 1  FF           VERA_LOCK:           .byte 255 ; 9 value written to screen is value at time DEBUG_WRITE
00438Dr 1  50           IRQ_VERA_LOCK:       .byte 80 ; value of VERA_LOCK when reached the Interrupt
00438Er 1  40           CURRENT_BITMAP_BUFFER: .byte 64 ;
00438Fr 1               ;        A        B     CURRENT BITMAP BUFFER
00438Fr 1               ;   0   display  dirty    A is being displayed, B to be drawn on
00438Fr 1               ;  64   display  ready    B  is ready for swap
00438Fr 1               ; 128   dirty    display  B is being displayed, A to be drawn on
00438Fr 1               ; 192   ready    display  A  is ready for swap
00438Fr 1  00           LAST_BITMAP_BUFFER:    .byte 0 ;
004390r 1               
004390r 1               ; line 4
004390r 1  01           camera_facing: 		 .byte 1 ; 7
004391r 1  00           .byte 0
004392r 1  00           CAMERA_CENTER_XH:    .byte 0 ; 13
004393r 1  00           CAMERA_CENTER_YH:    .byte 0 ; 15
004394r 1               ; line 5
004394r 1  00           camera_cell_x: 		 .byte 0 ; c
004395r 1  00           camera_cell_xl:       .byte 0 ; d
004396r 1  00           camera_cell_y: 		 .byte 0 ; e
004397r 1  00           camera_cell_yl:       .byte 0 ; f
004398r 1               ; line 6
004398r 1  2C           camera_world_pos_XH:    .byte 44 ; 8
004399r 1  30           camera_world_pos_XL:       .byte 48 ; 9
00439Ar 1  0F           camera_world_pos_YH:        .byte 15 ; A
00439Br 1  80           camera_world_pos_YL:       .byte 128  ; B
00439Cr 1               ; line 7
00439Cr 1  00           DO_WATER:   .byte 0 ;
00439Dr 1  00           DO_FAUCET:  .byte 0 ;
00439Er 1               ; line 8
00439Er 1  80           NUM_AVAIL_SPRITES:   .byte 128 ; A
00439Fr 1  00           NUM_RESERVED_SPRITES:    .byte  0;(1+NUM_RESERVED_SPRITES-MASTER_CLOCK) << 1 ; F
0043A0r 1  FF           SPRITE_OBJECT_ENABLE: .byte 255 ;255 ;
0043A1r 1               
0043A1r 1  00           CAMERA_CENTER_XL:    .byte 0 ; 12
0043A2r 1  00           CAMERA_CENTER_YL:    .byte 0 ; 14
0043A3r 1  00           CAMERA_CENTER_TOP_PX: .byte 0 ; 16
0043A4r 1  00 00        CAMERA_CELL_LINE_PTR: .addr 0 ; 17-18
0043A6r 1  00           WORLD_SPRITE_NUM:    .byte 0 ; 1B
0043A7r 1  00           WORLD_WALL_SPRITE_NUM: .byte 0; 1C
0043A8r 1  FF           BUFFER_A_DIRTY:        .byte 255 ;
0043A9r 1  FF           BUFFER_B_DIRTY:        .byte 255 ;
0043AAr 1               
0043AAr 1  F0           camera_screen_out_top: .byte SCREEN_OUT_TOP       ; for determining visibility / stop conditions for checking if within range to view..
0043ABr 1  78           camera_screen_out_bottom: .byte SCREEN_OUT_BOTTOM
0043ACr 1               
0043ACr 1               ENDGLOBALS:
0043ACr 1               
0043ACr 1               .macro stash_scratch
0043ACr 1               	STA (SCRATCH_PTR)
0043ACr 1                   INC SCRATCH_PTR
0043ACr 1               .endmacro
0043ACr 1               
0043ACr 1               custom_irq_handler: ; 2E12
0043ACr 1  AD 27 9F        lda VERA_isr
0043AFr 1  29 01           and #VSYNC_BIT
0043B1r 1  F0 11           BEQ :++
0043B3r 1                  ;  for debug ..
0043B3r 1  AD rr rr        LDA VERA_LOCK
0043B6r 1  8D rr rr        STA IRQ_VERA_LOCK
0043B9r 1               
0043B9r 1  EE rr rr        INC VSYNC_counter
0043BCr 1               
0043BCr 1  EE rr rr        INC VERA_LOCK
0043BFr 1  F0 06           BEQ :+++  ; @unlock_vera ; if we don't have lock we'll just fail this frame..
0043C1r 1                @NOP_nothing_to_do:
0043C1r 1  CE rr rr      : DEC VERA_LOCK
0043C4r 1  6C rr rr      : jmp (default_irq_vector)
0043C7r 1               
0043C7r 1  AD rr rr      : LDA CURRENT_BITMAP_BUFFER
0043CAr 1  4D rr rr        EOR LAST_BITMAP_BUFFER
0043CDr 1  F0 F2           BEQ :--- ; if these match then there's nothing to change
0043CFr 1  18              CLC
0043D0r 1  AD rr rr        LDA CURRENT_BITMAP_BUFFER
0043D3r 1  8D rr rr        STA LAST_BITMAP_BUFFER
0043D6r 1               ;        A        B     CURRENT BITMAP BUFFER
0043D6r 1               ;   0   display  dirty    A is being displayed, B to be drawn on
0043D6r 1               ;  64   display  ready    B  is ready for swap
0043D6r 1               ; 128   dirty    display  B is being displayed, A to be drawn on
0043D6r 1               ; 192   ready    display  A  is ready for swap
0043D6r 1  30 0B           BMI @DISPLAY_B
0043D8r 1               @DISPLAY_A:
0043D8r 1  F0 E7           BEQ @NOP_nothing_to_do ;
0043DAr 1  A9 80           LDA #128
0043DCr 1  8D rr rr        STA CURRENT_BITMAP_BUFFER
0043DFr 1  A9 C0           LDA #VRAM_BITMAP_LAYERB>>9
0043E1r 1  80 09           BRA @GO_SWAP
0043E3r 1               @DISPLAY_B:
0043E3r 1  C9 C0           CMP #192
0043E5r 1  90 DA           BCC @NOP_nothing_to_do
0043E7r 1  9C rr rr        STZ CURRENT_BITMAP_BUFFER
0043EAr 1  A9 8C           LDA #VRAM_BITMAP_LAYERA>>9
0043ECr 1               @GO_SWAP:
0043ECr 1  8D 2F 9F        STA VERA_L0_tilebase
0043EFr 1               
0043EFr 1  A9 01           LDA #$01
0043F1r 1  8D 25 9F        STA VERA_ctrl
0043F4r 1               
0043F4r 1  A2 FF           LDX #$FF
0043F6r 1  8E 20 9F        STX VERA_addr_low
0043F9r 1  8E 21 9F        STX VERA_addr_high
0043FCr 1  A9 19           LDA #$19
0043FEr 1  8D 22 9F        STA VERA_addr_bank
004401r 1               
004401r 1  9C 25 9F        STZ VERA_ctrl  ;  reset to address 0
004404r 1  8D 22 9F        STA VERA_addr_bank
004407r 1               
004407r 1  A9 EF           LDA #$EF
004409r 1  8D 21 9F        STA VERA_addr_high
00440Cr 1  8E 20 9F        STX VERA_addr_low
00440Fr 1               
00440Fr 1  AE rr rr        LDX NUM_AVAIL_SPRITES
004412r 1  AD 23 9F      : LDA VERA_data0   ;  4
004415r 1  8D 24 9F        STA VERA_data1   ;  4  20
004418r 1  AD 23 9F        LDA VERA_data0   ;  4  8
00441Br 1  8D 24 9F        STA VERA_data1   ;  4  20
00441Er 1  AD 23 9F        LDA VERA_data0   ;  4  12
004421r 1  8D 24 9F        STA VERA_data1   ;  4  20
004424r 1  AD 23 9F        LDA VERA_data0   ;  4  16
004427r 1  8D 24 9F        STA VERA_data1   ;  4  20
00442Ar 1  AD 23 9F        LDA VERA_data0   ;  4
00442Dr 1  8D 24 9F        STA VERA_data1   ;  4  20
004430r 1  AD 23 9F        LDA VERA_data0   ;  4  8
004433r 1  8D 24 9F        STA VERA_data1   ;  4  20
004436r 1  AD 23 9F        LDA VERA_data0   ;  4  12
004439r 1  8D 24 9F        STA VERA_data1   ;  4  20
00443Cr 1  AD 23 9F        LDA VERA_data0   ;  4  16
00443Fr 1  8D 24 9F        STA VERA_data1   ;  4  20
004442r 1  CA              DEX         ;  2  22
004443r 1  D0 CD           BNE :-      ;  3  25       8per byte = 64 per sprite + 5 = 69 per * 128 = 8,832 cycles
004445r 1               
004445r 1  6C rr rr        jmp (default_irq_vector)
004448r 1                  ; RTI will happen after jump
004448r 1               
004448r 1               start:
004448r 1                 ; start of program - init globals
004448r 1  AD 14 03       lda IRQVec
00444Br 1  8D rr rr       sta default_irq_vector
00444Er 1  AD 15 03       lda IRQVec+1
004451r 1  8D rr rr       sta default_irq_vector+1
004454r 1               
004454r 1  9C 29 9F       stz VERA_dc_video   ; disable display
004457r 1  A9 33          lda #51 ; #43 ; set scale for bitmap mode - going for 215x161 mode
004459r 1  8D 2A 9F       sta VERA_dc_hscale
00445Cr 1  8D 2B 9F       sta VERA_dc_vscale
00445Fr 1                 ; for now no L0 or L1
00445Fr 1               
00445Fr 1                 ; let's stick that test sprite data into VRAM at zero for now..
00445Fr 1  9C 25 9F       stz VERA_ctrl
004462r 1  9C 20 9F       stz VERA_addr_low
004465r 1  9C 21 9F       stz VERA_addr_high
004468r 1  A9 10          lda #$10
00446Ar 1  8D 22 9F       sta VERA_addr_bank
00446Dr 1                 ; load test VRAM data
00446Dr 1               
00446Dr 1                 ; is 512 bytes at test_cell_sprite label
00446Dr 1  A0 00          ldy #0
00446Fr 1               
00446Fr 1  A9 rr          LDA #<test_vram_data
004471r 1  85 22          STA ZP_PTR
004473r 1  A9 rr          LDA #>test_vram_data
004475r 1  85 23          STA ZP_PTR+1
004477r 1  A2 20          LDX #32   ;   num pages to copy - 16 pages / 8K  - sprite addr 0-255
004479r 1  80 02          BRA :++
00447Br 1                 :
00447Br 1  E6 23             INC ZP_PTR+1
00447Dr 1                   :
00447Dr 1  B1 22              LDA (ZP_PTR),Y
00447Fr 1  8D 23 9F           STA VERA_data0
004482r 1  C8                 INY
004483r 1  D0 F8              BNE :-
004485r 1  CA                DEX
004486r 1  D0 F3             BNE :--
004488r 1               
004488r 1  4C rr rr        jmp no_waves
00448Br 1                 ; initialize some waves
00448Br 1  64 22          STZ ZP_PTR
00448Dr 1  A9 rr          LDA #>TUB_WORLD
00448Fr 1  85 23          STA ZP_PTR+1
004491r 1  A9 08          LDA #8
004493r 1  85 24          STA ZP_PTR+2 ; for use as page counter..
004495r 1  A2 00          LDX #0
004497r 1  B1 22          : LDA (ZP_PTR),y ; grab world data
004499r 1  C9 80            CMP #128       ; is outside or inside tub?
00449Br 1  B0 0B            BCS :+         ; skip this one
00449Dr 1  8A               TXA
00449Er 1  91 22            STA (ZP_PTR),y
0044A0r 1  E8               INX
0044A1r 1  E8               INX
0044A2r 1  E8               INX
0044A3r 1  E8               INX
0044A4r 1  E0 34            CPX #52
0044A6r 1  B0 0B            BCS :++
0044A8r 1  C8             : INY
0044A9r 1  D0 EC            BNE :--
0044ABr 1  E6 23            INC ZP_PTR+1
0044ADr 1  C6 24            DEC ZP_PTR+2
0044AFr 1  D0 E6            BNE :--
0044B1r 1  80 18            BRA :+++
0044B3r 1  B1 22          : LDA (ZP_PTR),y
0044B5r 1  C9 80            CMP #128       ; is outside or inside tub?
0044B7r 1  B0 09            BCS :+         ; skip this one
0044B9r 1  8A               TXA
0044BAr 1  91 22            STA (ZP_PTR),y
0044BCr 1  CA               DEX
0044BDr 1  CA               DEX
0044BEr 1  CA               DEX
0044BFr 1  CA               DEX
0044C0r 1  F0 E6            BEQ :--
0044C2r 1  C8             : INY
0044C3r 1  D0 EE            BNE :--
0044C5r 1  E6 23            INC ZP_PTR+1
0044C7r 1  C6 24            DEC ZP_PTR+2
0044C9r 1  D0 E8            BNE :--
0044CBr 1                 :
0044CBr 1               
0044CBr 1               no_waves:
0044CBr 1                 ; write custom palette data  - 16 colors only for now.. $1:FA00-$1:FBFF   VERA Color Palette (256 x 2 bytes)
0044CBr 1  A9 01          LDA #1
0044CDr 1  8D 25 9F       STA VERA_ctrl
0044D0r 1  A9 3F          LDA #63
0044D2r 1  8D 20 9F       STA VERA_addr_low
0044D5r 1  A9 FA          LDA #$FA
0044D7r 1  8D 21 9F       STA VERA_addr_high
0044DAr 1  A9 19          LDA #$19
0044DCr 1  8D 22 9F       STA VERA_addr_bank
0044DFr 1  9C 25 9F       STZ VERA_ctrl
0044E2r 1  A2 1F          LDX #31
0044E4r 1  8E 20 9F       STX VERA_addr_low
0044E7r 1  A9 FA          LDA #$FA
0044E9r 1  8D 21 9F       STA VERA_addr_high
0044ECr 1  A9 19          LDA #$19
0044EEr 1  8D 22 9F       STA VERA_addr_bank
0044F1r 1                 :
0044F1r 1  BD rr rr         LDA test_optimal_pal_data,X
0044F4r 1  8D 23 9F         STA VERA_data0
0044F7r 1  49 FF            EOR #$FF
0044F9r 1  8D 24 9F         STA VERA_data1
0044FCr 1  CA               DEX
0044FDr 1  D0 F2            BNE :-
0044FFr 1  BD rr rr       LDA test_optimal_pal_data,X
004502r 1  8D 23 9F       STA VERA_data0
004505r 1               
004505r 1  A9 08          LDA #8
004507r 1  9C 34 9F       STz VERA_L1_config
00450Ar 1  A9 F8          LDA #VRAM_CHARSET >> 9
00450Cr 1  8D 36 9F       STA VERA_L1_tilebase
00450Fr 1  A9 F2          LDA #VRAM_TEXT_SCREEN >> 9
004511r 1  8D 35 9F       STA VERA_L1_mapbase
004514r 1               
004514r 1  9C 20 9F       STZ VERA_addr_low
004517r 1  A9 18          LDA #>VRAM_BITMAP_LAYERA
004519r 1  8D 21 9F       STA VERA_addr_high
00451Cr 1  A9 11          LDA #$11
00451Er 1  8D 22 9F       STA VERA_addr_bank
004521r 1  A2 67          LDX #103  ;  zero bufferA
004523r 1  A0 00          LDY #0
004525r 1  9C 23 9F     : STZ VERA_data0
004528r 1  C8             INY
004529r 1  D0 FA          BNE :-
00452Br 1  CA             DEX
00452Cr 1  D0 F7          BNE :-
00452Er 1  A2 65          LDX #101  ;  write A to bufferB initially as debug / flashing display when swapped..
004530r 1                 ;LDA #255
004530r 1  9C 23 9F     : STZ VERA_data0
004533r 1  C8             INY
004534r 1  D0 FA          BNE :-
004536r 1  CA             DEX
004537r 1  D0 F7          BNE :-
004539r 1               
004539r 1  9C 23 9F       STZ VERA_data0
00453Cr 1  A9 21          LDA #$21
00453Er 1  8D 22 9F       STA VERA_addr_bank
004541r 1               
004541r 1  A2 0F          LDX #15
004543r 1  A0 14        : LDY #20
004545r 1  A9 01          LDA #$01
004547r 1               
004547r 1  8D 23 9F       : STA VERA_data0
00454Ar 1  88               DEY
00454Br 1  D0 FA            BNE :-
00454Dr 1  A0 F1            LDY #$F1
00454Fr 1  8C 23 9F         STY VERA_data0 ; cols 20-23
004552r 1  8C 23 9F         STY VERA_data0
004555r 1  8C 23 9F         STY VERA_data0
004558r 1  8C 23 9F         STY VERA_data0
00455Br 1               
00455Br 1  8C 23 9F         STY VERA_data0 ; cols 24-27
00455Er 1  8C 23 9F         STY VERA_data0
004561r 1  8C 23 9F         STY VERA_data0
004564r 1  8C 23 9F         STY VERA_data0
004567r 1               
004567r 1  8C 23 9F         STY VERA_data0 ; cols 28-31
00456Ar 1  8C 23 9F         STY VERA_data0
00456Dr 1  8C 23 9F         STY VERA_data0
004570r 1  8C 23 9F         STY VERA_data0
004573r 1  CA              DEX
004574r 1  D0 CD           BNE :--
004576r 1  A2 A0          LDX #160
004578r 1  8C 23 9F       : STY VERA_data0
00457Br 1  8C 23 9F         STY VERA_data0
00457Er 1  CA               DEX
00457Fr 1  D0 F7            BNE :-
004581r 1               ;  LDA #4
004581r 1               ;  STA VERA_L1_HSCROLL_L
004581r 1               ;  STA VERA_L1_VSCROLL_L
004581r 1               
004581r 1  9C 20 9F       STZ VERA_addr_low
004584r 1  A9 E4          LDA #>VRAM_TEXT_SCREEN
004586r 1  8D 21 9F       STA VERA_addr_high
004589r 1  A2 04          LDX #4
00458Br 1  A9 20          LDA #32
00458Dr 1  8D 23 9F     : STA VERA_data0
004590r 1  C8             INY
004591r 1  D0 FA          BNE :-
004593r 1  CA             DEX
004594r 1  D0 F7          BNE :-
004596r 1               
004596r 1  A9 06          LDA #$06
004598r 1  8D 2D 9F       STA VERA_L0_config
00459Br 1  A9 01          LDA #$01 ; set L0 to palette offset 1 for now, to see where stuff is.
00459Dr 1  8D 31 9F       STA VERA_L0_HSCROLL_H
0045A0r 1  A9 8C          LDA #(VRAM_BITMAP_LAYERA>>9)
0045A2r 1               
0045A2r 1               ;  LDA #VRAM_BITMAP_LAYERB>>9
0045A2r 1  8D 2F 9F       STA VERA_L0_tilebase
0045A5r 1               
0045A5r 1  A9 06          LDA #6
0045A7r 1  8D 20 9F       STA VERA_addr_low
0045AAr 1  A9 EC          LDA #>VRAM_SPRITE_BUF
0045ACr 1  8D 21 9F       STA VERA_addr_high
0045AFr 1  A9 41          LDA #$41
0045B1r 1  8D 22 9F       STA VERA_addr_bank
0045B4r 1  9C 23 9F       : STZ VERA_data0
0045B7r 1  E8               INX
0045B8r 1  D0 FA            BNE :-
0045BAr 1                 ; enable display
0045BAr 1  9C 25 9F       stz VERA_ctrl
0045BDr 1  A9 71          lda #SPRITES_LAYER1_LAYER0_VGA ; #SPRITES_ONLY_VGA
0045BFr 1  8D 29 9F       sta VERA_dc_video
0045C2r 1               
0045C2r 1               ;  DEC VERA_LOCK ; unlock the vera for first go...
0045C2r 1               ;   BRA @camera_world_changed
0045C2r 1                 ; overwrite RAM IRQ vector with custom handler address
0045C2r 1  78             sei ; disable IRQ while vector is changing
0045C3r 1  A9 rr          lda #<custom_irq_handler
0045C5r 1  8D 14 03       sta IRQVec
0045C8r 1  A9 rr          lda #>custom_irq_handler
0045CAr 1  8D 15 03       sta IRQVec+1
0045CDr 1  A9 01          lda #VSYNC_BIT ; make VERA only generate VSYNC IRQs
0045CFr 1  8D 26 9F       sta VERA_ien
0045D2r 1  58             cli ; enable IRQ now that vector is properly set
0045D3r 1               
0045D3r 1               
0045D3r 1                 ; main loop here...
0045D3r 1  9C rr rr        STZ camera_facing
0045D6r 1               
0045D6r 1               @camera_world_changed:
0045D6r 1                  ; copy over cell YL as-is
0045D6r 1  AD rr rr        LDA camera_world_pos_YL
0045D9r 1  8D rr rr        STA camera_cell_yl
0045DCr 1                  ; YH gets copied over ..
0045DCr 1  AD rr rr        LDA camera_world_pos_YH
0045DFr 1  8D rr rr        STA camera_cell_y
0045E2r 1                  ; cellX = WORLDX*ratio - floor(cellY)/2
0045E2r 1                  ;  halve floor(cellY)
0045E2r 1  4A              LSR
0045E3r 1  85 7F           STA $7F ; stash it for scratch
0045E5r 1  A9 00           LDA #0
0045E7r 1  6A              ROR
0045E8r 1  85 7E           STA $7E ; and there's the half..
0045EAr 1               
0045EAr 1  AE rr rr        LDX camera_world_pos_XH
0045EDr 1  AC rr rr        LDY camera_world_pos_XL
0045F0r 1  18              CLC
0045F1r 1  B9 rr rr        LDA WORLD_TO_CELL_XH,Y ; that bit from pos_XL
0045F4r 1  7D rr rr        ADC WORLD_TO_CELL_XL,X ; plus the bit from pos_XH
0045F7r 1  A8              TAY   ;  cellXL from ratio
0045F8r 1  BD rr rr        LDA WORLD_TO_CELL_XH,X
0045FBr 1  69 00           ADC #0 ; gotta do that carry and all ..
0045FDr 1  AA              TAX   ; cellXH from ratio
0045FEr 1               
0045FEr 1  98              TYA
0045FFr 1  38              SEC
004600r 1  E5 7E           SBC $7E
004602r 1  8D rr rr        STA camera_cell_xl
004605r 1  8A              TXA
004606r 1  E5 7F           SBC $7F
004608r 1  8D rr rr        STA camera_cell_x
00460Br 1  4C rr rr        jmp @do_update
00460Er 1               
00460Er 1               @camera_cell_changed: ; run through this more as a normalization step for camera..
00460Er 1                  ; worldX = scaled(floor(cellY)/2 + cellX )
00460Er 1  AD rr rr        LDA camera_cell_yl
004611r 1  8D rr rr        STA camera_world_pos_YL
004614r 1  AD rr rr        LDA camera_cell_y
004617r 1  8D rr rr        STA camera_world_pos_YH
00461Ar 1  4A              LSR
00461Br 1  AA              TAX  ; high byte floor(Y)/2
00461Cr 1  A9 00           LDA #0
00461Er 1  6A              ROR ; either is zero or 128 now ... either way, carry is cleared.
00461Fr 1  6D rr rr        ADC camera_cell_xl
004622r 1  A8              TAY ; stash the low to byte
004623r 1  8A              TXA ; high byte floor (Y)/2 .. ready for adding
004624r 1  6D rr rr        ADC camera_cell_x
004627r 1  AA              TAX ; stash high byte ... carry _should_ be cleared unless X >255 ... ?
004628r 1  B9 rr rr        LDA CELL_LOW_TO_WORLD_XL,Y
00462Br 1  7D rr rr        ADC CELL_TO_WORLD_XL,X
00462Er 1  8D rr rr        STA camera_world_pos_XL
004631r 1  B9 rr rr        LDA CELL_LOW_TO_WORLD_XH,Y
004634r 1  7D rr rr        ADC CELL_TO_WORLD_XH,X
004637r 1  8D rr rr        STA camera_world_pos_XH
00463Ar 1                  ;  jmp @do_update ; superfluous currently. redundant even..
00463Ar 1               
00463Ar 1               
00463Ar 1               @do_update:
00463Ar 1               
00463Ar 1                  ;  set up screen center stuff
00463Ar 1               
00463Ar 1               
00463Ar 1  AD rr rr        LDA camera_facing
00463Dr 1  29 7F           AND #127
00463Fr 1  AA              TAX
004640r 1  BD rr rr        LDA WORLD_SPRITE_NUM_lookies,X
004643r 1  8D rr rr        STA WORLD_SPRITE_NUM
004646r 1  BD rr rr        LDA WORLD_WALL_SPRITE_NUM_lookies,X
004649r 1  8D rr rr        STA WORLD_WALL_SPRITE_NUM
00464Cr 1               
00464Cr 1  38              SEC
00464Dr 1  BD rr rr        LDA WORLD_SPRITE_CENTER_XL,X
004650r 1  8D rr rr        STA CAMERA_CENTER_XL
004653r 1  BD rr rr        LDA WORLD_SPRITE_CENTER_XH,X
004656r 1  E9 1C           SBC #28
004658r 1  8D rr rr        STA CAMERA_CENTER_XH
00465Br 1               
00465Br 1  BD rr rr        LDA WORLD_SPRITE_CENTER_YL,X
00465Er 1  8D rr rr        STA CAMERA_CENTER_YL
004661r 1  38              SEC
004662r 1  BD rr rr        LDA WORLD_SPRITE_CENTER_YH,X
004665r 1  E9 14           SBC #20
004667r 1  8D rr rr        STA CAMERA_CENTER_TOP_PX
00466Ar 1               
00466Ar 1  AE rr rr         LDX camera_facing
00466Dr 1               
00466Dr 1  AD rr rr         LDA camera_cell_xl
004670r 1  4A               LSR ;   /2
004671r 1  4A               LSR ;   /4
004672r 1  4A               LSR ;   /8
004673r 1  4A               LSR ;   /16
004674r 1  38               SEC
004675r 1  E9 08            SBC #8 ;   subtract le middle..
004677r 1  A8               TAY
004678r 1  B0 29            BCS :++    ;  is positive..
00467Ar 1  18             : CLC
00467Br 1  AD rr rr         LDA CAMERA_CENTER_XL
00467Er 1  7D rr rr         ADC SUBCELL_X_COS_L,X
004681r 1  8D rr rr         STA CAMERA_CENTER_XL
004684r 1  AD rr rr         LDA CAMERA_CENTER_XH
004687r 1  7D rr rr         ADC SUBCELL_X_COS_H,X
00468Ar 1  8D rr rr         STA CAMERA_CENTER_XH
00468Dr 1  38               SEC
00468Er 1  AD rr rr         LDA CAMERA_CENTER_YL
004691r 1  FD rr rr         SBC SUBCELL_Y_SIN_L,X
004694r 1  8D rr rr         STA CAMERA_CENTER_YL
004697r 1  AD rr rr         LDA CAMERA_CENTER_TOP_PX
00469Ar 1  FD rr rr         SBC SUBCELL_Y_SIN_H,X
00469Dr 1  8D rr rr         STA CAMERA_CENTER_TOP_PX
0046A0r 1  C8               INY
0046A1r 1  D0 D7            BNE :-
0046A3r 1  F0 29          : BEQ :++
0046A5r 1  38             : SEC
0046A6r 1  AD rr rr         LDA CAMERA_CENTER_XL
0046A9r 1  FD rr rr         SBC SUBCELL_X_COS_L,X
0046ACr 1  8D rr rr         STA CAMERA_CENTER_XL
0046AFr 1  AD rr rr         LDA CAMERA_CENTER_XH
0046B2r 1  FD rr rr         SBC SUBCELL_X_COS_H,X
0046B5r 1  8D rr rr         STA CAMERA_CENTER_XH
0046B8r 1  18               CLC
0046B9r 1  AD rr rr         LDA CAMERA_CENTER_YL
0046BCr 1  7D rr rr         ADC SUBCELL_Y_SIN_L,X
0046BFr 1  8D rr rr         STA CAMERA_CENTER_YL
0046C2r 1  AD rr rr         LDA CAMERA_CENTER_TOP_PX
0046C5r 1  7D rr rr         ADC SUBCELL_Y_SIN_H,X
0046C8r 1  8D rr rr         STA CAMERA_CENTER_TOP_PX
0046CBr 1  88               DEY
0046CCr 1  D0 D7            BNE :-
0046CEr 1                 :
0046CEr 1               
0046CEr 1  AD rr rr         LDA camera_cell_yl
0046D1r 1  4A               LSR ;   /2
0046D2r 1  4A               LSR ;   /4
0046D3r 1  4A               LSR ;   /8
0046D4r 1  4A               LSR ;   /16
0046D5r 1  38               SEC
0046D6r 1  E9 08            SBC #8 ;   subtract le middle..
0046D8r 1  A8               TAY
0046D9r 1  B0 29            BCS :++    ;  is positive..
0046DBr 1  18             : CLC
0046DCr 1  AD rr rr         LDA CAMERA_CENTER_XL
0046DFr 1  7D rr rr         ADC SUBCELL_X_SIN_L,X
0046E2r 1  8D rr rr         STA CAMERA_CENTER_XL
0046E5r 1  AD rr rr         LDA CAMERA_CENTER_XH
0046E8r 1  7D rr rr         ADC SUBCELL_X_SIN_H,X
0046EBr 1  8D rr rr         STA CAMERA_CENTER_XH
0046EEr 1  18               CLC
0046EFr 1  AD rr rr         LDA CAMERA_CENTER_YL
0046F2r 1  7D rr rr         ADC SUBCELL_Y_COS_L,X
0046F5r 1  8D rr rr         STA CAMERA_CENTER_YL
0046F8r 1  AD rr rr         LDA CAMERA_CENTER_TOP_PX
0046FBr 1  7D rr rr         ADC SUBCELL_Y_COS_H,X
0046FEr 1  8D rr rr         STA CAMERA_CENTER_TOP_PX
004701r 1  C8               INY
004702r 1  D0 D7            BNE :-
004704r 1  F0 29          : BEQ :++
004706r 1  38             : SEC
004707r 1  AD rr rr         LDA CAMERA_CENTER_XL
00470Ar 1  FD rr rr         SBC SUBCELL_X_SIN_L,X
00470Dr 1  8D rr rr         STA CAMERA_CENTER_XL
004710r 1  AD rr rr         LDA CAMERA_CENTER_XH
004713r 1  FD rr rr         SBC SUBCELL_X_SIN_H,X
004716r 1  8D rr rr         STA CAMERA_CENTER_XH
004719r 1               
004719r 1  38               SEC
00471Ar 1  AD rr rr         LDA CAMERA_CENTER_YL
00471Dr 1  FD rr rr         SBC SUBCELL_Y_COS_L,X
004720r 1  8D rr rr         STA CAMERA_CENTER_YL
004723r 1  AD rr rr         LDA CAMERA_CENTER_TOP_PX
004726r 1  FD rr rr         SBC SUBCELL_Y_COS_H,X
004729r 1  8D rr rr         STA CAMERA_CENTER_TOP_PX
00472Cr 1  88               DEY
00472Dr 1  D0 D7            BNE :-
00472Fr 1                 :
00472Fr 1               
00472Fr 1                  ;  set up tub pointer .. this will let us grab the height value for current location..
00472Fr 1               
00472Fr 1  64 7C            STZ $7C
004731r 1  AD rr rr         LDA camera_cell_y
004734r 1  4A               LSR  ;  y pages of 128
004735r 1  66 7C            ROR $7C
004737r 1  4A               LSR  ; y pages of 64 !
004738r 1  66 7C            ROR $7C
00473Ar 1  69 rr            ADC #>TUB_WORLD
00473Cr 1  85 7D            STA $7D
00473Er 1  8D rr rr         STA CAMERA_CELL_LINE_PTR+1
004741r 1  A5 7C            LDA $7C
004743r 1  8D rr rr         STA CAMERA_CELL_LINE_PTR
004746r 1               
004746r 1               
004746r 1  AC rr rr         LDY camera_cell_x
004749r 1  B1 7C            LDA ($7C),y
00474Br 1  C9 56            CMP #86 ; is largest value we will allow .. accounts for tub heights..
00474Dr 1  90 02            BCC :+
00474Fr 1  A9 56            LDA #86
004751r 1               
004751r 1                  :
004751r 1  C9 3F             CMP #63
004753r 1  B0 02             BCS :+
004755r 1               ;     INC A;  increase the height of spot we're at by 1...
004755r 1  91 7E             STA ($7E),y
004757r 1  A8              : TAY
004758r 1               
004758r 1  18              CLC
004759r 1  AD rr rr        LDA CAMERA_CENTER_YL
00475Cr 1  79 rr rr        ADC CONVERT_HEIGHTS_PIXELS_L,Y
00475Fr 1  8D rr rr        STA CAMERA_CENTER_YL
004762r 1  AD rr rr        LDA CAMERA_CENTER_TOP_PX
004765r 1  79 rr rr        ADC CONVERT_HEIGHTS_PIXELS,Y
004768r 1  8D rr rr        STA CAMERA_CENTER_YH
00476Br 1               
00476Br 1  18              CLC
00476Cr 1  A9 78           LDA #SCREEN_OUT_BOTTOM
00476Er 1  79 rr rr        ADC CONVERT_HEIGHTS_PIXELS,Y
004771r 1  8D rr rr        STA camera_screen_out_bottom
004774r 1               
004774r 1                  ; if something is higher than us it would be (52-CONVERT_HEIGHTS_PIXELS,Y)
004774r 1                  ; so true effective top of screen check to account for that would be ...
004774r 1                  ; SCREEN_OUT_TOP - (52 - CONVERT_HEIGHTS_PIXELS,Y)
004774r 1                  ; screen out top - 52 + CONVERT_HEIGHTS_PIXELS,Y
004774r 1                  ; ok so if we are as high as we can be, then something at farthest Z visible Z
004774r 1                  ; or s this constant??? should it even be attempted to add to world data?
004774r 1  38              SEC
004775r 1  AD rr rr        LDA CAMERA_CENTER_TOP_PX
004778r 1  E9 80           SBC #16+60+52 ;-16 is top out.. 60 to mid screen, then max diff in height from there.. so if was middle screen 60 now its -68
00477Ar 1  8D rr rr        STA camera_screen_out_top
00477Dr 1               
00477Dr 1                  ; clear the object list ...
00477Dr 1  38               SEC
00477Er 1  A9 80            LDA #128
004780r 1  ED rr rr         SBC NUM_RESERVED_SPRITES
004783r 1  8D rr rr         STA NUM_AVAIL_SPRITES
004786r 1               
004786r 1  9C rr rr         STZ OBJECT_LIST_BYTE6_NEXT ; because we can't use zero anyway..
004789r 1  A9 08            LDA #$08 ; is basis for all the z_flips <- this may change depending on orientation..
00478Br 1  A2 00            LDX #0
00478Dr 1  9E rr rr         : STZ OBJECT_LIST_Z_START_POINTERS,X
004790r 1  9E rr rr           STZ OBJECT_LIST_BYTE1_MODE,X          ; 16 color / low address
004793r 1  9C rr rr           STZ OBJECT_LIST_BYTE2_X
004796r 1  9D rr rr           STA OBJECT_LIST_BYTE4_ZFLIPS,X
004799r 1  9D rr rr           STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
00479Cr 1  E8                 INX
00479Dr 1  D0 EE              BNE :-
00479Fr 1               
00479Fr 1  A9 D0            LDA #SPRITE_SIZE_ORA
0047A1r 1  9D rr rr         : STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
0047A4r 1  E8                 INX
0047A5r 1  D0 FA              BNE :-
0047A7r 1  AD rr rr         LDA WORLD_SPRITE_NUM
0047AAr 1  9D rr rr         : STA OBJECT_LIST_BYTE0_ADDRLOW,X ; 01.3456 done .
0047ADr 1  E8                 INX
0047AEr 1  D0 FA              BNE :-
0047B0r 1               
0047B0r 1  AD rr rr        LDA DO_WATER
0047B3r 1  F0 29           BEQ :++
0047B5r 1               ;   LDA MASTER_CLOCK
0047B5r 1               ;   AND #1
0047B5r 1               
0047B5r 1  AD rr rr        LDA DO_FAUCET
0047B8r 1  F0 0E           BEQ :+
0047BAr 1  A9 3F           LDA #63
0047BCr 1                  ; we're going to pretend the faucet is running...
0047BCr 1  8D rr rr        STA TUB_WORLD+(15*64)+7 ;  this is middle row furthest west ( < x )
0047BFr 1  8D rr rr        STA TUB_WORLD+(15*64)+8
0047C2r 1  8D rr rr        STA TUB_WORLD+(14*64)+8
0047C5r 1  8D rr rr        STA TUB_WORLD+(16*64)+7
0047C8r 1  20 rr rr      :  JSR UPDATE_WATER_SIM
0047CBr 1  AD rr rr        LDA DO_FAUCET
0047CEr 1  F0 0E           BEQ :+
0047D0r 1  A9 55           LDA #85
0047D2r 1  8D rr rr        STA TUB_WORLD+(15*64)+7 ;  this is middle row furthest west ( < x )
0047D5r 1  8D rr rr        STA TUB_WORLD+(15*64)+8
0047D8r 1  8D rr rr        STA TUB_WORLD+(14*64)+8
0047DBr 1  8D rr rr        STA TUB_WORLD+(16*64)+7
0047DEr 1                :
0047DEr 1               
0047DEr 1  20 rr rr       jsr push_world_to_object_list
0047E1r 1               
0047E1r 1               ;        A        B     CURRENT BITMAP BUFFER
0047E1r 1               ;   0   display  dirty    A is being displayed, B to be drawn on
0047E1r 1               ;  64   display  ready    B  is ready for swap
0047E1r 1               ; 128   dirty    display  B is being displayed, A to be drawn on
0047E1r 1               ; 192   ready    display  A  is ready for swap
0047E1r 1               
0047E1r 1               ; OK so we want bit 6 (64) to be set
0047E1r 1  80 01           BRA :++
0047E3r 1               ;   LDA #2
0047E3r 1               :
0047E3r 1  CB              wai
0047E4r 1               ;   CMP VSYNC_counter
0047E4r 1               ;   BCS :-
0047E4r 1  AD rr rr     :  LDA CURRENT_BITMAP_BUFFER
0047E7r 1  29 40           AND #64
0047E9r 1  D0 F8           BNE :--
0047EBr 1  9C rr rr        STZ VERA_LOCK ; ok gotta lock the VERA...
0047EEr 1  A9 D1           LDA #$D1
0047F0r 1  8D rr rr        STA OBJECT_LIST_BYTE5_SIZE+1
0047F3r 1               
0047F3r 1  20 rr rr        jsr draw_object_list
0047F6r 1               
0047F6r 1               @WRITE_DEBUG:
0047F6r 1  64 7A            STZ $7A
0047F8r 1  AD rr rr         LDA camera_cell_y
0047FBr 1  3A               DEC A
0047FCr 1  4A               LSR
0047FDr 1  66 7A            ROR $7A
0047FFr 1  4A               LSR
004800r 1  66 7A            ROR $7A
004802r 1  69 rr            ADC #>TUB_WORLD
004804r 1  85 7B            STA $7B
004806r 1  AC rr rr         LDY camera_cell_x
004809r 1  B1 7A            LDA ($7A),y
00480Br 1  8D rr rr         STA CELL_VAL_UPLEFT
00480Er 1  C8               INY
00480Fr 1  B1 7A            LDA ($7A),Y
004811r 1  8D rr rr         STA CELL_VAL_UPRIGHT
004814r 1               
004814r 1  64 7C            STZ $7C
004816r 1  AD rr rr         LDA camera_cell_y
004819r 1  4A               LSR  ;  y pages of 128
00481Ar 1  66 7C            ROR $7C
00481Cr 1  4A               LSR  ; y pages of 64 !
00481Dr 1  66 7C            ROR $7C
00481Fr 1  69 rr            ADC #>TUB_WORLD
004821r 1  85 7D            STA $7D
004823r 1  8D rr rr         STA CAMERA_CELL_LINE_PTR+1
004826r 1  A5 7C            LDA $7C
004828r 1  8D rr rr         STA CAMERA_CELL_LINE_PTR
00482Br 1  B1 7C            LDA ($7C),Y
00482Dr 1  8D rr rr         STA CELL_VAL_RIGHT
004830r 1  88               DEY
004831r 1  B1 7C            LDA ($7C),Y
004833r 1  8D rr rr         STA CELL_VAL_SELF
004836r 1  88               DEY
004837r 1  B1 7C            LDA ($7C),Y
004839r 1  8D rr rr         STA CELL_VAL_LEFT
00483Cr 1               
00483Cr 1  64 7E            STZ $7E
00483Er 1  AD rr rr         LDA camera_cell_y
004841r 1  1A               INC A
004842r 1  4A               LSR  ;  y pages of 128
004843r 1  66 7E            ROR $7E
004845r 1  4A               LSR  ; y pages of 64 !
004846r 1  66 7E            ROR $7E
004848r 1  69 rr            ADC #>TUB_WORLD
00484Ar 1  85 7F            STA $7F
00484Cr 1  B1 7E            LDA ($7E),Y
00484Er 1  8D rr rr         STA CELL_VAL_DOWNLEFT
004851r 1  C8               INY
004852r 1  B1 7E            LDA ($7E),Y
004854r 1  8D rr rr         STA CELL_VAL_DOWNRIGHT
004857r 1               
004857r 1  9C 25 9F        STZ VERA_ctrl
00485Ar 1  A9 2A           LDA #42;+64
00485Cr 1  8D 20 9F        STA VERA_addr_low
00485Fr 1  A9 E4           LDA #>VRAM_TEXT_SCREEN
004861r 1  8D 21 9F        STA VERA_addr_high
004864r 1  A9 21           LDA #$21
004866r 1  8D 22 9F        STA VERA_addr_bank
004869r 1               
004869r 1  AD 23 9F        LDA VERA_data0 ; skip a spot at 2
00486Cr 1  AD 23 9F        LDA VERA_data0 ; skip a spot at 4
00486Fr 1               
00486Fr 1  AE rr rr        LDX CELL_VAL_UPLEFT
004872r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X
004875r 1  8D 23 9F        STA VERA_data0                ;  6
004878r 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X
00487Br 1  8D 23 9F        STA VERA_data0                ;  8
00487Er 1               
00487Er 1  AD 23 9F        LDA VERA_data0     ; skip a spot    10
004881r 1  AD 23 9F        LDA VERA_data0     ; skip a spot    12
004884r 1               
004884r 1  AE rr rr        LDX CELL_VAL_UPRIGHT
004887r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X
00488Ar 1  8D 23 9F        STA VERA_data0                ;  14
00488Dr 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X
004890r 1  8D 23 9F        STA VERA_data0                ;  16
004893r 1  18              CLC
004894r 1  AD 20 9F        LDA VERA_addr_low
004897r 1  69 30           ADC #64-16
004899r 1  8D 20 9F        STA VERA_addr_low
00489Cr 1               
00489Cr 1  AE rr rr        LDX CELL_VAL_LEFT
00489Fr 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X
0048A2r 1  8D 23 9F        STA VERA_data0                ;  2
0048A5r 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X
0048A8r 1  8D 23 9F        STA VERA_data0                ;  4
0048ABr 1               
0048ABr 1  AD 23 9F        LDA VERA_data0    ;     6
0048AEr 1  AD 23 9F        LDA VERA_data0    ;     8
0048B1r 1               
0048B1r 1  AE rr rr        LDX CELL_VAL_SELF
0048B4r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X
0048B7r 1  8D 23 9F        STA VERA_data0                ;  10
0048BAr 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X
0048BDr 1  8D 23 9F        STA VERA_data0                ;  12
0048C0r 1               
0048C0r 1  AD 23 9F        LDA VERA_data0    ;     14
0048C3r 1  AD 23 9F        LDA VERA_data0    ;     16
0048C6r 1               
0048C6r 1  AE rr rr        LDX CELL_VAL_RIGHT
0048C9r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X
0048CCr 1  8D 23 9F        STA VERA_data0                ;  18
0048CFr 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X
0048D2r 1  8D 23 9F        STA VERA_data0                ;  20
0048D5r 1               
0048D5r 1  18              CLC
0048D6r 1  AD 20 9F        LDA VERA_addr_low
0048D9r 1  69 2C           ADC #64-20
0048DBr 1  8D 20 9F        STA VERA_addr_low
0048DEr 1               
0048DEr 1  AD 23 9F        LDA VERA_data0 ; skip a spot at 2
0048E1r 1  AD 23 9F        LDA VERA_data0 ; skip a spot at 4
0048E4r 1               
0048E4r 1  AE rr rr        LDX CELL_VAL_DOWNLEFT
0048E7r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X
0048EAr 1  8D 23 9F        STA VERA_data0                ;  6
0048EDr 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X
0048F0r 1  8D 23 9F        STA VERA_data0                ;  8
0048F3r 1               
0048F3r 1  AD 23 9F        LDA VERA_data0     ; skip a spot    10
0048F6r 1  AD 23 9F        LDA VERA_data0     ; skip a spot    12
0048F9r 1               
0048F9r 1  AE rr rr        LDX CELL_VAL_DOWNRIGHT
0048FCr 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X
0048FFr 1  8D 23 9F        STA VERA_data0                ;  14
004902r 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X
004905r 1  8D 23 9F        STA VERA_data0                ;  16
004908r 1               
004908r 1  A9 2A           LDA #42
00490Ar 1  8D 20 9F        STA VERA_addr_low
00490Dr 1  EE 21 9F        INC VERA_addr_high
004910r 1               
004910r 1               
004910r 1  A0 00           LDY #0
004912r 1  BE rr rr      : LDX GLOBAL_DATA,Y
004915r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X ; 1
004918r 1  8D 23 9F        STA VERA_data0
00491Br 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X  ; 2
00491Er 1  8D 23 9F        STA VERA_data0
004921r 1  C8              INY
004922r 1  BE rr rr        LDX GLOBAL_DATA,Y
004925r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X   ;  3
004928r 1  8D 23 9F        STA VERA_data0
00492Br 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X    ;  4
00492Er 1  8D 23 9F        STA VERA_data0
004931r 1  C8              INY
004932r 1  AD 23 9F        LDA VERA_data0             ;  5
004935r 1  BE rr rr        LDX GLOBAL_DATA,Y
004938r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X   ;  6
00493Br 1  8D 23 9F        STA VERA_data0
00493Er 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X    ;  7
004941r 1  8D 23 9F        STA VERA_data0
004944r 1  C8              INY
004945r 1  BE rr rr        LDX GLOBAL_DATA,Y
004948r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X   ;  8
00494Br 1  8D 23 9F        STA VERA_data0
00494Er 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X    ;  9
004951r 1  8D 23 9F        STA VERA_data0
004954r 1  C8              INY
004955r 1  18              CLC
004956r 1  AD 20 9F        LDA VERA_addr_low          ;  moved 18 out of 64 bytes...
004959r 1  69 2E           ADC #64-18
00495Br 1  8D 20 9F        STA VERA_addr_low
00495Er 1  90 03           BCC :+
004960r 1  EE 21 9F        INC VERA_addr_high
004963r 1  C0 30         : CPY #ENDGLOBALS-GLOBAL_DATA  ;
004965r 1  90 AB           BCC :--
004967r 1               
004967r 1  18              CLC
004968r 1  AD rr rr        LDA CURRENT_BITMAP_BUFFER
00496Br 1  69 40           ADC #64
00496Dr 1  8D rr rr        STA CURRENT_BITMAP_BUFFER
004970r 1               
004970r 1  A9 FF           LDA #$FF ; time to unlock the VERA ..
004972r 1  8D rr rr        STA VERA_LOCK
004975r 1               
004975r 1               ;   rts
004975r 1               
004975r 1               @FRAME_CHECK:
004975r 1  AD rr rr        LDA STALL_COUNTERH
004978r 1  8D rr rr        STA LAST_STALLCOUNTERH
00497Br 1  AD rr rr        LDA STALL_COUNTER
00497Er 1  8D rr rr        STA LAST_STALLCOUNTER
004981r 1  A2 FF           LDX #255
004983r 1  A0 FF           LDY #255
004985r 1  AD rr rr        LDA VSYNC_counter
004988r 1  8D rr rr        STA LAST_VSYNC_COUNTER
00498Br 1               ;   BNE :+++
00498Br 1  9C rr rr        STZ VSYNC_counter
00498Er 1  E8           :  INX                     ;  2 cycles    8
00498Fr 1  D0 01           BNE :+                  ;  ~3 cycles   11 or 10 if drop through
004991r 1  C8              INY                     ; 2            11/12
004992r 1               :  ;wai   disables the busy wait..
004992r 1  AD rr rr        lda VSYNC_counter       ;  4  cyles    15/16
004995r 1  F0 F7           BEQ :--                ;  3  cycles     18/19   so 1 full of X = ~4,607 cycles .. count would go to ~7,407 for full frame.. or ~ $1C,$F0
004997r 1               ;:
004997r 1  9C rr rr        STZ VSYNC_counter
00499Ar 1  8E rr rr        STX STALL_COUNTER
00499Dr 1  8C rr rr        STY STALL_COUNTERH
0049A0r 1               ;   LDA MASTER_CLOCK
0049A0r 1               ;   INC A
0049A0r 1               ;   CLC
0049A0r 1               ;   ADC LAST_VSYNC_COUNTER
0049A0r 1               ;   STA MASTER_CLOCK
0049A0r 1  EE rr rr        INC MASTER_CLOCK
0049A3r 1  D0 03           BNE :+
0049A5r 1  EE rr rr        INC MASTER_CLOCK+1
0049A8r 1               :
0049A8r 1               ;   AND #1 ; restrict to 30 fps.. don't care missed cycle.
0049A8r 1               ;   BEQ :+
0049A8r 1               ;   JMP @WRITE_DEBUG
0049A8r 1                  ; poll keyboard for input
0049A8r 1               ; :
0049A8r 1  20 E4 FF        jsr GETIN
0049ABr 1  C9 00           cmp #0
0049ADr 1  D0 03           BNE :+
0049AFr 1  4C rr rr        JMP @do_update
0049B2r 1  C9 0D         : CMP #RETURN
0049B4r 1  D0 03           BNE :+
0049B6r 1  4C rr rr        JMP @cleanup_and_exit
0049B9r 1  C9 1D         : cmp #$1D 	;	cursor right
0049BBr 1  D0 06           BNE :+
0049BDr 1  EE rr rr        INC camera_facing
0049C0r 1  4C rr rr        JMP @do_update
0049C3r 1                  :
0049C3r 1  C9 9D           cmp  #$9D 	;	cursor left
0049C5r 1  D0 06           BNE :+
0049C7r 1  CE rr rr        DEC camera_facing
0049CAr 1  4C rr rr        JMP @do_update
0049CDr 1  C9 11         : cmp #$11; cursor down
0049CFr 1  D0 2C           BNE :+
0049D1r 1  AE rr rr        LDX camera_facing
0049D4r 1  38              SEC
0049D5r 1  AD rr rr        LDA camera_world_pos_XL
0049D8r 1  FD rr rr        SBC MOVE_X_L,X
0049DBr 1  8D rr rr        STA camera_world_pos_XL
0049DEr 1  AD rr rr        LDA camera_world_pos_XH
0049E1r 1  FD rr rr        SBC MOVE_X_H,X
0049E4r 1  8D rr rr        STA camera_world_pos_XH
0049E7r 1  18              CLC
0049E8r 1  AD rr rr        LDA camera_world_pos_YL
0049EBr 1  7D rr rr        ADC MOVE_Y_L,X
0049EEr 1  8D rr rr        STA camera_world_pos_YL
0049F1r 1  AD rr rr        LDA camera_world_pos_YH
0049F4r 1  7D rr rr        ADC MOVE_Y_H,X
0049F7r 1  8D rr rr        STA camera_world_pos_YH
0049FAr 1  4C rr rr        jmp @camera_world_changed
0049FDr 1               
0049FDr 1  C9 91         : cmp #$91 ; cursor up
0049FFr 1  D0 2C           BNE :+
004A01r 1  AE rr rr        LDX camera_facing
004A04r 1  18              CLC
004A05r 1  AD rr rr        LDA camera_world_pos_XL
004A08r 1  7D rr rr        ADC MOVE_X_L,X
004A0Br 1  8D rr rr        STA camera_world_pos_XL
004A0Er 1  AD rr rr        LDa camera_world_pos_XH
004A11r 1  7D rr rr        ADC MOVE_X_H,X
004A14r 1  8D rr rr        STA camera_world_pos_XH
004A17r 1  38              SEC
004A18r 1  AD rr rr        LDA camera_world_pos_YL
004A1Br 1  FD rr rr        SBC MOVE_Y_L,X
004A1Er 1  8D rr rr        STA camera_world_pos_YL
004A21r 1  AD rr rr        LDA camera_world_pos_YH
004A24r 1  FD rr rr        SBC MOVE_Y_H,X
004A27r 1  8D rr rr        STA camera_world_pos_YH
004A2Ar 1  4C rr rr        jmp @camera_world_changed
004A2Dr 1               
004A2Dr 1  C9 45         : cmp  #E_CHAR ; cell up right
004A2Fr 1  D0 15           BNE :+++
004A31r 1  AD rr rr        LDA camera_cell_y
004A34r 1  F0 03           BEQ :+
004A36r 1  CE rr rr        DEC camera_cell_y
004A39r 1  AD rr rr      : LDA camera_cell_x
004A3Cr 1  C9 3F           CMP #63
004A3Er 1  B0 03           BCS :+
004A40r 1  EE rr rr        INC camera_cell_x
004A43r 1  4C rr rr      : JMP @camera_cell_changed
004A46r 1               
004A46r 1  C9 57         : cmp #W_CHAR ; cell up left
004A48r 1  D0 0B           BNE :++
004A4Ar 1  AD rr rr        LDA camera_cell_y
004A4Dr 1  F0 03           BEQ :+
004A4Fr 1  CE rr rr        DEC camera_cell_y
004A52r 1  4C rr rr      : JMP @camera_cell_changed
004A55r 1               
004A55r 1  C9 41         : cmp #A_CHAR ; cell left
004A57r 1  D0 0B           BNE :++
004A59r 1  AD rr rr        LDA camera_cell_x
004A5Cr 1  F0 03           BEQ :+
004A5Er 1  CE rr rr        DEC camera_cell_x
004A61r 1  4C rr rr      : JMP @camera_cell_changed
004A64r 1               
004A64r 1  C9 44         : cmp #D_CHAR ; cell right
004A66r 1  D0 0D           BNE :++
004A68r 1  AD rr rr        LDA camera_cell_x
004A6Br 1  C9 3F           CMP #63
004A6Dr 1  B0 03           BCS :+
004A6Fr 1  EE rr rr        INC camera_cell_x
004A72r 1  4C rr rr      : JMP @camera_cell_changed
004A75r 1               
004A75r 1  C9 58         : cmp #X_CHAR ; cell down right
004A77r 1  D0 0D           BNE :++
004A79r 1  AD rr rr        LDA camera_cell_y
004A7Cr 1  C9 1E           CMP #30
004A7Er 1  B0 03           BCS :+
004A80r 1  EE rr rr        INC camera_cell_y
004A83r 1  4C rr rr      : JMP @camera_cell_changed
004A86r 1               
004A86r 1  C9 5A         : cmp  #Z_CHAR ; cell down left
004A88r 1  D0 15           BNE :+++
004A8Ar 1  AD rr rr        LDA camera_cell_y
004A8Dr 1  C9 1E           CMP #30
004A8Fr 1  B0 03           BCS :+
004A91r 1  EE rr rr        INC camera_cell_y
004A94r 1  AD rr rr      : LDA camera_cell_x
004A97r 1  F0 03           BEQ :+
004A99r 1  CE rr rr        DEC camera_cell_x
004A9Cr 1  4C rr rr      : JMP @camera_cell_changed
004A9Fr 1               
004A9Fr 1  C9 20         : cmp #SPACE;
004AA1r 1  D0 09           BNE :+
004AA3r 1  9C rr rr        STZ camera_cell_xl
004AA6r 1  9C rr rr        STZ camera_cell_yl
004AA9r 1  4C rr rr        JMP @camera_cell_changed
004AACr 1               
004AACr 1  C9 49         : cmp #I_CHAR ; cell y - 1/16
004AAEr 1  D0 25           BNE :++
004AB0r 1  38              SEC
004AB1r 1  AD rr rr        LDA camera_cell_yl
004AB4r 1  E9 10           SBC #16
004AB6r 1  8D rr rr        STA camera_cell_yl
004AB9r 1  B0 17           BCS :+
004ABBr 1  AD rr rr        LDA camera_cell_y
004ABEr 1  F0 12           BEQ :+
004AC0r 1  3A              DEC A
004AC1r 1  8D rr rr        STA camera_cell_y
004AC4r 1  18              CLC
004AC5r 1  AD rr rr        LDA camera_cell_xl
004AC8r 1  69 80           ADC #128
004ACAr 1  8D rr rr        STA camera_cell_xl
004ACDr 1  90 03           BCC :+
004ACFr 1  EE rr rr        INC camera_cell_x
004AD2r 1  4C rr rr      : JMP @camera_cell_changed
004AD5r 1               
004AD5r 1  C9 4A         : cmp #J_CHAR ; cell x - 1/16
004AD7r 1  D0 17           BNE :++
004AD9r 1  38              SEC
004ADAr 1  AD rr rr        LDA camera_cell_xl
004ADDr 1  E9 10           SBC #16
004ADFr 1  8D rr rr        STA camera_cell_xl
004AE2r 1  B0 09           BCS :+
004AE4r 1  AD rr rr        LDA camera_cell_x
004AE7r 1  F0 04           BEQ :+
004AE9r 1  3A              DEC A
004AEAr 1  8D rr rr        STA camera_cell_x
004AEDr 1  4C rr rr      : JMP @camera_cell_changed
004AF0r 1               
004AF0r 1  C9 4B         : cmp #K_CHAR ; cell y + 1/16
004AF2r 1  D0 27           BNE :++
004AF4r 1  18              CLC
004AF5r 1  AD rr rr        LDA camera_cell_yl
004AF8r 1  69 10           ADC #16
004AFAr 1  8D rr rr        STA camera_cell_yl
004AFDr 1  90 19           BCC :+
004AFFr 1  AD rr rr        LDA camera_cell_y
004B02r 1  C9 1F           CMP #31
004B04r 1  B0 12           BCS :+
004B06r 1  1A              INC A
004B07r 1  8D rr rr        STA camera_cell_y
004B0Ar 1  38              SEC
004B0Br 1  AD rr rr        LDA camera_cell_xl
004B0Er 1  E9 80           SBC #128
004B10r 1  8D rr rr        STA camera_cell_xl
004B13r 1  B0 03           BCS :+
004B15r 1  CE rr rr        DEC camera_cell_x
004B18r 1  4C rr rr      : JMP @camera_cell_changed
004B1Br 1               
004B1Br 1  C9 4C         : cmp #L_CHAR ; cell x + 1/16
004B1Dr 1  D0 11           BNE :++
004B1Fr 1  18              CLC
004B20r 1  AD rr rr        LDA camera_cell_xl
004B23r 1  69 10           ADC #16
004B25r 1  8D rr rr        STA camera_cell_xl
004B28r 1  90 03           BCC :+
004B2Ar 1  EE rr rr        INC camera_cell_x
004B2Dr 1  4C rr rr      : JMP @camera_cell_changed
004B30r 1               
004B30r 1  C9 31         : CMP #ONE_CHAR
004B32r 1  D0 08           BNE :+
004B34r 1  AD 29 9F        LDA VERA_dc_video
004B37r 1  49 20           EOR #%00100000
004B39r 1  8D 29 9F        STA VERA_dc_video
004B3Cr 1               
004B3Cr 1  C9 32         : CMP #TWO_CHAR
004B3Er 1  D0 08           BNE :+
004B40r 1  AD 29 9F        LDA VERA_dc_video
004B43r 1  49 40           EOR #%01000000
004B45r 1  8D 29 9F        STA VERA_dc_video
004B48r 1               
004B48r 1  C9 33         : CMP #THREE_CHAR
004B4Ar 1  D0 08           BNE :+
004B4Cr 1  AD 29 9F        LDA VERA_dc_video
004B4Fr 1  49 10           EOR #%00010000
004B51r 1  8D 29 9F        STA VERA_dc_video
004B54r 1               
004B54r 1  C9 30         : CMP #ZERO_CHAR
004B56r 1  D0 13           BNE :+++
004B58r 1  AD 2A 9F        LDA VERA_dc_hscale
004B5Br 1  C9 2B           CMP #43
004B5Dr 1  B0 04           BCS :+
004B5Fr 1  A9 33           LDA #51 ; #51 ; 51 is 255
004B61r 1  80 02           BRA :++
004B63r 1  A9 20         : LDA #32
004B65r 1  8D 2A 9F      : STA VERA_dc_hscale
004B68r 1  8D 2B 9F        STA VERA_dc_vscale
004B6Br 1               
004B6Br 1  C9 39         : CMP #NINE_CHAR
004B6Dr 1  D0 08           BNE :+
004B6Fr 1  AD rr rr        LDA SPRITE_OBJECT_ENABLE
004B72r 1  49 FF           EOR #$FF
004B74r 1  8D rr rr        STA SPRITE_OBJECT_ENABLE
004B77r 1               
004B77r 1  C9 38         : CMP #EIGHT_CHAR
004B79r 1  D0 08           BNE :+
004B7Br 1  A9 FF           LDA #$FF
004B7Dr 1  4D rr rr        EOR DO_WATER
004B80r 1  8D rr rr        STA DO_WATER
004B83r 1               
004B83r 1  C9 37         : CMP #SEVEN_CHAR
004B85r 1  D0 08           BNE :+
004B87r 1  AD rr rr        LDA DO_WATER
004B8Ar 1  D0 03           BNE :+
004B8Cr 1  20 rr rr        JSR UPDATE_WATER_SIM
004B8Fr 1               
004B8Fr 1  C9 36         : CMP #SIX_CHAR
004B91r 1  D0 08           BNE :+
004B93r 1  AD rr rr        LDA DO_FAUCET
004B96r 1  49 FF           EOR #$FF
004B98r 1  8D rr rr        STA DO_FAUCET
004B9Br 1               
004B9Br 1  4C rr rr      : JMP @do_update
004B9Er 1               
004B9Er 1               @cleanup_and_exit:
004B9Er 1                  ; restore default IRQ vector
004B9Er 1  78              sei
004B9Fr 1  AD rr rr        lda default_irq_vector
004BA2r 1  8D 14 03        sta IRQVec
004BA5r 1  AD rr rr        lda default_irq_vector+1
004BA8r 1  8D 15 03        sta IRQVec+1
004BABr 1  58              cli
004BACr 1  20 81 FF        jsr CINT
004BAFr 1  60              rts
004BB0r 1               
004BB0r 1               
004BB0r 1               ; CURRENT
004BB0r 1               push_world_to_object_list: ; as in.. let's try this again?? wait.. missing a STZ ZP_PTR...
004BB0r 1               PWOL_TUB_PTR_AL   = ZP_PTR
004BB0r 1               PWOL_TUB_PTR_AH   = ZP_PTR+1
004BB0r 1               PWOL_TUB_PTR_BL   = ZP_PTR+2
004BB0r 1               PWOL_TUB_PTR_BH   = ZP_PTR+3
004BB0r 1               PWOL_CURRENT_XL   = ZP_PTR+4
004BB0r 1               PWOL_CURRENT_XH   = ZP_PTR+5
004BB0r 1               PWOL_CURRENT_YL   = ZP_PTR+6
004BB0r 1               PWOL_CURRENT_YH   = ZP_PTR+7
004BB0r 1               PWOL_ACROSS_ROW_XL= ZP_PTR+8
004BB0r 1               PWOL_ACROSS_ROW_XH= ZP_PTR+9
004BB0r 1               PWOL_ACROSS_ROW_YL= ZP_PTR+10
004BB0r 1               PWOL_ACROSS_ROW_YH= ZP_PTR+11
004BB0r 1               PWOL_NEXT_ROW_A_LEFT_XL  = ZP_PTR+12
004BB0r 1               PWOL_NEXT_ROW_A_LEFT_XH  = ZP_PTR+13
004BB0r 1               PWOL_NEXT_ROW_A_LEFT_YL  = ZP_PTR+14
004BB0r 1               PWOL_NEXT_ROW_A_LEFT_YH  = ZP_PTR+15
004BB0r 1               PWOL_NEXT_ROW_A_RIGHT_XL  = ZP_PTR+16
004BB0r 1               PWOL_NEXT_ROW_A_RIGHT_XH  = ZP_PTR+17
004BB0r 1               PWOL_NEXT_ROW_A_RIGHT_YL  = ZP_PTR+18
004BB0r 1               PWOL_NEXT_ROW_A_RIGHT_YH  = ZP_PTR+19
004BB0r 1               PWOL_NEXT_ROW_B_LEFT_XL  = ZP_PTR+20
004BB0r 1               PWOL_NEXT_ROW_B_LEFT_XH  = ZP_PTR+21
004BB0r 1               PWOL_NEXT_ROW_B_LEFT_YL  = ZP_PTR+22
004BB0r 1               PWOL_NEXT_ROW_B_LEFT_YH  = ZP_PTR+23
004BB0r 1               PWOL_NEXT_ROW_B_RIGHT_XL  = ZP_PTR+24
004BB0r 1               PWOL_NEXT_ROW_B_RIGHT_XH  = ZP_PTR+25
004BB0r 1               PWOL_NEXT_ROW_B_RIGHT_YL  = ZP_PTR+26
004BB0r 1               PWOL_NEXT_ROW_B_RIGHT_YH  = ZP_PTR+27
004BB0r 1               PWOL_Z_STARTS_PTR = ZP_PTR+28
004BB0r 1               PWOL_Z_STARTS_PTRH = ZP_PTR+29
004BB0r 1               PWOL_CONVERT_HEIGHTS = ZP_PTR+30
004BB0r 1               PWOL_CONVERT_HEIGHTSH= ZP_PTR+31
004BB0r 1               PWOL_CONVERT_HEIGHTS_L = ZP_PTR+32
004BB0r 1               PWOL_CONVERT_HEIGHTS_LH = ZP_PTR+33
004BB0r 1               PWOL_TRIES_COUNTER = ZP_PTR+34
004BB0r 1               PWOL_START_XL = ZP_PTR+35
004BB0r 1               PWOL_START_YL = ZP_PTR+36
004BB0r 1               PWOL_START_XH = ZP_PTR+37
004BB0r 1               PWOL_START_YH = ZP_PTR+38
004BB0r 1               
004BB0r 1               PWOL_START_COS_XL = ZP_PTR+39
004BB0r 1               PWOL_START_COS_XH = ZP_PTR+40
004BB0r 1               PWOL_START_COS_YL = ZP_PTR+41
004BB0r 1               PWOL_START_COS_YH = ZP_PTR+42
004BB0r 1               PWOL_START_SIN_XL = ZP_PTR+43
004BB0r 1               PWOL_START_SIN_XH = ZP_PTR+44
004BB0r 1               PWOL_START_SIN_YL = ZP_PTR+45
004BB0r 1               PWOL_START_SIN_YH = ZP_PTR+46
004BB0r 1               
004BB0r 1               PWOL_camera_cell_xl = ZP_PTR+47
004BB0r 1               PWOL_camera_cell_yl = ZP_PTR+48
004BB0r 1               PWOL_CENTER_Y  =  ZP_PTR+49
004BB0r 1               PWOL_CENTER_Y_TOP     =  ZP_PTR+50
004BB0r 1               
004BB0r 1               PWOL_TOP_CHECK = ZP_PTR+51
004BB0r 1               PWOL_BOT_CHECK = ZP_PTR+52
004BB0r 1               
004BB0r 1               TRY_AGAIN = 6
004BB0r 1  AD rr rr        LDA camera_screen_out_top
004BB3r 1  85 55           STA PWOL_TOP_CHECK
004BB5r 1  AD rr rr        LDA camera_screen_out_bottom
004BB8r 1  85 56           STA PWOL_BOT_CHECK
004BBAr 1               
004BBAr 1  AD rr rr        LDA CAMERA_CENTER_YH
004BBDr 1  1A              INC A
004BBEr 1  85 53           STA PWOL_CENTER_Y
004BC0r 1  AD rr rr        LDA CAMERA_CENTER_TOP_PX
004BC3r 1  18              CLC
004BC4r 1  69 0A           ADC #10
004BC6r 1  85 54           STA PWOL_CENTER_Y_TOP
004BC8r 1               
004BC8r 1               
004BC8r 1  A9 rr           LDA #>CONVERT_HEIGHTS_PIXELS
004BCAr 1  85 41           STA PWOL_CONVERT_HEIGHTSH
004BCCr 1  A9 rr           LDA #>CONVERT_HEIGHTS_PIXELS_L
004BCEr 1  85 43           STA PWOL_CONVERT_HEIGHTS_LH
004BD0r 1               
004BD0r 1  A9 rr           LDA #>OBJECT_LIST_Z_START_POINTERS
004BD2r 1  85 3F           STA PWOL_Z_STARTS_PTRH
004BD4r 1               
004BD4r 1  AE rr rr        LDX camera_facing
004BD7r 1  BD rr rr        LDA ACROSS_ROW_X_L,x    ; 0900  16 wide , 45* tilt ... this is added to go up row, sub for down row
004BDAr 1  85 2A           STA PWOL_ACROSS_ROW_XL
004BDCr 1  BD rr rr        LDA ACROSS_ROW_X_H,x
004BDFr 1  85 2B           STA PWOL_ACROSS_ROW_XH
004BE1r 1               
004BE1r 1  BD rr rr        LDA ACROSS_ROW_Y_L,x
004BE4r 1  85 2C           STA PWOL_ACROSS_ROW_YL
004BE6r 1  BD rr rr        LDA ACROSS_ROW_Y_H,x
004BE9r 1  85 2D           STA PWOL_ACROSS_ROW_YH
004BEBr 1               
004BEBr 1  18              CLC
004BECr 1  BD rr rr        LDA NEXT_ROW_X_L,X  ; 0D00 next row LEFT/up when added
004BEFr 1  85 2E           STA PWOL_NEXT_ROW_A_LEFT_XL   ; -> next row is left, going up the screen ..  -1,-1
004BF1r 1  65 2A           ADC PWOL_ACROSS_ROW_XL   ; across row is for right , subtract to go left  +1 -> 0,1
004BF3r 1  85 32           STA PWOL_NEXT_ROW_A_RIGHT_XL  ;  -> next row is right, going up the screen .. -1,-1
004BF5r 1  BD rr rr        LDA NEXT_ROW_X_H,x
004BF8r 1  85 2F           STA PWOL_NEXT_ROW_A_LEFT_XH
004BFAr 1  65 2B           ADC PWOL_ACROSS_ROW_XH
004BFCr 1  85 33           STA PWOL_NEXT_ROW_A_RIGHT_XH
004BFEr 1               
004BFEr 1  18              CLC
004BFFr 1  BD rr rr        LDA NEXT_ROW_Y_L,X  ; 0F00 next row LEFT/up when added
004C02r 1  85 30           STA PWOL_NEXT_ROW_A_LEFT_YL   ; -> next row is left, going up the screen
004C04r 1  65 2C           ADC PWOL_ACROSS_ROW_YL   ; across row is for right
004C06r 1  85 34           STA PWOL_NEXT_ROW_A_RIGHT_YL  ;  -> next row is right, going up the screen
004C08r 1  BD rr rr        LDA NEXT_ROW_Y_H,x
004C0Br 1  85 31           STA PWOL_NEXT_ROW_A_LEFT_YH
004C0Dr 1  65 2D           ADC PWOL_ACROSS_ROW_YH
004C0Fr 1  85 35           STA PWOL_NEXT_ROW_A_RIGHT_YH
004C11r 1               
004C11r 1               
004C11r 1               ; for zig B , the opposite of left/up is right/down.. so A_LEFT * -1 = B_RIGHT
004C11r 1  38              SEC ; flip A_LEFT X to B_RIGHT X
004C12r 1  A9 00           LDA #0
004C14r 1  E5 2E           SBC PWOL_NEXT_ROW_A_LEFT_XL
004C16r 1  85 3A           STA PWOL_NEXT_ROW_B_RIGHT_XL
004C18r 1  A9 00           LDA #0
004C1Ar 1  E5 2F           SBC PWOL_NEXT_ROW_A_LEFT_XH
004C1Cr 1  85 3B           STA PWOL_NEXT_ROW_B_RIGHT_XH
004C1Er 1               
004C1Er 1  38              SEC ; flip A_LEFT Y to B_RIGHT Y
004C1Fr 1  A9 00           LDA #0
004C21r 1  E5 30           SBC PWOL_NEXT_ROW_A_LEFT_YL
004C23r 1  85 3C           STA PWOL_NEXT_ROW_B_RIGHT_YL
004C25r 1  A9 00           LDA #0
004C27r 1  E5 31           SBC PWOL_NEXT_ROW_A_LEFT_YH
004C29r 1  85 3D           STA PWOL_NEXT_ROW_B_RIGHT_YH
004C2Br 1               
004C2Br 1  38              SEC ; flip A_RIGHT X to B_LEFT X
004C2Cr 1  A9 00           LDA #0
004C2Er 1  E5 32           SBC PWOL_NEXT_ROW_A_RIGHT_XL
004C30r 1  85 36           STA PWOL_NEXT_ROW_B_LEFT_XL
004C32r 1  A9 00           LDA #0
004C34r 1  E5 33           SBC PWOL_NEXT_ROW_A_RIGHT_XH
004C36r 1  85 37           STA PWOL_NEXT_ROW_B_LEFT_XH
004C38r 1               
004C38r 1  38              SEC ; flip A_RIGHT Y to B_LEFT Y
004C39r 1  A9 00           LDA #0
004C3Br 1  E5 34           SBC PWOL_NEXT_ROW_A_RIGHT_YL
004C3Dr 1  85 38           STA PWOL_NEXT_ROW_B_LEFT_YL
004C3Fr 1  A9 00           LDA #0
004C41r 1  E5 35           SBC PWOL_NEXT_ROW_A_RIGHT_YH
004C43r 1  85 39           STA PWOL_NEXT_ROW_B_LEFT_YH
004C45r 1               
004C45r 1  AD rr rr        LDA CAMERA_CENTER_XL
004C48r 1  85 26            STA PWOL_CURRENT_XL
004C4Ar 1  85 45            STA PWOL_START_XL
004C4Cr 1               
004C4Cr 1  AD rr rr        LDA CAMERA_CENTER_YL
004C4Fr 1  85 28            STA PWOL_CURRENT_YL
004C51r 1  85 46            STA PWOL_START_YL
004C53r 1               
004C53r 1  AD rr rr        LDA CAMERA_CENTER_XH
004C56r 1  85 27            STA PWOL_CURRENT_XH
004C58r 1  85 47            STA PWOL_START_XH
004C5Ar 1               
004C5Ar 1               
004C5Ar 1  AD rr rr        LDA CAMERA_CENTER_YH
004C5Dr 1  85 29            STA PWOL_CURRENT_YH
004C5Fr 1  85 48            STA PWOL_START_YH
004C61r 1               
004C61r 1  AD rr rr         LDA CAMERA_CELL_LINE_PTR
004C64r 1  85 22            STA PWOL_TUB_PTR_AL
004C66r 1  85 24            STA PWOL_TUB_PTR_BL
004C68r 1  AD rr rr         LDA CAMERA_CELL_LINE_PTR+1
004C6Br 1  85 23            STA PWOL_TUB_PTR_AH
004C6Dr 1  85 25            STA PWOL_TUB_PTR_BH
004C6Fr 1               
004C6Fr 1                  ; STZ VERA_ctrl
004C6Fr 1                  ; LDA #<(VRAM_TEXT_SCREEN+17*64)
004C6Fr 1                  ; STA VERA_addr_low
004C6Fr 1                  ; LDA #>(VRAM_TEXT_SCREEN+17*64)
004C6Fr 1                  ; STA VERA_addr_high
004C6Fr 1                  ; LDA #$21
004C6Fr 1                  ; STA VERA_addr_bank
004C6Fr 1                  ; LDA #26
004C6Fr 1                  ; STA VERA_data0
004C6Fr 1               
004C6Fr 1                 @zigzag_A: ; going to right and up the screen, including where we are currently..
004C6Fr 1  AC rr rr         LDY camera_cell_x
004C72r 1  80 00            BRA @zigzag_A_right
004C74r 1                  @ZAR_OUT:
004C74r 1               
004C74r 1                   @zigzag_A_right:
004C74r 1  C0 40                CPY #64  ;  make sure we don't go outside level..
004C76r 1  B0 68                BCS @ZAR_NEXT ; if we're outside we'll just skip is OK here
004C78r 1  B1 22                LDA (PWOL_TUB_PTR_AL),y
004C7Ar 1  C9 81                CMP #129
004C7Cr 1  B0 62                BCS @ZAR_NEXT ; this isn't a valid spot in the level map..
004C7Er 1                       ; bytes 1 and 4 were updated when we cleared the object list
004C7Er 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
004C81r 1  D0 04                BNE :++
004C83r 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
004C86r 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
004C87r 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
004C89r 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
004C8Cr 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen... (could cause issues if we're high up? can't see behind?)
004C8Er 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
004C90r 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
004C92r 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
004C95r 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
004C98r 1  8A                   TXA ; push new next to the Z buffer spot
004C99r 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
004C9Br 1                       ; bytes .1..4.6 filled in already..
004C9Br 1  B1 22                LDA (PWOL_TUB_PTR_AL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
004C9Dr 1  10 08                BPL @ZAR_INSIDE_TUB
004C9Fr 1                     @ZAR_HIT_WALL_OUCH:
004C9Fr 1  AD rr rr               LDA WORLD_WALL_SPRITE_NUM
004CA2r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
004CA5r 1  A9 56                  LDA #86 ; max height..
004CA7r 1                     @ZAR_INSIDE_TUB:
004CA7r 1  85 40                  STA PWOL_CONVERT_HEIGHTS ;
004CA9r 1  85 42                  STA PWOL_CONVERT_HEIGHTS_L;
004CABr 1  38                     SEC
004CACr 1  A5 28                  LDA PWOL_CURRENT_YL
004CAEr 1  F2 42                  SBC (PWOL_CONVERT_HEIGHTS_L)
004CB0r 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
004CB2r 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
004CB4r 1  C9 78                  CMP #SCREEN_OUT_BOTTOM    ;  are we even visible?
004CB6r 1  90 0E                  BCC :+
004CB8r 1  C5 55                  CMP PWOL_TOP_CHECK  ;     #SCREEN_OUT_TOP-50 ;PWOL_TOP_CHECK;
004CBAr 1  B0 0A                  BCS :+
004CBCr 1  CE rr rr               DEC OBJECT_LIST_BYTE6_NEXT
004CBFr 1  BD rr rr               LDA OBJECT_LIST_BYTE6_NEXT,X ; grab the old next value
004CC2r 1  92 3E                  STA (PWOL_Z_STARTS_PTR) ; patch the old one back in..
004CC4r 1  80 1A                  BRA @ZAR_NEXT ; and skip THIS
004CC6r 1                       :
004CC6r 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
004CC9r 1  C5 54                  CMP PWOL_CENTER_Y_TOP ; is this above center on screen??
004CCBr 1  B0 0E                  BCS :+ ; is not covering us
004CCDr 1  A5 29                  LDA PWOL_CURRENT_YH
004CCFr 1  C5 53                  CMP PWOL_CENTER_Y
004CD1r 1  90 08                  BCC :+ ; its from ahead of us, OK
004CD3r 1                         ; it was from below and covers us ..
004CD3r 1  BD rr rr               LDA OBJECT_LIST_BYTE0_ADDRLOW,X
004CD6r 1  69 0F                  ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
004CD8r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X
004CDBr 1                         ;LDA #$D0
004CDBr 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
004CDBr 1  A5 27                : LDA PWOL_CURRENT_XH
004CDDr 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
004CE0r 1                         ; for debugging ...
004CE0r 1                     ;    STZ VERA_data0
004CE0r 1                     ;    STA VERA_data0
004CE0r 1                     ;    LDA PWOL_CURRENT_YH
004CE0r 1                     ;    STA VERA_data0
004CE0r 1                     ;    STZ VERA_data0
004CE0r 1               
004CE0r 1                    @ZAR_NEXT:
004CE0r 1                        ; calc next to the right..
004CE0r 1  C8                    INY
004CE1r 1  18                    CLC
004CE2r 1  A5 26                 LDA PWOL_CURRENT_XL
004CE4r 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
004CE6r 1  85 26                 STA PWOL_CURRENT_XL
004CE8r 1  A5 27                 LDA PWOL_CURRENT_XH
004CEAr 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
004CECr 1  85 27                 STA PWOL_CURRENT_XH
004CEEr 1  AA                    TAX
004CEFr 1  18                    CLC
004CF0r 1  A5 28                 LDA PWOL_CURRENT_YL
004CF2r 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
004CF4r 1  85 28                 STA PWOL_CURRENT_YL
004CF6r 1  A5 29                 LDA PWOL_CURRENT_YH
004CF8r 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
004CFAr 1  85 29                 STA PWOL_CURRENT_YH
004CFCr 1               
004CFCr 1               
004CFCr 1  C5 56                 CMP PWOL_BOT_CHECK
004CFEr 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
004D00r 1  C9 F0                 CMP #SCREEN_OUT_TOP
004D02r 1  90 0B                 BCC @ZAR_ZIG_LEFT_SWITCH ; its bottom_out <= Y < top out .. because negatives are bigger
004D04r 1                      :
004D04r 1  E0 A0                 CPX #SCREEN_OUT_RIGHT ; check against right side
004D06r 1  90 04                 BCC :+                ; if its within right side then go do next thing..
004D08r 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
004D0Ar 1  90 03                 BCC @ZAR_ZIG_LEFT_SWITCH ; we're to the right of the screen but not far enough to wrap around..
004D0Cr 1  4C rr rr            : JMP @zigzag_A_right
004D0Fr 1                    @ZAR_ZIG_LEFT_SWITCH: ;PWOL_NEXT_ROW_A_LEFT_XL   ; -> next row is left, going up the screen ..  +0,-1
004D0Fr 1  A9 06                 LDA #TRY_AGAIN
004D11r 1  85 44                 STA PWOL_TRIES_COUNTER
004D13r 1               ;         INY
004D13r 1  38                    SEC
004D14r 1  A5 22                 LDA PWOL_TUB_PTR_AL
004D16r 1  E9 40                 SBC #64 ;   0,-1
004D18r 1  85 22                 STA PWOL_TUB_PTR_AL
004D1Ar 1  A5 23                 LDA PWOL_TUB_PTR_AH
004D1Cr 1  E9 00                 SBC #0
004D1Er 1  C9 rr                 CMP #>TUB_WORLD ; are we inside the world still?
004D20r 1  B0 03                 BCS :+
004D22r 1  4C rr rr              JMP @zigzag_B
004D25r 1  85 23               : STA PWOL_TUB_PTR_AH
004D27r 1               
004D27r 1  18                    CLC
004D28r 1  A5 26                 LDA PWOL_CURRENT_XL
004D2Ar 1  65 2E                 ADC PWOL_NEXT_ROW_A_LEFT_XL
004D2Cr 1  85 26                 STA PWOL_CURRENT_XL
004D2Er 1  A5 27                 LDA PWOL_CURRENT_XH
004D30r 1  65 2F                 ADC PWOL_NEXT_ROW_A_LEFT_XH
004D32r 1  85 27                 STA PWOL_CURRENT_XH
004D34r 1  AA                    TAX
004D35r 1  18                    CLC
004D36r 1  A5 28                 LDA PWOL_CURRENT_YL
004D38r 1  65 30                 ADC PWOL_NEXT_ROW_A_LEFT_YL
004D3Ar 1  85 28                 STA PWOL_CURRENT_YL
004D3Cr 1  A5 29                 LDA PWOL_CURRENT_YH
004D3Er 1  65 31                 ADC PWOL_NEXT_ROW_A_LEFT_YH
004D40r 1  80 21                 BRA @ZAR_ZIG_LEFT_SWITCH_CHECK
004D42r 1               
004D42r 1                  @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN:
004D42r 1  C6 44                 DEC PWOL_TRIES_COUNTER
004D44r 1  D0 03                 BNE @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT
004D46r 1  4C rr rr              JMP @zigzag_B
004D49r 1                  @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT:
004D49r 1  88                    DEY
004D4Ar 1  38                    SEC
004D4Br 1  A5 26                 LDA PWOL_CURRENT_XL
004D4Dr 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
004D4Fr 1  85 26                 STA PWOL_CURRENT_XL
004D51r 1  A5 27                 LDA PWOL_CURRENT_XH
004D53r 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
004D55r 1  85 27                 STA PWOL_CURRENT_XH
004D57r 1  AA                    TAX
004D58r 1  38                    SEC
004D59r 1  A5 28                 LDA PWOL_CURRENT_YL
004D5Br 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
004D5Dr 1  85 28                 STA PWOL_CURRENT_YL
004D5Fr 1  A5 29                 LDA PWOL_CURRENT_YH
004D61r 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
004D63r 1               
004D63r 1                  @ZAR_ZIG_LEFT_SWITCH_CHECK:
004D63r 1  85 29                 STA PWOL_CURRENT_YH
004D65r 1  C5 56                 CMP PWOL_BOT_CHECK
004D67r 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
004D69r 1  C9 F0                 CMP #SCREEN_OUT_TOP
004D6Br 1  90 D5                 BCC @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN   ; its bottom_out <= Y < top out .. because negatives are bigger
004D6Dr 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
004D6Fr 1  90 04                 BCC @zigzag_A_left
004D71r 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
004D73r 1  90 CD                 BCC @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
004D75r 1               
004D75r 1               
004D75r 1               
004D75r 1                  @zigzag_A_left:
004D75r 1  C0 40                CPY #64  ;  make sure we don't go outside level..
004D77r 1  B0 6E                BCS @ZAL_NEXT ; if we're outside we'll just skip is OK
004D79r 1  B1 22                LDA (PWOL_TUB_PTR_AL),y
004D7Br 1  C9 81                CMP #129
004D7Dr 1  B0 68                BCS @ZAL_NEXT ; we're outside level.
004D7Fr 1               
004D7Fr 1                       ; bytes 1 and 4 were updated when we cleared the object list
004D7Fr 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
004D82r 1  D0 04                BNE :++
004D84r 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
004D87r 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
004D88r 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
004D8Ar 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
004D8Dr 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen...
004D8Fr 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
004D91r 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
004D93r 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
004D96r 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
004D99r 1  8A                   TXA ; push new next to the Z buffer spot
004D9Ar 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
004D9Cr 1                       ; bytes .1..4.6 filled in already..
004D9Cr 1  AD rr rr             LDA WORLD_SPRITE_NUM
004D9Fr 1  9D rr rr             STA OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway..
004DA2r 1  B1 22                LDA (PWOL_TUB_PTR_AL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
004DA4r 1  10 08                BPL @ZAL_INSIDE_TUB
004DA6r 1                     @ZAL_HIT_WALL_OUCH:
004DA6r 1  AD rr rr               LDA WORLD_WALL_SPRITE_NUM
004DA9r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
004DACr 1  A9 56                  LDA #86 ; max height..
004DAEr 1                     @ZAL_INSIDE_TUB:
004DAEr 1  85 40                  STA PWOL_CONVERT_HEIGHTS ;
004DB0r 1  85 42                  STA PWOL_CONVERT_HEIGHTS_L;
004DB2r 1  38                     SEC
004DB3r 1  A5 28                  LDA PWOL_CURRENT_YL
004DB5r 1  F2 42                  SBC (PWOL_CONVERT_HEIGHTS_L)
004DB7r 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
004DB9r 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
004DBBr 1  C9 78                  CMP #SCREEN_OUT_BOTTOM    ;  are we even visible?
004DBDr 1  90 0E                  BCC :+
004DBFr 1  C5 55                  CMP PWOL_TOP_CHECK  ;     #SCREEN_OUT_TOP-50 ;PWOL_TOP_CHECK;
004DC1r 1  B0 0A                  BCS :+
004DC3r 1  CE rr rr               DEC OBJECT_LIST_BYTE6_NEXT
004DC6r 1  BD rr rr               LDA OBJECT_LIST_BYTE6_NEXT,X ; grab the old next value
004DC9r 1  92 3E                  STA (PWOL_Z_STARTS_PTR) ; patch the old one back in..
004DCBr 1  80 1A                  BRA @ZAL_NEXT ; and skip THIS
004DCDr 1                       :
004DCDr 1               
004DCDr 1               
004DCDr 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
004DD0r 1  C5 54                  CMP PWOL_CENTER_Y_TOP ; is this above center on screen??
004DD2r 1  B0 0E                  BCS :+ ; is not covering us
004DD4r 1  A5 29                  LDA PWOL_CURRENT_YH
004DD6r 1  C5 53                  CMP PWOL_CENTER_Y
004DD8r 1  90 08                  BCC :+ ; its from ahead of us, OK
004DDAr 1                         ; it was from below and covers us ..
004DDAr 1  BD rr rr               LDA OBJECT_LIST_BYTE0_ADDRLOW,X
004DDDr 1  69 0F                  ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
004DDFr 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X
004DE2r 1                         ;LDA #$D0
004DE2r 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
004DE2r 1  A5 27                : LDA PWOL_CURRENT_XH
004DE4r 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
004DE7r 1                    @ZAL_NEXT:
004DE7r 1                        ; calc next to the LEFT
004DE7r 1  88                    DEY
004DE8r 1  38                    SEC
004DE9r 1  A5 26                 LDA PWOL_CURRENT_XL
004DEBr 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
004DEDr 1  85 26                 STA PWOL_CURRENT_XL
004DEFr 1  A5 27                 LDA PWOL_CURRENT_XH
004DF1r 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
004DF3r 1  85 27                 STA PWOL_CURRENT_XH
004DF5r 1  AA                    TAX
004DF6r 1  38                    SEC
004DF7r 1  A5 28                 LDA PWOL_CURRENT_YL
004DF9r 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
004DFBr 1  85 28                 STA PWOL_CURRENT_YL
004DFDr 1  A5 29                 LDA PWOL_CURRENT_YH
004DFFr 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
004E01r 1  85 29                 STA PWOL_CURRENT_YH
004E03r 1               
004E03r 1               
004E03r 1  C5 56                 CMP PWOL_BOT_CHECK
004E05r 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
004E07r 1  C9 F0                 CMP #SCREEN_OUT_TOP
004E09r 1  90 0B                 BCC @ZAL_ZIG_RIGHT_SWITCH   ; its bottom_out <= Y < top out .. because negatives are bigger
004E0Br 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
004E0Dr 1  90 04                 BCC :+                ; if its within right side then go do next thing..
004E0Fr 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
004E11r 1  90 03                 BCC @ZAL_ZIG_RIGHT_SWITCH     ; we're to the right of the screen but not far enough to wrap around..
004E13r 1  4C rr rr            : JMP @zigzag_A_left
004E16r 1               
004E16r 1                    @ZAL_ZIG_RIGHT_SWITCH: ; up/right is +1,+1  from where we is right now ..
004E16r 1  A9 06                 LDA #TRY_AGAIN
004E18r 1  85 44                 STA PWOL_TRIES_COUNTER
004E1Ar 1  C8                    INY
004E1Br 1  38                    SEC
004E1Cr 1  A5 22                 LDA PWOL_TUB_PTR_AL
004E1Er 1  E9 40                 SBC #64
004E20r 1  85 22                 STA PWOL_TUB_PTR_AL
004E22r 1  A5 23                 LDA PWOL_TUB_PTR_AH
004E24r 1  E9 00                 SBC #0
004E26r 1  C9 rr                 CMP #>TUB_WORLD ; are we inside the world still?
004E28r 1  B0 03                 BCS :+
004E2Ar 1  4C rr rr              JMP @zigzag_B
004E2Dr 1  85 23               : STA PWOL_TUB_PTR_AH
004E2Fr 1               
004E2Fr 1               
004E2Fr 1  18                    CLC
004E30r 1               
004E30r 1  A5 26                 LDA PWOL_CURRENT_XL
004E32r 1  65 32                 ADC PWOL_NEXT_ROW_A_RIGHT_XL
004E34r 1  85 26                 STA PWOL_CURRENT_XL
004E36r 1               
004E36r 1  A5 27                 LDA PWOL_CURRENT_XH
004E38r 1  65 33                 ADC PWOL_NEXT_ROW_A_RIGHT_XH
004E3Ar 1  85 27                 STA PWOL_CURRENT_XH
004E3Cr 1  AA                    TAX
004E3Dr 1               
004E3Dr 1               
004E3Dr 1  18                    CLC
004E3Er 1  A5 28                 LDA PWOL_CURRENT_YL
004E40r 1  65 34                 ADC PWOL_NEXT_ROW_A_RIGHT_YL
004E42r 1  85 28                 STA PWOL_CURRENT_YL
004E44r 1  A5 29                 LDA PWOL_CURRENT_YH
004E46r 1  65 35                 ADC PWOL_NEXT_ROW_A_RIGHT_YH
004E48r 1  80 1E                 BRA @ZAL_ZIG_RIGHT_SWITCH_CHECK
004E4Ar 1               
004E4Ar 1               
004E4Ar 1               
004E4Ar 1                  @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN:
004E4Ar 1  C6 44                 DEC PWOL_TRIES_COUNTER
004E4Cr 1  F0 2F                 BEQ @zigzag_B
004E4Er 1                  @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN_GO_RIGHT:
004E4Er 1  C8                    INY
004E4Fr 1  18                    CLC
004E50r 1  A5 26                 LDA PWOL_CURRENT_XL
004E52r 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
004E54r 1  85 26                 STA PWOL_CURRENT_XL
004E56r 1  A5 27                 LDA PWOL_CURRENT_XH
004E58r 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
004E5Ar 1  85 27                 STA PWOL_CURRENT_XH
004E5Cr 1  AA                    TAX
004E5Dr 1  18                    CLC
004E5Er 1  A5 28                 LDA PWOL_CURRENT_YL
004E60r 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
004E62r 1  85 28                 STA PWOL_CURRENT_YL
004E64r 1  A5 29                 LDA PWOL_CURRENT_YH
004E66r 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
004E68r 1                  @ZAL_ZIG_RIGHT_SWITCH_CHECK:
004E68r 1  85 29                 STA PWOL_CURRENT_YH
004E6Ar 1  C5 56                 CMP PWOL_BOT_CHECK
004E6Cr 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
004E6Er 1  C9 F0                 CMP #SCREEN_OUT_TOP
004E70r 1  90 D8                 BCC @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN    ; its bottom_out <= Y < top out .. because negatives are bigger
004E72r 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
004E74r 1  90 04                 BCC :+
004E76r 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
004E78r 1  90 D0                 BCC @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
004E7Ar 1  4C rr rr            : JMP @zigzag_A_right
004E7Dr 1               
004E7Dr 1               
004E7Dr 1                 @zigzag_B: ; going to left and down the screen, including where we are currently..
004E7Dr 1  38                 SEC
004E7Er 1  A5 45              LDA PWOL_START_XL
004E80r 1  E5 2A              SBC PWOL_ACROSS_ROW_XL
004E82r 1  85 26              STA PWOL_CURRENT_XL
004E84r 1  A5 47              LDA PWOL_START_XH
004E86r 1  E5 2B              SBC PWOL_ACROSS_ROW_XH
004E88r 1  85 27              STA PWOL_CURRENT_XH
004E8Ar 1               
004E8Ar 1               
004E8Ar 1  38                 SEC
004E8Br 1  A5 46              LDA PWOL_START_YL
004E8Dr 1  E5 2C              SBC PWOL_ACROSS_ROW_YL
004E8Fr 1  85 28              STA PWOL_CURRENT_YL
004E91r 1  A5 48              LDA PWOL_START_YH
004E93r 1  E5 2D              SBC PWOL_ACROSS_ROW_YH
004E95r 1  85 29              STA PWOL_CURRENT_YH
004E97r 1               
004E97r 1  AC rr rr           LDY camera_cell_x   ;  eh voila! we haz pointer to ze row to start on .. woot!
004E9Ar 1  88                 DEY ; start left
004E9Br 1               
004E9Br 1                  @zigzag_B_left:
004E9Br 1  C0 40                CPY #64  ;  make sure we don't go outside level..
004E9Dr 1  B0 6E                BCS @ZBL_NEXT ; if we're outside we'll just skip is OK
004E9Fr 1  B1 24                LDA (PWOL_TUB_PTR_BL),y
004EA1r 1  C9 81                CMP #129
004EA3r 1  B0 68                BCS @ZBL_NEXT ; we're outside level.
004EA5r 1               
004EA5r 1                       ; bytes 1 and 4 were updated when we cleared the object list
004EA5r 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
004EA8r 1  D0 04                BNE :++
004EAAr 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
004EADr 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
004EAEr 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
004EB0r 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
004EB3r 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen...
004EB5r 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
004EB7r 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
004EB9r 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
004EBCr 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
004EBFr 1  8A                   TXA ; push new next to the Z buffer spot
004EC0r 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
004EC2r 1                       ; bytes .1..4.6 filled in already..
004EC2r 1  AD rr rr             LDA WORLD_SPRITE_NUM
004EC5r 1  9D rr rr             STA OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway..
004EC8r 1  B1 24                LDA (PWOL_TUB_PTR_BL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
004ECAr 1  10 08                BPL @ZBL_INSIDE_TUB
004ECCr 1                     @ZBL_HIT_WALL_OUCH:
004ECCr 1  AD rr rr               LDA WORLD_WALL_SPRITE_NUM
004ECFr 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
004ED2r 1  A9 56                  LDA #86 ; max height..
004ED4r 1                     @ZBL_INSIDE_TUB:
004ED4r 1  85 40                  STA PWOL_CONVERT_HEIGHTS ;
004ED6r 1  85 42                  STA PWOL_CONVERT_HEIGHTS_L;
004ED8r 1  38                     SEC
004ED9r 1  A5 28                  LDA PWOL_CURRENT_YL
004EDBr 1  F2 42                  SBC (PWOL_CONVERT_HEIGHTS_L)
004EDDr 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
004EDFr 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
004EE1r 1  C9 78                  CMP #SCREEN_OUT_BOTTOM    ;  are we even visible?
004EE3r 1  90 0E                  BCC :+
004EE5r 1  C5 55                  CMP PWOL_TOP_CHECK  ;     #SCREEN_OUT_TOP-50 ;PWOL_TOP_CHECK;
004EE7r 1  B0 0A                  BCS :+
004EE9r 1  CE rr rr               DEC OBJECT_LIST_BYTE6_NEXT
004EECr 1  BD rr rr               LDA OBJECT_LIST_BYTE6_NEXT,X ; grab the old next value
004EEFr 1  92 3E                  STA (PWOL_Z_STARTS_PTR) ; patch the old one back in..
004EF1r 1  80 1A                  BRA @ZBL_NEXT ; and skip THIS
004EF3r 1                       :
004EF3r 1               
004EF3r 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
004EF6r 1  C5 54                  CMP PWOL_CENTER_Y_TOP ; is this above center on screen??
004EF8r 1  B0 0E                  BCS :+ ; is not covering us
004EFAr 1  A5 29                  LDA PWOL_CURRENT_YH
004EFCr 1  C5 53                  CMP PWOL_CENTER_Y
004EFEr 1  90 08                  BCC :+ ; its from ahead of us, OK
004F00r 1                         ; it was from below and covers us ..
004F00r 1  BD rr rr               LDA OBJECT_LIST_BYTE0_ADDRLOW,X
004F03r 1  69 0F                  ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
004F05r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X
004F08r 1                         ;LDA #$D0
004F08r 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
004F08r 1  A5 27                : LDA PWOL_CURRENT_XH
004F0Ar 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
004F0Dr 1                    @ZBL_NEXT:
004F0Dr 1                        ; calc next to the LEFT
004F0Dr 1  88                    DEY
004F0Er 1  38                    SEC
004F0Fr 1  A5 26                 LDA PWOL_CURRENT_XL
004F11r 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
004F13r 1  85 26                 STA PWOL_CURRENT_XL
004F15r 1  A5 27                 LDA PWOL_CURRENT_XH
004F17r 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
004F19r 1  85 27                 STA PWOL_CURRENT_XH
004F1Br 1  AA                    TAX
004F1Cr 1  38                    SEC
004F1Dr 1  A5 28                 LDA PWOL_CURRENT_YL
004F1Fr 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
004F21r 1  85 28                 STA PWOL_CURRENT_YL
004F23r 1  A5 29                 LDA PWOL_CURRENT_YH
004F25r 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
004F27r 1  85 29                 STA PWOL_CURRENT_YH
004F29r 1               
004F29r 1               
004F29r 1  C5 56                 CMP PWOL_BOT_CHECK
004F2Br 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
004F2Dr 1  C9 F0                 CMP #SCREEN_OUT_TOP
004F2Fr 1  90 0B                 BCC @ZBL_ZIG_RIGHT_SWITCH     ; its bottom_out <= Y < top out .. because negatives are bigger
004F31r 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
004F33r 1  90 04                 BCC :+                ; if its within right side then go do next thing..
004F35r 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
004F37r 1  90 03                 BCC @ZBL_ZIG_RIGHT_SWITCH     ; we're to the right of the screen but not far enough to wrap around..
004F39r 1  4C rr rr            : JMP @zigzag_B_left
004F3Cr 1               
004F3Cr 1               
004F3Cr 1               
004F3Cr 1                    @ZBL_ZIG_RIGHT_SWITCH: ; DOWN/LEFT to start right is is 0,+1  from where we is right now ..
004F3Cr 1                        ;INY
004F3Cr 1                        ;INY
004F3Cr 1  A9 06                 LDA #TRY_AGAIN
004F3Er 1  85 44                 STA PWOL_TRIES_COUNTER
004F40r 1  18                    CLC
004F41r 1  A5 24                 LDA PWOL_TUB_PTR_BL
004F43r 1  69 40                 ADC #64
004F45r 1  85 24                 STA PWOL_TUB_PTR_BL
004F47r 1  A5 25                 LDA PWOL_TUB_PTR_BH
004F49r 1  69 00                 ADC #0
004F4Br 1  C9 rr                 CMP #>TUB_WORLD+8
004F4Dr 1  90 01                 BCC :+
004F4Fr 1  60                    rts
004F50r 1  85 25               : STA PWOL_TUB_PTR_BH
004F52r 1               
004F52r 1               
004F52r 1  18                    CLC
004F53r 1               
004F53r 1  A5 26                 LDA PWOL_CURRENT_XL
004F55r 1  65 3A                 ADC PWOL_NEXT_ROW_B_RIGHT_XL
004F57r 1  85 26                 STA PWOL_CURRENT_XL
004F59r 1               
004F59r 1  A5 27                 LDA PWOL_CURRENT_XH
004F5Br 1  65 3B                 ADC PWOL_NEXT_ROW_B_RIGHT_XH
004F5Dr 1  85 27                 STA PWOL_CURRENT_XH
004F5Fr 1  AA                    TAX
004F60r 1               
004F60r 1               
004F60r 1  18                    CLC
004F61r 1  A5 28                 LDA PWOL_CURRENT_YL
004F63r 1  65 3C                 ADC PWOL_NEXT_ROW_B_RIGHT_YL
004F65r 1  85 28                 STA PWOL_CURRENT_YL
004F67r 1  A5 29                 LDA PWOL_CURRENT_YH
004F69r 1  65 3D                 ADC PWOL_NEXT_ROW_B_RIGHT_YH
004F6Br 1  80 1F                 BRA @ZBL_ZIG_RIGHT_SWITCH_CHECK
004F6Dr 1               
004F6Dr 1                  @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN:
004F6Dr 1  C6 44                 DEC PWOL_TRIES_COUNTER
004F6Fr 1  D0 01                 BNE @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN_GO_RIGHT
004F71r 1                  @ZBL_RTS:
004F71r 1               ;          STZ VERA_data0
004F71r 1                ;         STZ VERA_data0
004F71r 1                 ;        STZ VERA_data0
004F71r 1                  ;       STZ VERA_data0
004F71r 1  60                 rts
004F72r 1                  @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN_GO_RIGHT:
004F72r 1  C8                    INY
004F73r 1  18                    CLC
004F74r 1  A5 26                 LDA PWOL_CURRENT_XL
004F76r 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
004F78r 1  85 26                 STA PWOL_CURRENT_XL
004F7Ar 1  A5 27                 LDA PWOL_CURRENT_XH
004F7Cr 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
004F7Er 1  85 27                 STA PWOL_CURRENT_XH
004F80r 1  AA                    TAX
004F81r 1  18                    CLC
004F82r 1  A5 28                 LDA PWOL_CURRENT_YL
004F84r 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
004F86r 1  85 28                 STA PWOL_CURRENT_YL
004F88r 1  A5 29                 LDA PWOL_CURRENT_YH
004F8Ar 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
004F8Cr 1                  @ZBL_ZIG_RIGHT_SWITCH_CHECK:
004F8Cr 1  85 29                 STA PWOL_CURRENT_YH
004F8Er 1  C5 56                 CMP PWOL_BOT_CHECK
004F90r 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
004F92r 1  C9 F0                 CMP #SCREEN_OUT_TOP
004F94r 1  90 D7                 BCC @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN    ; its bottom_out <= Y < top out .. because negatives are bigger
004F96r 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
004F98r 1  90 04                 BCC @zigzag_B_right
004F9Ar 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
004F9Cr 1  90 CF                 BCC @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
004F9Er 1               
004F9Er 1               
004F9Er 1               
004F9Er 1                   @zigzag_B_right:
004F9Er 1  C0 40                CPY #64  ;  make sure we don't go outside level..
004FA0r 1  B0 6E                BCS @ZBR_NEXT ; if we're outside we'll just skip is OK
004FA2r 1  B1 24                LDA (PWOL_TUB_PTR_BL),y
004FA4r 1  C9 81                CMP #129
004FA6r 1  B0 68                BCS @ZBR_NEXT ; we're outside level.
004FA8r 1               
004FA8r 1                       ; bytes 1 and 4 were updated when we cleared the object list
004FA8r 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
004FABr 1  D0 04                BNE :++
004FADr 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
004FB0r 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
004FB1r 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
004FB3r 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
004FB6r 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen...
004FB8r 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
004FBAr 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
004FBCr 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
004FBFr 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
004FC2r 1  8A                   TXA ; push new next to the Z buffer spot
004FC3r 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
004FC5r 1                       ; bytes .1..4.6 filled in already..
004FC5r 1  AD rr rr             LDA WORLD_SPRITE_NUM
004FC8r 1  9D rr rr             STA OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway..
004FCBr 1  B1 24                LDA (PWOL_TUB_PTR_BL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
004FCDr 1  10 08                BPL @ZBR_INSIDE_TUB
004FCFr 1                     @ZBR_HIT_WALL_OUCH:
004FCFr 1  AD rr rr               LDA WORLD_WALL_SPRITE_NUM
004FD2r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
004FD5r 1  A9 56                  LDA #86 ; max height..
004FD7r 1                     @ZBR_INSIDE_TUB:
004FD7r 1  85 40                  STA PWOL_CONVERT_HEIGHTS ;
004FD9r 1  85 42                  STA PWOL_CONVERT_HEIGHTS_L;
004FDBr 1  38                     SEC
004FDCr 1  A5 28                  LDA PWOL_CURRENT_YL
004FDEr 1  F2 42                  SBC (PWOL_CONVERT_HEIGHTS_L)
004FE0r 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
004FE2r 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
004FE4r 1  C9 78                  CMP #SCREEN_OUT_BOTTOM    ;  are we even visible?
004FE6r 1  90 0E                  BCC :+
004FE8r 1  C5 55                  CMP PWOL_TOP_CHECK  ;     #SCREEN_OUT_TOP-50 ;PWOL_TOP_CHECK;
004FEAr 1  B0 0A                  BCS :+
004FECr 1  CE rr rr               DEC OBJECT_LIST_BYTE6_NEXT
004FEFr 1  BD rr rr               LDA OBJECT_LIST_BYTE6_NEXT,X ; grab the old next value
004FF2r 1  92 3E                  STA (PWOL_Z_STARTS_PTR) ; patch the old one back in..
004FF4r 1  80 1A                  BRA @ZBR_NEXT ; and skip THIS
004FF6r 1                       :
004FF6r 1               
004FF6r 1               
004FF6r 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
004FF9r 1  C5 54                  CMP PWOL_CENTER_Y_TOP ; is this above center on screen??
004FFBr 1  B0 0E                  BCS :+ ; is not covering us
004FFDr 1  A5 29                  LDA PWOL_CURRENT_YH
004FFFr 1  C5 53                  CMP PWOL_CENTER_Y
005001r 1  90 08                  BCC :+ ; its from ahead of us, OK
005003r 1                         ; it was from below and covers us ..
005003r 1  BD rr rr               LDA OBJECT_LIST_BYTE0_ADDRLOW,X
005006r 1  69 0F                  ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
005008r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X
00500Br 1                         ;LDA #$D0
00500Br 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
00500Br 1  A5 27                : LDA PWOL_CURRENT_XH
00500Dr 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
005010r 1                    @ZBR_NEXT:
005010r 1                        ; calc next to the right..
005010r 1  C8                    INY
005011r 1  18                    CLC
005012r 1  A5 26                 LDA PWOL_CURRENT_XL
005014r 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
005016r 1  85 26                 STA PWOL_CURRENT_XL
005018r 1  A5 27                 LDA PWOL_CURRENT_XH
00501Ar 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
00501Cr 1  85 27                 STA PWOL_CURRENT_XH
00501Er 1  AA                    TAX
00501Fr 1  18                    CLC
005020r 1  A5 28                 LDA PWOL_CURRENT_YL
005022r 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
005024r 1  85 28                 STA PWOL_CURRENT_YL
005026r 1  A5 29                 LDA PWOL_CURRENT_YH
005028r 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
00502Ar 1  85 29                 STA PWOL_CURRENT_YH
00502Cr 1               
00502Cr 1               
00502Cr 1  C5 56                 CMP PWOL_BOT_CHECK
00502Er 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
005030r 1  C9 F0                 CMP #SCREEN_OUT_TOP
005032r 1  90 0B                 BCC @ZBR_ZIG_LEFT_SWITCH     ; its bottom_out <= Y < top out .. because negatives are bigger
005034r 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
005036r 1  90 04                 BCC :+                ; if its within right side then go do next thing..
005038r 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
00503Ar 1  90 03                 BCC @ZBR_ZIG_LEFT_SWITCH        ; we're to the right of the screen but not far enough to wrap around..
00503Cr 1  4C rr rr            : JMP @zigzag_B_right
00503Fr 1               
00503Fr 1               
00503Fr 1               
00503Fr 1                    @ZBR_ZIG_LEFT_SWITCH: ;PWOL_NEXT_ROW_A_LEFT_XL   ; -> next row is left, going down the screen ..  +1,+1
00503Fr 1  A9 06                 LDA #TRY_AGAIN
005041r 1  85 44                 STA PWOL_TRIES_COUNTER
005043r 1  88                   DEY ; have to go this to match where the thing is going .. 0,0
005044r 1  18                    CLC
005045r 1  A5 24                 LDA PWOL_TUB_PTR_BL
005047r 1  69 40                 ADC #64 ;   0,-1
005049r 1  85 24                 STA PWOL_TUB_PTR_BL
00504Br 1  A5 25                 LDA PWOL_TUB_PTR_BH
00504Dr 1  69 00                 ADC #0
00504Fr 1  C9 rr                 CMP #>TUB_WORLD+8
005051r 1  90 01                 BCC :+
005053r 1  60                    rts
005054r 1  85 25               : STA PWOL_TUB_PTR_BH
005056r 1               
005056r 1  18                    CLC
005057r 1  A5 26                 LDA PWOL_CURRENT_XL
005059r 1  65 36                 ADC PWOL_NEXT_ROW_B_LEFT_XL
00505Br 1  85 26                 STA PWOL_CURRENT_XL
00505Dr 1  A5 27                 LDA PWOL_CURRENT_XH
00505Fr 1  65 37                 ADC PWOL_NEXT_ROW_B_LEFT_XH
005061r 1  85 27                 STA PWOL_CURRENT_XH
005063r 1  AA                    TAX
005064r 1  18                    CLC
005065r 1  A5 28                 LDA PWOL_CURRENT_YL
005067r 1  65 38                 ADC PWOL_NEXT_ROW_B_LEFT_YL
005069r 1  85 28                 STA PWOL_CURRENT_YL
00506Br 1  A5 29                 LDA PWOL_CURRENT_YH
00506Dr 1  65 39                 ADC PWOL_NEXT_ROW_B_LEFT_YH
00506Fr 1  80 1F                 BRA @ZBR_ZIG_LEFT_SWITCH_CHECK
005071r 1               
005071r 1               
005071r 1               
005071r 1                  @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN:
005071r 1  C6 44                 DEC PWOL_TRIES_COUNTER
005073r 1  D0 01                 BNE @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT
005075r 1                  @ZBR_RTS:
005075r 1               ;          STZ VERA_data0
005075r 1               ;          STZ VERA_data0
005075r 1               ;          STZ VERA_data0
005075r 1               ;          STZ VERA_data0
005075r 1  60                    rts
005076r 1                  @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT:
005076r 1  88                    DEY
005077r 1  38                    SEC
005078r 1  A5 26                 LDA PWOL_CURRENT_XL
00507Ar 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
00507Cr 1  85 26                 STA PWOL_CURRENT_XL
00507Er 1  A5 27                 LDA PWOL_CURRENT_XH
005080r 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
005082r 1  85 27                 STA PWOL_CURRENT_XH
005084r 1  AA                    TAX
005085r 1  38                    SEC
005086r 1  A5 28                 LDA PWOL_CURRENT_YL
005088r 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
00508Ar 1  85 28                 STA PWOL_CURRENT_YL
00508Cr 1  A5 29                 LDA PWOL_CURRENT_YH
00508Er 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
005090r 1               
005090r 1               @ZBR_ZIG_LEFT_SWITCH_CHECK:
005090r 1  85 29                 STA PWOL_CURRENT_YH
005092r 1  C5 56                 CMP PWOL_BOT_CHECK
005094r 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
005096r 1  C9 F0                 CMP #SCREEN_OUT_TOP
005098r 1  90 D7                 BCC @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN   ; its bottom_out <= Y < top out .. because negatives are bigger
00509Ar 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
00509Cr 1  90 04                 BCC :+
00509Er 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
0050A0r 1  90 CF                 BCC @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
0050A2r 1  4C rr rr            : JMP @zigzag_B_left
0050A5r 1               
0050A5r 1               
0050A5r 1               draw_object_list:
0050A5r 1  AC rr rr          LDY NUM_AVAIL_SPRITES ; num sprites can write
0050A8r 1  D0 03             BNE :+
0050AAr 1  4C rr rr          JMP draw_object_list_to_BUFFER
0050ADr 1                  :
0050ADr 1  AD rr rr         LDA NUM_RESERVED_SPRITES
0050B0r 1               ;    INC VERA_LOCK
0050B0r 1               ;    BNE @unlock_vera   there's no actual way to get here and not have vera unlock.. s
0050B0r 1               ;  so instead, we're going to DEC the VERA_LOCK after the new frame is ready, which is after this function..
0050B0r 1               
0050B0r 1               
0050B0r 1               
0050B0r 1               
0050B0r 1  9C 25 9F         STZ VERA_ctrl
0050B3r 1  64 22            STZ ZP_PTR
0050B5r 1  0A               ASL
0050B6r 1  26 22            ROL ZP_PTR
0050B8r 1  0A               ASL
0050B9r 1  26 22            ROL ZP_PTR
0050BBr 1  0A               ASL
0050BCr 1  26 22            ROL ZP_PTR
0050BEr 1  8D 20 9F         STA VERA_addr_low
0050C1r 1  18               CLC
0050C2r 1  A5 22            LDA ZP_PTR
0050C4r 1  69 EC            ADC #>VRAM_SPRITE_BUF;  #>VRAM_SPRITE_BUF ; #>VRAM_sprite_attributes;
0050C6r 1  8D 21 9F         sta VERA_addr_high
0050C9r 1  A9 11            lda #$11
0050CBr 1  8D 22 9F         sta VERA_addr_bank
0050CEr 1  AD rr rr         LDA SPRITE_OBJECT_ENABLE
0050D1r 1  D0 22            BNE @SET_Z_PTR
0050D3r 1  A9 01            LDA #1
0050D5r 1  A2 0C            LDX #$0C
0050D7r 1  9C 23 9F        : STZ VERA_data0  ; addr low
0050DAr 1  8D 23 9F          STA VERA_data0  ; mod/addr_hi
0050DDr 1  9C 23 9F          STZ VERA_data0  ; xl
0050E0r 1  9C 23 9F          STZ VERA_data0  ; Xh
0050E3r 1  9C 23 9F          STZ VERA_data0  ; yl
0050E6r 1  9C 23 9F          STZ VERA_data0  ; yh
0050E9r 1  8E 23 9F          STX VERA_data0
0050ECr 1  9C 23 9F          STZ VERA_data0
0050EFr 1  88                DEY
0050F0r 1  D0 E5             BNE :-
0050F2r 1  4C rr rr         JMP draw_object_list_to_BUFFER
0050F5r 1               
0050F5r 1               
0050F5r 1               @SET_Z_PTR:
0050F5r 1  64 22            STZ ZP_PTR
0050F7r 1  A9 rr            LDA #>OBJECT_LIST_Z_START_POINTERS
0050F9r 1  85 23            STA ZP_PTR+1
0050FBr 1               
0050FBr 1               
0050FBr 1                 @NEXT_Z: ; Z=0 is invalid...
0050FBr 1  E6 22              INC ZP_PTR
0050FDr 1  D0 1C              BNE @Z_LOOP
0050FFr 1  AD 23 9F           : LDA VERA_data0
005102r 1  AD 23 9F             LDA VERA_data0
005105r 1  9C 23 9F             STZ VERA_data0
005108r 1  9C 23 9F             STZ VERA_data0
00510Br 1  AD 23 9F             LDA VERA_data0
00510Er 1  AD 23 9F             LDA VERA_data0
005111r 1  AD 23 9F             LDA VERA_data0
005114r 1  AD 23 9F             LDA VERA_data0
005117r 1  88                   DEY
005118r 1  D0 E5                BNE :-
00511Ar 1                  @rts:
00511Ar 1  60                 rts
00511Br 1                 @Z_LOOP:
00511Br 1  B2 22              LDA (ZP_PTR) ; get our first victim
00511Dr 1  AA                 TAX
00511Er 1  A9 00              LDA #0
005120r 1  92 22              STA (ZP_PTR) ; zero this Z_next for now
005122r 1  8A                 TXA
005123r 1                    @OBJ_LOOP:
005123r 1  AA                    TAX
005124r 1  F0 D5                 BEQ @NEXT_Z ; got a bum next pointer there ...
005126r 1  BD rr rr              LDA OBJECT_LIST_BYTE0_ADDRLOW,X
005129r 1  8D 23 9F              STA VERA_data0
00512Cr 1  BD rr rr              LDA OBJECT_LIST_BYTE1_MODE,x
00512Fr 1  8D 23 9F              STA VERA_data0
005132r 1  BD rr rr              LDA OBJECT_LIST_BYTE2_X,x
005135r 1  8D 23 9F              STA VERA_data0
005138r 1  C9 A0                 CMP #SCREEN_OUT_RIGHT
00513Ar 1  A9 00                 LDA #0
00513Cr 1  90 02                 BCC :+
00513Er 1  A9 FF                 LDA #$FF
005140r 1  8D 23 9F            : STA VERA_data0
005143r 1               
005143r 1  BD rr rr              LDA OBJECT_LIST_BYTE3_Y,x
005146r 1  8D 23 9F              STA VERA_data0
005149r 1  C9 78                 CMP #SCREEN_OUT_BOTTOM
00514Br 1  A9 00                 LDA #0
00514Dr 1  90 02                 BCC :+
00514Fr 1  A9 FF                 LDA #$FF
005151r 1  8D 23 9F            : STA VERA_data0
005154r 1  BD rr rr              LDA OBJECT_LIST_BYTE4_ZFLIPS,x
005157r 1  8D 23 9F              STA VERA_data0
00515Ar 1  BD rr rr              LDA OBJECT_LIST_BYTE5_SIZE,x
00515Dr 1  8D 23 9F              STA VERA_data0
005160r 1  BD rr rr              LDA OBJECT_LIST_BYTE6_NEXT,x
005163r 1  88                    DEY ; decrement that Y
005164r 1  D0 BD                 BNE @OBJ_LOOP ; still sprite slots left.. woot!
005166r 1  92 22                 STA (ZP_PTR) ; oops.. save that last thing and exit..
005168r 1               draw_object_list_to_BUFFER:
005168r 1               DOLB_ZTRACKER = ZP_PTR
005168r 1               DOLB_ZTRACKERH = ZP_PTR+1
005168r 1               DOLB_BUFFER_HIGH_BYTE = ZP_PTR+2
005168r 1               DOLB_CALC_DEST_LOW = ZP_PTR+3
005168r 1               DOLB_CALC_DEST_HIGH = ZP_PTR+4
005168r 1               DOLB_CALC_SCRATCH = ZP_PTR+5
005168r 1               DOLB_STOP_BOTTOM = ZP_PTR+6
005168r 1               DOLB_Y_CALC_POINTER = ZP_PTR+7
005168r 1               DOLB_Y_CALC_POINTERH = ZP_PTR+8
005168r 1               
005168r 1  A9 0C           LDA #12
00516Ar 1  8D 25 9F        STA VERA_ctrl
00516Dr 1  9C 29 9F        STZ FX_CACHE_L ; zero out the cache bytes..
005170r 1  9C 2A 9F        STZ FX_CACHE_M
005173r 1  9C 2B 9F        STZ FX_CACHE_H
005176r 1  9C 2C 9F        STZ FX_CACHE_U
005179r 1               
005179r 1  A9 04           LDA #4  ;    DCSEL 2 with address select 0.. to be used as destination..
00517Br 1  8D 25 9F        STA VERA_ctrl
00517Er 1  9C 2C 9F        STZ FX_MULT
005181r 1  A9 60           LDA #%01100000
005183r 1  8D 29 9F        STA FX_CTRL ;     cache write enable, cache fill and other stuff disabled
005186r 1               
005186r 1  9C 20 9F        STZ VERA_addr_low
005189r 1               ;        A        B     CURRENT BITMAP BUFFER
005189r 1               ;   0   display  dirty    A is being displayed, B to be drawn on
005189r 1               ;  64   display  ready    B  is ready for swap
005189r 1               ; 128   dirty    display  B is being displayed, A to be drawn on
005189r 1               ; 192   ready    display  A  is ready for swap
005189r 1               
005189r 1  64 29           STZ DOLB_Y_CALC_POINTER
00518Br 1  AD rr rr        LDA CURRENT_BITMAP_BUFFER
00518Er 1  10 08           BPL @DRAW_ON_B
005190r 1               @DRAW_ON_A:
005190r 1  A9 18           LDA #>VRAM_BITMAP_LAYERA
005192r 1  A2 80           LDX #>VRAM_BITMAP_LAYERB
005194r 1  A0 rr           LDY #>BUFFER_A_OFFSETS_HIGH
005196r 1  80 06           BRA @GO_DRAW
005198r 1               @DRAW_ON_B:
005198r 1  A9 80           LDA #>VRAM_BITMAP_LAYERB
00519Ar 1  A2 E4           LDX #>VRAM_TEXT_SCREEN
00519Cr 1  A0 rr           LDY #>BUFFER_B_OFFSETS_HIGH
00519Er 1               @GO_DRAW:
00519Er 1  85 24           STA DOLB_BUFFER_HIGH_BYTE
0051A0r 1  CA              DEX
0051A1r 1  86 28           STX DOLB_STOP_BOTTOM
0051A3r 1  84 2A           STY DOLB_Y_CALC_POINTERH
0051A5r 1  8D 21 9F        STA VERA_addr_high
0051A8r 1  A9 31           LDA #$31; 4 at a time
0051AAr 1  8D 22 9F        STA VERA_addr_bank
0051ADr 1                  ; clear the buffer ...
0051ADr 1               
0051ADr 1               
0051ADr 1  18              CLC
0051AEr 1  A9 00           LDA #0
0051B0r 1  A2 78           LDX #120;120 ; do 160*120 = 19,200/4 = 4,800 iterations.. if we do 20 iterations a pop.. 240 x iterations
0051B2r 1               
0051B2r 1               
0051B2r 1  9C 23 9F      : STZ VERA_data0 ;     trigger cache write - 4 bytes / 8px
0051B5r 1  9C 23 9F        STZ VERA_data0
0051B8r 1  9C 23 9F        STZ VERA_data0
0051BBr 1  9C 23 9F        STZ VERA_data0 ; 32 px cleared
0051BEr 1               
0051BEr 1  9C 23 9F        STZ VERA_data0
0051C1r 1  9C 23 9F        STZ VERA_data0
0051C4r 1  9C 23 9F        STZ VERA_data0
0051C7r 1  9C 23 9F        STZ VERA_data0 ; 64 px cleared
0051CAr 1               
0051CAr 1  9C 23 9F        STZ VERA_data0
0051CDr 1  9C 23 9F        STZ VERA_data0
0051D0r 1  9C 23 9F        STZ VERA_data0
0051D3r 1  9C 23 9F        STZ VERA_data0 ; 96
0051D6r 1               
0051D6r 1  9C 23 9F        STZ VERA_data0
0051D9r 1  9C 23 9F        STZ VERA_data0
0051DCr 1  9C 23 9F        STZ VERA_data0
0051DFr 1  9C 23 9F        STZ VERA_data0 ; 128
0051E2r 1               
0051E2r 1  9C 23 9F        STZ VERA_data0
0051E5r 1  9C 23 9F        STZ VERA_data0
0051E8r 1  9C 23 9F        STZ VERA_data0
0051EBr 1  9C 23 9F        STZ VERA_data0 ; 160 px cleared
0051EEr 1               
0051EEr 1  18              CLC
0051EFr 1  AD 20 9F        LDA VERA_addr_low
0051F2r 1  69 50           ADC #80     ;     increment A for the low part the address
0051F4r 1  8D 20 9F        STA VERA_addr_low
0051F7r 1  AD 21 9F        LDA VERA_addr_high
0051FAr 1  69 00           ADC #0
0051FCr 1  8D 21 9F        STA VERA_addr_high
0051FFr 1               
0051FFr 1  CA              DEX
005200r 1  D0 B0           BNE :- ; 85 * 120 = 10,200 .. + 119 * 14 =1,666 .. 11,866 cycles to clear entire screen.. ok
005202r 1               
005202r 1  A9 E0            LDA #$E0
005204r 1  8D 29 9F        STA FX_CTRL
005207r 1               ;    STZ FX_CTRL
005207r 1  A9 FF           LDA #$FF
005209r 1  85 22           STA DOLB_ZTRACKER
00520Br 1  A9 rr           LDA #>OBJECT_LIST_Z_START_POINTERS
00520Dr 1  85 23           STA DOLB_ZTRACKERH
00520Fr 1  80 0B           BRA @GO_Z
005211r 1                 @DONE_Z: ; Z=0 is invalid...
005211r 1  9C 29 9F           STZ FX_CTRL ;     clear the cache writing for now
005214r 1  9C 25 9F           STZ VERA_ctrl  ;     switch back to regular mode for now..
005217r 1  60                 RTS
005218r 1                 @NEXT_Z:
005218r 1  C6 22              DEC DOLB_ZTRACKER
00521Ar 1  F0 F5              BEQ @DONE_Z
00521Cr 1                 @GO_Z:
00521Cr 1  B2 22              LDA (DOLB_ZTRACKER) ; get our first victim
00521Er 1  D0 07              BNE @DO_OBJECT
005220r 1  80 F6              BRA @NEXT_Z
005222r 1                 @NEXT_OBJECT:
005222r 1  BD rr rr           LDA OBJECT_LIST_BYTE6_NEXT,x
005225r 1  F0 F1              BEQ @NEXT_Z
005227r 1                 @DO_OBJECT:
005227r 1  AA                 TAX      ;     get that pointer into X so we can do stuffs...
005228r 1                     ; OK so now reference OBJECT_LIST_BYTE*,X for whatever we're drawing.. and Y is free for whatever..
005228r 1                     ; first things first, let's figure out where in the buffer to draw.. starting with X location..
005228r 1  BC rr rr           LDY OBJECT_LIST_BYTE3_Y,X
00522Br 1  BD rr rr           LDA OBJECT_LIST_BYTE2_X,X  ;
00522Er 1  4A                 LSR
00522Fr 1  C9 50              CMP #80
005231r 1  90 04              BCC @X_POSITIVE ; check  outside screen.. left/right...
005233r 1  18                 CLC
005234r 1  69 20              ADC #32 ; to <128, then to <160 of the previous Y ?
005236r 1  88                 DEY
005237r 1                  @X_POSITIVE:
005237r 1  C0 78              CPY #120 ; check inside screen..
005239r 1  90 41              BCC @Y_POSITIVE ;   for now, just skip if outside..
00523Br 1  C0 C1              CPY #193
00523Dr 1  90 E3              BCC @NEXT_OBJECT
00523Fr 1  8D 20 9F           STA VERA_addr_low
005242r 1  B2 29              LDA (DOLB_Y_CALC_POINTER)
005244r 1  8D 21 9F           STA VERA_addr_high
005247r 1  EE 25 9F           INC VERA_ctrl
00524Ar 1  98                 TYA
00524Br 1  49 FF              EOR #$FF
00524Dr 1  1A                 INC A
00524Er 1  0A                 ASL ; x2 bytes
00524Fr 1  0A                 ASL ; x4 bytes
005250r 1  0A                 ASL ; x8 bytes - is offset into sprite address start..
005251r 1  85 27              STA DOLB_CALC_SCRATCH
005253r 1  AC rr rr           LDY OBJECT_LIST_BYTE1_MODE
005256r 1               
005256r 1  B9 rr rr           LDA LOW_NIBBLE_HIGH,Y
005259r 1  0A                 ASL
00525Ar 1  A8                 TAY
00525Br 1  A9 08              LDA #$08
00525Dr 1  2A                 ROL
00525Er 1  8D 22 9F           STA VERA_addr_bank
005261r 1  98                 TYA
005262r 1  BC rr rr           LDY OBJECT_LIST_BYTE0_ADDRLOW,X
005265r 1  19 rr rr           ORA SPRITE_ADDRESS_LOW_HIGH,Y
005268r 1  8D 21 9F           STA VERA_addr_high
00526Br 1  18                 CLC
00526Cr 1  B9 rr rr           LDA SPRITE_ADDRESS_LOW_LOW,Y
00526Fr 1  65 27              ADC DOLB_CALC_SCRATCH
005271r 1  8D 20 9F           STA VERA_addr_low
005274r 1               
005274r 1  BD rr rr           LDA OBJECT_LIST_BYTE3_Y,X
005277r 1  69 40              ADC #64 ; push positive..
005279r 1  A8                 TAY
00527Ar 1  80 3B              BRA @Y_WAS_NEGATIVE
00527Cr 1               
00527Cr 1                  @Y_POSITIVE:
00527Cr 1  79 rr rr           ADC BITMAP_OFFSETS_LOW,Y ; note how this works because carry isn't set.. ?
00527Fr 1  8D 20 9F           STA VERA_addr_low
005282r 1  B1 29              LDA (DOLB_Y_CALC_POINTER),Y ; now do the high for the dest..
005284r 1  69 00              ADC #0
005286r 1  8D 21 9F           STA VERA_addr_high
005289r 1  EE 25 9F           INC VERA_ctrl  ;  now we need to calculate sprite source address..
00528Cr 1  BC rr rr           LDY OBJECT_LIST_BYTE1_MODE,X
00528Fr 1  B9 rr rr           LDA LOW_NIBBLE_HIGH,Y
005292r 1  0A                 ASL
005293r 1  A8                 TAY
005294r 1  A9 08              LDA #$08
005296r 1  2A                 ROL
005297r 1  8D 22 9F           STA VERA_addr_bank
00529Ar 1  98                 TYA
00529Br 1  BC rr rr           LDY OBJECT_LIST_BYTE0_ADDRLOW,X
00529Er 1  19 rr rr           ORA SPRITE_ADDRESS_LOW_HIGH,Y
0052A1r 1  8D 21 9F           STA VERA_addr_high
0052A4r 1  B9 rr rr           LDA SPRITE_ADDRESS_LOW_LOW,Y
0052A7r 1  8D 20 9F           STA VERA_addr_low
0052AAr 1               
0052AAr 1  38                 SEC
0052ABr 1  A9 78              LDA #120
0052ADr 1  FD rr rr           SBC OBJECT_LIST_BYTE3_Y,X ;   want to check if screenH-Y < 64
0052B0r 1  C9 41              CMP #65
0052B2r 1  90 02              BCC :+
0052B4r 1  A9 40              LDA #64
0052B6r 1  A8               : TAY
0052B7r 1                  @CHECK_ALIGN:
0052B7r 1                  @Y_WAS_NEGATIVE:
0052B7r 1  CE 25 9F           DEC VERA_ctrl  ;  regain dest address
0052BAr 1  AD 20 9F           LDA VERA_addr_low
0052BDr 1  29 03              AND #$03
0052BFr 1  F0 07              BEQ @DO_ZERO_RIGHT
0052C1r 1  0A                 ASL
0052C2r 1  0A                 ASL
0052C3r 1  8D 2C 9F           STA FX_MULT
0052C6r 1  D0 39              BNE @CHECK_OTHER_ALIGNS
0052C8r 1                  @DO_ZERO_RIGHT:
0052C8r 1  9C 2C 9F           STZ FX_MULT
0052CBr 1  80 10              BRA :++
0052CDr 1                  :
0052CDr 1  AD 20 9F           LDA VERA_addr_low
0052D0r 1  69 98              ADC #160-8
0052D2r 1  8D 20 9F           STA VERA_addr_low
0052D5r 1  AD 21 9F           LDA VERA_addr_high
0052D8r 1  69 00              ADC #0
0052DAr 1  8D 21 9F           STA VERA_addr_high
0052DDr 1                  :
0052DDr 1  AD 24 9F           LDA VERA_data1
0052E0r 1  AD 24 9F           LDA VERA_data1
0052E3r 1  AD 24 9F           LDA VERA_data1
0052E6r 1  AD 24 9F           LDA VERA_data1
0052E9r 1  9C 23 9F           STZ VERA_data0
0052ECr 1               
0052ECr 1  AD 24 9F           LDA VERA_data1
0052EFr 1  AD 24 9F           LDA VERA_data1
0052F2r 1  AD 24 9F           LDA VERA_data1
0052F5r 1  AD 24 9F           LDA VERA_data1
0052F8r 1  9C 23 9F           STZ VERA_data0
0052FBr 1  88                 DEY
0052FCr 1  D0 CF              BNE :--
0052FEr 1  4C rr rr           JMP @NEXT_OBJECT
005301r 1                  @CHECK_OTHER_ALIGNS:
005301r 1  C9 08              CMP #8   ;  is either 4,8,12
005303r 1  90 16              BCC @DO_ONE_RIGHT
005305r 1  F0 4F              BEQ @DO_TWO_RIGHT
005307r 1  18                 CLC
005308r 1  4C rr rr           JMP @DO_THREE_RIGHT
00530Br 1                   :
00530Br 1  AD 20 9F           LDA VERA_addr_low
00530Er 1  69 94              ADC #160-12
005310r 1  8D 20 9F           STA VERA_addr_low
005313r 1  AD 21 9F           LDA VERA_addr_high
005316r 1  69 00              ADC #0
005318r 1  8D 21 9F           STA VERA_addr_high
00531Br 1                  @DO_ONE_RIGHT:
00531Br 1  AD 24 9F           LDA VERA_data1
00531Er 1  AD 24 9F           LDA VERA_data1
005321r 1  AD 24 9F           LDA VERA_data1
005324r 1  A9 03              LDA #%00000011
005326r 1  8D 23 9F           STA VERA_data0
005329r 1               
005329r 1  AD 24 9F           LDA VERA_data1
00532Cr 1  AD 24 9F           LDA VERA_data1
00532Fr 1  AD 24 9F           LDA VERA_data1
005332r 1  AD 24 9F           LDA VERA_data1
005335r 1  9C 23 9F           STZ VERA_data0
005338r 1               
005338r 1  AD 24 9F           LDA VERA_data1
00533Br 1  A9 FC              LDA #%11111100
00533Dr 1  8D 23 9F           STA VERA_data0
005340r 1  88                 DEY
005341r 1  D0 C8              BNE :-
005343r 1  4C rr rr           JMP @NEXT_OBJECT
005346r 1               
005346r 1                   :
005346r 1  AD 20 9F           LDA VERA_addr_low
005349r 1  69 94              ADC #160-12
00534Br 1  8D 20 9F           STA VERA_addr_low
00534Er 1  AD 21 9F           LDA VERA_addr_high
005351r 1  69 00              ADC #0
005353r 1  8D 21 9F           STA VERA_addr_high
005356r 1                  @DO_TWO_RIGHT:
005356r 1  AD 24 9F           LDA VERA_data1
005359r 1  AD 24 9F           LDA VERA_data1
00535Cr 1  A9 0F              LDA #%00001111
00535Er 1  8D 23 9F           STA VERA_data0
005361r 1               
005361r 1  AD 24 9F           LDA VERA_data1
005364r 1  AD 24 9F           LDA VERA_data1
005367r 1  AD 24 9F           LDA VERA_data1
00536Ar 1  AD 24 9F           LDA VERA_data1
00536Dr 1  9C 23 9F           STZ VERA_data0
005370r 1               
005370r 1  AD 24 9F           LDA VERA_data1
005373r 1  AD 24 9F           LDA VERA_data1
005376r 1  A9 F0              LDA #%11110000
005378r 1  8D 23 9F           STA VERA_data0
00537Br 1  88                 DEY
00537Cr 1  D0 C8              BNE :-
00537Er 1  4C rr rr           JMP @NEXT_OBJECT
005381r 1               
005381r 1                   :
005381r 1  AD 20 9F           LDA VERA_addr_low
005384r 1  69 94              ADC #160-12
005386r 1  8D 20 9F           STA VERA_addr_low
005389r 1  AD 21 9F           LDA VERA_addr_high
00538Cr 1  69 00              ADC #0
00538Er 1  8D 21 9F           STA VERA_addr_high
005391r 1                  @DO_THREE_RIGHT:
005391r 1  AD 24 9F           LDA VERA_data1
005394r 1  A9 3F              LDA #%00111111
005396r 1  8D 23 9F           STA VERA_data0
005399r 1               
005399r 1  AD 24 9F           LDA VERA_data1
00539Cr 1  AD 24 9F           LDA VERA_data1
00539Fr 1  AD 24 9F           LDA VERA_data1
0053A2r 1  AD 24 9F           LDA VERA_data1
0053A5r 1  9C 23 9F           STZ VERA_data0
0053A8r 1               
0053A8r 1  AD 24 9F           LDA VERA_data1
0053ABr 1  AD 24 9F           LDA VERA_data1
0053AEr 1  AD 24 9F           LDA VERA_data1
0053B1r 1  A9 C0              LDA #%11000000
0053B3r 1  8D 23 9F           STA VERA_data0
0053B6r 1  88                 DEY
0053B7r 1  D0 C8              BNE :-
0053B9r 1  4C rr rr           JMP @NEXT_OBJECT
0053BCr 1               
0053BCr 1               .macro calc_downlefts_backwards_for_row row, start, end
0053BCr 1               .local SELF
0053BCr 1               .local LEFT
0053BCr 1               .local DOWNLEFT
0053BCr 1               .local DOWNRIGHT
0053BCr 1               .local SCRATCH
0053BCr 1               .local COUNT
0053BCr 1               .local LOOP
0053BCr 1                  SELF = TUB_WORLD+(64*row)+start ; because start has nothing to the left, needs processed different
0053BCr 1                  LEFT = SELF-1
0053BCr 1                  DOWNLEFT = LEFT+64
0053BCr 1                  DOWNRIGHT = DOWNLEFT+1
0053BCr 1                  SCRATCH = WATER_CALC_SCRATCH+(64*row)+start
0053BCr 1                  COUNT = end-start
0053BCr 1               
0053BCr 1               .if COUNT & 1 = 1
0053BCr 1                  LDX #COUNT-1
0053BCr 1                  LDA SELF+1,X ;   4   4this is basically start+count .. OK
0053BCr 1                  ADC DOWNRIGHT+1,X ; 4   8
0053BCr 1                  ADC LEFT+1,X   ;  4  12
0053BCr 1                  ADC DOWNLEFT+1,X  ;  4  16
0053BCr 1                  STA SCRATCH+1,X   ;  4  20    20 each without dex/BNE... = ~25 would be normal/expected without the Y thing..
0053BCr 1               .else
0053BCr 1                  LDX #COUNT
0053BCr 1               .endif
0053BCr 1               LOOP:
0053BCr 1                  LDA LEFT,X           ;  4
0053BCr 1                  ADC DOWNLEFT,X       ;  4  8
0053BCr 1                  TAY                  ;  2  10
0053BCr 1                  ADC SELF,X           ;  4  14
0053BCr 1                  ADC DOWNRIGHT,X      ;  4  18
0053BCr 1                  ADC SCRATCH,X
0053BCr 1                  ROR
0053BCr 1               ;   ADC #0
0053BCr 1                  STA SCRATCH,X        ;  4  22
0053BCr 1                  DEX                  ;  2  24
0053BCr 1                  TYA                  ;  2  26
0053BCr 1                  ADC LEFT,X           ;  4  30
0053BCr 1                  ADC DOWNLEFT,X       ;  4  34
0053BCr 1                  ADC SCRATCH,X
0053BCr 1                  ROR
0053BCr 1                ;  ADC #0
0053BCr 1                  STA SCRATCH,X        ;  4  38
0053BCr 1                  DEX                  ;  2  40
0053BCr 1                  BNE LOOP             ;  ~3   43  /2 =  ~22 per each
0053BCr 1               .endmacro
0053BCr 1               
0053BCr 1               .macro calc_new_values_for_row row, start, end ; end value needs to have an up-right and start must have downleft!
0053BCr 1               .local SELF
0053BCr 1               .local SCRATCH_DOWNLEFT
0053BCr 1               .local SCRATCH_UPRIGHT
0053BCr 1               .local COUNT
0053BCr 1                  SCRATCH_DOWNLEFT = WATER_CALC_SCRATCH+(64*row)+start-1
0053BCr 1                  SCRATCH_UPRIGHT = SCRATCH_DOWNLEFT-64+1
0053BCr 1                  SELF = TUB_WORLD+(64*row)+start-1
0053BCr 1                  COUNT = end-start+1
0053BCr 1                  LDX #COUNT
0053BCr 1                : LDA SCRATCH_DOWNLEFT,X  ;  <256    4
0053BCr 1                  ADC SCRATCH_UPRIGHT,X   ;  <512     4  8
0053BCr 1                  ROR ; <256                          2  10
0053BCr 1                  LSR ; <128                          2  12
0053BCr 1                  LSR ; <64 OK                        2  14
0053BCr 1                  ADC SELF,X ; <128                   4  18
0053BCr 1                  LSR ; <64                           2  20
0053BCr 1                  ADC #0   ;                          2  22
0053BCr 1                  STA SELF,X  ;                       4  26
0053BCr 1                  DEX                  ;              2  28
0053BCr 1                  BNE :-               ;             ~3  31    + ~22 per each = ~53 cycles per normie * ~1300 = ~69,000 cycles otay
0053BCr 1               .endmacro
0053BCr 1               
0053BCr 1               .macro calc_new_value_especial row, column, upleft, upright, right, left, downleft, downright
0053BCr 1               .local SELF
0053BCr 1               .local SCRATCH
0053BCr 1                  SELF = TUB_WORLD+(64*row)+column
0053BCr 1                  SCRATCH = WATER_CALC_SCRATCH+(64*row)+column
0053BCr 1                  LDA SELF
0053BCr 1                  ADC SELF+left
0053BCr 1                  adc SELF+downleft
0053BCr 1                  adc SELF+downright
0053BCr 1                  STA SCRATCH
0053BCr 1                  LDA SELF
0053BCr 1                  ADC SELF+upleft
0053BCr 1                  adc SELF+upright
0053BCr 1                  adc SELF+right
0053BCr 1                  ADC SCRATCH
0053BCr 1                  ROR
0053BCr 1                  LSR
0053BCr 1                  LSR
0053BCr 1                  ADC SELF
0053BCr 1                  LSR
0053BCr 1                  ADC #0
0053BCr 1                  STA SCRATCH
0053BCr 1               .endmacro
0053BCr 1               
0053BCr 1               .macro calc_missing_three_neighbors row, column, neighborA, neighborB, neighborC
0053BCr 1               .local SELF
0053BCr 1               .local SCRATCH
0053BCr 1                  SELF = TUB_WORLD+(64*row)+column
0053BCr 1                  SCRATCH = WATER_CALC_SCRATCH+(64*row)+column
0053BCr 1                  LDA SELF
0053BCr 1                  ADC SELF+neighborA
0053BCr 1                  ADC SELF+neighborB
0053BCr 1                  ADC SELF+neighborC
0053BCr 1                  LSR
0053BCr 1                  LSR
0053BCr 1                  ADC SELF
0053BCr 1                  LSR
0053BCr 1                  ADC #0
0053BCr 1                  STA SCRATCH
0053BCr 1               
0053BCr 1               .endmacro
0053BCr 1               
0053BCr 1               .macro calc_missing_two_neighbors row, column, neighborA, neighborB, neighborC, neighborD
0053BCr 1               .local SELF
0053BCr 1               .local SCRATCH
0053BCr 1                  SELF = TUB_WORLD+(64*row)+column
0053BCr 1                  SCRATCH = WATER_CALC_SCRATCH+(64*row)+column
0053BCr 1                  LDA SELF+neighborA
0053BCr 1                  ADC SELF+neighborB
0053BCr 1                  ADC SELF+neighborC
0053BCr 1                  ADC SELF+neighborD   ;  4x
0053BCr 1                  LSR ; 2x..
0053BCr 1                  TAX
0053BCr 1                  LDA MISSING_TWO_NEIGHBOR_MUL,X ; 3X !
0053BCr 1                  ADC SELF ;  4x
0053BCr 1                  LSR
0053BCr 1                  LSR
0053BCr 1                  ADC SELF
0053BCr 1                  LSR
0053BCr 1                  ADC #0
0053BCr 1                  STA SCRATCH
0053BCr 1               .endmacro
0053BCr 1               
0053BCr 1               .macro calc_missing_one_neighbors row, column, neighborA, neighborB, neighborC, neighborD, neighborE
0053BCr 1               .local SELF
0053BCr 1               .local SCRATCH
0053BCr 1                  SELF = TUB_WORLD+(64*row)+column
0053BCr 1                  SCRATCH = WATER_CALC_SCRATCH+(64*row)+column
0053BCr 1                  LDA SELF+neighborA
0053BCr 1                  ADC SELF+neighborB
0053BCr 1                  ADC SELF+neighborC
0053BCr 1                  ADC SELF+neighborD   ;  4x <252
0053BCr 1                  ADC SELF+neighborE   ;  5x <315
0053BCr 1                  ROR ; 2.5X
0053BCr 1                  TAX
0053BCr 1                  LDA MISSING_ONE_NEIGHBOR_MUL,X ; 2.5*6/5 = 6/2 = 3x
0053BCr 1                  ADC SELF ; 4X
0053BCr 1                  LSR
0053BCr 1                  LSR
0053BCr 1                  ADC SELF
0053BCr 1                  LSR
0053BCr 1                  ADC #0
0053BCr 1                  STA SCRATCH
0053BCr 1               .endmacro
0053BCr 1               
0053BCr 1               .macro copy_scratch_to_self row,column
0053BCr 1                  LDA WATER_CALC_SCRATCH+(64*row)+column
0053BCr 1                  STA TUB_WORLD+(64*row)+column
0053BCr 1               .endmacro
0053BCr 1               
0053BCr 1               UPDATE_WATER_SIM:
0053BCr 1                  ;  make downlefts shingles to stash for calculation as newSelf = (downleft+upright)/8 + Self )/2
0053BCr 1               
0053BCr 1                  ; row 0 is wall of tub... need to make "downlefts" for row 1 to use as uprights..
0053BCr 1  18              CLC
0053BDr 1  A2 21           LDX #54-21
0053BFr 1  BD rr rr      : LDA TUB_WORLD+64+21,X ;
0053C2r 1  7D rr rr        ADC TUB_WORLD+64+22,X ; right
0053C5r 1  7D rr rr        ADC TUB_WORLD+128+22,X ; down right
0053C8r 1  7D rr rr        ADC TUB_WORLD+128+21,X ; down left
0053CBr 1  9D rr rr        STA WATER_CALC_SCRATCH+21+1,X ; save to upper rights
0053CEr 1  CA              DEX
0053CFr 1  D0 EE           BNE :-
0053D1r 1  A2 22 BD rr     calc_downlefts_backwards_for_row  1, $15, $37 ; row 1 - 21 to 55 ... need to reflect because row 0 is wall of tub..
0053D5r 1  rr 7D rr rr  
0053D9r 1  A8 7D rr rr  
0053F9r 1  A2 24 BD rr     calc_downlefts_backwards_for_row 2, 20, 56
0053FDr 1  rr 7D rr rr  
005401r 1  A8 7D rr rr  
005421r 1  A2 26 BD rr     calc_downlefts_backwards_for_row  3, $12, $39 ; row 3 - 18 to 57
005425r 1  rr 7D rr rr  
005429r 1  7D rr rr 7D  
005458r 1  A2 2A BD rr     calc_downlefts_backwards_for_row  4, $10, $3A ; row 2 - 20 to
00545Cr 1  rr 7D rr rr  
005460r 1  A8 7D rr rr  
005480r 1  A2 2C BD rr     calc_downlefts_backwards_for_row  5, $0E, $3B ; row 2 - 20 to
005484r 1  rr 7D rr rr  
005488r 1  7D rr rr 7D  
0054B7r 1  A2 2E BD rr     calc_downlefts_backwards_for_row  6, $0D, $3B ; row 2 - 20 to
0054BBr 1  rr 7D rr rr  
0054BFr 1  A8 7D rr rr  
0054DFr 1  A2 2E BD rr     calc_downlefts_backwards_for_row  7, $0C, $3B ; row 2 - 20 to
0054E3r 1  rr 7D rr rr  
0054E7r 1  7D rr rr 7D  
005516r 1  A2 30 BD rr     calc_downlefts_backwards_for_row  8, $0B, $3B ; row 2 - 20 to
00551Ar 1  rr 7D rr rr  
00551Er 1  A8 7D rr rr  
00553Er 1  A2 30 BD rr     calc_downlefts_backwards_for_row  9, $0A, $3A ; row 9 - $3B has no DR
005542r 1  rr 7D rr rr  
005546r 1  A8 7D rr rr  
005566r 1  A2 30 BD rr     calc_downlefts_backwards_for_row 10, $0A, $3A ; row
00556Ar 1  rr 7D rr rr  
00556Er 1  A8 7D rr rr  
00558Er 1  A2 30 BD rr     calc_downlefts_backwards_for_row 11, $09, $39 ; row 11 - $3A has no DR
005592r 1  rr 7D rr rr  
005596r 1  A8 7D rr rr  
0055B6r 1  A2 30 BD rr     calc_downlefts_backwards_for_row 12, $09, $39 ; row 2 - 20 to
0055BAr 1  rr 7D rr rr  
0055BEr 1  A8 7D rr rr  
0055DEr 1  A2 30 BD rr     calc_downlefts_backwards_for_row 13, $08, $39 ; row 2 - 20 to
0055E2r 1  rr 7D rr rr  
0055E6r 1  7D rr rr 7D  
005615r 1  A2 30 BD rr     calc_downlefts_backwards_for_row 14, $08, $39 ; row 2 - 20 to
005619r 1  rr 7D rr rr  
00561Dr 1  7D rr rr 7D  
00564Cr 1  A2 30 BD rr     calc_downlefts_backwards_for_row 15, $07, $38 ; row 15 - $39 has no DR
005650r 1  rr 7D rr rr  
005654r 1  7D rr rr 7D  
005683r 1  A2 30 BD rr     calc_downlefts_backwards_for_row 16, $07, $37 ;
005687r 1  rr 7D rr rr  
00568Br 1  A8 7D rr rr  
0056ABr 1  A2 30 BD rr     calc_downlefts_backwards_for_row 17, $06, $36 ; row 2 - 20 to
0056AFr 1  rr 7D rr rr  
0056B3r 1  A8 7D rr rr  
0056D3r 1  A2 30 BD rr     calc_downlefts_backwards_for_row 18, $06, $36 ; row 2 - 20 to
0056D7r 1  rr 7D rr rr  
0056DBr 1  A8 7D rr rr  
0056FBr 1  A2 30 BD rr     calc_downlefts_backwards_for_row 19, $05, $35 ; row 2 - 20 to
0056FFr 1  rr 7D rr rr  
005703r 1  A8 7D rr rr  
005723r 1  A2 30 BD rr     calc_downlefts_backwards_for_row 20, $05, $35 ; row 2 - 20 to
005727r 1  rr 7D rr rr  
00572Br 1  A8 7D rr rr  
00574Br 1  A2 30 BD rr     calc_downlefts_backwards_for_row 21, $04, $34 ; row 2 - 20 to
00574Fr 1  rr 7D rr rr  
005753r 1  A8 7D rr rr  
005773r 1  A2 2E BD rr     calc_downlefts_backwards_for_row 22, $04, $33 ; row 2 - 20 to
005777r 1  rr 7D rr rr  
00577Br 1  7D rr rr 7D  
0057AAr 1  A2 2E BD rr     calc_downlefts_backwards_for_row 23, $04, $32 ; row 2 - 20 to
0057AEr 1  rr 7D rr rr  
0057B2r 1  A8 7D rr rr  
0057D2r 1  A2 2C BD rr     calc_downlefts_backwards_for_row 24, $04, $31 ; row 2 - 20 to
0057D6r 1  rr 7D rr rr  
0057DAr 1  7D rr rr 7D  
005809r 1  A2 2C BD rr     calc_downlefts_backwards_for_row 25, $04, $30 ; row 2 - 20 to
00580Dr 1  rr 7D rr rr  
005811r 1  A8 7D rr rr  
005831r 1  A2 28 BD rr     calc_downlefts_backwards_for_row 26, $05, $2E ; row 26 - 4 to but 5 has no downleft
005835r 1  rr 7D rr rr  
005839r 1  7D rr rr 7D  
005868r 1  A2 26 BD rr     calc_downlefts_backwards_for_row 27, $06, $2C ; row 27 - 5 to but 5/6 have no downleft
00586Cr 1  rr 7D rr rr  
005870r 1  A8 7D rr rr  
005890r 1  A2 22 BD rr     calc_downlefts_backwards_for_row 28, $07, $2A ; row 28 - 6 to but 6/7 have no downleft
005894r 1  rr 7D rr rr  
005898r 1  7D rr rr 7D  
0058C7r 1  A2 23           LDX #42-7
0058C9r 1  BD rr rr      : LDA TUB_WORLD+(29*64)+7,X ;  self
0058CCr 1  7D rr rr        ADC TUB_WORLD+(29*64)+6,X ;  left
0058CFr 1  7D rr rr        ADC TUB_WORLD+(28*64)+7,X ;  upleft as low right
0058D2r 1  7D rr rr        ADC TUB_WORLD+(28*64)+8,X ;  upright as low left
0058D5r 1  9D rr rr        STA WATER_CALC_SCRATCH+(29*64)+7,X
0058D8r 1  CA              DEX
0058D9r 1  D0 EE           BNE :-
0058DBr 1               
0058DBr 1  AD rr rr 6D     calc_new_value_especial 1, 21, 64, 63, 1, 1, 63, 64
0058DFr 1  rr rr 6D rr  
0058E3r 1  rr 6D rr rr  
005905r 1  AD rr rr 6D     calc_new_value_especial 2, 20, 64, -63, 1, 1, 63, 64
005909r 1  rr rr 6D rr  
00590Dr 1  rr 6D rr rr  
00592Fr 1  AD rr rr 6D     calc_new_value_especial 3, 19, 64, -63, 1, -1, 63, 64
005933r 1  rr rr 6D rr  
005937r 1  rr 6D rr rr  
005959r 1  AD rr rr 6D     calc_new_value_especial 3, 18, 64, 63, 1, 1, 63, 64
00595Dr 1  rr rr 6D rr  
005961r 1  rr 6D rr rr  
005983r 1  AD rr rr 6D     calc_new_value_especial 4, 17, 64, -63, 1, -1, 63, 64
005987r 1  rr rr 6D rr  
00598Br 1  rr 6D rr rr  
0059ADr 1  AD rr rr 6D     calc_new_value_especial 4, 16, 64, 63, 1, 1, 63, 64
0059B1r 1  rr rr 6D rr  
0059B5r 1  rr 6D rr rr  
0059D7r 1  AD rr rr 6D     calc_new_value_especial 5, 15, 64, -63, 1, -1, 63, 64
0059DBr 1  rr rr 6D rr  
0059DFr 1  rr 6D rr rr  
005A01r 1  AD rr rr 6D     calc_new_value_especial 5, 14, 64, 63, 1, 1, 63, 64
005A05r 1  rr rr 6D rr  
005A09r 1  rr 6D rr rr  
005A2Br 1  AD rr rr 6D     calc_new_value_especial 6, 13, 64, -63, 1, 1, 63, 64
005A2Fr 1  rr rr 6D rr  
005A33r 1  rr 6D rr rr  
005A55r 1  AD rr rr 6D     calc_new_value_especial 7, 12, 64, -63, 1, 1, 63, 64
005A59r 1  rr rr 6D rr  
005A5Dr 1  rr 6D rr rr  
005A7Fr 1  AD rr rr 6D     calc_new_value_especial 8, 11, 64, -63, 1, 1, 63, 64
005A83r 1  rr rr 6D rr  
005A87r 1  rr 6D rr rr  
005AA9r 1  AD rr rr 6D     calc_new_value_especial 9, 10, 64, -63, 1, 1, -63, 64
005AADr 1  rr rr 6D rr  
005AB1r 1  rr 6D rr rr  
005AD3r 1  AD rr rr 6D     calc_new_value_especial 10, 10, -64, -63, 1, 1, 63, 64
005AD7r 1  rr rr 6D rr  
005ADBr 1  rr 6D rr rr  
005AFDr 1  AD rr rr 6D     calc_new_value_especial 11, 9, 64, -63, 1, 1, -63, 64
005B01r 1  rr rr 6D rr  
005B05r 1  rr 6D rr rr  
005B27r 1  AD rr rr 6D     calc_new_value_especial 12, 9, -64, -63, 1, 1, 63, 64
005B2Br 1  rr rr 6D rr  
005B2Fr 1  rr 6D rr rr  
005B51r 1  AD rr rr 6D     calc_new_value_especial 13, 8, 64, -63, 1, 1, -63, 64
005B55r 1  rr rr 6D rr  
005B59r 1  rr 6D rr rr  
005B7Br 1  AD rr rr 6D     calc_new_value_especial 14, 8, -64, -63, 1, 1, 63, 64
005B7Fr 1  rr rr 6D rr  
005B83r 1  rr 6D rr rr  
005BA5r 1  AD rr rr 6D     calc_new_value_especial 15, 7, 64, -63, 1, 1, -63, 64
005BA9r 1  rr rr 6D rr  
005BADr 1  rr 6D rr rr  
005BCFr 1  AD rr rr 6D     calc_new_value_especial 16, 7, -64, -63, 1, 1, 63, 64
005BD3r 1  rr rr 6D rr  
005BD7r 1  rr 6D rr rr  
005BF9r 1  AD rr rr 6D     calc_new_value_especial 17, 6, 64, -63, 1, 1, -63, 64
005BFDr 1  rr rr 6D rr  
005C01r 1  rr 6D rr rr  
005C23r 1  AD rr rr 6D     calc_new_value_especial 18, 6, -64, -63, 1, 1, 63, 64
005C27r 1  rr rr 6D rr  
005C2Br 1  rr 6D rr rr  
005C4Dr 1  AD rr rr 6D     calc_new_value_especial 19, 5, 64, -63, 1, 1, -63, 64
005C51r 1  rr rr 6D rr  
005C55r 1  rr 6D rr rr  
005C77r 1  AD rr rr 6D     calc_new_value_especial 20, 5, -64, -63, 1, 1, 63, 64
005C7Br 1  rr rr 6D rr  
005C7Fr 1  rr 6D rr rr  
005CA1r 1  AD rr rr 6D     calc_new_value_especial 21, 4, 64, -63, 1, 1, -63, 64
005CA5r 1  rr rr 6D rr  
005CA9r 1  rr 6D rr rr  
005CCBr 1  AD rr rr 6D     calc_new_value_especial 22, 4, -64, -63, 1, 1, -63, 64
005CCFr 1  rr rr 6D rr  
005CD3r 1  rr 6D rr rr  
005CF5r 1  AD rr rr 6D     calc_new_value_especial 23, 4, -64, -63, 1, 1, -63, 64
005CF9r 1  rr rr 6D rr  
005CFDr 1  rr 6D rr rr  
005D1Fr 1  AD rr rr 6D     calc_new_value_especial 24, 4, -64, -63, 1, 1, -63, 64
005D23r 1  rr rr 6D rr  
005D27r 1  rr 6D rr rr  
005D49r 1  AD rr rr 6D     calc_new_value_especial 25, 4, -64, -63, 1, 1, -63, 64
005D4Dr 1  rr rr 6D rr  
005D51r 1  rr 6D rr rr  
005D73r 1  AD rr rr 6D     calc_new_value_especial 26, 4, -64, -63, 1, 1, -63, -64
005D77r 1  rr rr 6D rr  
005D7Br 1  rr 6D rr rr  
005D9Dr 1  AD rr rr 6D     calc_new_value_especial 27, 5, -64, -63, 1, 1, -63, -64
005DA1r 1  rr rr 6D rr  
005DA5r 1  rr 6D rr rr  
005DC7r 1  AD rr rr 6D     calc_new_value_especial 28, 6, -64, -63, 1, 1, -63, -64
005DCBr 1  rr rr 6D rr  
005DCFr 1  rr 6D rr rr  
005DF1r 1  AD rr rr 6D     calc_new_value_especial 29, 7, -64, -63, 1, 1, -63, -64
005DF5r 1  rr rr 6D rr  
005DF9r 1  rr 6D rr rr  
005E1Br 1               
005E1Br 1  AD rr rr 6D     calc_new_value_especial  1, 55, 64, 63, -1, -1, 63, 64
005E1Fr 1  rr rr 6D rr  
005E23r 1  rr 6D rr rr  
005E45r 1  AD rr rr 6D     calc_new_value_especial  2, 56, 64, 63, -1, -1, 63, 64
005E49r 1  rr rr 6D rr  
005E4Dr 1  rr 6D rr rr  
005E6Fr 1  AD rr rr 6D     calc_new_value_especial  3, 57, 64, 63, -1, -1, 63, 64
005E73r 1  rr rr 6D rr  
005E77r 1  rr 6D rr rr  
005E99r 1  AD rr rr 6D     calc_new_value_especial  4, 58, 64, 63, -1, -1, 63, 64
005E9Dr 1  rr rr 6D rr  
005EA1r 1  rr 6D rr rr  
005EC3r 1  AD rr rr 6D     calc_new_value_especial  4, 57, -64, 63, 1, -1, 63, 64
005EC7r 1  rr rr 6D rr  
005ECBr 1  rr 6D rr rr  
005EEDr 1  AD rr rr 6D     calc_new_value_especial  5, 59, 64, 63, -1, -1, 63, 64
005EF1r 1  rr rr 6D rr  
005EF5r 1  rr 6D rr rr  
005F17r 1  AD rr rr 6D     calc_new_value_especial  5, 58, -64, 63, 1, -1, 63, 64
005F1Br 1  rr rr 6D rr  
005F1Fr 1  rr 6D rr rr  
005F41r 1               
005F41r 1               
005F41r 1               
005F41r 1               ;.macro calc_new_value_especial row, column, upleft, upright, right, left, downleft, downright
005F41r 1               ;   calc_new_value_especial , , -64, -63, 1, -1, 63, 64
005F41r 1               
005F41r 1               
005F41r 1               
005F41r 1               ;  now calculate new values...
005F41r 1  A2 21 BD rr     calc_new_values_for_row 1, 22, 54
005F45r 1  rr 7D rr rr  
005F49r 1  6A 4A 4A 7D  
005F58r 1  A2 22 BD rr     calc_new_values_for_row 2, $15, $36 ; row 2 - $14 has no left and $38 has no up/right
005F5Cr 1  rr 7D rr rr  
005F60r 1  6A 4A 4A 7D  
005F6Fr 1  A2 24 BD rr     calc_new_values_for_row 3, $14, $37 ; row 3 - $12 has no left and $37 has no up/right
005F73r 1  rr 7D rr rr  
005F77r 1  6A 4A 4A 7D  
005F86r 1  A2 27 BD rr     calc_new_values_for_row 4, $12, $38 ; row
005F8Ar 1  rr 7D rr rr  
005F8Er 1  6A 4A 4A 7D  
005F9Dr 1  A2 2A BD rr     calc_new_values_for_row 5, 16, $39 ; row start 1 more than calc back (because need downleft) and 1 less prev calc back
005FA1r 1  rr 7D rr rr  
005FA5r 1  6A 4A 4A 7D  
005FB4r 1  A2 2D BD rr     calc_new_values_for_row 6, $0E, $3A ; row start 1 more than calc back (because need downleft) and 1 less prev calc back
005FB8r 1  rr 7D rr rr  
005FBCr 1  6A 4A 4A 7D  
005FCBr 1  A2 2E BD rr     calc_new_values_for_row 7, $0D, $3A ; row start 1 more than calc back (because need downleft) and 1 less prev calc back
005FCFr 1  rr 7D rr rr  
005FD3r 1  6A 4A 4A 7D  
005FE2r 1  A2 2F BD rr     calc_new_values_for_row 8, $0C, $3A ; row start 1 more than calc back (because need downleft) and 1 less prev calc back
005FE6r 1  rr 7D rr rr  
005FEAr 1  6A 4A 4A 7D  
005FF9r 1  A2 30 BD rr     calc_new_values_for_row 9, $0B, $3A ; row start 1 more than calc back (because need downleft) and 1 less prev calc back
005FFDr 1  rr 7D rr rr  
006001r 1  6A 4A 4A 7D  
006010r 1  A2 2F BD rr     calc_new_values_for_row 10, $0B, $39 ; row start 1 more than calc back (because need downleft) and 1 less prev calc back
006014r 1  rr 7D rr rr  
006018r 1  6A 4A 4A 7D  
006027r 1  A2 2F BD rr     calc_new_values_for_row 11, $0A, $38 ; row start 1 more than calc back (because need downleft) and 1 less prev calc back
00602Br 1  rr 7D rr rr  
00602Fr 1  6A 4A 4A 7D  
00603Er 1  A2 2F BD rr     calc_new_values_for_row 12, $0A, $38 ; row start 1 more than calc back (because need downleft) and 1 less prev calc back
006042r 1  rr 7D rr rr  
006046r 1  6A 4A 4A 7D  
006055r 1  A2 30 BD rr     calc_new_values_for_row 13, $09, $38 ; row start 1 more than calc back (because need downleft) and 1 less prev calc back
006059r 1  rr 7D rr rr  
00605Dr 1  6A 4A 4A 7D  
00606Cr 1  A2 30 BD rr     calc_new_values_for_row 14, $09, $38 ; row start 1 more than calc back (because need downleft) and 1 less prev calc back
006070r 1  rr 7D rr rr  
006074r 1  6A 4A 4A 7D  
006083r 1  A2 30 BD rr     calc_new_values_for_row 15, $08, $37 ; row start 1 more than calc back (because need downleft) and 1 less prev calc back
006087r 1  rr 7D rr rr  
00608Br 1  6A 4A 4A 7D  
00609Ar 1  A2 30 BD rr     calc_new_values_for_row 16, $08, $37
00609Er 1  rr 7D rr rr  
0060A2r 1  6A 4A 4A 7D  
0060B1r 1  A2 30 BD rr     calc_new_values_for_row 17, $07, $36
0060B5r 1  rr 7D rr rr  
0060B9r 1  6A 4A 4A 7D  
0060C8r 1  A2 2F BD rr     calc_new_values_for_row 18, $07, $35
0060CCr 1  rr 7D rr rr  
0060D0r 1  6A 4A 4A 7D  
0060DFr 1  A2 30 BD rr     calc_new_values_for_row 19, $06, $35
0060E3r 1  rr 7D rr rr  
0060E7r 1  6A 4A 4A 7D  
0060F6r 1  A2 2F BD rr     calc_new_values_for_row 20, $06, $34
0060FAr 1  rr 7D rr rr  
0060FEr 1  6A 4A 4A 7D  
00610Dr 1  A2 30 BD rr     calc_new_values_for_row 21, $05, $34
006111r 1  rr 7D rr rr  
006115r 1  6A 4A 4A 7D  
006124r 1  A2 2F BD rr     calc_new_values_for_row 22, $05, $33
006128r 1  rr 7D rr rr  
00612Cr 1  6A 4A 4A 7D  
00613Br 1  A2 2E BD rr     calc_new_values_for_row 23, $05, $32
00613Fr 1  rr 7D rr rr  
006143r 1  6A 4A 4A 7D  
006152r 1  A2 2D BD rr     calc_new_values_for_row 24, $05, $31
006156r 1  rr 7D rr rr  
00615Ar 1  6A 4A 4A 7D  
006169r 1  A2 2C BD rr     calc_new_values_for_row 25, $05, $30
00616Dr 1  rr 7D rr rr  
006171r 1  6A 4A 4A 7D  
006180r 1  A2 29 BD rr     calc_new_values_for_row 26, $06, $2E
006184r 1  rr 7D rr rr  
006188r 1  6A 4A 4A 7D  
006197r 1  A2 26 BD rr     calc_new_values_for_row 27, $07, $2C
00619Br 1  rr 7D rr rr  
00619Fr 1  6A 4A 4A 7D  
0061AEr 1  A2 23 BD rr     calc_new_values_for_row 28, $08, $2A
0061B2r 1  rr 7D rr rr  
0061B6r 1  6A 4A 4A 7D  
0061C5r 1  A2 22 BD rr     calc_new_values_for_row 29, $08, $29
0061C9r 1  rr 7D rr rr  
0061CDr 1  6A 4A 4A 7D  
0061DCr 1               
0061DCr 1               ;  the ones we had to do especiale need copied now...
0061DCr 1  AD rr rr 8D     copy_scratch_to_self  1, 21
0061E0r 1  rr rr        
0061E2r 1  AD rr rr 8D     copy_scratch_to_self  2, 20
0061E6r 1  rr rr        
0061E8r 1  AD rr rr 8D     copy_scratch_to_self  3, 19
0061ECr 1  rr rr        
0061EEr 1  AD rr rr 8D     copy_scratch_to_self  3, 18
0061F2r 1  rr rr        
0061F4r 1  AD rr rr 8D     copy_scratch_to_self  4, 17
0061F8r 1  rr rr        
0061FAr 1  AD rr rr 8D     copy_scratch_to_self  4, 16
0061FEr 1  rr rr        
006200r 1  AD rr rr 8D     copy_scratch_to_self  5, 15
006204r 1  rr rr        
006206r 1  AD rr rr 8D     copy_scratch_to_self  5, 14
00620Ar 1  rr rr        
00620Cr 1  AD rr rr 8D     copy_scratch_to_self  6, 13
006210r 1  rr rr        
006212r 1  AD rr rr 8D     copy_scratch_to_self  7, 12
006216r 1  rr rr        
006218r 1  AD rr rr 8D     copy_scratch_to_self  8, 11
00621Cr 1  rr rr        
00621Er 1  AD rr rr 8D     copy_scratch_to_self  9, 10
006222r 1  rr rr        
006224r 1  AD rr rr 8D     copy_scratch_to_self 10, 10
006228r 1  rr rr        
00622Ar 1  AD rr rr 8D     copy_scratch_to_self 11,  9
00622Er 1  rr rr        
006230r 1  AD rr rr 8D     copy_scratch_to_self 12,  9
006234r 1  rr rr        
006236r 1  AD rr rr 8D     copy_scratch_to_self 13,  8
00623Ar 1  rr rr        
00623Cr 1  AD rr rr 8D     copy_scratch_to_self 14,  8
006240r 1  rr rr        
006242r 1  AD rr rr 8D     copy_scratch_to_self 15,  7
006246r 1  rr rr        
006248r 1  AD rr rr 8D     copy_scratch_to_self 16,  7
00624Cr 1  rr rr        
00624Er 1  AD rr rr 8D     copy_scratch_to_self 17,  6
006252r 1  rr rr        
006254r 1  AD rr rr 8D     copy_scratch_to_self 18,  6
006258r 1  rr rr        
00625Ar 1  AD rr rr 8D     copy_scratch_to_self 19,  5
00625Er 1  rr rr        
006260r 1  AD rr rr 8D     copy_scratch_to_self 20,  5
006264r 1  rr rr        
006266r 1  AD rr rr 8D     copy_scratch_to_self 21,  4
00626Ar 1  rr rr        
00626Cr 1  AD rr rr 8D     copy_scratch_to_self 22,  4
006270r 1  rr rr        
006272r 1  AD rr rr 8D     copy_scratch_to_self 23,  4
006276r 1  rr rr        
006278r 1  AD rr rr 8D     copy_scratch_to_self 24,  4
00627Cr 1  rr rr        
00627Er 1  AD rr rr 8D     copy_scratch_to_self 25,  4
006282r 1  rr rr        
006284r 1  AD rr rr 8D     copy_scratch_to_self 26,  4
006288r 1  rr rr        
00628Ar 1  AD rr rr 8D     copy_scratch_to_self 27,  5
00628Er 1  rr rr        
006290r 1  AD rr rr 8D     copy_scratch_to_self 28,  6
006294r 1  rr rr        
006296r 1  AD rr rr 8D     copy_scratch_to_self 29,  7
00629Ar 1  rr rr        
00629Cr 1               
00629Cr 1               
00629Cr 1               
00629Cr 1               
00629Cr 1               
00629Cr 1  60              RTS ; fin
00629Dr 1               
00629Dr 1               test_optimal_pal_data:
00629Dr 1               ;      GB   R  $1:FA00-$1:FBFF   VERA Color Palette (256 x 2 bytes)
00629Dr 1  00 00        .byte $00,$00  ; 0 - black/transparent
00629Fr 1  C8 0F        .byte $c8,$0f  ; 1 #ffcc88
0062A1r 1  04 06        .byte $04,$06  ; 2 #660044
0062A3r 1  00 0C        .byte $00,$0C  ; 3  #cc0000
0062A5r 1  F0 0C        .byte $F0,$0C  ; 4#ccff00
0062A7r 1  42 03        .byte $42,$03
0062A9r 1  60 0C        .byte $60,$0c   ; 6  #cc6600
0062ABr 1  40 08        .byte $40,$08   ; 7 #884400
0062ADr 1  C0 0C        .byte $c0,$0c   ; 8 #cccc00
0062AFr 1  6A 02        .byte $6a,$02   ; 9 #2266aa mid blue
0062B1r 1  C0 00        .byte $c0,$00   ; A #00cc00
0062B3r 1  AC 07        .byte $ac,$07   ; B #77aacc light blue
0062B5r 1  C0 00        .byte $c0,$00   ; C #0000c0 dark blue
0062B7r 1  0C 0C        .byte $0c,$0c   ; D #cc00cc
0062B9r 1  88 08        .byte $88,$08   ; E #888888
0062BBr 1  22 02        .byte $22,$02   ; F #222222
0062BDr 1               
0062BDr 1               test_vram_data:
0062BDr 1               ; 70 to 127 - start of 16x16 (each 128 byte) for testing directions / sizing..
0062BDr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11  ;  0-15 16x10 -  0
0062C1r 1  11 11 11 11  
0062C5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
0062C9r 1  FF FF FF F1  
0062CDr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0062D1r 1  FF FF FF F1  
0062D5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0062D9r 1  FF FF FF F1  
0062DDr 1  1F FF FF F1  .byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$F1
0062E1r 1  FF FF FF F1  
0062E5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0062E9r 1  FF FF FF F1  
0062EDr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0062F1r 1  FF FF FF F1  
0062F5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0062F9r 1  FF FF FF F1  
0062FDr 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
006301r 1  FF FF FF F1  
006305r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11
006309r 1  11 11 11 11  
00630Dr 1  55 55 55 55  .repeat 54
006311r 1  55 55 55 55  
006315r 1  55 55 55 55  
0064BDr 1               .res 8,$55
0064BDr 1               .endrepeat
0064BDr 1               
0064BDr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11  ;  16-31    16x10 -  0 trans
0064C1r 1  11 11 11 11  
0064C5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0064C9r 1  F0 F0 F0 F1  
0064CDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
0064D1r 1  0F 0F 0F 01  
0064D5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0064D9r 1  F0 F0 F0 F1  
0064DDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
0064E1r 1  0F 0F 0F 01  
0064E5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0064E9r 1  F0 F0 F0 F1  
0064EDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
0064F1r 1  0F 0F 0F 01  
0064F5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0064F9r 1  F0 F0 F0 F1  
0064FDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
006501r 1  0F 0F 0F 01  
006505r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11
006509r 1  11 11 11 11  
00650Dr 1  50 50 50 50  .repeat 27
006511r 1  50 50 50 50  
006515r 1  05 05 05 05  
0066BDr 1               .res 8,$50
0066BDr 1               .res 8,$05
0066BDr 1               .endrepeat
0066BDr 1               
0066BDr 1               
0066BDr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11  ;  32-47    16x11 -  4
0066C1r 1  11 11 11 11  
0066C5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
0066C9r 1  FF FF FF F1  
0066CDr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0066D1r 1  FF FF FF F1  
0066D5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0066D9r 1  FF FF FF F1  
0066DDr 1  1F FF FF F1  .byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$F1
0066E1r 1  FF FF FF F1  
0066E5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0066E9r 1  FF FF FF F1  
0066EDr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0066F1r 1  FF FF FF F1  
0066F5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0066F9r 1  FF FF FF F1  
0066FDr 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
006701r 1  FF FF FF F1  
006705r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
006709r 1  FF FF FF F1  
00670Dr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11
006711r 1  11 11 11 11  
006715r 1  55 55 55 55  .repeat 53
006719r 1  55 55 55 55  
00671Dr 1  55 55 55 55  
0068BDr 1               .res 8,$55
0068BDr 1               .endrepeat
0068BDr 1               
0068BDr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11  ;  48-63    16x11 -  4 trans
0068C1r 1  11 11 11 11  
0068C5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0068C9r 1  F0 F0 F0 F1  
0068CDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
0068D1r 1  0F 0F 0F 01  
0068D5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0068D9r 1  F0 F0 F0 F1  
0068DDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
0068E1r 1  0F 0F 0F 01  
0068E5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0068E9r 1  F0 F0 F0 F1  
0068EDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
0068F1r 1  0F 0F 0F 01  
0068F5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0068F9r 1  F0 F0 F0 F1  
0068FDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
006901r 1  0F 0F 0F 01  
006905r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
006909r 1  F0 F0 F0 F1  
00690Dr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11
006911r 1  11 11 11 11  
006915r 1  05 05 05 05  .res 7,$05
006919r 1  05 05 05     
00691Cr 1  00           .byte 0
00691Dr 1  50 50 50 50  .repeat 26
006921r 1  50 50 50 50  
006925r 1  05 05 05 05  
006ABDr 1               .res 8,$50
006ABDr 1               .res 7,$05
006ABDr 1               .byte 0
006ABDr 1               .endrepeat
006ABDr 1               
006ABDr 1               
006ABDr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10  ;  64-79    15x11 - 10
006AC1r 1  11 11 11 10  
006AC5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
006AC9r 1  FF FF FF 10  
006ACDr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
006AD1r 1  FF FF FF 10  
006AD5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
006AD9r 1  FF FF FF 10  
006ADDr 1  1F FF FF F1  .byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$10
006AE1r 1  FF FF FF 10  
006AE5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
006AE9r 1  FF FF FF 10  
006AEDr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
006AF1r 1  FF FF FF 10  
006AF5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
006AF9r 1  FF FF FF 10  
006AFDr 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
006B01r 1  FF FF FF 10  
006B05r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
006B09r 1  FF FF FF 10  
006B0Dr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
006B11r 1  11 11 11 10  
006B15r 1  55 55 55 55  .repeat 53
006B19r 1  55 55 55 50  
006B1Dr 1  55 55 55 55  
006CBDr 1               .res 7,$55
006CBDr 1               .byte $50
006CBDr 1               .endrepeat
006CBDr 1               
006CBDr 1               
006CBDr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10  ;  80-95    15x11 - 10 trans
006CC1r 1  11 11 11 10  
006CC5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
006CC9r 1  F0 F0 F0 10  
006CCDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
006CD1r 1  0F 0F 0F 10  
006CD5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
006CD9r 1  F0 F0 F0 10  
006CDDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
006CE1r 1  0F 0F 0F 10  
006CE5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
006CE9r 1  F0 F0 F0 10  
006CEDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
006CF1r 1  0F 0F 0F 10  
006CF5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
006CF9r 1  F0 F0 F0 10  
006CFDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
006D01r 1  0F 0F 0F 10  
006D05r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
006D09r 1  F0 F0 F0 10  
006D0Dr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
006D11r 1  11 11 11 10  
006D15r 1  05 05 05 05  .res 7,$05
006D19r 1  05 05 05     
006D1Cr 1  00           .byte 0
006D1Dr 1  50 50 50 50  .repeat 26
006D21r 1  50 50 50 50  
006D25r 1  05 05 05 05  
006EBDr 1               .res 8,$50
006EBDr 1               .res 7,$05
006EBDr 1               .byte 0
006EBDr 1               .endrepeat
006EBDr 1               
006EBDr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10  ;  96-111    15x12 - 18
006EC1r 1  11 11 11 10  
006EC5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
006EC9r 1  FF FF FF 10  
006ECDr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
006ED1r 1  FF FF FF 10  
006ED5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
006ED9r 1  FF FF FF 10  
006EDDr 1  1F FF FF F1  .byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$10
006EE1r 1  FF FF FF 10  
006EE5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
006EE9r 1  FF FF FF 10  
006EEDr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
006EF1r 1  FF FF FF 10  
006EF5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
006EF9r 1  FF FF FF 10  
006EFDr 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
006F01r 1  FF FF FF 10  
006F05r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
006F09r 1  FF FF FF 10  
006F0Dr 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
006F11r 1  FF FF FF 10  
006F15r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
006F19r 1  11 11 11 10  
006F1Dr 1  55 55 55 55  .repeat 52
006F21r 1  55 55 55 50  
006F25r 1  55 55 55 55  
0070BDr 1               .res 7,$55
0070BDr 1               .byte $50
0070BDr 1               .endrepeat
0070BDr 1               
0070BDr 1               
0070BDr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10  ;  112-127    15x12 - 18 trans
0070C1r 1  11 11 11 10  
0070C5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0070C9r 1  F0 F0 F0 10  
0070CDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0070D1r 1  0F 0F 0F 10  
0070D5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0070D9r 1  F0 F0 F0 10  
0070DDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0070E1r 1  0F 0F 0F 10  
0070E5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0070E9r 1  F0 F0 F0 10  
0070EDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0070F1r 1  0F 0F 0F 10  
0070F5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0070F9r 1  F0 F0 F0 10  
0070FDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
007101r 1  0F 0F 0F 10  
007105r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
007109r 1  F0 F0 F0 10  
00710Dr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
007111r 1  0F 0F 0F 10  
007115r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
007119r 1  11 11 11 10  
00711Dr 1  50 50 50 50  .repeat 26
007121r 1  50 50 50 50  
007125r 1  05 05 05 05  
0072BDr 1               .res 8,$50
0072BDr 1               .res 7,$05
0072BDr 1               .byte 0
0072BDr 1               .endrepeat
0072BDr 1               
0072BDr 1               ; alernate tile graphic to use for tub wall .. 128-143 ; 16x tile
0072BDr 1  16 16 16 16  .repeat 32
0072C1r 1  16 16 16 16  
0072C5r 1  61 61 61 61  
0074BDr 1                   .byte $16, $16, $16, $16, $16, $16, $16, $16
0074BDr 1                   .byte $61, $61, $61, $61, $61, $61, $61, $61
0074BDr 1               .endrepeat
0074BDr 1               
0074BDr 1  10 10 10 10  .repeat 32  ;  144-159
0074C1r 1  10 10 10 10  
0074C5r 1  06 06 06 06  
0076BDr 1                   .byte $10, $10, $10, $10, $10, $10, $10, $10
0076BDr 1                   .byte $06, $06, $06, $06, $06, $06, $06, $06
0076BDr 1               .endrepeat
0076BDr 1               
0076BDr 1               
0076BDr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$00  ;  160-175    14x12
0076C1r 1  11 11 11 00  
0076C5r 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$fF,$FF,$F1,$00
0076C9r 1  FF FF F1 00  
0076CDr 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$fF,$FF,$F1,$00
0076D1r 1  FF FF F1 00  
0076D5r 1  1F FF FF FF  .byte $1f,$FF,$ff,$Ff,$Ff,$fF,$F1,$00
0076D9r 1  FF FF F1 00  
0076DDr 1  1F FF FF F1  .byte $1f,$FF,$FF,$f1,$fF,$FF,$F1,$00
0076E1r 1  FF FF F1 00  
0076E5r 1  1F FF FF FF  .byte $1f,$FF,$FF,$Ff,$Ff,$fF,$F1,$00
0076E9r 1  FF FF F1 00  
0076EDr 1  1F FF FF FF  .byte $1f,$FF,$FF,$fF,$FF,$FF,$F1,$00
0076F1r 1  FF FF F1 00  
0076F5r 1  1F FF FF FF  .byte $1f,$FF,$FF,$fF,$FF,$FF,$F1,$00
0076F9r 1  FF FF F1 00  
0076FDr 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$FF,$FF,$F1,$00
007701r 1  FF FF F1 00  
007705r 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$FF,$FF,$F1,$00
007709r 1  FF FF F1 00  
00770Dr 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$FF,$FF,$F1,$00
007711r 1  FF FF F1 00  
007715r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$00
007719r 1  11 11 11 00  
00771Dr 1  55 55 55 55  .repeat 52
007721r 1  55 55 55 00  
007725r 1  55 55 55 55  
0078BDr 1               .res 7,$55
0078BDr 1               .byte 0
0078BDr 1               .endrepeat
0078BDr 1               
0078BDr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$00  ;  176-191
0078C1r 1  11 11 11 00  
0078C5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0078C9r 1  F0 F0 F0 10  
0078CDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0078D1r 1  0F 0F 0F 10  
0078D5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0078D9r 1  F0 F0 F0 10  
0078DDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0078E1r 1  0F 0F 0F 10  
0078E5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0078E9r 1  F0 F0 F0 10  
0078EDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0078F1r 1  0F 0F 0F 10  
0078F5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0078F9r 1  F0 F0 F0 10  
0078FDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
007901r 1  0F 0F 0F 10  
007905r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
007909r 1  F0 F0 F0 10  
00790Dr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
007911r 1  0F 0F 0F 10  
007915r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
007919r 1  11 11 11 10  
00791Dr 1  50 50 50 50  .repeat 26
007921r 1  50 50 50 50  
007925r 1  05 05 05 05  
007ABDr 1               .res 8,$50
007ABDr 1               .res 7,$05
007ABDr 1               .byte 0
007ABDr 1               .endrepeat
007ABDr 1               
007ABDr 1               ; alernate tile graphic to use for tub wall .. 192-223 ; 15x tile
007ABDr 1  16 16 16 16  .repeat 32
007AC1r 1  16 16 16 10  
007AC5r 1  61 61 61 61  
007CBDr 1                   .byte $16, $16, $16, $16, $16, $16, $16, $10
007CBDr 1                   .byte $61, $61, $61, $61, $61, $61, $61, $60
007CBDr 1               .endrepeat
007CBDr 1               
007CBDr 1  10 10 10 10  .repeat 32  ;  144-159
007CC1r 1  10 10 10 10  
007CC5r 1  06 06 06 06  
007EBDr 1                   .byte $10, $10, $10, $10, $10, $10, $10, $10
007EBDr 1                   .byte $06, $06, $06, $06, $06, $06, $06, $00
007EBDr 1               .endrepeat
007EBDr 1               
007EBDr 1               
007EBDr 1               ; alernate tile graphic to use for tub wall .. 224 ; 14x tile
007EBDr 1  16 16 16 16  .repeat 32
007EC1r 1  16 16 16 00  
007EC5r 1  61 61 61 61  
0080BDr 1                   .byte $16, $16, $16, $16, $16, $16, $16, $00
0080BDr 1                   .byte $61, $61, $61, $61, $61, $61, $61, $00
0080BDr 1               .endrepeat
0080BDr 1               
0080BDr 1  10 10 10 10  .repeat 32  ;  144-159
0080C1r 1  10 10 10 00  
0080C5r 1  06 06 06 06  
0082BDr 1                   .byte $10, $10, $10, $10, $10, $10, $10, $00
0082BDr 1                   .byte $06, $06, $06, $06, $06, $06, $06, $00
0082BDr 1               .endrepeat
0082BDr 1               
0082BDr 1               
0082BDr 1               
0082BDr 1               HEX_DISPLAY_FONT:       ; 8x8x16 color = 32 bytes ... sprite addr 256
0082BDr 1               ;     01   23   45   67
0082BDr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 0
0082C1r 1  01 00 00 10  .byte $01, $00, $00, $10
0082C5r 1  01 00 00 10  .byte $01, $00, $00, $10
0082C9r 1  00 00 00 00  .byte $00, $00, $00, $00
0082CDr 1  01 00 00 10  .byte $01, $00, $00, $10
0082D1r 1  01 00 00 10  .byte $01, $00, $00, $10
0082D5r 1  01 00 00 10  .byte $01, $00, $00, $10
0082D9r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 0 /
0082DDr 1               
0082DDr 1  00 00 00 00  .byte $00, $00, $00, $00 ; 1
0082E1r 1  00 00 00 10  .byte $00, $00, $00, $10
0082E5r 1  00 00 00 10  .byte $00, $00, $00, $10
0082E9r 1  00 00 00 00  .byte $00, $00, $00, $00
0082EDr 1  00 00 00 10  .byte $00, $00, $00, $10
0082F1r 1  00 00 00 10  .byte $00, $00, $00, $10
0082F5r 1  00 00 00 10  .byte $00, $00, $00, $10
0082F9r 1  00 00 00 00  .byte $00, $00, $00, $00
0082FDr 1               
0082FDr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 2
008301r 1  00 00 00 10  .byte $00, $00, $00, $10
008305r 1  00 00 00 10  .byte $00, $00, $00, $10
008309r 1  00 11 11 00  .byte $00, $11, $11, $00
00830Dr 1  01 00 00 00  .byte $01, $00, $00, $00
008311r 1  01 00 00 00  .byte $01, $00, $00, $00
008315r 1  01 00 00 00  .byte $01, $00, $00, $00
008319r 1  00 11 11 00  .byte $00, $11, $11, $00
00831Dr 1               
00831Dr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 3
008321r 1  00 00 00 10  .byte $00, $00, $00, $10
008325r 1  00 00 00 10  .byte $00, $00, $00, $10
008329r 1  00 11 11 00  .byte $00, $11, $11, $00
00832Dr 1  00 00 00 10  .byte $00, $00, $00, $10
008331r 1  00 00 00 10  .byte $00, $00, $00, $10
008335r 1  00 00 00 10  .byte $00, $00, $00, $10
008339r 1  00 11 11 00  .byte $00, $11, $11, $00
00833Dr 1               
00833Dr 1  00 00 00 00  .byte $00, $00, $00, $00   ; 4
008341r 1  01 00 00 10  .byte $01, $00, $00, $10
008345r 1  01 00 00 10  .byte $01, $00, $00, $10
008349r 1  00 11 11 00  .byte $00, $11, $11, $00
00834Dr 1  00 00 00 10  .byte $00, $00, $00, $10
008351r 1  00 00 00 10  .byte $00, $00, $00, $10
008355r 1  00 00 00 10  .byte $00, $00, $00, $10
008359r 1  00 00 00 00  .byte $00, $00, $00, $00
00835Dr 1               
00835Dr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 5
008361r 1  01 00 00 00  .byte $01, $00, $00, $00
008365r 1  01 00 00 00  .byte $01, $00, $00, $00
008369r 1  00 11 11 00  .byte $00, $11, $11, $00
00836Dr 1  00 00 00 10  .byte $00, $00, $00, $10
008371r 1  00 00 00 10  .byte $00, $00, $00, $10
008375r 1  00 00 00 10  .byte $00, $00, $00, $10
008379r 1  00 11 11 00  .byte $00, $11, $11, $00
00837Dr 1               
00837Dr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 6
008381r 1  01 00 00 00  .byte $01, $00, $00, $00
008385r 1  01 00 00 00  .byte $01, $00, $00, $00
008389r 1  00 11 11 00  .byte $00, $11, $11, $00
00838Dr 1  01 00 00 10  .byte $01, $00, $00, $10
008391r 1  01 00 00 10  .byte $01, $00, $00, $10
008395r 1  01 00 00 10  .byte $01, $00, $00, $10
008399r 1  00 11 11 00  .byte $00, $11, $11, $00
00839Dr 1               
00839Dr 1  00 01 01 00  .byte $00, $01, $01, $00 ; 7
0083A1r 1  00 00 00 10  .byte $00, $00, $00, $10
0083A5r 1  00 00 00 10  .byte $00, $00, $00, $10
0083A9r 1  00 00 00 00  .byte $00, $00, $00, $00
0083ADr 1  00 00 00 10  .byte $00, $00, $00, $10
0083B1r 1  00 00 00 10  .byte $00, $00, $00, $10
0083B5r 1  00 00 00 10  .byte $00, $00, $00, $10
0083B9r 1  00 00 00 00  .byte $00, $00, $00, $00
0083BDr 1               
0083BDr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 8
0083C1r 1  01 00 00 10  .byte $01, $00, $00, $10
0083C5r 1  01 00 00 10  .byte $01, $00, $00, $10
0083C9r 1  00 11 11 00  .byte $00, $11, $11, $00
0083CDr 1  01 00 00 10  .byte $01, $00, $00, $10
0083D1r 1  01 00 00 10  .byte $01, $00, $00, $10
0083D5r 1  01 00 00 10  .byte $01, $00, $00, $10
0083D9r 1  00 11 11 00  .byte $00, $11, $11, $00
0083DDr 1               
0083DDr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 9
0083E1r 1  01 00 00 10  .byte $01, $00, $00, $10
0083E5r 1  01 00 00 10  .byte $01, $00, $00, $10
0083E9r 1  00 11 11 00  .byte $00, $11, $11, $00
0083EDr 1  00 00 00 10  .byte $00, $00, $00, $10
0083F1r 1  00 00 00 10  .byte $00, $00, $00, $10
0083F5r 1  00 00 00 10  .byte $00, $00, $00, $10
0083F9r 1  00 11 11 00  .byte $00, $11, $11, $00
0083FDr 1               
0083FDr 1  00 11 11 00  .byte $00, $11, $11, $00   ; A
008401r 1  01 00 00 10  .byte $01, $00, $00, $10
008405r 1  01 00 00 10  .byte $01, $00, $00, $10
008409r 1  00 11 11 00  .byte $00, $11, $11, $00
00840Dr 1  01 00 00 10  .byte $01, $00, $00, $10
008411r 1  01 00 00 10  .byte $01, $00, $00, $10
008415r 1  01 00 00 10  .byte $01, $00, $00, $10
008419r 1  00 00 00 00  .byte $00, $00, $00, $00
00841Dr 1               
00841Dr 1               
00841Dr 1  00 00 00 00  .byte $00, $00, $00, $00   ; B
008421r 1  01 00 00 00  .byte $01, $00, $00, $00
008425r 1  01 00 00 00  .byte $01, $00, $00, $00
008429r 1  00 11 11 00  .byte $00, $11, $11, $00
00842Dr 1  01 00 00 10  .byte $01, $00, $00, $10
008431r 1  01 00 00 10  .byte $01, $00, $00, $10
008435r 1  01 00 00 10  .byte $01, $00, $00, $10
008439r 1  00 11 11 00  .byte $00, $11, $11, $00
00843Dr 1               
00843Dr 1  00 11 11 00  .byte $00, $11, $11, $00   ; C
008441r 1  01 00 00 00  .byte $01, $00, $00, $00
008445r 1  01 00 00 00  .byte $01, $00, $00, $00
008449r 1  00 00 00 00  .byte $00, $00, $00, $00
00844Dr 1  01 00 00 00  .byte $01, $00, $00, $00
008451r 1  01 00 00 00  .byte $01, $00, $00, $00
008455r 1  01 00 00 00  .byte $01, $00, $00, $00
008459r 1  00 11 11 00  .byte $00, $11, $11, $00
00845Dr 1               
00845Dr 1  00 00 00 00  .byte $00, $00, $00, $00   ; D
008461r 1  00 00 00 10  .byte $00, $00, $00, $10
008465r 1  00 00 00 10  .byte $00, $00, $00, $10
008469r 1  00 11 11 00  .byte $00, $11, $11, $00
00846Dr 1  01 00 00 10  .byte $01, $00, $00, $10
008471r 1  01 00 00 10  .byte $01, $00, $00, $10
008475r 1  01 00 00 10  .byte $01, $00, $00, $10
008479r 1  00 11 11 00  .byte $00, $11, $11, $00
00847Dr 1               
00847Dr 1  00 11 11 00  .byte $00, $11, $11, $00   ; E
008481r 1  01 00 00 00  .byte $01, $00, $00, $00
008485r 1  01 00 00 00  .byte $01, $00, $00, $00
008489r 1  00 11 11 00  .byte $00, $11, $11, $00
00848Dr 1  01 00 00 00  .byte $01, $00, $00, $00
008491r 1  01 00 00 00  .byte $01, $00, $00, $00
008495r 1  01 00 00 00  .byte $01, $00, $00, $00
008499r 1  00 11 11 00  .byte $00, $11, $11, $00
00849Dr 1               
00849Dr 1  00 11 11 00  .byte $00, $11, $11, $00   ; F   sprite addr 48
0084A1r 1  01 00 00 00  .byte $01, $00, $00, $00
0084A5r 1  01 00 00 00  .byte $01, $00, $00, $00
0084A9r 1  00 11 11 00  .byte $00, $11, $11, $00
0084ADr 1  01 00 00 00  .byte $01, $00, $00, $00
0084B1r 1  01 00 00 00  .byte $01, $00, $00, $00
0084B5r 1  01 00 00 00  .byte $01, $00, $00, $00
0084B9r 1  00 00 00 00  .byte $00, $00, $00, $00
0084BDr 1               
0084BDr 1               test_cell_sprite:    ;  is 16x64x16 bit = 512 bytes   sprite addr = 10
0084BDr 1               ;     01   23   45   67   89   AB   CD   EF
0084BDr 1  CC C9 CC C9  .byte $CC, $C9, $CC, $C9, $CC, $C9, $CC, $C0    ;  0
0084C1r 1  CC C9 CC C0  
0084C5r 1  09 9B 99 9B  .byte $09, $9B, $99, $9B, $99, $9B, $99, $9C    ;  1
0084C9r 1  99 9B 99 9C  
0084CDr 1  CB BC BB BC  .byte $CB, $BC, $BB, $BC, $BB, $BC, $BB, $B0    ;  2
0084D1r 1  BB BC BB B0  
0084D5r 1  0C C9 CC C9  .byte $0C, $C9, $CC, $C9, $CC, $C9, $CC, $CC    ;  3
0084D9r 1  CC C9 CC CC  
0084DDr 1  C9 9B 99 9B  .byte $C9, $9B, $99, $9B, $99, $9B, $99, $90    ;  4
0084E1r 1  99 9B 99 90  
0084E5r 1  0B BC BB BC  .byte $0B, $BC, $BB, $BC, $BB, $BC, $BB, $BC    ;  5
0084E9r 1  BB BC BB BC  
0084EDr 1  CC C9 CC C9  .byte $CC, $C9, $CC, $C9, $CC, $C9, $CC, $C0    ;  6
0084F1r 1  CC C9 CC C0  
0084F5r 1  09 9B 99 9B  .byte $09, $9B, $99, $9B, $99, $9B, $99, $9C    ;  7
0084F9r 1  99 9B 99 9C  
0084FDr 1  CB BC BB BC  .byte $CB, $BC, $BB, $BC, $BB, $BC, $BB, $B0    ;  8 ; 45* is 9.5 ..
008501r 1  BB BC BB B0  
008505r 1  0C 09 0C 09  .byte $0C, $09, $0C, $09, $0C, $09, $0C, $0C    ;  9
008509r 1  0C 09 0C 0C  
00850Dr 1  09 90 09 90  .byte $09, $90, $09, $90, $09, $90, $09, $90   ;  10
008511r 1  09 90 09 90  
008515r 1  0E 9E E9 9E  .byte $0E, $9E, $E9, $9E, $E9, $9E, $E9, $9E   ;  11
008519r 1  E9 9E E9 9E  
00851Dr 1               
00851Dr 1  EE EE EE EE  .repeat 13
008521r 1  EE EE EE E0  
008525r 1  0E EE 66 EE  
0086BDr 1                   .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $E0    ;  12
0086BDr 1                   .byte $0E, $EE, $66, $EE, $EE, $66, $EE, $EE    ;
0086BDr 1                   .byte $EE, $66, $EE, $66, $66, $EE, $66, $E0    ;
0086BDr 1                   .byte $06, $EE, $EE, $EE, $EE, $EE, $EE, $66    ;
0086BDr 1               .endrepeat
0086BDr 1               
0086BDr 1               test_border: ; 32
0086BDr 1  0B 0B 0B 0B  .repeat 64
0086C1r 1  B0 B0 B0 B0  
0086C5r 1  0B 0B 0B 0B  
0088BDr 1                  .res 4, $0B
0088BDr 1                  .res 4, $B0
0088BDr 1               .endrepeat
0088BDr 1               
0088BDr 1               test_cross_hair_8x8:    ;  8x8x16 color = 32 bytes ; sprite 96
0088BDr 1               ;     01   23   45   67
0088BDr 1  11 00 00 11  .byte $11, $00, $00, $11
0088C1r 1  10 00 00 01  .byte $10, $00, $00, $01
0088C5r 1  00 00 00 00  .byte $00, $00, $00, $00
0088C9r 1  00 01 10 00  .byte $00, $01, $10, $00
0088CDr 1  00 01 10 00  .byte $00, $01, $10, $00
0088D1r 1  00 00 00 00  .byte $00, $00, $00, $00
0088D5r 1  10 00 00 01  .byte $10, $00, $00, $01
0088D9r 1  11 00 00 11  .byte $11, $00, $00, $11
0088DDr 1               
0088DDr 1  00 00 00 00  .byte $00, $00, $00, $00  ;  bearing label   sprite addr 97
0088E1r 1  00 00 01 00  .byte $00, $00, $01, $00
0088E5r 1  00 00 10 00  .byte $00, $00, $10, $00
0088E9r 1  00 01 00 00  .byte $00, $01, $00, $00
0088EDr 1  00 10 00 00  .byte $00, $10, $00, $00
0088F1r 1  01 00 00 00  .byte $01, $00, $00, $00
0088F5r 1  11 11 11 00  .byte $11, $11, $11, $00
0088F9r 1  00 00 00 00  .byte $00, $00, $00, $00
0088FDr 1               
0088FDr 1               ; cell position label sprite addr 50-57
0088FDr 1  00 FF 00 FF  .byte $00,$FF,$00,$FF,$FF,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
008901r 1  FF 00 FF 00  
008905r 1  00 FF 00 00  
00891Dr 1  FF 00 00 FF  .byte $FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
008921r 1  00 00 FF 00  
008925r 1  00 FF 00 00  
00893Dr 1  FF 00 00 FF  .byte $FF,$00,$00,$FF,$FF,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
008941r 1  FF 00 FF 00  
008945r 1  00 FF 00 00  
00895Dr 1  FF 00 00 FF  .byte $FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
008961r 1  00 00 FF 00  
008965r 1  00 FF 00 00  
00897Dr 1  00 FF 00 FF  .byte $00,$FF,$00,$FF,$FF,$00,$FF,$FF,$00,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
008981r 1  FF 00 FF FF  
008985r 1  00 FF FF 00  
00899Dr 1               ;      01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF
00899Dr 1               ;     XH                               $XL                            ___  __  YH                              YL
00899Dr 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$00,$00,$10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00
0089A1r 1  00 00 00 00  
0089A5r 1  10 10 10 00  
0089BDr 1  01 00 11 10  .byte $01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00
0089C1r 1  00 00 00 00  
0089C5r 1  01 00 10 00  
0089DDr 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$11,$10,$00,$00,$00,$00,$00,$00,$01,$00,$10,$10,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00
0089E1r 1  00 00 00 00  
0089E5r 1  10 10 11 10  
0089FDr 1               
0089FDr 1               ; world position label 58-65
0089FDr 1               ;     XH                 $XL                  ___  ___  YH                  YL
0089FDr 1  FF 00 00 00  .byte $FF,$00,$00,$00,$FF,$00,$00,$FF,$00,$00,$FF,$FF,$00,$00,$FF,$00,$00,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
008A01r 1  FF 00 00 FF  
008A05r 1  00 00 FF FF  
008A1Dr 1  FF 00 00 00  .byte $FF,$00,$00,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$00,$FF,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
008A21r 1  FF 00 FF 00  
008A25r 1  FF 00 FF 00  
008A3Dr 1  FF 00 FF 00  .byte $FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$FF,$00,$00,$FF,$00,$00,$FF,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
008A41r 1  FF 00 FF 00  
008A45r 1  FF 00 FF FF  
008A5Dr 1  FF 00 FF 00  .byte $FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$00,$FF,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
008A61r 1  FF 00 FF 00  
008A65r 1  FF 00 FF 00  
008A7Dr 1  00 FF 00 FF  .byte $00,$FF,$00,$FF,$00,$00,$00,$FF,$00,$00,$FF,$00,$FF,$00,$FF,$FF,$00,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
008A81r 1  00 00 00 FF  
008A85r 1  00 00 FF 00  
008A9Dr 1               ;      01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF
008A9Dr 1               ;     XH                               $XL                            ___  __  YH                              YL
008A9Dr 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$00,$00,$10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00
008AA1r 1  00 00 00 00  
008AA5r 1  10 10 10 00  
008ABDr 1  01 00 11 10  .byte $01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00
008AC1r 1  00 00 00 00  
008AC5r 1  01 00 10 00  
008ADDr 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$11,$10,$00,$00,$00,$00,$00,$00,$01,$00,$10,$10,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00
008AE1r 1  00 00 00 00  
008AE5r 1  10 10 11 10  
008AFDr 1               
008AFDr 1               ; directional cursor reminder... 16x16 - 66-69
008AFDr 1  00 10 00 10  .byte $00, $10, $00, $10, $01, $11, $11, $00
008B01r 1  01 11 11 00  
008B05r 1  00 10 00 10  .byte $00, $10, $00, $10, $01, $00, $00, $00
008B09r 1  01 00 00 00  
008B0Dr 1  00 10 10 10  .byte $00, $10, $10, $10, $01, $11, $00, $00
008B11r 1  01 11 00 00  
008B15r 1  00 10 10 10  .byte $00, $10, $10, $10, $01, $00, $00, $00
008B19r 1  01 00 00 00  
008B1Dr 1  00 01 01 00  .byte $00, $01, $01, $00, $01, $11, $11, $00
008B21r 1  01 11 11 00  
008B25r 1  00 00 00 00  .byte $00, $00, $00, $00, $00, $00, $00, $00
008B29r 1  00 00 00 00  
008B2Dr 1  01 11 00 00  .byte $01, $11, $00, $00, $00, $01, $11, $00
008B31r 1  00 01 11 00  
008B35r 1  10 00 10 01  .byte $10, $00, $10, $01, $10, $01, $00, $01
008B39r 1  10 01 00 01  
008B3Dr 1  11 11 10 01  .byte $11, $11, $10, $01, $10, $01, $00, $01
008B41r 1  10 01 00 01  
008B45r 1  10 00 10 00  .byte $10, $00, $10, $00, $00, $01, $11, $10
008B49r 1  00 01 11 10  
008B4Dr 1  00 00 00 00  .byte $00, $00, $00, $00, $00, $00, $00, $00
008B51r 1  00 00 00 00  
008B55r 1  00 11 11 10  .byte $00, $11, $11, $10, $01, $00, $01, $00
008B59r 1  01 00 01 00  
008B5Dr 1  00 00 01 00  .byte $00, $00, $01, $00, $00, $10, $10, $00
008B61r 1  00 10 10 00  
008B65r 1  00 00 10 00  .byte $00, $00, $10, $00, $00, $01, $00, $00
008B69r 1  00 01 00 00  
008B6Dr 1  00 01 00 00  .byte $00, $01, $00, $00, $00, $10, $10, $00
008B71r 1  00 10 10 00  
008B75r 1  00 11 11 10  .byte $00, $11, $11, $10, $01, $00, $01, $00
008B79r 1  01 00 01 00  
008B7Cr 1               
