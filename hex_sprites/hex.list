ca65 V2.19 - Git 8e6c0c1
Main file   : hex.s
Current file: hex.s

000000r 1               ; 	080D
000000r 1  4C rr rr     jmp start ; 	3 bytes
000003r 1               ;	0810 	- 240 bytes available for stuff that doesn't need alignment
000003r 1  DE AD BE EF  .repeat 28
000007r 1  DE AD BE EF  
00000Br 1  DE AD BE EF  
000073r 1               	.byte $DE,$AD,$BE,$EF
000073r 1               .endrepeat
000073r 1               SCRATCH128:
000073r 1  DE AD BE EF  .repeat 32
000077r 1  DE AD BE EF  
00007Br 1  DE AD BE EF  
0000F3r 1               	.byte $DE,$AD,$BE,$EF
0000F3r 1               .endrepeat
0000F3r 1               
0000F3r 1               ACROSS_ROW_X_L: ; 0900  16 wide , 45* tilt ... this is added to go up row, sub for down row
0000F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0000F3r 1  00 FE FB F4  .byte
0000F7r 1  EC E1 D3 C3  
0000FBr 1  B1 9C 85 6B  
0001F3r 1               
0001F3r 1               ACROSS_ROW_X_H: ; 0A00
0001F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0001F3r 1  10 0F 0F 0F  .byte $10, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $E, $E, $E, $E, $E, $E, $D, $D, $D, $D, $D, $C, $C, $C, $C, $B, $B, $B, $B, $A, $A, $A, $9, $9, $9, $8, $8, $8, $7, $7, $7, $6, $6, $6, $5, $5, $5, $4, $4, $3, $3, $3, $2, $2, $1, $1, $1, $0, $0, $0, $FF, $FF, $FE, $FE, $FE, $FD, $FD, $FC, $FC, $FC, $FB, $FB, $FA, $FA, $FA, $F9, $F9, $F9, $F8, $F8, $F8, $F7, $F7, $F7, $F6, $F6, $F6, $F5, $F5, $F5, $F4, $F4, $F4, $F4, $F3, $F3, $F3, $F3, $F2, $F2, $F2, $F2, $F2, $F1, $F1, $F1, $F1, $F1, $F1, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F1, $F1, $F1, $F1, $F1, $F1, $F2, $F2, $F2, $F2, $F2, $F3, $F3, $F3, $F3, $F4, $F4, $F4, $F4, $F5, $F5, $F5, $F6, $F6, $F6, $F7, $F7, $F7, $F8, $F8, $F8, $F9, $F9, $F9, $FA, $FA, $FA, $FB, $FB, $FC, $FC, $FC, $FD, $FD, $FE, $FE, $FE, $FF, $FF, $00, $0, $0, $1, $1, $1, $2, $2, $3, $3, $3, $4, $4, $5, $5, $5, $6, $6, $6, $7, $7, $7, $8, $8, $8, $9, $9, $9, $A, $A, $A, $B, $B, $B, $B, $C, $C, $C, $C, $D, $D, $D, $D, $D, $E, $E, $E, $E, $E, $E, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F
0001F7r 1  0F 0F 0F 0F  
0001FBr 1  0F 0F 0F 0F  
0002F3r 1               
0002F3r 1               ACROSS_ROW_Y_L: ; 0B00
0002F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0002F3r 1  00 B8 71 2A  .byte $0,$B8,$71,$2A,$E4,$9D,$57,$10,$CA,$85,$40,$FB,$B7,$73,$30,$ED,$AB,$6A,$29,$E9,$AA,$6C,$2E,$F2,$B6,$7C,$42,$A,$D2,$9C,$66,$32,$0,$CE,$9D,$6E,$41,$14,$E9,$C0,$97,$71,$4B,$27,$5,$E4,$C5,$A8,$8C,$71,$58,$41,$2C,$18,$6,$F6,$E7,$DA,$CF,$C5,$BD,$B7,$B3,$B0,$AF,$B0,$B3,$B7,$BD,$C5,$CF,$DA,$E7,$F6,$6,$18,$2C,$41,$58,$71,$8C,$A8,$C5,$E4,$5,$27,$4B,$71,$97,$C0,$E9,$14,$41,$6E,$9D,$CE,$0,$32,$66,$9C,$D2,$A,$42,$7C,$B6,$F2,$2E,$6C,$AA,$E9,$29,$6A,$AB,$ED,$30,$73,$B7,$FB,$40,$85,$CA,$10,$57,$9D,$E4,$2A,$71,$B8,$0,$47,$8E,$D5,$1B,$62,$A8,$EF,$35,$7A,$BF,$4,$48,$8C,$CF,$12,$54,$95,$D6,$16,$55,$93,$D1,$D,$49,$83,$BD,$F5,$2D,$63,$99,$CD,$0,$31,$62,$91,$BE,$EB,$16,$3F,$68,$8E,$B4,$D8,$FA,$1B,$3A,$57,$73,$8E,$A7,$BE,$D3,$E7,$F9,$9,$18,$25,$30,$3A,$42,$48,$4C,$4F,$50,$4F,$4C,$48,$42,$3A,$30,$25,$18,$9,$F9,$E7,$D3,$BE,$A7,$8E,$73,$57,$3A,$1B,$FA,$D8,$B4,$8E,$68,$3F,$16,$EB,$BE,$91,$62,$31,$0,$CD,$99,$63,$2D,$F5,$BD,$83,$49,$D,$D1,$93,$55,$16,$D6,$95,$54,$12,$CF,$8C,$48,$4,$BF,$7A,$35,$EF,$A8,$62,$1B,$D5,$8E,$47
0002F7r 1  E4 9D 57 10  
0002FBr 1  CA 85 40 FB  
0003F3r 1               
0003F3r 1               ACROSS_ROW_Y_H: ; 0C00
0003F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0003F3r 1  00 FF FF FF  .byte $0,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F9,$F8,$F8,$F8,$F8,$F8,$F7,$F7,$F7,$F7,$F7,$F6,$F6,$F6,$F6,$F6,$F6,$F6,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F6,$F6,$F6,$F6,$F6,$F6,$F6,$F7,$F7,$F7,$F7,$F7,$F8,$F8,$F8,$F8,$F8,$F9,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$00,$0,$0,$0,$1,$1,$1,$1,$2,$2,$2,$3,$3,$3,$3,$4,$4,$4,$4,$5,$5,$5,$5,$6,$6,$6,$6,$6,$7,$7,$7,$7,$8,$8,$8,$8,$8,$8,$9,$9,$9,$9,$9,$9,$9,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$9,$9,$9,$9,$9,$9,$9,$8,$8,$8,$8,$8,$8,$7,$7,$7,$7,$6,$6,$6,$6,$6,$5,$5,$5,$5,$4,$4,$4,$4,$3,$3,$3,$3,$2,$2,$2,$1,$1,$1,$1,$0,$0,$0
0003F7r 1  FE FE FE FE  
0003FBr 1  FD FD FD FC  
0004F3r 1               
0004F3r 1               NEXT_ROW_X_L: ; 0D00 next row LEFT/up when added
0004F3r 1  00 A9 54 00  .byte
0004F7r 1  AE 5D 0D BF  
0004FBr 1  73 28 DF 98  
0005F3r 1               
0005F3r 1               NEXT_ROW_X_H: ; 0E00
0005F3r 1  F8 F7 F7 F7  .byte $F8, $F7, $F7, $F7, $F6, $F6, $F6, $F5, $F5, $F5, $F4, $F4, $F4, $F4, $F3, $F3, $F3, $F3, $F2, $F2, $F2, $F2, $F2, $F1, $F1, $F1, $F1, $F1, $F1, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F1, $F1, $F1, $F1, $F1, $F1, $F2, $F2, $F2, $F2, $F2, $F3, $F3, $F3, $F3, $F4, $F4, $F4, $F5, $F5, $F5, $F5, $F6, $F6, $F6, $F7, $F7, $F7, $F8, $F8, $F8, $F9, $F9, $F9, $FA, $FA, $FB, $FB, $FB, $FC, $FC, $FD, $FD, $FD, $FE, $FE, $FE, $FF, $FF, $0, $0, $0, $1, $1, $2, $2, $2, $3, $3, $4, $4, $4, $5, $5, $5, $6, $6, $6, $7, $7, $8, $8, $8, $8, $9, $9, $9, $A, $A, $A, $B, $B, $B, $B, $C, $C, $C, $C, $D, $D, $D, $D, $D, $E, $E, $E, $E, $E, $E, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $E, $E, $E, $E, $E, $E, $D, $D, $D, $D, $D, $C, $C, $C, $C, $B, $B, $B, $A, $A, $A, $A, $9, $9, $9, $8, $8, $8, $7, $7, $7, $6, $6, $6, $5, $5, $4, $4, $4, $3, $3, $2, $2, $2, $1, $1, $1, $0, $0, $FF, $FF, $FF, $FE, $FE, $FD, $FD, $FD, $FC, $FC, $FB, $FB, $FB, $FA, $FA, $FA, $F9, $F9, $F9, $F8, $F8
0005F7r 1  F6 F6 F6 F5  
0005FBr 1  F5 F5 F4 F4  
0006F3r 1               
0006F3r 1               NEXT_ROW_Y_L: ; 0F00
0006F3r 1  33 58 7D A5  .byte $33,$58,$7D,$A5,$CD,$F7,$23,$50,$7E,$AD,$DE,$10,$44,$78,$AE,$E4,$1C,$55,$8F,$CA,$6,$43,$81,$BF,$FE,$3F,$7F,$C1,$3,$46,$8A,$CD,$12,$57,$9C,$E2,$28,$6E,$B4,$FB,$42,$89,$D0,$17,$5E,$A5,$EC,$33,$7A,$C0,$6,$4C,$91,$D6,$1B,$5F,$A2,$E6,$28,$6A,$AB,$EB,$2B,$6A,$A8,$E5,$21,$5C,$97,$D0,$8,$3F,$75,$AA,$DE,$10,$41,$71,$A0,$CD,$F9,$24,$4D,$75,$9B,$C0,$E3,$5,$25,$44,$61,$7C,$96,$AE,$C5,$DA,$ED,$FF,$F,$1D,$29,$34,$3D,$44,$4A,$4D,$4F,$50,$4E,$4B,$46,$3F,$37,$2D,$21,$13,$4,$F3,$E0,$CC,$B6,$9E,$85,$6A,$4E,$30,$10,$EF,$CC,$A7,$82,$5A,$32,$8,$DC,$AF,$81,$52,$21,$EF,$BB,$87,$51,$1B,$E3,$AA,$70,$35,$F9,$BC,$7E,$40,$1,$C0,$80,$3E,$FC,$B9,$75,$32,$ED,$A8,$63,$1D,$D7,$91,$4B,$4,$BD,$76,$2F,$E8,$A1,$5A,$13,$CC,$85,$3F,$F9,$B3,$6E,$29,$E4,$A0,$5D,$19,$D7,$95,$54,$14,$D4,$95,$57,$1A,$DE,$A3,$68,$2F,$F7,$C0,$8A,$55,$21,$EF,$BE,$8E,$5F,$32,$6,$DB,$B2,$8A,$64,$3F,$1C,$FA,$DA,$BB,$9E,$83,$69,$51,$3A,$25,$12,$0,$F0,$E2,$D6,$CB,$C2,$BB,$B5,$B2,$B0,$AF,$B1,$B4,$B9,$C0,$C8,$D2,$DE,$EC,$FB,$C,$1F,$33,$49,$61,$7A,$95,$B1,$CF,$EF,$10
0006F7r 1  CD F7 23 50  
0006FBr 1  7E AD DE 10  
0007F3r 1               
0007F3r 1               NEXT_ROW_Y_H: ; 1000
0007F3r 1  F6 F6 F6 F6  .byte $F6,$F6,$F6,$F6,$F6,$F6,$F7,$F7,$F7,$F7,$F7,$F8,$F8,$F8,$F8,$F8,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$0,$0,$0,$0,$1,$1,$1,$2,$2,$2,$2,$3,$3,$3,$3,$4,$4,$4,$4,$5,$5,$5,$5,$6,$6,$6,$6,$7,$7,$7,$7,$7,$8,$8,$8,$8,$8,$8,$9,$9,$9,$9,$9,$9,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$9,$9,$9,$9,$9,$9,$9,$8,$8,$8,$8,$8,$7,$7,$7,$7,$7,$6,$6,$6,$6,$5,$5,$5,$5,$5,$4,$4,$4,$3,$3,$3,$3,$2,$2,$2,$2,$1,$1,$1,$1,$0,$0,$0,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F8,$F8,$F8,$F8,$F8,$F7,$F7,$F7,$F7,$F7,$F7,$F6,$F6,$F6,$F6,$F6,$F6,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F6
0007F7r 1  F6 F6 F7 F7  
0007FBr 1  F7 F7 F7 F8  
0008F3r 1               
0008F3r 1               WORLD_TO_CELL_XH: ; 1100
0008F3r 1  00 00 01 02  .byte 0,0,1,2,3,4,5,6,6,7,8,9,10,11,12,12,13,14,15,16,17,18,19,19,20,21,22,23,24,25,25,26,27,28,29,30,31,32,32,33,34,35,36,37,38,38,39,40,41,42,43,44,45,45,46,47,48,49,50,51,51,52,53,54,55,56,57,58,58,59,60,61,62,63,64,64,65,66,67,68,69,70,71,71,72,73,74,75,76,77,77,78,79,80,81,82,83,84,84,85,86,87,88,89,90,90,91,92,93,94,95,96,96,97,98,99,100,101,102,103,103,104,105,106,107,108,109,109,110,111,112,113,114,115,116,116,117,118,119,120,121,122,122,123,124,125,126,127,128,129,129,130,131,132,133,134,135,135,136,137,138,139,140,141,142,142,143,144,145,146,147,148,148,149,150,151,152,153,154,155,155,156,157,158,159,160,161,161,162,163,164,165,166,167,168,168,169,170,171,172,173,174,174,175,176,177,178,179,180,180,181,182,183,184,185,186,187,187,188,189,190,191,192,193,193,194,195,196,197,198,199,200,200,201,202,203,204,205,206,206,207,208,209,210,211,212,213,213,214,215,216,217,218,219,219,220
0008F7r 1  03 04 05 06  
0008FBr 1  06 07 08 09  
0009F3r 1               WORLD_TO_CELL_XL: ; 1200
0009F3r 1  00 DD BB 99  .byte 0,221,187,153,118,84,50,15,237,203,169,134,100,66,31,253,219,184,150,116,82,47,13,235,200,166,132,97,63,29,251,216,182,148,113,79,45,10,232,198,164,129,95,61,26,248,214,180,145,111,77,42,8,230,195,161,127,93,58,24,246,211,177,143,108,74,40,6,227,193,159,124,90,56,21,243,209,175,140,106,72,37,3,225,191,156,122,88,53,19,241,206,172,138,104,69,35,1,222,188,154,119,85,51,17,238,204,170,135,101,67,32,254,220,186,151,117,83,48,14,236,202,167,133,99,64,30,252,217,183,149,115,80,46,12,233,199,165,130,96,62,28,249,215,181,146,112,78,43,9,231,197,162,128,94,59,25,247,212,178,144,110,75,41,7,228,194,160,126,91,57,23,244,210,176,141,107,73,39,4,226,192,157,123,89,54,20,242,208,173,139,105,70,36,2,223,189,155,121,86,52,18,239,205,171,137,102,68,34,255,221,187,152,118,84,50,15,237,203,168,134,100,65,31,253,219,184,150,116,81,47,13,234,200,166,132,97,63,29,250,216,182,148,113,79,45,10,232,198,163,129,95,61,26,248,214
0009F7r 1  76 54 32 0F  
0009FBr 1  ED CB A9 86  
000AF3r 1               CELL_TO_WORLD_XH: ; 1300 ; 128 bytes
000AF3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,8,9,10,11,12,13,15,16,17,18,19,20,21,23,24,25,26,27,28,30,31,32,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,50,51,53,54,55,56,57,58,60,61,62,63,64,65,66,68,69,70,71,72,73,75,76,77,78,79,80,81,83,84,85,86,87,88,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,112,113,114,115,116,117,118,120,121,122,123,124,125,127,128,129,130,131,132,133,135,136,137,138,139,140,142,143,144,145,146
000AF7r 1  04 05 06 08  
000AFBr 1  09 0A 0B 0C  
000B73r 1               CELL_TO_WORLD_XL: ; 1380 ; 128 bytes
000B73r 1  00 27 4F 76  .byte 0,39,79,118,158,198,237,21,60,100,140,179,219,2,42,82,121,161,200,240,24,63,103,142,182,222,5,45,84,124,164,203,243,26,66,106,145,185,224,8,48,87,127,166,206,246,29,69,108,148,188,227,11,50,90,130,169,209,248,32,72,111,151,191,230,14,53,93,133,172,212,251,35,75,114,154,193,233,17,56,96,135,175,215,254,38,77,117,157,196,236,19,59,99,138,178,217,1,41,80,120,159,199,239,22,62,101,141,181,220,4,43,83,123,162,202,241,25,65,104,144,184,223,7,46,86,126,165
000B77r 1  9E C6 ED 15  
000B7Br 1  3C 64 8C B3  
000BF3r 1               
000BF3r 1               CELL_LOW_TO_WORLD_XH: ; 1400
000BF3r 1  00 00 00 00  .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
000BF7r 1  00 00 00 00  
000BFBr 1  00 00 00 00  
000CF3r 1               CELL_LOW_TO_WORLD_XL: ; 1500
000CF3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,8,9,10,11,12,13,15,16,17,18,19,20,21,23,24,25,26,27,28,30,31,32,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,50,51,53,54,55,56,57,58,60,61,62,63,64,65,66,68,69,70,71,72,73,75,76,77,78,79,80,81,83,84,85,86,87,88,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,112,113,114,115,116,117,118,120,121,122,123,124,125,127,128,129,130,131,132,133,135,136,137,138,139,140,142,143,144,145,146,147,148,150,151,152,153,154,155,157,158,159,160,161,162,163,165,166,167,168,169,170,172,173,174,175,176,177,178,180,181,182,183,184,185,187,188,189,190,191,192,193,195,196,197,198,199,200,202,203,204,205,206,207,209,210,211,212,213,214,215,217,218,219,220,221,222,224,225,226,227,228,229,230,232,233,234,235,236,237,239,240,241,242,243,244,245,247,248,249,250,251,252,254,255,0,1,2,3,4,6,7,8,9,10,11,13,14,15,16,17,18,19,21,22,23,24,25,26,28,29,30,31,32,33,34,36,37,38
000CF7r 1  04 05 06 08  
000CFBr 1  09 0A 0B 0C  
000DF3r 1               
000DF3r 1               SPRITE_NUM_HIGH_NIBBLE: ; 1600
000DF3r 1  00 00 00 00  .res 16, 0
000DF7r 1  00 00 00 00  
000DFBr 1  00 00 00 00  
000E03r 1  01 01 01 01  .res 16, 1
000E07r 1  01 01 01 01  
000E0Br 1  01 01 01 01  
000E13r 1  02 02 02 02  .res 16, 2
000E17r 1  02 02 02 02  
000E1Br 1  02 02 02 02  
000E23r 1  03 03 03 03  .res 16, 3
000E27r 1  03 03 03 03  
000E2Br 1  03 03 03 03  
000E33r 1  04 04 04 04  .res 16, 4
000E37r 1  04 04 04 04  
000E3Br 1  04 04 04 04  
000E43r 1  05 05 05 05  .res 16, 5
000E47r 1  05 05 05 05  
000E4Br 1  05 05 05 05  
000E53r 1  06 06 06 06  .res 16, 6
000E57r 1  06 06 06 06  
000E5Br 1  06 06 06 06  
000E63r 1  07 07 07 07  .res 16, 7
000E67r 1  07 07 07 07  
000E6Br 1  07 07 07 07  
000E73r 1  08 08 08 08  .res 16, 8
000E77r 1  08 08 08 08  
000E7Br 1  08 08 08 08  
000E83r 1  09 09 09 09  .res 16, 9
000E87r 1  09 09 09 09  
000E8Br 1  09 09 09 09  
000E93r 1  0A 0A 0A 0A  .res 16, 10
000E97r 1  0A 0A 0A 0A  
000E9Br 1  0A 0A 0A 0A  
000EA3r 1  0B 0B 0B 0B  .res 16, 11
000EA7r 1  0B 0B 0B 0B  
000EABr 1  0B 0B 0B 0B  
000EB3r 1  0C 0C 0C 0C  .res 16, 12
000EB7r 1  0C 0C 0C 0C  
000EBBr 1  0C 0C 0C 0C  
000EC3r 1  0D 0D 0D 0D  .res 16, 13
000EC7r 1  0D 0D 0D 0D  
000ECBr 1  0D 0D 0D 0D  
000ED3r 1  0E 0E 0E 0E  .res 16, 14
000ED7r 1  0E 0E 0E 0E  
000EDBr 1  0E 0E 0E 0E  
000EE3r 1  0F 0F 0F 0F  .res 16, 15
000EE7r 1  0F 0F 0F 0F  
000EEBr 1  0F 0F 0F 0F  
000EF3r 1               
000EF3r 1               SPRITE_NUM_LOW_NIBBLE: ; 1700
000EF3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000EF7r 1  04 05 06 07  
000EFBr 1  08 09 0A 0B  
000F03r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000F07r 1  04 05 06 07  
000F0Br 1  08 09 0A 0B  
000F13r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000F17r 1  04 05 06 07  
000F1Br 1  08 09 0A 0B  
000F23r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000F27r 1  04 05 06 07  
000F2Br 1  08 09 0A 0B  
000F33r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000F37r 1  04 05 06 07  
000F3Br 1  08 09 0A 0B  
000F43r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000F47r 1  04 05 06 07  
000F4Br 1  08 09 0A 0B  
000F53r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000F57r 1  04 05 06 07  
000F5Br 1  08 09 0A 0B  
000F63r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000F67r 1  04 05 06 07  
000F6Br 1  08 09 0A 0B  
000F73r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000F77r 1  04 05 06 07  
000F7Br 1  08 09 0A 0B  
000F83r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000F87r 1  04 05 06 07  
000F8Br 1  08 09 0A 0B  
000F93r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000F97r 1  04 05 06 07  
000F9Br 1  08 09 0A 0B  
000FA3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000FA7r 1  04 05 06 07  
000FABr 1  08 09 0A 0B  
000FB3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000FB7r 1  04 05 06 07  
000FBBr 1  08 09 0A 0B  
000FC3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000FC7r 1  04 05 06 07  
000FCBr 1  08 09 0A 0B  
000FD3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000FD7r 1  04 05 06 07  
000FDBr 1  08 09 0A 0B  
000FE3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000FE7r 1  04 05 06 07  
000FEBr 1  08 09 0A 0B  
000FF3r 1               
000FF3r 1               LOW_NIBBLE_TO_HEX: ; 1800
000FF3r 1  30 31 32 33  .repeat 16
000FF7r 1  34 35 36 37  
000FFBr 1  38 39 01 02  
0010F3r 1               ;      0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
0010F3r 1               .byte  48, 49, 50, 51, 52, 53, 54, 55, 56, 57,  1,  2,  3,  4,  5,  6
0010F3r 1               .endrepeat
0010F3r 1               
0010F3r 1               HIGH_NIBBLE_TO_HEX: ; 1900
0010F3r 1  30 30 30 30  .res 16,48
0010F7r 1  30 30 30 30  
0010FBr 1  30 30 30 30  
001103r 1  31 31 31 31  .res 16,49
001107r 1  31 31 31 31  
00110Br 1  31 31 31 31  
001113r 1  32 32 32 32  .res 16,50
001117r 1  32 32 32 32  
00111Br 1  32 32 32 32  
001123r 1  33 33 33 33  .res 16,51
001127r 1  33 33 33 33  
00112Br 1  33 33 33 33  
001133r 1  34 34 34 34  .res 16,52
001137r 1  34 34 34 34  
00113Br 1  34 34 34 34  
001143r 1  35 35 35 35  .res 16,53
001147r 1  35 35 35 35  
00114Br 1  35 35 35 35  
001153r 1  36 36 36 36  .res 16,54
001157r 1  36 36 36 36  
00115Br 1  36 36 36 36  
001163r 1  37 37 37 37  .res 16,55
001167r 1  37 37 37 37  
00116Br 1  37 37 37 37  
001173r 1  38 38 38 38  .res 16,56
001177r 1  38 38 38 38  
00117Br 1  38 38 38 38  
001183r 1  39 39 39 39  .res 16,57
001187r 1  39 39 39 39  
00118Br 1  39 39 39 39  
001193r 1  01 01 01 01  .res 16,1
001197r 1  01 01 01 01  
00119Br 1  01 01 01 01  
0011A3r 1  02 02 02 02  .res 16,2
0011A7r 1  02 02 02 02  
0011ABr 1  02 02 02 02  
0011B3r 1  03 03 03 03  .res 16,3
0011B7r 1  03 03 03 03  
0011BBr 1  03 03 03 03  
0011C3r 1  04 04 04 04  .res 16,4
0011C7r 1  04 04 04 04  
0011CBr 1  04 04 04 04  
0011D3r 1  05 05 05 05  .res 16,5
0011D7r 1  05 05 05 05  
0011DBr 1  05 05 05 05  
0011E3r 1  06 06 06 06  .res 16,6
0011E7r 1  06 06 06 06  
0011EBr 1  06 06 06 06  
0011F3r 1               CONVERT_HEIGHTS_PIXELS: ; 1A00
0011F3r 1  00 00 01 01  .byte 0,0,1,1,2,3,3,4,4,5,6,6,7,7,8,9,9,10,11,11,12,12,13,14,14,15,15,16,17,17,18,18,19,20,20,21,22,22,23,23,24,25,25,26,26,27,28,28,29,30,30,31,31,32,33,33,34,34,35,36,36,37,37,38,39,39,40,41,41,42,42,43,44,44,45,45,46,47,47,48,48,49,50,50,51,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52;,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52
0011F7r 1  02 03 03 04  
0011FBr 1  04 05 06 06  
001273r 1  00 00 00 00  .res 128,0
001277r 1  00 00 00 00  
00127Br 1  00 00 00 00  
0012F3r 1               CONVERT_HEIGHTS_PIXELS_L: ; 1B00
0012F3r 1               ;.res 256,0
0012F3r 1  00 9C 39 D6  .byte 0,156,57,214,115,15,172,73,230,130,31,188,89,245,146,47,204,105,5,162,63,220,120,21,178,79,235,136,37,194,95,251,152,53,210,110,11,168,69,225,126,27,184,84,241,142,43,200,100,1,158,59,215,116,17,174,74,231,132,33,190,90,247,148,49,205,106,7,164,64,221,122,23,180,80,237,138,39,195,96,253,154,54,211,112,0,169,70,227,128,29,185,86,243,144,44,201,102,3,159,60,217,118,19,175,76,233,134,34,191,92,249,149,50,207,108,9,165,66,223,124,24,181,82,239,139,40,197,98,254,155,56,213,114,14,171,72,229,129,30,187,88,244,145,46,203,104,4,161,62,219,119,20,177,78,234,135,36,193,94,250,151,52,209,109,10,167,68,224,125,26,183,83,240,141,42,199,99,0,157,58,214,115,16,173,73,230,131,32,189,89,246,147,48,204,105,6,163,63,220,121,22,179,79,236,137,38,194,95,252,153,53,210,111,12,168,69,226,127,28,184,85,242,143,43,200,101,2,158,59,216,117,18,174,75,232,133,33,190,91,248,148,49,206,107,7,164,65,222,123,23,180,81,238,138,39
0012F7r 1  73 0F AC 49  
0012FBr 1  E6 82 1F BC  
0013F3r 1               MOVE_Y_H: ; 1C00
0013F3r 1  00 00 00 00  .byte
0013F7r 1  00 00 00 00  
0013FBr 1  00 00 00 00  
0014F3r 1               MOVE_Y_L: ; 1D00
0014F3r 1  08 07 07 07  .byte $8,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$6,$6,$6,$6,$6,$6,$6,$6,$6,$5,$5,$5,$5,$5,$5,$5,$4,$4,$4,$4,$4,$4,$3,$3,$3,$3,$3,$3,$2,$2,$2,$2,$2,$1,$1,$1,$1,$1,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF,$FF,$0,$0,$0,$0,$0,$0,$1,$1,$1,$1,$1,$2,$2,$2,$2,$2,$3,$3,$3,$3,$3,$3,$4,$4,$4,$4,$4,$4,$5,$5,$5,$5,$5,$5,$5,$6,$6,$6,$6,$6,$6,$6,$6,$6,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7
0014F7r 1  07 07 07 07  
0014FBr 1  07 07 07 07  
0015F3r 1               MOVE_X_H: ; 1E00
0015F3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
0015F7r 1  00 00 00 00  
0015FBr 1  00 00 00 00  
0016F3r 1               MOVE_X_L: ; 1F00
0016F3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$1,$1,$1,$1,$1,$1,$2,$2,$2,$2,$2,$2,$2,$3,$3,$3,$3,$3,$3,$3,$4,$4,$4,$4,$4,$4,$4,$5,$5,$5,$5,$5,$5,$5,$5,$5,$5,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$5,$5,$5,$5,$5,$5,$5,$5,$5,$5,$4,$4,$4,$4,$4,$4,$4,$3,$3,$3,$3,$3,$3,$3,$2,$2,$2,$2,$2,$2,$2,$1,$1,$1,$1,$1,$1,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FB,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF,$FF
0016F7r 1  00 00 01 01  
0016FBr 1  01 01 01 01  
0017F3r 1               
0017F3r 1               
0017F3r 1               TUB_WORLD: ; 32*64 = 2K ... is 2000 to 2800-1
0017F3r 1               .include "tub_world_hieghts_01.inc"
0017F3r 2               
0017F3r 2               
0017F3r 2               
0017F3r 2               
0017F3r 2               
0017F3r 2               
0017F3r 2               ; 0 to 128 will be water level. >128 = distance along row to water (neg) , 128 = no water this row.
0017F3r 2               ; rows are stored within 64 byte rows
0017F3r 2               ; 	  0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63
0017F3r 2  FF FF FF FF  .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 30
0017F7r 2  FF FF FF FF  
0017FBr 2  FF FF FF FF  
001833r 2  FF FF FF FF  .byte   $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF ; 29
001837r 2  FF FF FF FF  
00183Br 2  FF FF FF FF  
001873r 2  FF FF FF FF  .byte     $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF ; 28
001877r 2  FF FF FF FF  
00187Br 2  FF FF FF FF  
0018B3r 2  FF FF FF FF  .byte       $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF ; 27
0018B7r 2  FF FF FF FF  
0018BBr 2  FF FF FF FF  
0018F3r 2  FF FF FF FF  .byte         $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF ; 26
0018F7r 2  FF FF FF FF  
0018FBr 2  FF FF FF FF  
001933r 2  FF FF FF FF  .byte           $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 25
001937r 2  FF FF FF FF  
00193Br 2  FF FF FF FF  
001973r 2  FF FF FF FF  .byte             $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 24
001977r 2  FF FF FF FF  
00197Br 2  FF FF FF FF  
0019B3r 2  FF FF FF FF  .byte               $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 23
0019B7r 2  FF FF FF FF  
0019BBr 2  FF FF FF 80  
0019F3r 2  FF FF FF FF  .byte                 $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 22
0019F7r 2  FF FF FF FF  
0019FBr 2  FF FF 80 00  
001A33r 2  FF FF FF FF  .byte                   $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF; 21
001A37r 2  FF FF FF FF  
001A3Br 2  FF 80 00 00  
001A73r 2  FF FF FF FF  .byte                     $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF ; 20
001A77r 2  FF FF FF FF  
001A7Br 2  FF 80 00 00  
001AB3r 2  FF FF FF FF  .byte                       $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF ; 19
001AB7r 2  FF FF FF FF  
001ABBr 2  80 00 00 00  
001AF3r 2  FF FF FF FF  .byte                         $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 18
001AF7r 2  FF FF FF FF  
001AFBr 2  80 00 00 00  
001B33r 2  FF FF FF FF  .byte                           $FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 17
001B37r 2  FF FF FF 80  
001B3Br 2  00 00 00 00  
001B73r 2  FF FF FF FF  .byte                             $FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF ; 16
001B77r 2  FF FF FF 80  
001B7Br 2  00 00 00 00  
001BB3r 2  FF FF FF FF  .byte                               $FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF ; 15
001BB7r 2  FF FF 80 00  
001BBBr 2  00 00 00 00  
001BF3r 2  FF FF FF FF  .byte                                 $FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 14
001BF7r 2  FF FF 80 00  
001BFBr 2  00 00 00 00  
001C33r 2  FF FF FF FF  .byte                                   $FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 13
001C37r 2  FF 80 00 00  
001C3Br 2  00 00 00 00  
001C73r 2  FF FF FF FF  .byte                                     $FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 12
001C77r 2  FF 80 00 00  
001C7Br 2  00 00 00 00  
001CB3r 2  FF FF FF FF  .byte                                       $FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 11
001CB7r 2  80 00 00 00  
001CBBr 2  00 00 00 00  
001CF3r 2  FF FF FF FF  .byte                                         $FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 10
001CF7r 2  80 00 00 00  
001CFBr 2  00 00 00 00  
001D33r 2  FF FF FF 80  .byte                                           $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 9
001D37r 2  00 00 00 00  
001D3Br 2  00 00 00 00  
001D73r 2  FF FF FF 80  .byte                                             $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 8
001D77r 2  00 00 00 00  
001D7Br 2  00 00 00 00  
001DB3r 2  FF FF FF 80  .byte                                               $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 7
001DB7r 2  00 00 00 00  
001DBBr 2  00 00 00 00  
001DF3r 2  FF FF FF 80  .byte                                                 $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 6
001DF7r 2  00 00 00 00  
001DFBr 2  00 00 00 00  
001E33r 2  FF FF FF 80  .byte                                                   $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 5
001E37r 2  00 00 00 00  
001E3Br 2  00 00 00 00  
001E73r 2  FF FF FF 80  .byte                                                     $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 4
001E77r 2  00 00 00 00  
001E7Br 2  00 00 00 00  
001EB3r 2  FF FF FF 80  .byte                                                       $FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 3
001EB7r 2  80 00 00 00  
001EBBr 2  00 00 00 00  
001EF3r 2  FF FF FF FF  .byte                                                         $FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 2
001EF7r 2  80 80 00 00  
001EFBr 2  00 00 00 00  
001F33r 2  FF FF FF FF  .byte                                                           $FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 01
001F37r 2  FF 80 80 00  
001F3Br 2  00 00 00 00  
001F73r 2  FF FF FF FF  .byte                                                             $FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 00 tub wall north
001F77r 2  FF FF 80 80  
001F7Br 2  80 80 80 80  
001FB3r 2  FF FF FF FF  .res 64,$FF
001FB7r 2  FF FF FF FF  
001FBBr 2  FF FF FF FF  
001FF3r 2               
001FF3r 2               
001FF3r 2               
001FF3r 1               
001FF3r 1               WATER_CALC_SCRATCH: ; 2800 to 3000-1
001FF3r 1               .include "tub_world_hieghts_01.inc"
001FF3r 2               
001FF3r 2               
001FF3r 2               
001FF3r 2               
001FF3r 2               
001FF3r 2               
001FF3r 2               ; 0 to 128 will be water level. >128 = distance along row to water (neg) , 128 = no water this row.
001FF3r 2               ; rows are stored within 64 byte rows
001FF3r 2               ; 	  0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63
001FF3r 2  FF FF FF FF  .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 30
001FF7r 2  FF FF FF FF  
001FFBr 2  FF FF FF FF  
002033r 2  FF FF FF FF  .byte   $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF ; 29
002037r 2  FF FF FF FF  
00203Br 2  FF FF FF FF  
002073r 2  FF FF FF FF  .byte     $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF ; 28
002077r 2  FF FF FF FF  
00207Br 2  FF FF FF FF  
0020B3r 2  FF FF FF FF  .byte       $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF ; 27
0020B7r 2  FF FF FF FF  
0020BBr 2  FF FF FF FF  
0020F3r 2  FF FF FF FF  .byte         $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF ; 26
0020F7r 2  FF FF FF FF  
0020FBr 2  FF FF FF FF  
002133r 2  FF FF FF FF  .byte           $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 25
002137r 2  FF FF FF FF  
00213Br 2  FF FF FF FF  
002173r 2  FF FF FF FF  .byte             $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 24
002177r 2  FF FF FF FF  
00217Br 2  FF FF FF FF  
0021B3r 2  FF FF FF FF  .byte               $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 23
0021B7r 2  FF FF FF FF  
0021BBr 2  FF FF FF 80  
0021F3r 2  FF FF FF FF  .byte                 $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 22
0021F7r 2  FF FF FF FF  
0021FBr 2  FF FF 80 00  
002233r 2  FF FF FF FF  .byte                   $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF; 21
002237r 2  FF FF FF FF  
00223Br 2  FF 80 00 00  
002273r 2  FF FF FF FF  .byte                     $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF ; 20
002277r 2  FF FF FF FF  
00227Br 2  FF 80 00 00  
0022B3r 2  FF FF FF FF  .byte                       $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF ; 19
0022B7r 2  FF FF FF FF  
0022BBr 2  80 00 00 00  
0022F3r 2  FF FF FF FF  .byte                         $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 18
0022F7r 2  FF FF FF FF  
0022FBr 2  80 00 00 00  
002333r 2  FF FF FF FF  .byte                           $FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 17
002337r 2  FF FF FF 80  
00233Br 2  00 00 00 00  
002373r 2  FF FF FF FF  .byte                             $FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF ; 16
002377r 2  FF FF FF 80  
00237Br 2  00 00 00 00  
0023B3r 2  FF FF FF FF  .byte                               $FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF ; 15
0023B7r 2  FF FF 80 00  
0023BBr 2  00 00 00 00  
0023F3r 2  FF FF FF FF  .byte                                 $FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 14
0023F7r 2  FF FF 80 00  
0023FBr 2  00 00 00 00  
002433r 2  FF FF FF FF  .byte                                   $FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 13
002437r 2  FF 80 00 00  
00243Br 2  00 00 00 00  
002473r 2  FF FF FF FF  .byte                                     $FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 12
002477r 2  FF 80 00 00  
00247Br 2  00 00 00 00  
0024B3r 2  FF FF FF FF  .byte                                       $FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 11
0024B7r 2  80 00 00 00  
0024BBr 2  00 00 00 00  
0024F3r 2  FF FF FF FF  .byte                                         $FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 10
0024F7r 2  80 00 00 00  
0024FBr 2  00 00 00 00  
002533r 2  FF FF FF 80  .byte                                           $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 9
002537r 2  00 00 00 00  
00253Br 2  00 00 00 00  
002573r 2  FF FF FF 80  .byte                                             $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 8
002577r 2  00 00 00 00  
00257Br 2  00 00 00 00  
0025B3r 2  FF FF FF 80  .byte                                               $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 7
0025B7r 2  00 00 00 00  
0025BBr 2  00 00 00 00  
0025F3r 2  FF FF FF 80  .byte                                                 $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 6
0025F7r 2  00 00 00 00  
0025FBr 2  00 00 00 00  
002633r 2  FF FF FF 80  .byte                                                   $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 5
002637r 2  00 00 00 00  
00263Br 2  00 00 00 00  
002673r 2  FF FF FF 80  .byte                                                     $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 4
002677r 2  00 00 00 00  
00267Br 2  00 00 00 00  
0026B3r 2  FF FF FF 80  .byte                                                       $FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 3
0026B7r 2  80 00 00 00  
0026BBr 2  00 00 00 00  
0026F3r 2  FF FF FF FF  .byte                                                         $FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 2
0026F7r 2  80 80 00 00  
0026FBr 2  00 00 00 00  
002733r 2  FF FF FF FF  .byte                                                           $FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 01
002737r 2  FF 80 80 00  
00273Br 2  00 00 00 00  
002773r 2  FF FF FF FF  .byte                                                             $FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 00 tub wall north
002777r 2  FF FF 80 80  
00277Br 2  80 80 80 80  
0027B3r 2  FF FF FF FF  .res 64,$FF
0027B7r 2  FF FF FF FF  
0027BBr 2  FF FF FF FF  
0027F3r 2               
0027F3r 2               
0027F3r 2               
0027F3r 1               
0027F3r 1               
0027F3r 1               ;3000
0027F3r 1               
0027F3r 1               
0027F3r 1               
0027F3r 1               
0027F3r 1               
0027F3r 1               
0027F3r 1               
0027F3r 1               SCREEN_Y_TO_Z: ; 3100 this is shifted to be within range so that 192 =0 and -16 is 255
0027F3r 1  EB EA E8 E7  .byte 235,234,232,231,230,229,227,226,225,224,223,221,220,219,218,216,215,214,213,211,210,209,208,207,205,204,203,202,200,199,198,197,195,194,193,192,191,189,188,187,186,184,183,182,181,179,178,177,176,175,173,172,171,170,168,167,166,165,163,162,161,160,159,157,156,155,154,152,151,150,149,147,146,145,144,143,141,140,139,138,136,135,134,133,131,130,129,128,127,125,124,123,122,120,119,118,117,115,114,113,112,111,109,108,107,106,104,103,102,101,99,98,97,96,95,93,92,91,90,88,87,86,85,83,82,81,80,79,77,76,75,74,72,71,70,69,67,66,65,64,63,61,60,59,58,56,55,54,53,51,50,49,48,47,45,44,43,42,40,39,38,37,35,34,33,32,31,29,28,27,26,24,23,22,21,19,18,17,16,15,13,12,11,10,8,7,6,5,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,253,252,251,250,248,247,246,245,243,242,241,240,239,237,236
0027F7r 1  E6 E5 E3 E2  
0027FBr 1  E1 E0 DF DD  
0028F3r 1               SUBCELL_X_COS_L: ; 3200
0028F3r 1  00 FF FF FF  .byte $0,$FF,$FF,$FF,$FE,$FE,$FD,$FC,$FB,$F9,$F8,$F6,$F4,$F3,$F1,$EE,$EC,$EA,$E7,$E4,$E1,$DE,$DB,$D8,$D4,$D1,$CD,$C9,$C5,$C1,$BD,$B9,$B5,$B0,$AB,$A7,$A2,$9D,$98,$93,$8E,$88,$83,$7E,$78,$73,$6D,$67,$61,$5C,$56,$50,$4A,$44,$3E,$38,$31,$2B,$25,$1F,$19,$12,$C,$6,$0,$F9,$F3,$ED,$E6,$E0,$DA,$D4,$CE,$C7,$C1,$BB,$B5,$AF,$A9,$A3,$9E,$98,$92,$8C,$87,$81,$7C,$77,$71,$6C,$67,$62,$5D,$58,$54,$4F,$4A,$46,$42,$3E,$3A,$36,$32,$2E,$2B,$27,$24,$21,$1E,$1B,$18,$15,$13,$11,$E,$C,$B,$9,$7,$6,$4,$3,$2,$1,$1,$0,$0,$0,$0,$0,$0,$0,$1,$1,$2,$3,$4,$6,$7,$9,$B,$C,$E,$11,$13,$15,$18,$1B,$1E,$21,$24,$27,$2B,$2E,$32,$36,$3A,$3E,$42,$46,$4A,$4F,$54,$58,$5D,$62,$67,$6C,$71,$77,$7C,$81,$87,$8C,$92,$98,$9E,$A3,$A9,$AF,$B5,$BB,$C1,$C7,$CE,$D4,$DA,$E0,$E6,$ED,$F3,$F9,$0,$6,$C,$12,$19,$1F,$25,$2B,$31,$38,$3E,$44,$4A,$50,$56,$5C,$61,$67,$6D,$73,$78,$7E,$83,$88,$8E,$93,$98,$9D,$A2,$A7,$AB,$B0,$B5,$B9,$BD,$C1,$C5,$C9,$CD,$D1,$D4,$D8,$DB,$DE,$E1,$E4,$E7,$EA,$EC,$EE,$F1,$F3,$F4,$F6,$F8,$F9,$FB,$FC,$FD,$FE,$FE,$FF,$FF,$FF
0028F7r 1  FE FE FD FC  
0028FBr 1  FB F9 F8 F6  
0029F3r 1               SUBCELL_X_COS_H: ; 3300
0029F3r 1  01 00 00 00  .byte $1,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0029F7r 1  00 00 00 00  
0029FBr 1  00 00 00 00  
002AF3r 1               SUBCELL_X_SIN_H: ; 3400
002AF3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
002AF7r 1  00 00 00 00  
002AFBr 1  00 00 00 00  
002BF3r 1               SUBCELL_X_SIN_L: ; 3500
002BF3r 1  00 05 0A 10  .byte $0,$5,$A,$10,$15,$1B,$20,$25,$2B,$30,$35,$3B,$40,$45,$4A,$4F,$54,$59,$5E,$63,$68,$6D,$71,$76,$7B,$7F,$84,$88,$8C,$90,$94,$98,$9C,$A0,$A4,$A7,$AB,$AE,$B2,$B5,$B8,$BB,$BE,$C0,$C3,$C6,$C8,$CA,$CC,$CE,$D0,$D2,$D4,$D5,$D7,$D8,$D9,$DA,$DB,$DC,$DC,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DC,$DC,$DB,$DA,$D9,$D8,$D7,$D5,$D4,$D2,$D0,$CE,$CC,$CA,$C8,$C6,$C3,$C0,$BE,$BB,$B8,$B5,$B2,$AE,$AB,$A7,$A4,$A0,$9C,$98,$94,$90,$8C,$88,$84,$7F,$7B,$76,$71,$6D,$68,$63,$5E,$59,$54,$4F,$4A,$45,$40,$3B,$35,$30,$2B,$25,$20,$1B,$15,$10,$A,$5,$0,$FA,$F5,$EF,$EA,$E4,$DF,$DA,$D4,$CF,$CA,$C4,$BF,$BA,$B5,$B0,$AB,$A6,$A1,$9C,$97,$92,$8E,$89,$84,$80,$7B,$77,$73,$6F,$6B,$67,$63,$5F,$5B,$58,$54,$51,$4D,$4A,$47,$44,$41,$3F,$3C,$39,$37,$35,$33,$31,$2F,$2D,$2B,$2A,$28,$27,$26,$25,$24,$23,$23,$22,$22,$22,$22,$22,$22,$22,$23,$23,$24,$25,$26,$27,$28,$2A,$2B,$2D,$2F,$31,$33,$35,$37,$39,$3C,$3F,$41,$44,$47,$4A,$4D,$51,$54,$58,$5B,$5F,$63,$67,$6B,$6F,$73,$77,$7B,$80,$84,$89,$8E,$92,$97,$9C,$A1,$A6,$AB,$B0,$B5,$BA,$BF,$C4,$CA,$CF,$D4,$DA,$DF,$E4,$EA,$EF,$F5,$FA
002BF7r 1  15 1B 20 25  
002BFBr 1  2B 30 35 3B  
002CF3r 1               SUBCELL_Y_COS_H: ; 3600
002CF3r 1  00 00 00 00  .byte
002CF7r 1  00 00 00 00  
002CFBr 1  00 00 00 00  
002DF3r 1               SUBCELL_Y_COS_L: ; 3700
002DF3r 1  9C 9C 9C 9C  .byte $9C,$9C,$9C,$9C,$9C,$9B,$9B,$9A,$99,$98,$98,$97,$96,$94,$93,$92,$90,$8F,$8D,$8C,$8A,$88,$86,$84,$82,$80,$7D,$7B,$79,$76,$74,$71,$6E,$6C,$69,$66,$63,$60,$5D,$5A,$57,$53,$50,$4D,$49,$46,$43,$3F,$3B,$38,$34,$31,$2D,$29,$26,$22,$1E,$1A,$17,$13,$F,$B,$7,$3,$0,$FC,$F8,$F4,$F0,$EC,$E8,$E5,$E1,$DD,$D9,$D6,$D2,$CE,$CB,$C7,$C4,$C0,$BC,$B9,$B6,$B2,$AF,$AC,$A8,$A5,$A2,$9F,$9C,$99,$96,$93,$91,$8E,$8B,$89,$86,$84,$82,$7F,$7D,$7B,$79,$77,$75,$73,$72,$70,$6F,$6D,$6C,$6B,$69,$68,$67,$67,$66,$65,$64,$64,$63,$63,$63,$63,$63,$63,$63,$63,$63,$64,$64,$65,$66,$67,$67,$68,$69,$6B,$6C,$6D,$6F,$70,$72,$73,$75,$77,$79,$7B,$7D,$7F,$82,$84,$86,$89,$8B,$8E,$91,$93,$96,$99,$9C,$9F,$A2,$A5,$A8,$AC,$AF,$B2,$B6,$B9,$BC,$C0,$C4,$C7,$CB,$CE,$D2,$D6,$D9,$DD,$E1,$E5,$E8,$EC,$F0,$F4,$F8,$FC,$0,$3,$7,$B,$F,$13,$17,$1A,$1E,$22,$26,$29,$2D,$31,$34,$38,$3B,$3F,$43,$46,$49,$4D,$50,$53,$57,$5A,$5D,$60,$63,$66,$69,$6C,$6E,$71,$74,$76,$79,$7B,$7D,$80,$82,$84,$86,$88,$8A,$8C,$8D,$8F,$90,$92,$93,$94,$96,$97,$98,$98,$99,$9A,$9B,$9B,$9C,$9C,$9C,$9C
002DF7r 1  9C 9B 9B 9A  
002DFBr 1  99 98 98 97  
002EF3r 1               SUBCELL_Y_SIN_H: ; 3800
002EF3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
002EF7r 1  00 00 00 00  
002EFBr 1  00 00 00 00  
002FF3r 1               SUBCELL_Y_SIN_L: ; 3900
002FF3r 1  00 04 08 0D  .byte $0,$4,$8,$D,$11,$16,$1A,$1E,$23,$27,$2B,$30,$34,$38,$3C,$41,$45,$49,$4D,$51,$55,$59,$5D,$60,$64,$68,$6B,$6F,$72,$76,$79,$7C,$7F,$83,$86,$89,$8B,$8E,$91,$93,$96,$98,$9B,$9D,$9F,$A1,$A3,$A5,$A7,$A8,$AA,$AB,$AD,$AE,$AF,$B0,$B1,$B2,$B3,$B3,$B4,$B4,$B4,$B4,$B5,$B4,$B4,$B4,$B4,$B3,$B3,$B2,$B1,$B0,$AF,$AE,$AD,$AB,$AA,$A8,$A7,$A5,$A3,$A1,$9F,$9D,$9B,$98,$96,$93,$91,$8E,$8B,$89,$86,$83,$80,$7C,$79,$76,$72,$6F,$6B,$68,$64,$60,$5D,$59,$55,$51,$4D,$49,$45,$41,$3C,$38,$34,$30,$2B,$27,$23,$1E,$1A,$16,$11,$D,$8,$4,$0,$FB,$F7,$F2,$EE,$E9,$E5,$E1,$DC,$D8,$D4,$CF,$CB,$C7,$C3,$BE,$BA,$B6,$B2,$AE,$AA,$A6,$A2,$9F,$9B,$97,$94,$90,$8D,$89,$86,$83,$80,$7C,$79,$76,$74,$71,$6E,$6C,$69,$67,$64,$62,$60,$5E,$5C,$5A,$58,$57,$55,$54,$52,$51,$50,$4F,$4E,$4D,$4C,$4C,$4B,$4B,$4B,$4B,$4A,$4B,$4B,$4B,$4B,$4C,$4C,$4D,$4E,$4F,$50,$51,$52,$54,$55,$57,$58,$5A,$5C,$5E,$60,$62,$64,$67,$69,$6C,$6E,$71,$74,$76,$79,$7C,$80,$83,$86,$89,$8D,$90,$94,$97,$9B,$9F,$A2,$A6,$AA,$AE,$B2,$B6,$BA,$BE,$C3,$C7,$CB,$CF,$D4,$D8,$DC,$E1,$E5,$E9,$EE,$F2,$F7,$FB
002FF7r 1  11 16 1A 1E  
002FFBr 1  23 27 2B 30  
0030F3r 1               
0030F3r 1               
0030F3r 1               
0030F3r 1               WORLD_SPRITE_CENTER_XH: ; 3A00 128 bytes
0030F3r 1  64 64 64 64  .byte
0030F7r 1  64 64 64 64  
0030FBr 1  64 64 64 64  
003173r 1               WORLD_SPRITE_CENTER_XL: ; 3A80 128 bytes
003173r 1  00 0D 1B 29  .byte $0,$D,$1B,$29,$36,$43,$51,$5E,$6B,$78,$85,$92,$9F,$AB,$B8,$C4,$D1,$DD,$E9,$F6,$2,$E,$A,$FE,$F2,$E5,$D9,$CD,$C0,$B4,$A7,$9A,$8E,$81,$74,$67,$5A,$4C,$3F,$32,$24,$16,$9,$4,$12,$20,$2D,$3B,$48,$55,$62,$6F,$7C,$89,$96,$A3,$B0,$BC,$C9,$D5,$E1,$EE,$FA,$6,$12,$13,$FA,$EE,$E1,$D5,$C9,$BC,$B0,$A3,$96,$89,$7C,$6F,$62,$55,$48,$3B,$2D,$20,$12,$4,$9,$16,$24,$32,$3F,$4C,$5A,$67,$74,$81,$8E,$9A,$A7,$B4,$C0,$CD,$D9,$E5,$F2,$FE,$A,$E,$2,$F6,$E9,$DD,$D1,$C4,$B8,$AB,$9F,$92,$85,$78,$6B,$5E,$51,$43,$36,$29,$1B,$D
003177r 1  36 43 51 5E  
00317Br 1  6B 78 85 92  
0031F3r 1               WORLD_SPRITE_CENTER_YH: ; 3B00 128 bytes
0031F3r 1  4C 4C 4C 4C  .byte $4C,$4C,$4C,$4C,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4C,$4C,$4C,$4C,$4C,$4C,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4C,$4C,$4C,$4C,$4C,$4C,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4C,$4C,$4C
0031F7r 1  4B 4B 4B 4B  
0031FBr 1  4B 4B 4B 4B  
003273r 1               WORLD_SPRITE_CENTER_YL: ; 3B80 128 bytes
003273r 1  19 11 08 00  .byte $19,$11,$8,$0,$F7,$EE,$E6,$DD,$D4,$CB,$C2,$B9,$B0,$A7,$9D,$94,$8B,$81,$78,$6E,$64,$5B,$5E,$68,$71,$7B,$84,$8E,$97,$A0,$AA,$B3,$BC,$C5,$CE,$D7,$E0,$E8,$F1,$FA,$3,$B,$14,$17,$E,$5,$FD,$F4,$EB,$E3,$DA,$D1,$C8,$BF,$B6,$AD,$A3,$9A,$91,$87,$7E,$74,$6B,$61,$57,$57,$6B,$74,$7E,$87,$91,$9A,$A3,$AD,$B6,$BF,$C8,$D1,$DA,$E3,$EB,$F4,$FD,$5,$E,$17,$14,$B,$3,$FA,$F1,$E8,$E0,$D7,$CE,$C5,$BC,$B3,$AA,$A0,$97,$8E,$84,$7B,$71,$68,$5E,$5B,$64,$6E,$78,$81,$8B,$94,$9D,$A7,$B0,$B9,$C2,$CB,$D4,$DD,$E6,$EE,$F7,$0,$8,$11
003277r 1  F7 EE E6 DD  
00327Br 1  D4 CB C2 B9  
0032F3r 1               
0032F3r 1               WORLD_SPRITE_NUM_lookies: ; 3C00 128 bytes
0032F3r 1               ;      0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
0032F3r 1  00 00 00 00  .byte   0,  0,  0,  0, 32, 32, 32, 32, 32, 32, 64, 64, 64, 64, 64, 64
0032F7r 1  20 20 20 20  
0032FBr 1  20 20 40 40  
003303r 1  40 40 60 60  .byte  64, 64, 96, 96,160,160,160, 96, 96, 96, 64, 64, 64, 64, 64, 64
003307r 1  A0 A0 A0 60  
00330Br 1  60 60 40 40  
003313r 1  40 40 20 20  .byte  64, 64, 32, 32, 32, 32, 32, 32,  0,  0,  0,  0,  0,  0, 32, 32
003317r 1  20 20 20 20  
00331Br 1  00 00 00 00  
003323r 1  20 20 20 20  .byte  32, 32, 32, 32, 32, 64, 64, 64, 64, 64, 64, 64, 96, 96, 96,160
003327r 1  20 40 40 40  
00332Br 1  40 40 40 40  
003333r 1  A0 A0 60 60  .byte 160,160, 96, 96, 96, 64, 64, 64, 64, 64, 64, 64, 32, 32, 32, 32
003337r 1  60 40 40 40  
00333Br 1  40 40 40 40  
003343r 1  20 20 20 00  .byte  32, 32, 32,  0,  0,  0,  0,  0,  0, 32, 32, 32, 32, 32, 32, 64
003347r 1  00 00 00 00  
00334Br 1  00 20 20 20  
003353r 1  40 40 40 40  .byte  64, 64, 64, 64, 64, 64, 64, 96, 96, 96,160,160,160, 96, 96, 64
003357r 1  40 40 40 60  
00335Br 1  60 60 A0 A0  
003363r 1  40 40 40 40  .byte  64, 64, 64, 64, 64, 64, 64, 32, 32, 32, 32, 32, 32,  0,  0,  0
003367r 1  40 40 40 20  
00336Br 1  20 20 20 20  
003373r 1               WORLD_WALL_SPRITE_NUM_lookies: ; 3C80
003373r 1  80 80 80 80  .byte 128,128,128,128,128,128,128,128,128,128,192,192,192,192,192,192
003377r 1  80 80 80 80  
00337Br 1  80 80 C0 C0  
003383r 1  C0 C0 C0 C0  .byte 192,192,192,192,224,224,224,192,192,192,192,192,192,192,192,192
003387r 1  E0 E0 E0 C0  
00338Br 1  C0 C0 C0 C0  
003393r 1  C0 C0 80 80  .byte 192,192,128,128,128,128,128,128,128,128,128,128,128,128,128,128
003397r 1  80 80 80 80  
00339Br 1  80 80 80 80  
0033A3r 1  80 80 80 80  .byte 128,128,128,128,128,192,192,192,192,192,192,192,192,192,192,224
0033A7r 1  80 C0 C0 C0  
0033ABr 1  C0 C0 C0 C0  
0033B3r 1  E0 E0 C0 C0  .byte 224,224,192,192,192,192,192,192,192,192,192,192,128,128,128,128
0033B7r 1  C0 C0 C0 C0  
0033BBr 1  C0 C0 C0 C0  
0033C3r 1  80 80 80 80  .byte 128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,192
0033C7r 1  80 80 80 80  
0033CBr 1  80 80 80 80  
0033D3r 1  C0 C0 C0 C0  .byte 192,192,192,192,192,192,192,192,192,192,224,224,224,192,192,192
0033D7r 1  C0 C0 C0 C0  
0033DBr 1  C0 C0 E0 E0  
0033E3r 1  C0 C0 C0 C0  .byte 192,192,192,192,192,192,192,128,128,128,128,128,128,128,128,128
0033E7r 1  C0 C0 C0 80  
0033EBr 1  80 80 80 80  
0033F3r 1               
0033F3r 1               SPRITE_ADDRESS_LOW_HIGH: ; 3D00
0033F3r 1  00 00 00 00  .byte 0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31
0033F7r 1  00 00 00 00  
0033FBr 1  01 01 01 01  
0034F3r 1               
0034F3r 1               SPRITE_ADDRESS_LOW_LOW: ; 3E00
0034F3r 1  00 20 40 60  .byte 0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224
0034F7r 1  80 A0 C0 E0  
0034FBr 1  00 20 40 60  
0035F3r 1               
0035F3r 1               NIBBLE_SWAPPER: ; 3F00
0035F3r 1               ;      0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
0035F3r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
0035F7r 1  40 50 60 70  
0035FBr 1  80 90 A0 B0  
003603r 1  01 11 21 31  .byte $01,$11,$21,$31,$41,$51,$61,$71,$81,$91,$A1,$B1,$C1,$D1,$E1,$F1
003607r 1  41 51 61 71  
00360Br 1  81 91 A1 B1  
003613r 1  02 12 22 32  .byte $02,$12,$22,$32,$42,$52,$62,$72,$82,$92,$A2,$B2,$C2,$D2,$E2,$F2
003617r 1  42 52 62 72  
00361Br 1  82 92 A2 B2  
003623r 1  03 13 23 33  .byte $03,$13,$23,$33,$43,$53,$63,$73,$83,$93,$A3,$B3,$C3,$D3,$E3,$F3
003627r 1  43 53 63 73  
00362Br 1  83 93 A3 B3  
003633r 1  04 14 24 34  .byte $04,$14,$24,$34,$44,$54,$64,$74,$84,$94,$A4,$B4,$C4,$D4,$E4,$F4
003637r 1  44 54 64 74  
00363Br 1  84 94 A4 B4  
003643r 1  05 15 25 35  .byte $05,$15,$25,$35,$45,$55,$65,$75,$85,$95,$A5,$B5,$C5,$D5,$E5,$F5
003647r 1  45 55 65 75  
00364Br 1  85 95 A5 B5  
003653r 1  06 16 26 36  .byte $06,$16,$26,$36,$46,$56,$66,$76,$86,$96,$A6,$B6,$C6,$D6,$E6,$F6
003657r 1  46 56 66 76  
00365Br 1  86 96 A6 B6  
003663r 1  07 17 27 37  .byte $07,$17,$27,$37,$47,$57,$67,$77,$87,$97,$A7,$B7,$C7,$D7,$E7,$F7
003667r 1  47 57 67 77  
00366Br 1  87 97 A7 B7  
003673r 1  08 18 28 38  .byte $08,$18,$28,$38,$48,$58,$68,$78,$88,$98,$A8,$B8,$C8,$D8,$E8,$F8
003677r 1  48 58 68 78  
00367Br 1  88 98 A8 B8  
003683r 1  09 19 29 39  .byte $09,$19,$29,$39,$49,$59,$69,$79,$89,$99,$A9,$B9,$C9,$D9,$E9,$F9
003687r 1  49 59 69 79  
00368Br 1  89 99 A9 B9  
003693r 1  0A 1A 2A 3A  .byte $0A,$1A,$2A,$3A,$4A,$5A,$6A,$7A,$8A,$9A,$AA,$BA,$CA,$DA,$EA,$FA
003697r 1  4A 5A 6A 7A  
00369Br 1  8A 9A AA BA  
0036A3r 1  0B 1B 2B 3B  .byte $0B,$1B,$2B,$3B,$4B,$5B,$6B,$7B,$8B,$9B,$AB,$BB,$CB,$DB,$EB,$FB
0036A7r 1  4B 5B 6B 7B  
0036ABr 1  8B 9B AB BB  
0036B3r 1  0C 1C 2C 3C  .byte $0C,$1C,$2C,$3C,$4C,$5C,$6C,$7C,$8C,$9C,$AC,$BC,$CC,$DC,$EC,$FC
0036B7r 1  4C 5C 6C 7C  
0036BBr 1  8C 9C AC BC  
0036C3r 1  0D 1D 2D 3D  .byte $0D,$1D,$2D,$3D,$4D,$5D,$6D,$7D,$8D,$9D,$AD,$BD,$CD,$DD,$ED,$FD
0036C7r 1  4D 5D 6D 7D  
0036CBr 1  8D 9D AD BD  
0036D3r 1  0E 1E 2E 3E  .byte $0E,$1E,$2E,$3E,$4E,$5E,$6E,$7E,$8E,$9E,$AE,$BE,$CE,$DE,$EE,$FE
0036D7r 1  4E 5E 6E 7E  
0036DBr 1  8E 9E AE BE  
0036E3r 1  0F 1F 2F 3F  .byte $0F,$1F,$2F,$3F,$4F,$5F,$6F,$7F,$8F,$9F,$AF,$BF,$CF,$DF,$EF,$FF
0036E7r 1  4F 5F 6F 7F  
0036EBr 1  8F 9F AF BF  
0036F3r 1               
0036F3r 1               LOW_NIBBLE_HIGH: ; 4000
0036F3r 1               ;      0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
0036F3r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
0036F7r 1  40 50 60 70  
0036FBr 1  80 90 A0 B0  
003703r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003707r 1  40 50 60 70  
00370Br 1  80 90 A0 B0  
003713r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003717r 1  40 50 60 70  
00371Br 1  80 90 A0 B0  
003723r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003727r 1  40 50 60 70  
00372Br 1  80 90 A0 B0  
003733r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003737r 1  40 50 60 70  
00373Br 1  80 90 A0 B0  
003743r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003747r 1  40 50 60 70  
00374Br 1  80 90 A0 B0  
003753r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003757r 1  40 50 60 70  
00375Br 1  80 90 A0 B0  
003763r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003767r 1  40 50 60 70  
00376Br 1  80 90 A0 B0  
003773r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003777r 1  40 50 60 70  
00377Br 1  80 90 A0 B0  
003783r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003787r 1  40 50 60 70  
00378Br 1  80 90 A0 B0  
003793r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003797r 1  40 50 60 70  
00379Br 1  80 90 A0 B0  
0037A3r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
0037A7r 1  40 50 60 70  
0037ABr 1  80 90 A0 B0  
0037B3r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
0037B7r 1  40 50 60 70  
0037BBr 1  80 90 A0 B0  
0037C3r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
0037C7r 1  40 50 60 70  
0037CBr 1  80 90 A0 B0  
0037D3r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
0037D7r 1  40 50 60 70  
0037DBr 1  80 90 A0 B0  
0037E3r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
0037E7r 1  40 50 60 70  
0037EBr 1  80 90 A0 B0  
0037F3r 1               
0037F3r 1               
0037F3r 1               ; 4100
0037F3r 1               
0037F3r 1               OBJECT_LIST_Z_START_POINTERS: ; 3100
0037F3r 1  00 00 00 00  .res 256,0
0037F7r 1  00 00 00 00  
0037FBr 1  00 00 00 00  
0038F3r 1               OBJECT_LIST_BYTE0_ADDRLOW: ; 1A00 addr low
0038F3r 1  00 00 00 00  .res 256,0
0038F7r 1  00 00 00 00  
0038FBr 1  00 00 00 00  
0039F3r 1               OBJECT_LIST_BYTE1_MODE: ; 1B00 mode/addr bank
0039F3r 1  00 00 00 00  .res 256,0
0039F7r 1  00 00 00 00  
0039FBr 1  00 00 00 00  
003AF3r 1               OBJECT_LIST_BYTE2_X: ; 1C00 X position onscreen ( assumed positive for now)
003AF3r 1  00 00 00 00  .res 256,0
003AF7r 1  00 00 00 00  
003AFBr 1  00 00 00 00  
003BF3r 1               OBJECT_LIST_BYTE3_Y: ; 1D00 y position onscreen
003BF3r 1  00 00 00 00  .res 256,0
003BF7r 1  00 00 00 00  
003BFBr 1  00 00 00 00  
003CF3r 1               OBJECT_LIST_BYTE4_ZFLIPS: ; 1E00 collision / z / flips
003CF3r 1  00 00 00 00  .res 256,0
003CF7r 1  00 00 00 00  
003CFBr 1  00 00 00 00  
003DF3r 1               OBJECT_LIST_BYTE5_SIZE: ; 1F00 size / pal offset
003DF3r 1  00 00 00 00  .res 256,0
003DF7r 1  00 00 00 00  
003DFBr 1  00 00 00 00  
003EF3r 1               OBJECT_LIST_BYTE6_NEXT: ; 2000 NEXT
003EF3r 1  00 00 00 00  .res 256,0
003EF7r 1  00 00 00 00  
003EFBr 1  00 00 00 00  
003FF3r 1               
003FF3r 1               BUFFER_A_OFFSETS_HIGH: ; 128 bytes
003FF3r 1  18 18 19 19  .byte 24,24,25,25,26,27,27,28,29,29,30,30,31,32,32,33,34,34,35,35,36,37,37,38,39,39,40,40,41,42,42,43,44,44,45,45,46,47,47,48,49,49,50,50,51,52,52,53,54,54,55,55,56,57,57,58,59,59,60,60,61,62,62,63,64,64,65,65,66,67,67,68,69,69,70,70,71,72,72,73,74,74,75,75,76,77,77,78,79,79,80,80,81,82,82,83,84,84,85,85,86,87,87,88,89,89,90,90,91,92,92,93,94,94,95,95,96,97,97,98,99,99,100,100,101,102,102,103
003FF7r 1  1A 1B 1B 1C  
003FFBr 1  1D 1D 1E 1E  
004073r 1               
004073r 1               BITMAP_OFFSETS_LOW: ; 128 bytes
004073r 1  00 A0 40 E0  .byte 0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96
004077r 1  80 20 C0 60  
00407Br 1  00 A0 40 E0  
0040F3r 1               
0040F3r 1               BUFFER_B_OFFSETS_HIGH: ; 3080    128 bytes
0040F3r 1  80 80 81 81  .byte 128,128,129,129,130,131,131,132,133,133,134,134,135,136,136,137,138,138,139,139,140,141,141,142,143,143,144,144,145,146,146,147,148,148,149,149,150,151,151,152,153,153,154,154,155,156,156,157,158,158,159,159,160,161,161,162,163,163,164,164,165,166,166,167,168,168,169,169,170,171,171,172,173,173,174,174,175,176,176,177,178,178,179,179,180,181,181,182,183,183,184,184,185,186,186,187,188,188,189,189,190,191,191,192,193,193,194,194,195,196,196,197,198,198,199,199,200,201,201,202,203,203,204,204,205,206,206,207
0040F7r 1  82 83 83 84  
0040FBr 1  85 85 86 86  
004173r 1               
004173r 1               
004173r 1               
004173r 1               
004173r 1               
004173r 1               ;constants
004173r 1               ;--------------------------------
004173r 1               
004173r 1               ; RAM Interrupt Vectors
004173r 1               IRQVec            = $0314
004173r 1               
004173r 1               ; VERA
004173r 1               VERA_addr_low     = $9F20
004173r 1               VERA_addr_high    = $9F21
004173r 1               VERA_addr_bank    = $9F22
004173r 1               VERA_data0        = $9F23
004173r 1               VERA_data1        = $9F24
004173r 1               VERA_ctrl         = $9F25
004173r 1               VERA_ien          = $9F26
004173r 1               VERA_isr          = $9F27
004173r 1               VERA_dc_video     = $9F29 ; DCSEL = 0
004173r 1               FX_CTRL           = $9F29 ; DCSEL = 2
004173r 1               FX_MULT           = $9F2C ; DCSEL = 2
004173r 1               FX_CACHE_L        = $9F29 ; DCSEL = 6
004173r 1               FX_CACHE_M        = $9F2A
004173r 1               FX_CACHE_H        = $9F2B
004173r 1               FX_CACHE_U        = $9F2C
004173r 1               ;   Current Field | Sprites Enable | Layer1 Enable  |Layer0 Enable
004173r 1               ; NTSC/RGB: 240P  | NTSC: Chroma Disable / RGB: HV Sync Output Mode
004173r 1               
004173r 1               VERA_dc_hscale    = $9F2A
004173r 1               VERA_dc_vscale    = $9F2B
004173r 1               
004173r 1               VERA_L0_config    = $9F2D
004173r 1               ;   7       6     5   4       3       2             1   0
004173r 1               ;   Map Height | Map Width | T256C | Bitmap Mode | Color Depth
004173r 1               ;   0 - 32                  0 - 16    0 tiled       0   1bpp mono
004173r 1               ;   1 - 64                  1 - 256   1 enabled     1   2bpp 4 color
004173r 1               ;   2 - 128                                         2   4bpp 16 color
004173r 1               ;   3 - 256                                         3   8bpp 256 color
004173r 1               ;   bitmap mode - tilebase points to bitmap data, mapbase not used
004173r 1               ;   tile width = 0 is 320 pixels / tile width=1 is 640 pixels.. so could do 4bpp x 320?
004173r 1               ;   The palette offset (in 'H-Scroll (11:8)') modifies the color indexes of the bitmap in the same way as in the tile modes.
004173r 1               
004173r 1               VERA_L0_mapbase   = $9F2E
004173r 1               VERA_L0_tilebase  = $9F2F ;   Tile Base Address (16:11) | Tile Height 0-8/1-16 | Tile Width 0-8/1-16
004173r 1               VERA_L0_HSCROLL_L = $9F30 ;  H-Scroll (7:0)
004173r 1               VERA_L0_HSCROLL_H = $9F31 ;  - H-Scroll (11:8)
004173r 1               VERA_L0_VSCROLL_L = $9F32 ;  V-Scroll (7:0)
004173r 1               VERA_L0_VSCROLL_H = $9F33 ;  - V-Scroll (11:8)
004173r 1               
004173r 1               VERA_L1_config    = $9F34
004173r 1               VERA_L1_mapbase   = $9F35
004173r 1               VERA_L1_tilebase  = $9F36
004173r 1               VERA_L1_HSCROLL_L = $9F37 ;  H-Scroll (7:0)
004173r 1               VERA_L1_HSCROLL_H = $9F38 ;  - H-Scroll (11:8)
004173r 1               VERA_L1_VSCROLL_L = $9F39 ;  V-Scroll (7:0)
004173r 1               VERA_L1_VSCROLL_H = $9F3A ;  - V-Scroll (11:8)
004173r 1               
004173r 1               VSYNC_BIT         = $01
004173r 1               
004173r 1               ; VRAM Addresses
004173r 1               ;   Address range Description
004173r 1               ;   $00000 - $1F9BF Video RAM   - 129,424 bytes -> 126K is 129,024 (1F800)
004173r 1               ;   $1F9C0 - $1F9FF PSG registers
004173r 1               ;   $1FA00 - $1FBFF Palette
004173r 1               ;   $1FC00 - $1FFFF Sprite attributes
004173r 1               VRAM_SPRITES =      $00000  ; putting sprite data at start of VRAM for now.. may move later?
004173r 1               VRAM_BITMAP_LAYERA =$11800  ; setting this to 68K ; was starts at 70K ... so up to ~70K for sprites.. not too shabby..
004173r 1               VRAM_BITMAP_LAYERB =$18000  ; ~25K needs to start at 2K boundary... 121.5-25= 96k
004173r 1               VRAM_TEXT_SCREEN =  $1E400  ; 121.5K    256 x 21 => 32 x 24 would take 1.5K tiles is min.. 64*32 = 2K 8 config..
004173r 1               VRAM_SPRITE_BUF =   $1EC00  ; 123K - sprite attribute buffer for swapping data in ..
004173r 1               VRAM_CHARSET =      $1F000  ;  $1:F000-$1:F7FF Charset loaded by kernal here .. is at 124K ..
004173r 1               ; only can go to 126K ...
004173r 1               VRAM_palette      = $1FA00      ;
004173r 1               VRAM_sprite_attributes = $1FC00
004173r 1               
004173r 1               SPRITES_ONLY_VGA = $41
004173r 1               SPRITES_LAYER1_LAYER0_VGA = $71
004173r 1               
004173r 1               
004173r 1               ; Kernal
004173r 1               CHROUT            = $FFD2
004173r 1               GETIN             = $FFE4
004173r 1               CINT              = $FF81
004173r 1               
004173r 1               
004173r 1               ; PETSCII Codes
004173r 1               WHITE             = $05
004173r 1               RETURN            = $0D
004173r 1               SPACE             = $20
004173r 1               ZERO_CHAR         = $30
004173r 1               ONE_CHAR          = $31
004173r 1               TWO_CHAR          = $32
004173r 1               THREE_CHAR        = $33
004173r 1               FOUR_CHAR         = $34
004173r 1               FIVE_CHAR         = $35
004173r 1               SIX_CHAR          = $36
004173r 1               SEVEN_CHAR        = $37
004173r 1               EIGHT_CHAR        = $38
004173r 1               NINE_CHAR         = $39
004173r 1               
004173r 1               A_CHAR            = $41
004173r 1               C_CHAR            = $43
004173r 1               D_CHAR            = $44
004173r 1               E_CHAR            = $45
004173r 1               I_CHAR            = $49
004173r 1               J_CHAR            = $4A
004173r 1               K_CHAR            = $4B
004173r 1               L_CHAR            = $4C
004173r 1               O_CHAR            = $4F
004173r 1               T_CHAR            = $54
004173r 1               W_CHAR            = $57
004173r 1               X_CHAR            = $58
004173r 1               Y_CHAR            = $59
004173r 1               Z_CHAR            = $5A
004173r 1               
004173r 1               CLR               = $93
004173r 1               
004173r 1               ; 	$0800-$9EFF	BASIC program/variables; available to the user
004173r 1               WORLD_DATA = $6000 	;	so is %100 [Y 5 bits ] : [ab] 0 [X - 6 bits
004173r 1               SCREEN_buffer = $8000
004173r 1               
004173r 1               ; zero page layout $0022-$007F is available to user
004173r 1               ZP_PTR = $22
004173r 1               SCRATCH_PTR = $7E
004173r 1               
004173r 1               SPRITE_SIZE_ORA = $D0 ; $D0 for 16x64, $50 for 16x16
004173r 1               
004173r 1               diff_sprite_to_transparent = 15
004173r 1               
004173r 1               SCREEN_OUT_RIGHT  = 160 ; right of middle is 116, +48 = 164
004173r 1               SCREEN_OUT_LEFT8    = 256-8
004173r 1               SCREEN_OUT_LEFT16   = 256-16  ; left of middle is 100, -48=52-16=36
004173r 1               SCREEN_OUT_LEFT32   = 256-32  ; left of middle is 100, -48=52-16=36
004173r 1               SCREEN_OUT_LEFT64   = 256-64  ; left of middle is 100, -48=52-16=36
004173r 1               SCREEN_OUT_TOP     = 240
004173r 1               SCREEN_OUT_BOTTOM  = 120
004173r 1               
004173r 1               ; global data ; 2E00
004173r 1  00 00        default_irq_vector:  .addr 0 ; 4-5
004175r 1               ; current cell values in neighborhood...
004175r 1  FF           CELL_VAL_UPLEFT:  .byte 255
004176r 1  FF           CELL_VAL_UPRIGHT: .byte 255
004177r 1  FF           CELL_VAL_LEFT:    .byte 255
004178r 1  FF           CELL_VAL_SELF:    .byte 255
004179r 1  FF           CELL_VAL_RIGHT:   .byte 255
00417Ar 1  FF           CELL_VAL_DOWNLEFT: .byte 255
00417Br 1  FF           CELL_VAL_DOWNRIGHT: .byte 255
00417Cr 1               
00417Cr 1  DE AD BE EF  GLOBAL_DATA:         .byte $DE,$AD,$BE,$EF ; 0-1
004180r 1               ;line 0
004180r 1  00 00        MASTER_CLOCK:        .addr 0 ; 6-7
004182r 1  00           .byte 0
004183r 1  00           STATUS:              .byte 0
004184r 1               ;line 1
004184r 1  00           .byte 0
004185r 1  01           VSYNC_counter:       .byte 1 ; 8
004186r 1  00           STALL_COUNTERH:      .byte 0
004187r 1  00           STALL_COUNTER:       .byte 0
004188r 1               ;line 2
004188r 1  00           .byte 0
004189r 1  00           LAST_VSYNC_COUNTER:  .byte 0
00418Ar 1  00           LAST_STALLCOUNTERH:  .byte 0
00418Br 1  00           LAST_STALLCOUNTER:   .byte 0
00418Cr 1               ; line 3
00418Cr 1  FF           VERA_LOCK:           .byte 255 ; 9 value written to screen is value at time DEBUG_WRITE
00418Dr 1  50           IRQ_VERA_LOCK:       .byte 80 ; value of VERA_LOCK when reached the Interrupt
00418Er 1  40           CURRENT_BITMAP_BUFFER: .byte 64 ;
00418Fr 1               ;        A        B     CURRENT BITMAP BUFFER
00418Fr 1               ;   0   display  dirty    A is being displayed, B to be drawn on
00418Fr 1               ;  64   display  ready    B  is ready for swap
00418Fr 1               ; 128   dirty    display  B is being displayed, A to be drawn on
00418Fr 1               ; 192   ready    display  A  is ready for swap
00418Fr 1  00           LAST_BITMAP_BUFFER:    .byte 0 ;
004190r 1               
004190r 1               ; line 4
004190r 1  01           camera_facing: 		 .byte 1 ; 7
004191r 1  00           .byte 0
004192r 1  00           CAMERA_CENTER_XH:    .byte 0 ; 13
004193r 1  00           CAMERA_CENTER_YH:    .byte 0 ; 15
004194r 1               ; line 5
004194r 1  00           camera_cell_x: 		 .byte 0 ; c
004195r 1  00           camera_cell_xl:       .byte 0 ; d
004196r 1  00           camera_cell_y: 		 .byte 0 ; e
004197r 1  00           camera_cell_yl:       .byte 0 ; f
004198r 1               ; line 6
004198r 1  2C           camera_world_pos_XH:    .byte 44 ; 8
004199r 1  30           camera_world_pos_XL:       .byte 48 ; 9
00419Ar 1  0F           camera_world_pos_YH:        .byte 15 ; A
00419Br 1  80           camera_world_pos_YL:       .byte 128  ; B
00419Cr 1               ; line 7
00419Cr 1  00           DO_WATER:   .byte 0 ;
00419Dr 1  00           DO_FAUCET:  .byte 0 ;
00419Er 1  00           CALC_WATER: .byte 0 ;
00419Fr 1               ; line 8
00419Fr 1  80           NUM_AVAIL_SPRITES:   .byte 128 ; A
0041A0r 1  00           NUM_RESERVED_SPRITES:    .byte  0;(1+NUM_RESERVED_SPRITES-MASTER_CLOCK) << 1 ; F
0041A1r 1  FF           SPRITE_OBJECT_ENABLE: .byte 255 ;255 ;
0041A2r 1               
0041A2r 1  00           CAMERA_CENTER_XL:    .byte 0 ; 12
0041A3r 1  00           CAMERA_CENTER_YL:    .byte 0 ; 14
0041A4r 1  00           CAMERA_CENTER_TOP_PX: .byte 0 ; 16
0041A5r 1  00 00        CAMERA_CELL_LINE_PTR: .addr 0 ; 17-18
0041A7r 1  00           WORLD_SPRITE_NUM:    .byte 0 ; 1B
0041A8r 1  00           WORLD_WALL_SPRITE_NUM: .byte 0; 1C
0041A9r 1  FF           BUFFER_A_DIRTY:        .byte 255 ;
0041AAr 1  FF           BUFFER_B_DIRTY:        .byte 255 ;
0041ABr 1               
0041ABr 1  F0           camera_screen_out_top: .byte SCREEN_OUT_TOP       ; for determining visibility / stop conditions for checking if within range to view..
0041ACr 1  78           camera_screen_out_bottom: .byte SCREEN_OUT_BOTTOM
0041ADr 1               
0041ADr 1               ENDGLOBALS:
0041ADr 1               
0041ADr 1               .macro stash_scratch
0041ADr 1               	STA (SCRATCH_PTR)
0041ADr 1                   INC SCRATCH_PTR
0041ADr 1               .endmacro
0041ADr 1               
0041ADr 1               
0041ADr 1               custom_irq_handler: ; 2E12
0041ADr 1  AD 27 9F        lda VERA_isr
0041B0r 1  29 01           and #VSYNC_BIT
0041B2r 1  F0 11           BEQ :++
0041B4r 1                  ;  for debug ..
0041B4r 1  AD rr rr        LDA VERA_LOCK
0041B7r 1  8D rr rr        STA IRQ_VERA_LOCK
0041BAr 1               
0041BAr 1  EE rr rr        INC VSYNC_counter
0041BDr 1               
0041BDr 1  EE rr rr        INC VERA_LOCK
0041C0r 1  F0 06           BEQ :+++  ; @unlock_vera ; if we don't have lock we'll just fail this frame..
0041C2r 1                @NOP_nothing_to_do:
0041C2r 1  CE rr rr      : DEC VERA_LOCK
0041C5r 1  6C rr rr      : jmp (default_irq_vector)
0041C8r 1               
0041C8r 1  AD rr rr      : LDA CURRENT_BITMAP_BUFFER
0041CBr 1  4D rr rr        EOR LAST_BITMAP_BUFFER
0041CEr 1  F0 F2           BEQ :--- ; if these match then there's nothing to change
0041D0r 1  18              CLC
0041D1r 1  AD rr rr        LDA CURRENT_BITMAP_BUFFER
0041D4r 1  8D rr rr        STA LAST_BITMAP_BUFFER
0041D7r 1               ;        A        B     CURRENT BITMAP BUFFER
0041D7r 1               ;   0   display  dirty    A is being displayed, B to be drawn on
0041D7r 1               ;  64   display  ready    B  is ready for swap
0041D7r 1               ; 128   dirty    display  B is being displayed, A to be drawn on
0041D7r 1               ; 192   ready    display  A  is ready for swap
0041D7r 1  30 0B           BMI @DISPLAY_B
0041D9r 1               @DISPLAY_A:
0041D9r 1  F0 E7           BEQ @NOP_nothing_to_do ;
0041DBr 1  A9 80           LDA #128
0041DDr 1  8D rr rr        STA CURRENT_BITMAP_BUFFER
0041E0r 1  A9 C0           LDA #VRAM_BITMAP_LAYERB>>9
0041E2r 1  80 09           BRA @GO_SWAP
0041E4r 1               @DISPLAY_B:
0041E4r 1  C9 C0           CMP #192
0041E6r 1  90 DA           BCC @NOP_nothing_to_do
0041E8r 1  9C rr rr        STZ CURRENT_BITMAP_BUFFER
0041EBr 1  A9 8C           LDA #VRAM_BITMAP_LAYERA>>9
0041EDr 1               @GO_SWAP:
0041EDr 1  8D 2F 9F        STA VERA_L0_tilebase
0041F0r 1               
0041F0r 1  A9 01           LDA #$01
0041F2r 1  8D 25 9F        STA VERA_ctrl
0041F5r 1               
0041F5r 1  A2 FF           LDX #$FF
0041F7r 1  8E 20 9F        STX VERA_addr_low
0041FAr 1  8E 21 9F        STX VERA_addr_high
0041FDr 1  A9 19           LDA #$19
0041FFr 1  8D 22 9F        STA VERA_addr_bank
004202r 1               
004202r 1  9C 25 9F        STZ VERA_ctrl  ;  reset to address 0
004205r 1  8D 22 9F        STA VERA_addr_bank
004208r 1               
004208r 1  A9 EF           LDA #$EF
00420Ar 1  8D 21 9F        STA VERA_addr_high
00420Dr 1  8E 20 9F        STX VERA_addr_low
004210r 1               
004210r 1  AE rr rr        LDX NUM_AVAIL_SPRITES
004213r 1  AD 23 9F      : LDA VERA_data0   ;  4
004216r 1  8D 24 9F        STA VERA_data1   ;  4  20
004219r 1  AD 23 9F        LDA VERA_data0   ;  4  8
00421Cr 1  8D 24 9F        STA VERA_data1   ;  4  20
00421Fr 1  AD 23 9F        LDA VERA_data0   ;  4  12
004222r 1  8D 24 9F        STA VERA_data1   ;  4  20
004225r 1  AD 23 9F        LDA VERA_data0   ;  4  16
004228r 1  8D 24 9F        STA VERA_data1   ;  4  20
00422Br 1  AD 23 9F        LDA VERA_data0   ;  4
00422Er 1  8D 24 9F        STA VERA_data1   ;  4  20
004231r 1  AD 23 9F        LDA VERA_data0   ;  4  8
004234r 1  8D 24 9F        STA VERA_data1   ;  4  20
004237r 1  AD 23 9F        LDA VERA_data0   ;  4  12
00423Ar 1  8D 24 9F        STA VERA_data1   ;  4  20
00423Dr 1  AD 23 9F        LDA VERA_data0   ;  4  16
004240r 1  8D 24 9F        STA VERA_data1   ;  4  20
004243r 1  CA              DEX         ;  2  22
004244r 1  D0 CD           BNE :-      ;  3  25       8per byte = 64 per sprite + 5 = 69 per * 128 = 8,832 cycles
004246r 1               
004246r 1  6C rr rr        jmp (default_irq_vector)
004249r 1                  ; RTI will happen after jump
004249r 1               
004249r 1               
004249r 1               ; produce downright to scratch for next row to use as upleft...
004249r 1               .macro calc_row_even row, start, end ; ZP_PTR should contain right+downright of right most..
004249r 1               .local SELF
004249r 1               .local SCRATCH_UPLEFT
004249r 1               .local LEFT
004249r 1               .local DOWNLEFT
004249r 1               .local DOWNRIGHT
004249r 1               .local SCRATCH
004249r 1                  SELF = TUB_WORLD+(64*row)+start-1
004249r 1                  SCRATCH_UPLEFT = WATER_CALC_SCRATCH+(64*row)+start-1-64
004249r 1                  LEFT = SELF-1
004249r 1                  DOWNLEFT = SELF+63
004249r 1                  DOWNRIGHT = SELF+64
004249r 1                  SCRATCH = WATER_CALC_SCRATCH+(64*row)+start-1
004249r 1                  LDX #1+end-start ; leftmost is done at x=1
004249r 1                : LDA SELF,X
004249r 1                  ADC DOWNLEFT,X
004249r 1                  STA ZP_PTR+1
004249r 1                  ADC ZP_PTR ; add previous - self+right+downleft+downright
004249r 1                  STA SCRATCH,X ; calc'd downright to stash downright
004249r 1                  ADC SCRATCH_UPLEFT,X ; now just pilin in the upleft
004249r 1                  ROR ; 8x to 4x
004249r 1                  LSR ; 4x
004249r 1                  LSR ; 2x
004249r 1                  LSR ; 1x
004249r 1                  ADC #0 ; round up
004249r 1                  STA SELF,X ; save the new value.. this self+downleft is in ZP_PTR+1  .. OK
004249r 1                  DEX ; OK now thiis should be odd..
004249r 1                  LDA SELF,X
004249r 1                  ADC DOWNLEFT,X
004249r 1                  STA ZP_PTR
004249r 1                  ADC ZP_PTR+1
004249r 1                  STA SCRATCH,X ; calc'd downright to stash downright
004249r 1                  ADC SCRATCH_UPLEFT,X ; now just pilin in the upleft
004249r 1                  ROR ; 8x to 4x
004249r 1                  LSR ; 4x
004249r 1                  LSR ; 2x
004249r 1                  LSR ; 1x
004249r 1                  ADC #0 ; round up
004249r 1                  STA SELF,X ; save the new value.. this self+downleft is in ZP_PTR+1  .. OK
004249r 1                  DEX ; OK now this should be EVEN..
004249r 1                  BNE :-
004249r 1                  ;  exiting this, we have the next right+downright bit stashed in ZP_PTR
004249r 1               .endmacro
004249r 1               
004249r 1               UPDATE_WATER_SIM:
004249r 1                  ; row1 - is no ups.. working backwards need to calc downright and get upleft from prev..
004249r 1                  ;  upleft is upleft, upright, left, self..
004249r 1  AD rr rr        LDA TUB_WORLD+64+55  ; starting with 55 saved as its own right
00424Cr 1  6D rr rr        ADC TUB_WORLD+128+55 ; add the downright here ..
00424Fr 1  85 22           STA ZP_PTR ; stash to use as right..
004251r 1  A2 22           LDX #55-21 ;   there's 34 (22 to 55 inclusive) we can process with such a start..
004253r 1  BD rr rr      : LDA TUB_WORLD+64+21,X ; load self
004256r 1  7D rr rr        ADC TUB_WORLD+128+21-1,X ;  add down left to use as right+downright next thing.
004259r 1  85 23           STA ZP_PTR+1 ; stash this thing.. that's right+downright for the next thing
00425Br 1  65 22           ADC ZP_PTR  ;  add previous right - self+right+downleft+downright..
00425Dr 1  9D rr rr        STA WATER_CALC_SCRATCH+64+21,X ; this we stash for next row..
004260r 1  BD rr rr        LDA TUB_WORLD+64+21,X ; load self
004263r 1  0A              ASL ; double it
004264r 1  7D rr rr        ADC TUB_WORLD+64+21,X ; load self 3x self
004267r 1  7D rr rr        ADC TUB_WORLD+64+21-1,X ; add left + 3x self..
00426Ar 1  7D rr rr        ADC WATER_CALC_SCRATCH+64+21,X ; add the downright we calc'd before
00426Dr 1  6A              ROR ; 8x to 4x
00426Er 1  4A              LSR ; 4x
00426Fr 1  4A              LSR ; 2x
004270r 1  4A              LSR ; 1x
004271r 1  69 00           ADC #0 ; round up
004273r 1  9D rr rr        STA TUB_WORLD+64+21,X ; save the new value.. this self+downleft is in ZP_PTR+1  .. OK
004276r 1  CA              DEX ; OK now thiis should be odd..
004277r 1  BD rr rr        LDA TUB_WORLD+64+21,X ; load the self
00427Ar 1  7D rr rr        ADC TUB_WORLD+128+21-1,X ; add downleft
00427Dr 1  85 22           STA ZP_PTR ; stash that for even counter to use
00427Fr 1  65 23           ADC ZP_PTR+1 ; and then use prev stashed value. . woot!
004281r 1  9D rr rr        STA WATER_CALC_SCRATCH+64+21,X ; this gets stash for next row..
004284r 1  BD rr rr        LDA TUB_WORLD+64+21,X ; load self
004287r 1  7D rr rr        ADC TUB_WORLD+64+21-1,X ; add left
00428Ar 1  0A              ASL ; double it
00428Br 1  7D rr rr        ADC TUB_WORLD+64+21,X ; load self 3x self
00428Er 1  7D rr rr        ADC TUB_WORLD+64+21-1,X ; add left + 3x self..
004291r 1  7D rr rr        ADC WATER_CALC_SCRATCH+64+21,X ; add the downright we calc'd before
004294r 1  6A              ROR ; 8x to 4x
004295r 1  4A              LSR ; 4x
004296r 1  4A              LSR ; 2x
004297r 1  4A              LSR ; 1x
004298r 1  69 00           ADC #0 ; round up
00429Ar 1  9D rr rr        STA TUB_WORLD+64+21,X ; save the new value.. this self+downleft is in ZP_PTR+1  .. OK
00429Dr 1  CA              DEX ; OK now this should be even..
00429Er 1  D0 B3           BNE :- ; and that will bring us down to row1,21 with ZP_PTR containing right+downright for us..
0042A0r 1               
0042A0r 1  AD rr rr        LDA TUB_WORLD+64+21
0042A3r 1  6D rr rr        ADC TUB_WORLD+128+21-1
0042A6r 1  8D rr rr        STA WATER_CALC_SCRATCH+64+20 ; stash this for making upleft of row 2,20
0042A9r 1  65 22           ADC ZP_PTR
0042ABr 1  8D rr rr        STA WATER_CALC_SCRATCH+64+21 ;   and stash the downright..
0042AEr 1  AD rr rr        LDA TUB_WORLD+64+21 ; self is left and up
0042B1r 1  0A              ASL
0042B2r 1  0A              ASL
0042B3r 1  6D rr rr        ADC WATER_CALC_SCRATCH+64+21 ; add the downright we calc'd before
0042B6r 1  6A              ROR ; 8x to 4x
0042B7r 1  4A              LSR ; 4x
0042B8r 1  4A              LSR ; 2x
0042B9r 1  4A              LSR ; 1x
0042BAr 1  69 00           ADC #0 ; round up
0042BCr 1  8D rr rr        STA TUB_WORLD+64+21 ; row 1 is calc'd.. yay
0042BFr 1               
0042BFr 1                  ; row 2 - 56 - no upleft was generated yet, downright missing stuff..
0042BFr 1  AD rr rr        LDA TUB_WORLD+128+56
0042C2r 1  0A              ASL
0042C3r 1  6D rr rr        ADC TUB_WORLD+128+56
0042C6r 1  6D rr rr        ADC TUB_WORLD+128+55 ; is upleft
0042C9r 1  8D rr rr        STA WATER_CALC_SCRATCH+64+56 ;    stash for use as upleft in calc this row..
0042CCr 1               
0042CCr 1  AD rr rr        LDA TUB_WORLD+128+56 ; use as right
0042CFr 1  6D rr rr        ADC TUB_WORLD+192+56 ; use as downright
0042D2r 1  85 22           STA ZP_PTR
0042D4r 1  A2 24 BD rr     calc_row_even 2, 21,56 ; 20 has no left so need to stop before it..
0042D8r 1  rr 7D rr rr  
0042DCr 1  85 23 65 22  
00430Cr 1  AD rr rr        LDA TUB_WORLD+128+20 ; load self
00430Fr 1  6D rr rr        ADC TUB_WORLD+192+19 ; add downleft
004312r 1  8D rr rr        STA WATER_CALC_SCRATCH+128+19 ; stash this for making 3,19
004315r 1  65 22           ADC ZP_PTR
004317r 1  8D rr rr        STA WATER_CALC_SCRATCH+128+20 ; save to use as upleft for next row
00431Ar 1  AD rr rr        LDA TUB_WORLD+128+20 ; load self
00431Dr 1  0A              ASL
00431Er 1  6D rr rr        ADC WATER_CALC_SCRATCH+64+20 ; add the partial we stashed earlier.. this is upleft for us
004321r 1  6D rr rr        ADC WATER_CALC_SCRATCH+128+20 ; this is downright we'd calc'd for ourselves
004324r 1  6A              ROR ; 8x to 4x
004325r 1  4A              LSR ; 4x
004326r 1  4A              LSR ; 2x
004327r 1  4A              LSR ; 1x
004328r 1  69 00           ADC #0 ; round up
00432Ar 1  8D rr rr        STA TUB_WORLD+128+20 ; row 2 is calc'd.. yay
00432Dr 1               
00432Dr 1  60              RTS
00432Er 1               
00432Er 1               start:
00432Er 1                 ; start of program - init globals
00432Er 1  AD 14 03       lda IRQVec
004331r 1  8D rr rr       sta default_irq_vector
004334r 1  AD 15 03       lda IRQVec+1
004337r 1  8D rr rr       sta default_irq_vector+1
00433Ar 1               
00433Ar 1  9C 29 9F       stz VERA_dc_video   ; disable display
00433Dr 1  A9 33          lda #51 ; #43 ; set scale for bitmap mode - going for 215x161 mode
00433Fr 1  8D 2A 9F       sta VERA_dc_hscale
004342r 1  8D 2B 9F       sta VERA_dc_vscale
004345r 1                 ; for now no L0 or L1
004345r 1               
004345r 1                 ; let's stick that test sprite data into VRAM at zero for now..
004345r 1  9C 25 9F       stz VERA_ctrl
004348r 1  9C 20 9F       stz VERA_addr_low
00434Br 1  9C 21 9F       stz VERA_addr_high
00434Er 1  A9 10          lda #$10
004350r 1  8D 22 9F       sta VERA_addr_bank
004353r 1                 ; load test VRAM data
004353r 1               
004353r 1                 ; is 512 bytes at test_cell_sprite label
004353r 1  A0 00          ldy #0
004355r 1               
004355r 1  A9 rr          LDA #<test_vram_data
004357r 1  85 22          STA ZP_PTR
004359r 1  A9 rr          LDA #>test_vram_data
00435Br 1  85 23          STA ZP_PTR+1
00435Dr 1  A2 30          LDX #48   ;   num pages to copy - 16 pages / 8K  - sprite addr 0-255
00435Fr 1  80 02          BRA :++
004361r 1                 :
004361r 1  E6 23             INC ZP_PTR+1
004363r 1                   :
004363r 1  B1 22              LDA (ZP_PTR),Y
004365r 1  8D 23 9F           STA VERA_data0
004368r 1  C8                 INY
004369r 1  D0 F8              BNE :-
00436Br 1  CA                DEX
00436Cr 1  D0 F3             BNE :--
00436Er 1               
00436Er 1                 ; initialize some waves
00436Er 1                 ; write custom palette data  - 16 colors only for now.. $1:FA00-$1:FBFF   VERA Color Palette (256 x 2 bytes)
00436Er 1  A9 01          LDA #1
004370r 1  8D 25 9F       STA VERA_ctrl
004373r 1  A9 3F          LDA #63
004375r 1  8D 20 9F       STA VERA_addr_low
004378r 1  A9 FA          LDA #$FA
00437Ar 1  8D 21 9F       STA VERA_addr_high
00437Dr 1  A9 19          LDA #$19
00437Fr 1  8D 22 9F       STA VERA_addr_bank
004382r 1  9C 25 9F       STZ VERA_ctrl
004385r 1  A2 1F          LDX #31
004387r 1  8E 20 9F       STX VERA_addr_low
00438Ar 1  A9 FA          LDA #$FA
00438Cr 1  8D 21 9F       STA VERA_addr_high
00438Fr 1  A9 19          LDA #$19
004391r 1  8D 22 9F       STA VERA_addr_bank
004394r 1                 :
004394r 1  BD rr rr         LDA test_optimal_pal_data,X
004397r 1  8D 23 9F         STA VERA_data0
00439Ar 1  49 FF            EOR #$FF
00439Cr 1  8D 24 9F         STA VERA_data1
00439Fr 1  CA               DEX
0043A0r 1  D0 F2            BNE :-
0043A2r 1  BD rr rr       LDA test_optimal_pal_data,X
0043A5r 1  8D 23 9F       STA VERA_data0
0043A8r 1               
0043A8r 1  A9 08          LDA #8
0043AAr 1  9C 34 9F       STz VERA_L1_config
0043ADr 1  A9 F8          LDA #VRAM_CHARSET >> 9
0043AFr 1  8D 36 9F       STA VERA_L1_tilebase
0043B2r 1  A9 F2          LDA #VRAM_TEXT_SCREEN >> 9
0043B4r 1  8D 35 9F       STA VERA_L1_mapbase
0043B7r 1               
0043B7r 1  9C 20 9F       STZ VERA_addr_low
0043BAr 1  A9 18          LDA #>VRAM_BITMAP_LAYERA
0043BCr 1  8D 21 9F       STA VERA_addr_high
0043BFr 1  A9 11          LDA #$11
0043C1r 1  8D 22 9F       STA VERA_addr_bank
0043C4r 1  A2 67          LDX #103  ;  zero bufferA
0043C6r 1  A0 00          LDY #0
0043C8r 1  9C 23 9F     : STZ VERA_data0
0043CBr 1  C8             INY
0043CCr 1  D0 FA          BNE :-
0043CEr 1  CA             DEX
0043CFr 1  D0 F7          BNE :-
0043D1r 1  A2 65          LDX #101  ;  write A to bufferB initially as debug / flashing display when swapped..
0043D3r 1                 ;LDA #255
0043D3r 1  9C 23 9F     : STZ VERA_data0
0043D6r 1  C8             INY
0043D7r 1  D0 FA          BNE :-
0043D9r 1  CA             DEX
0043DAr 1  D0 F7          BNE :-
0043DCr 1               
0043DCr 1  9C 23 9F       STZ VERA_data0
0043DFr 1  A9 21          LDA #$21
0043E1r 1  8D 22 9F       STA VERA_addr_bank
0043E4r 1               
0043E4r 1  A2 0F          LDX #15
0043E6r 1  A0 14        : LDY #20
0043E8r 1  A9 01          LDA #$01
0043EAr 1               
0043EAr 1  8D 23 9F       : STA VERA_data0
0043EDr 1  88               DEY
0043EEr 1  D0 FA            BNE :-
0043F0r 1  A0 F1            LDY #$F1
0043F2r 1  8C 23 9F         STY VERA_data0 ; cols 20-23
0043F5r 1  8C 23 9F         STY VERA_data0
0043F8r 1  8C 23 9F         STY VERA_data0
0043FBr 1  8C 23 9F         STY VERA_data0
0043FEr 1               
0043FEr 1  8C 23 9F         STY VERA_data0 ; cols 24-27
004401r 1  8C 23 9F         STY VERA_data0
004404r 1  8C 23 9F         STY VERA_data0
004407r 1  8C 23 9F         STY VERA_data0
00440Ar 1               
00440Ar 1  8C 23 9F         STY VERA_data0 ; cols 28-31
00440Dr 1  8C 23 9F         STY VERA_data0
004410r 1  8C 23 9F         STY VERA_data0
004413r 1  8C 23 9F         STY VERA_data0
004416r 1  CA              DEX
004417r 1  D0 CD           BNE :--
004419r 1  A2 A0          LDX #160
00441Br 1  8C 23 9F       : STY VERA_data0
00441Er 1  8C 23 9F         STY VERA_data0
004421r 1  CA               DEX
004422r 1  D0 F7            BNE :-
004424r 1               ;  LDA #4
004424r 1               ;  STA VERA_L1_HSCROLL_L
004424r 1               ;  STA VERA_L1_VSCROLL_L
004424r 1               
004424r 1  9C 20 9F       STZ VERA_addr_low
004427r 1  A9 E4          LDA #>VRAM_TEXT_SCREEN
004429r 1  8D 21 9F       STA VERA_addr_high
00442Cr 1  A2 04          LDX #4
00442Er 1  A9 20          LDA #32
004430r 1  8D 23 9F     : STA VERA_data0
004433r 1  C8             INY
004434r 1  D0 FA          BNE :-
004436r 1  CA             DEX
004437r 1  D0 F7          BNE :-
004439r 1               
004439r 1  A9 06          LDA #$06
00443Br 1  8D 2D 9F       STA VERA_L0_config
00443Er 1  A9 01          LDA #$01 ; set L0 to palette offset 1 for now, to see where stuff is.
004440r 1  8D 31 9F       STA VERA_L0_HSCROLL_H
004443r 1  A9 8C          LDA #(VRAM_BITMAP_LAYERA>>9)
004445r 1               
004445r 1               ;  LDA #VRAM_BITMAP_LAYERB>>9
004445r 1  8D 2F 9F       STA VERA_L0_tilebase
004448r 1               
004448r 1  A9 06          LDA #6
00444Ar 1  8D 20 9F       STA VERA_addr_low
00444Dr 1  A9 EC          LDA #>VRAM_SPRITE_BUF
00444Fr 1  8D 21 9F       STA VERA_addr_high
004452r 1  A9 41          LDA #$41
004454r 1  8D 22 9F       STA VERA_addr_bank
004457r 1  9C 23 9F       : STZ VERA_data0
00445Ar 1  E8               INX
00445Br 1  D0 FA            BNE :-
00445Dr 1                 ; enable display
00445Dr 1  9C 25 9F       stz VERA_ctrl
004460r 1  A9 71          lda #SPRITES_LAYER1_LAYER0_VGA ; #SPRITES_ONLY_VGA
004462r 1  8D 29 9F       sta VERA_dc_video
004465r 1               
004465r 1               ;  DEC VERA_LOCK ; unlock the vera for first go...
004465r 1               ;   BRA @camera_world_changed
004465r 1                 ; overwrite RAM IRQ vector with custom handler address
004465r 1  78             sei ; disable IRQ while vector is changing
004466r 1  A9 rr          lda #<custom_irq_handler
004468r 1  8D 14 03       sta IRQVec
00446Br 1  A9 rr          lda #>custom_irq_handler
00446Dr 1  8D 15 03       sta IRQVec+1
004470r 1  A9 01          lda #VSYNC_BIT ; make VERA only generate VSYNC IRQs
004472r 1  8D 26 9F       sta VERA_ien
004475r 1  58             cli ; enable IRQ now that vector is properly set
004476r 1               
004476r 1               
004476r 1                 ; main loop here...
004476r 1  9C rr rr        STZ camera_facing
004479r 1               
004479r 1               @camera_world_changed:
004479r 1                  ; copy over cell YL as-is
004479r 1  AD rr rr        LDA camera_world_pos_YL
00447Cr 1  8D rr rr        STA camera_cell_yl
00447Fr 1                  ; YH gets copied over ..
00447Fr 1  AD rr rr        LDA camera_world_pos_YH
004482r 1  8D rr rr        STA camera_cell_y
004485r 1                  ; cellX = WORLDX*ratio - floor(cellY)/2
004485r 1                  ;  halve floor(cellY)
004485r 1  4A              LSR
004486r 1  85 7F           STA $7F ; stash it for scratch
004488r 1  A9 00           LDA #0
00448Ar 1  6A              ROR
00448Br 1  85 7E           STA $7E ; and there's the half..
00448Dr 1               
00448Dr 1  AE rr rr        LDX camera_world_pos_XH
004490r 1  AC rr rr        LDY camera_world_pos_XL
004493r 1  18              CLC
004494r 1  B9 rr rr        LDA WORLD_TO_CELL_XH,Y ; that bit from pos_XL
004497r 1  7D rr rr        ADC WORLD_TO_CELL_XL,X ; plus the bit from pos_XH
00449Ar 1  A8              TAY   ;  cellXL from ratio
00449Br 1  BD rr rr        LDA WORLD_TO_CELL_XH,X
00449Er 1  69 00           ADC #0 ; gotta do that carry and all ..
0044A0r 1  AA              TAX   ; cellXH from ratio
0044A1r 1               
0044A1r 1  98              TYA
0044A2r 1  38              SEC
0044A3r 1  E5 7E           SBC $7E
0044A5r 1  8D rr rr        STA camera_cell_xl
0044A8r 1  8A              TXA
0044A9r 1  E5 7F           SBC $7F
0044ABr 1  8D rr rr        STA camera_cell_x
0044AEr 1  4C rr rr        jmp @do_update
0044B1r 1               
0044B1r 1               @camera_cell_changed: ; run through this more as a normalization step for camera..
0044B1r 1                  ; worldX = scaled(floor(cellY)/2 + cellX )
0044B1r 1  AD rr rr        LDA camera_cell_yl
0044B4r 1  8D rr rr        STA camera_world_pos_YL
0044B7r 1  AD rr rr        LDA camera_cell_y
0044BAr 1  8D rr rr        STA camera_world_pos_YH
0044BDr 1  4A              LSR
0044BEr 1  AA              TAX  ; high byte floor(Y)/2
0044BFr 1  A9 00           LDA #0
0044C1r 1  6A              ROR ; either is zero or 128 now ... either way, carry is cleared.
0044C2r 1  6D rr rr        ADC camera_cell_xl
0044C5r 1  A8              TAY ; stash the low to byte
0044C6r 1  8A              TXA ; high byte floor (Y)/2 .. ready for adding
0044C7r 1  6D rr rr        ADC camera_cell_x
0044CAr 1  AA              TAX ; stash high byte ... carry _should_ be cleared unless X >255 ... ?
0044CBr 1  B9 rr rr        LDA CELL_LOW_TO_WORLD_XL,Y
0044CEr 1  7D rr rr        ADC CELL_TO_WORLD_XL,X
0044D1r 1  8D rr rr        STA camera_world_pos_XL
0044D4r 1  B9 rr rr        LDA CELL_LOW_TO_WORLD_XH,Y
0044D7r 1  7D rr rr        ADC CELL_TO_WORLD_XH,X
0044DAr 1  8D rr rr        STA camera_world_pos_XH
0044DDr 1                  ;  jmp @do_update ; superfluous currently. redundant even..
0044DDr 1               
0044DDr 1               
0044DDr 1               @do_update:
0044DDr 1               
0044DDr 1                  ;  set up screen center stuff
0044DDr 1               
0044DDr 1               
0044DDr 1  AD rr rr        LDA camera_facing
0044E0r 1  29 7F           AND #127
0044E2r 1  AA              TAX
0044E3r 1  BD rr rr        LDA WORLD_SPRITE_NUM_lookies,X
0044E6r 1  8D rr rr        STA WORLD_SPRITE_NUM
0044E9r 1  BD rr rr        LDA WORLD_WALL_SPRITE_NUM_lookies,X
0044ECr 1  8D rr rr        STA WORLD_WALL_SPRITE_NUM
0044EFr 1               
0044EFr 1  38              SEC
0044F0r 1  BD rr rr        LDA WORLD_SPRITE_CENTER_XL,X
0044F3r 1  8D rr rr        STA CAMERA_CENTER_XL
0044F6r 1  BD rr rr        LDA WORLD_SPRITE_CENTER_XH,X
0044F9r 1  E9 1C           SBC #28
0044FBr 1  8D rr rr        STA CAMERA_CENTER_XH
0044FEr 1               
0044FEr 1  BD rr rr        LDA WORLD_SPRITE_CENTER_YL,X
004501r 1  8D rr rr        STA CAMERA_CENTER_YL
004504r 1  38              SEC
004505r 1  BD rr rr        LDA WORLD_SPRITE_CENTER_YH,X
004508r 1  E9 14           SBC #20
00450Ar 1  8D rr rr        STA CAMERA_CENTER_TOP_PX
00450Dr 1               
00450Dr 1  AE rr rr         LDX camera_facing
004510r 1               
004510r 1  AD rr rr         LDA camera_cell_xl
004513r 1  4A               LSR ;   /2
004514r 1  4A               LSR ;   /4
004515r 1  4A               LSR ;   /8
004516r 1  4A               LSR ;   /16
004517r 1  38               SEC
004518r 1  E9 08            SBC #8 ;   subtract le middle..
00451Ar 1  A8               TAY
00451Br 1  B0 29            BCS :++    ;  is positive..
00451Dr 1  18             : CLC
00451Er 1  AD rr rr         LDA CAMERA_CENTER_XL
004521r 1  7D rr rr         ADC SUBCELL_X_COS_L,X
004524r 1  8D rr rr         STA CAMERA_CENTER_XL
004527r 1  AD rr rr         LDA CAMERA_CENTER_XH
00452Ar 1  7D rr rr         ADC SUBCELL_X_COS_H,X
00452Dr 1  8D rr rr         STA CAMERA_CENTER_XH
004530r 1  38               SEC
004531r 1  AD rr rr         LDA CAMERA_CENTER_YL
004534r 1  FD rr rr         SBC SUBCELL_Y_SIN_L,X
004537r 1  8D rr rr         STA CAMERA_CENTER_YL
00453Ar 1  AD rr rr         LDA CAMERA_CENTER_TOP_PX
00453Dr 1  FD rr rr         SBC SUBCELL_Y_SIN_H,X
004540r 1  8D rr rr         STA CAMERA_CENTER_TOP_PX
004543r 1  C8               INY
004544r 1  D0 D7            BNE :-
004546r 1  F0 29          : BEQ :++
004548r 1  38             : SEC
004549r 1  AD rr rr         LDA CAMERA_CENTER_XL
00454Cr 1  FD rr rr         SBC SUBCELL_X_COS_L,X
00454Fr 1  8D rr rr         STA CAMERA_CENTER_XL
004552r 1  AD rr rr         LDA CAMERA_CENTER_XH
004555r 1  FD rr rr         SBC SUBCELL_X_COS_H,X
004558r 1  8D rr rr         STA CAMERA_CENTER_XH
00455Br 1  18               CLC
00455Cr 1  AD rr rr         LDA CAMERA_CENTER_YL
00455Fr 1  7D rr rr         ADC SUBCELL_Y_SIN_L,X
004562r 1  8D rr rr         STA CAMERA_CENTER_YL
004565r 1  AD rr rr         LDA CAMERA_CENTER_TOP_PX
004568r 1  7D rr rr         ADC SUBCELL_Y_SIN_H,X
00456Br 1  8D rr rr         STA CAMERA_CENTER_TOP_PX
00456Er 1  88               DEY
00456Fr 1  D0 D7            BNE :-
004571r 1                 :
004571r 1               
004571r 1  AD rr rr         LDA camera_cell_yl
004574r 1  4A               LSR ;   /2
004575r 1  4A               LSR ;   /4
004576r 1  4A               LSR ;   /8
004577r 1  4A               LSR ;   /16
004578r 1  38               SEC
004579r 1  E9 08            SBC #8 ;   subtract le middle..
00457Br 1  A8               TAY
00457Cr 1  B0 29            BCS :++    ;  is positive..
00457Er 1  18             : CLC
00457Fr 1  AD rr rr         LDA CAMERA_CENTER_XL
004582r 1  7D rr rr         ADC SUBCELL_X_SIN_L,X
004585r 1  8D rr rr         STA CAMERA_CENTER_XL
004588r 1  AD rr rr         LDA CAMERA_CENTER_XH
00458Br 1  7D rr rr         ADC SUBCELL_X_SIN_H,X
00458Er 1  8D rr rr         STA CAMERA_CENTER_XH
004591r 1  18               CLC
004592r 1  AD rr rr         LDA CAMERA_CENTER_YL
004595r 1  7D rr rr         ADC SUBCELL_Y_COS_L,X
004598r 1  8D rr rr         STA CAMERA_CENTER_YL
00459Br 1  AD rr rr         LDA CAMERA_CENTER_TOP_PX
00459Er 1  7D rr rr         ADC SUBCELL_Y_COS_H,X
0045A1r 1  8D rr rr         STA CAMERA_CENTER_TOP_PX
0045A4r 1  C8               INY
0045A5r 1  D0 D7            BNE :-
0045A7r 1  F0 29          : BEQ :++
0045A9r 1  38             : SEC
0045AAr 1  AD rr rr         LDA CAMERA_CENTER_XL
0045ADr 1  FD rr rr         SBC SUBCELL_X_SIN_L,X
0045B0r 1  8D rr rr         STA CAMERA_CENTER_XL
0045B3r 1  AD rr rr         LDA CAMERA_CENTER_XH
0045B6r 1  FD rr rr         SBC SUBCELL_X_SIN_H,X
0045B9r 1  8D rr rr         STA CAMERA_CENTER_XH
0045BCr 1               
0045BCr 1  38               SEC
0045BDr 1  AD rr rr         LDA CAMERA_CENTER_YL
0045C0r 1  FD rr rr         SBC SUBCELL_Y_COS_L,X
0045C3r 1  8D rr rr         STA CAMERA_CENTER_YL
0045C6r 1  AD rr rr         LDA CAMERA_CENTER_TOP_PX
0045C9r 1  FD rr rr         SBC SUBCELL_Y_COS_H,X
0045CCr 1  8D rr rr         STA CAMERA_CENTER_TOP_PX
0045CFr 1  88               DEY
0045D0r 1  D0 D7            BNE :-
0045D2r 1                 :
0045D2r 1               
0045D2r 1                  ;  set up tub pointer .. this will let us grab the height value for current location..
0045D2r 1               
0045D2r 1  64 7C            STZ $7C
0045D4r 1  AD rr rr         LDA camera_cell_y
0045D7r 1  4A               LSR  ;  y pages of 128
0045D8r 1  66 7C            ROR $7C
0045DAr 1  4A               LSR  ; y pages of 64 !
0045DBr 1  66 7C            ROR $7C
0045DDr 1  69 rr            ADC #>TUB_WORLD
0045DFr 1  85 7D            STA $7D
0045E1r 1  8D rr rr         STA CAMERA_CELL_LINE_PTR+1
0045E4r 1  A5 7C            LDA $7C
0045E6r 1  8D rr rr         STA CAMERA_CELL_LINE_PTR
0045E9r 1               
0045E9r 1               
0045E9r 1  AC rr rr         LDY camera_cell_x
0045ECr 1  B1 7C            LDA ($7C),y
0045EEr 1  A8               TAY
0045EFr 1               
0045EFr 1  18              CLC
0045F0r 1  AD rr rr        LDA CAMERA_CENTER_YL
0045F3r 1  79 rr rr        ADC CONVERT_HEIGHTS_PIXELS_L,Y
0045F6r 1  8D rr rr        STA CAMERA_CENTER_YL
0045F9r 1  AD rr rr        LDA CAMERA_CENTER_TOP_PX
0045FCr 1  79 rr rr        ADC CONVERT_HEIGHTS_PIXELS,Y
0045FFr 1  8D rr rr        STA CAMERA_CENTER_YH
004602r 1               
004602r 1  18              CLC
004603r 1  A9 78           LDA #SCREEN_OUT_BOTTOM
004605r 1  79 rr rr        ADC CONVERT_HEIGHTS_PIXELS,Y
004608r 1  8D rr rr        STA camera_screen_out_bottom
00460Br 1               
00460Br 1                  ; if something is higher than us it would be (52-CONVERT_HEIGHTS_PIXELS,Y)
00460Br 1                  ; so true effective top of screen check to account for that would be ...
00460Br 1                  ; SCREEN_OUT_TOP - (52 - CONVERT_HEIGHTS_PIXELS,Y)
00460Br 1                  ; screen out top - 52 + CONVERT_HEIGHTS_PIXELS,Y
00460Br 1                  ; ok so if we are as high as we can be, then something at farthest Z visible Z
00460Br 1                  ; or s this constant??? should it even be attempted to add to world data?
00460Br 1  38              SEC
00460Cr 1  AD rr rr        LDA CAMERA_CENTER_TOP_PX
00460Fr 1  E9 80           SBC #16+60+52 ;-16 is top out.. 60 to mid screen, then max diff in height from there.. so if was middle screen 60 now its -68
004611r 1  8D rr rr        STA camera_screen_out_top
004614r 1               
004614r 1                  ; clear the object list ...
004614r 1  38               SEC
004615r 1  A9 80            LDA #128
004617r 1  ED rr rr         SBC NUM_RESERVED_SPRITES
00461Ar 1  8D rr rr         STA NUM_AVAIL_SPRITES
00461Dr 1               
00461Dr 1  9C rr rr         STZ OBJECT_LIST_BYTE6_NEXT ; because we can't use zero anyway..
004620r 1  A9 08            LDA #$08 ; is basis for all the z_flips <- this may change depending on orientation..
004622r 1  A2 00            LDX #0
004624r 1  9E rr rr         : STZ OBJECT_LIST_Z_START_POINTERS,X
004627r 1  9E rr rr           STZ OBJECT_LIST_BYTE1_MODE,X          ; 16 color / low address
00462Ar 1  9C rr rr           STZ OBJECT_LIST_BYTE2_X
00462Dr 1  9D rr rr           STA OBJECT_LIST_BYTE4_ZFLIPS,X
004630r 1                     ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
004630r 1  E8                 INX
004631r 1  D0 F1              BNE :-
004633r 1               
004633r 1  A9 D0            LDA #SPRITE_SIZE_ORA
004635r 1  9D rr rr         : STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
004638r 1  E8                 INX
004639r 1  D0 FA              BNE :-
00463Br 1  AD rr rr         LDA WORLD_SPRITE_NUM
00463Er 1  9D rr rr         : STA OBJECT_LIST_BYTE0_ADDRLOW,X ; 01.3456 done .
004641r 1  E8                 INX
004642r 1  D0 FA              BNE :-
004644r 1               
004644r 1  AD rr rr        LDA DO_WATER
004647r 1  F0 2E           BEQ :+++
004649r 1               
004649r 1  AD rr rr        LDA DO_FAUCET
00464Cr 1  F0 02           BEQ :+
00464Er 1  A9 40           LDA #64
004650r 1                  ; we're going to pretend the faucet is running...
004650r 1  8D rr rr      : STA TUB_WORLD+(15*64)+7 ;  this is middle row furthest west ( < x )
004653r 1  8D rr rr        STA TUB_WORLD+(15*64)+8
004656r 1  8D rr rr        STA TUB_WORLD+(14*64)+8
004659r 1  8D rr rr        STA TUB_WORLD+(16*64)+7
00465Cr 1  AD rr rr        LDA CAMERA_CELL_LINE_PTR
00465Fr 1  85 22           STA ZP_PTR
004661r 1  AD rr rr        LDA CAMERA_CELL_LINE_PTR+1
004664r 1  85 23           STA ZP_PTR+1
004666r 1  AC rr rr        LDY camera_cell_x
004669r 1  B1 22           LDA (ZP_PTR),y
00466Br 1  1A              INC A
00466Cr 1  C9 40           CMP #64
00466Er 1  90 02           BCC :+
004670r 1  A9 3F           LDA #63
004672r 1  91 22         : STA (ZP_PTR),y
004674r 1               
004674r 1  20 rr rr        JSR UPDATE_WATER_SIM
004677r 1               
004677r 1               
004677r 1               :
004677r 1               
004677r 1  20 rr rr       jsr push_world_to_object_list
00467Ar 1  AC rr rr       LDY CAMERA_CENTER_YH
00467Dr 1  B9 rr rr       LDA OBJECT_LIST_Z_START_POINTERS,y ;  get pointer to current next..
004680r 1  EE rr rr       INC OBJECT_LIST_BYTE6_NEXT ; get next available object...
004683r 1  AE rr rr       LDX OBJECT_LIST_BYTE6_NEXT ; get offset for that
004686r 1  9D rr rr       STA OBJECT_LIST_BYTE6_NEXT,X ; set the old value to this next..
004689r 1  8A             TXA
00468Ar 1  99 rr rr       STA OBJECT_LIST_Z_START_POINTERS,y ; patch this into Z
00468Dr 1  A9 10          LDA #16
00468Fr 1  9D rr rr       STA OBJECT_LIST_BYTE0_ADDRLOW,X
004692r 1  A9 01          LDA #1
004694r 1  9D rr rr       STA OBJECT_LIST_BYTE1_MODE,X
004697r 1  A9 48          LDA #80-8
004699r 1  9D rr rr       STA OBJECT_LIST_BYTE2_X,X
00469Cr 1  A9 2C          LDA #60-16
00469Er 1  9D rr rr       STA OBJECT_LIST_BYTE3_Y,X
0046A1r 1  A9 50          LDA #$50
0046A3r 1  9D rr rr       STA OBJECT_LIST_BYTE5_SIZE,X
0046A6r 1               
0046A6r 1               ;        A        B     CURRENT BITMAP BUFFER
0046A6r 1               ;   0   display  dirty    A is being displayed, B to be drawn on
0046A6r 1               ;  64   display  ready    B  is ready for swap
0046A6r 1               ; 128   dirty    display  B is being displayed, A to be drawn on
0046A6r 1               ; 192   ready    display  A  is ready for swap
0046A6r 1               
0046A6r 1               ; OK so we want bit 6 (64) to be set
0046A6r 1  80 01           BRA :++
0046A8r 1               ;   LDA #2
0046A8r 1               :
0046A8r 1  CB              wai
0046A9r 1               ;   CMP VSYNC_counter
0046A9r 1               ;   BCS :-
0046A9r 1  AD rr rr     :  LDA CURRENT_BITMAP_BUFFER
0046ACr 1  29 40           AND #64
0046AEr 1  D0 F8           BNE :--
0046B0r 1  9C rr rr        STZ VERA_LOCK ; ok gotta lock the VERA...
0046B3r 1  A9 D1           LDA #$D1
0046B5r 1  8D rr rr        STA OBJECT_LIST_BYTE5_SIZE+1
0046B8r 1               
0046B8r 1  20 rr rr        jsr draw_object_list
0046BBr 1               
0046BBr 1               @WRITE_DEBUG:
0046BBr 1  64 7A            STZ $7A
0046BDr 1  AD rr rr         LDA camera_cell_y
0046C0r 1  3A               DEC A
0046C1r 1  4A               LSR
0046C2r 1  66 7A            ROR $7A
0046C4r 1  4A               LSR
0046C5r 1  66 7A            ROR $7A
0046C7r 1  69 rr            ADC #>TUB_WORLD
0046C9r 1  85 7B            STA $7B
0046CBr 1  AC rr rr         LDY camera_cell_x
0046CEr 1  B1 7A            LDA ($7A),y
0046D0r 1  8D rr rr         STA CELL_VAL_UPLEFT
0046D3r 1  C8               INY
0046D4r 1  B1 7A            LDA ($7A),Y
0046D6r 1  8D rr rr         STA CELL_VAL_UPRIGHT
0046D9r 1               
0046D9r 1  64 7C            STZ $7C
0046DBr 1  AD rr rr         LDA camera_cell_y
0046DEr 1  4A               LSR  ;  y pages of 128
0046DFr 1  66 7C            ROR $7C
0046E1r 1  4A               LSR  ; y pages of 64 !
0046E2r 1  66 7C            ROR $7C
0046E4r 1  69 rr            ADC #>TUB_WORLD
0046E6r 1  85 7D            STA $7D
0046E8r 1  8D rr rr         STA CAMERA_CELL_LINE_PTR+1
0046EBr 1  A5 7C            LDA $7C
0046EDr 1  8D rr rr         STA CAMERA_CELL_LINE_PTR
0046F0r 1  B1 7C            LDA ($7C),Y
0046F2r 1  8D rr rr         STA CELL_VAL_RIGHT
0046F5r 1  88               DEY
0046F6r 1  B1 7C            LDA ($7C),Y
0046F8r 1  8D rr rr         STA CELL_VAL_SELF
0046FBr 1  88               DEY
0046FCr 1  B1 7C            LDA ($7C),Y
0046FEr 1  8D rr rr         STA CELL_VAL_LEFT
004701r 1               
004701r 1  64 7E            STZ $7E
004703r 1  AD rr rr         LDA camera_cell_y
004706r 1  1A               INC A
004707r 1  4A               LSR  ;  y pages of 128
004708r 1  66 7E            ROR $7E
00470Ar 1  4A               LSR  ; y pages of 64 !
00470Br 1  66 7E            ROR $7E
00470Dr 1  69 rr            ADC #>TUB_WORLD
00470Fr 1  85 7F            STA $7F
004711r 1  B1 7E            LDA ($7E),Y
004713r 1  8D rr rr         STA CELL_VAL_DOWNLEFT
004716r 1  C8               INY
004717r 1  B1 7E            LDA ($7E),Y
004719r 1  8D rr rr         STA CELL_VAL_DOWNRIGHT
00471Cr 1               
00471Cr 1  9C 25 9F        STZ VERA_ctrl
00471Fr 1  A9 2A           LDA #42;+64
004721r 1  8D 20 9F        STA VERA_addr_low
004724r 1  A9 E4           LDA #>VRAM_TEXT_SCREEN
004726r 1  8D 21 9F        STA VERA_addr_high
004729r 1  A9 21           LDA #$21
00472Br 1  8D 22 9F        STA VERA_addr_bank
00472Er 1               
00472Er 1  AD 23 9F        LDA VERA_data0 ; skip a spot at 2
004731r 1  AD 23 9F        LDA VERA_data0 ; skip a spot at 4
004734r 1               
004734r 1  AE rr rr        LDX CELL_VAL_UPLEFT
004737r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X
00473Ar 1  8D 23 9F        STA VERA_data0                ;  6
00473Dr 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X
004740r 1  8D 23 9F        STA VERA_data0                ;  8
004743r 1               
004743r 1  AD 23 9F        LDA VERA_data0     ; skip a spot    10
004746r 1  AD 23 9F        LDA VERA_data0     ; skip a spot    12
004749r 1               
004749r 1  AE rr rr        LDX CELL_VAL_UPRIGHT
00474Cr 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X
00474Fr 1  8D 23 9F        STA VERA_data0                ;  14
004752r 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X
004755r 1  8D 23 9F        STA VERA_data0                ;  16
004758r 1  18              CLC
004759r 1  AD 20 9F        LDA VERA_addr_low
00475Cr 1  69 30           ADC #64-16
00475Er 1  8D 20 9F        STA VERA_addr_low
004761r 1               
004761r 1  AE rr rr        LDX CELL_VAL_LEFT
004764r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X
004767r 1  8D 23 9F        STA VERA_data0                ;  2
00476Ar 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X
00476Dr 1  8D 23 9F        STA VERA_data0                ;  4
004770r 1               
004770r 1  AD 23 9F        LDA VERA_data0    ;     6
004773r 1  AD 23 9F        LDA VERA_data0    ;     8
004776r 1               
004776r 1  AE rr rr        LDX CELL_VAL_SELF
004779r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X
00477Cr 1  8D 23 9F        STA VERA_data0                ;  10
00477Fr 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X
004782r 1  8D 23 9F        STA VERA_data0                ;  12
004785r 1               
004785r 1  AD 23 9F        LDA VERA_data0    ;     14
004788r 1  AD 23 9F        LDA VERA_data0    ;     16
00478Br 1               
00478Br 1  AE rr rr        LDX CELL_VAL_RIGHT
00478Er 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X
004791r 1  8D 23 9F        STA VERA_data0                ;  18
004794r 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X
004797r 1  8D 23 9F        STA VERA_data0                ;  20
00479Ar 1               
00479Ar 1  18              CLC
00479Br 1  AD 20 9F        LDA VERA_addr_low
00479Er 1  69 2C           ADC #64-20
0047A0r 1  8D 20 9F        STA VERA_addr_low
0047A3r 1               
0047A3r 1  AD 23 9F        LDA VERA_data0 ; skip a spot at 2
0047A6r 1  AD 23 9F        LDA VERA_data0 ; skip a spot at 4
0047A9r 1               
0047A9r 1  AE rr rr        LDX CELL_VAL_DOWNLEFT
0047ACr 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X
0047AFr 1  8D 23 9F        STA VERA_data0                ;  6
0047B2r 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X
0047B5r 1  8D 23 9F        STA VERA_data0                ;  8
0047B8r 1               
0047B8r 1  AD 23 9F        LDA VERA_data0     ; skip a spot    10
0047BBr 1  AD 23 9F        LDA VERA_data0     ; skip a spot    12
0047BEr 1               
0047BEr 1  AE rr rr        LDX CELL_VAL_DOWNRIGHT
0047C1r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X
0047C4r 1  8D 23 9F        STA VERA_data0                ;  14
0047C7r 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X
0047CAr 1  8D 23 9F        STA VERA_data0                ;  16
0047CDr 1               
0047CDr 1  A9 2A           LDA #42
0047CFr 1  8D 20 9F        STA VERA_addr_low
0047D2r 1  EE 21 9F        INC VERA_addr_high
0047D5r 1               
0047D5r 1               
0047D5r 1  A0 00           LDY #0
0047D7r 1  BE rr rr      : LDX GLOBAL_DATA,Y
0047DAr 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X ; 1
0047DDr 1  8D 23 9F        STA VERA_data0
0047E0r 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X  ; 2
0047E3r 1  8D 23 9F        STA VERA_data0
0047E6r 1  C8              INY
0047E7r 1  BE rr rr        LDX GLOBAL_DATA,Y
0047EAr 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X   ;  3
0047EDr 1  8D 23 9F        STA VERA_data0
0047F0r 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X    ;  4
0047F3r 1  8D 23 9F        STA VERA_data0
0047F6r 1  C8              INY
0047F7r 1  AD 23 9F        LDA VERA_data0             ;  5
0047FAr 1  BE rr rr        LDX GLOBAL_DATA,Y
0047FDr 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X   ;  6
004800r 1  8D 23 9F        STA VERA_data0
004803r 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X    ;  7
004806r 1  8D 23 9F        STA VERA_data0
004809r 1  C8              INY
00480Ar 1  BE rr rr        LDX GLOBAL_DATA,Y
00480Dr 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X   ;  8
004810r 1  8D 23 9F        STA VERA_data0
004813r 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X    ;  9
004816r 1  8D 23 9F        STA VERA_data0
004819r 1  C8              INY
00481Ar 1  18              CLC
00481Br 1  AD 20 9F        LDA VERA_addr_low          ;  moved 18 out of 64 bytes...
00481Er 1  69 2E           ADC #64-18
004820r 1  8D 20 9F        STA VERA_addr_low
004823r 1  90 03           BCC :+
004825r 1  EE 21 9F        INC VERA_addr_high
004828r 1  C0 31         : CPY #ENDGLOBALS-GLOBAL_DATA  ;
00482Ar 1  90 AB           BCC :--
00482Cr 1               
00482Cr 1  18              CLC
00482Dr 1  AD rr rr        LDA CURRENT_BITMAP_BUFFER
004830r 1  69 40           ADC #64
004832r 1  8D rr rr        STA CURRENT_BITMAP_BUFFER
004835r 1               
004835r 1  A9 FF           LDA #$FF ; time to unlock the VERA ..
004837r 1  8D rr rr        STA VERA_LOCK
00483Ar 1               
00483Ar 1               ;   rts
00483Ar 1               
00483Ar 1               @FRAME_CHECK:
00483Ar 1  AD rr rr        LDA STALL_COUNTERH
00483Dr 1  8D rr rr        STA LAST_STALLCOUNTERH
004840r 1  AD rr rr        LDA STALL_COUNTER
004843r 1  8D rr rr        STA LAST_STALLCOUNTER
004846r 1  A2 FF           LDX #255
004848r 1  A0 FF           LDY #255
00484Ar 1  AD rr rr        LDA VSYNC_counter
00484Dr 1  8D rr rr        STA LAST_VSYNC_COUNTER
004850r 1               ;   BNE :+++
004850r 1  9C rr rr        STZ VSYNC_counter
004853r 1  E8           :  INX                     ;  2 cycles    8
004854r 1  D0 01           BNE :+                  ;  ~3 cycles   11 or 10 if drop through
004856r 1  C8              INY                     ; 2            11/12
004857r 1               :  ;wai   disables the busy wait..
004857r 1  AD rr rr        lda VSYNC_counter       ;  4  cyles    15/16
00485Ar 1  F0 F7           BEQ :--                ;  3  cycles     18/19   so 1 full of X = ~4,607 cycles .. count would go to ~7,407 for full frame.. or ~ $1C,$F0
00485Cr 1               ;:
00485Cr 1  9C rr rr        STZ VSYNC_counter
00485Fr 1  8E rr rr        STX STALL_COUNTER
004862r 1  8C rr rr        STY STALL_COUNTERH
004865r 1               ;   LDA MASTER_CLOCK
004865r 1               ;   INC A
004865r 1               ;   CLC
004865r 1               ;   ADC LAST_VSYNC_COUNTER
004865r 1               ;   STA MASTER_CLOCK
004865r 1  EE rr rr        INC MASTER_CLOCK
004868r 1  D0 03           BNE :+
00486Ar 1  EE rr rr        INC MASTER_CLOCK+1
00486Dr 1               :
00486Dr 1               ;   AND #1 ; restrict to 30 fps.. don't care missed cycle.
00486Dr 1               ;   BEQ :+
00486Dr 1               ;   JMP @WRITE_DEBUG
00486Dr 1                  ; poll keyboard for input
00486Dr 1               ; :
00486Dr 1  20 E4 FF        jsr GETIN
004870r 1  C9 00           cmp #0
004872r 1  D0 03           BNE :+
004874r 1  4C rr rr        JMP @do_update
004877r 1  C9 0D         : CMP #RETURN
004879r 1  D0 03           BNE :+
00487Br 1  4C rr rr        JMP @cleanup_and_exit
00487Er 1  C9 1D         : cmp #$1D 	;	cursor right
004880r 1  D0 06           BNE :+
004882r 1  EE rr rr        INC camera_facing
004885r 1  4C rr rr        JMP @do_update
004888r 1                  :
004888r 1  C9 9D           cmp  #$9D 	;	cursor left
00488Ar 1  D0 06           BNE :+
00488Cr 1  CE rr rr        DEC camera_facing
00488Fr 1  4C rr rr        JMP @do_update
004892r 1  C9 11         : cmp #$11; cursor down
004894r 1  D0 2C           BNE :+
004896r 1  AE rr rr        LDX camera_facing
004899r 1  38              SEC
00489Ar 1  AD rr rr        LDA camera_world_pos_XL
00489Dr 1  FD rr rr        SBC MOVE_X_L,X
0048A0r 1  8D rr rr        STA camera_world_pos_XL
0048A3r 1  AD rr rr        LDA camera_world_pos_XH
0048A6r 1  FD rr rr        SBC MOVE_X_H,X
0048A9r 1  8D rr rr        STA camera_world_pos_XH
0048ACr 1  18              CLC
0048ADr 1  AD rr rr        LDA camera_world_pos_YL
0048B0r 1  7D rr rr        ADC MOVE_Y_L,X
0048B3r 1  8D rr rr        STA camera_world_pos_YL
0048B6r 1  AD rr rr        LDA camera_world_pos_YH
0048B9r 1  7D rr rr        ADC MOVE_Y_H,X
0048BCr 1  8D rr rr        STA camera_world_pos_YH
0048BFr 1  4C rr rr        jmp @camera_world_changed
0048C2r 1               
0048C2r 1  C9 91         : cmp #$91 ; cursor up
0048C4r 1  D0 2C           BNE :+
0048C6r 1  AE rr rr        LDX camera_facing
0048C9r 1  18              CLC
0048CAr 1  AD rr rr        LDA camera_world_pos_XL
0048CDr 1  7D rr rr        ADC MOVE_X_L,X
0048D0r 1  8D rr rr        STA camera_world_pos_XL
0048D3r 1  AD rr rr        LDa camera_world_pos_XH
0048D6r 1  7D rr rr        ADC MOVE_X_H,X
0048D9r 1  8D rr rr        STA camera_world_pos_XH
0048DCr 1  38              SEC
0048DDr 1  AD rr rr        LDA camera_world_pos_YL
0048E0r 1  FD rr rr        SBC MOVE_Y_L,X
0048E3r 1  8D rr rr        STA camera_world_pos_YL
0048E6r 1  AD rr rr        LDA camera_world_pos_YH
0048E9r 1  FD rr rr        SBC MOVE_Y_H,X
0048ECr 1  8D rr rr        STA camera_world_pos_YH
0048EFr 1  4C rr rr        jmp @camera_world_changed
0048F2r 1               
0048F2r 1  C9 45         : cmp  #E_CHAR ; cell up right
0048F4r 1  D0 15           BNE :+++
0048F6r 1  AD rr rr        LDA camera_cell_y
0048F9r 1  F0 03           BEQ :+
0048FBr 1  CE rr rr        DEC camera_cell_y
0048FEr 1  AD rr rr      : LDA camera_cell_x
004901r 1  C9 3F           CMP #63
004903r 1  B0 03           BCS :+
004905r 1  EE rr rr        INC camera_cell_x
004908r 1  4C rr rr      : JMP @camera_cell_changed
00490Br 1               
00490Br 1  C9 57         : cmp #W_CHAR ; cell up left
00490Dr 1  D0 0B           BNE :++
00490Fr 1  AD rr rr        LDA camera_cell_y
004912r 1  F0 03           BEQ :+
004914r 1  CE rr rr        DEC camera_cell_y
004917r 1  4C rr rr      : JMP @camera_cell_changed
00491Ar 1               
00491Ar 1  C9 41         : cmp #A_CHAR ; cell left
00491Cr 1  D0 0B           BNE :++
00491Er 1  AD rr rr        LDA camera_cell_x
004921r 1  F0 03           BEQ :+
004923r 1  CE rr rr        DEC camera_cell_x
004926r 1  4C rr rr      : JMP @camera_cell_changed
004929r 1               
004929r 1  C9 44         : cmp #D_CHAR ; cell right
00492Br 1  D0 0D           BNE :++
00492Dr 1  AD rr rr        LDA camera_cell_x
004930r 1  C9 3F           CMP #63
004932r 1  B0 03           BCS :+
004934r 1  EE rr rr        INC camera_cell_x
004937r 1  4C rr rr      : JMP @camera_cell_changed
00493Ar 1               
00493Ar 1  C9 58         : cmp #X_CHAR ; cell down right
00493Cr 1  D0 0D           BNE :++
00493Er 1  AD rr rr        LDA camera_cell_y
004941r 1  C9 1E           CMP #30
004943r 1  B0 03           BCS :+
004945r 1  EE rr rr        INC camera_cell_y
004948r 1  4C rr rr      : JMP @camera_cell_changed
00494Br 1               
00494Br 1  C9 5A         : cmp  #Z_CHAR ; cell down left
00494Dr 1  D0 15           BNE :+++
00494Fr 1  AD rr rr        LDA camera_cell_y
004952r 1  C9 1E           CMP #30
004954r 1  B0 03           BCS :+
004956r 1  EE rr rr        INC camera_cell_y
004959r 1  AD rr rr      : LDA camera_cell_x
00495Cr 1  F0 03           BEQ :+
00495Er 1  CE rr rr        DEC camera_cell_x
004961r 1  4C rr rr      : JMP @camera_cell_changed
004964r 1               
004964r 1  C9 20         : cmp #SPACE;
004966r 1  D0 09           BNE :+
004968r 1  9C rr rr        STZ camera_cell_xl
00496Br 1  9C rr rr        STZ camera_cell_yl
00496Er 1  4C rr rr        JMP @camera_cell_changed
004971r 1               
004971r 1  C9 49         : cmp #I_CHAR ; cell y - 1/16
004973r 1  D0 25           BNE :++
004975r 1  38              SEC
004976r 1  AD rr rr        LDA camera_cell_yl
004979r 1  E9 10           SBC #16
00497Br 1  8D rr rr        STA camera_cell_yl
00497Er 1  B0 17           BCS :+
004980r 1  AD rr rr        LDA camera_cell_y
004983r 1  F0 12           BEQ :+
004985r 1  3A              DEC A
004986r 1  8D rr rr        STA camera_cell_y
004989r 1  18              CLC
00498Ar 1  AD rr rr        LDA camera_cell_xl
00498Dr 1  69 80           ADC #128
00498Fr 1  8D rr rr        STA camera_cell_xl
004992r 1  90 03           BCC :+
004994r 1  EE rr rr        INC camera_cell_x
004997r 1  4C rr rr      : JMP @camera_cell_changed
00499Ar 1               
00499Ar 1  C9 4A         : cmp #J_CHAR ; cell x - 1/16
00499Cr 1  D0 17           BNE :++
00499Er 1  38              SEC
00499Fr 1  AD rr rr        LDA camera_cell_xl
0049A2r 1  E9 10           SBC #16
0049A4r 1  8D rr rr        STA camera_cell_xl
0049A7r 1  B0 09           BCS :+
0049A9r 1  AD rr rr        LDA camera_cell_x
0049ACr 1  F0 04           BEQ :+
0049AEr 1  3A              DEC A
0049AFr 1  8D rr rr        STA camera_cell_x
0049B2r 1  4C rr rr      : JMP @camera_cell_changed
0049B5r 1               
0049B5r 1  C9 4B         : cmp #K_CHAR ; cell y + 1/16
0049B7r 1  D0 27           BNE :++
0049B9r 1  18              CLC
0049BAr 1  AD rr rr        LDA camera_cell_yl
0049BDr 1  69 10           ADC #16
0049BFr 1  8D rr rr        STA camera_cell_yl
0049C2r 1  90 19           BCC :+
0049C4r 1  AD rr rr        LDA camera_cell_y
0049C7r 1  C9 1F           CMP #31
0049C9r 1  B0 12           BCS :+
0049CBr 1  1A              INC A
0049CCr 1  8D rr rr        STA camera_cell_y
0049CFr 1  38              SEC
0049D0r 1  AD rr rr        LDA camera_cell_xl
0049D3r 1  E9 80           SBC #128
0049D5r 1  8D rr rr        STA camera_cell_xl
0049D8r 1  B0 03           BCS :+
0049DAr 1  CE rr rr        DEC camera_cell_x
0049DDr 1  4C rr rr      : JMP @camera_cell_changed
0049E0r 1               
0049E0r 1  C9 4C         : cmp #L_CHAR ; cell x + 1/16
0049E2r 1  D0 11           BNE :++
0049E4r 1  18              CLC
0049E5r 1  AD rr rr        LDA camera_cell_xl
0049E8r 1  69 10           ADC #16
0049EAr 1  8D rr rr        STA camera_cell_xl
0049EDr 1  90 03           BCC :+
0049EFr 1  EE rr rr        INC camera_cell_x
0049F2r 1  4C rr rr      : JMP @camera_cell_changed
0049F5r 1               
0049F5r 1  C9 31         : CMP #ONE_CHAR
0049F7r 1  D0 08           BNE :+
0049F9r 1  AD 29 9F        LDA VERA_dc_video
0049FCr 1  49 20           EOR #%00100000
0049FEr 1  8D 29 9F        STA VERA_dc_video
004A01r 1               
004A01r 1  C9 32         : CMP #TWO_CHAR
004A03r 1  D0 08           BNE :+
004A05r 1  AD 29 9F        LDA VERA_dc_video
004A08r 1  49 40           EOR #%01000000
004A0Ar 1  8D 29 9F        STA VERA_dc_video
004A0Dr 1               
004A0Dr 1  C9 33         : CMP #THREE_CHAR
004A0Fr 1  D0 08           BNE :+
004A11r 1  AD 29 9F        LDA VERA_dc_video
004A14r 1  49 10           EOR #%00010000
004A16r 1  8D 29 9F        STA VERA_dc_video
004A19r 1               
004A19r 1  C9 30         : CMP #ZERO_CHAR
004A1Br 1  D0 13           BNE :+++
004A1Dr 1  AD 2A 9F        LDA VERA_dc_hscale
004A20r 1  C9 2B           CMP #43
004A22r 1  B0 04           BCS :+
004A24r 1  A9 33           LDA #51 ; #51 ; 51 is 255
004A26r 1  80 02           BRA :++
004A28r 1  A9 20         : LDA #32
004A2Ar 1  8D 2A 9F      : STA VERA_dc_hscale
004A2Dr 1  8D 2B 9F        STA VERA_dc_vscale
004A30r 1               
004A30r 1  C9 39         : CMP #NINE_CHAR
004A32r 1  D0 08           BNE :+
004A34r 1  AD rr rr        LDA SPRITE_OBJECT_ENABLE
004A37r 1  49 FF           EOR #$FF
004A39r 1  8D rr rr        STA SPRITE_OBJECT_ENABLE
004A3Cr 1               
004A3Cr 1  C9 38         : CMP #EIGHT_CHAR
004A3Er 1  D0 08           BNE :+
004A40r 1  A9 FF           LDA #$FF
004A42r 1  4D rr rr        EOR DO_WATER
004A45r 1  8D rr rr        STA DO_WATER
004A48r 1               
004A48r 1  C9 37         : CMP #SEVEN_CHAR
004A4Ar 1  D0 08           BNE :+
004A4Cr 1  AD rr rr        LDA DO_WATER
004A4Fr 1  D0 03           BNE :+
004A51r 1  20 rr rr        JSR UPDATE_WATER_SIM
004A54r 1               
004A54r 1  C9 36         : CMP #SIX_CHAR
004A56r 1  D0 08           BNE :+
004A58r 1  AD rr rr        LDA DO_FAUCET
004A5Br 1  49 FF           EOR #$FF
004A5Dr 1  8D rr rr        STA DO_FAUCET
004A60r 1               
004A60r 1  4C rr rr      : JMP @do_update
004A63r 1               
004A63r 1               @cleanup_and_exit:
004A63r 1                  ; restore default IRQ vector
004A63r 1  78              sei
004A64r 1  AD rr rr        lda default_irq_vector
004A67r 1  8D 14 03        sta IRQVec
004A6Ar 1  AD rr rr        lda default_irq_vector+1
004A6Dr 1  8D 15 03        sta IRQVec+1
004A70r 1  58              cli
004A71r 1  20 81 FF        jsr CINT
004A74r 1  60              rts
004A75r 1               
004A75r 1               
004A75r 1               ; CURRENT
004A75r 1               push_world_to_object_list: ; as in.. let's try this again?? wait.. missing a STZ ZP_PTR...
004A75r 1               PWOL_TUB_PTR_AL   = ZP_PTR
004A75r 1               PWOL_TUB_PTR_AH   = ZP_PTR+1
004A75r 1               PWOL_TUB_PTR_BL   = ZP_PTR+2
004A75r 1               PWOL_TUB_PTR_BH   = ZP_PTR+3
004A75r 1               PWOL_CURRENT_XL   = ZP_PTR+4
004A75r 1               PWOL_CURRENT_XH   = ZP_PTR+5
004A75r 1               PWOL_CURRENT_YL   = ZP_PTR+6
004A75r 1               PWOL_CURRENT_YH   = ZP_PTR+7
004A75r 1               PWOL_ACROSS_ROW_XL= ZP_PTR+8
004A75r 1               PWOL_ACROSS_ROW_XH= ZP_PTR+9
004A75r 1               PWOL_ACROSS_ROW_YL= ZP_PTR+10
004A75r 1               PWOL_ACROSS_ROW_YH= ZP_PTR+11
004A75r 1               PWOL_NEXT_ROW_A_LEFT_XL  = ZP_PTR+12
004A75r 1               PWOL_NEXT_ROW_A_LEFT_XH  = ZP_PTR+13
004A75r 1               PWOL_NEXT_ROW_A_LEFT_YL  = ZP_PTR+14
004A75r 1               PWOL_NEXT_ROW_A_LEFT_YH  = ZP_PTR+15
004A75r 1               PWOL_NEXT_ROW_A_RIGHT_XL  = ZP_PTR+16
004A75r 1               PWOL_NEXT_ROW_A_RIGHT_XH  = ZP_PTR+17
004A75r 1               PWOL_NEXT_ROW_A_RIGHT_YL  = ZP_PTR+18
004A75r 1               PWOL_NEXT_ROW_A_RIGHT_YH  = ZP_PTR+19
004A75r 1               PWOL_NEXT_ROW_B_LEFT_XL  = ZP_PTR+20
004A75r 1               PWOL_NEXT_ROW_B_LEFT_XH  = ZP_PTR+21
004A75r 1               PWOL_NEXT_ROW_B_LEFT_YL  = ZP_PTR+22
004A75r 1               PWOL_NEXT_ROW_B_LEFT_YH  = ZP_PTR+23
004A75r 1               PWOL_NEXT_ROW_B_RIGHT_XL  = ZP_PTR+24
004A75r 1               PWOL_NEXT_ROW_B_RIGHT_XH  = ZP_PTR+25
004A75r 1               PWOL_NEXT_ROW_B_RIGHT_YL  = ZP_PTR+26
004A75r 1               PWOL_NEXT_ROW_B_RIGHT_YH  = ZP_PTR+27
004A75r 1               PWOL_Z_STARTS_PTR = ZP_PTR+28
004A75r 1               PWOL_Z_STARTS_PTRH = ZP_PTR+29
004A75r 1               PWOL_CONVERT_HEIGHTS = ZP_PTR+30
004A75r 1               PWOL_CONVERT_HEIGHTSH= ZP_PTR+31
004A75r 1               PWOL_CONVERT_HEIGHTS_L = ZP_PTR+32
004A75r 1               PWOL_CONVERT_HEIGHTS_LH = ZP_PTR+33
004A75r 1               PWOL_TRIES_COUNTER = ZP_PTR+34
004A75r 1               PWOL_START_XL = ZP_PTR+35
004A75r 1               PWOL_START_YL = ZP_PTR+36
004A75r 1               PWOL_START_XH = ZP_PTR+37
004A75r 1               PWOL_START_YH = ZP_PTR+38
004A75r 1               
004A75r 1               PWOL_START_COS_XL = ZP_PTR+39
004A75r 1               PWOL_START_COS_XH = ZP_PTR+40
004A75r 1               PWOL_START_COS_YL = ZP_PTR+41
004A75r 1               PWOL_START_COS_YH = ZP_PTR+42
004A75r 1               PWOL_START_SIN_XL = ZP_PTR+43
004A75r 1               PWOL_START_SIN_XH = ZP_PTR+44
004A75r 1               PWOL_START_SIN_YL = ZP_PTR+45
004A75r 1               PWOL_START_SIN_YH = ZP_PTR+46
004A75r 1               
004A75r 1               PWOL_camera_cell_xl = ZP_PTR+47
004A75r 1               PWOL_camera_cell_yl = ZP_PTR+48
004A75r 1               PWOL_CENTER_Y  =  ZP_PTR+49
004A75r 1               PWOL_CENTER_Y_TOP     =  ZP_PTR+50
004A75r 1               
004A75r 1               PWOL_TOP_CHECK = ZP_PTR+51
004A75r 1               PWOL_BOT_CHECK = ZP_PTR+52
004A75r 1               
004A75r 1               TRY_AGAIN = 6
004A75r 1  AD rr rr        LDA camera_screen_out_top
004A78r 1  85 55           STA PWOL_TOP_CHECK
004A7Ar 1  AD rr rr        LDA camera_screen_out_bottom
004A7Dr 1  85 56           STA PWOL_BOT_CHECK
004A7Fr 1               
004A7Fr 1  AD rr rr        LDA CAMERA_CENTER_YH
004A82r 1  1A              INC A
004A83r 1  85 53           STA PWOL_CENTER_Y
004A85r 1  AD rr rr        LDA CAMERA_CENTER_TOP_PX
004A88r 1  18              CLC
004A89r 1  69 0A           ADC #10
004A8Br 1  85 54           STA PWOL_CENTER_Y_TOP
004A8Dr 1               
004A8Dr 1               
004A8Dr 1  A9 rr           LDA #>CONVERT_HEIGHTS_PIXELS
004A8Fr 1  85 41           STA PWOL_CONVERT_HEIGHTSH
004A91r 1  A9 rr           LDA #>CONVERT_HEIGHTS_PIXELS_L
004A93r 1  85 43           STA PWOL_CONVERT_HEIGHTS_LH
004A95r 1               
004A95r 1  A9 rr           LDA #>OBJECT_LIST_Z_START_POINTERS
004A97r 1  85 3F           STA PWOL_Z_STARTS_PTRH
004A99r 1               
004A99r 1  AE rr rr        LDX camera_facing
004A9Cr 1  BD rr rr        LDA ACROSS_ROW_X_L,x    ; 0900  16 wide , 45* tilt ... this is added to go up row, sub for down row
004A9Fr 1  85 2A           STA PWOL_ACROSS_ROW_XL
004AA1r 1  BD rr rr        LDA ACROSS_ROW_X_H,x
004AA4r 1  85 2B           STA PWOL_ACROSS_ROW_XH
004AA6r 1               
004AA6r 1  BD rr rr        LDA ACROSS_ROW_Y_L,x
004AA9r 1  85 2C           STA PWOL_ACROSS_ROW_YL
004AABr 1  BD rr rr        LDA ACROSS_ROW_Y_H,x
004AAEr 1  85 2D           STA PWOL_ACROSS_ROW_YH
004AB0r 1               
004AB0r 1  18              CLC
004AB1r 1  BD rr rr        LDA NEXT_ROW_X_L,X  ; 0D00 next row LEFT/up when added
004AB4r 1  85 2E           STA PWOL_NEXT_ROW_A_LEFT_XL   ; -> next row is left, going up the screen ..  -1,-1
004AB6r 1  65 2A           ADC PWOL_ACROSS_ROW_XL   ; across row is for right , subtract to go left  +1 -> 0,1
004AB8r 1  85 32           STA PWOL_NEXT_ROW_A_RIGHT_XL  ;  -> next row is right, going up the screen .. -1,-1
004ABAr 1  BD rr rr        LDA NEXT_ROW_X_H,x
004ABDr 1  85 2F           STA PWOL_NEXT_ROW_A_LEFT_XH
004ABFr 1  65 2B           ADC PWOL_ACROSS_ROW_XH
004AC1r 1  85 33           STA PWOL_NEXT_ROW_A_RIGHT_XH
004AC3r 1               
004AC3r 1  18              CLC
004AC4r 1  BD rr rr        LDA NEXT_ROW_Y_L,X  ; 0F00 next row LEFT/up when added
004AC7r 1  85 30           STA PWOL_NEXT_ROW_A_LEFT_YL   ; -> next row is left, going up the screen
004AC9r 1  65 2C           ADC PWOL_ACROSS_ROW_YL   ; across row is for right
004ACBr 1  85 34           STA PWOL_NEXT_ROW_A_RIGHT_YL  ;  -> next row is right, going up the screen
004ACDr 1  BD rr rr        LDA NEXT_ROW_Y_H,x
004AD0r 1  85 31           STA PWOL_NEXT_ROW_A_LEFT_YH
004AD2r 1  65 2D           ADC PWOL_ACROSS_ROW_YH
004AD4r 1  85 35           STA PWOL_NEXT_ROW_A_RIGHT_YH
004AD6r 1               
004AD6r 1               
004AD6r 1               ; for zig B , the opposite of left/up is right/down.. so A_LEFT * -1 = B_RIGHT
004AD6r 1  38              SEC ; flip A_LEFT X to B_RIGHT X
004AD7r 1  A9 00           LDA #0
004AD9r 1  E5 2E           SBC PWOL_NEXT_ROW_A_LEFT_XL
004ADBr 1  85 3A           STA PWOL_NEXT_ROW_B_RIGHT_XL
004ADDr 1  A9 00           LDA #0
004ADFr 1  E5 2F           SBC PWOL_NEXT_ROW_A_LEFT_XH
004AE1r 1  85 3B           STA PWOL_NEXT_ROW_B_RIGHT_XH
004AE3r 1               
004AE3r 1  38              SEC ; flip A_LEFT Y to B_RIGHT Y
004AE4r 1  A9 00           LDA #0
004AE6r 1  E5 30           SBC PWOL_NEXT_ROW_A_LEFT_YL
004AE8r 1  85 3C           STA PWOL_NEXT_ROW_B_RIGHT_YL
004AEAr 1  A9 00           LDA #0
004AECr 1  E5 31           SBC PWOL_NEXT_ROW_A_LEFT_YH
004AEEr 1  85 3D           STA PWOL_NEXT_ROW_B_RIGHT_YH
004AF0r 1               
004AF0r 1  38              SEC ; flip A_RIGHT X to B_LEFT X
004AF1r 1  A9 00           LDA #0
004AF3r 1  E5 32           SBC PWOL_NEXT_ROW_A_RIGHT_XL
004AF5r 1  85 36           STA PWOL_NEXT_ROW_B_LEFT_XL
004AF7r 1  A9 00           LDA #0
004AF9r 1  E5 33           SBC PWOL_NEXT_ROW_A_RIGHT_XH
004AFBr 1  85 37           STA PWOL_NEXT_ROW_B_LEFT_XH
004AFDr 1               
004AFDr 1  38              SEC ; flip A_RIGHT Y to B_LEFT Y
004AFEr 1  A9 00           LDA #0
004B00r 1  E5 34           SBC PWOL_NEXT_ROW_A_RIGHT_YL
004B02r 1  85 38           STA PWOL_NEXT_ROW_B_LEFT_YL
004B04r 1  A9 00           LDA #0
004B06r 1  E5 35           SBC PWOL_NEXT_ROW_A_RIGHT_YH
004B08r 1  85 39           STA PWOL_NEXT_ROW_B_LEFT_YH
004B0Ar 1               
004B0Ar 1  AD rr rr        LDA CAMERA_CENTER_XL
004B0Dr 1  85 26            STA PWOL_CURRENT_XL
004B0Fr 1  85 45            STA PWOL_START_XL
004B11r 1               
004B11r 1  AD rr rr        LDA CAMERA_CENTER_YL
004B14r 1  85 28            STA PWOL_CURRENT_YL
004B16r 1  85 46            STA PWOL_START_YL
004B18r 1               
004B18r 1  AD rr rr        LDA CAMERA_CENTER_XH
004B1Br 1  85 27            STA PWOL_CURRENT_XH
004B1Dr 1  85 47            STA PWOL_START_XH
004B1Fr 1               
004B1Fr 1               
004B1Fr 1  AD rr rr        LDA CAMERA_CENTER_YH
004B22r 1  85 29            STA PWOL_CURRENT_YH
004B24r 1  85 48            STA PWOL_START_YH
004B26r 1               
004B26r 1  AD rr rr         LDA CAMERA_CELL_LINE_PTR
004B29r 1  85 22            STA PWOL_TUB_PTR_AL
004B2Br 1  85 24            STA PWOL_TUB_PTR_BL
004B2Dr 1  AD rr rr         LDA CAMERA_CELL_LINE_PTR+1
004B30r 1  85 23            STA PWOL_TUB_PTR_AH
004B32r 1  85 25            STA PWOL_TUB_PTR_BH
004B34r 1               
004B34r 1                  ; STZ VERA_ctrl
004B34r 1                  ; LDA #<(VRAM_TEXT_SCREEN+17*64)
004B34r 1                  ; STA VERA_addr_low
004B34r 1                  ; LDA #>(VRAM_TEXT_SCREEN+17*64)
004B34r 1                  ; STA VERA_addr_high
004B34r 1                  ; LDA #$21
004B34r 1                  ; STA VERA_addr_bank
004B34r 1                  ; LDA #26
004B34r 1                  ; STA VERA_data0
004B34r 1               
004B34r 1                 @zigzag_A: ; going to right and up the screen, including where we are currently..
004B34r 1  AC rr rr         LDY camera_cell_x
004B37r 1  80 00            BRA @zigzag_A_right
004B39r 1                  @ZAR_OUT:
004B39r 1               
004B39r 1                   @zigzag_A_right:
004B39r 1  C0 40                CPY #64  ;  make sure we don't go outside level..
004B3Br 1  B0 68                BCS @ZAR_NEXT ; if we're outside we'll just skip is OK here
004B3Dr 1  B1 22                LDA (PWOL_TUB_PTR_AL),y
004B3Fr 1  C9 81                CMP #129
004B41r 1  B0 62                BCS @ZAR_NEXT ; this isn't a valid spot in the level map..
004B43r 1                       ; bytes 1 and 4 were updated when we cleared the object list
004B43r 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
004B46r 1  D0 04                BNE :++
004B48r 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
004B4Br 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
004B4Cr 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
004B4Er 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
004B51r 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen... (could cause issues if we're high up? can't see behind?)
004B53r 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
004B55r 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
004B57r 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
004B5Ar 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
004B5Dr 1  8A                   TXA ; push new next to the Z buffer spot
004B5Er 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
004B60r 1                       ; bytes .1..4.6 filled in already..
004B60r 1  B1 22                LDA (PWOL_TUB_PTR_AL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
004B62r 1  10 08                BPL @ZAR_INSIDE_TUB
004B64r 1                     @ZAR_HIT_WALL_OUCH:
004B64r 1  AD rr rr               LDA WORLD_WALL_SPRITE_NUM
004B67r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
004B6Ar 1  A9 56                  LDA #86 ; max height..
004B6Cr 1                     @ZAR_INSIDE_TUB:
004B6Cr 1  85 40                  STA PWOL_CONVERT_HEIGHTS ;
004B6Er 1  85 42                  STA PWOL_CONVERT_HEIGHTS_L;
004B70r 1  38                     SEC
004B71r 1  A5 28                  LDA PWOL_CURRENT_YL
004B73r 1  F2 42                  SBC (PWOL_CONVERT_HEIGHTS_L)
004B75r 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
004B77r 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
004B79r 1  C9 78                  CMP #SCREEN_OUT_BOTTOM    ;  are we even visible?
004B7Br 1  90 0E                  BCC :+
004B7Dr 1  C5 55                  CMP PWOL_TOP_CHECK  ;     #SCREEN_OUT_TOP-50 ;PWOL_TOP_CHECK;
004B7Fr 1  B0 0A                  BCS :+
004B81r 1  CE rr rr               DEC OBJECT_LIST_BYTE6_NEXT
004B84r 1  BD rr rr               LDA OBJECT_LIST_BYTE6_NEXT,X ; grab the old next value
004B87r 1  92 3E                  STA (PWOL_Z_STARTS_PTR) ; patch the old one back in..
004B89r 1  80 1A                  BRA @ZAR_NEXT ; and skip THIS
004B8Br 1                       :
004B8Br 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
004B8Er 1  C5 54                  CMP PWOL_CENTER_Y_TOP ; is this above center on screen??
004B90r 1  B0 0E                  BCS :+ ; is not covering us
004B92r 1  A5 29                  LDA PWOL_CURRENT_YH
004B94r 1  C5 53                  CMP PWOL_CENTER_Y
004B96r 1  90 08                  BCC :+ ; its from ahead of us, OK
004B98r 1                         ; it was from below and covers us ..
004B98r 1  BD rr rr               LDA OBJECT_LIST_BYTE0_ADDRLOW,X
004B9Br 1  69 0F                  ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
004B9Dr 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X
004BA0r 1                         ;LDA #$D0
004BA0r 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
004BA0r 1  A5 27                : LDA PWOL_CURRENT_XH
004BA2r 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
004BA5r 1                         ; for debugging ...
004BA5r 1                     ;    STZ VERA_data0
004BA5r 1                     ;    STA VERA_data0
004BA5r 1                     ;    LDA PWOL_CURRENT_YH
004BA5r 1                     ;    STA VERA_data0
004BA5r 1                     ;    STZ VERA_data0
004BA5r 1               
004BA5r 1                    @ZAR_NEXT:
004BA5r 1                        ; calc next to the right..
004BA5r 1  C8                    INY
004BA6r 1  18                    CLC
004BA7r 1  A5 26                 LDA PWOL_CURRENT_XL
004BA9r 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
004BABr 1  85 26                 STA PWOL_CURRENT_XL
004BADr 1  A5 27                 LDA PWOL_CURRENT_XH
004BAFr 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
004BB1r 1  85 27                 STA PWOL_CURRENT_XH
004BB3r 1  AA                    TAX
004BB4r 1  18                    CLC
004BB5r 1  A5 28                 LDA PWOL_CURRENT_YL
004BB7r 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
004BB9r 1  85 28                 STA PWOL_CURRENT_YL
004BBBr 1  A5 29                 LDA PWOL_CURRENT_YH
004BBDr 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
004BBFr 1  85 29                 STA PWOL_CURRENT_YH
004BC1r 1               
004BC1r 1               
004BC1r 1  C5 56                 CMP PWOL_BOT_CHECK
004BC3r 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
004BC5r 1  C9 F0                 CMP #SCREEN_OUT_TOP
004BC7r 1  90 0B                 BCC @ZAR_ZIG_LEFT_SWITCH ; its bottom_out <= Y < top out .. because negatives are bigger
004BC9r 1                      :
004BC9r 1  E0 A0                 CPX #SCREEN_OUT_RIGHT ; check against right side
004BCBr 1  90 04                 BCC :+                ; if its within right side then go do next thing..
004BCDr 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
004BCFr 1  90 03                 BCC @ZAR_ZIG_LEFT_SWITCH ; we're to the right of the screen but not far enough to wrap around..
004BD1r 1  4C rr rr            : JMP @zigzag_A_right
004BD4r 1                    @ZAR_ZIG_LEFT_SWITCH: ;PWOL_NEXT_ROW_A_LEFT_XL   ; -> next row is left, going up the screen ..  +0,-1
004BD4r 1  A9 06                 LDA #TRY_AGAIN
004BD6r 1  85 44                 STA PWOL_TRIES_COUNTER
004BD8r 1               ;         INY
004BD8r 1  38                    SEC
004BD9r 1  A5 22                 LDA PWOL_TUB_PTR_AL
004BDBr 1  E9 40                 SBC #64 ;   0,-1
004BDDr 1  85 22                 STA PWOL_TUB_PTR_AL
004BDFr 1  A5 23                 LDA PWOL_TUB_PTR_AH
004BE1r 1  E9 00                 SBC #0
004BE3r 1  C9 rr                 CMP #>TUB_WORLD ; are we inside the world still?
004BE5r 1  B0 03                 BCS :+
004BE7r 1  4C rr rr              JMP @zigzag_B
004BEAr 1  85 23               : STA PWOL_TUB_PTR_AH
004BECr 1               
004BECr 1  18                    CLC
004BEDr 1  A5 26                 LDA PWOL_CURRENT_XL
004BEFr 1  65 2E                 ADC PWOL_NEXT_ROW_A_LEFT_XL
004BF1r 1  85 26                 STA PWOL_CURRENT_XL
004BF3r 1  A5 27                 LDA PWOL_CURRENT_XH
004BF5r 1  65 2F                 ADC PWOL_NEXT_ROW_A_LEFT_XH
004BF7r 1  85 27                 STA PWOL_CURRENT_XH
004BF9r 1  AA                    TAX
004BFAr 1  18                    CLC
004BFBr 1  A5 28                 LDA PWOL_CURRENT_YL
004BFDr 1  65 30                 ADC PWOL_NEXT_ROW_A_LEFT_YL
004BFFr 1  85 28                 STA PWOL_CURRENT_YL
004C01r 1  A5 29                 LDA PWOL_CURRENT_YH
004C03r 1  65 31                 ADC PWOL_NEXT_ROW_A_LEFT_YH
004C05r 1  80 21                 BRA @ZAR_ZIG_LEFT_SWITCH_CHECK
004C07r 1               
004C07r 1                  @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN:
004C07r 1  C6 44                 DEC PWOL_TRIES_COUNTER
004C09r 1  D0 03                 BNE @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT
004C0Br 1  4C rr rr              JMP @zigzag_B
004C0Er 1                  @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT:
004C0Er 1  88                    DEY
004C0Fr 1  38                    SEC
004C10r 1  A5 26                 LDA PWOL_CURRENT_XL
004C12r 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
004C14r 1  85 26                 STA PWOL_CURRENT_XL
004C16r 1  A5 27                 LDA PWOL_CURRENT_XH
004C18r 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
004C1Ar 1  85 27                 STA PWOL_CURRENT_XH
004C1Cr 1  AA                    TAX
004C1Dr 1  38                    SEC
004C1Er 1  A5 28                 LDA PWOL_CURRENT_YL
004C20r 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
004C22r 1  85 28                 STA PWOL_CURRENT_YL
004C24r 1  A5 29                 LDA PWOL_CURRENT_YH
004C26r 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
004C28r 1               
004C28r 1                  @ZAR_ZIG_LEFT_SWITCH_CHECK:
004C28r 1  85 29                 STA PWOL_CURRENT_YH
004C2Ar 1  C5 56                 CMP PWOL_BOT_CHECK
004C2Cr 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
004C2Er 1  C9 F0                 CMP #SCREEN_OUT_TOP
004C30r 1  90 D5                 BCC @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN   ; its bottom_out <= Y < top out .. because negatives are bigger
004C32r 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
004C34r 1  90 04                 BCC @zigzag_A_left
004C36r 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
004C38r 1  90 CD                 BCC @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
004C3Ar 1               
004C3Ar 1               
004C3Ar 1               
004C3Ar 1                  @zigzag_A_left:
004C3Ar 1  C0 40                CPY #64  ;  make sure we don't go outside level..
004C3Cr 1  B0 6E                BCS @ZAL_NEXT ; if we're outside we'll just skip is OK
004C3Er 1  B1 22                LDA (PWOL_TUB_PTR_AL),y
004C40r 1  C9 81                CMP #129
004C42r 1  B0 68                BCS @ZAL_NEXT ; we're outside level.
004C44r 1               
004C44r 1                       ; bytes 1 and 4 were updated when we cleared the object list
004C44r 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
004C47r 1  D0 04                BNE :++
004C49r 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
004C4Cr 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
004C4Dr 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
004C4Fr 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
004C52r 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen...
004C54r 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
004C56r 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
004C58r 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
004C5Br 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
004C5Er 1  8A                   TXA ; push new next to the Z buffer spot
004C5Fr 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
004C61r 1                       ; bytes .1..4.6 filled in already..
004C61r 1  AD rr rr             LDA WORLD_SPRITE_NUM
004C64r 1  9D rr rr             STA OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway..
004C67r 1  B1 22                LDA (PWOL_TUB_PTR_AL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
004C69r 1  10 08                BPL @ZAL_INSIDE_TUB
004C6Br 1                     @ZAL_HIT_WALL_OUCH:
004C6Br 1  AD rr rr               LDA WORLD_WALL_SPRITE_NUM
004C6Er 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
004C71r 1  A9 56                  LDA #86 ; max height..
004C73r 1                     @ZAL_INSIDE_TUB:
004C73r 1  85 40                  STA PWOL_CONVERT_HEIGHTS ;
004C75r 1  85 42                  STA PWOL_CONVERT_HEIGHTS_L;
004C77r 1  38                     SEC
004C78r 1  A5 28                  LDA PWOL_CURRENT_YL
004C7Ar 1  F2 42                  SBC (PWOL_CONVERT_HEIGHTS_L)
004C7Cr 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
004C7Er 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
004C80r 1  C9 78                  CMP #SCREEN_OUT_BOTTOM    ;  are we even visible?
004C82r 1  90 0E                  BCC :+
004C84r 1  C5 55                  CMP PWOL_TOP_CHECK  ;     #SCREEN_OUT_TOP-50 ;PWOL_TOP_CHECK;
004C86r 1  B0 0A                  BCS :+
004C88r 1  CE rr rr               DEC OBJECT_LIST_BYTE6_NEXT
004C8Br 1  BD rr rr               LDA OBJECT_LIST_BYTE6_NEXT,X ; grab the old next value
004C8Er 1  92 3E                  STA (PWOL_Z_STARTS_PTR) ; patch the old one back in..
004C90r 1  80 1A                  BRA @ZAL_NEXT ; and skip THIS
004C92r 1                       :
004C92r 1               
004C92r 1               
004C92r 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
004C95r 1  C5 54                  CMP PWOL_CENTER_Y_TOP ; is this above center on screen??
004C97r 1  B0 0E                  BCS :+ ; is not covering us
004C99r 1  A5 29                  LDA PWOL_CURRENT_YH
004C9Br 1  C5 53                  CMP PWOL_CENTER_Y
004C9Dr 1  90 08                  BCC :+ ; its from ahead of us, OK
004C9Fr 1                         ; it was from below and covers us ..
004C9Fr 1  BD rr rr               LDA OBJECT_LIST_BYTE0_ADDRLOW,X
004CA2r 1  69 0F                  ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
004CA4r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X
004CA7r 1                         ;LDA #$D0
004CA7r 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
004CA7r 1  A5 27                : LDA PWOL_CURRENT_XH
004CA9r 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
004CACr 1                    @ZAL_NEXT:
004CACr 1                        ; calc next to the LEFT
004CACr 1  88                    DEY
004CADr 1  38                    SEC
004CAEr 1  A5 26                 LDA PWOL_CURRENT_XL
004CB0r 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
004CB2r 1  85 26                 STA PWOL_CURRENT_XL
004CB4r 1  A5 27                 LDA PWOL_CURRENT_XH
004CB6r 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
004CB8r 1  85 27                 STA PWOL_CURRENT_XH
004CBAr 1  AA                    TAX
004CBBr 1  38                    SEC
004CBCr 1  A5 28                 LDA PWOL_CURRENT_YL
004CBEr 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
004CC0r 1  85 28                 STA PWOL_CURRENT_YL
004CC2r 1  A5 29                 LDA PWOL_CURRENT_YH
004CC4r 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
004CC6r 1  85 29                 STA PWOL_CURRENT_YH
004CC8r 1               
004CC8r 1               
004CC8r 1  C5 56                 CMP PWOL_BOT_CHECK
004CCAr 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
004CCCr 1  C9 F0                 CMP #SCREEN_OUT_TOP
004CCEr 1  90 0B                 BCC @ZAL_ZIG_RIGHT_SWITCH   ; its bottom_out <= Y < top out .. because negatives are bigger
004CD0r 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
004CD2r 1  90 04                 BCC :+                ; if its within right side then go do next thing..
004CD4r 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
004CD6r 1  90 03                 BCC @ZAL_ZIG_RIGHT_SWITCH     ; we're to the right of the screen but not far enough to wrap around..
004CD8r 1  4C rr rr            : JMP @zigzag_A_left
004CDBr 1               
004CDBr 1                    @ZAL_ZIG_RIGHT_SWITCH: ; up/right is +1,+1  from where we is right now ..
004CDBr 1  A9 06                 LDA #TRY_AGAIN
004CDDr 1  85 44                 STA PWOL_TRIES_COUNTER
004CDFr 1  C8                    INY
004CE0r 1  38                    SEC
004CE1r 1  A5 22                 LDA PWOL_TUB_PTR_AL
004CE3r 1  E9 40                 SBC #64
004CE5r 1  85 22                 STA PWOL_TUB_PTR_AL
004CE7r 1  A5 23                 LDA PWOL_TUB_PTR_AH
004CE9r 1  E9 00                 SBC #0
004CEBr 1  C9 rr                 CMP #>TUB_WORLD ; are we inside the world still?
004CEDr 1  B0 03                 BCS :+
004CEFr 1  4C rr rr              JMP @zigzag_B
004CF2r 1  85 23               : STA PWOL_TUB_PTR_AH
004CF4r 1               
004CF4r 1               
004CF4r 1  18                    CLC
004CF5r 1               
004CF5r 1  A5 26                 LDA PWOL_CURRENT_XL
004CF7r 1  65 32                 ADC PWOL_NEXT_ROW_A_RIGHT_XL
004CF9r 1  85 26                 STA PWOL_CURRENT_XL
004CFBr 1               
004CFBr 1  A5 27                 LDA PWOL_CURRENT_XH
004CFDr 1  65 33                 ADC PWOL_NEXT_ROW_A_RIGHT_XH
004CFFr 1  85 27                 STA PWOL_CURRENT_XH
004D01r 1  AA                    TAX
004D02r 1               
004D02r 1               
004D02r 1  18                    CLC
004D03r 1  A5 28                 LDA PWOL_CURRENT_YL
004D05r 1  65 34                 ADC PWOL_NEXT_ROW_A_RIGHT_YL
004D07r 1  85 28                 STA PWOL_CURRENT_YL
004D09r 1  A5 29                 LDA PWOL_CURRENT_YH
004D0Br 1  65 35                 ADC PWOL_NEXT_ROW_A_RIGHT_YH
004D0Dr 1  80 1E                 BRA @ZAL_ZIG_RIGHT_SWITCH_CHECK
004D0Fr 1               
004D0Fr 1               
004D0Fr 1               
004D0Fr 1                  @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN:
004D0Fr 1  C6 44                 DEC PWOL_TRIES_COUNTER
004D11r 1  F0 2F                 BEQ @zigzag_B
004D13r 1                  @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN_GO_RIGHT:
004D13r 1  C8                    INY
004D14r 1  18                    CLC
004D15r 1  A5 26                 LDA PWOL_CURRENT_XL
004D17r 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
004D19r 1  85 26                 STA PWOL_CURRENT_XL
004D1Br 1  A5 27                 LDA PWOL_CURRENT_XH
004D1Dr 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
004D1Fr 1  85 27                 STA PWOL_CURRENT_XH
004D21r 1  AA                    TAX
004D22r 1  18                    CLC
004D23r 1  A5 28                 LDA PWOL_CURRENT_YL
004D25r 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
004D27r 1  85 28                 STA PWOL_CURRENT_YL
004D29r 1  A5 29                 LDA PWOL_CURRENT_YH
004D2Br 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
004D2Dr 1                  @ZAL_ZIG_RIGHT_SWITCH_CHECK:
004D2Dr 1  85 29                 STA PWOL_CURRENT_YH
004D2Fr 1  C5 56                 CMP PWOL_BOT_CHECK
004D31r 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
004D33r 1  C9 F0                 CMP #SCREEN_OUT_TOP
004D35r 1  90 D8                 BCC @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN    ; its bottom_out <= Y < top out .. because negatives are bigger
004D37r 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
004D39r 1  90 04                 BCC :+
004D3Br 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
004D3Dr 1  90 D0                 BCC @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
004D3Fr 1  4C rr rr            : JMP @zigzag_A_right
004D42r 1               
004D42r 1               
004D42r 1                 @zigzag_B: ; going to left and down the screen, including where we are currently..
004D42r 1  38                 SEC
004D43r 1  A5 45              LDA PWOL_START_XL
004D45r 1  E5 2A              SBC PWOL_ACROSS_ROW_XL
004D47r 1  85 26              STA PWOL_CURRENT_XL
004D49r 1  A5 47              LDA PWOL_START_XH
004D4Br 1  E5 2B              SBC PWOL_ACROSS_ROW_XH
004D4Dr 1  85 27              STA PWOL_CURRENT_XH
004D4Fr 1               
004D4Fr 1               
004D4Fr 1  38                 SEC
004D50r 1  A5 46              LDA PWOL_START_YL
004D52r 1  E5 2C              SBC PWOL_ACROSS_ROW_YL
004D54r 1  85 28              STA PWOL_CURRENT_YL
004D56r 1  A5 48              LDA PWOL_START_YH
004D58r 1  E5 2D              SBC PWOL_ACROSS_ROW_YH
004D5Ar 1  85 29              STA PWOL_CURRENT_YH
004D5Cr 1               
004D5Cr 1  AC rr rr           LDY camera_cell_x   ;  eh voila! we haz pointer to ze row to start on .. woot!
004D5Fr 1  88                 DEY ; start left
004D60r 1               
004D60r 1                  @zigzag_B_left:
004D60r 1  C0 40                CPY #64  ;  make sure we don't go outside level..
004D62r 1  B0 6E                BCS @ZBL_NEXT ; if we're outside we'll just skip is OK
004D64r 1  B1 24                LDA (PWOL_TUB_PTR_BL),y
004D66r 1  C9 81                CMP #129
004D68r 1  B0 68                BCS @ZBL_NEXT ; we're outside level.
004D6Ar 1               
004D6Ar 1                       ; bytes 1 and 4 were updated when we cleared the object list
004D6Ar 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
004D6Dr 1  D0 04                BNE :++
004D6Fr 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
004D72r 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
004D73r 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
004D75r 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
004D78r 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen...
004D7Ar 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
004D7Cr 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
004D7Er 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
004D81r 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
004D84r 1  8A                   TXA ; push new next to the Z buffer spot
004D85r 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
004D87r 1                       ; bytes .1..4.6 filled in already..
004D87r 1  AD rr rr             LDA WORLD_SPRITE_NUM
004D8Ar 1  9D rr rr             STA OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway..
004D8Dr 1  B1 24                LDA (PWOL_TUB_PTR_BL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
004D8Fr 1  10 08                BPL @ZBL_INSIDE_TUB
004D91r 1                     @ZBL_HIT_WALL_OUCH:
004D91r 1  AD rr rr               LDA WORLD_WALL_SPRITE_NUM
004D94r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
004D97r 1  A9 56                  LDA #86 ; max height..
004D99r 1                     @ZBL_INSIDE_TUB:
004D99r 1  85 40                  STA PWOL_CONVERT_HEIGHTS ;
004D9Br 1  85 42                  STA PWOL_CONVERT_HEIGHTS_L;
004D9Dr 1  38                     SEC
004D9Er 1  A5 28                  LDA PWOL_CURRENT_YL
004DA0r 1  F2 42                  SBC (PWOL_CONVERT_HEIGHTS_L)
004DA2r 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
004DA4r 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
004DA6r 1  C9 78                  CMP #SCREEN_OUT_BOTTOM    ;  are we even visible?
004DA8r 1  90 0E                  BCC :+
004DAAr 1  C5 55                  CMP PWOL_TOP_CHECK  ;     #SCREEN_OUT_TOP-50 ;PWOL_TOP_CHECK;
004DACr 1  B0 0A                  BCS :+
004DAEr 1  CE rr rr               DEC OBJECT_LIST_BYTE6_NEXT
004DB1r 1  BD rr rr               LDA OBJECT_LIST_BYTE6_NEXT,X ; grab the old next value
004DB4r 1  92 3E                  STA (PWOL_Z_STARTS_PTR) ; patch the old one back in..
004DB6r 1  80 1A                  BRA @ZBL_NEXT ; and skip THIS
004DB8r 1                       :
004DB8r 1               
004DB8r 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
004DBBr 1  C5 54                  CMP PWOL_CENTER_Y_TOP ; is this above center on screen??
004DBDr 1  B0 0E                  BCS :+ ; is not covering us
004DBFr 1  A5 29                  LDA PWOL_CURRENT_YH
004DC1r 1  C5 53                  CMP PWOL_CENTER_Y
004DC3r 1  90 08                  BCC :+ ; its from ahead of us, OK
004DC5r 1                         ; it was from below and covers us ..
004DC5r 1  BD rr rr               LDA OBJECT_LIST_BYTE0_ADDRLOW,X
004DC8r 1  69 0F                  ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
004DCAr 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X
004DCDr 1                         ;LDA #$D0
004DCDr 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
004DCDr 1  A5 27                : LDA PWOL_CURRENT_XH
004DCFr 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
004DD2r 1                    @ZBL_NEXT:
004DD2r 1                        ; calc next to the LEFT
004DD2r 1  88                    DEY
004DD3r 1  38                    SEC
004DD4r 1  A5 26                 LDA PWOL_CURRENT_XL
004DD6r 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
004DD8r 1  85 26                 STA PWOL_CURRENT_XL
004DDAr 1  A5 27                 LDA PWOL_CURRENT_XH
004DDCr 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
004DDEr 1  85 27                 STA PWOL_CURRENT_XH
004DE0r 1  AA                    TAX
004DE1r 1  38                    SEC
004DE2r 1  A5 28                 LDA PWOL_CURRENT_YL
004DE4r 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
004DE6r 1  85 28                 STA PWOL_CURRENT_YL
004DE8r 1  A5 29                 LDA PWOL_CURRENT_YH
004DEAr 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
004DECr 1  85 29                 STA PWOL_CURRENT_YH
004DEEr 1               
004DEEr 1               
004DEEr 1  C5 56                 CMP PWOL_BOT_CHECK
004DF0r 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
004DF2r 1  C9 F0                 CMP #SCREEN_OUT_TOP
004DF4r 1  90 0B                 BCC @ZBL_ZIG_RIGHT_SWITCH     ; its bottom_out <= Y < top out .. because negatives are bigger
004DF6r 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
004DF8r 1  90 04                 BCC :+                ; if its within right side then go do next thing..
004DFAr 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
004DFCr 1  90 03                 BCC @ZBL_ZIG_RIGHT_SWITCH     ; we're to the right of the screen but not far enough to wrap around..
004DFEr 1  4C rr rr            : JMP @zigzag_B_left
004E01r 1               
004E01r 1               
004E01r 1               
004E01r 1                    @ZBL_ZIG_RIGHT_SWITCH: ; DOWN/LEFT to start right is is 0,+1  from where we is right now ..
004E01r 1                        ;INY
004E01r 1                        ;INY
004E01r 1  A9 06                 LDA #TRY_AGAIN
004E03r 1  85 44                 STA PWOL_TRIES_COUNTER
004E05r 1  18                    CLC
004E06r 1  A5 24                 LDA PWOL_TUB_PTR_BL
004E08r 1  69 40                 ADC #64
004E0Ar 1  85 24                 STA PWOL_TUB_PTR_BL
004E0Cr 1  A5 25                 LDA PWOL_TUB_PTR_BH
004E0Er 1  69 00                 ADC #0
004E10r 1  C9 rr                 CMP #>TUB_WORLD+8
004E12r 1  90 01                 BCC :+
004E14r 1  60                    rts
004E15r 1  85 25               : STA PWOL_TUB_PTR_BH
004E17r 1               
004E17r 1               
004E17r 1  18                    CLC
004E18r 1               
004E18r 1  A5 26                 LDA PWOL_CURRENT_XL
004E1Ar 1  65 3A                 ADC PWOL_NEXT_ROW_B_RIGHT_XL
004E1Cr 1  85 26                 STA PWOL_CURRENT_XL
004E1Er 1               
004E1Er 1  A5 27                 LDA PWOL_CURRENT_XH
004E20r 1  65 3B                 ADC PWOL_NEXT_ROW_B_RIGHT_XH
004E22r 1  85 27                 STA PWOL_CURRENT_XH
004E24r 1  AA                    TAX
004E25r 1               
004E25r 1               
004E25r 1  18                    CLC
004E26r 1  A5 28                 LDA PWOL_CURRENT_YL
004E28r 1  65 3C                 ADC PWOL_NEXT_ROW_B_RIGHT_YL
004E2Ar 1  85 28                 STA PWOL_CURRENT_YL
004E2Cr 1  A5 29                 LDA PWOL_CURRENT_YH
004E2Er 1  65 3D                 ADC PWOL_NEXT_ROW_B_RIGHT_YH
004E30r 1  80 1F                 BRA @ZBL_ZIG_RIGHT_SWITCH_CHECK
004E32r 1               
004E32r 1                  @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN:
004E32r 1  C6 44                 DEC PWOL_TRIES_COUNTER
004E34r 1  D0 01                 BNE @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN_GO_RIGHT
004E36r 1                  @ZBL_RTS:
004E36r 1               ;          STZ VERA_data0
004E36r 1                ;         STZ VERA_data0
004E36r 1                 ;        STZ VERA_data0
004E36r 1                  ;       STZ VERA_data0
004E36r 1  60                 rts
004E37r 1                  @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN_GO_RIGHT:
004E37r 1  C8                    INY
004E38r 1  18                    CLC
004E39r 1  A5 26                 LDA PWOL_CURRENT_XL
004E3Br 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
004E3Dr 1  85 26                 STA PWOL_CURRENT_XL
004E3Fr 1  A5 27                 LDA PWOL_CURRENT_XH
004E41r 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
004E43r 1  85 27                 STA PWOL_CURRENT_XH
004E45r 1  AA                    TAX
004E46r 1  18                    CLC
004E47r 1  A5 28                 LDA PWOL_CURRENT_YL
004E49r 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
004E4Br 1  85 28                 STA PWOL_CURRENT_YL
004E4Dr 1  A5 29                 LDA PWOL_CURRENT_YH
004E4Fr 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
004E51r 1                  @ZBL_ZIG_RIGHT_SWITCH_CHECK:
004E51r 1  85 29                 STA PWOL_CURRENT_YH
004E53r 1  C5 56                 CMP PWOL_BOT_CHECK
004E55r 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
004E57r 1  C9 F0                 CMP #SCREEN_OUT_TOP
004E59r 1  90 D7                 BCC @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN    ; its bottom_out <= Y < top out .. because negatives are bigger
004E5Br 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
004E5Dr 1  90 04                 BCC @zigzag_B_right
004E5Fr 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
004E61r 1  90 CF                 BCC @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
004E63r 1               
004E63r 1               
004E63r 1               
004E63r 1                   @zigzag_B_right:
004E63r 1  C0 40                CPY #64  ;  make sure we don't go outside level..
004E65r 1  B0 6E                BCS @ZBR_NEXT ; if we're outside we'll just skip is OK
004E67r 1  B1 24                LDA (PWOL_TUB_PTR_BL),y
004E69r 1  C9 81                CMP #129
004E6Br 1  B0 68                BCS @ZBR_NEXT ; we're outside level.
004E6Dr 1               
004E6Dr 1                       ; bytes 1 and 4 were updated when we cleared the object list
004E6Dr 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
004E70r 1  D0 04                BNE :++
004E72r 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
004E75r 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
004E76r 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
004E78r 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
004E7Br 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen...
004E7Dr 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
004E7Fr 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
004E81r 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
004E84r 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
004E87r 1  8A                   TXA ; push new next to the Z buffer spot
004E88r 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
004E8Ar 1                       ; bytes .1..4.6 filled in already..
004E8Ar 1  AD rr rr             LDA WORLD_SPRITE_NUM
004E8Dr 1  9D rr rr             STA OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway..
004E90r 1  B1 24                LDA (PWOL_TUB_PTR_BL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
004E92r 1  10 08                BPL @ZBR_INSIDE_TUB
004E94r 1                     @ZBR_HIT_WALL_OUCH:
004E94r 1  AD rr rr               LDA WORLD_WALL_SPRITE_NUM
004E97r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
004E9Ar 1  A9 56                  LDA #86 ; max height..
004E9Cr 1                     @ZBR_INSIDE_TUB:
004E9Cr 1  85 40                  STA PWOL_CONVERT_HEIGHTS ;
004E9Er 1  85 42                  STA PWOL_CONVERT_HEIGHTS_L;
004EA0r 1  38                     SEC
004EA1r 1  A5 28                  LDA PWOL_CURRENT_YL
004EA3r 1  F2 42                  SBC (PWOL_CONVERT_HEIGHTS_L)
004EA5r 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
004EA7r 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
004EA9r 1  C9 78                  CMP #SCREEN_OUT_BOTTOM    ;  are we even visible?
004EABr 1  90 0E                  BCC :+
004EADr 1  C5 55                  CMP PWOL_TOP_CHECK  ;     #SCREEN_OUT_TOP-50 ;PWOL_TOP_CHECK;
004EAFr 1  B0 0A                  BCS :+
004EB1r 1  CE rr rr               DEC OBJECT_LIST_BYTE6_NEXT
004EB4r 1  BD rr rr               LDA OBJECT_LIST_BYTE6_NEXT,X ; grab the old next value
004EB7r 1  92 3E                  STA (PWOL_Z_STARTS_PTR) ; patch the old one back in..
004EB9r 1  80 1A                  BRA @ZBR_NEXT ; and skip THIS
004EBBr 1                       :
004EBBr 1               
004EBBr 1               
004EBBr 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
004EBEr 1  C5 54                  CMP PWOL_CENTER_Y_TOP ; is this above center on screen??
004EC0r 1  B0 0E                  BCS :+ ; is not covering us
004EC2r 1  A5 29                  LDA PWOL_CURRENT_YH
004EC4r 1  C5 53                  CMP PWOL_CENTER_Y
004EC6r 1  90 08                  BCC :+ ; its from ahead of us, OK
004EC8r 1                         ; it was from below and covers us ..
004EC8r 1  BD rr rr               LDA OBJECT_LIST_BYTE0_ADDRLOW,X
004ECBr 1  69 0F                  ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
004ECDr 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X
004ED0r 1                         ;LDA #$D0
004ED0r 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
004ED0r 1  A5 27                : LDA PWOL_CURRENT_XH
004ED2r 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
004ED5r 1                    @ZBR_NEXT:
004ED5r 1                        ; calc next to the right..
004ED5r 1  C8                    INY
004ED6r 1  18                    CLC
004ED7r 1  A5 26                 LDA PWOL_CURRENT_XL
004ED9r 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
004EDBr 1  85 26                 STA PWOL_CURRENT_XL
004EDDr 1  A5 27                 LDA PWOL_CURRENT_XH
004EDFr 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
004EE1r 1  85 27                 STA PWOL_CURRENT_XH
004EE3r 1  AA                    TAX
004EE4r 1  18                    CLC
004EE5r 1  A5 28                 LDA PWOL_CURRENT_YL
004EE7r 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
004EE9r 1  85 28                 STA PWOL_CURRENT_YL
004EEBr 1  A5 29                 LDA PWOL_CURRENT_YH
004EEDr 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
004EEFr 1  85 29                 STA PWOL_CURRENT_YH
004EF1r 1               
004EF1r 1               
004EF1r 1  C5 56                 CMP PWOL_BOT_CHECK
004EF3r 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
004EF5r 1  C9 F0                 CMP #SCREEN_OUT_TOP
004EF7r 1  90 0B                 BCC @ZBR_ZIG_LEFT_SWITCH     ; its bottom_out <= Y < top out .. because negatives are bigger
004EF9r 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
004EFBr 1  90 04                 BCC :+                ; if its within right side then go do next thing..
004EFDr 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
004EFFr 1  90 03                 BCC @ZBR_ZIG_LEFT_SWITCH        ; we're to the right of the screen but not far enough to wrap around..
004F01r 1  4C rr rr            : JMP @zigzag_B_right
004F04r 1               
004F04r 1               
004F04r 1               
004F04r 1                    @ZBR_ZIG_LEFT_SWITCH: ;PWOL_NEXT_ROW_A_LEFT_XL   ; -> next row is left, going down the screen ..  +1,+1
004F04r 1  A9 06                 LDA #TRY_AGAIN
004F06r 1  85 44                 STA PWOL_TRIES_COUNTER
004F08r 1  88                   DEY ; have to go this to match where the thing is going .. 0,0
004F09r 1  18                    CLC
004F0Ar 1  A5 24                 LDA PWOL_TUB_PTR_BL
004F0Cr 1  69 40                 ADC #64 ;   0,-1
004F0Er 1  85 24                 STA PWOL_TUB_PTR_BL
004F10r 1  A5 25                 LDA PWOL_TUB_PTR_BH
004F12r 1  69 00                 ADC #0
004F14r 1  C9 rr                 CMP #>TUB_WORLD+8
004F16r 1  90 01                 BCC :+
004F18r 1  60                    rts
004F19r 1  85 25               : STA PWOL_TUB_PTR_BH
004F1Br 1               
004F1Br 1  18                    CLC
004F1Cr 1  A5 26                 LDA PWOL_CURRENT_XL
004F1Er 1  65 36                 ADC PWOL_NEXT_ROW_B_LEFT_XL
004F20r 1  85 26                 STA PWOL_CURRENT_XL
004F22r 1  A5 27                 LDA PWOL_CURRENT_XH
004F24r 1  65 37                 ADC PWOL_NEXT_ROW_B_LEFT_XH
004F26r 1  85 27                 STA PWOL_CURRENT_XH
004F28r 1  AA                    TAX
004F29r 1  18                    CLC
004F2Ar 1  A5 28                 LDA PWOL_CURRENT_YL
004F2Cr 1  65 38                 ADC PWOL_NEXT_ROW_B_LEFT_YL
004F2Er 1  85 28                 STA PWOL_CURRENT_YL
004F30r 1  A5 29                 LDA PWOL_CURRENT_YH
004F32r 1  65 39                 ADC PWOL_NEXT_ROW_B_LEFT_YH
004F34r 1  80 1F                 BRA @ZBR_ZIG_LEFT_SWITCH_CHECK
004F36r 1               
004F36r 1               
004F36r 1               
004F36r 1                  @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN:
004F36r 1  C6 44                 DEC PWOL_TRIES_COUNTER
004F38r 1  D0 01                 BNE @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT
004F3Ar 1                  @ZBR_RTS:
004F3Ar 1               ;          STZ VERA_data0
004F3Ar 1               ;          STZ VERA_data0
004F3Ar 1               ;          STZ VERA_data0
004F3Ar 1               ;          STZ VERA_data0
004F3Ar 1  60                    rts
004F3Br 1                  @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT:
004F3Br 1  88                    DEY
004F3Cr 1  38                    SEC
004F3Dr 1  A5 26                 LDA PWOL_CURRENT_XL
004F3Fr 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
004F41r 1  85 26                 STA PWOL_CURRENT_XL
004F43r 1  A5 27                 LDA PWOL_CURRENT_XH
004F45r 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
004F47r 1  85 27                 STA PWOL_CURRENT_XH
004F49r 1  AA                    TAX
004F4Ar 1  38                    SEC
004F4Br 1  A5 28                 LDA PWOL_CURRENT_YL
004F4Dr 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
004F4Fr 1  85 28                 STA PWOL_CURRENT_YL
004F51r 1  A5 29                 LDA PWOL_CURRENT_YH
004F53r 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
004F55r 1               
004F55r 1               @ZBR_ZIG_LEFT_SWITCH_CHECK:
004F55r 1  85 29                 STA PWOL_CURRENT_YH
004F57r 1  C5 56                 CMP PWOL_BOT_CHECK
004F59r 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
004F5Br 1  C9 F0                 CMP #SCREEN_OUT_TOP
004F5Dr 1  90 D7                 BCC @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN   ; its bottom_out <= Y < top out .. because negatives are bigger
004F5Fr 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
004F61r 1  90 04                 BCC :+
004F63r 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
004F65r 1  90 CF                 BCC @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
004F67r 1  4C rr rr            : JMP @zigzag_B_left
004F6Ar 1               
004F6Ar 1               
004F6Ar 1               draw_object_list:
004F6Ar 1  AC rr rr          LDY NUM_AVAIL_SPRITES ; num sprites can write
004F6Dr 1  D0 03             BNE :+
004F6Fr 1  4C rr rr          JMP draw_object_list_to_BUFFER
004F72r 1                  :
004F72r 1  AD rr rr         LDA NUM_RESERVED_SPRITES
004F75r 1               ;    INC VERA_LOCK
004F75r 1               ;    BNE @unlock_vera   there's no actual way to get here and not have vera unlock.. s
004F75r 1               ;  so instead, we're going to DEC the VERA_LOCK after the new frame is ready, which is after this function..
004F75r 1               
004F75r 1               
004F75r 1               
004F75r 1               
004F75r 1  9C 25 9F         STZ VERA_ctrl
004F78r 1  64 22            STZ ZP_PTR
004F7Ar 1  0A               ASL
004F7Br 1  26 22            ROL ZP_PTR
004F7Dr 1  0A               ASL
004F7Er 1  26 22            ROL ZP_PTR
004F80r 1  0A               ASL
004F81r 1  26 22            ROL ZP_PTR
004F83r 1  8D 20 9F         STA VERA_addr_low
004F86r 1  18               CLC
004F87r 1  A5 22            LDA ZP_PTR
004F89r 1  69 EC            ADC #>VRAM_SPRITE_BUF;  #>VRAM_SPRITE_BUF ; #>VRAM_sprite_attributes;
004F8Br 1  8D 21 9F         sta VERA_addr_high
004F8Er 1  A9 11            lda #$11
004F90r 1  8D 22 9F         sta VERA_addr_bank
004F93r 1  AD rr rr         LDA SPRITE_OBJECT_ENABLE
004F96r 1  D0 22            BNE @SET_Z_PTR
004F98r 1  A9 01            LDA #1
004F9Ar 1  A2 0C            LDX #$0C
004F9Cr 1  9C 23 9F        : STZ VERA_data0  ; addr low
004F9Fr 1  8D 23 9F          STA VERA_data0  ; mod/addr_hi
004FA2r 1  9C 23 9F          STZ VERA_data0  ; xl
004FA5r 1  9C 23 9F          STZ VERA_data0  ; Xh
004FA8r 1  9C 23 9F          STZ VERA_data0  ; yl
004FABr 1  9C 23 9F          STZ VERA_data0  ; yh
004FAEr 1  8E 23 9F          STX VERA_data0
004FB1r 1  9C 23 9F          STZ VERA_data0
004FB4r 1  88                DEY
004FB5r 1  D0 E5             BNE :-
004FB7r 1  4C rr rr         JMP draw_object_list_to_BUFFER
004FBAr 1               
004FBAr 1               
004FBAr 1               @SET_Z_PTR:
004FBAr 1  64 22            STZ ZP_PTR
004FBCr 1  A9 rr            LDA #>OBJECT_LIST_Z_START_POINTERS
004FBEr 1  85 23            STA ZP_PTR+1
004FC0r 1               
004FC0r 1               
004FC0r 1                 @NEXT_Z: ; Z=0 is invalid...
004FC0r 1  E6 22              INC ZP_PTR
004FC2r 1  D0 1C              BNE @Z_LOOP
004FC4r 1  AD 23 9F           : LDA VERA_data0
004FC7r 1  AD 23 9F             LDA VERA_data0
004FCAr 1  9C 23 9F             STZ VERA_data0
004FCDr 1  9C 23 9F             STZ VERA_data0
004FD0r 1  AD 23 9F             LDA VERA_data0
004FD3r 1  AD 23 9F             LDA VERA_data0
004FD6r 1  AD 23 9F             LDA VERA_data0
004FD9r 1  AD 23 9F             LDA VERA_data0
004FDCr 1  88                   DEY
004FDDr 1  D0 E5                BNE :-
004FDFr 1                  @rts:
004FDFr 1  60                 rts
004FE0r 1                 @Z_LOOP:
004FE0r 1  B2 22              LDA (ZP_PTR) ; get our first victim
004FE2r 1  AA                 TAX
004FE3r 1  A9 00              LDA #0
004FE5r 1  92 22              STA (ZP_PTR) ; zero this Z_next for now
004FE7r 1  8A                 TXA
004FE8r 1                    @OBJ_LOOP:
004FE8r 1  AA                    TAX
004FE9r 1  F0 D5                 BEQ @NEXT_Z ; got a bum next pointer there ...
004FEBr 1  BD rr rr              LDA OBJECT_LIST_BYTE0_ADDRLOW,X
004FEEr 1  8D 23 9F              STA VERA_data0
004FF1r 1  BD rr rr              LDA OBJECT_LIST_BYTE1_MODE,x
004FF4r 1  8D 23 9F              STA VERA_data0
004FF7r 1  BD rr rr              LDA OBJECT_LIST_BYTE2_X,x
004FFAr 1  8D 23 9F              STA VERA_data0
004FFDr 1  C9 A0                 CMP #SCREEN_OUT_RIGHT
004FFFr 1  A9 00                 LDA #0
005001r 1  90 02                 BCC :+
005003r 1  A9 FF                 LDA #$FF
005005r 1  8D 23 9F            : STA VERA_data0
005008r 1               
005008r 1  BD rr rr              LDA OBJECT_LIST_BYTE3_Y,x
00500Br 1  8D 23 9F              STA VERA_data0
00500Er 1  C9 78                 CMP #SCREEN_OUT_BOTTOM
005010r 1  A9 00                 LDA #0
005012r 1  90 02                 BCC :+
005014r 1  A9 FF                 LDA #$FF
005016r 1  8D 23 9F            : STA VERA_data0
005019r 1  BD rr rr              LDA OBJECT_LIST_BYTE4_ZFLIPS,x
00501Cr 1  8D 23 9F              STA VERA_data0
00501Fr 1  BD rr rr              LDA OBJECT_LIST_BYTE5_SIZE,x
005022r 1  8D 23 9F              STA VERA_data0
005025r 1  BD rr rr              LDA OBJECT_LIST_BYTE6_NEXT,x
005028r 1  88                    DEY ; decrement that Y
005029r 1  D0 BD                 BNE @OBJ_LOOP ; still sprite slots left.. woot!
00502Br 1  92 22                 STA (ZP_PTR) ; oops.. save that last thing and exit..
00502Dr 1               draw_object_list_to_BUFFER:
00502Dr 1               DOLB_ZTRACKER = ZP_PTR
00502Dr 1               DOLB_ZTRACKERH = ZP_PTR+1
00502Dr 1               DOLB_BUFFER_HIGH_BYTE = ZP_PTR+2
00502Dr 1               DOLB_CALC_DEST_LOW = ZP_PTR+3
00502Dr 1               DOLB_CALC_DEST_HIGH = ZP_PTR+4
00502Dr 1               DOLB_CALC_SCRATCH = ZP_PTR+5
00502Dr 1               DOLB_STOP_BOTTOM = ZP_PTR+6
00502Dr 1               DOLB_Y_CALC_POINTER = ZP_PTR+7
00502Dr 1               DOLB_Y_CALC_POINTERH = ZP_PTR+8
00502Dr 1               
00502Dr 1  A9 0C           LDA #12
00502Fr 1  8D 25 9F        STA VERA_ctrl
005032r 1  9C 29 9F        STZ FX_CACHE_L ; zero out the cache bytes..
005035r 1  9C 2A 9F        STZ FX_CACHE_M
005038r 1  9C 2B 9F        STZ FX_CACHE_H
00503Br 1  9C 2C 9F        STZ FX_CACHE_U
00503Er 1               
00503Er 1  A9 04           LDA #4  ;    DCSEL 2 with address select 0.. to be used as destination..
005040r 1  8D 25 9F        STA VERA_ctrl
005043r 1  9C 2C 9F        STZ FX_MULT
005046r 1  A9 60           LDA #%01100000
005048r 1  8D 29 9F        STA FX_CTRL ;     cache write enable, cache fill and other stuff disabled
00504Br 1               
00504Br 1  9C 20 9F        STZ VERA_addr_low
00504Er 1               ;        A        B     CURRENT BITMAP BUFFER
00504Er 1               ;   0   display  dirty    A is being displayed, B to be drawn on
00504Er 1               ;  64   display  ready    B  is ready for swap
00504Er 1               ; 128   dirty    display  B is being displayed, A to be drawn on
00504Er 1               ; 192   ready    display  A  is ready for swap
00504Er 1               
00504Er 1  64 29           STZ DOLB_Y_CALC_POINTER
005050r 1  AD rr rr        LDA CURRENT_BITMAP_BUFFER
005053r 1  10 08           BPL @DRAW_ON_B
005055r 1               @DRAW_ON_A:
005055r 1  A9 18           LDA #>VRAM_BITMAP_LAYERA
005057r 1  A2 80           LDX #>VRAM_BITMAP_LAYERB
005059r 1  A0 rr           LDY #>BUFFER_A_OFFSETS_HIGH
00505Br 1  80 06           BRA @GO_DRAW
00505Dr 1               @DRAW_ON_B:
00505Dr 1  A9 80           LDA #>VRAM_BITMAP_LAYERB
00505Fr 1  A2 E4           LDX #>VRAM_TEXT_SCREEN
005061r 1  A0 rr           LDY #>BUFFER_B_OFFSETS_HIGH
005063r 1               @GO_DRAW:
005063r 1  85 24           STA DOLB_BUFFER_HIGH_BYTE
005065r 1  CA              DEX
005066r 1  86 28           STX DOLB_STOP_BOTTOM
005068r 1  84 2A           STY DOLB_Y_CALC_POINTERH
00506Ar 1  8D 21 9F        STA VERA_addr_high
00506Dr 1  A9 31           LDA #$31; 4 at a time
00506Fr 1  8D 22 9F        STA VERA_addr_bank
005072r 1                  ; clear the buffer ...
005072r 1               
005072r 1               
005072r 1  18              CLC
005073r 1  A9 00           LDA #0
005075r 1  A2 78           LDX #120;120 ; do 160*120 = 19,200/4 = 4,800 iterations.. if we do 20 iterations a pop.. 240 x iterations
005077r 1               
005077r 1               
005077r 1  9C 23 9F      : STZ VERA_data0 ;     trigger cache write - 4 bytes / 8px
00507Ar 1  9C 23 9F        STZ VERA_data0
00507Dr 1  9C 23 9F        STZ VERA_data0
005080r 1  9C 23 9F        STZ VERA_data0 ; 32 px cleared
005083r 1               
005083r 1  9C 23 9F        STZ VERA_data0
005086r 1  9C 23 9F        STZ VERA_data0
005089r 1  9C 23 9F        STZ VERA_data0
00508Cr 1  9C 23 9F        STZ VERA_data0 ; 64 px cleared
00508Fr 1               
00508Fr 1  9C 23 9F        STZ VERA_data0
005092r 1  9C 23 9F        STZ VERA_data0
005095r 1  9C 23 9F        STZ VERA_data0
005098r 1  9C 23 9F        STZ VERA_data0 ; 96
00509Br 1               
00509Br 1  9C 23 9F        STZ VERA_data0
00509Er 1  9C 23 9F        STZ VERA_data0
0050A1r 1  9C 23 9F        STZ VERA_data0
0050A4r 1  9C 23 9F        STZ VERA_data0 ; 128
0050A7r 1               
0050A7r 1  9C 23 9F        STZ VERA_data0
0050AAr 1  9C 23 9F        STZ VERA_data0
0050ADr 1  9C 23 9F        STZ VERA_data0
0050B0r 1  9C 23 9F        STZ VERA_data0 ; 160 px cleared
0050B3r 1               
0050B3r 1  18              CLC
0050B4r 1  AD 20 9F        LDA VERA_addr_low
0050B7r 1  69 50           ADC #80     ;     increment A for the low part the address
0050B9r 1  8D 20 9F        STA VERA_addr_low
0050BCr 1  AD 21 9F        LDA VERA_addr_high
0050BFr 1  69 00           ADC #0
0050C1r 1  8D 21 9F        STA VERA_addr_high
0050C4r 1               
0050C4r 1  CA              DEX
0050C5r 1  D0 B0           BNE :- ; 85 * 120 = 10,200 .. + 119 * 14 =1,666 .. 11,866 cycles to clear entire screen.. ok
0050C7r 1               
0050C7r 1  A9 E0            LDA #$E0
0050C9r 1  8D 29 9F        STA FX_CTRL
0050CCr 1               ;    STZ FX_CTRL
0050CCr 1  A9 FF           LDA #$FF
0050CEr 1  85 22           STA DOLB_ZTRACKER
0050D0r 1  A9 rr           LDA #>OBJECT_LIST_Z_START_POINTERS
0050D2r 1  85 23           STA DOLB_ZTRACKERH
0050D4r 1  80 0B           BRA @GO_Z
0050D6r 1                 @DONE_Z: ; Z=0 is invalid...
0050D6r 1  9C 29 9F           STZ FX_CTRL ;     clear the cache writing for now
0050D9r 1  9C 25 9F           STZ VERA_ctrl  ;     switch back to regular mode for now..
0050DCr 1  60                 RTS
0050DDr 1                 @NEXT_Z:
0050DDr 1  C6 22              DEC DOLB_ZTRACKER
0050DFr 1  F0 F5              BEQ @DONE_Z
0050E1r 1                 @GO_Z:
0050E1r 1  B2 22              LDA (DOLB_ZTRACKER) ; get our first victim
0050E3r 1  D0 07              BNE @DO_OBJECT
0050E5r 1  80 F6              BRA @NEXT_Z
0050E7r 1                 @NEXT_OBJECT:
0050E7r 1  BD rr rr           LDA OBJECT_LIST_BYTE6_NEXT,x
0050EAr 1  F0 F1              BEQ @NEXT_Z
0050ECr 1                 @DO_OBJECT:
0050ECr 1  AA                 TAX      ;     get that pointer into X so we can do stuffs...
0050EDr 1                     ; OK so now reference OBJECT_LIST_BYTE*,X for whatever we're drawing.. and Y is free for whatever..
0050EDr 1                     ; first things first, let's figure out where in the buffer to draw.. starting with X location..
0050EDr 1  BC rr rr           LDY OBJECT_LIST_BYTE3_Y,X
0050F0r 1  BD rr rr           LDA OBJECT_LIST_BYTE2_X,X  ;
0050F3r 1  4A                 LSR
0050F4r 1  C9 50              CMP #80
0050F6r 1  90 04              BCC @X_POSITIVE ; check  outside screen.. left/right...
0050F8r 1  18                 CLC
0050F9r 1  69 20              ADC #32 ; to <128, then to <160 of the previous Y ?
0050FBr 1  88                 DEY
0050FCr 1                  @X_POSITIVE:
0050FCr 1  C0 78              CPY #120 ; check inside screen..
0050FEr 1  90 41              BCC @Y_POSITIVE ;   for now, just skip if outside..
005100r 1  C0 C1              CPY #193
005102r 1  90 E3              BCC @NEXT_OBJECT
005104r 1  8D 20 9F           STA VERA_addr_low
005107r 1  B2 29              LDA (DOLB_Y_CALC_POINTER)
005109r 1  8D 21 9F           STA VERA_addr_high
00510Cr 1  EE 25 9F           INC VERA_ctrl
00510Fr 1  98                 TYA
005110r 1  49 FF              EOR #$FF
005112r 1  1A                 INC A
005113r 1  0A                 ASL ; x2 bytes
005114r 1  0A                 ASL ; x4 bytes
005115r 1  0A                 ASL ; x8 bytes - is offset into sprite address start..
005116r 1  85 27              STA DOLB_CALC_SCRATCH
005118r 1  AC rr rr           LDY OBJECT_LIST_BYTE1_MODE
00511Br 1               
00511Br 1  B9 rr rr           LDA LOW_NIBBLE_HIGH,Y
00511Er 1  0A                 ASL
00511Fr 1  A8                 TAY
005120r 1  A9 08              LDA #$08
005122r 1  2A                 ROL
005123r 1  8D 22 9F           STA VERA_addr_bank
005126r 1  98                 TYA
005127r 1  BC rr rr           LDY OBJECT_LIST_BYTE0_ADDRLOW,X
00512Ar 1  19 rr rr           ORA SPRITE_ADDRESS_LOW_HIGH,Y
00512Dr 1  8D 21 9F           STA VERA_addr_high
005130r 1  18                 CLC
005131r 1  B9 rr rr           LDA SPRITE_ADDRESS_LOW_LOW,Y
005134r 1  65 27              ADC DOLB_CALC_SCRATCH
005136r 1  8D 20 9F           STA VERA_addr_low
005139r 1               
005139r 1  BD rr rr           LDA OBJECT_LIST_BYTE3_Y,X
00513Cr 1  69 40              ADC #64 ; push positive..
00513Er 1  A8                 TAY
00513Fr 1  80 3B              BRA @Y_WAS_NEGATIVE
005141r 1               
005141r 1                  @Y_POSITIVE:
005141r 1  79 rr rr           ADC BITMAP_OFFSETS_LOW,Y ; note how this works because carry isn't set.. ?
005144r 1  8D 20 9F           STA VERA_addr_low
005147r 1  B1 29              LDA (DOLB_Y_CALC_POINTER),Y ; now do the high for the dest..
005149r 1  69 00              ADC #0
00514Br 1  8D 21 9F           STA VERA_addr_high
00514Er 1  EE 25 9F           INC VERA_ctrl  ;  now we need to calculate sprite source address..
005151r 1  BC rr rr           LDY OBJECT_LIST_BYTE1_MODE,X
005154r 1  B9 rr rr           LDA LOW_NIBBLE_HIGH,Y
005157r 1  0A                 ASL
005158r 1  A8                 TAY
005159r 1  A9 08              LDA #$08
00515Br 1  2A                 ROL
00515Cr 1  8D 22 9F           STA VERA_addr_bank
00515Fr 1  98                 TYA
005160r 1  BC rr rr           LDY OBJECT_LIST_BYTE0_ADDRLOW,X
005163r 1  19 rr rr           ORA SPRITE_ADDRESS_LOW_HIGH,Y
005166r 1  8D 21 9F           STA VERA_addr_high
005169r 1  B9 rr rr           LDA SPRITE_ADDRESS_LOW_LOW,Y
00516Cr 1  8D 20 9F           STA VERA_addr_low
00516Fr 1               
00516Fr 1  38                 SEC
005170r 1  A9 78              LDA #120
005172r 1  FD rr rr           SBC OBJECT_LIST_BYTE3_Y,X ;   want to check if screenH-Y < 64
005175r 1  C9 41              CMP #65
005177r 1  90 02              BCC :+
005179r 1  A9 40              LDA #64
00517Br 1  A8               : TAY
00517Cr 1                  @CHECK_ALIGN:
00517Cr 1                  @Y_WAS_NEGATIVE:
00517Cr 1  CE 25 9F           DEC VERA_ctrl  ;  regain dest address
00517Fr 1  AD 20 9F           LDA VERA_addr_low
005182r 1  29 03              AND #$03
005184r 1  F0 07              BEQ @DO_ZERO_RIGHT
005186r 1  0A                 ASL
005187r 1  0A                 ASL
005188r 1  8D 2C 9F           STA FX_MULT
00518Br 1  D0 39              BNE @CHECK_OTHER_ALIGNS
00518Dr 1                  @DO_ZERO_RIGHT:
00518Dr 1  9C 2C 9F           STZ FX_MULT
005190r 1  80 10              BRA :++
005192r 1                  :
005192r 1  AD 20 9F           LDA VERA_addr_low
005195r 1  69 98              ADC #160-8
005197r 1  8D 20 9F           STA VERA_addr_low
00519Ar 1  AD 21 9F           LDA VERA_addr_high
00519Dr 1  69 00              ADC #0
00519Fr 1  8D 21 9F           STA VERA_addr_high
0051A2r 1                  :
0051A2r 1  AD 24 9F           LDA VERA_data1
0051A5r 1  AD 24 9F           LDA VERA_data1
0051A8r 1  AD 24 9F           LDA VERA_data1
0051ABr 1  AD 24 9F           LDA VERA_data1
0051AEr 1  9C 23 9F           STZ VERA_data0
0051B1r 1               
0051B1r 1  AD 24 9F           LDA VERA_data1
0051B4r 1  AD 24 9F           LDA VERA_data1
0051B7r 1  AD 24 9F           LDA VERA_data1
0051BAr 1  AD 24 9F           LDA VERA_data1
0051BDr 1  9C 23 9F           STZ VERA_data0
0051C0r 1  88                 DEY
0051C1r 1  D0 CF              BNE :--
0051C3r 1  4C rr rr           JMP @NEXT_OBJECT
0051C6r 1                  @CHECK_OTHER_ALIGNS:
0051C6r 1  C9 08              CMP #8   ;  is either 4,8,12
0051C8r 1  90 16              BCC @DO_ONE_RIGHT
0051CAr 1  F0 4F              BEQ @DO_TWO_RIGHT
0051CCr 1  18                 CLC
0051CDr 1  4C rr rr           JMP @DO_THREE_RIGHT
0051D0r 1                   :
0051D0r 1  AD 20 9F           LDA VERA_addr_low
0051D3r 1  69 94              ADC #160-12
0051D5r 1  8D 20 9F           STA VERA_addr_low
0051D8r 1  AD 21 9F           LDA VERA_addr_high
0051DBr 1  69 00              ADC #0
0051DDr 1  8D 21 9F           STA VERA_addr_high
0051E0r 1                  @DO_ONE_RIGHT:
0051E0r 1  AD 24 9F           LDA VERA_data1
0051E3r 1  AD 24 9F           LDA VERA_data1
0051E6r 1  AD 24 9F           LDA VERA_data1
0051E9r 1  A9 03              LDA #%00000011
0051EBr 1  8D 23 9F           STA VERA_data0
0051EEr 1               
0051EEr 1  AD 24 9F           LDA VERA_data1
0051F1r 1  AD 24 9F           LDA VERA_data1
0051F4r 1  AD 24 9F           LDA VERA_data1
0051F7r 1  AD 24 9F           LDA VERA_data1
0051FAr 1  9C 23 9F           STZ VERA_data0
0051FDr 1               
0051FDr 1  AD 24 9F           LDA VERA_data1
005200r 1  A9 FC              LDA #%11111100
005202r 1  8D 23 9F           STA VERA_data0
005205r 1  88                 DEY
005206r 1  D0 C8              BNE :-
005208r 1  4C rr rr           JMP @NEXT_OBJECT
00520Br 1               
00520Br 1                   :
00520Br 1  AD 20 9F           LDA VERA_addr_low
00520Er 1  69 94              ADC #160-12
005210r 1  8D 20 9F           STA VERA_addr_low
005213r 1  AD 21 9F           LDA VERA_addr_high
005216r 1  69 00              ADC #0
005218r 1  8D 21 9F           STA VERA_addr_high
00521Br 1                  @DO_TWO_RIGHT:
00521Br 1  AD 24 9F           LDA VERA_data1
00521Er 1  AD 24 9F           LDA VERA_data1
005221r 1  A9 0F              LDA #%00001111
005223r 1  8D 23 9F           STA VERA_data0
005226r 1               
005226r 1  AD 24 9F           LDA VERA_data1
005229r 1  AD 24 9F           LDA VERA_data1
00522Cr 1  AD 24 9F           LDA VERA_data1
00522Fr 1  AD 24 9F           LDA VERA_data1
005232r 1  9C 23 9F           STZ VERA_data0
005235r 1               
005235r 1  AD 24 9F           LDA VERA_data1
005238r 1  AD 24 9F           LDA VERA_data1
00523Br 1  A9 F0              LDA #%11110000
00523Dr 1  8D 23 9F           STA VERA_data0
005240r 1  88                 DEY
005241r 1  D0 C8              BNE :-
005243r 1  4C rr rr           JMP @NEXT_OBJECT
005246r 1               
005246r 1                   :
005246r 1  AD 20 9F           LDA VERA_addr_low
005249r 1  69 94              ADC #160-12
00524Br 1  8D 20 9F           STA VERA_addr_low
00524Er 1  AD 21 9F           LDA VERA_addr_high
005251r 1  69 00              ADC #0
005253r 1  8D 21 9F           STA VERA_addr_high
005256r 1                  @DO_THREE_RIGHT:
005256r 1  AD 24 9F           LDA VERA_data1
005259r 1  A9 3F              LDA #%00111111
00525Br 1  8D 23 9F           STA VERA_data0
00525Er 1               
00525Er 1  AD 24 9F           LDA VERA_data1
005261r 1  AD 24 9F           LDA VERA_data1
005264r 1  AD 24 9F           LDA VERA_data1
005267r 1  AD 24 9F           LDA VERA_data1
00526Ar 1  9C 23 9F           STZ VERA_data0
00526Dr 1               
00526Dr 1  AD 24 9F           LDA VERA_data1
005270r 1  AD 24 9F           LDA VERA_data1
005273r 1  AD 24 9F           LDA VERA_data1
005276r 1  A9 C0              LDA #%11000000
005278r 1  8D 23 9F           STA VERA_data0
00527Br 1  88                 DEY
00527Cr 1  D0 C8              BNE :-
00527Er 1  4C rr rr           JMP @NEXT_OBJECT
005281r 1               
005281r 1               
005281r 1               test_optimal_pal_data:
005281r 1               ;      GB   R  $1:FA00-$1:FBFF   VERA Color Palette (256 x 2 bytes)
005281r 1  00 00        .byte $00,$00  ; 0 - black/transparent
005283r 1  C8 0F        .byte $c8,$0f  ; 1 #ffcc88
005285r 1  04 06        .byte $04,$06  ; 2 #660044
005287r 1  00 0C        .byte $00,$0C  ; 3  #cc0000
005289r 1  F0 0C        .byte $F0,$0C  ; 4#ccff00
00528Br 1  42 03        .byte $42,$03
00528Dr 1  60 0C        .byte $60,$0c   ; 6  #cc6600
00528Fr 1  40 08        .byte $40,$08   ; 7 #884400
005291r 1  C0 0C        .byte $c0,$0c   ; 8 #cccc00
005293r 1  6A 02        .byte $6a,$02   ; 9 #2266aa mid blue
005295r 1  C0 00        .byte $c0,$00   ; A #00cc00
005297r 1  AC 07        .byte $ac,$07   ; B #77aacc light blue
005299r 1  C0 00        .byte $c0,$00   ; C #0000c0 dark blue
00529Br 1  0C 0C        .byte $0c,$0c   ; D #cc00cc
00529Dr 1  88 08        .byte $88,$08   ; E #888888
00529Fr 1  22 02        .byte $22,$02   ; F #222222
0052A1r 1               
0052A1r 1               test_vram_data:
0052A1r 1               ; 70 to 127 - start of 16x16 (each 128 byte) for testing directions / sizing..
0052A1r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11  ;  0-15 16x10 -  0
0052A5r 1  11 11 11 11  
0052A9r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
0052ADr 1  FF FF FF F1  
0052B1r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0052B5r 1  FF FF FF F1  
0052B9r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0052BDr 1  FF FF FF F1  
0052C1r 1  1F FF FF F1  .byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$F1
0052C5r 1  FF FF FF F1  
0052C9r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0052CDr 1  FF FF FF F1  
0052D1r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0052D5r 1  FF FF FF F1  
0052D9r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0052DDr 1  FF FF FF F1  
0052E1r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
0052E5r 1  FF FF FF F1  
0052E9r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11
0052EDr 1  11 11 11 11  
0052F1r 1  55 55 55 55  .repeat 54
0052F5r 1  55 55 55 55  
0052F9r 1  55 55 55 55  
0054A1r 1               .res 8,$55
0054A1r 1               .endrepeat
0054A1r 1               
0054A1r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11  ;  16-31    16x10 -  0 trans
0054A5r 1  11 11 11 11  
0054A9r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0054ADr 1  F0 F0 F0 F1  
0054B1r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
0054B5r 1  0F 0F 0F 01  
0054B9r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0054BDr 1  F0 F0 F0 F1  
0054C1r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
0054C5r 1  0F 0F 0F 01  
0054C9r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0054CDr 1  F0 F0 F0 F1  
0054D1r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
0054D5r 1  0F 0F 0F 01  
0054D9r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0054DDr 1  F0 F0 F0 F1  
0054E1r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
0054E5r 1  0F 0F 0F 01  
0054E9r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11
0054EDr 1  11 11 11 11  
0054F1r 1  50 50 50 50  .repeat 27
0054F5r 1  50 50 50 50  
0054F9r 1  05 05 05 05  
0056A1r 1               .res 8,$50
0056A1r 1               .res 8,$05
0056A1r 1               .endrepeat
0056A1r 1               
0056A1r 1               
0056A1r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11  ;  32-47    16x11 -  4
0056A5r 1  11 11 11 11  
0056A9r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
0056ADr 1  FF FF FF F1  
0056B1r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0056B5r 1  FF FF FF F1  
0056B9r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0056BDr 1  FF FF FF F1  
0056C1r 1  1F FF FF F1  .byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$F1
0056C5r 1  FF FF FF F1  
0056C9r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0056CDr 1  FF FF FF F1  
0056D1r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0056D5r 1  FF FF FF F1  
0056D9r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0056DDr 1  FF FF FF F1  
0056E1r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
0056E5r 1  FF FF FF F1  
0056E9r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
0056EDr 1  FF FF FF F1  
0056F1r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11
0056F5r 1  11 11 11 11  
0056F9r 1  55 55 55 55  .repeat 53
0056FDr 1  55 55 55 55  
005701r 1  55 55 55 55  
0058A1r 1               .res 8,$55
0058A1r 1               .endrepeat
0058A1r 1               
0058A1r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11  ;  48-63    16x11 -  4 trans
0058A5r 1  11 11 11 11  
0058A9r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0058ADr 1  F0 F0 F0 F1  
0058B1r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
0058B5r 1  0F 0F 0F 01  
0058B9r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0058BDr 1  F0 F0 F0 F1  
0058C1r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
0058C5r 1  0F 0F 0F 01  
0058C9r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0058CDr 1  F0 F0 F0 F1  
0058D1r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
0058D5r 1  0F 0F 0F 01  
0058D9r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0058DDr 1  F0 F0 F0 F1  
0058E1r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
0058E5r 1  0F 0F 0F 01  
0058E9r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0058EDr 1  F0 F0 F0 F1  
0058F1r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11
0058F5r 1  11 11 11 11  
0058F9r 1  05 05 05 05  .res 7,$05
0058FDr 1  05 05 05     
005900r 1  00           .byte 0
005901r 1  50 50 50 50  .repeat 26
005905r 1  50 50 50 50  
005909r 1  05 05 05 05  
005AA1r 1               .res 8,$50
005AA1r 1               .res 7,$05
005AA1r 1               .byte 0
005AA1r 1               .endrepeat
005AA1r 1               
005AA1r 1               
005AA1r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10  ;  64-79    15x11 - 10
005AA5r 1  11 11 11 10  
005AA9r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
005AADr 1  FF FF FF 10  
005AB1r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
005AB5r 1  FF FF FF 10  
005AB9r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
005ABDr 1  FF FF FF 10  
005AC1r 1  1F FF FF F1  .byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$10
005AC5r 1  FF FF FF 10  
005AC9r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
005ACDr 1  FF FF FF 10  
005AD1r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
005AD5r 1  FF FF FF 10  
005AD9r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
005ADDr 1  FF FF FF 10  
005AE1r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
005AE5r 1  FF FF FF 10  
005AE9r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
005AEDr 1  FF FF FF 10  
005AF1r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
005AF5r 1  11 11 11 10  
005AF9r 1  55 55 55 55  .repeat 53
005AFDr 1  55 55 55 50  
005B01r 1  55 55 55 55  
005CA1r 1               .res 7,$55
005CA1r 1               .byte $50
005CA1r 1               .endrepeat
005CA1r 1               
005CA1r 1               
005CA1r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10  ;  80-95    15x11 - 10 trans
005CA5r 1  11 11 11 10  
005CA9r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
005CADr 1  F0 F0 F0 10  
005CB1r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
005CB5r 1  0F 0F 0F 10  
005CB9r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
005CBDr 1  F0 F0 F0 10  
005CC1r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
005CC5r 1  0F 0F 0F 10  
005CC9r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
005CCDr 1  F0 F0 F0 10  
005CD1r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
005CD5r 1  0F 0F 0F 10  
005CD9r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
005CDDr 1  F0 F0 F0 10  
005CE1r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
005CE5r 1  0F 0F 0F 10  
005CE9r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
005CEDr 1  F0 F0 F0 10  
005CF1r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
005CF5r 1  11 11 11 10  
005CF9r 1  05 05 05 05  .res 7,$05
005CFDr 1  05 05 05     
005D00r 1  00           .byte 0
005D01r 1  50 50 50 50  .repeat 26
005D05r 1  50 50 50 50  
005D09r 1  05 05 05 05  
005EA1r 1               .res 8,$50
005EA1r 1               .res 7,$05
005EA1r 1               .byte 0
005EA1r 1               .endrepeat
005EA1r 1               
005EA1r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10  ;  96-111    15x12 - 18
005EA5r 1  11 11 11 10  
005EA9r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
005EADr 1  FF FF FF 10  
005EB1r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
005EB5r 1  FF FF FF 10  
005EB9r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
005EBDr 1  FF FF FF 10  
005EC1r 1  1F FF FF F1  .byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$10
005EC5r 1  FF FF FF 10  
005EC9r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
005ECDr 1  FF FF FF 10  
005ED1r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
005ED5r 1  FF FF FF 10  
005ED9r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
005EDDr 1  FF FF FF 10  
005EE1r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
005EE5r 1  FF FF FF 10  
005EE9r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
005EEDr 1  FF FF FF 10  
005EF1r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
005EF5r 1  FF FF FF 10  
005EF9r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
005EFDr 1  11 11 11 10  
005F01r 1  55 55 55 55  .repeat 52
005F05r 1  55 55 55 50  
005F09r 1  55 55 55 55  
0060A1r 1               .res 7,$55
0060A1r 1               .byte $50
0060A1r 1               .endrepeat
0060A1r 1               
0060A1r 1               
0060A1r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10  ;  112-127    15x12 - 18 trans
0060A5r 1  11 11 11 10  
0060A9r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0060ADr 1  F0 F0 F0 10  
0060B1r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0060B5r 1  0F 0F 0F 10  
0060B9r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0060BDr 1  F0 F0 F0 10  
0060C1r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0060C5r 1  0F 0F 0F 10  
0060C9r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0060CDr 1  F0 F0 F0 10  
0060D1r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0060D5r 1  0F 0F 0F 10  
0060D9r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0060DDr 1  F0 F0 F0 10  
0060E1r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0060E5r 1  0F 0F 0F 10  
0060E9r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0060EDr 1  F0 F0 F0 10  
0060F1r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0060F5r 1  0F 0F 0F 10  
0060F9r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
0060FDr 1  11 11 11 10  
006101r 1  50 50 50 50  .repeat 26
006105r 1  50 50 50 50  
006109r 1  05 05 05 05  
0062A1r 1               .res 8,$50
0062A1r 1               .res 7,$05
0062A1r 1               .byte 0
0062A1r 1               .endrepeat
0062A1r 1               
0062A1r 1               ; alernate tile graphic to use for tub wall .. 128-143 ; 16x tile
0062A1r 1  16 16 16 16  .repeat 32
0062A5r 1  16 16 16 16  
0062A9r 1  61 61 61 61  
0064A1r 1                   .byte $16, $16, $16, $16, $16, $16, $16, $16
0064A1r 1                   .byte $61, $61, $61, $61, $61, $61, $61, $61
0064A1r 1               .endrepeat
0064A1r 1               
0064A1r 1  10 10 10 10  .repeat 32  ;  144-159
0064A5r 1  10 10 10 10  
0064A9r 1  06 06 06 06  
0066A1r 1                   .byte $10, $10, $10, $10, $10, $10, $10, $10
0066A1r 1                   .byte $06, $06, $06, $06, $06, $06, $06, $06
0066A1r 1               .endrepeat
0066A1r 1               
0066A1r 1               
0066A1r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$00  ;  160-175    14x12
0066A5r 1  11 11 11 00  
0066A9r 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$fF,$FF,$F1,$00
0066ADr 1  FF FF F1 00  
0066B1r 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$fF,$FF,$F1,$00
0066B5r 1  FF FF F1 00  
0066B9r 1  1F FF FF FF  .byte $1f,$FF,$ff,$Ff,$Ff,$fF,$F1,$00
0066BDr 1  FF FF F1 00  
0066C1r 1  1F FF FF F1  .byte $1f,$FF,$FF,$f1,$fF,$FF,$F1,$00
0066C5r 1  FF FF F1 00  
0066C9r 1  1F FF FF FF  .byte $1f,$FF,$FF,$Ff,$Ff,$fF,$F1,$00
0066CDr 1  FF FF F1 00  
0066D1r 1  1F FF FF FF  .byte $1f,$FF,$FF,$fF,$FF,$FF,$F1,$00
0066D5r 1  FF FF F1 00  
0066D9r 1  1F FF FF FF  .byte $1f,$FF,$FF,$fF,$FF,$FF,$F1,$00
0066DDr 1  FF FF F1 00  
0066E1r 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$FF,$FF,$F1,$00
0066E5r 1  FF FF F1 00  
0066E9r 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$FF,$FF,$F1,$00
0066EDr 1  FF FF F1 00  
0066F1r 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$FF,$FF,$F1,$00
0066F5r 1  FF FF F1 00  
0066F9r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$00
0066FDr 1  11 11 11 00  
006701r 1  55 55 55 55  .repeat 52
006705r 1  55 55 55 00  
006709r 1  55 55 55 55  
0068A1r 1               .res 7,$55
0068A1r 1               .byte 0
0068A1r 1               .endrepeat
0068A1r 1               
0068A1r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$00  ;  176-191
0068A5r 1  11 11 11 00  
0068A9r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0068ADr 1  F0 F0 F0 10  
0068B1r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0068B5r 1  0F 0F 0F 10  
0068B9r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0068BDr 1  F0 F0 F0 10  
0068C1r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0068C5r 1  0F 0F 0F 10  
0068C9r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0068CDr 1  F0 F0 F0 10  
0068D1r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0068D5r 1  0F 0F 0F 10  
0068D9r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0068DDr 1  F0 F0 F0 10  
0068E1r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0068E5r 1  0F 0F 0F 10  
0068E9r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0068EDr 1  F0 F0 F0 10  
0068F1r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0068F5r 1  0F 0F 0F 10  
0068F9r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
0068FDr 1  11 11 11 10  
006901r 1  50 50 50 50  .repeat 26
006905r 1  50 50 50 50  
006909r 1  05 05 05 05  
006AA1r 1               .res 8,$50
006AA1r 1               .res 7,$05
006AA1r 1               .byte 0
006AA1r 1               .endrepeat
006AA1r 1               
006AA1r 1               ; alernate tile graphic to use for tub wall .. 192-223 ; 15x tile
006AA1r 1  16 16 16 16  .repeat 32
006AA5r 1  16 16 16 10  
006AA9r 1  61 61 61 61  
006CA1r 1                   .byte $16, $16, $16, $16, $16, $16, $16, $10
006CA1r 1                   .byte $61, $61, $61, $61, $61, $61, $61, $60
006CA1r 1               .endrepeat
006CA1r 1               
006CA1r 1  10 10 10 10  .repeat 32  ;  144-159
006CA5r 1  10 10 10 10  
006CA9r 1  06 06 06 06  
006EA1r 1                   .byte $10, $10, $10, $10, $10, $10, $10, $10
006EA1r 1                   .byte $06, $06, $06, $06, $06, $06, $06, $00
006EA1r 1               .endrepeat
006EA1r 1               
006EA1r 1               
006EA1r 1               ; alernate tile graphic to use for tub wall .. 224 ; 14x tile
006EA1r 1  16 16 16 16  .repeat 32
006EA5r 1  16 16 16 00  
006EA9r 1  61 61 61 61  
0070A1r 1                   .byte $16, $16, $16, $16, $16, $16, $16, $00
0070A1r 1                   .byte $61, $61, $61, $61, $61, $61, $61, $00
0070A1r 1               .endrepeat
0070A1r 1               
0070A1r 1  10 10 10 10  .repeat 32  ;  144-159
0070A5r 1  10 10 10 00  
0070A9r 1  06 06 06 06  
0072A1r 1                   .byte $10, $10, $10, $10, $10, $10, $10, $00
0072A1r 1                   .byte $06, $06, $06, $06, $06, $06, $06, $00
0072A1r 1               .endrepeat
0072A1r 1               
0072A1r 1               
0072A1r 1               
0072A1r 1               HEX_DISPLAY_FONT:       ; 8x8x16 color = 32 bytes ... sprite addr 256
0072A1r 1               ;     01   23   45   67
0072A1r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 0
0072A5r 1  01 00 00 10  .byte $01, $00, $00, $10
0072A9r 1  01 00 00 10  .byte $01, $00, $00, $10
0072ADr 1  00 00 00 00  .byte $00, $00, $00, $00
0072B1r 1  01 00 00 10  .byte $01, $00, $00, $10
0072B5r 1  01 00 00 10  .byte $01, $00, $00, $10
0072B9r 1  01 00 00 10  .byte $01, $00, $00, $10
0072BDr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 0 /
0072C1r 1               
0072C1r 1  00 00 00 00  .byte $00, $00, $00, $00 ; 1
0072C5r 1  00 00 00 10  .byte $00, $00, $00, $10
0072C9r 1  00 00 00 10  .byte $00, $00, $00, $10
0072CDr 1  00 00 00 00  .byte $00, $00, $00, $00
0072D1r 1  00 00 00 10  .byte $00, $00, $00, $10
0072D5r 1  00 00 00 10  .byte $00, $00, $00, $10
0072D9r 1  00 00 00 10  .byte $00, $00, $00, $10
0072DDr 1  00 00 00 00  .byte $00, $00, $00, $00
0072E1r 1               
0072E1r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 2
0072E5r 1  00 00 00 10  .byte $00, $00, $00, $10
0072E9r 1  00 00 00 10  .byte $00, $00, $00, $10
0072EDr 1  00 11 11 00  .byte $00, $11, $11, $00
0072F1r 1  01 00 00 00  .byte $01, $00, $00, $00
0072F5r 1  01 00 00 00  .byte $01, $00, $00, $00
0072F9r 1  01 00 00 00  .byte $01, $00, $00, $00
0072FDr 1  00 11 11 00  .byte $00, $11, $11, $00
007301r 1               
007301r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 3
007305r 1  00 00 00 10  .byte $00, $00, $00, $10
007309r 1  00 00 00 10  .byte $00, $00, $00, $10
00730Dr 1  00 11 11 00  .byte $00, $11, $11, $00
007311r 1  00 00 00 10  .byte $00, $00, $00, $10
007315r 1  00 00 00 10  .byte $00, $00, $00, $10
007319r 1  00 00 00 10  .byte $00, $00, $00, $10
00731Dr 1  00 11 11 00  .byte $00, $11, $11, $00
007321r 1               
007321r 1  00 00 00 00  .byte $00, $00, $00, $00   ; 4
007325r 1  01 00 00 10  .byte $01, $00, $00, $10
007329r 1  01 00 00 10  .byte $01, $00, $00, $10
00732Dr 1  00 11 11 00  .byte $00, $11, $11, $00
007331r 1  00 00 00 10  .byte $00, $00, $00, $10
007335r 1  00 00 00 10  .byte $00, $00, $00, $10
007339r 1  00 00 00 10  .byte $00, $00, $00, $10
00733Dr 1  00 00 00 00  .byte $00, $00, $00, $00
007341r 1               
007341r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 5
007345r 1  01 00 00 00  .byte $01, $00, $00, $00
007349r 1  01 00 00 00  .byte $01, $00, $00, $00
00734Dr 1  00 11 11 00  .byte $00, $11, $11, $00
007351r 1  00 00 00 10  .byte $00, $00, $00, $10
007355r 1  00 00 00 10  .byte $00, $00, $00, $10
007359r 1  00 00 00 10  .byte $00, $00, $00, $10
00735Dr 1  00 11 11 00  .byte $00, $11, $11, $00
007361r 1               
007361r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 6
007365r 1  01 00 00 00  .byte $01, $00, $00, $00
007369r 1  01 00 00 00  .byte $01, $00, $00, $00
00736Dr 1  00 11 11 00  .byte $00, $11, $11, $00
007371r 1  01 00 00 10  .byte $01, $00, $00, $10
007375r 1  01 00 00 10  .byte $01, $00, $00, $10
007379r 1  01 00 00 10  .byte $01, $00, $00, $10
00737Dr 1  00 11 11 00  .byte $00, $11, $11, $00
007381r 1               
007381r 1  00 01 01 00  .byte $00, $01, $01, $00 ; 7
007385r 1  00 00 00 10  .byte $00, $00, $00, $10
007389r 1  00 00 00 10  .byte $00, $00, $00, $10
00738Dr 1  00 00 00 00  .byte $00, $00, $00, $00
007391r 1  00 00 00 10  .byte $00, $00, $00, $10
007395r 1  00 00 00 10  .byte $00, $00, $00, $10
007399r 1  00 00 00 10  .byte $00, $00, $00, $10
00739Dr 1  00 00 00 00  .byte $00, $00, $00, $00
0073A1r 1               
0073A1r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 8
0073A5r 1  01 00 00 10  .byte $01, $00, $00, $10
0073A9r 1  01 00 00 10  .byte $01, $00, $00, $10
0073ADr 1  00 11 11 00  .byte $00, $11, $11, $00
0073B1r 1  01 00 00 10  .byte $01, $00, $00, $10
0073B5r 1  01 00 00 10  .byte $01, $00, $00, $10
0073B9r 1  01 00 00 10  .byte $01, $00, $00, $10
0073BDr 1  00 11 11 00  .byte $00, $11, $11, $00
0073C1r 1               
0073C1r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 9
0073C5r 1  01 00 00 10  .byte $01, $00, $00, $10
0073C9r 1  01 00 00 10  .byte $01, $00, $00, $10
0073CDr 1  00 11 11 00  .byte $00, $11, $11, $00
0073D1r 1  00 00 00 10  .byte $00, $00, $00, $10
0073D5r 1  00 00 00 10  .byte $00, $00, $00, $10
0073D9r 1  00 00 00 10  .byte $00, $00, $00, $10
0073DDr 1  00 11 11 00  .byte $00, $11, $11, $00
0073E1r 1               
0073E1r 1  00 11 11 00  .byte $00, $11, $11, $00   ; A
0073E5r 1  01 00 00 10  .byte $01, $00, $00, $10
0073E9r 1  01 00 00 10  .byte $01, $00, $00, $10
0073EDr 1  00 11 11 00  .byte $00, $11, $11, $00
0073F1r 1  01 00 00 10  .byte $01, $00, $00, $10
0073F5r 1  01 00 00 10  .byte $01, $00, $00, $10
0073F9r 1  01 00 00 10  .byte $01, $00, $00, $10
0073FDr 1  00 00 00 00  .byte $00, $00, $00, $00
007401r 1               
007401r 1               
007401r 1  00 00 00 00  .byte $00, $00, $00, $00   ; B
007405r 1  01 00 00 00  .byte $01, $00, $00, $00
007409r 1  01 00 00 00  .byte $01, $00, $00, $00
00740Dr 1  00 11 11 00  .byte $00, $11, $11, $00
007411r 1  01 00 00 10  .byte $01, $00, $00, $10
007415r 1  01 00 00 10  .byte $01, $00, $00, $10
007419r 1  01 00 00 10  .byte $01, $00, $00, $10
00741Dr 1  00 11 11 00  .byte $00, $11, $11, $00
007421r 1               
007421r 1  00 11 11 00  .byte $00, $11, $11, $00   ; C
007425r 1  01 00 00 00  .byte $01, $00, $00, $00
007429r 1  01 00 00 00  .byte $01, $00, $00, $00
00742Dr 1  00 00 00 00  .byte $00, $00, $00, $00
007431r 1  01 00 00 00  .byte $01, $00, $00, $00
007435r 1  01 00 00 00  .byte $01, $00, $00, $00
007439r 1  01 00 00 00  .byte $01, $00, $00, $00
00743Dr 1  00 11 11 00  .byte $00, $11, $11, $00
007441r 1               
007441r 1  00 00 00 00  .byte $00, $00, $00, $00   ; D
007445r 1  00 00 00 10  .byte $00, $00, $00, $10
007449r 1  00 00 00 10  .byte $00, $00, $00, $10
00744Dr 1  00 11 11 00  .byte $00, $11, $11, $00
007451r 1  01 00 00 10  .byte $01, $00, $00, $10
007455r 1  01 00 00 10  .byte $01, $00, $00, $10
007459r 1  01 00 00 10  .byte $01, $00, $00, $10
00745Dr 1  00 11 11 00  .byte $00, $11, $11, $00
007461r 1               
007461r 1  00 11 11 00  .byte $00, $11, $11, $00   ; E
007465r 1  01 00 00 00  .byte $01, $00, $00, $00
007469r 1  01 00 00 00  .byte $01, $00, $00, $00
00746Dr 1  00 11 11 00  .byte $00, $11, $11, $00
007471r 1  01 00 00 00  .byte $01, $00, $00, $00
007475r 1  01 00 00 00  .byte $01, $00, $00, $00
007479r 1  01 00 00 00  .byte $01, $00, $00, $00
00747Dr 1  00 11 11 00  .byte $00, $11, $11, $00
007481r 1               
007481r 1  00 11 11 00  .byte $00, $11, $11, $00   ; F   sprite addr 48
007485r 1  01 00 00 00  .byte $01, $00, $00, $00
007489r 1  01 00 00 00  .byte $01, $00, $00, $00
00748Dr 1  00 11 11 00  .byte $00, $11, $11, $00
007491r 1  01 00 00 00  .byte $01, $00, $00, $00
007495r 1  01 00 00 00  .byte $01, $00, $00, $00
007499r 1  01 00 00 00  .byte $01, $00, $00, $00
00749Dr 1  00 00 00 00  .byte $00, $00, $00, $00
0074A1r 1               
0074A1r 1               ; test circle thing ... 70.. 16x16
0074A1r 1  00 00 00 AA  .byte $00, $00, $00, $AA, $AA, $00, $00, $00
0074A5r 1  AA 00 00 00  
0074A9r 1  00 00 AA AA  .byte $00, $00, $AA, $AA, $AA, $AA, $00, $00
0074ADr 1  AA AA 00 00  
0074B1r 1  00 0A AA AA  .byte $00, $0A, $AA, $AA, $AA, $AA, $A0, $00
0074B5r 1  AA AA A0 00  
0074B9r 1  00 AA AA AA  .byte $00, $AA, $AA, $AA, $AA, $AA, $AA, $00
0074BDr 1  AA AA AA 00  
0074C1r 1  0A AA AA AA  .byte $0A, $AA, $AA, $AA, $AA, $AA, $AA, $A0
0074C5r 1  AA AA AA A0  
0074C9r 1  0A AA AA AA  .byte $0A, $AA, $AA, $AA, $AA, $AA, $AA, $A0
0074CDr 1  AA AA AA A0  
0074D1r 1  AA AA AA AA  .byte $AA, $AA, $AA, $AA, $AA, $AA, $AA, $AA
0074D5r 1  AA AA AA AA  
0074D9r 1  AA AA AA AA  .byte $AA, $AA, $AA, $AA, $AA, $AA, $AA, $AA
0074DDr 1  AA AA AA AA  
0074E1r 1  AA AA AA AA  .byte $AA, $AA, $AA, $AA, $AA, $AA, $AA, $AA
0074E5r 1  AA AA AA AA  
0074E9r 1  AA AA AA AA  .byte $AA, $AA, $AA, $AA, $AA, $AA, $AA, $AA
0074EDr 1  AA AA AA AA  
0074F1r 1  0A AA AA AA  .byte $0A, $AA, $AA, $AA, $AA, $AA, $AA, $A0
0074F5r 1  AA AA AA A0  
0074F9r 1  0A AA AA AA  .byte $0A, $AA, $AA, $AA, $AA, $AA, $AA, $A0
0074FDr 1  AA AA AA A0  
007501r 1  00 AA AA AA  .byte $00, $AA, $AA, $AA, $AA, $AA, $AA, $00
007505r 1  AA AA AA 00  
007509r 1  00 0A AA AA  .byte $00, $0A, $AA, $AA, $AA, $AA, $A0, $00
00750Dr 1  AA AA A0 00  
007511r 1  00 00 AA AA  .byte $00, $00, $AA, $AA, $AA, $AA, $00, $00
007515r 1  AA AA 00 00  
007519r 1  00 00 00 AA  .byte $00, $00, $00, $AA, $AA, $00, $00, $00
00751Dr 1  AA 00 00 00  
007521r 1               
007521r 1  00 00 00 00  .res 384,0
007525r 1  00 00 00 00  
007529r 1  00 00 00 00  
007521r 1               
