ca65 V2.19 - Git 8e6c0c1
Main file   : hex.s
Current file: hex.s

000000r 1               ; 	080D
000000r 1  4C rr rr     jmp start ; 	3 bytes
000003r 1               ;	0810 	- 240 bytes available for stuff that doesn't need alignment
000003r 1  DE AD BE EF  .repeat 28
000007r 1  DE AD BE EF  
00000Br 1  DE AD BE EF  
000073r 1               	.byte $DE,$AD,$BE,$EF
000073r 1               .endrepeat
000073r 1               SCRATCH128:
000073r 1  DE AD BE EF  .repeat 32
000077r 1  DE AD BE EF  
00007Br 1  DE AD BE EF  
0000F3r 1               	.byte $DE,$AD,$BE,$EF
0000F3r 1               .endrepeat
0000F3r 1               
0000F3r 1               ACROSS_ROW_X_L: ; 0900  16 wide , 45* tilt ... this is added to go up row, sub for down row
0000F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0000F3r 1  00 FE FB F4  .byte
0000F7r 1  EC E1 D3 C3  
0000FBr 1  B1 9C 85 6B  
0001F3r 1               
0001F3r 1               ACROSS_ROW_X_H: ; 0A00
0001F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0001F3r 1  10 0F 0F 0F  .byte $10, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $E, $E, $E, $E, $E, $E, $D, $D, $D, $D, $D, $C, $C, $C, $C, $B, $B, $B, $B, $A, $A, $A, $9, $9, $9, $8, $8, $8, $7, $7, $7, $6, $6, $6, $5, $5, $5, $4, $4, $3, $3, $3, $2, $2, $1, $1, $1, $0, $0, $0, $FF, $FF, $FE, $FE, $FE, $FD, $FD, $FC, $FC, $FC, $FB, $FB, $FA, $FA, $FA, $F9, $F9, $F9, $F8, $F8, $F8, $F7, $F7, $F7, $F6, $F6, $F6, $F5, $F5, $F5, $F4, $F4, $F4, $F4, $F3, $F3, $F3, $F3, $F2, $F2, $F2, $F2, $F2, $F1, $F1, $F1, $F1, $F1, $F1, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F1, $F1, $F1, $F1, $F1, $F1, $F2, $F2, $F2, $F2, $F2, $F3, $F3, $F3, $F3, $F4, $F4, $F4, $F4, $F5, $F5, $F5, $F6, $F6, $F6, $F7, $F7, $F7, $F8, $F8, $F8, $F9, $F9, $F9, $FA, $FA, $FA, $FB, $FB, $FC, $FC, $FC, $FD, $FD, $FE, $FE, $FE, $FF, $FF, $00, $0, $0, $1, $1, $1, $2, $2, $3, $3, $3, $4, $4, $5, $5, $5, $6, $6, $6, $7, $7, $7, $8, $8, $8, $9, $9, $9, $A, $A, $A, $B, $B, $B, $B, $C, $C, $C, $C, $D, $D, $D, $D, $D, $E, $E, $E, $E, $E, $E, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F
0001F7r 1  0F 0F 0F 0F  
0001FBr 1  0F 0F 0F 0F  
0002F3r 1               
0002F3r 1               ACROSS_ROW_Y_L: ; 0B00
0002F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0002F3r 1  00 B8 71 2A  .byte $0,$B8,$71,$2A,$E4,$9D,$57,$10,$CA,$85,$40,$FB,$B7,$73,$30,$ED,$AB,$6A,$29,$E9,$AA,$6C,$2E,$F2,$B6,$7C,$42,$A,$D2,$9C,$66,$32,$0,$CE,$9D,$6E,$41,$14,$E9,$C0,$97,$71,$4B,$27,$5,$E4,$C5,$A8,$8C,$71,$58,$41,$2C,$18,$6,$F6,$E7,$DA,$CF,$C5,$BD,$B7,$B3,$B0,$AF,$B0,$B3,$B7,$BD,$C5,$CF,$DA,$E7,$F6,$6,$18,$2C,$41,$58,$71,$8C,$A8,$C5,$E4,$5,$27,$4B,$71,$97,$C0,$E9,$14,$41,$6E,$9D,$CE,$0,$32,$66,$9C,$D2,$A,$42,$7C,$B6,$F2,$2E,$6C,$AA,$E9,$29,$6A,$AB,$ED,$30,$73,$B7,$FB,$40,$85,$CA,$10,$57,$9D,$E4,$2A,$71,$B8,$0,$47,$8E,$D5,$1B,$62,$A8,$EF,$35,$7A,$BF,$4,$48,$8C,$CF,$12,$54,$95,$D6,$16,$55,$93,$D1,$D,$49,$83,$BD,$F5,$2D,$63,$99,$CD,$0,$31,$62,$91,$BE,$EB,$16,$3F,$68,$8E,$B4,$D8,$FA,$1B,$3A,$57,$73,$8E,$A7,$BE,$D3,$E7,$F9,$9,$18,$25,$30,$3A,$42,$48,$4C,$4F,$50,$4F,$4C,$48,$42,$3A,$30,$25,$18,$9,$F9,$E7,$D3,$BE,$A7,$8E,$73,$57,$3A,$1B,$FA,$D8,$B4,$8E,$68,$3F,$16,$EB,$BE,$91,$62,$31,$0,$CD,$99,$63,$2D,$F5,$BD,$83,$49,$D,$D1,$93,$55,$16,$D6,$95,$54,$12,$CF,$8C,$48,$4,$BF,$7A,$35,$EF,$A8,$62,$1B,$D5,$8E,$47
0002F7r 1  E4 9D 57 10  
0002FBr 1  CA 85 40 FB  
0003F3r 1               
0003F3r 1               ACROSS_ROW_Y_H: ; 0C00
0003F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0003F3r 1  00 FF FF FF  .byte $0,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F9,$F8,$F8,$F8,$F8,$F8,$F7,$F7,$F7,$F7,$F7,$F6,$F6,$F6,$F6,$F6,$F6,$F6,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F6,$F6,$F6,$F6,$F6,$F6,$F6,$F7,$F7,$F7,$F7,$F7,$F8,$F8,$F8,$F8,$F8,$F9,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$00,$0,$0,$0,$1,$1,$1,$1,$2,$2,$2,$3,$3,$3,$3,$4,$4,$4,$4,$5,$5,$5,$5,$6,$6,$6,$6,$6,$7,$7,$7,$7,$8,$8,$8,$8,$8,$8,$9,$9,$9,$9,$9,$9,$9,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$9,$9,$9,$9,$9,$9,$9,$8,$8,$8,$8,$8,$8,$7,$7,$7,$7,$6,$6,$6,$6,$6,$5,$5,$5,$5,$4,$4,$4,$4,$3,$3,$3,$3,$2,$2,$2,$1,$1,$1,$1,$0,$0,$0
0003F7r 1  FE FE FE FE  
0003FBr 1  FD FD FD FC  
0004F3r 1               
0004F3r 1               NEXT_ROW_X_L: ; 0D00 next row LEFT/up when added
0004F3r 1  00 A9 54 00  .byte $0, $A9, $54, $0, $AE, $5D, $D, $BF, $73, $28, $DF, $98, $52, $E, $CC, $8C, $4E, $12, $D7, $9F, $69, $35, $3, $D3, $A6, $7B, $51, $2B, $6, $E4, $C4, $A6, $8B, $72, $5C, $48, $36, $27, $1A, $10, $8, $3, $0, $0, $2, $6, $D, $17, $23, $31, $42, $55, $6A, $83, $9D, $BA, $D9, $FA, $1E, $44, $6D, $97, $C4, $F3, $24, $58, $8D, $C5, $FE, $3A, $77, $B7, $F8, $3B, $80, $C7, $10, $5A, $A6, $F3, $42, $93, $E4, $38, $8D, $E3, $3A, $92, $EC, $47, $A2, $FF, $5D, $BB, $1B, $7B, $DB, $3D, $9F, $1, $64, $C8, $2B, $8F, $F4, $58, $BC, $21, $86, $EA, $4E, $B2, $16, $7A, $DD, $3F, $A2, $3, $64, $C5, $24, $83, $E1, $3E, $9A, $F5, $4F, $A8, $0, $56, $AB, $FF, $51, $A2, $F2, $40, $8C, $D7, $20, $67, $AD, $F1, $33, $73, $B1, $ED, $28, $60, $96, $CA, $FC, $2C, $59, $84, $AE, $D4, $F9, $1B, $3B, $59, $74, $8D, $A3, $B7, $C9, $D8, $E5, $EF, $F7, $FC, $FF, $FF, $FD, $F9, $F2, $E8, $DC, $CE, $BD, $AA, $95, $7C, $62, $45, $26, $5, $E1, $BB, $92, $68, $3B, $C, $DB, $A7, $72, $3A, $1, $C5, $88, $48, $7, $C4, $7F, $38, $EF, $A5, $59, $C, $BD, $6C, $1B, $C7, $72, $1C, $C5, $6D, $13, $B8, $5D, $0, $A2, $44, $E4, $84, $24, $C2, $60, $FE, $9B, $37, $D4, $70, $B, $A7, $43, $DE, $79, $15, $B1, $4D, $E9, $85, $22, $C0, $5D, $FC, $9B, $3A, $DB, $7C, $1E, $C1, $65, $A, $B0, $57
0004F7r 1  AE 5D 0D BF  
0004FBr 1  73 28 DF 98  
0005F3r 1               
0005F3r 1               NEXT_ROW_X_H: ; 0E00
0005F3r 1  F8 F7 F7 F7  .byte
0005F7r 1  F6 F6 F6 F5  
0005FBr 1  F5 F5 F4 F4  
0006F3r 1               
0006F3r 1               NEXT_ROW_Y_L: ; 0F00
0006F3r 1  33 58 7D A5  .byte $33,$58,$7D,$A5,$CD,$F7,$23,$50,$7E,$AD,$DE,$10,$44,$78,$AE,$E4,$1C,$55,$8F,$CA,$6,$43,$81,$BF,$FE,$3F,$7F,$C1,$3,$46,$8A,$CD,$12,$57,$9C,$E2,$28,$6E,$B4,$FB,$42,$89,$D0,$17,$5E,$A5,$EC,$33,$7A,$C0,$6,$4C,$91,$D6,$1B,$5F,$A2,$E6,$28,$6A,$AB,$EB,$2B,$6A,$A8,$E5,$21,$5C,$97,$D0,$8,$3F,$75,$AA,$DE,$10,$41,$71,$A0,$CD,$F9,$24,$4D,$75,$9B,$C0,$E3,$5,$25,$44,$61,$7C,$96,$AE,$C5,$DA,$ED,$FF,$F,$1D,$29,$34,$3D,$44,$4A,$4D,$4F,$50,$4E,$4B,$46,$3F,$37,$2D,$21,$13,$4,$F3,$E0,$CC,$B6,$9E,$85,$6A,$4E,$30,$10,$EF,$CC,$A7,$82,$5A,$32,$8,$DC,$AF,$81,$52,$21,$EF,$BB,$87,$51,$1B,$E3,$AA,$70,$35,$F9,$BC,$7E,$40,$1,$C0,$80,$3E,$FC,$B9,$75,$32,$ED,$A8,$63,$1D,$D7,$91,$4B,$4,$BD,$76,$2F,$E8,$A1,$5A,$13,$CC,$85,$3F,$F9,$B3,$6E,$29,$E4,$A0,$5D,$19,$D7,$95,$54,$14,$D4,$95,$57,$1A,$DE,$A3,$68,$2F,$F7,$C0,$8A,$55,$21,$EF,$BE,$8E,$5F,$32,$6,$DB,$B2,$8A,$64,$3F,$1C,$FA,$DA,$BB,$9E,$83,$69,$51,$3A,$25,$12,$0,$F0,$E2,$D6,$CB,$C2,$BB,$B5,$B2,$B0,$AF,$B1,$B4,$B9,$C0,$C8,$D2,$DE,$EC,$FB,$C,$1F,$33,$49,$61,$7A,$95,$B1,$CF,$EF,$10
0006F7r 1  CD F7 23 50  
0006FBr 1  7E AD DE 10  
0007F3r 1               
0007F3r 1               NEXT_ROW_Y_H: ; 1000
0007F3r 1  F6 F6 F6 F6  .byte $F6,$F6,$F6,$F6,$F6,$F6,$F7,$F7,$F7,$F7,$F7,$F8,$F8,$F8,$F8,$F8,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$0,$0,$0,$0,$1,$1,$1,$2,$2,$2,$2,$3,$3,$3,$3,$4,$4,$4,$4,$5,$5,$5,$5,$6,$6,$6,$6,$7,$7,$7,$7,$7,$8,$8,$8,$8,$8,$8,$9,$9,$9,$9,$9,$9,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$9,$9,$9,$9,$9,$9,$9,$8,$8,$8,$8,$8,$7,$7,$7,$7,$7,$6,$6,$6,$6,$5,$5,$5,$5,$5,$4,$4,$4,$3,$3,$3,$3,$2,$2,$2,$2,$1,$1,$1,$1,$0,$0,$0,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F8,$F8,$F8,$F8,$F8,$F7,$F7,$F7,$F7,$F7,$F7,$F6,$F6,$F6,$F6,$F6,$F6,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F6
0007F7r 1  F6 F6 F7 F7  
0007FBr 1  F7 F7 F7 F8  
0008F3r 1               
0008F3r 1               TUB_WORLD: ; 32*64 = 2K ... is 1100 to 1900-1
0008F3r 1               .include "tub_world_hieghts_01.inc"
0008F3r 2               ; 0 to 128 will be water level. >128 = distance along row to water (neg) , 128 = no water this row.
0008F3r 2               ; rows are stored within 64 byte rows
0008F3r 2               ; 	  0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63
0008F3r 2  FF FF FF FF  .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 30
0008F7r 2  FF FF FF FF  
0008FBr 2  FF FF FF FF  
000933r 2  FF FF FF FF  .byte   $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF ; 29
000937r 2  FF FF FF FF  
00093Br 2  FF FF FF FF  
000973r 2  FF FF FF FF  .byte     $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF ; 28
000977r 2  FF FF FF FF  
00097Br 2  FF FF FF FF  
0009B3r 2  FF FF FF FF  .byte       $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF ; 27
0009B7r 2  FF FF FF FF  
0009BBr 2  FF FF FF FF  
0009F3r 2  FF FF FF FF  .byte         $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF ; 26
0009F7r 2  FF FF FF FF  
0009FBr 2  FF FF FF FF  
000A33r 2  FF FF FF FF  .byte           $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 25
000A37r 2  FF FF FF FF  
000A3Br 2  FF FF FF FF  
000A73r 2  FF FF FF FF  .byte             $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 24
000A77r 2  FF FF FF FF  
000A7Br 2  FF FF FF FF  
000AB3r 2  FF FF FF FF  .byte               $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 23
000AB7r 2  FF FF FF FF  
000ABBr 2  FF FF FF 80  
000AF3r 2  FF FF FF FF  .byte                 $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 22
000AF7r 2  FF FF FF FF  
000AFBr 2  FF FF 80 00  
000B33r 2  FF FF FF FF  .byte                   $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF; 21
000B37r 2  FF FF FF FF  
000B3Br 2  FF 80 00 00  
000B73r 2  FF FF FF FF  .byte                     $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF ; 20
000B77r 2  FF FF FF FF  
000B7Br 2  FF 80 00 00  
000BB3r 2  FF FF FF FF  .byte                       $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF ; 19
000BB7r 2  FF FF FF FF  
000BBBr 2  80 00 00 00  
000BF3r 2  FF FF FF FF  .byte                         $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 18
000BF7r 2  FF FF FF FF  
000BFBr 2  80 00 00 00  
000C33r 2  FF FF FF FF  .byte                           $FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 17
000C37r 2  FF FF FF 80  
000C3Br 2  00 00 00 00  
000C73r 2  FF FF FF FF  .byte                             $FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 16
000C77r 2  FF FF FF 80  
000C7Br 2  00 00 00 00  
000CB3r 2  FF FF FF FF  .byte                               $FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 15
000CB7r 2  FF FF 80 00  
000CBBr 2  00 00 00 00  
000CF3r 2  FF FF FF FF  .byte                                 $FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF ; 14
000CF7r 2  FF FF 80 00  
000CFBr 2  00 00 00 00  
000D33r 2  FF FF FF FF  .byte                                   $FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 13
000D37r 2  FF 80 00 00  
000D3Br 2  00 00 00 00  
000D73r 2  FF FF FF FF  .byte                                     $FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 12
000D77r 2  FF 80 00 00  
000D7Br 2  00 00 00 00  
000DB3r 2  FF FF FF FF  .byte                                       $FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 11
000DB7r 2  80 00 00 00  
000DBBr 2  00 00 00 00  
000DF3r 2  FF FF FF FF  .byte                                         $FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 10
000DF7r 2  80 00 00 00  
000DFBr 2  00 00 00 00  
000E33r 2  FF FF FF 80  .byte                                           $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 9
000E37r 2  00 00 00 00  
000E3Br 2  00 00 00 00  
000E73r 2  FF FF FF 80  .byte                                             $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 8
000E77r 2  00 00 00 00  
000E7Br 2  00 00 00 00  
000EB3r 2  FF FF FF 80  .byte                                               $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 7
000EB7r 2  00 00 00 00  
000EBBr 2  00 00 00 00  
000EF3r 2  FF FF FF 80  .byte                                                 $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 6
000EF7r 2  00 00 00 00  
000EFBr 2  00 00 00 00  
000F33r 2  FF FF FF 80  .byte                                                   $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 5
000F37r 2  00 00 00 00  
000F3Br 2  00 00 00 00  
000F73r 2  FF FF FF 80  .byte                                                     $FF,$FF,$FF,$80,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 4
000F77r 2  00 01 02 02  
000F7Br 2  01 01 00 01  
000FB3r 2  FF FF FF 80  .byte                                                       $FF,$FF,$FF,$80,$80,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 3
000FB7r 2  80 00 01 02  
000FBBr 2  02 01 01 00  
000FF3r 2  FF FF FF FF  .byte                                                         $FF,$FF,$FF,$FF,$80,$80,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 2
000FF7r 2  80 80 00 01  
000FFBr 2  02 02 01 01  
001033r 2  FF FF FF FF  .byte                                                           $FF,$FF,$FF,$FF,$FF,$80,$80,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 01
001037r 2  FF 80 80 00  
00103Br 2  01 02 02 01  
001073r 2  FF FF FF FF  .byte                                                             $FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 00 tub wall north
001077r 2  FF FF 80 80  
00107Br 2  80 80 80 80  
0010B3r 2  FF FF FF FF  .res 64,$FF
0010B7r 2  FF FF FF FF  
0010BBr 2  FF FF FF FF  
0010F3r 2               
0010F3r 2               
0010F3r 2               
0010F3r 1               
0010F3r 1               ; 1900
0010F3r 1               
0010F3r 1               OBJECT_LIST_Z_START_POINTERS: ; 1900
0010F3r 1  00 00 00 00  .res 256,0
0010F7r 1  00 00 00 00  
0010FBr 1  00 00 00 00  
0011F3r 1               OBJECT_LIST_BYTE0_ADDRLOW: ; 1A00 addr low
0011F3r 1  00 00 00 00  .res 256,0
0011F7r 1  00 00 00 00  
0011FBr 1  00 00 00 00  
0012F3r 1               OBJECT_LIST_BYTE1_MODE: ; 1B00 mode/addr bank
0012F3r 1  00 00 00 00  .res 256,0
0012F7r 1  00 00 00 00  
0012FBr 1  00 00 00 00  
0013F3r 1               OBJECT_LIST_BYTE2_X: ; 1C00 X position onscreen ( assumed positive for now)
0013F3r 1  00 00 00 00  .res 256,0
0013F7r 1  00 00 00 00  
0013FBr 1  00 00 00 00  
0014F3r 1               OBJECT_LIST_BYTE3_Y: ; 1D00 y position onscreen
0014F3r 1  00 00 00 00  .res 256,0
0014F7r 1  00 00 00 00  
0014FBr 1  00 00 00 00  
0015F3r 1               OBJECT_LIST_BYTE4_ZFLIPS: ; 1E00 collision / z / flips
0015F3r 1  00 00 00 00  .res 256,0
0015F7r 1  00 00 00 00  
0015FBr 1  00 00 00 00  
0016F3r 1               OBJECT_LIST_BYTE5_SIZE: ; 1F00 size / pal offset
0016F3r 1  00 00 00 00  .res 256,0
0016F7r 1  00 00 00 00  
0016FBr 1  00 00 00 00  
0017F3r 1               OBJECT_LIST_BYTE6_NEXT: ; 2000 NEXT
0017F3r 1  00 00 00 00  .res 256,0
0017F7r 1  00 00 00 00  
0017FBr 1  00 00 00 00  
0018F3r 1               
0018F3r 1               
0018F3r 1               
0018F3r 1               WORLD_TO_CELL_XH: ; 2100
0018F3r 1  00 00 01 02  .byte 0,0,1,2,3,4,5,6,6,7,8,9,10,11,12,12,13,14,15,16,17,18,19,19,20,21,22,23,24,25,25,26,27,28,29,30,31,32,32,33,34,35,36,37,38,38,39,40,41,42,43,44,45,45,46,47,48,49,50,51,51,52,53,54,55,56,57,58,58,59,60,61,62,63,64,64,65,66,67,68,69,70,71,71,72,73,74,75,76,77,77,78,79,80,81,82,83,84,84,85,86,87,88,89,90,90,91,92,93,94,95,96,96,97,98,99,100,101,102,103,103,104,105,106,107,108,109,109,110,111,112,113,114,115,116,116,117,118,119,120,121,122,122,123,124,125,126,127,128,129,129,130,131,132,133,134,135,135,136,137,138,139,140,141,142,142,143,144,145,146,147,148,148,149,150,151,152,153,154,155,155,156,157,158,159,160,161,161,162,163,164,165,166,167,168,168,169,170,171,172,173,174,174,175,176,177,178,179,180,180,181,182,183,184,185,186,187,187,188,189,190,191,192,193,193,194,195,196,197,198,199,200,200,201,202,203,204,205,206,206,207,208,209,210,211,212,213,213,214,215,216,217,218,219,219,220
0018F7r 1  03 04 05 06  
0018FBr 1  06 07 08 09  
0019F3r 1               ;.byte 0,0,1,2,3,4,5,6,6,7,8,9,10,11,12,12,13,14,15,16,17,18,19,19,20,21,22,23,24,25,25,26,27,28,29,30,31,32,32,33,34,35,36,37,38,38,39,40,41,42,43,44,45,45,46,47,48,49,50,51,51,52,53,54,55,56,57,58,58,59,60,61,62,63,64,64,65,66,67,68,69,70,71,71,72,73,74,75,76,77,77,78,79,80,81,82,83,84,84,85,86,87,88,89,90,90,91,92,93,94,95,96,96,97,98,99,100,101,102,103,103,104,105,106,107,108,109,109
0019F3r 1               ;.res 128,128
0019F3r 1               WORLD_TO_CELL_XL:
0019F3r 1  00 DD BB 99  .byte 0,221,187,153,118,84,50,15,237,203,169,134,100,66,31,253,219,184,150,116,82,47,13,235,200,166,132,97,63,29,251,216,182,148,113,79,45,10,232,198,164,129,95,61,26,248,214,180,145,111,77,42,8,230,195,161,127,93,58,24,246,211,177,143,108,74,40,6,227,193,159,124,90,56,21,243,209,175,140,106,72,37,3,225,191,156,122,88,53,19,241,206,172,138,104,69,35,1,222,188,154,119,85,51,17,238,204,170,135,101,67,32,254,220,186,151,117,83,48,14,236,202,167,133,99,64,30,252,217,183,149,115,80,46,12,233,199,165,130,96,62,28,249,215,181,146,112,78,43,9,231,197,162,128,94,59,25,247,212,178,144,110,75,41,7,228,194,160,126,91,57,23,244,210,176,141,107,73,39,4,226,192,157,123,89,54,20,242,208,173,139,105,70,36,2,223,189,155,121,86,52,18,239,205,171,137,102,68,34,255,221,187,152,118,84,50,15,237,203,168,134,100,65,31,253,219,184,150,116,81,47,13,234,200,166,132,97,63,29,250,216,182,148,113,79,45,10,232,198,163,129,95,61,26,248,214
0019F7r 1  76 54 32 0F  
0019FBr 1  ED CB A9 86  
001AF3r 1               ;.byte 0,221,187,153,118,84,50,15,237,203,169,134,100,66,31,253,219,184,150,116,82,47,13,235,200,166,132,97,63,29,251,216,182,148,113,79,45,10,232,198,164,129,95,61,26,248,214,180,145,111,77,42,8,230,195,161,127,93,58,24,246,211,177,143,108,74,40,6,227,193,159,124,90,56,21,243,209,175,140,106,72,37,3,225,191,156,122,88,53,19,241,206,172,138,104,69,35,1,222,188,154,119,85,51,17,238,204,170,135,101,67,32,254,220,186,151,117,83,48,14,236,202,167,133,99,64,30,252
001AF3r 1               ;.res 128,0
001AF3r 1               CELL_TO_WORLD_XH: ; 2200
001AF3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,8,9,10,11,12,13,15,16,17,18,19,20,21,23,24,25,26,27,28,30,31,32,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,50,51,53,54,55,56,57,58,60,61,62,63,64,65,66,68,69,70,71,72,73,75,76,77,78,79,80,81,83,84,85,86,87,88,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,112,113,114,115,116,117,118,120,121,122,123,124,125,127,128,129,130,131,132,133,135,136,137,138,139,140,142,143,144,145,146
001AF7r 1  04 05 06 08  
001AFBr 1  09 0A 0B 0C  
001B73r 1               CELL_TO_WORLD_XL: ; 2280
001B73r 1  00 27 4F 76  .byte 0,39,79,118,158,198,237,21,60,100,140,179,219,2,42,82,121,161,200,240,24,63,103,142,182,222,5,45,84,124,164,203,243,26,66,106,145,185,224,8,48,87,127,166,206,246,29,69,108,148,188,227,11,50,90,130,169,209,248,32,72,111,151,191,230,14,53,93,133,172,212,251,35,75,114,154,193,233,17,56,96,135,175,215,254,38,77,117,157,196,236,19,59,99,138,178,217,1,41,80,120,159,199,239,22,62,101,141,181,220,4,43,83,123,162,202,241,25,65,104,144,184,223,7,46,86,126,165
001B77r 1  9E C6 ED 15  
001B7Br 1  3C 64 8C B3  
001BF3r 1               
001BF3r 1               CELL_LOW_TO_WORLD_XH: ; 2300
001BF3r 1  00 00 00 00  .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
001BF7r 1  00 00 00 00  
001BFBr 1  00 00 00 00  
001CF3r 1               CELL_LOW_TO_WORLD_XL: ; 2400
001CF3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,8,9,10,11,12,13,15,16,17,18,19,20,21,23,24,25,26,27,28,30,31,32,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,50,51,53,54,55,56,57,58,60,61,62,63,64,65,66,68,69,70,71,72,73,75,76,77,78,79,80,81,83,84,85,86,87,88,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,112,113,114,115,116,117,118,120,121,122,123,124,125,127,128,129,130,131,132,133,135,136,137,138,139,140,142,143,144,145,146,147,148,150,151,152,153,154,155,157,158,159,160,161,162,163,165,166,167,168,169,170,172,173,174,175,176,177,178,180,181,182,183,184,185,187,188,189,190,191,192,193,195,196,197,198,199,200,202,203,204,205,206,207,209,210,211,212,213,214,215,217,218,219,220,221,222,224,225,226,227,228,229,230,232,233,234,235,236,237,239,240,241,242,243,244,245,247,248,249,250,251,252,254,255,0,1,2,3,4,6,7,8,9,10,11,13,14,15,16,17,18,19,21,22,23,24,25,26,28,29,30,31,32,33,34,36,37,38
001CF7r 1  04 05 06 08  
001CFBr 1  09 0A 0B 0C  
001DF3r 1               
001DF3r 1               SPRITE_NUM_HIGH_NIBBLE: ; 2900
001DF3r 1  00 00 00 00  .res 16, 0
001DF7r 1  00 00 00 00  
001DFBr 1  00 00 00 00  
001E03r 1  01 01 01 01  .res 16, 1
001E07r 1  01 01 01 01  
001E0Br 1  01 01 01 01  
001E13r 1  02 02 02 02  .res 16, 2
001E17r 1  02 02 02 02  
001E1Br 1  02 02 02 02  
001E23r 1  03 03 03 03  .res 16, 3
001E27r 1  03 03 03 03  
001E2Br 1  03 03 03 03  
001E33r 1  04 04 04 04  .res 16, 4
001E37r 1  04 04 04 04  
001E3Br 1  04 04 04 04  
001E43r 1  05 05 05 05  .res 16, 5
001E47r 1  05 05 05 05  
001E4Br 1  05 05 05 05  
001E53r 1  06 06 06 06  .res 16, 6
001E57r 1  06 06 06 06  
001E5Br 1  06 06 06 06  
001E63r 1  07 07 07 07  .res 16, 7
001E67r 1  07 07 07 07  
001E6Br 1  07 07 07 07  
001E73r 1  08 08 08 08  .res 16, 8
001E77r 1  08 08 08 08  
001E7Br 1  08 08 08 08  
001E83r 1  09 09 09 09  .res 16, 9
001E87r 1  09 09 09 09  
001E8Br 1  09 09 09 09  
001E93r 1  0A 0A 0A 0A  .res 16, 10
001E97r 1  0A 0A 0A 0A  
001E9Br 1  0A 0A 0A 0A  
001EA3r 1  0B 0B 0B 0B  .res 16, 11
001EA7r 1  0B 0B 0B 0B  
001EABr 1  0B 0B 0B 0B  
001EB3r 1  0C 0C 0C 0C  .res 16, 12
001EB7r 1  0C 0C 0C 0C  
001EBBr 1  0C 0C 0C 0C  
001EC3r 1  0D 0D 0D 0D  .res 16, 13
001EC7r 1  0D 0D 0D 0D  
001ECBr 1  0D 0D 0D 0D  
001ED3r 1  0E 0E 0E 0E  .res 16, 14
001ED7r 1  0E 0E 0E 0E  
001EDBr 1  0E 0E 0E 0E  
001EE3r 1  0F 0F 0F 0F  .res 16, 15
001EE7r 1  0F 0F 0F 0F  
001EEBr 1  0F 0F 0F 0F  
001EF3r 1               
001EF3r 1               SPRITE_NUM_LOW_NIBBLE: ; 2A00
001EF3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001EF7r 1  04 05 06 07  
001EFBr 1  08 09 0A 0B  
001F03r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F07r 1  04 05 06 07  
001F0Br 1  08 09 0A 0B  
001F13r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F17r 1  04 05 06 07  
001F1Br 1  08 09 0A 0B  
001F23r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F27r 1  04 05 06 07  
001F2Br 1  08 09 0A 0B  
001F33r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F37r 1  04 05 06 07  
001F3Br 1  08 09 0A 0B  
001F43r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F47r 1  04 05 06 07  
001F4Br 1  08 09 0A 0B  
001F53r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F57r 1  04 05 06 07  
001F5Br 1  08 09 0A 0B  
001F63r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F67r 1  04 05 06 07  
001F6Br 1  08 09 0A 0B  
001F73r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F77r 1  04 05 06 07  
001F7Br 1  08 09 0A 0B  
001F83r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F87r 1  04 05 06 07  
001F8Br 1  08 09 0A 0B  
001F93r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F97r 1  04 05 06 07  
001F9Br 1  08 09 0A 0B  
001FA3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001FA7r 1  04 05 06 07  
001FABr 1  08 09 0A 0B  
001FB3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001FB7r 1  04 05 06 07  
001FBBr 1  08 09 0A 0B  
001FC3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001FC7r 1  04 05 06 07  
001FCBr 1  08 09 0A 0B  
001FD3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001FD7r 1  04 05 06 07  
001FDBr 1  08 09 0A 0B  
001FE3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001FE7r 1  04 05 06 07  
001FEBr 1  08 09 0A 0B  
001FF3r 1               
001FF3r 1               SCREEN_Y_TO_Z: ; 2B00
001FF3r 1  FF FD FB FA  .byte 255,253,251,250,248,247,245,243,242,240,239,237,235,234,232,231,229,227,226,224,223,221,220,218,216,215,213,212,210,208,207,205,204,202,200,199,197,196,194,192,191,189,188,186,185,183,181,180,178,177,175,173,172,170,169,167,165,164,162,161,159,158,156,154,153,151,150,148,146,145,143,142,140,138,137,135,134,132,130,129,127,126,124,123,121,119,118,116,115,113,111,110,108,107,105,103,102,100,99,97,95,94,92,91,89,88,86,84,83,81,80,78,76,75,73,72,70,68,67,65,64,62,61,59,57,56,54,53,51,49,48,46,45,43,41,40,38,37,35,33,32,30,29,27,26,24,22,21,19,18,16,14,13,11,10,8,6,5,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
001FF7r 1  F8 F7 F5 F3  
001FFBr 1  F2 F0 EF ED  
0020F3r 1               
0020F3r 1               CONVERT_HEIGHTS_PIXELS: ; 2C00
0020F3r 1               ;.res 256,0
0020F3r 1  00 00 01 01  .byte 0,0,1,1,2,3,3,4,4,5,6,6,7,7,8,9,9,10,11,11,12,12,13,14,14,15,15,16,17,17,18,18,19,20,20,21,22,22,23,23,24,25,25,26,26,27,28,28,29,30,30,31,31,32,33,33,34,34,35,36,36,37,37,38,39,39,40,41,41,42,42,43,44,44,45,45,46,47,47,48,48,49,50,50,51,52,52,53,53,54,55,55,56,56,57,58,58,59,60,60,61,61,62,63,63,64,64,65,66,66,67,67,68,69,69,70,71,71,72,72,73,74,74,75,75,76,77,77,78,78,79,80,80,81,82,82,83,83,84,85,85,86,86,87,88,88,89,90,90,91,91,92,93,93,94,94,95,96,96,97,97,98,99,99,100,101,101,102,102,103,104,104,105,105,106,107,107,108,109,109,110,110,111,112,112,113,113,114,115,115,116,116,117,118,118,119,120,120,121,121,122,123,123,124,124,125,126,126,127,127,128,129,129,130,131,131,132,132,133,134,134,135,135,136,137,137,138,139,139,140,140,141,142,142,143,143,144,145,145,146,146,147,148,148,149,150,150,151,151,152,153,153,154,154,155,156
0020F7r 1  02 03 03 04  
0020FBr 1  04 05 06 06  
0021F3r 1               ;.byte 0,0,1,1,2,3,3,4,4,5,6,6,7,7,8,9,9,10,11,11,12,12,13,14,14,15,15,16,17,17,18,18,19,20,20,21,22,22,23,23,24,25,25,26,26,27,28,28,29,30,30,31,31,32,33,33,34,34,35,36,36,37,37,38,39,39,40,41,41,42,42,43,44,44,45,45,46,47,47,48,48,49,50,50,51,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52;,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52
0021F3r 1               ;.res 128,0
0021F3r 1               CONVERT_HEIGHTS_PIXELS_L:
0021F3r 1               ;.res 256,0
0021F3r 1  00 9C 39 D6  .byte 0,156,57,214,115,15,172,73,230,130,31,188,89,245,146,47,204,105,5,162,63,220,120,21,178,79,235,136,37,194,95,251,152,53,210,110,11,168,69,225,126,27,184,84,241,142,43,200,100,1,158,59,215,116,17,174,74,231,132,33,190,90,247,148,49,205,106,7,164,64,221,122,23,180,80,237,138,39,195,96,253,154,54,211,112,0,169,70,227,128,29,185,86,243,144,44,201,102,3,159,60,217,118,19,175,76,233,134,34,191,92,249,149,50,207,108,9,165,66,223,124,24,181,82,239,139,40,197,98,254,155,56,213,114,14,171,72,229,129,30,187,88,244,145,46,203,104,4,161,62,219,119,20,177,78,234,135,36,193,94,250,151,52,209,109,10,167,68,224,125,26,183,83,240,141,42,199,99,0,157,58,214,115,16,173,73,230,131,32,189,89,246,147,48,204,105,6,163,63,220,121,22,179,79,236,137,38,194,95,252,153,53,210,111,12,168,69,226,127,28,184,85,242,143,43,200,101,2,158,59,216,117,18,174,75,232,133,33,190,91,248,148,49,206,107,7,164,65,222,123,23,180,81,238,138,39
0021F7r 1  73 0F AC 49  
0021FBr 1  E6 82 1F BC  
0022F3r 1               
0022F3r 1               SUBCELL_X_COS_L:
0022F3r 1  00 FF FF FF  .byte $0,$FF,$FF,$FF,$FE,$FE,$FD,$FC,$FB,$F9,$F8,$F6,$F4,$F3,$F1,$EE,$EC,$EA,$E7,$E4,$E1,$DE,$DB,$D8,$D4,$D1,$CD,$C9,$C5,$C1,$BD,$B9,$B5,$B0,$AB,$A7,$A2,$9D,$98,$93,$8E,$88,$83,$7E,$78,$73,$6D,$67,$61,$5C,$56,$50,$4A,$44,$3E,$38,$31,$2B,$25,$1F,$19,$12,$C,$6,$0,$F9,$F3,$ED,$E6,$E0,$DA,$D4,$CE,$C7,$C1,$BB,$B5,$AF,$A9,$A3,$9E,$98,$92,$8C,$87,$81,$7C,$77,$71,$6C,$67,$62,$5D,$58,$54,$4F,$4A,$46,$42,$3E,$3A,$36,$32,$2E,$2B,$27,$24,$21,$1E,$1B,$18,$15,$13,$11,$E,$C,$B,$9,$7,$6,$4,$3,$2,$1,$1,$0,$0,$0,$0,$0,$0,$0,$1,$1,$2,$3,$4,$6,$7,$9,$B,$C,$E,$11,$13,$15,$18,$1B,$1E,$21,$24,$27,$2B,$2E,$32,$36,$3A,$3E,$42,$46,$4A,$4F,$54,$58,$5D,$62,$67,$6C,$71,$77,$7C,$81,$87,$8C,$92,$98,$9E,$A3,$A9,$AF,$B5,$BB,$C1,$C7,$CE,$D4,$DA,$E0,$E6,$ED,$F3,$F9,$0,$6,$C,$12,$19,$1F,$25,$2B,$31,$38,$3E,$44,$4A,$50,$56,$5C,$61,$67,$6D,$73,$78,$7E,$83,$88,$8E,$93,$98,$9D,$A2,$A7,$AB,$B0,$B5,$B9,$BD,$C1,$C5,$C9,$CD,$D1,$D4,$D8,$DB,$DE,$E1,$E4,$E7,$EA,$EC,$EE,$F1,$F3,$F4,$F6,$F8,$F9,$FB,$FC,$FD,$FE,$FE,$FF,$FF,$FF
0022F7r 1  FE FE FD FC  
0022FBr 1  FB F9 F8 F6  
0023F3r 1               SUBCELL_X_COS_H:
0023F3r 1  01 00 00 00  .byte $1,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0023F7r 1  00 00 00 00  
0023FBr 1  00 00 00 00  
0024F3r 1               SUBCELL_X_SIN_H:
0024F3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
0024F7r 1  00 00 00 00  
0024FBr 1  00 00 00 00  
0025F3r 1               SUBCELL_X_SIN_L:
0025F3r 1  00 05 0A 10  .byte $0,$5,$A,$10,$15,$1B,$20,$25,$2B,$30,$35,$3B,$40,$45,$4A,$4F,$54,$59,$5E,$63,$68,$6D,$71,$76,$7B,$7F,$84,$88,$8C,$90,$94,$98,$9C,$A0,$A4,$A7,$AB,$AE,$B2,$B5,$B8,$BB,$BE,$C0,$C3,$C6,$C8,$CA,$CC,$CE,$D0,$D2,$D4,$D5,$D7,$D8,$D9,$DA,$DB,$DC,$DC,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DC,$DC,$DB,$DA,$D9,$D8,$D7,$D5,$D4,$D2,$D0,$CE,$CC,$CA,$C8,$C6,$C3,$C0,$BE,$BB,$B8,$B5,$B2,$AE,$AB,$A7,$A4,$A0,$9C,$98,$94,$90,$8C,$88,$84,$7F,$7B,$76,$71,$6D,$68,$63,$5E,$59,$54,$4F,$4A,$45,$40,$3B,$35,$30,$2B,$25,$20,$1B,$15,$10,$A,$5,$0,$FA,$F5,$EF,$EA,$E4,$DF,$DA,$D4,$CF,$CA,$C4,$BF,$BA,$B5,$B0,$AB,$A6,$A1,$9C,$97,$92,$8E,$89,$84,$80,$7B,$77,$73,$6F,$6B,$67,$63,$5F,$5B,$58,$54,$51,$4D,$4A,$47,$44,$41,$3F,$3C,$39,$37,$35,$33,$31,$2F,$2D,$2B,$2A,$28,$27,$26,$25,$24,$23,$23,$22,$22,$22,$22,$22,$22,$22,$23,$23,$24,$25,$26,$27,$28,$2A,$2B,$2D,$2F,$31,$33,$35,$37,$39,$3C,$3F,$41,$44,$47,$4A,$4D,$51,$54,$58,$5B,$5F,$63,$67,$6B,$6F,$73,$77,$7B,$80,$84,$89,$8E,$92,$97,$9C,$A1,$A6,$AB,$B0,$B5,$BA,$BF,$C4,$CA,$CF,$D4,$DA,$DF,$E4,$EA,$EF,$F5,$FA
0025F7r 1  15 1B 20 25  
0025FBr 1  2B 30 35 3B  
0026F3r 1               SUBCELL_Y_COS_H:
0026F3r 1  00 00 00 00  .byte
0026F7r 1  00 00 00 00  
0026FBr 1  00 00 00 00  
0027F3r 1               SUBCELL_Y_COS_L:
0027F3r 1  9C 9C 9C 9C  .byte $9C,$9C,$9C,$9C,$9C,$9B,$9B,$9A,$99,$98,$98,$97,$96,$94,$93,$92,$90,$8F,$8D,$8C,$8A,$88,$86,$84,$82,$80,$7D,$7B,$79,$76,$74,$71,$6E,$6C,$69,$66,$63,$60,$5D,$5A,$57,$53,$50,$4D,$49,$46,$43,$3F,$3B,$38,$34,$31,$2D,$29,$26,$22,$1E,$1A,$17,$13,$F,$B,$7,$3,$0,$FC,$F8,$F4,$F0,$EC,$E8,$E5,$E1,$DD,$D9,$D6,$D2,$CE,$CB,$C7,$C4,$C0,$BC,$B9,$B6,$B2,$AF,$AC,$A8,$A5,$A2,$9F,$9C,$99,$96,$93,$91,$8E,$8B,$89,$86,$84,$82,$7F,$7D,$7B,$79,$77,$75,$73,$72,$70,$6F,$6D,$6C,$6B,$69,$68,$67,$67,$66,$65,$64,$64,$63,$63,$63,$63,$63,$63,$63,$63,$63,$64,$64,$65,$66,$67,$67,$68,$69,$6B,$6C,$6D,$6F,$70,$72,$73,$75,$77,$79,$7B,$7D,$7F,$82,$84,$86,$89,$8B,$8E,$91,$93,$96,$99,$9C,$9F,$A2,$A5,$A8,$AC,$AF,$B2,$B6,$B9,$BC,$C0,$C4,$C7,$CB,$CE,$D2,$D6,$D9,$DD,$E1,$E5,$E8,$EC,$F0,$F4,$F8,$FC,$0,$3,$7,$B,$F,$13,$17,$1A,$1E,$22,$26,$29,$2D,$31,$34,$38,$3B,$3F,$43,$46,$49,$4D,$50,$53,$57,$5A,$5D,$60,$63,$66,$69,$6C,$6E,$71,$74,$76,$79,$7B,$7D,$80,$82,$84,$86,$88,$8A,$8C,$8D,$8F,$90,$92,$93,$94,$96,$97,$98,$98,$99,$9A,$9B,$9B,$9C,$9C,$9C,$9C
0027F7r 1  9C 9B 9B 9A  
0027FBr 1  99 98 98 97  
0028F3r 1               SUBCELL_Y_SIN_H:
0028F3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
0028F7r 1  00 00 00 00  
0028FBr 1  00 00 00 00  
0029F3r 1               SUBCELL_Y_SIN_L:
0029F3r 1  00 04 08 0D  .byte $0,$4,$8,$D,$11,$16,$1A,$1E,$23,$27,$2B,$30,$34,$38,$3C,$41,$45,$49,$4D,$51,$55,$59,$5D,$60,$64,$68,$6B,$6F,$72,$76,$79,$7C,$7F,$83,$86,$89,$8B,$8E,$91,$93,$96,$98,$9B,$9D,$9F,$A1,$A3,$A5,$A7,$A8,$AA,$AB,$AD,$AE,$AF,$B0,$B1,$B2,$B3,$B3,$B4,$B4,$B4,$B4,$B5,$B4,$B4,$B4,$B4,$B3,$B3,$B2,$B1,$B0,$AF,$AE,$AD,$AB,$AA,$A8,$A7,$A5,$A3,$A1,$9F,$9D,$9B,$98,$96,$93,$91,$8E,$8B,$89,$86,$83,$80,$7C,$79,$76,$72,$6F,$6B,$68,$64,$60,$5D,$59,$55,$51,$4D,$49,$45,$41,$3C,$38,$34,$30,$2B,$27,$23,$1E,$1A,$16,$11,$D,$8,$4,$0,$FB,$F7,$F2,$EE,$E9,$E5,$E1,$DC,$D8,$D4,$CF,$CB,$C7,$C3,$BE,$BA,$B6,$B2,$AE,$AA,$A6,$A2,$9F,$9B,$97,$94,$90,$8D,$89,$86,$83,$80,$7C,$79,$76,$74,$71,$6E,$6C,$69,$67,$64,$62,$60,$5E,$5C,$5A,$58,$57,$55,$54,$52,$51,$50,$4F,$4E,$4D,$4C,$4C,$4B,$4B,$4B,$4B,$4A,$4B,$4B,$4B,$4B,$4C,$4C,$4D,$4E,$4F,$50,$51,$52,$54,$55,$57,$58,$5A,$5C,$5E,$60,$62,$64,$67,$69,$6C,$6E,$71,$74,$76,$79,$7C,$80,$83,$86,$89,$8D,$90,$94,$97,$9B,$9F,$A2,$A6,$AA,$AE,$B2,$B6,$BA,$BE,$C3,$C7,$CB,$CF,$D4,$D8,$DC,$E1,$E5,$E9,$EE,$F2,$F7,$FB
0029F7r 1  11 16 1A 1E  
0029FBr 1  23 27 2B 30  
002AF3r 1               
002AF3r 1               MOVE_Y_H:
002AF3r 1  00 00 00 00  .byte
002AF7r 1  00 00 00 00  
002AFBr 1  00 00 00 00  
002BF3r 1               MOVE_Y_L:
002BF3r 1  08 07 07 07  .byte $8,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$6,$6,$6,$6,$6,$6,$6,$6,$6,$5,$5,$5,$5,$5,$5,$5,$4,$4,$4,$4,$4,$4,$3,$3,$3,$3,$3,$3,$2,$2,$2,$2,$2,$1,$1,$1,$1,$1,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF,$FF,$0,$0,$0,$0,$0,$0,$1,$1,$1,$1,$1,$2,$2,$2,$2,$2,$3,$3,$3,$3,$3,$3,$4,$4,$4,$4,$4,$4,$5,$5,$5,$5,$5,$5,$5,$6,$6,$6,$6,$6,$6,$6,$6,$6,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7
002BF7r 1  07 07 07 07  
002BFBr 1  07 07 07 07  
002CF3r 1               MOVE_X_H:
002CF3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
002CF7r 1  00 00 00 00  
002CFBr 1  00 00 00 00  
002DF3r 1               MOVE_X_L:
002DF3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$1,$1,$1,$1,$1,$1,$2,$2,$2,$2,$2,$2,$2,$3,$3,$3,$3,$3,$3,$3,$4,$4,$4,$4,$4,$4,$4,$5,$5,$5,$5,$5,$5,$5,$5,$5,$5,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$5,$5,$5,$5,$5,$5,$5,$5,$5,$5,$4,$4,$4,$4,$4,$4,$4,$3,$3,$3,$3,$3,$3,$3,$2,$2,$2,$2,$2,$2,$2,$1,$1,$1,$1,$1,$1,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FB,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF,$FF
002DF7r 1  00 00 01 01  
002DFBr 1  01 01 01 01  
002EF3r 1               
002EF3r 1               
002EF3r 1               WORLD_SPRITE_CENTER_XH: ; 128 bytes
002EF3r 1  64 64 64 64  .byte $64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$65,$65,$65,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$65,$65,$65,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$65,$65,$65,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64,$64
002EF7r 1  64 64 64 64  
002EFBr 1  64 64 64 64  
002F73r 1               WORLD_SPRITE_CENTER_XL: ; 128 bytes
002F73r 1  00 0D 1B 29  .byte $0,$D,$1B,$29,$36,$43,$51,$5E,$6B,$78,$85,$92,$9F,$AB,$B8,$C4,$D1,$DD,$E9,$F6,$2,$E,$A,$FE,$F2,$E5,$D9,$CD,$C0,$B4,$A7,$9A,$8E,$81,$74,$67,$5A,$4C,$3F,$32,$24,$16,$9,$4,$12,$20,$2D,$3B,$48,$55,$62,$6F,$7C,$89,$96,$A3,$B0,$BC,$C9,$D5,$E1,$EE,$FA,$6,$12,$13,$FA,$EE,$E1,$D5,$C9,$BC,$B0,$A3,$96,$89,$7C,$6F,$62,$55,$48,$3B,$2D,$20,$12,$4,$9,$16,$24,$32,$3F,$4C,$5A,$67,$74,$81,$8E,$9A,$A7,$B4,$C0,$CD,$D9,$E5,$F2,$FE,$A,$E,$2,$F6,$E9,$DD,$D1,$C4,$B8,$AB,$9F,$92,$85,$78,$6B,$5E,$51,$43,$36,$29,$1B,$D
002F77r 1  36 43 51 5E  
002F7Br 1  6B 78 85 92  
002FF3r 1               WORLD_SPRITE_CENTER_YH: ; 128 bytes
002FF3r 1  4C 4C 4C 4C  .byte $4C,$4C,$4C,$4C,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4C,$4C,$4C,$4C,$4C,$4C,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4C,$4C,$4C,$4C,$4C,$4C,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4C,$4C,$4C
002FF7r 1  4B 4B 4B 4B  
002FFBr 1  4B 4B 4B 4B  
003073r 1               WORLD_SPRITE_CENTER_YL: ; 128 bytes
003073r 1  19 11 08 00  .byte $19,$11,$8,$0,$F7,$EE,$E6,$DD,$D4,$CB,$C2,$B9,$B0,$A7,$9D,$94,$8B,$81,$78,$6E,$64,$5B,$5E,$68,$71,$7B,$84,$8E,$97,$A0,$AA,$B3,$BC,$C5,$CE,$D7,$E0,$E8,$F1,$FA,$3,$B,$14,$17,$E,$5,$FD,$F4,$EB,$E3,$DA,$D1,$C8,$BF,$B6,$AD,$A3,$9A,$91,$87,$7E,$74,$6B,$61,$57,$57,$6B,$74,$7E,$87,$91,$9A,$A3,$AD,$B6,$BF,$C8,$D1,$DA,$E3,$EB,$F4,$FD,$5,$E,$17,$14,$B,$3,$FA,$F1,$E8,$E0,$D7,$CE,$C5,$BC,$B3,$AA,$A0,$97,$8E,$84,$7B,$71,$68,$5E,$5B,$64,$6E,$78,$81,$8B,$94,$9D,$A7,$B0,$B9,$C2,$CB,$D4,$DD,$E6,$EE,$F7,$0,$8,$11
003077r 1  F7 EE E6 DD  
00307Br 1  D4 CB C2 B9  
0030F3r 1               
0030F3r 1               WORLD_SPRITE_NUM_lookies: ; 128 bytes
0030F3r 1               ;      0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
0030F3r 1  00 00 00 00  .byte   0,  0,  0,  0, 32, 32, 32, 32, 32, 32, 64, 64, 64, 64, 64, 64
0030F7r 1  20 20 20 20  
0030FBr 1  20 20 40 40  
003103r 1  40 40 60 60  .byte  64, 64, 96, 96,160,160,160, 96, 96, 96, 64, 64, 64, 64, 64, 64
003107r 1  A0 A0 A0 60  
00310Br 1  60 60 40 40  
003113r 1  40 40 20 20  .byte  64, 64, 32, 32, 32, 32, 32, 32,  0,  0,  0,  0,  0,  0, 32, 32
003117r 1  20 20 20 20  
00311Br 1  00 00 00 00  
003123r 1  20 20 20 20  .byte  32, 32, 32, 32, 32, 64, 64, 64, 64, 64, 64, 64, 96, 96, 96,160
003127r 1  20 40 40 40  
00312Br 1  40 40 40 40  
003133r 1  A0 A0 60 60  .byte 160,160, 96, 96, 96, 64, 64, 64, 64, 64, 64, 64, 32, 32, 32, 32
003137r 1  60 40 40 40  
00313Br 1  40 40 40 40  
003143r 1  20 20 20 00  .byte  32, 32, 32,  0,  0,  0,  0,  0,  0, 32, 32, 32, 32, 32, 32, 64
003147r 1  00 00 00 00  
00314Br 1  00 20 20 20  
003153r 1  40 40 40 40  .byte  64, 64, 64, 64, 64, 64, 64, 96, 96, 96,160,160,160, 96, 96, 64
003157r 1  40 40 40 60  
00315Br 1  60 60 A0 A0  
003163r 1  40 40 40 40  .byte  64, 64, 64, 64, 64, 64, 64, 32, 32, 32, 32, 32, 32,  0,  0,  0
003167r 1  40 40 40 20  
00316Br 1  20 20 20 20  
003173r 1               WORLD_WALL_SPRITE_NUM_lookies:
003173r 1  80 80 80 80  .byte 128,128,128,128,128,128,128,128,128,128,192,192,192,192,192,192
003177r 1  80 80 80 80  
00317Br 1  80 80 C0 C0  
003183r 1  C0 C0 C0 C0  .byte 192,192,192,192,224,224,224,192,192,192,192,192,192,192,192,192
003187r 1  E0 E0 E0 C0  
00318Br 1  C0 C0 C0 C0  
003193r 1  C0 C0 80 80  .byte 192,192,128,128,128,128,128,128,128,128,128,128,128,128,128,128
003197r 1  80 80 80 80  
00319Br 1  80 80 80 80  
0031A3r 1  80 80 80 80  .byte 128,128,128,128,128,192,192,192,192,192,192,192,192,192,192,224
0031A7r 1  80 C0 C0 C0  
0031ABr 1  C0 C0 C0 C0  
0031B3r 1  E0 E0 C0 C0  .byte 224,224,192,192,192,192,192,192,192,192,192,192,128,128,128,128
0031B7r 1  C0 C0 C0 C0  
0031BBr 1  C0 C0 C0 C0  
0031C3r 1  80 80 80 80  .byte 128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,192
0031C7r 1  80 80 80 80  
0031CBr 1  80 80 80 80  
0031D3r 1  C0 C0 C0 C0  .byte 192,192,192,192,192,192,192,192,192,192,224,224,224,192,192,192
0031D7r 1  C0 C0 C0 C0  
0031DBr 1  C0 C0 E0 E0  
0031E3r 1  C0 C0 C0 C0  .byte 192,192,192,192,192,192,192,128,128,128,128,128,128,128,128,128
0031E7r 1  C0 C0 C0 80  
0031EBr 1  80 80 80 80  
0031F3r 1               
0031F3r 1               ;constants
0031F3r 1               
0031F3r 1               ; RAM Interrupt Vectors
0031F3r 1               IRQVec            = $0314
0031F3r 1               
0031F3r 1               ; VERA
0031F3r 1               VERA_addr_low     = $9F20
0031F3r 1               VERA_addr_high    = $9F21
0031F3r 1               VERA_addr_bank    = $9F22
0031F3r 1               VERA_data0        = $9F23
0031F3r 1               VERA_data1        = $9F24
0031F3r 1               VERA_ctrl         = $9F25
0031F3r 1               VERA_ien          = $9F26
0031F3r 1               VERA_isr          = $9F27
0031F3r 1               VERA_dc_video     = $9F29 ; DCSEL = 0
0031F3r 1               FX_CTRL           = $9F29 ; DCSEL = 2
0031F3r 1               FX_MULT           = $9F2C ; DCSEL = 2
0031F3r 1               FX_CACHE_L        = $9F29 ; DCSEL = 6
0031F3r 1               FX_CACHE_M        = $9F2A
0031F3r 1               FX_CACHE_H        = $9F2B
0031F3r 1               FX_CACHE_U        = $9F2C
0031F3r 1               ;   Current Field | Sprites Enable | Layer1 Enable  |Layer0 Enable
0031F3r 1               ; NTSC/RGB: 240P  | NTSC: Chroma Disable / RGB: HV Sync Output Mode
0031F3r 1               
0031F3r 1               VERA_dc_hscale    = $9F2A
0031F3r 1               VERA_dc_vscale    = $9F2B
0031F3r 1               
0031F3r 1               VERA_L0_config    = $9F2D
0031F3r 1               ;   7       6     5   4       3       2             1   0
0031F3r 1               ;   Map Height | Map Width | T256C | Bitmap Mode | Color Depth
0031F3r 1               ;   0 - 32                  0 - 16    0 tiled       0   1bpp mono
0031F3r 1               ;   1 - 64                  1 - 256   1 enabled     1   2bpp 4 color
0031F3r 1               ;   2 - 128                                         2   4bpp 16 color
0031F3r 1               ;   3 - 256                                         3   8bpp 256 color
0031F3r 1               ;   bitmap mode - tilebase points to bitmap data, mapbase not used
0031F3r 1               ;   tile width = 0 is 320 pixels / tile width=1 is 640 pixels.. so could do 4bpp x 320?
0031F3r 1               ;   The palette offset (in 'H-Scroll (11:8)') modifies the color indexes of the bitmap in the same way as in the tile modes.
0031F3r 1               
0031F3r 1               VERA_L0_mapbase   = $9F2E
0031F3r 1               VERA_L0_tilebase  = $9F2F ;   Tile Base Address (16:11) | Tile Height 0-8/1-16 | Tile Width 0-8/1-16
0031F3r 1               VERA_L0_HSCROLL_L = $9F30 ;  H-Scroll (7:0)
0031F3r 1               VERA_L0_HSCROLL_H = $9F31 ;  - H-Scroll (11:8)
0031F3r 1               VERA_L0_VSCROLL_L = $9F32 ;  V-Scroll (7:0)
0031F3r 1               VERA_L0_VSCROLL_H = $9F33 ;  - V-Scroll (11:8)
0031F3r 1               
0031F3r 1               VERA_L1_config    = $9F34
0031F3r 1               VERA_L1_mapbase   = $9F35
0031F3r 1               VERA_L1_tilebase  = $9F36
0031F3r 1               VERA_L1_HSCROLL_L = $9F37 ;  H-Scroll (7:0)
0031F3r 1               VERA_L1_HSCROLL_H = $9F38 ;  - H-Scroll (11:8)
0031F3r 1               VERA_L1_VSCROLL_L = $9F39 ;  V-Scroll (7:0)
0031F3r 1               VERA_L1_VSCROLL_H = $9F3A ;  - V-Scroll (11:8)
0031F3r 1               
0031F3r 1               VSYNC_BIT         = $01
0031F3r 1               
0031F3r 1               ; VRAM Addresses
0031F3r 1               ;   Address range Description
0031F3r 1               ;   $00000 - $1F9BF Video RAM   - 129,424 bytes -> 126K is 129,024 (1F800)
0031F3r 1               ;   $1F9C0 - $1F9FF PSG registers
0031F3r 1               ;   $1FA00 - $1FBFF Palette
0031F3r 1               ;   $1FC00 - $1FFFF Sprite attributes
0031F3r 1               VRAM_SPRITES =      $00000  ; putting sprite data at start of VRAM for now.. may move later?
0031F3r 1               VRAM_SPRITE_BUF =   $1EC00  ; 123K - sprite attribute buffer for swapping data in ..
0031F3r 1               VRAM_CHARSET =      $1F000  ;  $1:F000-$1:F7FF Charset loaded by kernal here .. is at 124K ..
0031F3r 1               ; only can go to 126K ...
0031F3r 1               VRAM_palette      = $1FA00      ;
0031F3r 1               VRAM_sprite_attributes = $1FC00
0031F3r 1               
0031F3r 1               SPRITES_ONLY_VGA = $41
0031F3r 1               
0031F3r 1               
0031F3r 1               
0031F3r 1               ; Kernal
0031F3r 1               CHROUT            = $FFD2
0031F3r 1               GETIN             = $FFE4
0031F3r 1               CINT              = $FF81
0031F3r 1               
0031F3r 1               
0031F3r 1               ; PETSCII Codes
0031F3r 1               WHITE             = $05
0031F3r 1               RETURN            = $0D
0031F3r 1               SPACE             = $20
0031F3r 1               ZERO_CHAR         = $30
0031F3r 1               SIX_CHAR          = $36
0031F3r 1               NINE_CHAR         = $39
0031F3r 1               
0031F3r 1               A_CHAR            = $41
0031F3r 1               C_CHAR            = $43
0031F3r 1               D_CHAR            = $44
0031F3r 1               E_CHAR            = $45
0031F3r 1               I_CHAR            = $49
0031F3r 1               J_CHAR            = $4A
0031F3r 1               K_CHAR            = $4B
0031F3r 1               L_CHAR            = $4C
0031F3r 1               O_CHAR            = $4F
0031F3r 1               T_CHAR            = $54
0031F3r 1               W_CHAR            = $57
0031F3r 1               X_CHAR            = $58
0031F3r 1               Y_CHAR            = $59
0031F3r 1               Z_CHAR            = $5A
0031F3r 1               
0031F3r 1               CLR               = $93
0031F3r 1               
0031F3r 1               ; 	$0800-$9EFF	BASIC program/variables; available to the user
0031F3r 1               WORLD_DATA = $6000 	;	so is %100 [Y 5 bits ] : [ab] 0 [X - 6 bits
0031F3r 1               SCREEN_buffer = $8000
0031F3r 1               
0031F3r 1               ; zero page layout $0022-$007F is available to user
0031F3r 1               ZP_PTR = $22
0031F3r 1               SCRATCH_PTR = $7E
0031F3r 1               
0031F3r 1               SPRITE_SIZE_ORA = $D0 ; $D0 for 16x64, $50 for 16x16
0031F3r 1               
0031F3r 1               diff_sprite_to_transparent = 15
0031F3r 1               
0031F3r 1               ; global data ; 2E00
0031F3r 1  DE AD BE EF  GLOBAL_DATA:         .byte $DE,$AD,$BE,$EF ; 0-3
0031F7r 1  00 00        default_irq_vector:  .addr 0 ; 4-5
0031F9r 1               
0031F9r 1  00 00        MASTER_CLOCK:        .addr 0 ; 6-7
0031FBr 1  00           VERA_LOCK:           .byte 0 ; 9 255 is unlocked
0031FCr 1  00           NUM_AVAIL_SPRITES:   .byte 0 ; A
0031FDr 1               
0031FDr 1  00           DEBUG_A: .byte 0  ; B
0031FEr 1  00           DEBUG_B: .byte 0  ; C
0031FFr 1  00           DEBUG_C: .byte 0  ; D
003200r 1  00           DEBUG_D: .byte 0  ; E
003201r 1  01           camera_facing: 		 .byte 1 ; 7
003202r 1  01           VSYNC_counter:       .byte 1 ; 8
003203r 1  00           camera_cell_x: 		 .byte 0 ; c
003204r 1  00           camera_cell_y: 		 .byte 0 ; e
003205r 1               
003205r 1               
003205r 1  00           STALL_COUNTER:       .byte 0
003206r 1  00           STALL_COUNTERH:      .byte 0
003207r 1  00           LAST_VSYNC_COUNTER:  .byte 0
003208r 1  20           NUM_RESERVED_SPRITES:    .byte  (1+NUM_RESERVED_SPRITES-MASTER_CLOCK) << 1 ; F
003209r 1               
003209r 1               
003209r 1  2C           camera_world_pos_XH:    .byte 44 ; 8
00320Ar 1  30           camera_world_pos_XL:       .byte 48 ; 9
00320Br 1  0F           camera_world_pos_YH:        .byte 15 ; A
00320Cr 1  80           camera_world_pos_YL:       .byte 128  ; B
00320Dr 1  00           camera_cell_xl:       .byte 0 ; d
00320Er 1  00           camera_cell_yl:       .byte 0 ; f
00320Fr 1  00           CAMERA_CENTER_XL:    .byte 0 ; 12
003210r 1  00           CAMERA_CENTER_XH:    .byte 0 ; 13
003211r 1  00           CAMERA_CENTER_YL:    .byte 0 ; 14
003212r 1  00           CAMERA_CENTER_YH:    .byte 0 ; 15
003213r 1  00           CAMERA_CENTER_TOP_PX: .byte 0 ; 16
003214r 1  00 00        CAMERA_CELL_LINE_PTR: .addr 0 ; 17-18
003216r 1  00           WORLD_SPRITE_NUM:    .byte 0 ; 1B
003217r 1  00           WORLD_WALL_SPRITE_NUM: .byte 0; 1C
003218r 1               
003218r 1               
003218r 1               .macro stash_scratch
003218r 1               	STA (SCRATCH_PTR)
003218r 1                   INC SCRATCH_PTR
003218r 1               .endmacro
003218r 1               
003218r 1               custom_irq_handler: ; 2E12
003218r 1  48              PHA
003219r 1  AD 27 9F        lda VERA_isr
00321Cr 1  29 01           and #VSYNC_BIT
00321Er 1  D0 04           BNE :+
003220r 1  68              PLA
003221r 1                  ; continue to default IRQ handler
003221r 1  6C rr rr        jmp (default_irq_vector)
003224r 1                  ; RTI will happen after jump
003224r 1  EE rr rr      : inc VSYNC_counter
003227r 1               
003227r 1  EE rr rr        INC VERA_LOCK
00322Ar 1  F0 07           BEQ :+  ; @unlock_vera ; if we don't have lock we'll just fail this frame..
00322Cr 1  CE rr rr        DEC VERA_LOCK
00322Fr 1  68              PLA
003230r 1  6C rr rr        jmp (default_irq_vector)
003233r 1               
003233r 1  EE rr rr      : INC DEBUG_C
003236r 1  DA              PHX
003237r 1               
003237r 1               ;   JMP @patched
003237r 1               
003237r 1               ;   JMP @USE_CACHE
003237r 1  A9 01           LDA #$01
003239r 1  8D 25 9F        STA VERA_ctrl
00323Cr 1               
00323Cr 1  A2 FF           LDX #$FF
00323Er 1  8E 20 9F        STX VERA_addr_low
003241r 1  8E 21 9F        STX VERA_addr_high
003244r 1  A9 19           LDA #$19
003246r 1  8D 22 9F        STA VERA_addr_bank
003249r 1               
003249r 1  9C 25 9F        STZ VERA_ctrl  ;  reset to address 0
00324Cr 1  8D 22 9F        STA VERA_addr_bank
00324Fr 1               
00324Fr 1  A9 EF           LDA #$EF
003251r 1  8D 21 9F        STA VERA_addr_high
003254r 1  8E 20 9F        STX VERA_addr_low
003257r 1               
003257r 1                  ;SEC
003257r 1                 ; LDA #128
003257r 1                ;  SBC NUM_RESERVED_SPRITES
003257r 1               ;   TAX
003257r 1  AE rr rr        LDX NUM_AVAIL_SPRITES
00325Ar 1  AD 23 9F      : LDA VERA_data0   ;  4
00325Dr 1  8D 24 9F        STA VERA_data1   ;  4  20
003260r 1  AD 23 9F        LDA VERA_data0   ;  4  8
003263r 1  8D 24 9F        STA VERA_data1   ;  4  20
003266r 1  AD 23 9F        LDA VERA_data0   ;  4  12
003269r 1  8D 24 9F        STA VERA_data1   ;  4  20
00326Cr 1  AD 23 9F        LDA VERA_data0   ;  4  16
00326Fr 1  8D 24 9F        STA VERA_data1   ;  4  20
003272r 1  AD 23 9F        LDA VERA_data0   ;  4
003275r 1  8D 24 9F        STA VERA_data1   ;  4  20
003278r 1  AD 23 9F        LDA VERA_data0   ;  4  8
00327Br 1  8D 24 9F        STA VERA_data1   ;  4  20
00327Er 1  AD 23 9F        LDA VERA_data0   ;  4  12
003281r 1  8D 24 9F        STA VERA_data1   ;  4  20
003284r 1  AD 23 9F        LDA VERA_data0   ;  4  16
003287r 1  8D 24 9F        STA VERA_data1   ;  4  20
00328Ar 1  CA              DEX         ;  2  22
00328Br 1  D0 CD           BNE :-      ;  3  25       8per byte = 64 per sprite + 5 = 69 per * 128 = 8,832 cycles
00328Dr 1               
00328Dr 1  4C rr rr        JMP @patched
003290r 1                @USE_CACHE:
003290r 1  9C 20 9F        STZ VERA_addr_low
003293r 1  A9 ED           LDA #>VRAM_SPRITE_BUF+1
003295r 1  8D 21 9F        STA VERA_addr_high
003298r 1  A9 11           LDA #$11
00329Ar 1  8D 22 9F        STA VERA_addr_bank
00329Dr 1  A9 05           LDA #$05 ; DCSEL 2, addrsel1 , main FX config..
00329Fr 1  8D 25 9F        STA VERA_ctrl
0032A2r 1  9C 20 9F        STZ VERA_addr_low
0032A5r 1  A9 FD           LDA #>VRAM_sprite_attributes+1
0032A7r 1  8D 21 9F        STA VERA_addr_high
0032AAr 1  A9 31           LDA #$31 ; increment 4 at a time
0032ACr 1  8D 22 9F        STA VERA_addr_bank
0032AFr 1               
0032AFr 1  A9 60           LDA #%01100000 ; no trans, cache write, cache fill,not one byte cycle | no hop, no 4bit, addr1 mode=0
0032B1r 1  8D 29 9F        STA FX_CTRL
0032B4r 1  9C 2C 9F        STZ FX_MULT ; zero out the cache thingy
0032B7r 1  A2 60           LDX #96
0032B9r 1  AD 23 9F      : LDA VERA_data0   ;  4
0032BCr 1  AD 23 9F        LDA VERA_data0   ;  4  8
0032BFr 1  AD 23 9F        LDA VERA_data0   ;  4  12
0032C2r 1  AD 23 9F        LDA VERA_data0   ;  4  16
0032C5r 1  9C 24 9F        STZ VERA_data1   ;  4  20
0032C8r 1  AD 23 9F        LDA VERA_data0   ;  4
0032CBr 1  AD 23 9F        LDA VERA_data0   ;  4  8
0032CEr 1  AD 23 9F        LDA VERA_data0   ;  4  12
0032D1r 1  AD 23 9F        LDA VERA_data0   ;  4  16
0032D4r 1  9C 24 9F        STZ VERA_data1   ;  4  20
0032D7r 1  CA              DEX         ;  2  22
0032D8r 1  D0 DF           BNE :-      ;  3  25       25 per 4 bytes = 6,400 cycles
0032DAr 1  9C 29 9F        STZ FX_CTRL
0032DDr 1               
0032DDr 1  9C 25 9F        STZ VERA_ctrl
0032E0r 1  9C 29 9F       stz VERA_dc_video
0032E3r 1  A9 41          lda #SPRITES_ONLY_VGA
0032E5r 1  8D 29 9F       sta VERA_dc_video
0032E8r 1  4C rr rr       jmp @patched
0032EBr 1  A9 06           LDA #6
0032EDr 1  8D 20 9F        STA VERA_addr_low
0032F0r 1  A9 FD           LDA #>VRAM_sprite_attributes+1
0032F2r 1  8D 21 9F        STA VERA_addr_high
0032F5r 1  A9 41           LDA #$41 ; increment 8 at a time
0032F7r 1  8D 22 9F        STA VERA_addr_bank
0032FAr 1               
0032FAr 1  A9 0C           LDA #$0C
0032FCr 1  A2 60           LDX #96
0032FEr 1  8D 23 9F      : STA VERA_data0
003301r 1  CA              DEX
003302r 1  D0 FA           BNE :-
003304r 1               
003304r 1  9C 25 9F        STZ VERA_ctrl
003307r 1               
003307r 1               @patched:
003307r 1  FA              PLX
003308r 1               @unlock_vera:
003308r 1  CE rr rr        DEC VERA_LOCK
00330Br 1               @continue:
00330Br 1  68              PLA
00330Cr 1                  ; continue to default IRQ handler
00330Cr 1  6C rr rr        jmp (default_irq_vector)
00330Fr 1                  ; RTI will happen after jump
00330Fr 1               
00330Fr 1               start:
00330Fr 1                 ; start of program - init globals
00330Fr 1  AD 14 03       lda IRQVec
003312r 1  8D rr rr       sta default_irq_vector
003315r 1  AD 15 03       lda IRQVec+1
003318r 1  8D rr rr       sta default_irq_vector+1
00331Br 1               
00331Br 1  9C 29 9F       stz VERA_dc_video   ; disable display
00331Er 1  A9 2B          lda #43 ; set scale for bitmap mode - going for 215x161 mode
003320r 1  8D 2A 9F       sta VERA_dc_hscale
003323r 1  8D 2B 9F       sta VERA_dc_vscale
003326r 1                 ; for now no L0 or L1
003326r 1               
003326r 1                 ; let's stick that test sprite data into VRAM at zero for now..
003326r 1  9C 25 9F       stz VERA_ctrl
003329r 1  9C 20 9F       stz VERA_addr_low
00332Cr 1  9C 21 9F       stz VERA_addr_high
00332Fr 1  A9 10          lda #$10
003331r 1  8D 22 9F       sta VERA_addr_bank
003334r 1                 ; load test VRAM data
003334r 1               
003334r 1                 ; is 512 bytes at test_cell_sprite label
003334r 1  A0 00          ldy #0
003336r 1               
003336r 1  A9 rr          LDA #<test_vram_data
003338r 1  85 22          STA ZP_PTR
00333Ar 1  A9 rr          LDA #>test_vram_data
00333Cr 1  85 23          STA ZP_PTR+1
00333Er 1  A2 40          LDX #64   ;   num pages to copy - 16 pages / 8K  - sprite addr 0-255
003340r 1  80 02          BRA :++
003342r 1                 :
003342r 1  E6 23             INC ZP_PTR+1
003344r 1                   :
003344r 1  B1 22              LDA (ZP_PTR),Y
003346r 1  8D 23 9F           STA VERA_data0
003349r 1  C8                 INY
00334Ar 1  D0 F8              BNE :-
00334Cr 1  CA                DEX
00334Dr 1  D0 F3             BNE :--
00334Fr 1               
00334Fr 1                 ; initialize some waves
00334Fr 1  64 22          STZ ZP_PTR
003351r 1  A9 rr          LDA #>TUB_WORLD
003353r 1  85 23          STA ZP_PTR+1
003355r 1  A9 08          LDA #8
003357r 1  85 24          STA ZP_PTR+2 ; for use as page counter..
003359r 1  A2 00          LDX #0
00335Br 1  B1 22          : LDA (ZP_PTR),y ; grab world data
00335Dr 1  C9 80            CMP #128       ; is outside or inside tub?
00335Fr 1  B0 0B            BCS :+         ; skip this one
003361r 1  8A               TXA
003362r 1  91 22            STA (ZP_PTR),y
003364r 1  E8               INX
003365r 1  E8               INX
003366r 1  E8               INX
003367r 1  E8               INX
003368r 1  E0 34            CPX #52
00336Ar 1  B0 0B            BCS :++
00336Cr 1  C8             : INY
00336Dr 1  D0 EC            BNE :--
00336Fr 1  E6 23            INC ZP_PTR+1
003371r 1  C6 24            DEC ZP_PTR+2
003373r 1  D0 E6            BNE :--
003375r 1  80 18            BRA :+++
003377r 1  B1 22          : LDA (ZP_PTR),y
003379r 1  C9 80            CMP #128       ; is outside or inside tub?
00337Br 1  B0 09            BCS :+         ; skip this one
00337Dr 1  8A               TXA
00337Er 1  91 22            STA (ZP_PTR),y
003380r 1  CA               DEX
003381r 1  CA               DEX
003382r 1  CA               DEX
003383r 1  CA               DEX
003384r 1  F0 E6            BEQ :--
003386r 1  C8             : INY
003387r 1  D0 EE            BNE :--
003389r 1  E6 23            INC ZP_PTR+1
00338Br 1  C6 24            DEC ZP_PTR+2
00338Dr 1  D0 E8            BNE :--
00338Fr 1                 :
00338Fr 1                 ; write sprite test data
00338Fr 1  A9 FF          LDA #255
003391r 1  8D 20 9F       STA VERA_addr_low
003394r 1  A9 FC          lda #>VRAM_sprite_attributes
003396r 1  8D 21 9F       sta VERA_addr_high
003399r 1  A9 19          lda #$19   ;  decrement 1 bank 1
00339Br 1  8D 22 9F       sta VERA_addr_bank
00339Er 1  A2 FF          LDX #255
0033A0r 1                 :
0033A0r 1  BD rr rr         LDA test_sprite_data,X
0033A3r 1  8D 23 9F         STA VERA_data0
0033A6r 1  CA               DEX
0033A7r 1  D0 F7            BNE :-
0033A9r 1  BD rr rr        LDA test_sprite_data,X
0033ACr 1  8D 23 9F        STA VERA_data0
0033AFr 1               
0033AFr 1               
0033AFr 1                 ; write custom palette data  - 16 colors only for now.. $1:FA00-$1:FBFF   VERA Color Palette (256 x 2 bytes)
0033AFr 1  A2 1F          LDX #31
0033B1r 1  8E 20 9F       STX VERA_addr_low
0033B4r 1  A9 FA          LDA #$FA
0033B6r 1  8D 21 9F       STA VERA_addr_high
0033B9r 1  A9 19          LDA #$19
0033BBr 1  8D 22 9F       STA VERA_addr_bank
0033BEr 1                 :
0033BEr 1  BD rr rr         LDA test_optimal_pal_data,X
0033C1r 1  8D 23 9F         STA VERA_data0
0033C4r 1  CA               DEX
0033C5r 1  D0 F7            BNE :-
0033C7r 1  BD rr rr       LDA test_optimal_pal_data,X
0033CAr 1  8D 23 9F       STA VERA_data0
0033CDr 1               
0033CDr 1               
0033CDr 1                 ; enable display
0033CDr 1  9C 25 9F       stz VERA_ctrl
0033D0r 1  A9 41          lda #SPRITES_ONLY_VGA
0033D2r 1  8D 29 9F       sta VERA_dc_video
0033D5r 1               
0033D5r 1  CE rr rr        DEC VERA_LOCK ; unlock the VERA
0033D8r 1               
0033D8r 1               
0033D8r 1                 ; overwrite RAM IRQ vector with custom handler address
0033D8r 1  78             sei ; disable IRQ while vector is changing
0033D9r 1  A9 rr          lda #<custom_irq_handler
0033DBr 1  8D 14 03       sta IRQVec
0033DEr 1  A9 rr          lda #>custom_irq_handler
0033E0r 1  8D 15 03       sta IRQVec+1
0033E3r 1  A9 01          lda #VSYNC_BIT ; make VERA only generate VSYNC IRQs
0033E5r 1  8D 26 9F       sta VERA_ien
0033E8r 1  58             cli ; enable IRQ now that vector is properly set
0033E9r 1               
0033E9r 1               
0033E9r 1                 ; main loop here...
0033E9r 1  9C rr rr        STZ camera_facing
0033ECr 1               
0033ECr 1               @camera_world_changed:
0033ECr 1                  ; copy over cell YL as-is
0033ECr 1  AD rr rr        LDA camera_world_pos_YL
0033EFr 1  8D rr rr        STA camera_cell_yl
0033F2r 1                  ; YH gets copied over ..
0033F2r 1  AD rr rr        LDA camera_world_pos_YH
0033F5r 1  8D rr rr        STA camera_cell_y
0033F8r 1                  ; cellX = WORLDX*ratio - floor(cellY)/2
0033F8r 1                  ;  halve floor(cellY)
0033F8r 1  4A              LSR
0033F9r 1  85 7F           STA $7F ; stash it for scratch
0033FBr 1  A9 00           LDA #0
0033FDr 1  6A              ROR
0033FEr 1  85 7E           STA $7E ; and there's the half..
003400r 1               
003400r 1  AE rr rr        LDX camera_world_pos_XH
003403r 1  AC rr rr        LDY camera_world_pos_XL
003406r 1  18              CLC
003407r 1  B9 rr rr        LDA WORLD_TO_CELL_XH,Y ; that bit from pos_XL
00340Ar 1  7D rr rr        ADC WORLD_TO_CELL_XL,X ; plus the bit from pos_XH
00340Dr 1  A8              TAY   ;  cellXL from ratio
00340Er 1  BD rr rr        LDA WORLD_TO_CELL_XH,X
003411r 1  69 00           ADC #0 ; gotta do that carry and all ..
003413r 1  AA              TAX   ; cellXH from ratio
003414r 1               
003414r 1  98              TYA
003415r 1  38              SEC
003416r 1  E5 7E           SBC $7E
003418r 1  8D rr rr        STA camera_cell_xl
00341Br 1  8A              TXA
00341Cr 1  E5 7F           SBC $7F
00341Er 1  8D rr rr        STA camera_cell_x
003421r 1  4C rr rr        jmp @do_update
003424r 1               
003424r 1               @camera_cell_changed: ; run through this more as a normalization step for camera..
003424r 1                  ; worldX = scaled(floor(cellY)/2 + cellX )
003424r 1  AD rr rr        LDA camera_cell_yl
003427r 1  8D rr rr        STA camera_world_pos_YL
00342Ar 1  AD rr rr        LDA camera_cell_y
00342Dr 1  8D rr rr        STA camera_world_pos_YH
003430r 1  4A              LSR
003431r 1  AA              TAX  ; high byte floor(Y)/2
003432r 1  A9 00           LDA #0
003434r 1  6A              ROR ; either is zero or 128 now ... either way, carry is cleared.
003435r 1  6D rr rr        ADC camera_cell_xl
003438r 1  A8              TAY ; stash the low to byte
003439r 1  8A              TXA ; high byte floor (Y)/2 .. ready for adding
00343Ar 1  6D rr rr        ADC camera_cell_x
00343Dr 1  AA              TAX ; stash high byte ... carry _should_ be cleared unless X >255 ... ?
00343Er 1  B9 rr rr        LDA CELL_LOW_TO_WORLD_XL,Y
003441r 1  7D rr rr        ADC CELL_TO_WORLD_XL,X
003444r 1  8D rr rr        STA camera_world_pos_XL
003447r 1  B9 rr rr        LDA CELL_LOW_TO_WORLD_XH,Y
00344Ar 1  7D rr rr        ADC CELL_TO_WORLD_XH,X
00344Dr 1  8D rr rr        STA camera_world_pos_XH
003450r 1                  ;  jmp @do_update ; superfluous currently. redundant even..
003450r 1               
003450r 1               
003450r 1               @do_update:
003450r 1                  ;  set up screen center stuff
003450r 1               
003450r 1               
003450r 1  AD rr rr        LDA camera_facing
003453r 1  29 7F           AND #127
003455r 1  AA              TAX
003456r 1  BD rr rr        LDA WORLD_SPRITE_NUM_lookies,X
003459r 1  8D rr rr        STA WORLD_SPRITE_NUM
00345Cr 1  BD rr rr        LDA WORLD_WALL_SPRITE_NUM_lookies,X
00345Fr 1  8D rr rr        STA WORLD_WALL_SPRITE_NUM
003462r 1  BD rr rr        LDA WORLD_SPRITE_CENTER_XL,X
003465r 1  8D rr rr        STA CAMERA_CENTER_XL
003468r 1  BD rr rr        LDA WORLD_SPRITE_CENTER_XH,X
00346Br 1  8D rr rr        STA CAMERA_CENTER_XH
00346Er 1               
00346Er 1  BD rr rr        LDA WORLD_SPRITE_CENTER_YL,X
003471r 1  8D rr rr        STA CAMERA_CENTER_YL
003474r 1  18              CLC
003475r 1  BD rr rr        LDA WORLD_SPRITE_CENTER_YH,X
003478r 1  69 28           ADC #40
00347Ar 1  8D rr rr        STA CAMERA_CENTER_TOP_PX
00347Dr 1               
00347Dr 1  AE rr rr         LDX camera_facing
003480r 1               
003480r 1  AD rr rr         LDA camera_cell_xl
003483r 1  4A               LSR ;   /2
003484r 1  4A               LSR ;   /4
003485r 1  4A               LSR ;   /8
003486r 1  4A               LSR ;   /16
003487r 1  38               SEC
003488r 1  E9 08            SBC #8 ;   subtract le middle..
00348Ar 1  A8               TAY
00348Br 1  B0 29            BCS :++    ;  is positive..
00348Dr 1  18             : CLC
00348Er 1  AD rr rr         LDA CAMERA_CENTER_XL
003491r 1  7D rr rr         ADC SUBCELL_X_COS_L,X
003494r 1  8D rr rr         STA CAMERA_CENTER_XL
003497r 1  AD rr rr         LDA CAMERA_CENTER_XH
00349Ar 1  7D rr rr         ADC SUBCELL_X_COS_H,X
00349Dr 1  8D rr rr         STA CAMERA_CENTER_XH
0034A0r 1  38               SEC
0034A1r 1  AD rr rr         LDA CAMERA_CENTER_YL
0034A4r 1  FD rr rr         SBC SUBCELL_Y_SIN_L,X
0034A7r 1  8D rr rr         STA CAMERA_CENTER_YL
0034AAr 1  AD rr rr         LDA CAMERA_CENTER_TOP_PX
0034ADr 1  FD rr rr         SBC SUBCELL_Y_SIN_H,X
0034B0r 1  8D rr rr         STA CAMERA_CENTER_TOP_PX
0034B3r 1  C8               INY
0034B4r 1  D0 D7            BNE :-
0034B6r 1  F0 29          : BEQ :++
0034B8r 1  38             : SEC
0034B9r 1  AD rr rr         LDA CAMERA_CENTER_XL
0034BCr 1  FD rr rr         SBC SUBCELL_X_COS_L,X
0034BFr 1  8D rr rr         STA CAMERA_CENTER_XL
0034C2r 1  AD rr rr         LDA CAMERA_CENTER_XH
0034C5r 1  FD rr rr         SBC SUBCELL_X_COS_H,X
0034C8r 1  8D rr rr         STA CAMERA_CENTER_XH
0034CBr 1  18               CLC
0034CCr 1  AD rr rr         LDA CAMERA_CENTER_YL
0034CFr 1  7D rr rr         ADC SUBCELL_Y_SIN_L,X
0034D2r 1  8D rr rr         STA CAMERA_CENTER_YL
0034D5r 1  AD rr rr         LDA CAMERA_CENTER_TOP_PX
0034D8r 1  7D rr rr         ADC SUBCELL_Y_SIN_H,X
0034DBr 1  8D rr rr         STA CAMERA_CENTER_TOP_PX
0034DEr 1  88               DEY
0034DFr 1  D0 D7            BNE :-
0034E1r 1                 :
0034E1r 1               
0034E1r 1  AD rr rr         LDA camera_cell_yl
0034E4r 1  4A               LSR ;   /2
0034E5r 1  4A               LSR ;   /4
0034E6r 1  4A               LSR ;   /8
0034E7r 1  4A               LSR ;   /16
0034E8r 1  38               SEC
0034E9r 1  E9 08            SBC #8 ;   subtract le middle..
0034EBr 1  A8               TAY
0034ECr 1  B0 29            BCS :++    ;  is positive..
0034EEr 1  18             : CLC
0034EFr 1  AD rr rr         LDA CAMERA_CENTER_XL
0034F2r 1  7D rr rr         ADC SUBCELL_X_SIN_L,X
0034F5r 1  8D rr rr         STA CAMERA_CENTER_XL
0034F8r 1  AD rr rr         LDA CAMERA_CENTER_XH
0034FBr 1  7D rr rr         ADC SUBCELL_X_SIN_H,X
0034FEr 1  8D rr rr         STA CAMERA_CENTER_XH
003501r 1  18               CLC
003502r 1  AD rr rr         LDA CAMERA_CENTER_YL
003505r 1  7D rr rr         ADC SUBCELL_Y_COS_L,X
003508r 1  8D rr rr         STA CAMERA_CENTER_YL
00350Br 1  AD rr rr         LDA CAMERA_CENTER_TOP_PX
00350Er 1  7D rr rr         ADC SUBCELL_Y_COS_H,X
003511r 1  8D rr rr         STA CAMERA_CENTER_TOP_PX
003514r 1  C8               INY
003515r 1  D0 D7            BNE :-
003517r 1  F0 29          : BEQ :++
003519r 1  38             : SEC
00351Ar 1  AD rr rr         LDA CAMERA_CENTER_XL
00351Dr 1  FD rr rr         SBC SUBCELL_X_SIN_L,X
003520r 1  8D rr rr         STA CAMERA_CENTER_XL
003523r 1  AD rr rr         LDA CAMERA_CENTER_XH
003526r 1  FD rr rr         SBC SUBCELL_X_SIN_H,X
003529r 1  8D rr rr         STA CAMERA_CENTER_XH
00352Cr 1               
00352Cr 1  38               SEC
00352Dr 1  AD rr rr         LDA CAMERA_CENTER_YL
003530r 1  FD rr rr         SBC SUBCELL_Y_COS_L,X
003533r 1  8D rr rr         STA CAMERA_CENTER_YL
003536r 1  AD rr rr         LDA CAMERA_CENTER_TOP_PX
003539r 1  FD rr rr         SBC SUBCELL_Y_COS_H,X
00353Cr 1  8D rr rr         STA CAMERA_CENTER_TOP_PX
00353Fr 1  88               DEY
003540r 1  D0 D7            BNE :-
003542r 1                 :
003542r 1                  ;  set up tub pointer .. this will let us grab the height value for current location..
003542r 1  64 7E            STZ $7E
003544r 1  AD rr rr         LDA camera_cell_y
003547r 1  4A               LSR  ;  y pages of 128
003548r 1  66 7E            ROR $7E
00354Ar 1  4A               LSR  ; y pages of 64 !
00354Br 1  66 7E            ROR $7E
00354Dr 1  69 rr            ADC #>TUB_WORLD
00354Fr 1  85 7F            STA $7F
003551r 1  8D rr rr         STA CAMERA_CELL_LINE_PTR+1
003554r 1  A5 7E            LDA $7E
003556r 1  8D rr rr         STA CAMERA_CELL_LINE_PTR
003559r 1               
003559r 1  AC rr rr         LDY camera_cell_x
00355Cr 1  B1 7E            LDA ($7E),y
00355Er 1  C9 56            CMP #86 ; is largest value we will allow .. accounts for tub heights..
003560r 1  90 02            BCC :+
003562r 1  A9 56            LDA #86    ;
003564r 1  A8              : TAY
003565r 1               
003565r 1  18              CLC
003566r 1  AD rr rr        LDA CAMERA_CENTER_YL
003569r 1  79 rr rr        ADC CONVERT_HEIGHTS_PIXELS_L,Y
00356Cr 1  8D rr rr        STA CAMERA_CENTER_YL
00356Fr 1  AD rr rr        LDA CAMERA_CENTER_TOP_PX
003572r 1  79 rr rr        ADC CONVERT_HEIGHTS_PIXELS,Y
003575r 1  8D rr rr        STA CAMERA_CENTER_YH
003578r 1               
003578r 1                  ; clear the object list ...
003578r 1  38               SEC
003579r 1  A9 80            LDA #128
00357Br 1  ED rr rr         SBC NUM_RESERVED_SPRITES
00357Er 1  8D rr rr         STA NUM_AVAIL_SPRITES
003581r 1               
003581r 1  9C rr rr         STZ OBJECT_LIST_BYTE6_NEXT ; because we can't use zero anyway..
003584r 1  A9 0C            LDA #$0C ; is basis for all the z_flips <- this may change depending on orientation..
003586r 1  A2 00            LDX #0
003588r 1  9E rr rr         : STZ OBJECT_LIST_Z_START_POINTERS,X
00358Br 1  9E rr rr           STZ OBJECT_LIST_BYTE1_MODE,X          ; 16 color / low address
00358Er 1  9C rr rr           STZ OBJECT_LIST_BYTE2_X
003591r 1  9D rr rr           STA OBJECT_LIST_BYTE4_ZFLIPS,X
003594r 1  9D rr rr           STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
003597r 1  E8                 INX
003598r 1  D0 EE              BNE :-
00359Ar 1               
00359Ar 1  A9 D0            LDA #SPRITE_SIZE_ORA
00359Cr 1  9D rr rr         : STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
00359Fr 1  E8                 INX
0035A0r 1  D0 FA              BNE :-
0035A2r 1  AD rr rr         LDA WORLD_SPRITE_NUM
0035A5r 1  9D rr rr         : STA OBJECT_LIST_BYTE0_ADDRLOW,X ; 01.3456 done .
0035A8r 1  E8                 INX
0035A9r 1  D0 FA              BNE :-
0035ABr 1               
0035ABr 1               
0035ABr 1  20 rr rr       jsr push_world_to_object_list
0035AEr 1               
0035AEr 1  A9 D1           LDA #$D1
0035B0r 1  8D rr rr        STA OBJECT_LIST_BYTE5_SIZE+1
0035B3r 1  20 rr rr        jsr draw_object_list
0035B6r 1               
0035B6r 1  EE rr rr        inc VERA_LOCK
0035B9r 1  F0 08           BEQ :++
0035BBr 1  CE rr rr     :  DEC VERA_LOCK
0035BEr 1               @WRITE_DEBUG:
0035BEr 1  EE rr rr        inc VERA_LOCK
0035C1r 1  D0 F8           BNE :-
0035C3r 1                :
0035C3r 1  9C 25 9F        STZ VERA_ctrl
0035C6r 1  9C 20 9F        STZ VERA_addr_low
0035C9r 1  A9 FC           LDA #>VRAM_sprite_attributes
0035CBr 1  8D 21 9F        STA VERA_addr_high
0035CEr 1  A9 41           LDA #$41
0035D0r 1  8D 22 9F        STA VERA_addr_bank
0035D3r 1  A0 00           LDY #0
0035D5r 1  BE rr rr      : LDX MASTER_CLOCK,Y
0035D8r 1  BD rr rr        LDA SPRITE_NUM_HIGH_NIBBLE,X
0035DBr 1  8D 23 9F        STA VERA_data0
0035DEr 1  BD rr rr        LDA SPRITE_NUM_LOW_NIBBLE,X
0035E1r 1  8D 23 9F        STA VERA_data0
0035E4r 1  C8              INY
0035E5r 1  98              TYA
0035E6r 1  0A              ASL
0035E7r 1  CD rr rr        CMP NUM_RESERVED_SPRITES
0035EAr 1  90 E9           BCC :-
0035ECr 1  CE rr rr        DEC VERA_LOCK
0035EFr 1               
0035EFr 1               
0035EFr 1               @FRAME_CHECK:
0035EFr 1               ;   STZ STALL_COUNTER
0035EFr 1                ;  STZ STALL_COUNTERH
0035EFr 1  A2 00           LDX #0
0035F1r 1  A0 00           LDY #0
0035F3r 1  AD rr rr        lda VSYNC_counter
0035F6r 1  D0 09           bne :+++
0035F8r 1                : ; INC STALL_COUNTER
0035F8r 1  E8              INX                     ;  2 cycles
0035F9r 1  D0 01           BNE :+                  ;  ~3 cycles   5
0035FBr 1                   ;INC STALL_COUNTERH
0035FBr 1  C8              INY
0035FCr 1               
0035FCr 1                :
0035FCr 1                 ;wai
0035FCr 1  AD rr rr        lda VSYNC_counter       ;  4  cyles    9
0035FFr 1  F0 F7           beq :--                 ;  3  cycles   ~12 cycles per count
003601r 1  9C rr rr      : stz VSYNC_counter
003604r 1  8D rr rr        STA LAST_VSYNC_COUNTER
003607r 1  8E rr rr        STX STALL_COUNTER
00360Ar 1  8C rr rr        STY STALL_COUNTERH
00360Dr 1  18              CLC
00360Er 1  6D rr rr        ADC MASTER_CLOCK
003611r 1  8D rr rr        STA MASTER_CLOCK
003614r 1  AD rr rr        LDA MASTER_CLOCK+1
003617r 1  69 00           ADC #0
003619r 1  8D rr rr        STA MASTER_CLOCK+1
00361Cr 1  AD rr rr        LDA MASTER_CLOCK
00361Fr 1  29 01           AND #1 ; restrict to 30 fps.. don't care missed cycle.
003621r 1  F0 9B           BEQ @WRITE_DEBUG
003623r 1                  ; poll keyboard for input
003623r 1  20 E4 FF        jsr GETIN
003626r 1  C9 00           cmp #0
003628r 1  D0 03           BNE :+
00362Ar 1  4C rr rr        JMP @do_update
00362Dr 1  C9 1D         : cmp #$1D 	;	cursor right
00362Fr 1  D0 06           BNE :+
003631r 1  EE rr rr        INC camera_facing
003634r 1  4C rr rr        JMP @do_update
003637r 1                  :
003637r 1  C9 9D           cmp  #$9D 	;	cursor left
003639r 1  D0 06           BNE :+
00363Br 1  CE rr rr        DEC camera_facing
00363Er 1  4C rr rr        JMP @do_update
003641r 1  C9 11         : cmp #$11; cursor down
003643r 1  D0 2C           BNE :+
003645r 1  AE rr rr        LDX camera_facing
003648r 1  38              SEC
003649r 1  AD rr rr        LDA camera_world_pos_XL
00364Cr 1  FD rr rr        SBC MOVE_X_L,X
00364Fr 1  8D rr rr        STA camera_world_pos_XL
003652r 1  AD rr rr        LDA camera_world_pos_XH
003655r 1  FD rr rr        SBC MOVE_X_H,X
003658r 1  8D rr rr        STA camera_world_pos_XH
00365Br 1  18              CLC
00365Cr 1  AD rr rr        LDA camera_world_pos_YL
00365Fr 1  7D rr rr        ADC MOVE_Y_L,X
003662r 1  8D rr rr        STA camera_world_pos_YL
003665r 1  AD rr rr        LDA camera_world_pos_YH
003668r 1  7D rr rr        ADC MOVE_Y_H,X
00366Br 1  8D rr rr        STA camera_world_pos_YH
00366Er 1  4C rr rr        jmp @camera_world_changed
003671r 1               
003671r 1  C9 91         : cmp #$91 ; cursor up
003673r 1  D0 2C           BNE :+
003675r 1  AE rr rr        LDX camera_facing
003678r 1  18              CLC
003679r 1  AD rr rr        LDA camera_world_pos_XL
00367Cr 1  7D rr rr        ADC MOVE_X_L,X
00367Fr 1  8D rr rr        STA camera_world_pos_XL
003682r 1  AD rr rr        LDa camera_world_pos_XH
003685r 1  7D rr rr        ADC MOVE_X_H,X
003688r 1  8D rr rr        STA camera_world_pos_XH
00368Br 1  38              SEC
00368Cr 1  AD rr rr        LDA camera_world_pos_YL
00368Fr 1  FD rr rr        SBC MOVE_Y_L,X
003692r 1  8D rr rr        STA camera_world_pos_YL
003695r 1  AD rr rr        LDA camera_world_pos_YH
003698r 1  FD rr rr        SBC MOVE_Y_H,X
00369Br 1  8D rr rr        STA camera_world_pos_YH
00369Er 1  4C rr rr        jmp @camera_world_changed
0036A1r 1               
0036A1r 1  C9 45         : cmp  #E_CHAR ; cell up right
0036A3r 1  D0 15           BNE :+++
0036A5r 1  AD rr rr        LDA camera_cell_y
0036A8r 1  F0 03           BEQ :+
0036AAr 1  CE rr rr        DEC camera_cell_y
0036ADr 1  AD rr rr      : LDA camera_cell_x
0036B0r 1  C9 3F           CMP #63
0036B2r 1  B0 03           BCS :+
0036B4r 1  EE rr rr        INC camera_cell_x
0036B7r 1  4C rr rr      : JMP @camera_cell_changed
0036BAr 1               
0036BAr 1  C9 57         : cmp #W_CHAR ; cell up left
0036BCr 1  D0 0B           BNE :++
0036BEr 1  AD rr rr        LDA camera_cell_y
0036C1r 1  F0 03           BEQ :+
0036C3r 1  CE rr rr        DEC camera_cell_y
0036C6r 1  4C rr rr      : JMP @camera_cell_changed
0036C9r 1               
0036C9r 1  C9 41         : cmp #A_CHAR ; cell left
0036CBr 1  D0 0B           BNE :++
0036CDr 1  AD rr rr        LDA camera_cell_x
0036D0r 1  F0 03           BEQ :+
0036D2r 1  CE rr rr        DEC camera_cell_x
0036D5r 1  4C rr rr      : JMP @camera_cell_changed
0036D8r 1               
0036D8r 1  C9 44         : cmp #D_CHAR ; cell right
0036DAr 1  D0 0D           BNE :++
0036DCr 1  AD rr rr        LDA camera_cell_x
0036DFr 1  C9 3F           CMP #63
0036E1r 1  B0 03           BCS :+
0036E3r 1  EE rr rr        INC camera_cell_x
0036E6r 1  4C rr rr      : JMP @camera_cell_changed
0036E9r 1               
0036E9r 1  C9 58         : cmp #X_CHAR ; cell down right
0036EBr 1  D0 0D           BNE :++
0036EDr 1  AD rr rr        LDA camera_cell_y
0036F0r 1  C9 1E           CMP #30
0036F2r 1  B0 03           BCS :+
0036F4r 1  EE rr rr        INC camera_cell_y
0036F7r 1  4C rr rr      : JMP @camera_cell_changed
0036FAr 1               
0036FAr 1  C9 5A         : cmp  #Z_CHAR ; cell down left
0036FCr 1  D0 15           BNE :+++
0036FEr 1  AD rr rr        LDA camera_cell_y
003701r 1  C9 1E           CMP #30
003703r 1  B0 03           BCS :+
003705r 1  EE rr rr        INC camera_cell_y
003708r 1  AD rr rr      : LDA camera_cell_x
00370Br 1  F0 03           BEQ :+
00370Dr 1  CE rr rr        DEC camera_cell_x
003710r 1  4C rr rr      : JMP @camera_cell_changed
003713r 1               
003713r 1  C9 20         : cmp #SPACE;
003715r 1  D0 09           BNE :+
003717r 1  9C rr rr        STZ camera_cell_xl
00371Ar 1  9C rr rr        STZ camera_cell_yl
00371Dr 1  4C rr rr        JMP @camera_cell_changed
003720r 1               
003720r 1  C9 49         : cmp #I_CHAR ; cell y - 1/16
003722r 1  D0 25           BNE :++
003724r 1  38              SEC
003725r 1  AD rr rr        LDA camera_cell_yl
003728r 1  E9 10           SBC #16
00372Ar 1  8D rr rr        STA camera_cell_yl
00372Dr 1  B0 17           BCS :+
00372Fr 1  AD rr rr        LDA camera_cell_y
003732r 1  F0 12           BEQ :+
003734r 1  3A              DEC A
003735r 1  8D rr rr        STA camera_cell_y
003738r 1  18              CLC
003739r 1  AD rr rr        LDA camera_cell_xl
00373Cr 1  69 80           ADC #128
00373Er 1  8D rr rr        STA camera_cell_xl
003741r 1  90 03           BCC :+
003743r 1  EE rr rr        INC camera_cell_x
003746r 1  4C rr rr      : JMP @camera_cell_changed
003749r 1               
003749r 1  C9 4A         : cmp #J_CHAR ; cell x - 1/16
00374Br 1  D0 17           BNE :++
00374Dr 1  38              SEC
00374Er 1  AD rr rr        LDA camera_cell_xl
003751r 1  E9 10           SBC #16
003753r 1  8D rr rr        STA camera_cell_xl
003756r 1  B0 09           BCS :+
003758r 1  AD rr rr        LDA camera_cell_x
00375Br 1  F0 04           BEQ :+
00375Dr 1  3A              DEC A
00375Er 1  8D rr rr        STA camera_cell_x
003761r 1  4C rr rr      : JMP @camera_cell_changed
003764r 1               
003764r 1  C9 4B         : cmp #K_CHAR ; cell y + 1/16
003766r 1  D0 27           BNE :++
003768r 1  18              CLC
003769r 1  AD rr rr        LDA camera_cell_yl
00376Cr 1  69 10           ADC #16
00376Er 1  8D rr rr        STA camera_cell_yl
003771r 1  90 19           BCC :+
003773r 1  AD rr rr        LDA camera_cell_y
003776r 1  C9 1F           CMP #31
003778r 1  B0 12           BCS :+
00377Ar 1  1A              INC A
00377Br 1  8D rr rr        STA camera_cell_y
00377Er 1  38              SEC
00377Fr 1  AD rr rr        LDA camera_cell_xl
003782r 1  E9 80           SBC #128
003784r 1  8D rr rr        STA camera_cell_xl
003787r 1  B0 03           BCS :+
003789r 1  CE rr rr        DEC camera_cell_x
00378Cr 1  4C rr rr      : JMP @camera_cell_changed
00378Fr 1               
00378Fr 1  C9 4C         : cmp #L_CHAR ; cell x + 1/16
003791r 1  D0 11           BNE :++
003793r 1  18              CLC
003794r 1  AD rr rr        LDA camera_cell_xl
003797r 1  69 10           ADC #16
003799r 1  8D rr rr        STA camera_cell_xl
00379Cr 1  90 03           BCC :+
00379Er 1  EE rr rr        INC camera_cell_x
0037A1r 1  4C rr rr      : JMP @camera_cell_changed
0037A4r 1               
0037A4r 1  4C rr rr      : JMP @WRITE_DEBUG
0037A7r 1               
0037A7r 1               @cleanup_and_exit:
0037A7r 1                  ; restore default IRQ vector
0037A7r 1  78              sei
0037A8r 1  AD rr rr        lda default_irq_vector
0037ABr 1  8D 14 03        sta IRQVec
0037AEr 1  AD rr rr        lda default_irq_vector+1
0037B1r 1  8D 15 03        sta IRQVec+1
0037B4r 1  58              cli
0037B5r 1  20 81 FF        jsr CINT
0037B8r 1  60              rts
0037B9r 1               
0037B9r 1               
0037B9r 1               ; CURRENT
0037B9r 1               push_world_to_object_list: ; as in.. let's try this again?? wait.. missing a STZ ZP_PTR...
0037B9r 1               PWOL_TUB_PTR_AL   = ZP_PTR
0037B9r 1               PWOL_TUB_PTR_AH   = ZP_PTR+1
0037B9r 1               PWOL_TUB_PTR_BL   = ZP_PTR+2
0037B9r 1               PWOL_TUB_PTR_BH   = ZP_PTR+3
0037B9r 1               PWOL_CURRENT_XL   = ZP_PTR+4
0037B9r 1               PWOL_CURRENT_XH   = ZP_PTR+5
0037B9r 1               PWOL_CURRENT_YL   = ZP_PTR+6
0037B9r 1               PWOL_CURRENT_YH   = ZP_PTR+7
0037B9r 1               PWOL_ACROSS_ROW_XL= ZP_PTR+8
0037B9r 1               PWOL_ACROSS_ROW_XH= ZP_PTR+9
0037B9r 1               PWOL_ACROSS_ROW_YL= ZP_PTR+10
0037B9r 1               PWOL_ACROSS_ROW_YH= ZP_PTR+11
0037B9r 1               PWOL_NEXT_ROW_A_LEFT_XL  = ZP_PTR+12
0037B9r 1               PWOL_NEXT_ROW_A_LEFT_XH  = ZP_PTR+13
0037B9r 1               PWOL_NEXT_ROW_A_LEFT_YL  = ZP_PTR+14
0037B9r 1               PWOL_NEXT_ROW_A_LEFT_YH  = ZP_PTR+15
0037B9r 1               PWOL_NEXT_ROW_A_RIGHT_XL  = ZP_PTR+16
0037B9r 1               PWOL_NEXT_ROW_A_RIGHT_XH  = ZP_PTR+17
0037B9r 1               PWOL_NEXT_ROW_A_RIGHT_YL  = ZP_PTR+18
0037B9r 1               PWOL_NEXT_ROW_A_RIGHT_YH  = ZP_PTR+19
0037B9r 1               PWOL_NEXT_ROW_B_LEFT_XL  = ZP_PTR+20
0037B9r 1               PWOL_NEXT_ROW_B_LEFT_XH  = ZP_PTR+21
0037B9r 1               PWOL_NEXT_ROW_B_LEFT_YL  = ZP_PTR+22
0037B9r 1               PWOL_NEXT_ROW_B_LEFT_YH  = ZP_PTR+23
0037B9r 1               PWOL_NEXT_ROW_B_RIGHT_XL  = ZP_PTR+24
0037B9r 1               PWOL_NEXT_ROW_B_RIGHT_XH  = ZP_PTR+25
0037B9r 1               PWOL_NEXT_ROW_B_RIGHT_YL  = ZP_PTR+26
0037B9r 1               PWOL_NEXT_ROW_B_RIGHT_YH  = ZP_PTR+27
0037B9r 1               PWOL_Z_STARTS_PTR = ZP_PTR+28
0037B9r 1               PWOL_Z_STARTS_PTRH = ZP_PTR+29
0037B9r 1               PWOL_CONVERT_HEIGHTS = ZP_PTR+30
0037B9r 1               PWOL_CONVERT_HEIGHTSH= ZP_PTR+31
0037B9r 1               PWOL_CONVERT_HEIGHTS_L = ZP_PTR+32
0037B9r 1               PWOL_CONVERT_HEIGHTS_LH = ZP_PTR+33
0037B9r 1               PWOL_TRIES_COUNTER = ZP_PTR+34
0037B9r 1               PWOL_START_XL = ZP_PTR+35
0037B9r 1               PWOL_START_YL = ZP_PTR+36
0037B9r 1               PWOL_START_XH = ZP_PTR+37
0037B9r 1               PWOL_START_YH = ZP_PTR+38
0037B9r 1               
0037B9r 1               PWOL_START_COS_XL = ZP_PTR+39
0037B9r 1               PWOL_START_COS_XH = ZP_PTR+40
0037B9r 1               PWOL_START_COS_YL = ZP_PTR+41
0037B9r 1               PWOL_START_COS_YH = ZP_PTR+42
0037B9r 1               PWOL_START_SIN_XL = ZP_PTR+43
0037B9r 1               PWOL_START_SIN_XH = ZP_PTR+44
0037B9r 1               PWOL_START_SIN_YL = ZP_PTR+45
0037B9r 1               PWOL_START_SIN_YH = ZP_PTR+46
0037B9r 1               
0037B9r 1               PWOL_camera_cell_xl = ZP_PTR+47
0037B9r 1               PWOL_camera_cell_yl = ZP_PTR+48
0037B9r 1               PWOL_CENTER_Y  =  ZP_PTR+49
0037B9r 1               PWOL_CENTER_Y_TOP     =  ZP_PTR+50
0037B9r 1               
0037B9r 1               TRY_AGAIN = 6
0037B9r 1               SCREEN_MID_X = 108
0037B9r 1               SCREEN_MID_Y =  161-6-52
0037B9r 1               SCREEN_OUT_RIGHT  = 108+80-15 ; right of middle is 116, +48 = 164
0037B9r 1               SCREEN_OUT_LEFT   = 108-80  ; left of middle is 100, -48=52-16=36
0037B9r 1               SCREEN_OUT_TOP     = 16
0037B9r 1               SCREEN_OUT_BOTTOM  = 160
0037B9r 1               
0037B9r 1  AD rr rr        LDA CAMERA_CENTER_YH
0037BCr 1  1A              INC A
0037BDr 1  85 53           STA PWOL_CENTER_Y
0037BFr 1  AD rr rr        LDA CAMERA_CENTER_TOP_PX
0037C2r 1  18              CLC
0037C3r 1  69 0A           ADC #10
0037C5r 1  85 54           STA PWOL_CENTER_Y_TOP
0037C7r 1               
0037C7r 1               
0037C7r 1  A9 rr           LDA #>CONVERT_HEIGHTS_PIXELS
0037C9r 1  85 41           STA PWOL_CONVERT_HEIGHTSH
0037CBr 1  A9 rr           LDA #>CONVERT_HEIGHTS_PIXELS_L
0037CDr 1  85 43           STA PWOL_CONVERT_HEIGHTS_LH
0037CFr 1               
0037CFr 1  A9 rr           LDA #>OBJECT_LIST_Z_START_POINTERS
0037D1r 1  85 3F           STA PWOL_Z_STARTS_PTRH
0037D3r 1               
0037D3r 1  AE rr rr        LDX camera_facing
0037D6r 1  BD rr rr        LDA ACROSS_ROW_X_L,x    ; 0900  16 wide , 45* tilt ... this is added to go up row, sub for down row
0037D9r 1  85 2A           STA PWOL_ACROSS_ROW_XL
0037DBr 1  BD rr rr        LDA ACROSS_ROW_X_H,x
0037DEr 1  85 2B           STA PWOL_ACROSS_ROW_XH
0037E0r 1               
0037E0r 1  BD rr rr        LDA ACROSS_ROW_Y_L,x
0037E3r 1  85 2C           STA PWOL_ACROSS_ROW_YL
0037E5r 1  BD rr rr        LDA ACROSS_ROW_Y_H,x
0037E8r 1  85 2D           STA PWOL_ACROSS_ROW_YH
0037EAr 1               
0037EAr 1  18              CLC
0037EBr 1  BD rr rr        LDA NEXT_ROW_X_L,X  ; 0D00 next row LEFT/up when added
0037EEr 1  85 2E           STA PWOL_NEXT_ROW_A_LEFT_XL   ; -> next row is left, going up the screen ..  -1,-1
0037F0r 1  65 2A           ADC PWOL_ACROSS_ROW_XL   ; across row is for right , subtract to go left  +1 -> 0,1
0037F2r 1  85 32           STA PWOL_NEXT_ROW_A_RIGHT_XL  ;  -> next row is right, going up the screen .. -1,-1
0037F4r 1  BD rr rr        LDA NEXT_ROW_X_H,x
0037F7r 1  85 2F           STA PWOL_NEXT_ROW_A_LEFT_XH
0037F9r 1  65 2B           ADC PWOL_ACROSS_ROW_XH
0037FBr 1  85 33           STA PWOL_NEXT_ROW_A_RIGHT_XH
0037FDr 1               
0037FDr 1  18              CLC
0037FEr 1  BD rr rr        LDA NEXT_ROW_Y_L,X  ; 0F00 next row LEFT/up when added
003801r 1  85 30           STA PWOL_NEXT_ROW_A_LEFT_YL   ; -> next row is left, going up the screen
003803r 1  65 2C           ADC PWOL_ACROSS_ROW_YL   ; across row is for right
003805r 1  85 34           STA PWOL_NEXT_ROW_A_RIGHT_YL  ;  -> next row is right, going up the screen
003807r 1  BD rr rr        LDA NEXT_ROW_Y_H,x
00380Ar 1  85 31           STA PWOL_NEXT_ROW_A_LEFT_YH
00380Cr 1  65 2D           ADC PWOL_ACROSS_ROW_YH
00380Er 1  85 35           STA PWOL_NEXT_ROW_A_RIGHT_YH
003810r 1               
003810r 1               
003810r 1               ; for zig B , the opposite of left/up is right/down.. so A_LEFT * -1 = B_RIGHT
003810r 1  38              SEC ; flip A_LEFT X to B_RIGHT X
003811r 1  A9 00           LDA #0
003813r 1  E5 2E           SBC PWOL_NEXT_ROW_A_LEFT_XL
003815r 1  85 3A           STA PWOL_NEXT_ROW_B_RIGHT_XL
003817r 1  A9 00           LDA #0
003819r 1  E5 2F           SBC PWOL_NEXT_ROW_A_LEFT_XH
00381Br 1  85 3B           STA PWOL_NEXT_ROW_B_RIGHT_XH
00381Dr 1               
00381Dr 1  38              SEC ; flip A_LEFT Y to B_RIGHT Y
00381Er 1  A9 00           LDA #0
003820r 1  E5 30           SBC PWOL_NEXT_ROW_A_LEFT_YL
003822r 1  85 3C           STA PWOL_NEXT_ROW_B_RIGHT_YL
003824r 1  A9 00           LDA #0
003826r 1  E5 31           SBC PWOL_NEXT_ROW_A_LEFT_YH
003828r 1  85 3D           STA PWOL_NEXT_ROW_B_RIGHT_YH
00382Ar 1               
00382Ar 1  38              SEC ; flip A_RIGHT X to B_LEFT X
00382Br 1  A9 00           LDA #0
00382Dr 1  E5 32           SBC PWOL_NEXT_ROW_A_RIGHT_XL
00382Fr 1  85 36           STA PWOL_NEXT_ROW_B_LEFT_XL
003831r 1  A9 00           LDA #0
003833r 1  E5 33           SBC PWOL_NEXT_ROW_A_RIGHT_XH
003835r 1  85 37           STA PWOL_NEXT_ROW_B_LEFT_XH
003837r 1               
003837r 1  38              SEC ; flip A_RIGHT Y to B_LEFT Y
003838r 1  A9 00           LDA #0
00383Ar 1  E5 34           SBC PWOL_NEXT_ROW_A_RIGHT_YL
00383Cr 1  85 38           STA PWOL_NEXT_ROW_B_LEFT_YL
00383Er 1  A9 00           LDA #0
003840r 1  E5 35           SBC PWOL_NEXT_ROW_A_RIGHT_YH
003842r 1  85 39           STA PWOL_NEXT_ROW_B_LEFT_YH
003844r 1               
003844r 1  AD rr rr        LDA CAMERA_CENTER_XL
003847r 1  85 26            STA PWOL_CURRENT_XL
003849r 1  85 45            STA PWOL_START_XL
00384Br 1               
00384Br 1  AD rr rr        LDA CAMERA_CENTER_YL
00384Er 1  85 28            STA PWOL_CURRENT_YL
003850r 1  85 46            STA PWOL_START_YL
003852r 1               
003852r 1  AD rr rr        LDA CAMERA_CENTER_XH
003855r 1  85 27            STA PWOL_CURRENT_XH
003857r 1  85 47            STA PWOL_START_XH
003859r 1               
003859r 1               
003859r 1  AD rr rr        LDA CAMERA_CENTER_YH
00385Cr 1  85 29            STA PWOL_CURRENT_YH
00385Er 1  85 48            STA PWOL_START_YH
003860r 1               
003860r 1  AD rr rr         LDA CAMERA_CELL_LINE_PTR
003863r 1  85 22            STA PWOL_TUB_PTR_AL
003865r 1  85 24            STA PWOL_TUB_PTR_BL
003867r 1  AD rr rr         LDA CAMERA_CELL_LINE_PTR+1
00386Ar 1  85 23            STA PWOL_TUB_PTR_AH
00386Cr 1  85 25            STA PWOL_TUB_PTR_BH
00386Er 1               
00386Er 1                 @zigzag_A: ; going to right and up the screen, including where we are currently..
00386Er 1  AC rr rr         LDY camera_cell_x
003871r 1  80 00            BRA @zigzag_A_right
003873r 1                  @ZAR_OUT:
003873r 1               
003873r 1                   @zigzag_A_right:
003873r 1  C0 40                CPY #64  ;  make sure we don't go outside level..
003875r 1  B0 56                BCS @ZAR_NEXT ; if we're outside we'll just skip is OK here
003877r 1  B1 22                LDA (PWOL_TUB_PTR_AL),y
003879r 1  C9 81                CMP #129
00387Br 1  B0 50                BCS @ZAR_NEXT ; this isn't a valid spot in the level map..
00387Dr 1                       ; bytes 1 and 4 were updated when we cleared the object list
00387Dr 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
003880r 1  D0 04                BNE :++
003882r 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
003885r 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
003886r 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
003888r 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
00388Br 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen... (could cause issues if we're high up? can't see behind?)
00388Dr 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
00388Fr 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
003891r 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
003894r 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
003897r 1  8A                   TXA ; push new next to the Z buffer spot
003898r 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
00389Ar 1                       ; bytes .1..4.6 filled in already..
00389Ar 1  B1 22                LDA (PWOL_TUB_PTR_AL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
00389Cr 1  10 08                BPL @ZAR_INSIDE_TUB
00389Er 1                     @ZAR_HIT_WALL_OUCH:
00389Er 1  AD rr rr               LDA WORLD_WALL_SPRITE_NUM
0038A1r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
0038A4r 1  A9 56                  LDA #86 ; max height..
0038A6r 1                     @ZAR_INSIDE_TUB:
0038A6r 1  85 40                  STA PWOL_CONVERT_HEIGHTS ;
0038A8r 1  85 42                  STA PWOL_CONVERT_HEIGHTS_L;
0038AAr 1  38                     SEC
0038ABr 1  A5 28                  LDA PWOL_CURRENT_YL
0038ADr 1  F2 42                  SBC (PWOL_CONVERT_HEIGHTS_L)
0038AFr 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
0038B1r 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
0038B3r 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
0038B6r 1  C5 54                  CMP PWOL_CENTER_Y_TOP ; is this above center on screen??
0038B8r 1  B0 0E                  BCS :+ ; is not covering us
0038BAr 1  A5 29                  LDA PWOL_CURRENT_YH
0038BCr 1  C5 53                  CMP PWOL_CENTER_Y
0038BEr 1  90 08                  BCC :+ ; its from ahead of us, OK
0038C0r 1                         ; it was from below and covers us ..
0038C0r 1  BD rr rr               LDA OBJECT_LIST_BYTE0_ADDRLOW,X
0038C3r 1  69 0F                  ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
0038C5r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X
0038C8r 1                         ;LDA #$D0
0038C8r 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
0038C8r 1  A5 27                : LDA PWOL_CURRENT_XH
0038CAr 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
0038CDr 1                    @ZAR_NEXT:
0038CDr 1                        ; calc next to the right..
0038CDr 1  C8                    INY
0038CEr 1  18                    CLC
0038CFr 1  A5 26                 LDA PWOL_CURRENT_XL
0038D1r 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
0038D3r 1  85 26                 STA PWOL_CURRENT_XL
0038D5r 1  A5 27                 LDA PWOL_CURRENT_XH
0038D7r 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
0038D9r 1  85 27                 STA PWOL_CURRENT_XH
0038DBr 1  AA                    TAX
0038DCr 1  18                    CLC
0038DDr 1  A5 28                 LDA PWOL_CURRENT_YL
0038DFr 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
0038E1r 1  85 28                 STA PWOL_CURRENT_YL
0038E3r 1  A5 29                 LDA PWOL_CURRENT_YH
0038E5r 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
0038E7r 1  85 29                 STA PWOL_CURRENT_YH
0038E9r 1               
0038E9r 1  8E rr rr              STX DEBUG_A
0038ECr 1  8D rr rr              STA DEBUG_B
0038EFr 1               
0038EFr 1  E0 AD                 CPX #SCREEN_OUT_RIGHT
0038F1r 1  B0 0F                 BCS @ZAR_ZIG_LEFT_SWITCH
0038F3r 1  E0 1C                 CPX #SCREEN_OUT_LEFT
0038F5r 1  90 0B                 BCC @ZAR_ZIG_LEFT_SWITCH
0038F7r 1  C9 10                 CMP #SCREEN_OUT_TOP
0038F9r 1  90 07                 BCC @ZAR_ZIG_LEFT_SWITCH
0038FBr 1  C9 A0                 CMP #SCREEN_OUT_BOTTOM
0038FDr 1  B0 03                 BCS @ZAR_ZIG_LEFT_SWITCH
0038FFr 1  4C rr rr              JMP @zigzag_A_right
003902r 1                    @ZAR_ZIG_LEFT_SWITCH: ;PWOL_NEXT_ROW_A_LEFT_XL   ; -> next row is left, going up the screen ..  +0,-1
003902r 1  A9 06                 LDA #TRY_AGAIN
003904r 1  85 44                 STA PWOL_TRIES_COUNTER
003906r 1               ;         INY
003906r 1  38                    SEC
003907r 1  A5 22                 LDA PWOL_TUB_PTR_AL
003909r 1  E9 40                 SBC #64 ;   0,-1
00390Br 1  85 22                 STA PWOL_TUB_PTR_AL
00390Dr 1  A5 23                 LDA PWOL_TUB_PTR_AH
00390Fr 1  E9 00                 SBC #0
003911r 1  C9 rr                 CMP #>TUB_WORLD ; are we inside the world still?
003913r 1  B0 03                 BCS :+
003915r 1  4C rr rr              JMP @zigzag_B
003918r 1  85 23               : STA PWOL_TUB_PTR_AH
00391Ar 1               
00391Ar 1  18                    CLC
00391Br 1  A5 26                 LDA PWOL_CURRENT_XL
00391Dr 1  65 2E                 ADC PWOL_NEXT_ROW_A_LEFT_XL
00391Fr 1  85 26                 STA PWOL_CURRENT_XL
003921r 1  A5 27                 LDA PWOL_CURRENT_XH
003923r 1  65 2F                 ADC PWOL_NEXT_ROW_A_LEFT_XH
003925r 1  85 27                 STA PWOL_CURRENT_XH
003927r 1  AA                    TAX
003928r 1  18                    CLC
003929r 1  A5 28                 LDA PWOL_CURRENT_YL
00392Br 1  65 30                 ADC PWOL_NEXT_ROW_A_LEFT_YL
00392Dr 1  85 28                 STA PWOL_CURRENT_YL
00392Fr 1  A5 29                 LDA PWOL_CURRENT_YH
003931r 1  65 31                 ADC PWOL_NEXT_ROW_A_LEFT_YH
003933r 1  85 29                 STA PWOL_CURRENT_YH
003935r 1                        ; check if we're outside ..
003935r 1               
003935r 1  E0 AD                 CPX #SCREEN_OUT_RIGHT
003937r 1  B0 0C                 BCS @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
003939r 1  E0 1C                 CPX #SCREEN_OUT_LEFT
00393Br 1  90 08                 BCC @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
00393Dr 1  C9 10                 CMP #SCREEN_OUT_TOP
00393Fr 1  90 04                 BCC @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
003941r 1  C9 A0                 CMP #SCREEN_OUT_BOTTOM
003943r 1  90 33                 BCC @zigzag_A_left
003945r 1                  @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN:
003945r 1  C6 44                 DEC PWOL_TRIES_COUNTER
003947r 1  D0 03                 BNE @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT
003949r 1  4C rr rr              JMP @zigzag_B
00394Cr 1                  @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT:
00394Cr 1  88                    DEY
00394Dr 1  38                    SEC
00394Er 1  A5 26                 LDA PWOL_CURRENT_XL
003950r 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
003952r 1  85 26                 STA PWOL_CURRENT_XL
003954r 1  A5 27                 LDA PWOL_CURRENT_XH
003956r 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
003958r 1  85 27                 STA PWOL_CURRENT_XH
00395Ar 1  AA                    TAX
00395Br 1  38                    SEC
00395Cr 1  A5 28                 LDA PWOL_CURRENT_YL
00395Er 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
003960r 1  85 28                 STA PWOL_CURRENT_YL
003962r 1  A5 29                 LDA PWOL_CURRENT_YH
003964r 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
003966r 1  85 29                 STA PWOL_CURRENT_YH
003968r 1  E0 AD                 CPX #SCREEN_OUT_RIGHT
00396Ar 1  B0 D9                 BCS @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
00396Cr 1  E0 1C                 CPX #SCREEN_OUT_LEFT
00396Er 1  90 D5                 BCC @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
003970r 1  C9 10                 CMP #SCREEN_OUT_TOP
003972r 1  90 D1                 BCC @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
003974r 1  C9 A0                 CMP #SCREEN_OUT_BOTTOM
003976r 1  B0 CD                 BCS @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
003978r 1                  @zigzag_A_left:
003978r 1  C0 40                CPY #64  ;  make sure we don't go outside level..
00397Ar 1  B0 5C                BCS @ZAL_NEXT ; if we're outside we'll just skip is OK
00397Cr 1  B1 22                LDA (PWOL_TUB_PTR_AL),y
00397Er 1  C9 81                CMP #129
003980r 1  B0 56                BCS @ZAL_NEXT ; we're outside level.
003982r 1               
003982r 1                       ; bytes 1 and 4 were updated when we cleared the object list
003982r 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
003985r 1  D0 04                BNE :++
003987r 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
00398Ar 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
00398Br 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
00398Dr 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
003990r 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen...
003992r 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
003994r 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
003996r 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
003999r 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
00399Cr 1  8A                   TXA ; push new next to the Z buffer spot
00399Dr 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
00399Fr 1                       ; bytes .1..4.6 filled in already..
00399Fr 1  AD rr rr             LDA WORLD_SPRITE_NUM
0039A2r 1  9D rr rr             STA OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway..
0039A5r 1  B1 22                LDA (PWOL_TUB_PTR_AL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
0039A7r 1  10 08                BPL @ZAL_INSIDE_TUB
0039A9r 1                     @ZAL_HIT_WALL_OUCH:
0039A9r 1  AD rr rr               LDA WORLD_WALL_SPRITE_NUM
0039ACr 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
0039AFr 1  A9 56                  LDA #86 ; max height..
0039B1r 1                     @ZAL_INSIDE_TUB:
0039B1r 1  85 40                  STA PWOL_CONVERT_HEIGHTS ;
0039B3r 1  85 42                  STA PWOL_CONVERT_HEIGHTS_L;
0039B5r 1  38                     SEC
0039B6r 1  A5 28                  LDA PWOL_CURRENT_YL
0039B8r 1  F2 42                  SBC (PWOL_CONVERT_HEIGHTS_L)
0039BAr 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
0039BCr 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
0039BEr 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
0039C1r 1  C5 54                  CMP PWOL_CENTER_Y_TOP ; is this above center on screen??
0039C3r 1  B0 0E                  BCS :+ ; is not covering us
0039C5r 1  A5 29                  LDA PWOL_CURRENT_YH
0039C7r 1  C5 53                  CMP PWOL_CENTER_Y
0039C9r 1  90 08                  BCC :+ ; its from ahead of us, OK
0039CBr 1                         ; it was from below and covers us ..
0039CBr 1  BD rr rr               LDA OBJECT_LIST_BYTE0_ADDRLOW,X
0039CEr 1  69 0F                  ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
0039D0r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X
0039D3r 1                         ;LDA #$D0
0039D3r 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
0039D3r 1  A5 27                : LDA PWOL_CURRENT_XH
0039D5r 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
0039D8r 1                    @ZAL_NEXT:
0039D8r 1                        ; calc next to the LEFT
0039D8r 1  88                    DEY
0039D9r 1  38                    SEC
0039DAr 1  A5 26                 LDA PWOL_CURRENT_XL
0039DCr 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
0039DEr 1  85 26                 STA PWOL_CURRENT_XL
0039E0r 1  A5 27                 LDA PWOL_CURRENT_XH
0039E2r 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
0039E4r 1  85 27                 STA PWOL_CURRENT_XH
0039E6r 1  AA                    TAX
0039E7r 1  38                    SEC
0039E8r 1  A5 28                 LDA PWOL_CURRENT_YL
0039EAr 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
0039ECr 1  85 28                 STA PWOL_CURRENT_YL
0039EEr 1  A5 29                 LDA PWOL_CURRENT_YH
0039F0r 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
0039F2r 1  85 29                 STA PWOL_CURRENT_YH
0039F4r 1               
0039F4r 1  8E rr rr              STX DEBUG_A
0039F7r 1  8D rr rr              STA DEBUG_B
0039FAr 1               
0039FAr 1  E0 AD                 CPX #SCREEN_OUT_RIGHT
0039FCr 1  B0 0F                 BCS @ZAL_ZIG_RIGHT_SWITCH
0039FEr 1  E0 1C                 CPX #SCREEN_OUT_LEFT
003A00r 1  90 0B                 BCC @ZAL_ZIG_RIGHT_SWITCH
003A02r 1  C9 10                 CMP #SCREEN_OUT_TOP
003A04r 1  90 07                 BCC @ZAL_ZIG_RIGHT_SWITCH
003A06r 1  C9 A0                 CMP #SCREEN_OUT_BOTTOM
003A08r 1  B0 03                 BCS @ZAL_ZIG_RIGHT_SWITCH
003A0Ar 1  4C rr rr              JMP @zigzag_A_left
003A0Dr 1                    @ZAL_ZIG_RIGHT_SWITCH: ; up/right is +1,+1  from where we is right now ..
003A0Dr 1  A9 06                 LDA #TRY_AGAIN
003A0Fr 1  85 44                 STA PWOL_TRIES_COUNTER
003A11r 1  C8                    INY
003A12r 1  38                    SEC
003A13r 1  A5 22                 LDA PWOL_TUB_PTR_AL
003A15r 1  E9 40                 SBC #64
003A17r 1  85 22                 STA PWOL_TUB_PTR_AL
003A19r 1  A5 23                 LDA PWOL_TUB_PTR_AH
003A1Br 1  E9 00                 SBC #0
003A1Dr 1  C9 rr                 CMP #>TUB_WORLD ; are we inside the world still?
003A1Fr 1  B0 03                 BCS :+
003A21r 1  4C rr rr              JMP @zigzag_B
003A24r 1  85 23               : STA PWOL_TUB_PTR_AH
003A26r 1               
003A26r 1               
003A26r 1  18                    CLC
003A27r 1               
003A27r 1  A5 26                 LDA PWOL_CURRENT_XL
003A29r 1  65 32                 ADC PWOL_NEXT_ROW_A_RIGHT_XL
003A2Br 1  85 26                 STA PWOL_CURRENT_XL
003A2Dr 1               
003A2Dr 1  A5 27                 LDA PWOL_CURRENT_XH
003A2Fr 1  65 33                 ADC PWOL_NEXT_ROW_A_RIGHT_XH
003A31r 1  85 27                 STA PWOL_CURRENT_XH
003A33r 1  AA                    TAX
003A34r 1               
003A34r 1               
003A34r 1  18                    CLC
003A35r 1  A5 28                 LDA PWOL_CURRENT_YL
003A37r 1  65 34                 ADC PWOL_NEXT_ROW_A_RIGHT_YL
003A39r 1  85 28                 STA PWOL_CURRENT_YL
003A3Br 1  A5 29                 LDA PWOL_CURRENT_YH
003A3Dr 1  65 35                 ADC PWOL_NEXT_ROW_A_RIGHT_YH
003A3Fr 1  85 29                 STA PWOL_CURRENT_YH
003A41r 1               
003A41r 1  E0 AD                 CPX #SCREEN_OUT_RIGHT
003A43r 1  B0 0F                 BCS @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003A45r 1  E0 1C                 CPX #SCREEN_OUT_LEFT
003A47r 1  90 0B                 BCC @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003A49r 1  C9 10                 CMP #SCREEN_OUT_TOP
003A4Br 1  90 07                 BCC @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003A4Dr 1  C9 A0                 CMP #SCREEN_OUT_BOTTOM
003A4Fr 1  B0 03                 BCS @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003A51r 1  4C rr rr              JMP @zigzag_A_right
003A54r 1                  @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN:
003A54r 1  C6 44                 DEC PWOL_TRIES_COUNTER
003A56r 1  F0 2F                 BEQ @zigzag_B
003A58r 1                  @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN_GO_RIGHT:
003A58r 1  C8                    INY
003A59r 1  18                    CLC
003A5Ar 1  A5 26                 LDA PWOL_CURRENT_XL
003A5Cr 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
003A5Er 1  85 26                 STA PWOL_CURRENT_XL
003A60r 1  A5 27                 LDA PWOL_CURRENT_XH
003A62r 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
003A64r 1  85 27                 STA PWOL_CURRENT_XH
003A66r 1  AA                    TAX
003A67r 1  18                    CLC
003A68r 1  A5 28                 LDA PWOL_CURRENT_YL
003A6Ar 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
003A6Cr 1  85 28                 STA PWOL_CURRENT_YL
003A6Er 1  A5 29                 LDA PWOL_CURRENT_YH
003A70r 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
003A72r 1  85 29                 STA PWOL_CURRENT_YH
003A74r 1               
003A74r 1  E0 AD                 CPX #SCREEN_OUT_RIGHT
003A76r 1  B0 DC                 BCS @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003A78r 1  E0 1C                 CPX #SCREEN_OUT_LEFT
003A7Ar 1  90 D8                 BCC @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003A7Cr 1  C9 10                 CMP #SCREEN_OUT_TOP
003A7Er 1  90 D4                 BCC @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003A80r 1  C9 A0                 CMP #SCREEN_OUT_BOTTOM
003A82r 1  B0 D0                 BCS @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003A84r 1  4C rr rr              JMP @zigzag_A_right
003A87r 1               
003A87r 1               
003A87r 1               
003A87r 1                 @zigzag_B: ; going to left and down the screen, including where we are currently..
003A87r 1                    ; RTS
003A87r 1  38                 SEC
003A88r 1  A5 45              LDA PWOL_START_XL
003A8Ar 1  E5 2A              SBC PWOL_ACROSS_ROW_XL
003A8Cr 1  85 26              STA PWOL_CURRENT_XL
003A8Er 1  A5 47              LDA PWOL_START_XH
003A90r 1  E5 2B              SBC PWOL_ACROSS_ROW_XH
003A92r 1  85 27              STA PWOL_CURRENT_XH
003A94r 1               
003A94r 1               
003A94r 1  38                 SEC
003A95r 1  A5 46              LDA PWOL_START_YL
003A97r 1  E5 2C              SBC PWOL_ACROSS_ROW_YL
003A99r 1  85 28              STA PWOL_CURRENT_YL
003A9Br 1  A5 48              LDA PWOL_START_YH
003A9Dr 1  E5 2D              SBC PWOL_ACROSS_ROW_YH
003A9Fr 1  85 29              STA PWOL_CURRENT_YH
003AA1r 1               
003AA1r 1  AC rr rr           LDY camera_cell_x   ;  eh voila! we haz pointer to ze row to start on .. woot!
003AA4r 1  88                 DEY ; start left
003AA5r 1               
003AA5r 1                  @zigzag_B_left:
003AA5r 1  C0 40                CPY #64  ;  make sure we don't go outside level..
003AA7r 1  B0 5C                BCS @ZBL_NEXT ; if we're outside we'll just skip is OK
003AA9r 1  B1 24                LDA (PWOL_TUB_PTR_BL),y
003AABr 1  C9 81                CMP #129
003AADr 1  B0 56                BCS @ZBL_NEXT ; we're outside level.
003AAFr 1               
003AAFr 1                       ; bytes 1 and 4 were updated when we cleared the object list
003AAFr 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
003AB2r 1  D0 04                BNE :++
003AB4r 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
003AB7r 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
003AB8r 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
003ABAr 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
003ABDr 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen...
003ABFr 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
003AC1r 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
003AC3r 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
003AC6r 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
003AC9r 1  8A                   TXA ; push new next to the Z buffer spot
003ACAr 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
003ACCr 1                       ; bytes .1..4.6 filled in already..
003ACCr 1  AD rr rr             LDA WORLD_SPRITE_NUM
003ACFr 1  9D rr rr             STA OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway..
003AD2r 1  B1 24                LDA (PWOL_TUB_PTR_BL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
003AD4r 1  10 08                BPL @ZBL_INSIDE_TUB
003AD6r 1                     @ZBL_HIT_WALL_OUCH:
003AD6r 1  AD rr rr               LDA WORLD_WALL_SPRITE_NUM
003AD9r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
003ADCr 1  A9 56                  LDA #86 ; max height..
003ADEr 1                     @ZBL_INSIDE_TUB:
003ADEr 1  85 40                  STA PWOL_CONVERT_HEIGHTS ;
003AE0r 1  85 42                  STA PWOL_CONVERT_HEIGHTS_L;
003AE2r 1  38                     SEC
003AE3r 1  A5 28                  LDA PWOL_CURRENT_YL
003AE5r 1  F2 42                  SBC (PWOL_CONVERT_HEIGHTS_L)
003AE7r 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
003AE9r 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
003AEBr 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
003AEEr 1  C5 54                  CMP PWOL_CENTER_Y_TOP ; is this above center on screen??
003AF0r 1  B0 0E                  BCS :+ ; is not covering us
003AF2r 1  A5 29                  LDA PWOL_CURRENT_YH
003AF4r 1  C5 53                  CMP PWOL_CENTER_Y
003AF6r 1  90 08                  BCC :+ ; its from ahead of us, OK
003AF8r 1                         ; it was from below and covers us ..
003AF8r 1  BD rr rr               LDA OBJECT_LIST_BYTE0_ADDRLOW,X
003AFBr 1  69 0F                  ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
003AFDr 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X
003B00r 1                         ;LDA #$D0
003B00r 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
003B00r 1  A5 27                : LDA PWOL_CURRENT_XH
003B02r 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
003B05r 1                    @ZBL_NEXT:
003B05r 1                        ; calc next to the LEFT
003B05r 1  88                    DEY
003B06r 1  38                    SEC
003B07r 1  A5 26                 LDA PWOL_CURRENT_XL
003B09r 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
003B0Br 1  85 26                 STA PWOL_CURRENT_XL
003B0Dr 1  A5 27                 LDA PWOL_CURRENT_XH
003B0Fr 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
003B11r 1  85 27                 STA PWOL_CURRENT_XH
003B13r 1  AA                    TAX
003B14r 1  38                    SEC
003B15r 1  A5 28                 LDA PWOL_CURRENT_YL
003B17r 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
003B19r 1  85 28                 STA PWOL_CURRENT_YL
003B1Br 1  A5 29                 LDA PWOL_CURRENT_YH
003B1Dr 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
003B1Fr 1  85 29                 STA PWOL_CURRENT_YH
003B21r 1               
003B21r 1  8E rr rr              STX DEBUG_A
003B24r 1  8D rr rr              STA DEBUG_B
003B27r 1               
003B27r 1  E0 AD                 CPX #SCREEN_OUT_RIGHT
003B29r 1  B0 0F                 BCS @ZBL_ZIG_RIGHT_SWITCH
003B2Br 1  E0 1C                 CPX #SCREEN_OUT_LEFT
003B2Dr 1  90 0B                 BCC @ZBL_ZIG_RIGHT_SWITCH
003B2Fr 1  C9 10                 CMP #SCREEN_OUT_TOP
003B31r 1  90 07                 BCC @ZBL_ZIG_RIGHT_SWITCH
003B33r 1  C9 A0                 CMP #SCREEN_OUT_BOTTOM
003B35r 1  B0 03                 BCS @ZBL_ZIG_RIGHT_SWITCH
003B37r 1  4C rr rr              JMP @zigzag_B_left
003B3Ar 1                    @ZBL_ZIG_RIGHT_SWITCH: ; DOWN/LEFT to start right is is 0,+1  from where we is right now ..
003B3Ar 1                        ;INY
003B3Ar 1                        ;INY
003B3Ar 1  A9 06                 LDA #TRY_AGAIN
003B3Cr 1  85 44                 STA PWOL_TRIES_COUNTER
003B3Er 1  18                    CLC
003B3Fr 1  A5 24                 LDA PWOL_TUB_PTR_BL
003B41r 1  69 40                 ADC #64
003B43r 1  85 24                 STA PWOL_TUB_PTR_BL
003B45r 1  A5 25                 LDA PWOL_TUB_PTR_BH
003B47r 1  69 00                 ADC #0
003B49r 1  C9 rr                 CMP #>TUB_WORLD+8
003B4Br 1  90 01                 BCC :+
003B4Dr 1  60                    rts
003B4Er 1  85 25               : STA PWOL_TUB_PTR_BH
003B50r 1               
003B50r 1               
003B50r 1  18                    CLC
003B51r 1               
003B51r 1  A5 26                 LDA PWOL_CURRENT_XL
003B53r 1  65 3A                 ADC PWOL_NEXT_ROW_B_RIGHT_XL
003B55r 1  85 26                 STA PWOL_CURRENT_XL
003B57r 1               
003B57r 1  A5 27                 LDA PWOL_CURRENT_XH
003B59r 1  65 3B                 ADC PWOL_NEXT_ROW_B_RIGHT_XH
003B5Br 1  85 27                 STA PWOL_CURRENT_XH
003B5Dr 1  AA                    TAX
003B5Er 1               
003B5Er 1               
003B5Er 1  18                    CLC
003B5Fr 1  A5 28                 LDA PWOL_CURRENT_YL
003B61r 1  65 3C                 ADC PWOL_NEXT_ROW_B_RIGHT_YL
003B63r 1  85 28                 STA PWOL_CURRENT_YL
003B65r 1  A5 29                 LDA PWOL_CURRENT_YH
003B67r 1  65 3D                 ADC PWOL_NEXT_ROW_B_RIGHT_YH
003B69r 1  85 29                 STA PWOL_CURRENT_YH
003B6Br 1               
003B6Br 1  E0 AD                 CPX #SCREEN_OUT_RIGHT
003B6Dr 1  B0 0F                 BCS @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003B6Fr 1  E0 1C                 CPX #SCREEN_OUT_LEFT
003B71r 1  90 0B                 BCC @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003B73r 1  C9 10                 CMP #SCREEN_OUT_TOP
003B75r 1  90 07                 BCC @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003B77r 1  C9 A0                 CMP #SCREEN_OUT_BOTTOM
003B79r 1  B0 03                 BCS @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003B7Br 1  4C rr rr              JMP @zigzag_B_right
003B7Er 1                  @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN:
003B7Er 1  C6 44                 DEC PWOL_TRIES_COUNTER
003B80r 1  D0 01                 BNE @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN_GO_RIGHT
003B82r 1                  @ZBL_RTS:
003B82r 1  60                 rts
003B83r 1                  @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN_GO_RIGHT:
003B83r 1  C8                    INY
003B84r 1  18                    CLC
003B85r 1  A5 26                 LDA PWOL_CURRENT_XL
003B87r 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
003B89r 1  85 26                 STA PWOL_CURRENT_XL
003B8Br 1  A5 27                 LDA PWOL_CURRENT_XH
003B8Dr 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
003B8Fr 1  85 27                 STA PWOL_CURRENT_XH
003B91r 1  AA                    TAX
003B92r 1  18                    CLC
003B93r 1  A5 28                 LDA PWOL_CURRENT_YL
003B95r 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
003B97r 1  85 28                 STA PWOL_CURRENT_YL
003B99r 1  A5 29                 LDA PWOL_CURRENT_YH
003B9Br 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
003B9Dr 1  85 29                 STA PWOL_CURRENT_YH
003B9Fr 1               
003B9Fr 1  E0 AD                 CPX #SCREEN_OUT_RIGHT
003BA1r 1  B0 DB                 BCS @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003BA3r 1  E0 1C                 CPX #SCREEN_OUT_LEFT
003BA5r 1  90 D7                 BCC @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003BA7r 1  C9 10                 CMP #SCREEN_OUT_TOP
003BA9r 1  90 D3                 BCC @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003BABr 1  C9 A0                 CMP #SCREEN_OUT_BOTTOM
003BADr 1  B0 CF                 BCS @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003BAFr 1               
003BAFr 1                   @zigzag_B_right:
003BAFr 1  C0 40                CPY #64  ;  make sure we don't go outside level..
003BB1r 1  B0 5C                BCS @ZBR_NEXT ; if we're outside we'll just skip is OK
003BB3r 1  B1 24                LDA (PWOL_TUB_PTR_BL),y
003BB5r 1  C9 81                CMP #129
003BB7r 1  B0 56                BCS @ZBR_NEXT ; we're outside level.
003BB9r 1               
003BB9r 1                       ; bytes 1 and 4 were updated when we cleared the object list
003BB9r 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
003BBCr 1  D0 04                BNE :++
003BBEr 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
003BC1r 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
003BC2r 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
003BC4r 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
003BC7r 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen...
003BC9r 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
003BCBr 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
003BCDr 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
003BD0r 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
003BD3r 1  8A                   TXA ; push new next to the Z buffer spot
003BD4r 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
003BD6r 1                       ; bytes .1..4.6 filled in already..
003BD6r 1  AD rr rr             LDA WORLD_SPRITE_NUM
003BD9r 1  9D rr rr             STA OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway..
003BDCr 1  B1 24                LDA (PWOL_TUB_PTR_BL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
003BDEr 1  10 08                BPL @ZBR_INSIDE_TUB
003BE0r 1                     @ZBR_HIT_WALL_OUCH:
003BE0r 1  AD rr rr               LDA WORLD_WALL_SPRITE_NUM
003BE3r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
003BE6r 1  A9 56                  LDA #86 ; max height..
003BE8r 1                     @ZBR_INSIDE_TUB:
003BE8r 1  85 40                  STA PWOL_CONVERT_HEIGHTS ;
003BEAr 1  85 42                  STA PWOL_CONVERT_HEIGHTS_L;
003BECr 1  38                     SEC
003BEDr 1  A5 28                  LDA PWOL_CURRENT_YL
003BEFr 1  F2 42                  SBC (PWOL_CONVERT_HEIGHTS_L)
003BF1r 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
003BF3r 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
003BF5r 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
003BF8r 1  C5 54                  CMP PWOL_CENTER_Y_TOP ; is this above center on screen??
003BFAr 1  B0 0E                  BCS :+ ; is not covering us
003BFCr 1  A5 29                  LDA PWOL_CURRENT_YH
003BFEr 1  C5 53                  CMP PWOL_CENTER_Y
003C00r 1  90 08                  BCC :+ ; its from ahead of us, OK
003C02r 1                         ; it was from below and covers us ..
003C02r 1  BD rr rr               LDA OBJECT_LIST_BYTE0_ADDRLOW,X
003C05r 1  69 0F                  ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
003C07r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X
003C0Ar 1                         ;LDA #$D0
003C0Ar 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
003C0Ar 1  A5 27                : LDA PWOL_CURRENT_XH
003C0Cr 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
003C0Fr 1                    @ZBR_NEXT:
003C0Fr 1                        ; calc next to the right..
003C0Fr 1  C8                    INY
003C10r 1  18                    CLC
003C11r 1  A5 26                 LDA PWOL_CURRENT_XL
003C13r 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
003C15r 1  85 26                 STA PWOL_CURRENT_XL
003C17r 1  A5 27                 LDA PWOL_CURRENT_XH
003C19r 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
003C1Br 1  85 27                 STA PWOL_CURRENT_XH
003C1Dr 1  AA                    TAX
003C1Er 1  18                    CLC
003C1Fr 1  A5 28                 LDA PWOL_CURRENT_YL
003C21r 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
003C23r 1  85 28                 STA PWOL_CURRENT_YL
003C25r 1  A5 29                 LDA PWOL_CURRENT_YH
003C27r 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
003C29r 1  85 29                 STA PWOL_CURRENT_YH
003C2Br 1               
003C2Br 1  8E rr rr              STX DEBUG_A
003C2Er 1  8D rr rr              STA DEBUG_B
003C31r 1               
003C31r 1  E0 AD                 CPX #SCREEN_OUT_RIGHT
003C33r 1  B0 0F                 BCS @ZBR_ZIG_LEFT_SWITCH
003C35r 1  E0 1C                 CPX #SCREEN_OUT_LEFT
003C37r 1  90 0B                 BCC @ZBR_ZIG_LEFT_SWITCH
003C39r 1  C9 10                 CMP #SCREEN_OUT_TOP
003C3Br 1  90 07                 BCC @ZBR_ZIG_LEFT_SWITCH
003C3Dr 1  C9 A0                 CMP #SCREEN_OUT_BOTTOM
003C3Fr 1  B0 03                 BCS @ZBR_ZIG_LEFT_SWITCH
003C41r 1  4C rr rr              jmp @zigzag_B_right
003C44r 1                    @ZBR_ZIG_LEFT_SWITCH: ;PWOL_NEXT_ROW_A_LEFT_XL   ; -> next row is left, going down the screen ..  +1,+1
003C44r 1  A9 06                 LDA #TRY_AGAIN
003C46r 1  85 44                 STA PWOL_TRIES_COUNTER
003C48r 1  88                   DEY ; have to go this to match where the thing is going .. 0,0
003C49r 1  18                    CLC
003C4Ar 1  A5 24                 LDA PWOL_TUB_PTR_BL
003C4Cr 1  69 40                 ADC #64 ;   0,-1
003C4Er 1  85 24                 STA PWOL_TUB_PTR_BL
003C50r 1  A5 25                 LDA PWOL_TUB_PTR_BH
003C52r 1  69 00                 ADC #0
003C54r 1  C9 rr                 CMP #>TUB_WORLD+8
003C56r 1  90 01                 BCC :+
003C58r 1  60                    rts
003C59r 1  85 25               : STA PWOL_TUB_PTR_BH
003C5Br 1               
003C5Br 1  18                    CLC
003C5Cr 1  A5 26                 LDA PWOL_CURRENT_XL
003C5Er 1  65 36                 ADC PWOL_NEXT_ROW_B_LEFT_XL
003C60r 1  85 26                 STA PWOL_CURRENT_XL
003C62r 1  A5 27                 LDA PWOL_CURRENT_XH
003C64r 1  65 37                 ADC PWOL_NEXT_ROW_B_LEFT_XH
003C66r 1  85 27                 STA PWOL_CURRENT_XH
003C68r 1  AA                    TAX
003C69r 1  18                    CLC
003C6Ar 1  A5 28                 LDA PWOL_CURRENT_YL
003C6Cr 1  65 38                 ADC PWOL_NEXT_ROW_B_LEFT_YL
003C6Er 1  85 28                 STA PWOL_CURRENT_YL
003C70r 1  A5 29                 LDA PWOL_CURRENT_YH
003C72r 1  65 39                 ADC PWOL_NEXT_ROW_B_LEFT_YH
003C74r 1  85 29                 STA PWOL_CURRENT_YH
003C76r 1                        ; check if we're outside ..
003C76r 1               
003C76r 1  E0 AD                 CPX #SCREEN_OUT_RIGHT
003C78r 1  B0 0F                 BCS @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
003C7Ar 1  E0 1C                 CPX #SCREEN_OUT_LEFT
003C7Cr 1  90 0B                 BCC @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
003C7Er 1  C9 10                 CMP #SCREEN_OUT_TOP
003C80r 1  90 07                 BCC @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
003C82r 1  C9 A0                 CMP #SCREEN_OUT_BOTTOM
003C84r 1  B0 03                 BCS @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
003C86r 1  4C rr rr              jmp @zigzag_B_left
003C89r 1                  @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN:
003C89r 1  C6 44                 DEC PWOL_TRIES_COUNTER
003C8Br 1  D0 01                 BNE @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT
003C8Dr 1                  @ZBR_RTS:
003C8Dr 1  60                    rts
003C8Er 1                  @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT:
003C8Er 1  88                    DEY
003C8Fr 1  38                    SEC
003C90r 1  A5 26                 LDA PWOL_CURRENT_XL
003C92r 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
003C94r 1  85 26                 STA PWOL_CURRENT_XL
003C96r 1  A5 27                 LDA PWOL_CURRENT_XH
003C98r 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
003C9Ar 1  85 27                 STA PWOL_CURRENT_XH
003C9Cr 1  AA                    TAX
003C9Dr 1  38                    SEC
003C9Er 1  A5 28                 LDA PWOL_CURRENT_YL
003CA0r 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
003CA2r 1  85 28                 STA PWOL_CURRENT_YL
003CA4r 1  A5 29                 LDA PWOL_CURRENT_YH
003CA6r 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
003CA8r 1  85 29                 STA PWOL_CURRENT_YH
003CAAr 1  E0 AD                 CPX #SCREEN_OUT_RIGHT
003CACr 1  B0 DB                 BCS @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
003CAEr 1  E0 1C                 CPX #SCREEN_OUT_LEFT
003CB0r 1  90 D7                 BCC @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
003CB2r 1  C9 10                 CMP #SCREEN_OUT_TOP
003CB4r 1  90 D3                 BCC @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
003CB6r 1  C9 A0                 CMP #SCREEN_OUT_BOTTOM
003CB8r 1  B0 CF                 BCS @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
003CBAr 1  4C rr rr              JMP @zigzag_B_left
003CBDr 1               
003CBDr 1               draw_object_list:
003CBDr 1  AC rr rr         LDY NUM_AVAIL_SPRITES ; num sprites can write
003CC0r 1  F0 4F            BEQ @rts
003CC2r 1  AD rr rr         LDA NUM_RESERVED_SPRITES
003CC5r 1  EE rr rr         INC VERA_LOCK
003CC8r 1               ;    BNE @unlock_vera   there's no actual way to get here and not have vera unlock..
003CC8r 1               
003CC8r 1               
003CC8r 1  EE rr rr         INC DEBUG_D
003CCBr 1               
003CCBr 1  9C 25 9F         STZ VERA_ctrl
003CCEr 1  64 22            STZ ZP_PTR
003CD0r 1  0A               ASL
003CD1r 1  26 22            ROL ZP_PTR
003CD3r 1  0A               ASL
003CD4r 1  26 22            ROL ZP_PTR
003CD6r 1  0A               ASL
003CD7r 1  26 22            ROL ZP_PTR
003CD9r 1  8D 20 9F         STA VERA_addr_low
003CDCr 1  18               CLC
003CDDr 1  A5 22            LDA ZP_PTR
003CDFr 1  69 EC            ADC #>VRAM_SPRITE_BUF;  #>VRAM_SPRITE_BUF ; #>VRAM_sprite_attributes;
003CE1r 1  8D 21 9F         sta VERA_addr_high
003CE4r 1  A9 11            lda #$11
003CE6r 1  8D 22 9F         sta VERA_addr_bank
003CE9r 1  64 22            STZ ZP_PTR
003CEBr 1  A9 rr            LDA #>OBJECT_LIST_Z_START_POINTERS
003CEDr 1  85 23            STA ZP_PTR+1
003CEFr 1                 @NEXT_Z: ; Z=0 is invalid...
003CEFr 1  E6 22              INC ZP_PTR
003CF1r 1  D0 1F              BNE @Z_LOOP
003CF3r 1  AD 23 9F           : LDA VERA_data0
003CF6r 1  AD 23 9F             LDA VERA_data0
003CF9r 1  9C 23 9F             STZ VERA_data0
003CFCr 1  9C 23 9F             STZ VERA_data0
003CFFr 1  AD 23 9F             LDA VERA_data0
003D02r 1  AD 23 9F             LDA VERA_data0
003D05r 1  AD 23 9F             LDA VERA_data0
003D08r 1  AD 23 9F             LDA VERA_data0
003D0Br 1  88                   DEY
003D0Cr 1  D0 E5                BNE :-
003D0Er 1                  @unlock_vera:
003D0Er 1  CE rr rr           DEC VERA_LOCK
003D11r 1                  @rts:
003D11r 1  60                 rts
003D12r 1                 @Z_LOOP:
003D12r 1  B2 22              LDA (ZP_PTR) ; get our first victim
003D14r 1  AA                 TAX
003D15r 1  A9 00              LDA #0
003D17r 1  92 22              STA (ZP_PTR) ; zero this Z_next for now
003D19r 1  8A                 TXA
003D1Ar 1                    @OBJ_LOOP:
003D1Ar 1  AA                    TAX
003D1Br 1  F0 D2                 BEQ @NEXT_Z ; got a bum next pointer there ...
003D1Dr 1  BD rr rr              LDA OBJECT_LIST_BYTE0_ADDRLOW,X
003D20r 1  8D 23 9F              STA VERA_data0
003D23r 1  BD rr rr              LDA OBJECT_LIST_BYTE1_MODE,x
003D26r 1  8D 23 9F              STA VERA_data0
003D29r 1  BD rr rr              LDA OBJECT_LIST_BYTE2_X,x
003D2Cr 1  8D 23 9F              STA VERA_data0
003D2Fr 1               ;         CMP #216
003D2Fr 1                 ;       LDA #0
003D2Fr 1                ;        BCC :+
003D2Fr 1                ;        LDA #$FF
003D2Fr 1                 ;     : STA VERA_data0
003D2Fr 1  9C 23 9F              STZ VERA_data0
003D32r 1  BD rr rr              LDA OBJECT_LIST_BYTE3_Y,x
003D35r 1  8D 23 9F              STA VERA_data0
003D38r 1               ;         CMP #161
003D38r 1                ;        LDA #0
003D38r 1                 ;       BCC :+
003D38r 1                  ;      LDA #$FF
003D38r 1                   ;   : STA VERA_data0
003D38r 1  9C 23 9F              STZ VERA_data0
003D3Br 1  BD rr rr              LDA OBJECT_LIST_BYTE4_ZFLIPS,x
003D3Er 1  8D 23 9F              STA VERA_data0
003D41r 1  BD rr rr              LDA OBJECT_LIST_BYTE5_SIZE,x
003D44r 1  8D 23 9F              STA VERA_data0
003D47r 1  BD rr rr              LDA OBJECT_LIST_BYTE6_NEXT,x
003D4Ar 1  88                    DEY ; decrement that Y
003D4Br 1  D0 CD                 BNE @OBJ_LOOP ; still sprite slots left.. woot!
003D4Dr 1  92 22                 STA (ZP_PTR) ; oops.. save that last thing and exit..
003D4Fr 1  CE rr rr              DEC VERA_LOCK
003D52r 1  60                    RTS
003D53r 1               
003D53r 1               
003D53r 1               
003D53r 1               test_sprite_data:
003D53r 1               ; first 32 sprites reserved ...
003D53r 1               ;      0   1   2   3   4   5   6  7
003D53r 1               ;     add,mod, XL, XH, YL, YH,msk,hwp
003D53r 1  00 01 00 00  .byte   0,$01,  0,  0,  0,  0,$0C,$00  ; 6 test    sprite 00
003D57r 1  00 00 0C 00  
003D5Br 1  00 01 08 00  .byte   0,$01,  8,  0,  0,  0,$0C,$00  ; 7 test    sprite 01
003D5Fr 1  00 00 0C 00  
003D63r 1  00 01 10 00  .byte   0,$01, 16,  0,  0,  0,$0C,$00  ; 8 test    sprite 02
003D67r 1  00 00 0C 00  
003D6Br 1  00 01 18 00  .byte   0,$01, 24,  0,  0,  0,$0C,$00  ; 9 test    sprite 03
003D6Fr 1  00 00 0C 00  
003D73r 1  00 01 20 00  .byte   0,$01, 32,  0,  0,  0,$0C,$00  ; A test    sprite 04
003D77r 1  00 00 0C 00  
003D7Br 1  00 01 28 00  .byte   0,$01, 40,  0,  0,  0,$0C,$00  ; B test    sprite 05
003D7Fr 1  00 00 0C 00  
003D83r 1  00 01 30 00  .byte   0,$01, 48,  0,  0,  0,$0C,$00  ; C test    sprite 06
003D87r 1  00 00 0C 00  
003D8Br 1  00 01 38 00  .byte   0,$01, 56,  0,  0,  0,$0C,$00  ; D test    sprite 07
003D8Fr 1  00 00 0C 00  
003D93r 1  00 01 00 00  .byte   0,$01,  0,  0,  9,  0,$0C,$00  ; 2 test    sprite 08
003D97r 1  09 00 0C 00  
003D9Br 1  00 01 08 00  .byte   0,$01,  8,  0,  9,  0,$0C,$00  ; 3 test    sprite 09
003D9Fr 1  09 00 0C 00  
003DA3r 1  00 01 10 00  .byte   0,$01, 16,  0,  9,  0,$0C,$00  ; E test    sprite 0A
003DA7r 1  09 00 0C 00  
003DABr 1  00 01 18 00  .byte   0,$01, 24,  0,  9,  0,$0C,$00  ; E test    sprite 0B
003DAFr 1  09 00 0C 00  
003DB3r 1  00 01 20 00  .byte   0,$01, 32,  0,  9,  0,$0C,$00  ; 4 test    sprite 0C
003DB7r 1  09 00 0C 00  
003DBBr 1  00 01 28 00  .byte   0,$01, 40,  0,  9,  0,$0C,$00  ; 5 test    sprite 0D
003DBFr 1  09 00 0C 00  
003DC3r 1  00 01 30 00  .byte   0,$01, 48,  0,  9,  0,$0C,$00  ; F test    sprite 0E
003DC7r 1  09 00 0C 00  
003DCBr 1  00 01 38 00  .byte   0,$01, 56,  0,  9,  0,$0C,$00  ; F test    sprite 0F
003DCFr 1  09 00 0C 00  
003DD3r 1  00 01 00 00  .byte   0,$01,  0,  0, 18,  0,$0C,$00  ; 6 test    sprite 10
003DD7r 1  12 00 0C 00  
003DDBr 1  00 01 08 00  .byte   0,$01,  8,  0, 18,  0,$0C,$00  ; 7 test    sprite 11
003DDFr 1  12 00 0C 00  
003DE3r 1  00 01 10 00  .byte   0,$01, 16,  0, 18,  0,$0C,$00  ; 8 test    sprite 12
003DE7r 1  12 00 0C 00  
003DEBr 1  00 01 18 00  .byte   0,$01, 24,  0, 18,  0,$0C,$00  ; 9 test    sprite 13
003DEFr 1  12 00 0C 00  
003DF3r 1  00 01 20 00  .byte   0,$01, 32,  0, 18,  0,$0C,$00  ; A test    sprite 14
003DF7r 1  12 00 0C 00  
003DFBr 1  00 01 28 00  .byte   0,$01, 40,  0, 18,  0,$0C,$00  ; B test    sprite 15
003DFFr 1  12 00 0C 00  
003E03r 1  00 01 30 00  .byte   0,$01, 48,  0, 18,  0,$0C,$00  ; C test    sprite 16
003E07r 1  12 00 0C 00  
003E0Br 1  00 01 38 00  .byte   0,$01, 56,  0, 18,  0,$0C,$00  ; D test    sprite 17
003E0Fr 1  12 00 0C 00  
003E13r 1  00 01 00 00  .byte   0,$01,  0,  0, 27,  0,$0C,$00  ; 2 test    sprite 18
003E17r 1  1B 00 0C 00  
003E1Br 1  00 01 08 00  .byte   0,$01,  8,  0, 27,  0,$0C,$00  ; 3 test    sprite 19
003E1Fr 1  1B 00 0C 00  
003E23r 1  00 01 10 00  .byte   0,$01, 16,  0, 27,  0,$0C,$00  ; E test    sprite 1A
003E27r 1  1B 00 0C 00  
003E2Br 1  00 01 18 00  .byte   0,$01, 24,  0, 27,  0,$0C,$00  ; E test    sprite 1B
003E2Fr 1  1B 00 0C 00  
003E33r 1  00 01 20 00  .byte   0,$01, 32,  0, 27,  0,$0C,$00  ; 4 test    sprite 1C
003E37r 1  1B 00 0C 00  
003E3Br 1  00 01 28 00  .byte   0,$01, 40,  0, 27,  0,$0C,$00  ; 5 test    sprite 1D
003E3Fr 1  1B 00 0C 00  
003E43r 1  00 01 30 00  .byte   0,$01, 48,  0, 27,  0,$0C,$00  ; F test    sprite 1E
003E47r 1  1B 00 0C 00  
003E4Br 1  00 01 38 00  .byte   0,$01, 56,  0, 27,  0,$0C,$00  ; F test    sprite 1F
003E4Fr 1  1B 00 0C 00  
003E53r 1               
003E53r 1               test_optimal_pal_data:
003E53r 1               ;      GB   R  $1:FA00-$1:FBFF   VERA Color Palette (256 x 2 bytes)
003E53r 1  00 00        .byte $00,$00  ; 0 - black/transparent
003E55r 1  C8 0F        .byte $c8,$0f  ; 1 #ffcc88
003E57r 1               
003E57r 1  04 06        .byte $04,$06  ; 2 #660044
003E59r 1  00 0C        .byte $00,$0C  ; 3  #cc0000
003E5Br 1  F0 0C        .byte $F0,$0C  ; 4#ccff00
003E5Dr 1  42 03        .byte $42,$03
003E5Fr 1  60 0C        .byte $60,$0c   ; 6  #cc6600
003E61r 1  40 08        .byte $40,$08   ; 7 #884400
003E63r 1  C0 0C        .byte $c0,$0c   ; 8 #cccc00
003E65r 1  6A 02        .byte $6a,$02   ; 9 #2266aa mid blue
003E67r 1  C0 00        .byte $c0,$00   ; A #00cc00
003E69r 1  AC 07        .byte $ac,$07   ; B #77aacc light blue
003E6Br 1  C0 00        .byte $c0,$00   ; C #0000c0 dark blue
003E6Dr 1  0C 0C        .byte $0c,$0c   ; D #cc00cc
003E6Fr 1  88 08        .byte $88,$08   ; E #888888
003E71r 1  22 02        .byte $22,$02   ; F #222222
003E73r 1               
003E73r 1               test_vram_data:
003E73r 1               ; 70 to 127 - start of 16x16 (each 128 byte) for testing directions / sizing..
003E73r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11  ;  0-15 16x10 -  0
003E77r 1  11 11 11 11  
003E7Br 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
003E7Fr 1  FF FF FF F1  
003E83r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
003E87r 1  FF FF FF F1  
003E8Br 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
003E8Fr 1  FF FF FF F1  
003E93r 1  1F FF FF F1  .byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$F1
003E97r 1  FF FF FF F1  
003E9Br 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
003E9Fr 1  FF FF FF F1  
003EA3r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
003EA7r 1  FF FF FF F1  
003EABr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
003EAFr 1  FF FF FF F1  
003EB3r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
003EB7r 1  FF FF FF F1  
003EBBr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11
003EBFr 1  11 11 11 11  
003EC3r 1  55 55 55 55  .repeat 54
003EC7r 1  55 55 55 55  
003ECBr 1  55 55 55 55  
004073r 1               .res 8,$55
004073r 1               .endrepeat
004073r 1               
004073r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11  ;  16-31    16x10 -  0 trans
004077r 1  11 11 11 11  
00407Br 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
00407Fr 1  F0 F0 F0 F1  
004083r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
004087r 1  0F 0F 0F 01  
00408Br 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
00408Fr 1  F0 F0 F0 F1  
004093r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
004097r 1  0F 0F 0F 01  
00409Br 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
00409Fr 1  F0 F0 F0 F1  
0040A3r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
0040A7r 1  0F 0F 0F 01  
0040ABr 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0040AFr 1  F0 F0 F0 F1  
0040B3r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
0040B7r 1  0F 0F 0F 01  
0040BBr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11
0040BFr 1  11 11 11 11  
0040C3r 1  50 50 50 50  .repeat 27
0040C7r 1  50 50 50 50  
0040CBr 1  05 05 05 05  
004273r 1               .res 8,$50
004273r 1               .res 8,$05
004273r 1               .endrepeat
004273r 1               
004273r 1               
004273r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11  ;  32-47    16x11 -  4
004277r 1  11 11 11 11  
00427Br 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
00427Fr 1  FF FF FF F1  
004283r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
004287r 1  FF FF FF F1  
00428Br 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
00428Fr 1  FF FF FF F1  
004293r 1  1F FF FF F1  .byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$F1
004297r 1  FF FF FF F1  
00429Br 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
00429Fr 1  FF FF FF F1  
0042A3r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0042A7r 1  FF FF FF F1  
0042ABr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0042AFr 1  FF FF FF F1  
0042B3r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
0042B7r 1  FF FF FF F1  
0042BBr 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
0042BFr 1  FF FF FF F1  
0042C3r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11
0042C7r 1  11 11 11 11  
0042CBr 1  55 55 55 55  .repeat 53
0042CFr 1  55 55 55 55  
0042D3r 1  55 55 55 55  
004473r 1               .res 8,$55
004473r 1               .endrepeat
004473r 1               
004473r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11  ;  48-63    16x11 -  4 trans
004477r 1  11 11 11 11  
00447Br 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
00447Fr 1  F0 F0 F0 F1  
004483r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
004487r 1  0F 0F 0F 01  
00448Br 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
00448Fr 1  F0 F0 F0 F1  
004493r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
004497r 1  0F 0F 0F 01  
00449Br 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
00449Fr 1  F0 F0 F0 F1  
0044A3r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
0044A7r 1  0F 0F 0F 01  
0044ABr 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0044AFr 1  F0 F0 F0 F1  
0044B3r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
0044B7r 1  0F 0F 0F 01  
0044BBr 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0044BFr 1  F0 F0 F0 F1  
0044C3r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11
0044C7r 1  11 11 11 11  
0044CBr 1  05 05 05 05  .res 7,$05
0044CFr 1  05 05 05     
0044D2r 1  00           .byte 0
0044D3r 1  50 50 50 50  .repeat 26
0044D7r 1  50 50 50 50  
0044DBr 1  05 05 05 05  
004673r 1               .res 8,$50
004673r 1               .res 7,$05
004673r 1               .byte 0
004673r 1               .endrepeat
004673r 1               
004673r 1               
004673r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10  ;  64-79    15x11 - 10
004677r 1  11 11 11 10  
00467Br 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
00467Fr 1  FF FF FF 10  
004683r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
004687r 1  FF FF FF 10  
00468Br 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
00468Fr 1  FF FF FF 10  
004693r 1  1F FF FF F1  .byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$10
004697r 1  FF FF FF 10  
00469Br 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
00469Fr 1  FF FF FF 10  
0046A3r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
0046A7r 1  FF FF FF 10  
0046ABr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
0046AFr 1  FF FF FF 10  
0046B3r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
0046B7r 1  FF FF FF 10  
0046BBr 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
0046BFr 1  FF FF FF 10  
0046C3r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
0046C7r 1  11 11 11 10  
0046CBr 1  55 55 55 55  .repeat 53
0046CFr 1  55 55 55 50  
0046D3r 1  55 55 55 55  
004873r 1               .res 7,$55
004873r 1               .byte $50
004873r 1               .endrepeat
004873r 1               
004873r 1               
004873r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10  ;  80-95    15x11 - 10 trans
004877r 1  11 11 11 10  
00487Br 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
00487Fr 1  F0 F0 F0 10  
004883r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
004887r 1  0F 0F 0F 10  
00488Br 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
00488Fr 1  F0 F0 F0 10  
004893r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
004897r 1  0F 0F 0F 10  
00489Br 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
00489Fr 1  F0 F0 F0 10  
0048A3r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0048A7r 1  0F 0F 0F 10  
0048ABr 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0048AFr 1  F0 F0 F0 10  
0048B3r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0048B7r 1  0F 0F 0F 10  
0048BBr 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0048BFr 1  F0 F0 F0 10  
0048C3r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
0048C7r 1  11 11 11 10  
0048CBr 1  05 05 05 05  .res 7,$05
0048CFr 1  05 05 05     
0048D2r 1  00           .byte 0
0048D3r 1  50 50 50 50  .repeat 26
0048D7r 1  50 50 50 50  
0048DBr 1  05 05 05 05  
004A73r 1               .res 8,$50
004A73r 1               .res 7,$05
004A73r 1               .byte 0
004A73r 1               .endrepeat
004A73r 1               
004A73r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10  ;  96-111    15x12 - 18
004A77r 1  11 11 11 10  
004A7Br 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
004A7Fr 1  FF FF FF 10  
004A83r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
004A87r 1  FF FF FF 10  
004A8Br 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
004A8Fr 1  FF FF FF 10  
004A93r 1  1F FF FF F1  .byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$10
004A97r 1  FF FF FF 10  
004A9Br 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
004A9Fr 1  FF FF FF 10  
004AA3r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
004AA7r 1  FF FF FF 10  
004AABr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
004AAFr 1  FF FF FF 10  
004AB3r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
004AB7r 1  FF FF FF 10  
004ABBr 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
004ABFr 1  FF FF FF 10  
004AC3r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
004AC7r 1  FF FF FF 10  
004ACBr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
004ACFr 1  11 11 11 10  
004AD3r 1  55 55 55 55  .repeat 52
004AD7r 1  55 55 55 50  
004ADBr 1  55 55 55 55  
004C73r 1               .res 7,$55
004C73r 1               .byte $50
004C73r 1               .endrepeat
004C73r 1               
004C73r 1               
004C73r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10  ;  112-127    15x12 - 18 trans
004C77r 1  11 11 11 10  
004C7Br 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
004C7Fr 1  F0 F0 F0 10  
004C83r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
004C87r 1  0F 0F 0F 10  
004C8Br 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
004C8Fr 1  F0 F0 F0 10  
004C93r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
004C97r 1  0F 0F 0F 10  
004C9Br 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
004C9Fr 1  F0 F0 F0 10  
004CA3r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
004CA7r 1  0F 0F 0F 10  
004CABr 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
004CAFr 1  F0 F0 F0 10  
004CB3r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
004CB7r 1  0F 0F 0F 10  
004CBBr 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
004CBFr 1  F0 F0 F0 10  
004CC3r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
004CC7r 1  0F 0F 0F 10  
004CCBr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
004CCFr 1  11 11 11 10  
004CD3r 1  50 50 50 50  .repeat 26
004CD7r 1  50 50 50 50  
004CDBr 1  05 05 05 05  
004E73r 1               .res 8,$50
004E73r 1               .res 7,$05
004E73r 1               .byte 0
004E73r 1               .endrepeat
004E73r 1               
004E73r 1               ; alernate tile graphic to use for tub wall .. 128-143 ; 16x tile
004E73r 1  16 16 16 16  .repeat 32
004E77r 1  16 16 16 16  
004E7Br 1  61 61 61 61  
005073r 1                   .byte $16, $16, $16, $16, $16, $16, $16, $16
005073r 1                   .byte $61, $61, $61, $61, $61, $61, $61, $61
005073r 1               .endrepeat
005073r 1               
005073r 1  10 10 10 10  .repeat 32  ;  144-159
005077r 1  10 10 10 10  
00507Br 1  06 06 06 06  
005273r 1                   .byte $10, $10, $10, $10, $10, $10, $10, $10
005273r 1                   .byte $06, $06, $06, $06, $06, $06, $06, $06
005273r 1               .endrepeat
005273r 1               
005273r 1               
005273r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$00  ;  160-175    14x12
005277r 1  11 11 11 00  
00527Br 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$fF,$FF,$F1,$00
00527Fr 1  FF FF F1 00  
005283r 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$fF,$FF,$F1,$00
005287r 1  FF FF F1 00  
00528Br 1  1F FF FF FF  .byte $1f,$FF,$ff,$Ff,$Ff,$fF,$F1,$00
00528Fr 1  FF FF F1 00  
005293r 1  1F FF FF F1  .byte $1f,$FF,$FF,$f1,$fF,$FF,$F1,$00
005297r 1  FF FF F1 00  
00529Br 1  1F FF FF FF  .byte $1f,$FF,$FF,$Ff,$Ff,$fF,$F1,$00
00529Fr 1  FF FF F1 00  
0052A3r 1  1F FF FF FF  .byte $1f,$FF,$FF,$fF,$FF,$FF,$F1,$00
0052A7r 1  FF FF F1 00  
0052ABr 1  1F FF FF FF  .byte $1f,$FF,$FF,$fF,$FF,$FF,$F1,$00
0052AFr 1  FF FF F1 00  
0052B3r 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$FF,$FF,$F1,$00
0052B7r 1  FF FF F1 00  
0052BBr 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$FF,$FF,$F1,$00
0052BFr 1  FF FF F1 00  
0052C3r 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$FF,$FF,$F1,$00
0052C7r 1  FF FF F1 00  
0052CBr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$00
0052CFr 1  11 11 11 00  
0052D3r 1  55 55 55 55  .repeat 52
0052D7r 1  55 55 55 00  
0052DBr 1  55 55 55 55  
005473r 1               .res 7,$55
005473r 1               .byte 0
005473r 1               .endrepeat
005473r 1               
005473r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$00  ;  176-191
005477r 1  11 11 11 00  
00547Br 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
00547Fr 1  F0 F0 F0 10  
005483r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
005487r 1  0F 0F 0F 10  
00548Br 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
00548Fr 1  F0 F0 F0 10  
005493r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
005497r 1  0F 0F 0F 10  
00549Br 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
00549Fr 1  F0 F0 F0 10  
0054A3r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0054A7r 1  0F 0F 0F 10  
0054ABr 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0054AFr 1  F0 F0 F0 10  
0054B3r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0054B7r 1  0F 0F 0F 10  
0054BBr 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0054BFr 1  F0 F0 F0 10  
0054C3r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0054C7r 1  0F 0F 0F 10  
0054CBr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
0054CFr 1  11 11 11 10  
0054D3r 1  50 50 50 50  .repeat 26
0054D7r 1  50 50 50 50  
0054DBr 1  05 05 05 05  
005673r 1               .res 8,$50
005673r 1               .res 7,$05
005673r 1               .byte 0
005673r 1               .endrepeat
005673r 1               
005673r 1               ; alernate tile graphic to use for tub wall .. 192-223 ; 15x tile
005673r 1  16 16 16 16  .repeat 32
005677r 1  16 16 16 10  
00567Br 1  61 61 61 61  
005873r 1                   .byte $16, $16, $16, $16, $16, $16, $16, $10
005873r 1                   .byte $61, $61, $61, $61, $61, $61, $61, $60
005873r 1               .endrepeat
005873r 1               
005873r 1  10 10 10 10  .repeat 32  ;  144-159
005877r 1  10 10 10 10  
00587Br 1  06 06 06 06  
005A73r 1                   .byte $10, $10, $10, $10, $10, $10, $10, $10
005A73r 1                   .byte $06, $06, $06, $06, $06, $06, $06, $00
005A73r 1               .endrepeat
005A73r 1               
005A73r 1               
005A73r 1               ; alernate tile graphic to use for tub wall .. 224 ; 14x tile
005A73r 1  16 16 16 16  .repeat 32
005A77r 1  16 16 16 00  
005A7Br 1  61 61 61 61  
005C73r 1                   .byte $16, $16, $16, $16, $16, $16, $16, $00
005C73r 1                   .byte $61, $61, $61, $61, $61, $61, $61, $00
005C73r 1               .endrepeat
005C73r 1               
005C73r 1  10 10 10 10  .repeat 32  ;  144-159
005C77r 1  10 10 10 00  
005C7Br 1  06 06 06 06  
005E73r 1                   .byte $10, $10, $10, $10, $10, $10, $10, $00
005E73r 1                   .byte $06, $06, $06, $06, $06, $06, $06, $00
005E73r 1               .endrepeat
005E73r 1               
005E73r 1               
005E73r 1               
005E73r 1               HEX_DISPLAY_FONT:       ; 8x8x16 color = 32 bytes ... sprite addr 256
005E73r 1               ;     01   23   45   67
005E73r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 0
005E77r 1  01 00 00 10  .byte $01, $00, $00, $10
005E7Br 1  01 00 00 10  .byte $01, $00, $00, $10
005E7Fr 1  00 00 00 00  .byte $00, $00, $00, $00
005E83r 1  01 00 00 10  .byte $01, $00, $00, $10
005E87r 1  01 00 00 10  .byte $01, $00, $00, $10
005E8Br 1  01 00 00 10  .byte $01, $00, $00, $10
005E8Fr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 0 /
005E93r 1               
005E93r 1  00 00 00 00  .byte $00, $00, $00, $00 ; 1
005E97r 1  00 00 00 10  .byte $00, $00, $00, $10
005E9Br 1  00 00 00 10  .byte $00, $00, $00, $10
005E9Fr 1  00 00 00 00  .byte $00, $00, $00, $00
005EA3r 1  00 00 00 10  .byte $00, $00, $00, $10
005EA7r 1  00 00 00 10  .byte $00, $00, $00, $10
005EABr 1  00 00 00 10  .byte $00, $00, $00, $10
005EAFr 1  00 00 00 00  .byte $00, $00, $00, $00
005EB3r 1               
005EB3r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 2
005EB7r 1  00 00 00 10  .byte $00, $00, $00, $10
005EBBr 1  00 00 00 10  .byte $00, $00, $00, $10
005EBFr 1  00 11 11 00  .byte $00, $11, $11, $00
005EC3r 1  01 00 00 00  .byte $01, $00, $00, $00
005EC7r 1  01 00 00 00  .byte $01, $00, $00, $00
005ECBr 1  01 00 00 00  .byte $01, $00, $00, $00
005ECFr 1  00 11 11 00  .byte $00, $11, $11, $00
005ED3r 1               
005ED3r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 3
005ED7r 1  00 00 00 10  .byte $00, $00, $00, $10
005EDBr 1  00 00 00 10  .byte $00, $00, $00, $10
005EDFr 1  00 11 11 00  .byte $00, $11, $11, $00
005EE3r 1  00 00 00 10  .byte $00, $00, $00, $10
005EE7r 1  00 00 00 10  .byte $00, $00, $00, $10
005EEBr 1  00 00 00 10  .byte $00, $00, $00, $10
005EEFr 1  00 11 11 00  .byte $00, $11, $11, $00
005EF3r 1               
005EF3r 1  00 00 00 00  .byte $00, $00, $00, $00   ; 4
005EF7r 1  01 00 00 10  .byte $01, $00, $00, $10
005EFBr 1  01 00 00 10  .byte $01, $00, $00, $10
005EFFr 1  00 11 11 00  .byte $00, $11, $11, $00
005F03r 1  00 00 00 10  .byte $00, $00, $00, $10
005F07r 1  00 00 00 10  .byte $00, $00, $00, $10
005F0Br 1  00 00 00 10  .byte $00, $00, $00, $10
005F0Fr 1  00 00 00 00  .byte $00, $00, $00, $00
005F13r 1               
005F13r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 5
005F17r 1  01 00 00 00  .byte $01, $00, $00, $00
005F1Br 1  01 00 00 00  .byte $01, $00, $00, $00
005F1Fr 1  00 11 11 00  .byte $00, $11, $11, $00
005F23r 1  00 00 00 10  .byte $00, $00, $00, $10
005F27r 1  00 00 00 10  .byte $00, $00, $00, $10
005F2Br 1  00 00 00 10  .byte $00, $00, $00, $10
005F2Fr 1  00 11 11 00  .byte $00, $11, $11, $00
005F33r 1               
005F33r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 6
005F37r 1  01 00 00 00  .byte $01, $00, $00, $00
005F3Br 1  01 00 00 00  .byte $01, $00, $00, $00
005F3Fr 1  00 11 11 00  .byte $00, $11, $11, $00
005F43r 1  01 00 00 10  .byte $01, $00, $00, $10
005F47r 1  01 00 00 10  .byte $01, $00, $00, $10
005F4Br 1  01 00 00 10  .byte $01, $00, $00, $10
005F4Fr 1  00 11 11 00  .byte $00, $11, $11, $00
005F53r 1               
005F53r 1  00 01 01 00  .byte $00, $01, $01, $00 ; 7
005F57r 1  00 00 00 10  .byte $00, $00, $00, $10
005F5Br 1  00 00 00 10  .byte $00, $00, $00, $10
005F5Fr 1  00 00 00 00  .byte $00, $00, $00, $00
005F63r 1  00 00 00 10  .byte $00, $00, $00, $10
005F67r 1  00 00 00 10  .byte $00, $00, $00, $10
005F6Br 1  00 00 00 10  .byte $00, $00, $00, $10
005F6Fr 1  00 00 00 00  .byte $00, $00, $00, $00
005F73r 1               
005F73r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 8
005F77r 1  01 00 00 10  .byte $01, $00, $00, $10
005F7Br 1  01 00 00 10  .byte $01, $00, $00, $10
005F7Fr 1  00 11 11 00  .byte $00, $11, $11, $00
005F83r 1  01 00 00 10  .byte $01, $00, $00, $10
005F87r 1  01 00 00 10  .byte $01, $00, $00, $10
005F8Br 1  01 00 00 10  .byte $01, $00, $00, $10
005F8Fr 1  00 11 11 00  .byte $00, $11, $11, $00
005F93r 1               
005F93r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 9
005F97r 1  01 00 00 10  .byte $01, $00, $00, $10
005F9Br 1  01 00 00 10  .byte $01, $00, $00, $10
005F9Fr 1  00 11 11 00  .byte $00, $11, $11, $00
005FA3r 1  00 00 00 10  .byte $00, $00, $00, $10
005FA7r 1  00 00 00 10  .byte $00, $00, $00, $10
005FABr 1  00 00 00 10  .byte $00, $00, $00, $10
005FAFr 1  00 11 11 00  .byte $00, $11, $11, $00
005FB3r 1               
005FB3r 1  00 11 11 00  .byte $00, $11, $11, $00   ; A
005FB7r 1  01 00 00 10  .byte $01, $00, $00, $10
005FBBr 1  01 00 00 10  .byte $01, $00, $00, $10
005FBFr 1  00 11 11 00  .byte $00, $11, $11, $00
005FC3r 1  01 00 00 10  .byte $01, $00, $00, $10
005FC7r 1  01 00 00 10  .byte $01, $00, $00, $10
005FCBr 1  01 00 00 10  .byte $01, $00, $00, $10
005FCFr 1  00 00 00 00  .byte $00, $00, $00, $00
005FD3r 1               
005FD3r 1               
005FD3r 1  00 00 00 00  .byte $00, $00, $00, $00   ; B
005FD7r 1  01 00 00 00  .byte $01, $00, $00, $00
005FDBr 1  01 00 00 00  .byte $01, $00, $00, $00
005FDFr 1  00 11 11 00  .byte $00, $11, $11, $00
005FE3r 1  01 00 00 10  .byte $01, $00, $00, $10
005FE7r 1  01 00 00 10  .byte $01, $00, $00, $10
005FEBr 1  01 00 00 10  .byte $01, $00, $00, $10
005FEFr 1  00 11 11 00  .byte $00, $11, $11, $00
005FF3r 1               
005FF3r 1  00 11 11 00  .byte $00, $11, $11, $00   ; C
005FF7r 1  01 00 00 00  .byte $01, $00, $00, $00
005FFBr 1  01 00 00 00  .byte $01, $00, $00, $00
005FFFr 1  00 00 00 00  .byte $00, $00, $00, $00
006003r 1  01 00 00 00  .byte $01, $00, $00, $00
006007r 1  01 00 00 00  .byte $01, $00, $00, $00
00600Br 1  01 00 00 00  .byte $01, $00, $00, $00
00600Fr 1  00 11 11 00  .byte $00, $11, $11, $00
006013r 1               
006013r 1  00 00 00 00  .byte $00, $00, $00, $00   ; D
006017r 1  00 00 00 10  .byte $00, $00, $00, $10
00601Br 1  00 00 00 10  .byte $00, $00, $00, $10
00601Fr 1  00 11 11 00  .byte $00, $11, $11, $00
006023r 1  01 00 00 10  .byte $01, $00, $00, $10
006027r 1  01 00 00 10  .byte $01, $00, $00, $10
00602Br 1  01 00 00 10  .byte $01, $00, $00, $10
00602Fr 1  00 11 11 00  .byte $00, $11, $11, $00
006033r 1               
006033r 1  00 11 11 00  .byte $00, $11, $11, $00   ; E
006037r 1  01 00 00 00  .byte $01, $00, $00, $00
00603Br 1  01 00 00 00  .byte $01, $00, $00, $00
00603Fr 1  00 11 11 00  .byte $00, $11, $11, $00
006043r 1  01 00 00 00  .byte $01, $00, $00, $00
006047r 1  01 00 00 00  .byte $01, $00, $00, $00
00604Br 1  01 00 00 00  .byte $01, $00, $00, $00
00604Fr 1  00 11 11 00  .byte $00, $11, $11, $00
006053r 1               
006053r 1  00 11 11 00  .byte $00, $11, $11, $00   ; F   sprite addr 48
006057r 1  01 00 00 00  .byte $01, $00, $00, $00
00605Br 1  01 00 00 00  .byte $01, $00, $00, $00
00605Fr 1  00 11 11 00  .byte $00, $11, $11, $00
006063r 1  01 00 00 00  .byte $01, $00, $00, $00
006067r 1  01 00 00 00  .byte $01, $00, $00, $00
00606Br 1  01 00 00 00  .byte $01, $00, $00, $00
00606Fr 1  00 00 00 00  .byte $00, $00, $00, $00
006073r 1               
006073r 1               test_cell_sprite:    ;  is 16x64x16 bit = 512 bytes   sprite addr = 10
006073r 1               ;     01   23   45   67   89   AB   CD   EF
006073r 1  CC C9 CC C9  .byte $CC, $C9, $CC, $C9, $CC, $C9, $CC, $C0    ;  0
006077r 1  CC C9 CC C0  
00607Br 1  09 9B 99 9B  .byte $09, $9B, $99, $9B, $99, $9B, $99, $9C    ;  1
00607Fr 1  99 9B 99 9C  
006083r 1  CB BC BB BC  .byte $CB, $BC, $BB, $BC, $BB, $BC, $BB, $B0    ;  2
006087r 1  BB BC BB B0  
00608Br 1  0C C9 CC C9  .byte $0C, $C9, $CC, $C9, $CC, $C9, $CC, $CC    ;  3
00608Fr 1  CC C9 CC CC  
006093r 1  C9 9B 99 9B  .byte $C9, $9B, $99, $9B, $99, $9B, $99, $90    ;  4
006097r 1  99 9B 99 90  
00609Br 1  0B BC BB BC  .byte $0B, $BC, $BB, $BC, $BB, $BC, $BB, $BC    ;  5
00609Fr 1  BB BC BB BC  
0060A3r 1  CC C9 CC C9  .byte $CC, $C9, $CC, $C9, $CC, $C9, $CC, $C0    ;  6
0060A7r 1  CC C9 CC C0  
0060ABr 1  09 9B 99 9B  .byte $09, $9B, $99, $9B, $99, $9B, $99, $9C    ;  7
0060AFr 1  99 9B 99 9C  
0060B3r 1  CB BC BB BC  .byte $CB, $BC, $BB, $BC, $BB, $BC, $BB, $B0    ;  8 ; 45* is 9.5 ..
0060B7r 1  BB BC BB B0  
0060BBr 1  0C 09 0C 09  .byte $0C, $09, $0C, $09, $0C, $09, $0C, $0C    ;  9
0060BFr 1  0C 09 0C 0C  
0060C3r 1  09 90 09 90  .byte $09, $90, $09, $90, $09, $90, $09, $90   ;  10
0060C7r 1  09 90 09 90  
0060CBr 1  0E 9E E9 9E  .byte $0E, $9E, $E9, $9E, $E9, $9E, $E9, $9E   ;  11
0060CFr 1  E9 9E E9 9E  
0060D3r 1               
0060D3r 1  EE EE EE EE  .repeat 13
0060D7r 1  EE EE EE E0  
0060DBr 1  0E EE 66 EE  
006273r 1                   .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $E0    ;  12
006273r 1                   .byte $0E, $EE, $66, $EE, $EE, $66, $EE, $EE    ;
006273r 1                   .byte $EE, $66, $EE, $66, $66, $EE, $66, $E0    ;
006273r 1                   .byte $06, $EE, $EE, $EE, $EE, $EE, $EE, $66    ;
006273r 1               .endrepeat
006273r 1               
006273r 1               test_border: ; 32
006273r 1  0B 0B 0B 0B  .repeat 64
006277r 1  B0 B0 B0 B0  
00627Br 1  0B 0B 0B 0B  
006473r 1                  .res 4, $0B
006473r 1                  .res 4, $B0
006473r 1               .endrepeat
006473r 1               
006473r 1               test_cross_hair_8x8:    ;  8x8x16 color = 32 bytes ; sprite 96
006473r 1               ;     01   23   45   67
006473r 1  11 00 00 11  .byte $11, $00, $00, $11
006477r 1  10 00 00 01  .byte $10, $00, $00, $01
00647Br 1  00 00 00 00  .byte $00, $00, $00, $00
00647Fr 1  00 01 10 00  .byte $00, $01, $10, $00
006483r 1  00 01 10 00  .byte $00, $01, $10, $00
006487r 1  00 00 00 00  .byte $00, $00, $00, $00
00648Br 1  10 00 00 01  .byte $10, $00, $00, $01
00648Fr 1  11 00 00 11  .byte $11, $00, $00, $11
006493r 1               
006493r 1  00 00 00 00  .byte $00, $00, $00, $00  ;  bearing label   sprite addr 97
006497r 1  00 00 01 00  .byte $00, $00, $01, $00
00649Br 1  00 00 10 00  .byte $00, $00, $10, $00
00649Fr 1  00 01 00 00  .byte $00, $01, $00, $00
0064A3r 1  00 10 00 00  .byte $00, $10, $00, $00
0064A7r 1  01 00 00 00  .byte $01, $00, $00, $00
0064ABr 1  11 11 11 00  .byte $11, $11, $11, $00
0064AFr 1  00 00 00 00  .byte $00, $00, $00, $00
0064B3r 1               
0064B3r 1               ; cell position label sprite addr 50-57
0064B3r 1  00 FF 00 FF  .byte $00,$FF,$00,$FF,$FF,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0064B7r 1  FF 00 FF 00  
0064BBr 1  00 FF 00 00  
0064D3r 1  FF 00 00 FF  .byte $FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0064D7r 1  00 00 FF 00  
0064DBr 1  00 FF 00 00  
0064F3r 1  FF 00 00 FF  .byte $FF,$00,$00,$FF,$FF,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0064F7r 1  FF 00 FF 00  
0064FBr 1  00 FF 00 00  
006513r 1  FF 00 00 FF  .byte $FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
006517r 1  00 00 FF 00  
00651Br 1  00 FF 00 00  
006533r 1  00 FF 00 FF  .byte $00,$FF,$00,$FF,$FF,$00,$FF,$FF,$00,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
006537r 1  FF 00 FF FF  
00653Br 1  00 FF FF 00  
006553r 1               ;      01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF
006553r 1               ;     XH                               $XL                            ___  __  YH                              YL
006553r 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$00,$00,$10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00
006557r 1  00 00 00 00  
00655Br 1  10 10 10 00  
006573r 1  01 00 11 10  .byte $01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00
006577r 1  00 00 00 00  
00657Br 1  01 00 10 00  
006593r 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$11,$10,$00,$00,$00,$00,$00,$00,$01,$00,$10,$10,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00
006597r 1  00 00 00 00  
00659Br 1  10 10 11 10  
0065B3r 1               
0065B3r 1               ; world position label 58-65
0065B3r 1               ;     XH                 $XL                  ___  ___  YH                  YL
0065B3r 1  FF 00 00 00  .byte $FF,$00,$00,$00,$FF,$00,$00,$FF,$00,$00,$FF,$FF,$00,$00,$FF,$00,$00,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0065B7r 1  FF 00 00 FF  
0065BBr 1  00 00 FF FF  
0065D3r 1  FF 00 00 00  .byte $FF,$00,$00,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$00,$FF,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0065D7r 1  FF 00 FF 00  
0065DBr 1  FF 00 FF 00  
0065F3r 1  FF 00 FF 00  .byte $FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$FF,$00,$00,$FF,$00,$00,$FF,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0065F7r 1  FF 00 FF 00  
0065FBr 1  FF 00 FF FF  
006613r 1  FF 00 FF 00  .byte $FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$00,$FF,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
006617r 1  FF 00 FF 00  
00661Br 1  FF 00 FF 00  
006633r 1  00 FF 00 FF  .byte $00,$FF,$00,$FF,$00,$00,$00,$FF,$00,$00,$FF,$00,$FF,$00,$FF,$FF,$00,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
006637r 1  00 00 00 FF  
00663Br 1  00 00 FF 00  
006653r 1               ;      01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF
006653r 1               ;     XH                               $XL                            ___  __  YH                              YL
006653r 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$00,$00,$10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00
006657r 1  00 00 00 00  
00665Br 1  10 10 10 00  
006673r 1  01 00 11 10  .byte $01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00
006677r 1  00 00 00 00  
00667Br 1  01 00 10 00  
006693r 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$11,$10,$00,$00,$00,$00,$00,$00,$01,$00,$10,$10,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00
006697r 1  00 00 00 00  
00669Br 1  10 10 11 10  
0066B3r 1               
0066B3r 1               ; directional cursor reminder... 16x16 - 66-69
0066B3r 1  00 10 00 10  .byte $00, $10, $00, $10, $01, $11, $11, $00
0066B7r 1  01 11 11 00  
0066BBr 1  00 10 00 10  .byte $00, $10, $00, $10, $01, $00, $00, $00
0066BFr 1  01 00 00 00  
0066C3r 1  00 10 10 10  .byte $00, $10, $10, $10, $01, $11, $00, $00
0066C7r 1  01 11 00 00  
0066CBr 1  00 10 10 10  .byte $00, $10, $10, $10, $01, $00, $00, $00
0066CFr 1  01 00 00 00  
0066D3r 1  00 01 01 00  .byte $00, $01, $01, $00, $01, $11, $11, $00
0066D7r 1  01 11 11 00  
0066DBr 1  00 00 00 00  .byte $00, $00, $00, $00, $00, $00, $00, $00
0066DFr 1  00 00 00 00  
0066E3r 1  01 11 00 00  .byte $01, $11, $00, $00, $00, $01, $11, $00
0066E7r 1  00 01 11 00  
0066EBr 1  10 00 10 01  .byte $10, $00, $10, $01, $10, $01, $00, $01
0066EFr 1  10 01 00 01  
0066F3r 1  11 11 10 01  .byte $11, $11, $10, $01, $10, $01, $00, $01
0066F7r 1  10 01 00 01  
0066FBr 1  10 00 10 00  .byte $10, $00, $10, $00, $00, $01, $11, $10
0066FFr 1  00 01 11 10  
006703r 1  00 00 00 00  .byte $00, $00, $00, $00, $00, $00, $00, $00
006707r 1  00 00 00 00  
00670Br 1  00 11 11 10  .byte $00, $11, $11, $10, $01, $00, $01, $00
00670Fr 1  01 00 01 00  
006713r 1  00 00 01 00  .byte $00, $00, $01, $00, $00, $10, $10, $00
006717r 1  00 10 10 00  
00671Br 1  00 00 10 00  .byte $00, $00, $10, $00, $00, $01, $00, $00
00671Fr 1  00 01 00 00  
006723r 1  00 01 00 00  .byte $00, $01, $00, $00, $00, $10, $10, $00
006727r 1  00 10 10 00  
00672Br 1  00 11 11 10  .byte $00, $11, $11, $10, $01, $00, $01, $00
00672Fr 1  01 00 01 00  
006732r 1               
