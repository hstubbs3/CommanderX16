ca65 V2.19 - Git 8e6c0c1
Main file   : hex.s
Current file: hex.s

000000r 1               ; 	080D
000000r 1  4C rr rr     jmp start ; 	3 bytes
000003r 1               ;	0810 	- 240 bytes available for stuff that doesn't need alignment
000003r 1  DE AD BE EF  .repeat 28
000007r 1  DE AD BE EF  
00000Br 1  DE AD BE EF  
000073r 1               	.byte $DE,$AD,$BE,$EF
000073r 1               .endrepeat
000073r 1               SCRATCH128:
000073r 1  DE AD BE EF  .repeat 32
000077r 1  DE AD BE EF  
00007Br 1  DE AD BE EF  
0000F3r 1               	.byte $DE,$AD,$BE,$EF
0000F3r 1               .endrepeat
0000F3r 1               
0000F3r 1               ACROSS_ROW_X_L: ; 0900  16 wide , 45* tilt ... this is added to go up row, sub for down row
0000F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0000F3r 1  00 FE FB F4  .byte
0000F7r 1  EC E1 D3 C3  
0000FBr 1  B1 9C 85 6B  
0001F3r 1               
0001F3r 1               ACROSS_ROW_X_H: ; 0A00
0001F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0001F3r 1  10 0F 0F 0F  .byte $10, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $E, $E, $E, $E, $E, $E, $D, $D, $D, $D, $D, $C, $C, $C, $C, $B, $B, $B, $B, $A, $A, $A, $9, $9, $9, $8, $8, $8, $7, $7, $7, $6, $6, $6, $5, $5, $5, $4, $4, $3, $3, $3, $2, $2, $1, $1, $1, $0, $0, $0, $FF, $FF, $FE, $FE, $FE, $FD, $FD, $FC, $FC, $FC, $FB, $FB, $FA, $FA, $FA, $F9, $F9, $F9, $F8, $F8, $F8, $F7, $F7, $F7, $F6, $F6, $F6, $F5, $F5, $F5, $F4, $F4, $F4, $F4, $F3, $F3, $F3, $F3, $F2, $F2, $F2, $F2, $F2, $F1, $F1, $F1, $F1, $F1, $F1, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F1, $F1, $F1, $F1, $F1, $F1, $F2, $F2, $F2, $F2, $F2, $F3, $F3, $F3, $F3, $F4, $F4, $F4, $F4, $F5, $F5, $F5, $F6, $F6, $F6, $F7, $F7, $F7, $F8, $F8, $F8, $F9, $F9, $F9, $FA, $FA, $FA, $FB, $FB, $FC, $FC, $FC, $FD, $FD, $FE, $FE, $FE, $FF, $FF, $00, $0, $0, $1, $1, $1, $2, $2, $3, $3, $3, $4, $4, $5, $5, $5, $6, $6, $6, $7, $7, $7, $8, $8, $8, $9, $9, $9, $A, $A, $A, $B, $B, $B, $B, $C, $C, $C, $C, $D, $D, $D, $D, $D, $E, $E, $E, $E, $E, $E, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F
0001F7r 1  0F 0F 0F 0F  
0001FBr 1  0F 0F 0F 0F  
0002F3r 1               
0002F3r 1               ACROSS_ROW_Y_L: ; 0B00
0002F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0002F3r 1  00 B8 71 2A  .byte $0,$B8,$71,$2A,$E4,$9D,$57,$10,$CA,$85,$40,$FB,$B7,$73,$30,$ED,$AB,$6A,$29,$E9,$AA,$6C,$2E,$F2,$B6,$7C,$42,$A,$D2,$9C,$66,$32,$0,$CE,$9D,$6E,$41,$14,$E9,$C0,$97,$71,$4B,$27,$5,$E4,$C5,$A8,$8C,$71,$58,$41,$2C,$18,$6,$F6,$E7,$DA,$CF,$C5,$BD,$B7,$B3,$B0,$AF,$B0,$B3,$B7,$BD,$C5,$CF,$DA,$E7,$F6,$6,$18,$2C,$41,$58,$71,$8C,$A8,$C5,$E4,$5,$27,$4B,$71,$97,$C0,$E9,$14,$41,$6E,$9D,$CE,$0,$32,$66,$9C,$D2,$A,$42,$7C,$B6,$F2,$2E,$6C,$AA,$E9,$29,$6A,$AB,$ED,$30,$73,$B7,$FB,$40,$85,$CA,$10,$57,$9D,$E4,$2A,$71,$B8,$0,$47,$8E,$D5,$1B,$62,$A8,$EF,$35,$7A,$BF,$4,$48,$8C,$CF,$12,$54,$95,$D6,$16,$55,$93,$D1,$D,$49,$83,$BD,$F5,$2D,$63,$99,$CD,$0,$31,$62,$91,$BE,$EB,$16,$3F,$68,$8E,$B4,$D8,$FA,$1B,$3A,$57,$73,$8E,$A7,$BE,$D3,$E7,$F9,$9,$18,$25,$30,$3A,$42,$48,$4C,$4F,$50,$4F,$4C,$48,$42,$3A,$30,$25,$18,$9,$F9,$E7,$D3,$BE,$A7,$8E,$73,$57,$3A,$1B,$FA,$D8,$B4,$8E,$68,$3F,$16,$EB,$BE,$91,$62,$31,$0,$CD,$99,$63,$2D,$F5,$BD,$83,$49,$D,$D1,$93,$55,$16,$D6,$95,$54,$12,$CF,$8C,$48,$4,$BF,$7A,$35,$EF,$A8,$62,$1B,$D5,$8E,$47
0002F7r 1  E4 9D 57 10  
0002FBr 1  CA 85 40 FB  
0003F3r 1               
0003F3r 1               ACROSS_ROW_Y_H: ; 0C00
0003F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0003F3r 1  00 FF FF FF  .byte $0,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F9,$F8,$F8,$F8,$F8,$F8,$F7,$F7,$F7,$F7,$F7,$F6,$F6,$F6,$F6,$F6,$F6,$F6,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F6,$F6,$F6,$F6,$F6,$F6,$F6,$F7,$F7,$F7,$F7,$F7,$F8,$F8,$F8,$F8,$F8,$F9,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$00,$0,$0,$0,$1,$1,$1,$1,$2,$2,$2,$3,$3,$3,$3,$4,$4,$4,$4,$5,$5,$5,$5,$6,$6,$6,$6,$6,$7,$7,$7,$7,$8,$8,$8,$8,$8,$8,$9,$9,$9,$9,$9,$9,$9,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$9,$9,$9,$9,$9,$9,$9,$8,$8,$8,$8,$8,$8,$7,$7,$7,$7,$6,$6,$6,$6,$6,$5,$5,$5,$5,$4,$4,$4,$4,$3,$3,$3,$3,$2,$2,$2,$1,$1,$1,$1,$0,$0,$0
0003F7r 1  FE FE FE FE  
0003FBr 1  FD FD FD FC  
0004F3r 1               
0004F3r 1               NEXT_ROW_X_L: ; 0D00 next row LEFT/up when added
0004F3r 1  00 A9 54 00  .byte
0004F7r 1  AE 5D 0D BF  
0004FBr 1  73 28 DF 98  
0005F3r 1               
0005F3r 1               NEXT_ROW_X_H: ; 0E00
0005F3r 1  F8 F7 F7 F7  .byte
0005F7r 1  F6 F6 F6 F5  
0005FBr 1  F5 F5 F4 F4  
0006F3r 1               
0006F3r 1               NEXT_ROW_Y_L: ; 0F00
0006F3r 1  33 58 7D A5  .byte $33,$58,$7D,$A5,$CD,$F7,$23,$50,$7E,$AD,$DE,$10,$44,$78,$AE,$E4,$1C,$55,$8F,$CA,$6,$43,$81,$BF,$FE,$3F,$7F,$C1,$3,$46,$8A,$CD,$12,$57,$9C,$E2,$28,$6E,$B4,$FB,$42,$89,$D0,$17,$5E,$A5,$EC,$33,$7A,$C0,$6,$4C,$91,$D6,$1B,$5F,$A2,$E6,$28,$6A,$AB,$EB,$2B,$6A,$A8,$E5,$21,$5C,$97,$D0,$8,$3F,$75,$AA,$DE,$10,$41,$71,$A0,$CD,$F9,$24,$4D,$75,$9B,$C0,$E3,$5,$25,$44,$61,$7C,$96,$AE,$C5,$DA,$ED,$FF,$F,$1D,$29,$34,$3D,$44,$4A,$4D,$4F,$50,$4E,$4B,$46,$3F,$37,$2D,$21,$13,$4,$F3,$E0,$CC,$B6,$9E,$85,$6A,$4E,$30,$10,$EF,$CC,$A7,$82,$5A,$32,$8,$DC,$AF,$81,$52,$21,$EF,$BB,$87,$51,$1B,$E3,$AA,$70,$35,$F9,$BC,$7E,$40,$1,$C0,$80,$3E,$FC,$B9,$75,$32,$ED,$A8,$63,$1D,$D7,$91,$4B,$4,$BD,$76,$2F,$E8,$A1,$5A,$13,$CC,$85,$3F,$F9,$B3,$6E,$29,$E4,$A0,$5D,$19,$D7,$95,$54,$14,$D4,$95,$57,$1A,$DE,$A3,$68,$2F,$F7,$C0,$8A,$55,$21,$EF,$BE,$8E,$5F,$32,$6,$DB,$B2,$8A,$64,$3F,$1C,$FA,$DA,$BB,$9E,$83,$69,$51,$3A,$25,$12,$0,$F0,$E2,$D6,$CB,$C2,$BB,$B5,$B2,$B0,$AF,$B1,$B4,$B9,$C0,$C8,$D2,$DE,$EC,$FB,$C,$1F,$33,$49,$61,$7A,$95,$B1,$CF,$EF,$10
0006F7r 1  CD F7 23 50  
0006FBr 1  7E AD DE 10  
0007F3r 1               
0007F3r 1               NEXT_ROW_Y_H: ; 1000
0007F3r 1  F6 F6 F6 F6  .byte $F6,$F6,$F6,$F6,$F6,$F6,$F7,$F7,$F7,$F7,$F7,$F8,$F8,$F8,$F8,$F8,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$0,$0,$0,$0,$1,$1,$1,$2,$2,$2,$2,$3,$3,$3,$3,$4,$4,$4,$4,$5,$5,$5,$5,$6,$6,$6,$6,$7,$7,$7,$7,$7,$8,$8,$8,$8,$8,$8,$9,$9,$9,$9,$9,$9,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$9,$9,$9,$9,$9,$9,$9,$8,$8,$8,$8,$8,$7,$7,$7,$7,$7,$6,$6,$6,$6,$5,$5,$5,$5,$5,$4,$4,$4,$3,$3,$3,$3,$2,$2,$2,$2,$1,$1,$1,$1,$0,$0,$0,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F8,$F8,$F8,$F8,$F8,$F7,$F7,$F7,$F7,$F7,$F7,$F6,$F6,$F6,$F6,$F6,$F6,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F6
0007F7r 1  F6 F6 F7 F7  
0007FBr 1  F7 F7 F7 F8  
0008F3r 1               
0008F3r 1               TUB_WORLD: ; 32*64 = 2K ... is 1100 to 1900-1
0008F3r 1               .include "tub_world_hieghts_01.inc"
0008F3r 2               ; 0 to 128 will be water level. >128 = distance along row to water (neg) , 128 = no water this row.
0008F3r 2               ; rows are stored within 64 byte rows
0008F3r 2               ; 	  0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63
0008F3r 2  FF FF FF FF  .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 30
0008F7r 2  FF FF FF FF  
0008FBr 2  FF FF FF FF  
000933r 2  FF FF FF FF  .byte   $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF ; 29
000937r 2  FF FF FF FF  
00093Br 2  FF FF FF FF  
000973r 2  FF FF FF FF  .byte     $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF ; 28
000977r 2  FF FF FF FF  
00097Br 2  FF FF FF FF  
0009B3r 2  FF FF FF FF  .byte       $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF ; 27
0009B7r 2  FF FF FF FF  
0009BBr 2  FF FF FF FF  
0009F3r 2  FF FF FF FF  .byte         $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF ; 26
0009F7r 2  FF FF FF FF  
0009FBr 2  FF FF FF FF  
000A33r 2  FF FF FF FF  .byte           $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 25
000A37r 2  FF FF FF FF  
000A3Br 2  FF FF FF FF  
000A73r 2  FF FF FF FF  .byte             $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 24
000A77r 2  FF FF FF FF  
000A7Br 2  FF FF FF FF  
000AB3r 2  FF FF FF FF  .byte               $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 23
000AB7r 2  FF FF FF FF  
000ABBr 2  FF FF FF 80  
000AF3r 2  FF FF FF FF  .byte                 $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 22
000AF7r 2  FF FF FF FF  
000AFBr 2  FF FF 80 00  
000B33r 2  FF FF FF FF  .byte                   $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF; 21
000B37r 2  FF FF FF FF  
000B3Br 2  FF 80 00 00  
000B73r 2  FF FF FF FF  .byte                     $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF ; 20
000B77r 2  FF FF FF FF  
000B7Br 2  FF 80 00 00  
000BB3r 2  FF FF FF FF  .byte                       $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF ; 19
000BB7r 2  FF FF FF FF  
000BBBr 2  80 00 00 00  
000BF3r 2  FF FF FF FF  .byte                         $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 18
000BF7r 2  FF FF FF FF  
000BFBr 2  80 00 00 00  
000C33r 2  FF FF FF FF  .byte                           $FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 17
000C37r 2  FF FF FF 80  
000C3Br 2  00 00 00 00  
000C73r 2  FF FF FF FF  .byte                             $FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 16
000C77r 2  FF FF FF 80  
000C7Br 2  00 00 00 00  
000CB3r 2  FF FF FF FF  .byte                               $FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 15
000CB7r 2  FF FF 80 00  
000CBBr 2  00 00 00 00  
000CF3r 2  FF FF FF FF  .byte                                 $FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF ; 14
000CF7r 2  FF FF 80 00  
000CFBr 2  00 00 00 00  
000D33r 2  FF FF FF FF  .byte                                   $FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 13
000D37r 2  FF 80 00 00  
000D3Br 2  00 00 00 00  
000D73r 2  FF FF FF FF  .byte                                     $FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 12
000D77r 2  FF 80 00 00  
000D7Br 2  00 00 00 00  
000DB3r 2  FF FF FF FF  .byte                                       $FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 11
000DB7r 2  80 00 00 00  
000DBBr 2  00 00 00 00  
000DF3r 2  FF FF FF FF  .byte                                         $FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 10
000DF7r 2  80 00 00 00  
000DFBr 2  00 00 00 00  
000E33r 2  FF FF FF 80  .byte                                           $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 9
000E37r 2  00 00 00 00  
000E3Br 2  00 00 00 00  
000E73r 2  FF FF FF 80  .byte                                             $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 8
000E77r 2  00 00 00 00  
000E7Br 2  00 00 00 00  
000EB3r 2  FF FF FF 80  .byte                                               $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 7
000EB7r 2  00 00 00 00  
000EBBr 2  00 00 00 00  
000EF3r 2  FF FF FF 80  .byte                                                 $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 6
000EF7r 2  00 00 00 00  
000EFBr 2  00 00 00 00  
000F33r 2  FF FF FF 80  .byte                                                   $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 5
000F37r 2  00 00 00 00  
000F3Br 2  00 00 00 00  
000F73r 2  FF FF FF 80  .byte                                                     $FF,$FF,$FF,$80,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 4
000F77r 2  00 01 02 02  
000F7Br 2  01 01 00 01  
000FB3r 2  FF FF FF 80  .byte                                                       $FF,$FF,$FF,$80,$80,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 3
000FB7r 2  80 00 01 02  
000FBBr 2  02 01 01 00  
000FF3r 2  FF FF FF FF  .byte                                                         $FF,$FF,$FF,$FF,$80,$80,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 2
000FF7r 2  80 80 00 01  
000FFBr 2  02 02 01 01  
001033r 2  FF FF FF FF  .byte                                                           $FF,$FF,$FF,$FF,$FF,$80,$80,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 01
001037r 2  FF 80 80 00  
00103Br 2  01 02 02 01  
001073r 2  FF FF FF FF  .byte                                                             $FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 00 tub wall north
001077r 2  FF FF 80 80  
00107Br 2  80 80 80 80  
0010B3r 2  FF FF FF FF  .res 64,$FF
0010B7r 2  FF FF FF FF  
0010BBr 2  FF FF FF FF  
0010F3r 2               
0010F3r 2               
0010F3r 2               
0010F3r 1               
0010F3r 1               ; 1900
0010F3r 1               
0010F3r 1               OBJECT_LIST_Z_START_POINTERS: ; 1900
0010F3r 1  00 00 00 00  .res 256,0
0010F7r 1  00 00 00 00  
0010FBr 1  00 00 00 00  
0011F3r 1               OBJECT_LIST_BYTE0_ADDRLOW: ; 1A00 addr low
0011F3r 1  00 00 00 00  .res 256,0
0011F7r 1  00 00 00 00  
0011FBr 1  00 00 00 00  
0012F3r 1               OBJECT_LIST_BYTE1_MODE: ; 1B00 mode/addr bank
0012F3r 1  00 00 00 00  .res 256,0
0012F7r 1  00 00 00 00  
0012FBr 1  00 00 00 00  
0013F3r 1               OBJECT_LIST_BYTE2_X: ; 1C00 X position onscreen ( assumed positive for now)
0013F3r 1  00 00 00 00  .res 256,0
0013F7r 1  00 00 00 00  
0013FBr 1  00 00 00 00  
0014F3r 1               OBJECT_LIST_BYTE3_Y: ; 1D00 y position onscreen
0014F3r 1  00 00 00 00  .res 256,0
0014F7r 1  00 00 00 00  
0014FBr 1  00 00 00 00  
0015F3r 1               OBJECT_LIST_BYTE4_ZFLIPS: ; 1E00 collision / z / flips
0015F3r 1  00 00 00 00  .res 256,0
0015F7r 1  00 00 00 00  
0015FBr 1  00 00 00 00  
0016F3r 1               OBJECT_LIST_BYTE5_SIZE: ; 1F00 size / pal offset
0016F3r 1  00 00 00 00  .res 256,0
0016F7r 1  00 00 00 00  
0016FBr 1  00 00 00 00  
0017F3r 1               OBJECT_LIST_BYTE6_NEXT: ; 2000 NEXT
0017F3r 1  00 00 00 00  .res 256,0
0017F7r 1  00 00 00 00  
0017FBr 1  00 00 00 00  
0018F3r 1               
0018F3r 1               
0018F3r 1               
0018F3r 1               WORLD_TO_CELL_XH: ; 2100
0018F3r 1  00 00 01 02  .byte 0,0,1,2,3,4,5,6,6,7,8,9,10,11,12,12,13,14,15,16,17,18,19,19,20,21,22,23,24,25,25,26,27,28,29,30,31,32,32,33,34,35,36,37,38,38,39,40,41,42,43,44,45,45,46,47,48,49,50,51,51,52,53,54,55,56,57,58,58,59,60,61,62,63,64,64,65,66,67,68,69,70,71,71,72,73,74,75,76,77,77,78,79,80,81,82,83,84,84,85,86,87,88,89,90,90,91,92,93,94,95,96,96,97,98,99,100,101,102,103,103,104,105,106,107,108,109,109,110,111,112,113,114,115,116,116,117,118,119,120,121,122,122,123,124,125,126,127,128,129,129,130,131,132,133,134,135,135,136,137,138,139,140,141,142,142,143,144,145,146,147,148,148,149,150,151,152,153,154,155,155,156,157,158,159,160,161,161,162,163,164,165,166,167,168,168,169,170,171,172,173,174,174,175,176,177,178,179,180,180,181,182,183,184,185,186,187,187,188,189,190,191,192,193,193,194,195,196,197,198,199,200,200,201,202,203,204,205,206,206,207,208,209,210,211,212,213,213,214,215,216,217,218,219,219,220
0018F7r 1  03 04 05 06  
0018FBr 1  06 07 08 09  
0019F3r 1               ;.byte 0,0,1,2,3,4,5,6,6,7,8,9,10,11,12,12,13,14,15,16,17,18,19,19,20,21,22,23,24,25,25,26,27,28,29,30,31,32,32,33,34,35,36,37,38,38,39,40,41,42,43,44,45,45,46,47,48,49,50,51,51,52,53,54,55,56,57,58,58,59,60,61,62,63,64,64,65,66,67,68,69,70,71,71,72,73,74,75,76,77,77,78,79,80,81,82,83,84,84,85,86,87,88,89,90,90,91,92,93,94,95,96,96,97,98,99,100,101,102,103,103,104,105,106,107,108,109,109
0019F3r 1               ;.res 128,128
0019F3r 1               WORLD_TO_CELL_XL:
0019F3r 1  00 DD BB 99  .byte 0,221,187,153,118,84,50,15,237,203,169,134,100,66,31,253,219,184,150,116,82,47,13,235,200,166,132,97,63,29,251,216,182,148,113,79,45,10,232,198,164,129,95,61,26,248,214,180,145,111,77,42,8,230,195,161,127,93,58,24,246,211,177,143,108,74,40,6,227,193,159,124,90,56,21,243,209,175,140,106,72,37,3,225,191,156,122,88,53,19,241,206,172,138,104,69,35,1,222,188,154,119,85,51,17,238,204,170,135,101,67,32,254,220,186,151,117,83,48,14,236,202,167,133,99,64,30,252,217,183,149,115,80,46,12,233,199,165,130,96,62,28,249,215,181,146,112,78,43,9,231,197,162,128,94,59,25,247,212,178,144,110,75,41,7,228,194,160,126,91,57,23,244,210,176,141,107,73,39,4,226,192,157,123,89,54,20,242,208,173,139,105,70,36,2,223,189,155,121,86,52,18,239,205,171,137,102,68,34,255,221,187,152,118,84,50,15,237,203,168,134,100,65,31,253,219,184,150,116,81,47,13,234,200,166,132,97,63,29,250,216,182,148,113,79,45,10,232,198,163,129,95,61,26,248,214
0019F7r 1  76 54 32 0F  
0019FBr 1  ED CB A9 86  
001AF3r 1               ;.byte 0,221,187,153,118,84,50,15,237,203,169,134,100,66,31,253,219,184,150,116,82,47,13,235,200,166,132,97,63,29,251,216,182,148,113,79,45,10,232,198,164,129,95,61,26,248,214,180,145,111,77,42,8,230,195,161,127,93,58,24,246,211,177,143,108,74,40,6,227,193,159,124,90,56,21,243,209,175,140,106,72,37,3,225,191,156,122,88,53,19,241,206,172,138,104,69,35,1,222,188,154,119,85,51,17,238,204,170,135,101,67,32,254,220,186,151,117,83,48,14,236,202,167,133,99,64,30,252
001AF3r 1               ;.res 128,0
001AF3r 1               CELL_TO_WORLD_XH: ; 2200
001AF3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,8,9,10,11,12,13,15,16,17,18,19,20,21,23,24,25,26,27,28,30,31,32,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,50,51,53,54,55,56,57,58,60,61,62,63,64,65,66,68,69,70,71,72,73,75,76,77,78,79,80,81,83,84,85,86,87,88,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,112,113,114,115,116,117,118,120,121,122,123,124,125,127,128,129,130,131,132,133,135,136,137,138,139,140,142,143,144,145,146
001AF7r 1  04 05 06 08  
001AFBr 1  09 0A 0B 0C  
001B73r 1               CELL_TO_WORLD_XL: ; 2280
001B73r 1  00 27 4F 76  .byte 0,39,79,118,158,198,237,21,60,100,140,179,219,2,42,82,121,161,200,240,24,63,103,142,182,222,5,45,84,124,164,203,243,26,66,106,145,185,224,8,48,87,127,166,206,246,29,69,108,148,188,227,11,50,90,130,169,209,248,32,72,111,151,191,230,14,53,93,133,172,212,251,35,75,114,154,193,233,17,56,96,135,175,215,254,38,77,117,157,196,236,19,59,99,138,178,217,1,41,80,120,159,199,239,22,62,101,141,181,220,4,43,83,123,162,202,241,25,65,104,144,184,223,7,46,86,126,165
001B77r 1  9E C6 ED 15  
001B7Br 1  3C 64 8C B3  
001BF3r 1               
001BF3r 1               CELL_LOW_TO_WORLD_XH: ; 2300
001BF3r 1  00 00 00 00  .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
001BF7r 1  00 00 00 00  
001BFBr 1  00 00 00 00  
001CF3r 1               CELL_LOW_TO_WORLD_XL: ; 2400
001CF3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,8,9,10,11,12,13,15,16,17,18,19,20,21,23,24,25,26,27,28,30,31,32,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,50,51,53,54,55,56,57,58,60,61,62,63,64,65,66,68,69,70,71,72,73,75,76,77,78,79,80,81,83,84,85,86,87,88,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,112,113,114,115,116,117,118,120,121,122,123,124,125,127,128,129,130,131,132,133,135,136,137,138,139,140,142,143,144,145,146,147,148,150,151,152,153,154,155,157,158,159,160,161,162,163,165,166,167,168,169,170,172,173,174,175,176,177,178,180,181,182,183,184,185,187,188,189,190,191,192,193,195,196,197,198,199,200,202,203,204,205,206,207,209,210,211,212,213,214,215,217,218,219,220,221,222,224,225,226,227,228,229,230,232,233,234,235,236,237,239,240,241,242,243,244,245,247,248,249,250,251,252,254,255,0,1,2,3,4,6,7,8,9,10,11,13,14,15,16,17,18,19,21,22,23,24,25,26,28,29,30,31,32,33,34,36,37,38
001CF7r 1  04 05 06 08  
001CFBr 1  09 0A 0B 0C  
001DF3r 1               
001DF3r 1               SPRITE_NUM_HIGH_NIBBLE: ; 2900
001DF3r 1  21 21 21 21  .res 16, 33
001DF7r 1  21 21 21 21  
001DFBr 1  21 21 21 21  
001E03r 1  22 22 22 22  .res 16, 34
001E07r 1  22 22 22 22  
001E0Br 1  22 22 22 22  
001E13r 1  23 23 23 23  .res 16, 35
001E17r 1  23 23 23 23  
001E1Br 1  23 23 23 23  
001E23r 1  24 24 24 24  .res 16, 36
001E27r 1  24 24 24 24  
001E2Br 1  24 24 24 24  
001E33r 1  25 25 25 25  .res 16, 37
001E37r 1  25 25 25 25  
001E3Br 1  25 25 25 25  
001E43r 1  26 26 26 26  .res 16, 38
001E47r 1  26 26 26 26  
001E4Br 1  26 26 26 26  
001E53r 1  27 27 27 27  .res 16, 39
001E57r 1  27 27 27 27  
001E5Br 1  27 27 27 27  
001E63r 1  28 28 28 28  .res 16, 40
001E67r 1  28 28 28 28  
001E6Br 1  28 28 28 28  
001E73r 1  29 29 29 29  .res 16, 41
001E77r 1  29 29 29 29  
001E7Br 1  29 29 29 29  
001E83r 1  2A 2A 2A 2A  .res 16, 42
001E87r 1  2A 2A 2A 2A  
001E8Br 1  2A 2A 2A 2A  
001E93r 1  2B 2B 2B 2B  .res 16, 43
001E97r 1  2B 2B 2B 2B  
001E9Br 1  2B 2B 2B 2B  
001EA3r 1  2C 2C 2C 2C  .res 16, 44
001EA7r 1  2C 2C 2C 2C  
001EABr 1  2C 2C 2C 2C  
001EB3r 1  2D 2D 2D 2D  .res 16, 45
001EB7r 1  2D 2D 2D 2D  
001EBBr 1  2D 2D 2D 2D  
001EC3r 1  2E 2E 2E 2E  .res 16, 46
001EC7r 1  2E 2E 2E 2E  
001ECBr 1  2E 2E 2E 2E  
001ED3r 1  2F 2F 2F 2F  .res 16, 47
001ED7r 1  2F 2F 2F 2F  
001EDBr 1  2F 2F 2F 2F  
001EE3r 1  30 30 30 30  .res 16, 48
001EE7r 1  30 30 30 30  
001EEBr 1  30 30 30 30  
001EF3r 1               
001EF3r 1               SPRITE_NUM_LOW_NIBBLE: ; 2A00
001EF3r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
001EF7r 1  25 26 27 28  
001EFBr 1  29 2A 2B 2C  
001F03r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
001F07r 1  25 26 27 28  
001F0Br 1  29 2A 2B 2C  
001F13r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
001F17r 1  25 26 27 28  
001F1Br 1  29 2A 2B 2C  
001F23r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
001F27r 1  25 26 27 28  
001F2Br 1  29 2A 2B 2C  
001F33r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
001F37r 1  25 26 27 28  
001F3Br 1  29 2A 2B 2C  
001F43r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
001F47r 1  25 26 27 28  
001F4Br 1  29 2A 2B 2C  
001F53r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
001F57r 1  25 26 27 28  
001F5Br 1  29 2A 2B 2C  
001F63r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
001F67r 1  25 26 27 28  
001F6Br 1  29 2A 2B 2C  
001F73r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
001F77r 1  25 26 27 28  
001F7Br 1  29 2A 2B 2C  
001F83r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
001F87r 1  25 26 27 28  
001F8Br 1  29 2A 2B 2C  
001F93r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
001F97r 1  25 26 27 28  
001F9Br 1  29 2A 2B 2C  
001FA3r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
001FA7r 1  25 26 27 28  
001FABr 1  29 2A 2B 2C  
001FB3r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
001FB7r 1  25 26 27 28  
001FBBr 1  29 2A 2B 2C  
001FC3r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
001FC7r 1  25 26 27 28  
001FCBr 1  29 2A 2B 2C  
001FD3r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
001FD7r 1  25 26 27 28  
001FDBr 1  29 2A 2B 2C  
001FE3r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
001FE7r 1  25 26 27 28  
001FEBr 1  29 2A 2B 2C  
001FF3r 1               
001FF3r 1               SCREEN_Y_TO_Z: ; 2B00
001FF3r 1  FF FD FB FA  .byte 255,253,251,250,248,247,245,243,242,240,239,237,235,234,232,231,229,227,226,224,223,221,220,218,216,215,213,212,210,208,207,205,204,202,200,199,197,196,194,192,191,189,188,186,185,183,181,180,178,177,175,173,172,170,169,167,165,164,162,161,159,158,156,154,153,151,150,148,146,145,143,142,140,138,137,135,134,132,130,129,127,126,124,123,121,119,118,116,115,113,111,110,108,107,105,103,102,100,99,97,95,94,92,91,89,88,86,84,83,81,80,78,76,75,73,72,70,68,67,65,64,62,61,59,57,56,54,53,51,49,48,46,45,43,41,40,38,37,35,33,32,30,29,27,26,24,22,21,19,18,16,14,13,11,10,8,6,5,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
001FF7r 1  F8 F7 F5 F3  
001FFBr 1  F2 F0 EF ED  
0020F3r 1               
0020F3r 1               CONVERT_HEIGHTS_PIXELS: ; 2C00
0020F3r 1               ;.byte 0,0,1,1,2,3,3,4,4,5,6,6,7,7,8,9,9,10,11,11,12,12,13,14,14,15,15,16,17,17,18,18,19,20,20,21,22,22,23,23,24,25,25,26,26,27,28,28,29,30,30,31,31,32,33,33,34,34,35,36,36,37,37,38,39,39,40,41,41,42,42,43,44,44,45,45,46,47,47,48,48,49,50,50,51,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52;,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52
0020F3r 1  00 00 00 00  .res 128,0
0020F7r 1  00 00 00 00  
0020FBr 1  00 00 00 00  
002173r 1  00 00 00 00  .res 128,0
002177r 1  00 00 00 00  
00217Br 1  00 00 00 00  
0021F3r 1               CONVERT_HEIGHTS_PIXELS_SECONDARY: ; 2D00
0021F3r 1  00 00 00 00  .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,3,3,4,4,5,6,6,7,8,8,9,9,10,11,11,12,12,13,14,14,15,15,16,17,17,18,19,19,20,20,21,22,22,23,23,24,25,25,26,26,27,28,28,29,30,30,31,31,32,33,33,34,34,35,36,36,37,38,38,39,39,40,41,41,42,42,43,44,44,45,45,46,47,47,48,49,49,50,50,51,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52
0021F7r 1  00 00 00 00  
0021FBr 1  00 00 00 00  
0022F3r 1               
0022F3r 1               
0022F3r 1               SUBCELL_X_COS_L:
0022F3r 1  00 FF FF FF  .byte $0,$FF,$FF,$FF,$FE,$FE,$FD,$FC,$FB,$F9,$F8,$F6,$F4,$F3,$F1,$EE,$EC,$EA,$E7,$E4,$E1,$DE,$DB,$D8,$D4,$D1,$CD,$C9,$C5,$C1,$BD,$B9,$B5,$B0,$AB,$A7,$A2,$9D,$98,$93,$8E,$88,$83,$7E,$78,$73,$6D,$67,$61,$5C,$56,$50,$4A,$44,$3E,$38,$31,$2B,$25,$1F,$19,$12,$C,$6,$0,$F9,$F3,$ED,$E6,$E0,$DA,$D4,$CE,$C7,$C1,$BB,$B5,$AF,$A9,$A3,$9E,$98,$92,$8C,$87,$81,$7C,$77,$71,$6C,$67,$62,$5D,$58,$54,$4F,$4A,$46,$42,$3E,$3A,$36,$32,$2E,$2B,$27,$24,$21,$1E,$1B,$18,$15,$13,$11,$E,$C,$B,$9,$7,$6,$4,$3,$2,$1,$1,$0,$0,$0,$0,$0,$0,$0,$1,$1,$2,$3,$4,$6,$7,$9,$B,$C,$E,$11,$13,$15,$18,$1B,$1E,$21,$24,$27,$2B,$2E,$32,$36,$3A,$3E,$42,$46,$4A,$4F,$54,$58,$5D,$62,$67,$6C,$71,$77,$7C,$81,$87,$8C,$92,$98,$9E,$A3,$A9,$AF,$B5,$BB,$C1,$C7,$CE,$D4,$DA,$E0,$E6,$ED,$F3,$F9,$0,$6,$C,$12,$19,$1F,$25,$2B,$31,$38,$3E,$44,$4A,$50,$56,$5C,$61,$67,$6D,$73,$78,$7E,$83,$88,$8E,$93,$98,$9D,$A2,$A7,$AB,$B0,$B5,$B9,$BD,$C1,$C5,$C9,$CD,$D1,$D4,$D8,$DB,$DE,$E1,$E4,$E7,$EA,$EC,$EE,$F1,$F3,$F4,$F6,$F8,$F9,$FB,$FC,$FD,$FE,$FE,$FF,$FF,$FF
0022F7r 1  FE FE FD FC  
0022FBr 1  FB F9 F8 F6  
0023F3r 1               SUBCELL_X_COS_H:
0023F3r 1  01 00 00 00  .byte $1,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0
0023F7r 1  00 00 00 00  
0023FBr 1  00 00 00 00  
0024F3r 1               SUBCELL_X_SIN_H:
0024F3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
0024F7r 1  00 00 00 00  
0024FBr 1  00 00 00 00  
0025F3r 1               SUBCELL_X_SIN_L:
0025F3r 1  00 05 0A 10  .byte $0,$5,$A,$10,$15,$1B,$20,$25,$2B,$30,$35,$3B,$40,$45,$4A,$4F,$54,$59,$5E,$63,$68,$6D,$71,$76,$7B,$7F,$84,$88,$8C,$90,$94,$98,$9C,$A0,$A4,$A7,$AB,$AE,$B2,$B5,$B8,$BB,$BE,$C0,$C3,$C6,$C8,$CA,$CC,$CE,$D0,$D2,$D4,$D5,$D7,$D8,$D9,$DA,$DB,$DC,$DC,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DC,$DC,$DB,$DA,$D9,$D8,$D7,$D5,$D4,$D2,$D0,$CE,$CC,$CA,$C8,$C6,$C3,$C0,$BE,$BB,$B8,$B5,$B2,$AE,$AB,$A7,$A4,$A0,$9C,$98,$94,$90,$8C,$88,$84,$7F,$7B,$76,$71,$6D,$68,$63,$5E,$59,$54,$4F,$4A,$45,$40,$3B,$35,$30,$2B,$25,$20,$1B,$15,$10,$A,$5,$0,$FA,$F5,$EF,$EA,$E4,$DF,$DA,$D4,$CF,$CA,$C4,$BF,$BA,$B5,$B0,$AB,$A6,$A1,$9C,$97,$92,$8E,$89,$84,$80,$7B,$77,$73,$6F,$6B,$67,$63,$5F,$5B,$58,$54,$51,$4D,$4A,$47,$44,$41,$3F,$3C,$39,$37,$35,$33,$31,$2F,$2D,$2B,$2A,$28,$27,$26,$25,$24,$23,$23,$22,$22,$22,$22,$22,$22,$22,$23,$23,$24,$25,$26,$27,$28,$2A,$2B,$2D,$2F,$31,$33,$35,$37,$39,$3C,$3F,$41,$44,$47,$4A,$4D,$51,$54,$58,$5B,$5F,$63,$67,$6B,$6F,$73,$77,$7B,$80,$84,$89,$8E,$92,$97,$9C,$A1,$A6,$AB,$B0,$B5,$BA,$BF,$C4,$CA,$CF,$D4,$DA,$DF,$E4,$EA,$EF,$F5,$FA
0025F7r 1  15 1B 20 25  
0025FBr 1  2B 30 35 3B  
0026F3r 1               SUBCELL_Y_COS_H:
0026F3r 1  00 00 00 00  .byte
0026F7r 1  00 00 00 00  
0026FBr 1  00 00 00 00  
0027F3r 1               SUBCELL_Y_COS_L:
0027F3r 1  9C 9C 9C 9C  .byte $9C,$9C,$9C,$9C,$9C,$9B,$9B,$9A,$99,$98,$98,$97,$96,$94,$93,$92,$90,$8F,$8D,$8C,$8A,$88,$86,$84,$82,$80,$7D,$7B,$79,$76,$74,$71,$6E,$6C,$69,$66,$63,$60,$5D,$5A,$57,$53,$50,$4D,$49,$46,$43,$3F,$3B,$38,$34,$31,$2D,$29,$26,$22,$1E,$1A,$17,$13,$F,$B,$7,$3,$0,$FC,$F8,$F4,$F0,$EC,$E8,$E5,$E1,$DD,$D9,$D6,$D2,$CE,$CB,$C7,$C4,$C0,$BC,$B9,$B6,$B2,$AF,$AC,$A8,$A5,$A2,$9F,$9C,$99,$96,$93,$91,$8E,$8B,$89,$86,$84,$82,$7F,$7D,$7B,$79,$77,$75,$73,$72,$70,$6F,$6D,$6C,$6B,$69,$68,$67,$67,$66,$65,$64,$64,$63,$63,$63,$63,$63,$63,$63,$63,$63,$64,$64,$65,$66,$67,$67,$68,$69,$6B,$6C,$6D,$6F,$70,$72,$73,$75,$77,$79,$7B,$7D,$7F,$82,$84,$86,$89,$8B,$8E,$91,$93,$96,$99,$9C,$9F,$A2,$A5,$A8,$AC,$AF,$B2,$B6,$B9,$BC,$C0,$C4,$C7,$CB,$CE,$D2,$D6,$D9,$DD,$E1,$E5,$E8,$EC,$F0,$F4,$F8,$FC,$0,$3,$7,$B,$F,$13,$17,$1A,$1E,$22,$26,$29,$2D,$31,$34,$38,$3B,$3F,$43,$46,$49,$4D,$50,$53,$57,$5A,$5D,$60,$63,$66,$69,$6C,$6E,$71,$74,$76,$79,$7B,$7D,$80,$82,$84,$86,$88,$8A,$8C,$8D,$8F,$90,$92,$93,$94,$96,$97,$98,$98,$99,$9A,$9B,$9B,$9C,$9C,$9C,$9C
0027F7r 1  9C 9B 9B 9A  
0027FBr 1  99 98 98 97  
0028F3r 1               SUBCELL_Y_SIN_H:
0028F3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
0028F7r 1  00 00 00 00  
0028FBr 1  00 00 00 00  
0029F3r 1               SUBCELL_Y_SIN_L:
0029F3r 1  00 04 08 0D  .byte $0,$4,$8,$D,$11,$16,$1A,$1E,$23,$27,$2B,$30,$34,$38,$3C,$41,$45,$49,$4D,$51,$55,$59,$5D,$60,$64,$68,$6B,$6F,$72,$76,$79,$7C,$7F,$83,$86,$89,$8B,$8E,$91,$93,$96,$98,$9B,$9D,$9F,$A1,$A3,$A5,$A7,$A8,$AA,$AB,$AD,$AE,$AF,$B0,$B1,$B2,$B3,$B3,$B4,$B4,$B4,$B4,$B5,$B4,$B4,$B4,$B4,$B3,$B3,$B2,$B1,$B0,$AF,$AE,$AD,$AB,$AA,$A8,$A7,$A5,$A3,$A1,$9F,$9D,$9B,$98,$96,$93,$91,$8E,$8B,$89,$86,$83,$80,$7C,$79,$76,$72,$6F,$6B,$68,$64,$60,$5D,$59,$55,$51,$4D,$49,$45,$41,$3C,$38,$34,$30,$2B,$27,$23,$1E,$1A,$16,$11,$D,$8,$4,$0,$FB,$F7,$F2,$EE,$E9,$E5,$E1,$DC,$D8,$D4,$CF,$CB,$C7,$C3,$BE,$BA,$B6,$B2,$AE,$AA,$A6,$A2,$9F,$9B,$97,$94,$90,$8D,$89,$86,$83,$80,$7C,$79,$76,$74,$71,$6E,$6C,$69,$67,$64,$62,$60,$5E,$5C,$5A,$58,$57,$55,$54,$52,$51,$50,$4F,$4E,$4D,$4C,$4C,$4B,$4B,$4B,$4B,$4A,$4B,$4B,$4B,$4B,$4C,$4C,$4D,$4E,$4F,$50,$51,$52,$54,$55,$57,$58,$5A,$5C,$5E,$60,$62,$64,$67,$69,$6C,$6E,$71,$74,$76,$79,$7C,$80,$83,$86,$89,$8D,$90,$94,$97,$9B,$9F,$A2,$A6,$AA,$AE,$B2,$B6,$BA,$BE,$C3,$C7,$CB,$CF,$D4,$D8,$DC,$E1,$E5,$E9,$EE,$F2,$F7,$FB
0029F7r 1  11 16 1A 1E  
0029FBr 1  23 27 2B 30  
002AF3r 1               
002AF3r 1               MOVE_Y_H:
002AF3r 1  00 00 00 00  .byte
002AF7r 1  00 00 00 00  
002AFBr 1  00 00 00 00  
002BF3r 1               MOVE_Y_L:
002BF3r 1  08 07 07 07  .byte $8,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$6,$6,$6,$6,$6,$6,$6,$6,$6,$5,$5,$5,$5,$5,$5,$5,$4,$4,$4,$4,$4,$4,$3,$3,$3,$3,$3,$3,$2,$2,$2,$2,$2,$1,$1,$1,$1,$1,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF,$FF,$0,$0,$0,$0,$0,$0,$1,$1,$1,$1,$1,$2,$2,$2,$2,$2,$3,$3,$3,$3,$3,$3,$4,$4,$4,$4,$4,$4,$5,$5,$5,$5,$5,$5,$5,$6,$6,$6,$6,$6,$6,$6,$6,$6,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7
002BF7r 1  07 07 07 07  
002BFBr 1  07 07 07 07  
002CF3r 1               MOVE_X_H:
002CF3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
002CF7r 1  00 00 00 00  
002CFBr 1  00 00 00 00  
002DF3r 1               MOVE_X_L:
002DF3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$1,$1,$1,$1,$1,$1,$2,$2,$2,$2,$2,$2,$2,$3,$3,$3,$3,$3,$3,$3,$4,$4,$4,$4,$4,$4,$4,$5,$5,$5,$5,$5,$5,$5,$5,$5,$5,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$5,$5,$5,$5,$5,$5,$5,$5,$5,$5,$4,$4,$4,$4,$4,$4,$4,$3,$3,$3,$3,$3,$3,$3,$2,$2,$2,$2,$2,$2,$2,$1,$1,$1,$1,$1,$1,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FB,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF,$FF
002DF7r 1  00 00 01 01  
002DFBr 1  01 01 01 01  
002EF3r 1               
002EF3r 1               ;constants
002EF3r 1               
002EF3r 1               ; RAM Interrupt Vectors
002EF3r 1               IRQVec            = $0314
002EF3r 1               
002EF3r 1               ; VERA
002EF3r 1               VERA_addr_low     = $9F20
002EF3r 1               VERA_addr_high    = $9F21
002EF3r 1               VERA_addr_bank    = $9F22
002EF3r 1               VERA_data0        = $9F23
002EF3r 1               VERA_data1        = $9F24
002EF3r 1               VERA_ctrl         = $9F25
002EF3r 1               VERA_ien          = $9F26
002EF3r 1               VERA_isr          = $9F27
002EF3r 1               VERA_dc_video     = $9F29 ; DCSEL = 0
002EF3r 1               FX_CTRL           = $9F29 ; DCSEL = 2
002EF3r 1               FX_CACHE_L        = $9F29 ; DCSEL = 6
002EF3r 1               FX_CACHE_M        = $9F2A
002EF3r 1               FX_CACHE_H        = $9F2B
002EF3r 1               FX_CACHE_U        = $9F2C
002EF3r 1               ;   Current Field | Sprites Enable | Layer1 Enable  |Layer0 Enable
002EF3r 1               ; NTSC/RGB: 240P  | NTSC: Chroma Disable / RGB: HV Sync Output Mode
002EF3r 1               
002EF3r 1               VERA_dc_hscale    = $9F2A
002EF3r 1               VERA_dc_vscale    = $9F2B
002EF3r 1               
002EF3r 1               VERA_L0_config    = $9F2D
002EF3r 1               ;   7       6     5   4       3       2             1   0
002EF3r 1               ;   Map Height | Map Width | T256C | Bitmap Mode | Color Depth
002EF3r 1               ;   0 - 32                  0 - 16    0 tiled       0   1bpp mono
002EF3r 1               ;   1 - 64                  1 - 256   1 enabled     1   2bpp 4 color
002EF3r 1               ;   2 - 128                                         2   4bpp 16 color
002EF3r 1               ;   3 - 256                                         3   8bpp 256 color
002EF3r 1               ;   bitmap mode - tilebase points to bitmap data, mapbase not used
002EF3r 1               ;   tile width = 0 is 320 pixels / tile width=1 is 640 pixels.. so could do 4bpp x 320?
002EF3r 1               ;   The palette offset (in 'H-Scroll (11:8)') modifies the color indexes of the bitmap in the same way as in the tile modes.
002EF3r 1               
002EF3r 1               VERA_L0_mapbase   = $9F2E
002EF3r 1               VERA_L0_tilebase  = $9F2F ;   Tile Base Address (16:11) | Tile Height 0-8/1-16 | Tile Width 0-8/1-16
002EF3r 1               VERA_L0_HSCROLL_L = $9F30 ;  H-Scroll (7:0)
002EF3r 1               VERA_L0_HSCROLL_H = $9F31 ;  - H-Scroll (11:8)
002EF3r 1               VERA_L0_VSCROLL_L = $9F32 ;  V-Scroll (7:0)
002EF3r 1               VERA_L0_VSCROLL_H = $9F33 ;  - V-Scroll (11:8)
002EF3r 1               
002EF3r 1               VERA_L1_config    = $9F34
002EF3r 1               VERA_L1_mapbase   = $9F35
002EF3r 1               VERA_L1_tilebase  = $9F36
002EF3r 1               VERA_L1_HSCROLL_L = $9F37 ;  H-Scroll (7:0)
002EF3r 1               VERA_L1_HSCROLL_H = $9F38 ;  - H-Scroll (11:8)
002EF3r 1               VERA_L1_VSCROLL_L = $9F39 ;  V-Scroll (7:0)
002EF3r 1               VERA_L1_VSCROLL_H = $9F3A ;  - V-Scroll (11:8)
002EF3r 1               
002EF3r 1               VSYNC_BIT         = $01
002EF3r 1               
002EF3r 1               ; VRAM Addresses
002EF3r 1               ;   Address range Description
002EF3r 1               ;   $00000 - $1F9BF Video RAM   - 129,424 bytes -> 126K is 129,024 (1F800)
002EF3r 1               ;   $1F9C0 - $1F9FF PSG registers
002EF3r 1               ;   $1FA00 - $1FBFF Palette
002EF3r 1               ;   $1FC00 - $1FFFF Sprite attributes
002EF3r 1               
002EF3r 1               VRAM_UNRESERVED   = $1A000      ;
002EF3r 1               ; sprite starts must be 32byte aligned...
002EF3r 1               ; only can go to 126K ...
002EF3r 1               VRAM_palette      = $1FA00      ;
002EF3r 1               VRAM_sprite_attributes = $1FC00
002EF3r 1               
002EF3r 1               SPRITES_ONLY_VGA = $41
002EF3r 1               
002EF3r 1               
002EF3r 1               
002EF3r 1               ; Kernal
002EF3r 1               CHROUT            = $FFD2
002EF3r 1               GETIN             = $FFE4
002EF3r 1               CINT              = $FF81
002EF3r 1               
002EF3r 1               
002EF3r 1               ; PETSCII Codes
002EF3r 1               WHITE             = $05
002EF3r 1               RETURN            = $0D
002EF3r 1               SPACE             = $20
002EF3r 1               ZERO_CHAR         = $30
002EF3r 1               SIX_CHAR          = $36
002EF3r 1               NINE_CHAR         = $39
002EF3r 1               
002EF3r 1               A_CHAR            = $41
002EF3r 1               C_CHAR            = $43
002EF3r 1               D_CHAR            = $44
002EF3r 1               E_CHAR            = $45
002EF3r 1               I_CHAR            = $49
002EF3r 1               O_CHAR            = $4F
002EF3r 1               T_CHAR            = $54
002EF3r 1               W_CHAR            = $57
002EF3r 1               X_CHAR            = $58
002EF3r 1               Y_CHAR            = $59
002EF3r 1               Z_CHAR            = $5A
002EF3r 1               
002EF3r 1               CLR               = $93
002EF3r 1               
002EF3r 1               ; 	$0800-$9EFF	BASIC program/variables; available to the user
002EF3r 1               WORLD_DATA = $6000 	;	so is %100 [Y 5 bits ] : [ab] 0 [X - 6 bits
002EF3r 1               SCREEN_buffer = $8000
002EF3r 1               
002EF3r 1               ; zero page layout $0022-$007F is available to user
002EF3r 1               ZP_PTR = $22
002EF3r 1               SCRATCH_PTR = $7E
002EF3r 1               
002EF3r 1               ; global data ; 2E00
002EF3r 1  DE AD BE EF  .byte $DE,$AD,$BE,$EF ; 0-3
002EF7r 1  00 00        default_irq_vector:  .addr 0 ; 4-5
002EF9r 1  01           VSYNC_counter:       .byte 1 ; 6
002EFAr 1  01           camera_facing: 		 .byte 1 ; 7
002EFBr 1  2C           camera_world_pos_XH:    .byte 44 ; 8
002EFCr 1  30           camera_world_pos_XL:       .byte 48 ; 9
002EFDr 1  0F           camera_world_pos_YH:        .byte 15 ; A
002EFEr 1  80           camera_world_pos_YL:       .byte 128  ; B
002EFFr 1  00           camera_cell_x: 		 .byte 0 ; c
002F00r 1  00           camera_cell_xl:       .byte 0 ; d
002F01r 1  00           DEBUG_A: .byte 0  ; 12
002F02r 1  00           DEBUG_B: .byte 0  ; 13
002F03r 1  00           DEBUG_C: .byte 0
002F04r 1  00           DEBUG_D: .byte 0
002F05r 1  00           camera_cell_y: 		 .byte 0 ; e
002F06r 1  00           camera_cell_yl:       .byte 0 ; f
002F07r 1  00 00        MASTER_CLOCK:        .addr 0 ; 10-11
002F09r 1               
002F09r 1               .macro stash_scratch
002F09r 1               	STA (SCRATCH_PTR)
002F09r 1                   INC SCRATCH_PTR
002F09r 1               .endmacro
002F09r 1               
002F09r 1               custom_irq_handler: ; 2E12
002F09r 1  AD 27 9F        lda VERA_isr
002F0Cr 1  29 01           and #VSYNC_BIT
002F0Er 1  F0 03           beq @continue ; non-VSYNC IRQ, no tick update
002F10r 1  EE rr rr        inc VSYNC_counter
002F13r 1               @continue:
002F13r 1                  ; continue to default IRQ handler
002F13r 1  6C rr rr        jmp (default_irq_vector)
002F16r 1                  ; RTI will happen after jump
002F16r 1               
002F16r 1               start:
002F16r 1                 ; start of program - init globals
002F16r 1  AD 14 03       lda IRQVec
002F19r 1  8D rr rr       sta default_irq_vector
002F1Cr 1  AD 15 03       lda IRQVec+1
002F1Fr 1  8D rr rr       sta default_irq_vector+1
002F22r 1               
002F22r 1  9C 29 9F       stz VERA_dc_video   ; disable display
002F25r 1  A9 2B          lda #43 ; set scale for bitmap mode - going for 215x161 mode
002F27r 1  8D 2A 9F       sta VERA_dc_hscale
002F2Ar 1  8D 2B 9F       sta VERA_dc_vscale
002F2Dr 1                 ; for now no L0 or L1
002F2Dr 1               
002F2Dr 1                 ; let's stick that test sprite data into VRAM at zero for now..
002F2Dr 1  9C 25 9F       stz VERA_ctrl
002F30r 1  9C 20 9F       stz VERA_addr_low
002F33r 1  9C 21 9F       stz VERA_addr_high
002F36r 1  A9 10          lda #$10
002F38r 1  8D 22 9F       sta VERA_addr_bank
002F3Br 1                 ; load test VRAM data
002F3Br 1               
002F3Br 1                 ; is 512 bytes at test_cell_sprite label
002F3Br 1  A0 00          ldy #0
002F3Dr 1               
002F3Dr 1  A9 rr          LDA #<test_vram_data
002F3Fr 1  85 22          STA ZP_PTR
002F41r 1  A9 rr          LDA #>test_vram_data
002F43r 1  85 23          STA ZP_PTR+1
002F45r 1  A2 20          LDX #32   ;   num pages to copy - 16 pages / 8K  - sprite addr 0-255
002F47r 1  80 02          BRA :++
002F49r 1                 :
002F49r 1  E6 23             INC ZP_PTR+1
002F4Br 1                   :
002F4Br 1  B1 22              LDA (ZP_PTR),Y
002F4Dr 1  8D 23 9F           STA VERA_data0
002F50r 1  C8                 INY
002F51r 1  D0 F8              BNE :-
002F53r 1  CA                DEX
002F54r 1  D0 F3             BNE :--
002F56r 1               
002F56r 1                 ; initialize some waves
002F56r 1  64 22          STZ ZP_PTR
002F58r 1  A9 rr          LDA #>TUB_WORLD
002F5Ar 1  85 23          STA ZP_PTR+1
002F5Cr 1  A9 08          LDA #8
002F5Er 1  85 24          STA ZP_PTR+2 ; for use as page counter..
002F60r 1  A2 00          LDX #0
002F62r 1  B1 22          : LDA (ZP_PTR),y ; grab world data
002F64r 1  C9 80            CMP #128       ; is outside or inside tub?
002F66r 1  B0 08            BCS :+         ; skip this one
002F68r 1  8A               TXA
002F69r 1  91 22            STA (ZP_PTR),y
002F6Br 1  E8               INX
002F6Cr 1  E0 0F            CPX #15
002F6Er 1  B0 0B            BCS :++
002F70r 1  C8             : INY
002F71r 1  D0 EF            BNE :--
002F73r 1  E6 23            INC ZP_PTR+1
002F75r 1  C6 24            DEC ZP_PTR+2
002F77r 1  D0 E9            BNE :--
002F79r 1  80 15            BRA :+++
002F7Br 1  B1 22          : LDA (ZP_PTR),y
002F7Dr 1  C9 80            CMP #128       ; is outside or inside tub?
002F7Fr 1  B0 06            BCS :+         ; skip this one
002F81r 1  8A               TXA
002F82r 1  91 22            STA (ZP_PTR),y
002F84r 1  CA               DEX
002F85r 1  F0 E9            BEQ :--
002F87r 1  C8             : INY
002F88r 1  D0 F1            BNE :--
002F8Ar 1  E6 23            INC ZP_PTR+1
002F8Cr 1  C6 24            DEC ZP_PTR+2
002F8Er 1  D0 EB            BNE :--
002F90r 1                 :
002F90r 1                 ; write sprite test data
002F90r 1  A9 FF          LDA #255
002F92r 1  8D 20 9F       STA VERA_addr_low
002F95r 1  A9 FC          lda #>VRAM_sprite_attributes
002F97r 1  8D 21 9F       sta VERA_addr_high
002F9Ar 1  A9 19          lda #$19   ;  decrement 1 bank 1
002F9Cr 1  8D 22 9F       sta VERA_addr_bank
002F9Fr 1  A2 FF          LDX #255
002FA1r 1                 :
002FA1r 1  BD rr rr         LDA test_sprite_data,X
002FA4r 1  8D 23 9F         STA VERA_data0
002FA7r 1  CA               DEX
002FA8r 1  D0 F7            BNE :-
002FAAr 1  BD rr rr        LDA test_sprite_data,X
002FADr 1  8D 23 9F        STA VERA_data0
002FB0r 1               
002FB0r 1               
002FB0r 1                 ; write custom palette data  - 16 colors only for now.. $1:FA00-$1:FBFF   VERA Color Palette (256 x 2 bytes)
002FB0r 1  A2 1F          LDX #31
002FB2r 1  8E 20 9F       STX VERA_addr_low
002FB5r 1  A9 FA          LDA #$FA
002FB7r 1  8D 21 9F       STA VERA_addr_high
002FBAr 1  A9 19          LDA #$19
002FBCr 1  8D 22 9F       STA VERA_addr_bank
002FBFr 1                 :
002FBFr 1  BD rr rr         LDA test_optimal_pal_data,X
002FC2r 1  8D 23 9F         STA VERA_data0
002FC5r 1  CA               DEX
002FC6r 1  D0 F7            BNE :-
002FC8r 1  BD rr rr       LDA test_optimal_pal_data,X
002FCBr 1  8D 23 9F       STA VERA_data0
002FCEr 1               
002FCEr 1                 ; enable display
002FCEr 1  9C 25 9F       stz VERA_ctrl
002FD1r 1  A9 41          lda #SPRITES_ONLY_VGA
002FD3r 1  8D 29 9F       sta VERA_dc_video
002FD6r 1               
002FD6r 1                 ; overwrite RAM IRQ vector with custom handler address
002FD6r 1  78             sei ; disable IRQ while vector is changing
002FD7r 1  A9 rr          lda #<custom_irq_handler
002FD9r 1  8D 14 03       sta IRQVec
002FDCr 1  A9 rr          lda #>custom_irq_handler
002FDEr 1  8D 15 03       sta IRQVec+1
002FE1r 1  A9 01          lda #VSYNC_BIT ; make VERA only generate VSYNC IRQs
002FE3r 1  8D 26 9F       sta VERA_ien
002FE6r 1  58             cli ; enable IRQ now that vector is properly set
002FE7r 1               
002FE7r 1               
002FE7r 1                 ; main loop here...
002FE7r 1  9C rr rr        STZ camera_facing
002FEAr 1               
002FEAr 1               @camera_world_changed:
002FEAr 1                  ; copy over cell YL as-is
002FEAr 1  AD rr rr        LDA camera_world_pos_YL
002FEDr 1  8D rr rr        STA camera_cell_yl
002FF0r 1                  ; YH gets copied over ..
002FF0r 1  AD rr rr        LDA camera_world_pos_YH
002FF3r 1  8D rr rr        STA camera_cell_y
002FF6r 1                  ; cellX = WORLDX*ratio - floor(cellY)/2
002FF6r 1                  ;  halve floor(cellY)
002FF6r 1  4A              LSR
002FF7r 1  85 7F           STA $7F ; stash it for scratch
002FF9r 1  A9 00           LDA #0
002FFBr 1  6A              ROR
002FFCr 1  85 7E           STA $7E ; and there's the half..
002FFEr 1               
002FFEr 1  AE rr rr        LDX camera_world_pos_XH
003001r 1  AC rr rr        LDY camera_world_pos_XL
003004r 1  18              CLC
003005r 1  B9 rr rr        LDA WORLD_TO_CELL_XH,Y ; that bit from pos_XL
003008r 1  7D rr rr        ADC WORLD_TO_CELL_XL,X ; plus the bit from pos_XH
00300Br 1  A8              TAY   ;  cellXL from ratio
00300Cr 1  BD rr rr        LDA WORLD_TO_CELL_XH,X
00300Fr 1  69 00           ADC #0 ; gotta do that carry and all ..
003011r 1  AA              TAX   ; cellXH from ratio
003012r 1               
003012r 1  98              TYA
003013r 1  38              SEC
003014r 1  E5 7E           SBC $7E
003016r 1  8D rr rr        STA camera_cell_xl
003019r 1  8A              TXA
00301Ar 1  E5 7F           SBC $7F
00301Cr 1  8D rr rr        STA camera_cell_x
00301Fr 1  4C rr rr        jmp @do_update
003022r 1               
003022r 1               @camera_cell_changed: ; run through this more as a normalization step for camera..
003022r 1                  ; worldX = scaled(floor(cellY)/2 + cellX )
003022r 1  AD rr rr        LDA camera_cell_yl
003025r 1  8D rr rr        STA camera_world_pos_YL
003028r 1  AD rr rr        LDA camera_cell_y
00302Br 1  8D rr rr        STA camera_world_pos_YH
00302Er 1  4A              LSR
00302Fr 1  AA              TAX  ; high byte floor(Y)/2
003030r 1  A9 00           LDA #0
003032r 1  6A              ROR ; either is zero or 128 now ... either way, carry is cleared.
003033r 1  6D rr rr        ADC camera_cell_xl
003036r 1  A8              TAY ; stash the low to byte
003037r 1  8A              TXA ; high byte floor (Y)/2 .. ready for adding
003038r 1  6D rr rr        ADC camera_cell_x
00303Br 1  AA              TAX ; stash high byte ... carry _should_ be cleared unless X >255 ... ?
00303Cr 1  B9 rr rr        LDA CELL_LOW_TO_WORLD_XL,Y
00303Fr 1  7D rr rr        ADC CELL_TO_WORLD_XL,X
003042r 1  8D rr rr        STA camera_world_pos_XL
003045r 1  B9 rr rr        LDA CELL_LOW_TO_WORLD_XH,Y
003048r 1  7D rr rr        ADC CELL_TO_WORLD_XH,X
00304Br 1  8D rr rr        STA camera_world_pos_XH
00304Er 1                  ;  jmp @do_update ; superfluous currently. redundant even..
00304Er 1               
00304Er 1               
00304Er 1               @do_update:
00304Er 1               
00304Er 1                  ; clear the object list ...
00304Er 1  9C rr rr         STZ OBJECT_LIST_BYTE6_NEXT ; because we can't use zero anyway..
003051r 1  A2 00            LDX #0
003053r 1  A9 0C            LDA #$0C ; is basis for all the z_flips <- this may change depending on orientation..
003055r 1  9E rr rr         : STZ OBJECT_LIST_Z_START_POINTERS,X
003058r 1  9E rr rr           STZ OBJECT_LIST_BYTE1_MODE,X          ; 16 color / low address
00305Br 1  9C rr rr           STZ OBJECT_LIST_BYTE2_X
00305Er 1  9D rr rr           STA OBJECT_LIST_BYTE4_ZFLIPS,X
003061r 1  E8                 INX
003062r 1  D0 F1              BNE :-
003064r 1               
003064r 1  20 rr rr        jsr push_world_to_object_list
003067r 1               
003067r 1  AE rr rr        LDX OBJECT_LIST_BYTE6_NEXT
00306Ar 1  8E rr rr        STX DEBUG_C
00306Dr 1               
00306Dr 1                  ;  write location datas..
00306Dr 1  A9 F8           lda #248
00306Fr 1  8D 20 9F        STA VERA_addr_low
003072r 1  A9 FC           LDA #$FC
003074r 1  8D 21 9F        STA VERA_addr_high
003077r 1  A9 49           LDA #$49
003079r 1  8D 22 9F        STA VERA_addr_bank
00307Cr 1               
00307Cr 1               
00307Cr 1  A0 0A           ldy #10
00307Er 1  BE rr rr      : LDX camera_facing-1,y
003081r 1  BD rr rr        LDA SPRITE_NUM_LOW_NIBBLE,X
003084r 1  8D 23 9F        STA VERA_data0
003087r 1  BD rr rr        LDA SPRITE_NUM_HIGH_NIBBLE,X
00308Ar 1  8D 23 9F        STA VERA_data0
00308Dr 1  88              dey
00308Er 1  D0 EE           BNE :-
003090r 1               
003090r 1               
003090r 1  20 rr rr        jsr draw_object_list
003093r 1               
003093r 1               
003093r 1               @FRAME_CHECK:
003093r 1  CB              wai
003094r 1  AD rr rr        lda VSYNC_counter
003097r 1  F0 FA           beq @FRAME_CHECK
003099r 1  9C rr rr        stz VSYNC_counter
00309Cr 1  18              CLC
00309Dr 1  6D rr rr        ADC MASTER_CLOCK
0030A0r 1  AA              TAX
0030A1r 1  8D rr rr        STA MASTER_CLOCK
0030A4r 1  AD rr rr        LDA MASTER_CLOCK+1
0030A7r 1  69 00           ADC #0
0030A9r 1  8D rr rr        STA MASTER_CLOCK+1
0030ACr 1  8A              TXA
0030ADr 1  29 01           AND #1 ; restrict to 30 fps.. don't care missed cycle.
0030AFr 1  D0 E2           BNE @FRAME_CHECK
0030B1r 1                  ; poll keyboard for input
0030B1r 1  20 E4 FF        jsr GETIN
0030B4r 1  C9 00           cmp #0
0030B6r 1  F0 DB           beq @FRAME_CHECK
0030B8r 1  C9 1D           cmp #$1D 	;	cursor right
0030BAr 1  D0 06           BNE :+
0030BCr 1  EE rr rr        INC camera_facing
0030BFr 1  4C rr rr        JMP @do_update
0030C2r 1                  :
0030C2r 1  C9 9D           cmp  #$9D 	;	cursor left
0030C4r 1  D0 06           BNE :+
0030C6r 1  CE rr rr        DEC camera_facing
0030C9r 1  4C rr rr        JMP @do_update
0030CCr 1  C9 11         : cmp #$11; cursor down
0030CEr 1  D0 2C           BNE :+
0030D0r 1  AE rr rr        LDX camera_facing
0030D3r 1  38              SEC
0030D4r 1  AD rr rr        LDA camera_world_pos_XL
0030D7r 1  FD rr rr        SBC MOVE_X_L,X
0030DAr 1  8D rr rr        STA camera_world_pos_XL
0030DDr 1  AD rr rr        LDA camera_world_pos_XH
0030E0r 1  FD rr rr        SBC MOVE_X_H,X
0030E3r 1  8D rr rr        STA camera_world_pos_XH
0030E6r 1  18              CLC
0030E7r 1  AD rr rr        LDA camera_world_pos_YL
0030EAr 1  7D rr rr        ADC MOVE_Y_L,X
0030EDr 1  8D rr rr        STA camera_world_pos_YL
0030F0r 1  AD rr rr        LDA camera_world_pos_YH
0030F3r 1  7D rr rr        ADC MOVE_Y_H,X
0030F6r 1  8D rr rr        STA camera_world_pos_YH
0030F9r 1  4C rr rr        jmp @camera_world_changed
0030FCr 1               
0030FCr 1  C9 91         : cmp #$91 ; cursor up
0030FEr 1  D0 2C           BNE :+
003100r 1  AE rr rr        LDX camera_facing
003103r 1  18              CLC
003104r 1  AD rr rr        LDA camera_world_pos_XL
003107r 1  7D rr rr        ADC MOVE_X_L,X
00310Ar 1  8D rr rr        STA camera_world_pos_XL
00310Dr 1  AD rr rr        LDa camera_world_pos_XH
003110r 1  7D rr rr        ADC MOVE_X_H,X
003113r 1  8D rr rr        STA camera_world_pos_XH
003116r 1  38              SEC
003117r 1  AD rr rr        LDA camera_world_pos_YL
00311Ar 1  FD rr rr        SBC MOVE_Y_L,X
00311Dr 1  8D rr rr        STA camera_world_pos_YL
003120r 1  AD rr rr        LDA camera_world_pos_YH
003123r 1  FD rr rr        SBC MOVE_Y_H,X
003126r 1  8D rr rr        STA camera_world_pos_YH
003129r 1  4C rr rr        jmp @camera_world_changed
00312Cr 1               
00312Cr 1  C9 45         : cmp  #E_CHAR ; cell up right
00312Er 1  D0 15           BNE :+++
003130r 1  AD rr rr        LDA camera_cell_y
003133r 1  F0 03           BEQ :+
003135r 1  CE rr rr        DEC camera_cell_y
003138r 1  AD rr rr      : LDA camera_cell_x
00313Br 1  C9 3F           CMP #63
00313Dr 1  B0 03           BCS :+
00313Fr 1  EE rr rr        INC camera_cell_x
003142r 1  4C rr rr      : JMP @camera_cell_changed
003145r 1               
003145r 1  C9 57         : cmp #W_CHAR ; cell up left
003147r 1  D0 0B           BNE :++
003149r 1  AD rr rr        LDA camera_cell_y
00314Cr 1  F0 03           BEQ :+
00314Er 1  CE rr rr        DEC camera_cell_y
003151r 1  4C rr rr      : JMP @camera_cell_changed
003154r 1               
003154r 1  C9 41         : cmp #A_CHAR ; cell left
003156r 1  D0 0B           BNE :++
003158r 1  AD rr rr        LDA camera_cell_x
00315Br 1  F0 03           BEQ :+
00315Dr 1  CE rr rr        DEC camera_cell_x
003160r 1  4C rr rr      : JMP @camera_cell_changed
003163r 1               
003163r 1  C9 44         : cmp #D_CHAR ; cell right
003165r 1  D0 0D           BNE :++
003167r 1  AD rr rr        LDA camera_cell_x
00316Ar 1  C9 3F           CMP #63
00316Cr 1  B0 03           BCS :+
00316Er 1  EE rr rr        INC camera_cell_x
003171r 1  4C rr rr      : JMP @camera_cell_changed
003174r 1               
003174r 1  C9 58         : cmp #X_CHAR ; cell down right
003176r 1  D0 0D           BNE :++
003178r 1  AD rr rr        LDA camera_cell_y
00317Br 1  C9 1E           CMP #30
00317Dr 1  B0 03           BCS :+
00317Fr 1  EE rr rr        INC camera_cell_y
003182r 1  4C rr rr      : JMP @camera_cell_changed
003185r 1               
003185r 1  C9 5A         : cmp  #Z_CHAR ; cell down left
003187r 1  D0 15           BNE :+++
003189r 1  AD rr rr        LDA camera_cell_y
00318Cr 1  C9 1E           CMP #30
00318Er 1  B0 03           BCS :+
003190r 1  EE rr rr        INC camera_cell_y
003193r 1  AD rr rr      : LDA camera_cell_x
003196r 1  F0 03           BEQ :+
003198r 1  CE rr rr        DEC camera_cell_x
00319Br 1  4C rr rr      : JMP @camera_cell_changed
00319Er 1               
00319Er 1  C9 20         : cmp #SPACE;
0031A0r 1  D0 09           BNE :+
0031A2r 1  9C rr rr        STZ camera_cell_xl
0031A5r 1  9C rr rr        STZ camera_cell_yl
0031A8r 1  4C rr rr        JMP @camera_cell_changed
0031ABr 1               
0031ABr 1  C9 00         : cmp #0 ;
0031ADr 1  D0 03           BNE :+
0031AFr 1  4C rr rr        JMP @do_update
0031B2r 1               
0031B2r 1  C9 00         : cmp #0 ;
0031B4r 1  D0 03           BNE :+
0031B6r 1  4C rr rr        JMP @do_update
0031B9r 1               
0031B9r 1  C9 00         : cmp #0 ;
0031BBr 1  D0 03           BNE :+
0031BDr 1  4C rr rr        JMP @do_update
0031C0r 1               
0031C0r 1               
0031C0r 1  4C rr rr      : JMP @FRAME_CHECK
0031C3r 1               
0031C3r 1               @cleanup_and_exit:
0031C3r 1                  ; restore default IRQ vector
0031C3r 1  78              sei
0031C4r 1  AD rr rr        lda default_irq_vector
0031C7r 1  8D 14 03        sta IRQVec
0031CAr 1  AD rr rr        lda default_irq_vector+1
0031CDr 1  8D 15 03        sta IRQVec+1
0031D0r 1  58              cli
0031D1r 1  20 81 FF        jsr CINT
0031D4r 1  60              rts
0031D5r 1               
0031D5r 1               
0031D5r 1               ; CURRENT
0031D5r 1               push_world_to_object_list: ; as in.. let's try this again?? wait.. missing a STZ ZP_PTR...
0031D5r 1               PWOL_TUB_PTR_AL   = ZP_PTR
0031D5r 1               PWOL_TUB_PTR_AH   = ZP_PTR+1
0031D5r 1               PWOL_TUB_PTR_BL   = ZP_PTR+2
0031D5r 1               PWOL_TUB_PTR_BH   = ZP_PTR+3
0031D5r 1               PWOL_CURRENT_XL   = ZP_PTR+4
0031D5r 1               PWOL_CURRENT_XH   = ZP_PTR+5
0031D5r 1               PWOL_CURRENT_YL   = ZP_PTR+6
0031D5r 1               PWOL_CURRENT_YH   = ZP_PTR+7
0031D5r 1               PWOL_ACROSS_ROW_XL= ZP_PTR+8
0031D5r 1               PWOL_ACROSS_ROW_XH= ZP_PTR+9
0031D5r 1               PWOL_ACROSS_ROW_YL= ZP_PTR+10
0031D5r 1               PWOL_ACROSS_ROW_YH= ZP_PTR+11
0031D5r 1               PWOL_NEXT_ROW_A_LEFT_XL  = ZP_PTR+12
0031D5r 1               PWOL_NEXT_ROW_A_LEFT_XH  = ZP_PTR+13
0031D5r 1               PWOL_NEXT_ROW_A_LEFT_YL  = ZP_PTR+14
0031D5r 1               PWOL_NEXT_ROW_A_LEFT_YH  = ZP_PTR+15
0031D5r 1               PWOL_NEXT_ROW_A_RIGHT_XL  = ZP_PTR+16
0031D5r 1               PWOL_NEXT_ROW_A_RIGHT_XH  = ZP_PTR+17
0031D5r 1               PWOL_NEXT_ROW_A_RIGHT_YL  = ZP_PTR+18
0031D5r 1               PWOL_NEXT_ROW_A_RIGHT_YH  = ZP_PTR+19
0031D5r 1               PWOL_NEXT_ROW_B_LEFT_XL  = ZP_PTR+20
0031D5r 1               PWOL_NEXT_ROW_B_LEFT_XH  = ZP_PTR+21
0031D5r 1               PWOL_NEXT_ROW_B_LEFT_YL  = ZP_PTR+22
0031D5r 1               PWOL_NEXT_ROW_B_LEFT_YH  = ZP_PTR+23
0031D5r 1               PWOL_NEXT_ROW_B_RIGHT_XL  = ZP_PTR+24
0031D5r 1               PWOL_NEXT_ROW_B_RIGHT_XH  = ZP_PTR+25
0031D5r 1               PWOL_NEXT_ROW_B_RIGHT_YL  = ZP_PTR+26
0031D5r 1               PWOL_NEXT_ROW_B_RIGHT_YH  = ZP_PTR+27
0031D5r 1               PWOL_Z_STARTS_PTR = ZP_PTR+28
0031D5r 1               PWOL_Z_STARTS_PTRH = ZP_PTR+29
0031D5r 1               PWOL_CONVERT_HEIGHTS = ZP_PTR+30
0031D5r 1               PWOL_CONVERT_HEIGHTSH= ZP_PTR+31
0031D5r 1               PWOL_CONVERT_HEIGHTS_SECONDARY = ZP_PTR+32
0031D5r 1               PWOL_CONVERT_HEIGHTS_SECONDARYH = ZP_PTR+33
0031D5r 1               PWOL_TRIES_COUNTER = ZP_PTR+34
0031D5r 1               PWOL_START_XL = ZP_PTR+35
0031D5r 1               PWOL_START_YL = ZP_PTR+36
0031D5r 1               PWOL_START_XH = ZP_PTR+37
0031D5r 1               PWOL_START_YH = ZP_PTR+38
0031D5r 1               
0031D5r 1               PWOL_START_COS_XL = ZP_PTR+39
0031D5r 1               PWOL_START_COS_XH = ZP_PTR+40
0031D5r 1               PWOL_START_COS_YL = ZP_PTR+41
0031D5r 1               PWOL_START_COS_YH = ZP_PTR+42
0031D5r 1               PWOL_START_SIN_XL = ZP_PTR+43
0031D5r 1               PWOL_START_SIN_XH = ZP_PTR+44
0031D5r 1               PWOL_START_SIN_YL = ZP_PTR+45
0031D5r 1               PWOL_START_SIN_YH = ZP_PTR+46
0031D5r 1               
0031D5r 1               PWOL_camera_cell_xl = ZP_PTR+47
0031D5r 1               PWOL_camera_cell_yl = ZP_PTR+48
0031D5r 1               
0031D5r 1               TRY_AGAIN = 6
0031D5r 1               SCREEN_MID_X = 108
0031D5r 1               SCREEN_MID_Y =  80
0031D5r 1               SCREEN_OUT_RIGHT  = 164 ; right of middle is 116, +48 = 164
0031D5r 1               SCREEN_OUT_LEFT   =  36 ; left of middle is 100, -48=52-16=36
0031D5r 1               SCREEN_OUT_TOP     = 24
0031D5r 1               SCREEN_OUT_BOTTOM  = 136
0031D5r 1               
0031D5r 1  A9 rr           LDA #>CONVERT_HEIGHTS_PIXELS_SECONDARY
0031D7r 1  85 43           STA PWOL_CONVERT_HEIGHTS_SECONDARYH
0031D9r 1  A9 rr           LDA #>CONVERT_HEIGHTS_PIXELS
0031DBr 1  85 41           STA PWOL_CONVERT_HEIGHTSH
0031DDr 1  A9 rr           LDA #>OBJECT_LIST_Z_START_POINTERS
0031DFr 1  85 3F           STA PWOL_Z_STARTS_PTRH
0031E1r 1               
0031E1r 1  AE rr rr        LDX camera_facing
0031E4r 1               
0031E4r 1               
0031E4r 1  BD rr rr        LDA ACROSS_ROW_X_L,x    ; 0900  16 wide , 45* tilt ... this is added to go up row, sub for down row
0031E7r 1  85 2A           STA PWOL_ACROSS_ROW_XL
0031E9r 1  BD rr rr        LDA ACROSS_ROW_X_H,x
0031ECr 1  85 2B           STA PWOL_ACROSS_ROW_XH
0031EEr 1  BD rr rr        LDA ACROSS_ROW_Y_L,x
0031F1r 1  85 2C           STA PWOL_ACROSS_ROW_YL
0031F3r 1  BD rr rr        LDA ACROSS_ROW_Y_H,x
0031F6r 1  85 2D           STA PWOL_ACROSS_ROW_YH
0031F8r 1               
0031F8r 1  18              CLC
0031F9r 1  BD rr rr        LDA NEXT_ROW_X_L,X  ; 0D00 next row LEFT/up when added
0031FCr 1  85 2E           STA PWOL_NEXT_ROW_A_LEFT_XL   ; -> next row is left, going up the screen ..  -1,-1
0031FEr 1  65 2A           ADC PWOL_ACROSS_ROW_XL   ; across row is for right , subtract to go left  +1 -> 0,1
003200r 1  85 32           STA PWOL_NEXT_ROW_A_RIGHT_XL  ;  -> next row is right, going up the screen .. -1,-1
003202r 1  BD rr rr        LDA NEXT_ROW_X_H,x
003205r 1  85 2F           STA PWOL_NEXT_ROW_A_LEFT_XH
003207r 1  65 2B           ADC PWOL_ACROSS_ROW_XH
003209r 1  85 33           STA PWOL_NEXT_ROW_A_RIGHT_XH
00320Br 1               
00320Br 1  18              CLC
00320Cr 1  BD rr rr        LDA NEXT_ROW_Y_L,X  ; 0F00 next row LEFT/up when added
00320Fr 1  85 30           STA PWOL_NEXT_ROW_A_LEFT_YL   ; -> next row is left, going up the screen
003211r 1  65 2C           ADC PWOL_ACROSS_ROW_YL   ; across row is for right
003213r 1  85 34           STA PWOL_NEXT_ROW_A_RIGHT_YL  ;  -> next row is right, going up the screen
003215r 1  BD rr rr        LDA NEXT_ROW_Y_H,x
003218r 1  85 31           STA PWOL_NEXT_ROW_A_LEFT_YH
00321Ar 1  65 2D           ADC PWOL_ACROSS_ROW_YH
00321Cr 1  85 35           STA PWOL_NEXT_ROW_A_RIGHT_YH
00321Er 1               
00321Er 1               
00321Er 1               ; for zig B , the opposite of left/up is right/down.. so A_LEFT * -1 = B_RIGHT
00321Er 1  38              SEC ; flip A_LEFT X to B_RIGHT X
00321Fr 1  A9 00           LDA #0
003221r 1  E5 2E           SBC PWOL_NEXT_ROW_A_LEFT_XL
003223r 1  85 3A           STA PWOL_NEXT_ROW_B_RIGHT_XL
003225r 1  A9 00           LDA #0
003227r 1  E5 2F           SBC PWOL_NEXT_ROW_A_LEFT_XH
003229r 1  85 3B           STA PWOL_NEXT_ROW_B_RIGHT_XH
00322Br 1               
00322Br 1  38              SEC ; flip A_LEFT Y to B_RIGHT Y
00322Cr 1  A9 00           LDA #0
00322Er 1  E5 30           SBC PWOL_NEXT_ROW_A_LEFT_YL
003230r 1  85 3C           STA PWOL_NEXT_ROW_B_RIGHT_YL
003232r 1  A9 00           LDA #0
003234r 1  E5 31           SBC PWOL_NEXT_ROW_A_LEFT_YH
003236r 1  85 3D           STA PWOL_NEXT_ROW_B_RIGHT_YH
003238r 1               
003238r 1  38              SEC ; flip A_RIGHT X to B_LEFT X
003239r 1  A9 00           LDA #0
00323Br 1  E5 32           SBC PWOL_NEXT_ROW_A_RIGHT_XL
00323Dr 1  85 36           STA PWOL_NEXT_ROW_B_LEFT_XL
00323Fr 1  A9 00           LDA #0
003241r 1  E5 33           SBC PWOL_NEXT_ROW_A_RIGHT_XH
003243r 1  85 37           STA PWOL_NEXT_ROW_B_LEFT_XH
003245r 1               
003245r 1  38              SEC ; flip A_RIGHT Y to B_LEFT Y
003246r 1  A9 00           LDA #0
003248r 1  E5 34           SBC PWOL_NEXT_ROW_A_RIGHT_YL
00324Ar 1  85 38           STA PWOL_NEXT_ROW_B_LEFT_YL
00324Cr 1  A9 00           LDA #0
00324Er 1  E5 35           SBC PWOL_NEXT_ROW_A_RIGHT_YH
003250r 1  85 39           STA PWOL_NEXT_ROW_B_LEFT_YH
003252r 1               
003252r 1                  ;  set up tub pointer
003252r 1  64 22            STZ PWOL_TUB_PTR_AL
003254r 1  AD rr rr         LDA camera_cell_y
003257r 1  4A               LSR  ;  y pages of 128
003258r 1  66 22            ROR PWOL_TUB_PTR_AL
00325Ar 1  4A               LSR  ; y pages of 64 !
00325Br 1  66 22            ROR PWOL_TUB_PTR_AL
00325Dr 1  69 rr            ADC #>TUB_WORLD
00325Fr 1  85 23            STA PWOL_TUB_PTR_AH
003261r 1  85 25            STA PWOL_TUB_PTR_BH
003263r 1  A5 22            LDA PWOL_TUB_PTR_AL
003265r 1  85 24            STA PWOL_TUB_PTR_BL
003267r 1               
003267r 1               
003267r 1  64 26            STZ PWOL_CURRENT_XL
003269r 1  A9 64            LDA #SCREEN_MID_X-8
00326Br 1  85 27            STA PWOL_CURRENT_XH
00326Dr 1               
00326Dr 1  AD rr rr         LDA camera_cell_x
003270r 1  85 40            STA PWOL_CONVERT_HEIGHTS
003272r 1               
003272r 1  64 28            STZ PWOL_CURRENT_YL
003274r 1  A9 4B            LDA #SCREEN_MID_Y-5
003276r 1  18               CLC
003277r 1  72 40            ADC (PWOL_CONVERT_HEIGHTS)
003279r 1  85 29            STA PWOL_CURRENT_YH
00327Br 1               
00327Br 1  AD rr rr         LDA camera_cell_xl
00327Er 1  4A               LSR
00327Fr 1  4A               LSR
003280r 1  4A               LSR
003281r 1  4A               LSR
003282r 1  38               SEC
003283r 1  E9 08            SBC #8
003285r 1  B0 22            BCS :++
003287r 1  29 07            AND #7
003289r 1  A8               TAY
00328Ar 1  A5 26          : LDA PWOL_CURRENT_XL
00328Cr 1  7D rr rr         ADC SUBCELL_X_COS_L,X
00328Fr 1  85 26            STA PWOL_CURRENT_XL
003291r 1  A5 27            LDA PWOL_CURRENT_XH
003293r 1  7D rr rr         ADC SUBCELL_X_COS_H,X
003296r 1  85 27            STA PWOL_CURRENT_XH
003298r 1               
003298r 1  A5 28            LDA PWOL_CURRENT_YL
00329Ar 1  FD rr rr         SBC SUBCELL_Y_SIN_L,X
00329Dr 1  85 28            STA PWOL_CURRENT_YL
00329Fr 1  A5 29            LDA PWOL_CURRENT_YH
0032A1r 1  FD rr rr         SBC SUBCELL_Y_SIN_H,X
0032A4r 1  85 29            STA PWOL_CURRENT_YH
0032A6r 1  88               DEY
0032A7r 1  D0 E1            BNE :-
0032A9r 1  F0 20          : BEQ :++
0032ABr 1  A8               TAY
0032ACr 1  A5 26          : LDA PWOL_CURRENT_XL
0032AEr 1  FD rr rr         SBC SUBCELL_X_COS_L,X
0032B1r 1  85 26            STA PWOL_CURRENT_XL
0032B3r 1  A5 27            LDA PWOL_CURRENT_XH
0032B5r 1  FD rr rr         SBC SUBCELL_X_COS_H,X
0032B8r 1  85 27            STA PWOL_CURRENT_XH
0032BAr 1               
0032BAr 1  A5 28            LDA PWOL_CURRENT_YL
0032BCr 1  7D rr rr         ADC SUBCELL_Y_SIN_L,X
0032BFr 1  85 28            STA PWOL_CURRENT_YL
0032C1r 1  A5 29            LDA PWOL_CURRENT_YH
0032C3r 1  7D rr rr         ADC SUBCELL_Y_SIN_H,X
0032C6r 1  85 29            STA PWOL_CURRENT_YH
0032C8r 1  88               DEY
0032C9r 1  D0 E1            BNE :-
0032CBr 1               
0032CBr 1  AD rr rr       : LDA camera_cell_yl
0032CEr 1  4A               LSR
0032CFr 1  4A               LSR
0032D0r 1  4A               LSR
0032D1r 1  4A               LSR
0032D2r 1  E9 08            SBC #8
0032D4r 1  B0 25            BCS :++
0032D6r 1  29 07            AND #7
0032D8r 1  A8               TAY
0032D9r 1  A5 28          : LDA PWOL_CURRENT_YL
0032DBr 1  7D rr rr         ADC SUBCELL_Y_COS_L,X
0032DEr 1  85 28            STA PWOL_CURRENT_YL
0032E0r 1  A5 29            LDA PWOL_CURRENT_YH
0032E2r 1  7D rr rr         ADC SUBCELL_Y_COS_H,X
0032E5r 1  85 29            STA PWOL_CURRENT_YH
0032E7r 1               
0032E7r 1  A5 26            LDA PWOL_CURRENT_XL
0032E9r 1  7D rr rr         ADC SUBCELL_X_SIN_L,X
0032ECr 1  85 26            STA PWOL_CURRENT_XL
0032EEr 1  A5 27            LDA PWOL_CURRENT_XH
0032F0r 1  7D rr rr         ADC SUBCELL_X_SIN_H,X
0032F3r 1  85 27            STA PWOL_CURRENT_XH
0032F5r 1  88               DEY
0032F6r 1  D0 E1            BNE :-
0032F8r 1  F0 20            BEQ :++
0032FAr 1  A8               TAY
0032FBr 1  A5 28          : LDA PWOL_CURRENT_YL
0032FDr 1  FD rr rr         SBC SUBCELL_Y_COS_L,X
003300r 1  85 28            STA PWOL_CURRENT_YL
003302r 1  A5 29            LDA PWOL_CURRENT_YH
003304r 1  FD rr rr         SBC SUBCELL_Y_COS_H,X
003307r 1  85 29            STA PWOL_CURRENT_YH
003309r 1  A5 26            LDA PWOL_CURRENT_XL
00330Br 1  FD rr rr         SBC SUBCELL_X_SIN_L,X
00330Er 1  85 26            STA PWOL_CURRENT_XL
003310r 1  A5 27            LDA PWOL_CURRENT_XH
003312r 1  FD rr rr         SBC SUBCELL_X_SIN_H,X
003315r 1  85 27            STA PWOL_CURRENT_XH
003317r 1  88               DEY
003318r 1  D0 E1            BNE :-
00331Ar 1                 :
00331Ar 1               
00331Ar 1  A5 26            LDA PWOL_CURRENT_XL
00331Cr 1  85 45            STA PWOL_START_XL
00331Er 1  A5 27            LDA PWOL_CURRENT_XH
003320r 1  85 47            STA PWOL_START_XH
003322r 1               
003322r 1  A5 28            LDA PWOL_CURRENT_YL
003324r 1  85 46            STA PWOL_START_YL
003326r 1  A5 29            LDA PWOL_CURRENT_YH
003328r 1  85 48            STA PWOL_START_YH
00332Ar 1               
00332Ar 1                 @zigzag_A: ; going to right and up the screen, including where we are currently..
00332Ar 1  AC rr rr           LDY camera_cell_x   ;  eh voila! we haz pointer to ze row to start on .. woot!
00332Dr 1                   @zigzag_A_right:
00332Dr 1  C0 40                CPY #64  ;  make sure we don't go outside level..
00332Fr 1  B0 44                BCS @ZAR_NEXT ; if we're outside we'll just skip is OK here
003331r 1  B1 22                LDA (PWOL_TUB_PTR_AL),y
003333r 1  C9 81                CMP #129
003335r 1  B0 3E                BCS @ZAR_NEXT ; this isn't a valid spot in the level map..
003337r 1               
003337r 1                       ; bytes 1 and 4 were updated when we cleared the object list
003337r 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
00333Ar 1  D0 04                BNE :++
00333Cr 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
00333Fr 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
003340r 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
003342r 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
003345r 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen...
003347r 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
003349r 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
00334Br 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
00334Er 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
003351r 1  8A                   TXA ; push new next to the Z buffer spot
003352r 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
003354r 1                       ; bytes .1..4.6 filled in already..
003354r 1               
003354r 1  9E rr rr             STZ OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway..
003357r 1  B1 22                LDA (PWOL_TUB_PTR_AL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
003359r 1  10 03                BPL @ZAR_INSIDE_TUB
00335Br 1                     @ZAR_HIT_WALL_OUCH:
00335Br 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
00335Er 1                     @ZAR_INSIDE_TUB:
00335Er 1  85 40                  STA PWOL_CONVERT_HEIGHTS; 0-128 valid as heights need convert to do sub though?
003360r 1                         ;STA PWOL_CONVERT_HEIGHTS_SECONDARY ; this would be check to see if we're "extra tall" - wall is set to 128, 26 pixels smaller than would be..
003360r 1  98                     TYA
003361r 1  29 0F                  AND #$0F
003363r 1  09 D0                  ORA #$D0 ; #$D0
003365r 1  9D rr rr               STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
003368r 1               
003368r 1  38                     SEC
003369r 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
00336Br 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
00336Dr 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
003370r 1                         ;LDA #$D0
003370r 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
003370r 1  A5 27                  LDA PWOL_CURRENT_XH
003372r 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
003375r 1                    @ZAR_NEXT:
003375r 1                        ; calc next to the right..
003375r 1  C8                    INY
003376r 1  18                    CLC
003377r 1  A5 26                 LDA PWOL_CURRENT_XL
003379r 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
00337Br 1  85 26                 STA PWOL_CURRENT_XL
00337Dr 1  A5 27                 LDA PWOL_CURRENT_XH
00337Fr 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
003381r 1  85 27                 STA PWOL_CURRENT_XH
003383r 1  AA                    TAX
003384r 1  18                    CLC
003385r 1  A5 28                 LDA PWOL_CURRENT_YL
003387r 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
003389r 1  85 28                 STA PWOL_CURRENT_YL
00338Br 1  A5 29                 LDA PWOL_CURRENT_YH
00338Dr 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
00338Fr 1  85 29                 STA PWOL_CURRENT_YH
003391r 1               
003391r 1  8E rr rr              STX DEBUG_A
003394r 1  8D rr rr              STA DEBUG_B
003397r 1               
003397r 1  E0 A4                 CPX #SCREEN_OUT_RIGHT
003399r 1  B0 0C                 BCS @ZAR_ZIG_LEFT_SWITCH
00339Br 1  E0 24                 CPX #SCREEN_OUT_LEFT
00339Dr 1  90 08                 BCC @ZAR_ZIG_LEFT_SWITCH
00339Fr 1  C9 18                 CMP #SCREEN_OUT_TOP
0033A1r 1  90 04                 BCC @ZAR_ZIG_LEFT_SWITCH
0033A3r 1  C9 88                 CMP #SCREEN_OUT_BOTTOM
0033A5r 1  90 86                 BCC @zigzag_A_right
0033A7r 1                    @ZAR_ZIG_LEFT_SWITCH: ;PWOL_NEXT_ROW_A_LEFT_XL   ; -> next row is left, going up the screen ..  +0,-1
0033A7r 1  A9 06                 LDA #TRY_AGAIN
0033A9r 1  85 44                 STA PWOL_TRIES_COUNTER
0033ABr 1               ;         INY
0033ABr 1  38                    SEC
0033ACr 1  A5 22                 LDA PWOL_TUB_PTR_AL
0033AEr 1  E9 40                 SBC #64 ;   0,-1
0033B0r 1  85 22                 STA PWOL_TUB_PTR_AL
0033B2r 1  A5 23                 LDA PWOL_TUB_PTR_AH
0033B4r 1  E9 00                 SBC #0
0033B6r 1  C9 rr                 CMP #>TUB_WORLD ; are we inside the world still?
0033B8r 1  B0 03                 BCS :+
0033BAr 1  4C rr rr              JMP @zigzag_B
0033BDr 1  85 23               : STA PWOL_TUB_PTR_AH
0033BFr 1               
0033BFr 1  18                    CLC
0033C0r 1  A5 26                 LDA PWOL_CURRENT_XL
0033C2r 1  65 2E                 ADC PWOL_NEXT_ROW_A_LEFT_XL
0033C4r 1  85 26                 STA PWOL_CURRENT_XL
0033C6r 1  A5 27                 LDA PWOL_CURRENT_XH
0033C8r 1  65 2F                 ADC PWOL_NEXT_ROW_A_LEFT_XH
0033CAr 1  85 27                 STA PWOL_CURRENT_XH
0033CCr 1  AA                    TAX
0033CDr 1  18                    CLC
0033CEr 1  A5 28                 LDA PWOL_CURRENT_YL
0033D0r 1  65 30                 ADC PWOL_NEXT_ROW_A_LEFT_YL
0033D2r 1  85 28                 STA PWOL_CURRENT_YL
0033D4r 1  A5 29                 LDA PWOL_CURRENT_YH
0033D6r 1  65 31                 ADC PWOL_NEXT_ROW_A_LEFT_YH
0033D8r 1  85 29                 STA PWOL_CURRENT_YH
0033DAr 1                        ; check if we're outside ..
0033DAr 1               
0033DAr 1  E0 A4                 CPX #SCREEN_OUT_RIGHT
0033DCr 1  B0 0C                 BCS @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
0033DEr 1  E0 24                 CPX #SCREEN_OUT_LEFT
0033E0r 1  90 08                 BCC @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
0033E2r 1  C9 18                 CMP #SCREEN_OUT_TOP
0033E4r 1  90 04                 BCC @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
0033E6r 1  C9 88                 CMP #SCREEN_OUT_BOTTOM
0033E8r 1  90 33                 BCC @zigzag_A_left
0033EAr 1                  @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN:
0033EAr 1  C6 44                 DEC PWOL_TRIES_COUNTER
0033ECr 1  D0 03                 BNE @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT
0033EEr 1  4C rr rr              JMP @zigzag_B
0033F1r 1                  @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT:
0033F1r 1  88                    DEY
0033F2r 1  38                    SEC
0033F3r 1  A5 26                 LDA PWOL_CURRENT_XL
0033F5r 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
0033F7r 1  85 26                 STA PWOL_CURRENT_XL
0033F9r 1  A5 27                 LDA PWOL_CURRENT_XH
0033FBr 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
0033FDr 1  85 27                 STA PWOL_CURRENT_XH
0033FFr 1  AA                    TAX
003400r 1  38                    SEC
003401r 1  A5 28                 LDA PWOL_CURRENT_YL
003403r 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
003405r 1  85 28                 STA PWOL_CURRENT_YL
003407r 1  A5 29                 LDA PWOL_CURRENT_YH
003409r 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
00340Br 1  85 29                 STA PWOL_CURRENT_YH
00340Dr 1  E0 A4                 CPX #SCREEN_OUT_RIGHT
00340Fr 1  B0 D9                 BCS @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
003411r 1  E0 24                 CPX #SCREEN_OUT_LEFT
003413r 1  90 D5                 BCC @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
003415r 1  C9 18                 CMP #SCREEN_OUT_TOP
003417r 1  90 D1                 BCC @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
003419r 1  C9 88                 CMP #SCREEN_OUT_BOTTOM
00341Br 1  B0 CD                 BCS @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
00341Dr 1                  @zigzag_A_left:
00341Dr 1  C0 40                CPY #64  ;  make sure we don't go outside level..
00341Fr 1  B0 44                BCS @ZAL_NEXT ; if we're outside we'll just skip is OK
003421r 1  B1 22                LDA (PWOL_TUB_PTR_AL),y
003423r 1  C9 81                CMP #129
003425r 1  B0 3E                BCS @ZAL_NEXT ; we're outside level.
003427r 1               
003427r 1                       ; bytes 1 and 4 were updated when we cleared the object list
003427r 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
00342Ar 1  D0 04                BNE :++
00342Cr 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
00342Fr 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
003430r 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
003432r 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
003435r 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen...
003437r 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
003439r 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
00343Br 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
00343Er 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
003441r 1  8A                   TXA ; push new next to the Z buffer spot
003442r 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
003444r 1                       ; bytes .1..4.6 filled in already..
003444r 1               
003444r 1  9E rr rr             STZ OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway..
003447r 1  B1 22                LDA (PWOL_TUB_PTR_AL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
003449r 1  10 03                BPL @ZAL_INSIDE_TUB
00344Br 1                     @ZAL_HIT_WALL_OUCH:
00344Br 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
00344Er 1                     @ZAL_INSIDE_TUB:
00344Er 1                         ;STA PWOL_CONVERT_HEIGHTS_SECONDARY ; this would be check to see if we're "extra tall" - wall is set to 128, 26 pixels smaller than would be..
00344Er 1  85 40                  STA PWOL_CONVERT_HEIGHTS; 0-128 valid as heights need convert to do sub though?
003450r 1  98                     TYA
003451r 1  29 0F                  AND #$0F
003453r 1  09 D0                  ORA #$D0 ; #$D0
003455r 1  9D rr rr               STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
003458r 1               
003458r 1  38                     SEC
003459r 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
00345Br 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
00345Dr 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
003460r 1                       ;  LDA #$D0
003460r 1                       ;  STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
003460r 1  A5 27                  LDA PWOL_CURRENT_XH
003462r 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
003465r 1                    @ZAL_NEXT:
003465r 1                        ; calc next to the LEFT
003465r 1  88                    DEY
003466r 1  38                    SEC
003467r 1  A5 26                 LDA PWOL_CURRENT_XL
003469r 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
00346Br 1  85 26                 STA PWOL_CURRENT_XL
00346Dr 1  A5 27                 LDA PWOL_CURRENT_XH
00346Fr 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
003471r 1  85 27                 STA PWOL_CURRENT_XH
003473r 1  AA                    TAX
003474r 1  38                    SEC
003475r 1  A5 28                 LDA PWOL_CURRENT_YL
003477r 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
003479r 1  85 28                 STA PWOL_CURRENT_YL
00347Br 1  A5 29                 LDA PWOL_CURRENT_YH
00347Dr 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
00347Fr 1  85 29                 STA PWOL_CURRENT_YH
003481r 1               
003481r 1  8E rr rr              STX DEBUG_A
003484r 1  8D rr rr              STA DEBUG_B
003487r 1               
003487r 1  E0 A4                 CPX #SCREEN_OUT_RIGHT
003489r 1  B0 0C                 BCS @ZAL_ZIG_RIGHT_SWITCH
00348Br 1  E0 24                 CPX #SCREEN_OUT_LEFT
00348Dr 1  90 08                 BCC @ZAL_ZIG_RIGHT_SWITCH
00348Fr 1  C9 18                 CMP #SCREEN_OUT_TOP
003491r 1  90 04                 BCC @ZAL_ZIG_RIGHT_SWITCH
003493r 1  C9 88                 CMP #SCREEN_OUT_BOTTOM
003495r 1  90 86                 BCC @zigzag_A_left
003497r 1                    @ZAL_ZIG_RIGHT_SWITCH: ; up/right is +1,+1  from where we is right now ..
003497r 1  A9 06                 LDA #TRY_AGAIN
003499r 1  85 44                 STA PWOL_TRIES_COUNTER
00349Br 1  C8                    INY
00349Cr 1  38                    SEC
00349Dr 1  A5 22                 LDA PWOL_TUB_PTR_AL
00349Fr 1  E9 40                 SBC #64
0034A1r 1  85 22                 STA PWOL_TUB_PTR_AL
0034A3r 1  A5 23                 LDA PWOL_TUB_PTR_AH
0034A5r 1  E9 00                 SBC #0
0034A7r 1  C9 rr                 CMP #>TUB_WORLD ; are we inside the world still?
0034A9r 1  B0 03                 BCS :+
0034ABr 1  4C rr rr              JMP @zigzag_B
0034AEr 1  85 23               : STA PWOL_TUB_PTR_AH
0034B0r 1               
0034B0r 1               
0034B0r 1  18                    CLC
0034B1r 1               
0034B1r 1  A5 26                 LDA PWOL_CURRENT_XL
0034B3r 1  65 32                 ADC PWOL_NEXT_ROW_A_RIGHT_XL
0034B5r 1  85 26                 STA PWOL_CURRENT_XL
0034B7r 1               
0034B7r 1  A5 27                 LDA PWOL_CURRENT_XH
0034B9r 1  65 33                 ADC PWOL_NEXT_ROW_A_RIGHT_XH
0034BBr 1  85 27                 STA PWOL_CURRENT_XH
0034BDr 1  AA                    TAX
0034BEr 1               
0034BEr 1               
0034BEr 1  18                    CLC
0034BFr 1  A5 28                 LDA PWOL_CURRENT_YL
0034C1r 1  65 34                 ADC PWOL_NEXT_ROW_A_RIGHT_YL
0034C3r 1  85 28                 STA PWOL_CURRENT_YL
0034C5r 1  A5 29                 LDA PWOL_CURRENT_YH
0034C7r 1  65 35                 ADC PWOL_NEXT_ROW_A_RIGHT_YH
0034C9r 1  85 29                 STA PWOL_CURRENT_YH
0034CBr 1               
0034CBr 1  E0 A4                 CPX #SCREEN_OUT_RIGHT
0034CDr 1  B0 0F                 BCS @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
0034CFr 1  E0 24                 CPX #SCREEN_OUT_LEFT
0034D1r 1  90 0B                 BCC @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
0034D3r 1  C9 18                 CMP #SCREEN_OUT_TOP
0034D5r 1  90 07                 BCC @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
0034D7r 1  C9 88                 CMP #SCREEN_OUT_BOTTOM
0034D9r 1  B0 03                 BCS @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
0034DBr 1  4C rr rr              JMP @zigzag_A_right
0034DEr 1                  @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN:
0034DEr 1  C6 44                 DEC PWOL_TRIES_COUNTER
0034E0r 1  F0 2F                 BEQ @zigzag_B
0034E2r 1                  @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN_GO_RIGHT:
0034E2r 1  C8                    INY
0034E3r 1  18                    CLC
0034E4r 1  A5 26                 LDA PWOL_CURRENT_XL
0034E6r 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
0034E8r 1  85 26                 STA PWOL_CURRENT_XL
0034EAr 1  A5 27                 LDA PWOL_CURRENT_XH
0034ECr 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
0034EEr 1  85 27                 STA PWOL_CURRENT_XH
0034F0r 1  AA                    TAX
0034F1r 1  18                    CLC
0034F2r 1  A5 28                 LDA PWOL_CURRENT_YL
0034F4r 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
0034F6r 1  85 28                 STA PWOL_CURRENT_YL
0034F8r 1  A5 29                 LDA PWOL_CURRENT_YH
0034FAr 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
0034FCr 1  85 29                 STA PWOL_CURRENT_YH
0034FEr 1               
0034FEr 1  E0 A4                 CPX #SCREEN_OUT_RIGHT
003500r 1  B0 DC                 BCS @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003502r 1  E0 24                 CPX #SCREEN_OUT_LEFT
003504r 1  90 D8                 BCC @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003506r 1  C9 18                 CMP #SCREEN_OUT_TOP
003508r 1  90 D4                 BCC @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
00350Ar 1  C9 88                 CMP #SCREEN_OUT_BOTTOM
00350Cr 1  B0 D0                 BCS @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
00350Er 1  4C rr rr              JMP @zigzag_A_right
003511r 1               
003511r 1               
003511r 1               
003511r 1                 @zigzag_B: ; going to left and down the screen, including where we are currently..
003511r 1                    ; RTS
003511r 1  38                 SEC
003512r 1  A5 45              LDA PWOL_START_XL
003514r 1  E5 2A              SBC PWOL_ACROSS_ROW_XL
003516r 1  85 26              STA PWOL_CURRENT_XL
003518r 1  A5 47              LDA PWOL_START_XH
00351Ar 1  E5 2B              SBC PWOL_ACROSS_ROW_XH
00351Cr 1  85 27              STA PWOL_CURRENT_XH
00351Er 1               
00351Er 1               
00351Er 1  38                 SEC
00351Fr 1  A5 46              LDA PWOL_START_YL
003521r 1  E5 2C              SBC PWOL_ACROSS_ROW_YL
003523r 1  85 28              STA PWOL_CURRENT_YL
003525r 1  A5 48              LDA PWOL_START_YH
003527r 1  E5 2D              SBC PWOL_ACROSS_ROW_YH
003529r 1  85 29              STA PWOL_CURRENT_YH
00352Br 1               
00352Br 1  AC rr rr           LDY camera_cell_x   ;  eh voila! we haz pointer to ze row to start on .. woot!
00352Er 1  88                 DEY ; start left
00352Fr 1               
00352Fr 1                  @zigzag_B_left:
00352Fr 1  C0 40                CPY #64  ;  make sure we don't go outside level..
003531r 1  B0 44                BCS @ZBL_NEXT ; if we're outside we'll just skip is OK
003533r 1  B1 24                LDA (PWOL_TUB_PTR_BL),y
003535r 1  C9 81                CMP #129
003537r 1  B0 3E                BCS @ZBL_NEXT ; we're outside level.
003539r 1               
003539r 1                       ; bytes 1 and 4 were updated when we cleared the object list
003539r 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
00353Cr 1  D0 04                BNE :++
00353Er 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
003541r 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
003542r 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
003544r 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
003547r 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen...
003549r 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
00354Br 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
00354Dr 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
003550r 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
003553r 1  8A                   TXA ; push new next to the Z buffer spot
003554r 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
003556r 1                       ; bytes .1..4.6 filled in already..
003556r 1               
003556r 1  9E rr rr             STZ OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway..
003559r 1  B1 24                LDA (PWOL_TUB_PTR_BL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
00355Br 1  10 03                BPL @ZBL_INSIDE_TUB
00355Dr 1                     @ZBL_HIT_WALL_OUCH:
00355Dr 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
003560r 1                     @ZBL_INSIDE_TUB:
003560r 1  85 40                  STA PWOL_CONVERT_HEIGHTS; 0-128 valid as heights need convert to do sub though?
003562r 1                         ;STA PWOL_CONVERT_HEIGHTS_SECONDARY ; this would be check to see if we're "extra tall" - wall is set to 128, 26 pixels smaller than would be..
003562r 1  98                     TYA
003563r 1  29 0F                  AND #$0F
003565r 1  09 D0                  ORA #$D0 ; #$D0
003567r 1  9D rr rr               STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
00356Ar 1               
00356Ar 1  38                     SEC
00356Br 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
00356Dr 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
00356Fr 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
003572r 1                       ;  LDA #$D0
003572r 1                       ;  STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
003572r 1  A5 27                  LDA PWOL_CURRENT_XH
003574r 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
003577r 1                    @ZBL_NEXT:
003577r 1                        ; calc next to the LEFT
003577r 1  88                    DEY
003578r 1  38                    SEC
003579r 1  A5 26                 LDA PWOL_CURRENT_XL
00357Br 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
00357Dr 1  85 26                 STA PWOL_CURRENT_XL
00357Fr 1  A5 27                 LDA PWOL_CURRENT_XH
003581r 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
003583r 1  85 27                 STA PWOL_CURRENT_XH
003585r 1  AA                    TAX
003586r 1  38                    SEC
003587r 1  A5 28                 LDA PWOL_CURRENT_YL
003589r 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
00358Br 1  85 28                 STA PWOL_CURRENT_YL
00358Dr 1  A5 29                 LDA PWOL_CURRENT_YH
00358Fr 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
003591r 1  85 29                 STA PWOL_CURRENT_YH
003593r 1               
003593r 1  8E rr rr              STX DEBUG_A
003596r 1  8D rr rr              STA DEBUG_B
003599r 1               
003599r 1  E0 A4                 CPX #SCREEN_OUT_RIGHT
00359Br 1  B0 0C                 BCS @ZBL_ZIG_RIGHT_SWITCH
00359Dr 1  E0 24                 CPX #SCREEN_OUT_LEFT
00359Fr 1  90 08                 BCC @ZBL_ZIG_RIGHT_SWITCH
0035A1r 1  C9 18                 CMP #SCREEN_OUT_TOP
0035A3r 1  90 04                 BCC @ZBL_ZIG_RIGHT_SWITCH
0035A5r 1  C9 88                 CMP #SCREEN_OUT_BOTTOM
0035A7r 1  90 86                 BCC @zigzag_B_left
0035A9r 1                    @ZBL_ZIG_RIGHT_SWITCH: ; DOWN/LEFT to start right is is 0,+1  from where we is right now ..
0035A9r 1                        ;INY
0035A9r 1                        ;INY
0035A9r 1  A9 06                 LDA #TRY_AGAIN
0035ABr 1  85 44                 STA PWOL_TRIES_COUNTER
0035ADr 1  18                    CLC
0035AEr 1  A5 24                 LDA PWOL_TUB_PTR_BL
0035B0r 1  69 40                 ADC #64
0035B2r 1  85 24                 STA PWOL_TUB_PTR_BL
0035B4r 1  A5 25                 LDA PWOL_TUB_PTR_BH
0035B6r 1  69 00                 ADC #0
0035B8r 1  C9 rr                 CMP #>TUB_WORLD+8
0035BAr 1  90 01                 BCC :+
0035BCr 1  60                    rts
0035BDr 1  85 25               : STA PWOL_TUB_PTR_BH
0035BFr 1               
0035BFr 1               
0035BFr 1  18                    CLC
0035C0r 1               
0035C0r 1  A5 26                 LDA PWOL_CURRENT_XL
0035C2r 1  65 3A                 ADC PWOL_NEXT_ROW_B_RIGHT_XL
0035C4r 1  85 26                 STA PWOL_CURRENT_XL
0035C6r 1               
0035C6r 1  A5 27                 LDA PWOL_CURRENT_XH
0035C8r 1  65 3B                 ADC PWOL_NEXT_ROW_B_RIGHT_XH
0035CAr 1  85 27                 STA PWOL_CURRENT_XH
0035CCr 1  AA                    TAX
0035CDr 1               
0035CDr 1               
0035CDr 1  18                    CLC
0035CEr 1  A5 28                 LDA PWOL_CURRENT_YL
0035D0r 1  65 3C                 ADC PWOL_NEXT_ROW_B_RIGHT_YL
0035D2r 1  85 28                 STA PWOL_CURRENT_YL
0035D4r 1  A5 29                 LDA PWOL_CURRENT_YH
0035D6r 1  65 3D                 ADC PWOL_NEXT_ROW_B_RIGHT_YH
0035D8r 1  85 29                 STA PWOL_CURRENT_YH
0035DAr 1               
0035DAr 1  E0 A4                 CPX #SCREEN_OUT_RIGHT
0035DCr 1  B0 0F                 BCS @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
0035DEr 1  E0 24                 CPX #SCREEN_OUT_LEFT
0035E0r 1  90 0B                 BCC @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
0035E2r 1  C9 18                 CMP #SCREEN_OUT_TOP
0035E4r 1  90 07                 BCC @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
0035E6r 1  C9 88                 CMP #SCREEN_OUT_BOTTOM
0035E8r 1  B0 03                 BCS @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
0035EAr 1  4C rr rr              JMP @zigzag_B_right
0035EDr 1                  @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN:
0035EDr 1  C6 44                 DEC PWOL_TRIES_COUNTER
0035EFr 1  D0 01                 BNE @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN_GO_RIGHT
0035F1r 1                  @ZBL_RTS:
0035F1r 1  60                 rts
0035F2r 1                  @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN_GO_RIGHT:
0035F2r 1  C8                    INY
0035F3r 1  18                    CLC
0035F4r 1  A5 26                 LDA PWOL_CURRENT_XL
0035F6r 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
0035F8r 1  85 26                 STA PWOL_CURRENT_XL
0035FAr 1  A5 27                 LDA PWOL_CURRENT_XH
0035FCr 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
0035FEr 1  85 27                 STA PWOL_CURRENT_XH
003600r 1  AA                    TAX
003601r 1  18                    CLC
003602r 1  A5 28                 LDA PWOL_CURRENT_YL
003604r 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
003606r 1  85 28                 STA PWOL_CURRENT_YL
003608r 1  A5 29                 LDA PWOL_CURRENT_YH
00360Ar 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
00360Cr 1  85 29                 STA PWOL_CURRENT_YH
00360Er 1               
00360Er 1  E0 A4                 CPX #SCREEN_OUT_RIGHT
003610r 1  B0 DB                 BCS @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003612r 1  E0 24                 CPX #SCREEN_OUT_LEFT
003614r 1  90 D7                 BCC @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003616r 1  C9 18                 CMP #SCREEN_OUT_TOP
003618r 1  90 D3                 BCC @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
00361Ar 1  C9 88                 CMP #SCREEN_OUT_BOTTOM
00361Cr 1  B0 CF                 BCS @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
00361Er 1               
00361Er 1                   @zigzag_B_right:
00361Er 1  C0 40                CPY #64  ;  make sure we don't go outside level..
003620r 1  B0 44                BCS @ZBR_NEXT ; if we're outside we'll just skip is OK
003622r 1  B1 24                LDA (PWOL_TUB_PTR_BL),y
003624r 1  C9 81                CMP #129
003626r 1  B0 3E                BCS @ZBR_NEXT ; we're outside level.
003628r 1               
003628r 1                       ; bytes 1 and 4 were updated when we cleared the object list
003628r 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
00362Br 1  D0 04                BNE :++
00362Dr 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
003630r 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
003631r 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
003633r 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
003636r 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen...
003638r 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
00363Ar 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
00363Cr 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
00363Fr 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
003642r 1  8A                   TXA ; push new next to the Z buffer spot
003643r 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
003645r 1                       ; bytes .1..4.6 filled in already..
003645r 1               
003645r 1  9E rr rr             STZ OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway..
003648r 1  B1 24                LDA (PWOL_TUB_PTR_BL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
00364Ar 1  10 03                BPL @ZBR_INSIDE_TUB
00364Cr 1                     @ZBR_HIT_WALL_OUCH:
00364Cr 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
00364Fr 1                     @ZBR_INSIDE_TUB:
00364Fr 1  85 40                  STA PWOL_CONVERT_HEIGHTS; 0-128 valid as heights need convert to do sub though?
003651r 1                         ;STA PWOL_CONVERT_HEIGHTS_SECONDARY ; this would be check to see if we're "extra tall" - wall is set to 128, 26 pixels smaller than would be..
003651r 1  98                     TYA
003652r 1  29 0F                  AND #$0F
003654r 1  09 D0                  ORA #$D0 ; #$D0
003656r 1  9D rr rr               STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
003659r 1               
003659r 1  38                     SEC
00365Ar 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
00365Cr 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
00365Er 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
003661r 1                         ;LDA #$D0
003661r 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
003661r 1  A5 27                  LDA PWOL_CURRENT_XH
003663r 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
003666r 1                    @ZBR_NEXT:
003666r 1                        ; calc next to the right..
003666r 1  C8                    INY
003667r 1  18                    CLC
003668r 1  A5 26                 LDA PWOL_CURRENT_XL
00366Ar 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
00366Cr 1  85 26                 STA PWOL_CURRENT_XL
00366Er 1  A5 27                 LDA PWOL_CURRENT_XH
003670r 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
003672r 1  85 27                 STA PWOL_CURRENT_XH
003674r 1  AA                    TAX
003675r 1  18                    CLC
003676r 1  A5 28                 LDA PWOL_CURRENT_YL
003678r 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
00367Ar 1  85 28                 STA PWOL_CURRENT_YL
00367Cr 1  A5 29                 LDA PWOL_CURRENT_YH
00367Er 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
003680r 1  85 29                 STA PWOL_CURRENT_YH
003682r 1               
003682r 1  8E rr rr              STX DEBUG_A
003685r 1  8D rr rr              STA DEBUG_B
003688r 1               
003688r 1  E0 A4                 CPX #SCREEN_OUT_RIGHT
00368Ar 1  B0 0C                 BCS @ZBR_ZIG_LEFT_SWITCH
00368Cr 1  E0 24                 CPX #SCREEN_OUT_LEFT
00368Er 1  90 08                 BCC @ZBR_ZIG_LEFT_SWITCH
003690r 1  C9 18                 CMP #SCREEN_OUT_TOP
003692r 1  90 04                 BCC @ZBR_ZIG_LEFT_SWITCH
003694r 1  C9 88                 CMP #SCREEN_OUT_BOTTOM
003696r 1  90 86                 BCC @zigzag_B_right
003698r 1                    @ZBR_ZIG_LEFT_SWITCH: ;PWOL_NEXT_ROW_A_LEFT_XL   ; -> next row is left, going down the screen ..  +1,+1
003698r 1  A9 06                 LDA #TRY_AGAIN
00369Ar 1  85 44                 STA PWOL_TRIES_COUNTER
00369Cr 1  88                   DEY ; have to go this to match where the thing is going .. 0,0
00369Dr 1  18                    CLC
00369Er 1  A5 24                 LDA PWOL_TUB_PTR_BL
0036A0r 1  69 40                 ADC #64 ;   0,-1
0036A2r 1  85 24                 STA PWOL_TUB_PTR_BL
0036A4r 1  A5 25                 LDA PWOL_TUB_PTR_BH
0036A6r 1  69 00                 ADC #0
0036A8r 1  C9 rr                 CMP #>TUB_WORLD+8
0036AAr 1  90 01                 BCC :+
0036ACr 1  60                    rts
0036ADr 1  85 25               : STA PWOL_TUB_PTR_BH
0036AFr 1               
0036AFr 1  18                    CLC
0036B0r 1  A5 26                 LDA PWOL_CURRENT_XL
0036B2r 1  65 36                 ADC PWOL_NEXT_ROW_B_LEFT_XL
0036B4r 1  85 26                 STA PWOL_CURRENT_XL
0036B6r 1  A5 27                 LDA PWOL_CURRENT_XH
0036B8r 1  65 37                 ADC PWOL_NEXT_ROW_B_LEFT_XH
0036BAr 1  85 27                 STA PWOL_CURRENT_XH
0036BCr 1  AA                    TAX
0036BDr 1  18                    CLC
0036BEr 1  A5 28                 LDA PWOL_CURRENT_YL
0036C0r 1  65 38                 ADC PWOL_NEXT_ROW_B_LEFT_YL
0036C2r 1  85 28                 STA PWOL_CURRENT_YL
0036C4r 1  A5 29                 LDA PWOL_CURRENT_YH
0036C6r 1  65 39                 ADC PWOL_NEXT_ROW_B_LEFT_YH
0036C8r 1  85 29                 STA PWOL_CURRENT_YH
0036CAr 1                        ; check if we're outside ..
0036CAr 1               
0036CAr 1  E0 A4                 CPX #SCREEN_OUT_RIGHT
0036CCr 1  B0 0F                 BCS @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
0036CEr 1  E0 24                 CPX #SCREEN_OUT_LEFT
0036D0r 1  90 0B                 BCC @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
0036D2r 1  C9 18                 CMP #SCREEN_OUT_TOP
0036D4r 1  90 07                 BCC @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
0036D6r 1  C9 88                 CMP #SCREEN_OUT_BOTTOM
0036D8r 1  B0 03                 BCS @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
0036DAr 1  4C rr rr              jmp @zigzag_B_left
0036DDr 1                  @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN:
0036DDr 1  C6 44                 DEC PWOL_TRIES_COUNTER
0036DFr 1  D0 01                 BNE @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT
0036E1r 1                  @ZBR_RTS:
0036E1r 1  60                    rts
0036E2r 1                  @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT:
0036E2r 1  88                    DEY
0036E3r 1  38                    SEC
0036E4r 1  A5 26                 LDA PWOL_CURRENT_XL
0036E6r 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
0036E8r 1  85 26                 STA PWOL_CURRENT_XL
0036EAr 1  A5 27                 LDA PWOL_CURRENT_XH
0036ECr 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
0036EEr 1  85 27                 STA PWOL_CURRENT_XH
0036F0r 1  AA                    TAX
0036F1r 1  38                    SEC
0036F2r 1  A5 28                 LDA PWOL_CURRENT_YL
0036F4r 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
0036F6r 1  85 28                 STA PWOL_CURRENT_YL
0036F8r 1  A5 29                 LDA PWOL_CURRENT_YH
0036FAr 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
0036FCr 1  85 29                 STA PWOL_CURRENT_YH
0036FEr 1  E0 A4                 CPX #SCREEN_OUT_RIGHT
003700r 1  B0 DB                 BCS @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
003702r 1  E0 24                 CPX #SCREEN_OUT_LEFT
003704r 1  90 D7                 BCC @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
003706r 1  C9 18                 CMP #SCREEN_OUT_TOP
003708r 1  90 D3                 BCC @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
00370Ar 1  C9 88                 CMP #SCREEN_OUT_BOTTOM
00370Cr 1  B0 CF                 BCS @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
00370Er 1  4C rr rr              JMP @zigzag_B_left
003711r 1               
003711r 1               draw_object_list:
003711r 1  9C 25 9F         STZ VERA_ctrl
003714r 1  9C 20 9F         STZ VERA_addr_low
003717r 1  A9 FD            lda #(>VRAM_sprite_attributes)+1
003719r 1  8D 21 9F         sta VERA_addr_high
00371Cr 1  A9 11            lda #$11
00371Er 1  8D 22 9F         sta VERA_addr_bank
003721r 1  64 22            STZ ZP_PTR
003723r 1  A9 rr            LDA #>OBJECT_LIST_Z_START_POINTERS
003725r 1  85 23            STA ZP_PTR+1
003727r 1  A0 60            LDY #96 ; num sprites can write
003729r 1                 @NEXT_Z: ; Z=0 is invalid...
003729r 1  E6 22              INC ZP_PTR
00372Br 1  D0 1C              BNE @Z_LOOP
00372Dr 1  AD 23 9F           : LDA VERA_data0
003730r 1  AD 23 9F             LDA VERA_data0
003733r 1  9C 23 9F             STZ VERA_data0
003736r 1  9C 23 9F             STZ VERA_data0
003739r 1  AD 23 9F             LDA VERA_data0
00373Cr 1  AD 23 9F             LDA VERA_data0
00373Fr 1  AD 23 9F             LDA VERA_data0
003742r 1  AD 23 9F             LDA VERA_data0
003745r 1  88                   DEY
003746r 1  D0 E5                BNE :-
003748r 1               
003748r 1  60                 rts
003749r 1                 @Z_LOOP:
003749r 1  B2 22              LDA (ZP_PTR) ; get our first victim
00374Br 1  AA                 TAX
00374Cr 1  A9 00              LDA #0
00374Er 1  92 22              STA (ZP_PTR) ; zero this Z_next for now
003750r 1  8A                 TXA
003751r 1                    @OBJ_LOOP:
003751r 1  AA                    TAX
003752r 1  F0 D5                 BEQ @NEXT_Z ; got a bum next pointer there ...
003754r 1  BD rr rr              LDA OBJECT_LIST_BYTE0_ADDRLOW,X
003757r 1  8D 23 9F              STA VERA_data0
00375Ar 1  BD rr rr              LDA OBJECT_LIST_BYTE1_MODE,x
00375Dr 1  8D 23 9F              STA VERA_data0
003760r 1  BD rr rr              LDA OBJECT_LIST_BYTE2_X,x
003763r 1  8D 23 9F              STA VERA_data0
003766r 1               ;         CMP #216
003766r 1                 ;       LDA #0
003766r 1                ;        BCC :+
003766r 1                ;        LDA #$FF
003766r 1                 ;     : STA VERA_data0
003766r 1  9C 23 9F              STZ VERA_data0
003769r 1  BD rr rr              LDA OBJECT_LIST_BYTE3_Y,x
00376Cr 1  8D 23 9F              STA VERA_data0
00376Fr 1               ;         CMP #161
00376Fr 1                ;        LDA #0
00376Fr 1                 ;       BCC :+
00376Fr 1                  ;      LDA #$FF
00376Fr 1                   ;   : STA VERA_data0
00376Fr 1  9C 23 9F              STZ VERA_data0
003772r 1  BD rr rr              LDA OBJECT_LIST_BYTE4_ZFLIPS,x
003775r 1  8D 23 9F              STA VERA_data0
003778r 1  BD rr rr              LDA OBJECT_LIST_BYTE5_SIZE,x
00377Br 1  8D 23 9F              STA VERA_data0
00377Er 1  BD rr rr              LDA OBJECT_LIST_BYTE6_NEXT,x
003781r 1  88                    DEY ; decrement that Y
003782r 1  D0 CD                 BNE @OBJ_LOOP ; still sprite slots left.. woot!
003784r 1  92 22                 STA (ZP_PTR) ; oops.. save that last thing and exit..
003786r 1  60                    RTS
003787r 1               
003787r 1               
003787r 1               
003787r 1               test_sprite_data:
003787r 1               ; first 16 sprites reserved ...
003787r 1               ;      0   1   2   3   4   5   6  7
003787r 1               ;     add,mod, XL, XH, YL, YH,msk,hwp
003787r 1  42 00 64 00  .byte  66,$00,100,  0,72,  0,$0C,$50  ;  cursor middle - 8x8  sprite 0
00378Br 1  48 00 0C 50  
00378Fr 1  10 00 0C 00  .byte  16,$00, 12,  0,  0,  0,$0C,$30  ;  border top - 64x8    sprite 1
003793r 1  00 00 0C 30  
003797r 1  10 00 4C 00  .byte  16,$00, 76,  0,SCREEN_OUT_TOP,  0,$0C,$30  ;  border top - 64x8    sprite 2
00379Br 1  18 00 0C 30  
00379Fr 1  10 00 8C 00  .byte  16,$00,140,  0,  0,  0,$0C,$30  ;  border top - 64x8    sprite 3
0037A3r 1  00 00 0C 30  
0037A7r 1               
0037A7r 1  10 00 0C 00  .byte  16,$00, 12,  0,153,  0,$0F,$30  ;  border bottom - 64x8  sprite 4
0037ABr 1  99 00 0F 30  
0037AFr 1  10 00 4C 00  .byte  16,$00, 76,  0,SCREEN_OUT_BOTTOM,  0,$0F,$30  ;  border bottom - 64x8  sprite 5
0037B3r 1  88 00 0F 30  
0037B7r 1  10 00 8C 00  .byte  16,$00,140,  0,153,  0,$0F,$30  ;  border bottom - 64x8  sprite 6
0037BBr 1  99 00 0F 30  
0037BFr 1               
0037BFr 1  10 00 00 00  .byte  16,$00,  0,  0, 16,  0,$0C,$C0  ;  border left    8x64   sprite 7
0037C3r 1  10 00 0C C0  
0037C7r 1  10 00 2C 00  .byte  16,$00,SCREEN_OUT_LEFT+8,  0, 80,  0,$0C,$C0  ;  border left    8x64   sprite 8
0037CBr 1  50 00 0C C0  
0037CFr 1  10 00 D0 00  .byte  16,$00,208,  0, 16,  0,$0F,$C0  ;  border left    8x64   sprite 9
0037D3r 1  10 00 0F C0  
0037D7r 1  10 00 A4 00  .byte  16,$00,SCREEN_OUT_RIGHT,  0, 80,  0,$0F,$C0  ;  border left    8x64   sprite A
0037DBr 1  50 00 0F C0  
0037DFr 1  31 00 8C 00  .byte  49,$00,140,  0,109,  0,$0C,$00  ; sprite B   bearing  Label
0037E3r 1  6D 00 0C 00  
0037E7r 1               ;.byte  58,$00,140,  0,118,  0,$0c,$30  ; sprite C   WORLD
0037E7r 1               ;.byte  50,$00,140,  0,136,  0,$0c,$30  ; sprite D   Cell
0037E7r 1  21 00 94 00  .byte  33,$00,148,  0,109,  0,$0C,$00  ; 0 test    sprite 0E   bearing
0037EBr 1  6D 00 0C 00  
0037EFr 1  22 00 9C 00  .byte  34,$00,156,  0,109,  0,$0C,$00  ; 1 test    sprite 0F
0037F3r 1  6D 00 0C 00  
0037F7r 1  27 00 8C 00  .byte  39,$00,140,  0,127,  0,$0C,$00  ; 6 test    sprite 10   world XH
0037FBr 1  7F 00 0C 00  
0037FFr 1  28 00 94 00  .byte  40,$00,148,  0,127,  0,$0C,$00  ; 7 test    sprite 11
003803r 1  7F 00 0C 00  
003807r 1  29 00 9C 00  .byte  41,$00,156,  0,127,  0,$0C,$00  ; 8 test    sprite 12   world Xl
00380Br 1  7F 00 0C 00  
00380Fr 1  2A 00 A4 00  .byte  42,$00,164,  0,127,  0,$0C,$00  ; 9 test    sprite 13
003813r 1  7F 00 0C 00  
003817r 1  2B 00 B0 00  .byte  43,$00,176,  0,127,  0,$0C,$00  ; A test    sprite 14   world YH
00381Br 1  7F 00 0C 00  
00381Fr 1  2C 00 B8 00  .byte  44,$00,184,  0,127,  0,$0C,$00  ; B test    sprite 15
003823r 1  7F 00 0C 00  
003827r 1  2D 00 C0 00  .byte  45,$00,192,  0,127,  0,$0C,$00  ; C test    sprite 16   world Yl
00382Br 1  7F 00 0C 00  
00382Fr 1  2E 00 C8 00  .byte  46,$00,200,  0,127,  0,$0C,$00  ; D test    sprite 17
003833r 1  7F 00 0C 00  
003837r 1  23 00 8C 00  .byte  35,$00,140,  0,145,  0,$0C,$00  ; 2 test    sprite 18   Cell X
00383Br 1  91 00 0C 00  
00383Fr 1  24 00 94 00  .byte  36,$00,148,  0,145,  0,$0C,$00  ; 3 test    sprite 19
003843r 1  91 00 0C 00  
003847r 1  2F 00 9C 00  .byte  47,$00,156,  0,145,  0,$0C,$00  ; E test    sprite 1A   X Subcell
00384Br 1  91 00 0C 00  
00384Fr 1  2F 00 A4 00  .byte  47,$00,164,  0,145,  0,$0C,$00  ; E test    sprite 1A
003853r 1  91 00 0C 00  
003857r 1  25 00 B0 00  .byte  37,$00,176,  0,100,  0,$0C,$00  ; 4 test    sprite 1C   DEBUG_A
00385Br 1  64 00 0C 00  
00385Fr 1  26 00 B8 00  .byte  38,$00,184,  0,100,  0,$0C,$00  ; 5 test    sprite 1D
003863r 1  64 00 0C 00  
003867r 1  30 00 C0 00  .byte  48,$00,192,  0,100,  0,$0C,$00  ; F test    sprite 1E   DEBUG_B
00386Br 1  64 00 0C 00  
00386Fr 1  30 00 C8 00  .byte  48,$00,200,  0,100,  0,$0C,$00  ; F test    sprite 1F
003873r 1  64 00 0C 00  
003877r 1  21 00 C0 00  .byte  33,$00,192,  0, 91,  0,$0C,$00  ; 0 test    sprite 0E   DEBUG_C
00387Br 1  5B 00 0C 00  
00387Fr 1  21 00 C8 00  .byte  33,$00,200,  0, 91,  0,$0C,$00  ; 0 test    sprite 0E
003883r 1  5B 00 0C 00  
003887r 1               
003887r 1               test_optimal_pal_data:
003887r 1               ;      GB   R  $1:FA00-$1:FBFF   VERA Color Palette (256 x 2 bytes)
003887r 1  00 00        .byte $00,$00  ; 0 - black/transparent
003889r 1  C8 0F        .byte $c8,$0f  ; 1 #ffcc88
00388Br 1               
00388Br 1  04 06        .byte $04,$06  ; 2 #660044
00388Dr 1  00 0C        .byte $00,$0C  ; 3  #cc0000
00388Fr 1  F0 0C        .byte $F0,$0C  ; 4#ccff00
003891r 1  42 03        .byte $42,$03
003893r 1  60 0C        .byte $60,$0c   ; 6  #cc6600
003895r 1  40 08        .byte $40,$08   ; 7 #884400
003897r 1  C0 0C        .byte $c0,$0c   ; 8 #cccc00
003899r 1  6A 02        .byte $6a,$02   ; 9 #2266aa mid blue
00389Br 1  C0 00        .byte $c0,$00   ; A #00cc00
00389Dr 1  AC 07        .byte $ac,$07   ; B #77aacc light blue
00389Fr 1  C0 00        .byte $c0,$00   ; C #0000c0 dark blue
0038A1r 1  0C 0C        .byte $0c,$0c   ; D #cc00cc
0038A3r 1  88 08        .byte $88,$08   ; E #888888
0038A5r 1  22 02        .byte $22,$02   ; F #222222
0038A7r 1               
0038A7r 1               test_vram_data:
0038A7r 1               test_cell_sprite: 	;	is 16x64x16 bit = 512 bytes   sprite addr = 0
0038A7r 1               ; 	   01   23   45   67   89   AB   CD   EF
0038A7r 1  CC C9 CC C9  .byte $CC, $C9, $CC, $C9, $CC, $C9, $CC, $C0    ;  0
0038ABr 1  CC C9 CC C0  
0038AFr 1  09 9B 99 9B  .byte $09, $9B, $99, $9B, $99, $9B, $99, $9C    ;  1
0038B3r 1  99 9B 99 9C  
0038B7r 1  CB BC BB BC  .byte $CB, $BC, $BB, $BC, $BB, $BC, $BB, $B0    ;  2
0038BBr 1  BB BC BB B0  
0038BFr 1  0C C9 CC C9  .byte $0C, $C9, $CC, $C9, $CC, $C9, $CC, $CC    ;  3
0038C3r 1  CC C9 CC CC  
0038C7r 1  C9 9B 99 9B  .byte $C9, $9B, $99, $9B, $99, $9B, $99, $90    ;  4
0038CBr 1  99 9B 99 90  
0038CFr 1  0B BC BB BC  .byte $0B, $BC, $BB, $BC, $BB, $BC, $BB, $BC    ;  5
0038D3r 1  BB BC BB BC  
0038D7r 1  CC C9 CC C9  .byte $CC, $C9, $CC, $C9, $CC, $C9, $CC, $C0    ;  6
0038DBr 1  CC C9 CC C0  
0038DFr 1  09 9B 99 9B  .byte $09, $9B, $99, $9B, $99, $9B, $99, $9C    ;  7
0038E3r 1  99 9B 99 9C  
0038E7r 1  CB BC BB BC  .byte $CB, $BC, $BB, $BC, $BB, $BC, $BB, $B0    ;  8 ; 45* is 9.5 ..
0038EBr 1  BB BC BB B0  
0038EFr 1  0C 09 0C 09  .byte $0C, $09, $0C, $09, $0C, $09, $0C, $0C    ;  9
0038F3r 1  0C 09 0C 0C  
0038F7r 1  09 90 09 90  .byte $09, $90, $09, $90, $09, $90, $09, $90   ;  10
0038FBr 1  09 90 09 90  
0038FFr 1  0E 9E E9 9E  .byte $0E, $9E, $E9, $9E, $E9, $9E, $E9, $9E   ;  11
003903r 1  E9 9E E9 9E  
003907r 1               
003907r 1  EE EE EE EE  .repeat 13
00390Br 1  EE EE EE E0  
00390Fr 1  0E EE 66 EE  
003AA7r 1                   .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $E0    ;  12
003AA7r 1                   .byte $0E, $EE, $66, $EE, $EE, $66, $EE, $EE    ;
003AA7r 1                   .byte $EE, $66, $EE, $66, $66, $EE, $66, $E0    ;
003AA7r 1                   .byte $06, $EE, $EE, $EE, $EE, $EE, $EE, $66    ;
003AA7r 1               .endrepeat
003AA7r 1               
003AA7r 1               test_border:
003AA7r 1  0B 0B 0B 0B  .repeat 64
003AABr 1  B0 B0 B0 B0  
003AAFr 1  0B 0B 0B 0B  
003CA7r 1                  .res 4, $0B
003CA7r 1                  .res 4, $B0
003CA7r 1               .endrepeat
003CA7r 1               
003CA7r 1               test_cross_hair_8x8:    ;  8x8x16 color = 32 bytes ; sprite 32
003CA7r 1               ;     01   23   45   67
003CA7r 1  11 00 00 11  .byte $11, $00, $00, $11
003CABr 1  10 00 00 01  .byte $10, $00, $00, $01
003CAFr 1  00 00 00 00  .byte $00, $00, $00, $00
003CB3r 1  00 01 10 00  .byte $00, $01, $10, $00
003CB7r 1  00 01 10 00  .byte $00, $01, $10, $00
003CBBr 1  00 00 00 00  .byte $00, $00, $00, $00
003CBFr 1  10 00 00 01  .byte $10, $00, $00, $01
003CC3r 1  11 00 00 11  .byte $11, $00, $00, $11
003CC7r 1               
003CC7r 1               HEX_DISPLAY_FONT:       ; 8x8x16 color = 32 bytes ... sprite addr 33+ ($0440)
003CC7r 1               ;     01   23   45   67
003CC7r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 0
003CCBr 1  01 00 00 10  .byte $01, $00, $00, $10
003CCFr 1  01 00 00 10  .byte $01, $00, $00, $10
003CD3r 1  00 00 00 00  .byte $00, $00, $00, $00
003CD7r 1  01 00 00 10  .byte $01, $00, $00, $10
003CDBr 1  01 00 00 10  .byte $01, $00, $00, $10
003CDFr 1  01 00 00 10  .byte $01, $00, $00, $10
003CE3r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 0 /
003CE7r 1               
003CE7r 1  00 00 00 00  .byte $00, $00, $00, $00 ; 1
003CEBr 1  00 00 00 10  .byte $00, $00, $00, $10
003CEFr 1  00 00 00 10  .byte $00, $00, $00, $10
003CF3r 1  00 00 00 00  .byte $00, $00, $00, $00
003CF7r 1  00 00 00 10  .byte $00, $00, $00, $10
003CFBr 1  00 00 00 10  .byte $00, $00, $00, $10
003CFFr 1  00 00 00 10  .byte $00, $00, $00, $10
003D03r 1  00 00 00 00  .byte $00, $00, $00, $00
003D07r 1               
003D07r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 2
003D0Br 1  00 00 00 10  .byte $00, $00, $00, $10
003D0Fr 1  00 00 00 10  .byte $00, $00, $00, $10
003D13r 1  00 11 11 00  .byte $00, $11, $11, $00
003D17r 1  01 00 00 00  .byte $01, $00, $00, $00
003D1Br 1  01 00 00 00  .byte $01, $00, $00, $00
003D1Fr 1  01 00 00 00  .byte $01, $00, $00, $00
003D23r 1  00 11 11 00  .byte $00, $11, $11, $00
003D27r 1               
003D27r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 3
003D2Br 1  00 00 00 10  .byte $00, $00, $00, $10
003D2Fr 1  00 00 00 10  .byte $00, $00, $00, $10
003D33r 1  00 11 11 00  .byte $00, $11, $11, $00
003D37r 1  00 00 00 10  .byte $00, $00, $00, $10
003D3Br 1  00 00 00 10  .byte $00, $00, $00, $10
003D3Fr 1  00 00 00 10  .byte $00, $00, $00, $10
003D43r 1  00 11 11 00  .byte $00, $11, $11, $00
003D47r 1               
003D47r 1  00 00 00 00  .byte $00, $00, $00, $00   ; 4
003D4Br 1  01 00 00 10  .byte $01, $00, $00, $10
003D4Fr 1  01 00 00 10  .byte $01, $00, $00, $10
003D53r 1  00 11 11 00  .byte $00, $11, $11, $00
003D57r 1  00 00 00 10  .byte $00, $00, $00, $10
003D5Br 1  00 00 00 10  .byte $00, $00, $00, $10
003D5Fr 1  00 00 00 10  .byte $00, $00, $00, $10
003D63r 1  00 00 00 00  .byte $00, $00, $00, $00
003D67r 1               
003D67r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 5
003D6Br 1  01 00 00 00  .byte $01, $00, $00, $00
003D6Fr 1  01 00 00 00  .byte $01, $00, $00, $00
003D73r 1  00 11 11 00  .byte $00, $11, $11, $00
003D77r 1  00 00 00 10  .byte $00, $00, $00, $10
003D7Br 1  00 00 00 10  .byte $00, $00, $00, $10
003D7Fr 1  00 00 00 10  .byte $00, $00, $00, $10
003D83r 1  00 11 11 00  .byte $00, $11, $11, $00
003D87r 1               
003D87r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 6
003D8Br 1  01 00 00 00  .byte $01, $00, $00, $00
003D8Fr 1  01 00 00 00  .byte $01, $00, $00, $00
003D93r 1  00 11 11 00  .byte $00, $11, $11, $00
003D97r 1  01 00 00 10  .byte $01, $00, $00, $10
003D9Br 1  01 00 00 10  .byte $01, $00, $00, $10
003D9Fr 1  01 00 00 10  .byte $01, $00, $00, $10
003DA3r 1  00 11 11 00  .byte $00, $11, $11, $00
003DA7r 1               
003DA7r 1  00 01 01 00  .byte $00, $01, $01, $00 ; 7
003DABr 1  00 00 00 10  .byte $00, $00, $00, $10
003DAFr 1  00 00 00 10  .byte $00, $00, $00, $10
003DB3r 1  00 00 00 00  .byte $00, $00, $00, $00
003DB7r 1  00 00 00 10  .byte $00, $00, $00, $10
003DBBr 1  00 00 00 10  .byte $00, $00, $00, $10
003DBFr 1  00 00 00 10  .byte $00, $00, $00, $10
003DC3r 1  00 00 00 00  .byte $00, $00, $00, $00
003DC7r 1               
003DC7r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 8
003DCBr 1  01 00 00 10  .byte $01, $00, $00, $10
003DCFr 1  01 00 00 10  .byte $01, $00, $00, $10
003DD3r 1  00 11 11 00  .byte $00, $11, $11, $00
003DD7r 1  01 00 00 10  .byte $01, $00, $00, $10
003DDBr 1  01 00 00 10  .byte $01, $00, $00, $10
003DDFr 1  01 00 00 10  .byte $01, $00, $00, $10
003DE3r 1  00 11 11 00  .byte $00, $11, $11, $00
003DE7r 1               
003DE7r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 9
003DEBr 1  01 00 00 10  .byte $01, $00, $00, $10
003DEFr 1  01 00 00 10  .byte $01, $00, $00, $10
003DF3r 1  00 11 11 00  .byte $00, $11, $11, $00
003DF7r 1  00 00 00 10  .byte $00, $00, $00, $10
003DFBr 1  00 00 00 10  .byte $00, $00, $00, $10
003DFFr 1  00 00 00 10  .byte $00, $00, $00, $10
003E03r 1  00 11 11 00  .byte $00, $11, $11, $00
003E07r 1               
003E07r 1  00 11 11 00  .byte $00, $11, $11, $00   ; A
003E0Br 1  01 00 00 10  .byte $01, $00, $00, $10
003E0Fr 1  01 00 00 10  .byte $01, $00, $00, $10
003E13r 1  00 11 11 00  .byte $00, $11, $11, $00
003E17r 1  01 00 00 10  .byte $01, $00, $00, $10
003E1Br 1  01 00 00 10  .byte $01, $00, $00, $10
003E1Fr 1  01 00 00 10  .byte $01, $00, $00, $10
003E23r 1  00 00 00 00  .byte $00, $00, $00, $00
003E27r 1               
003E27r 1               
003E27r 1  00 00 00 00  .byte $00, $00, $00, $00   ; B
003E2Br 1  01 00 00 00  .byte $01, $00, $00, $00
003E2Fr 1  01 00 00 00  .byte $01, $00, $00, $00
003E33r 1  00 11 11 00  .byte $00, $11, $11, $00
003E37r 1  01 00 00 10  .byte $01, $00, $00, $10
003E3Br 1  01 00 00 10  .byte $01, $00, $00, $10
003E3Fr 1  01 00 00 10  .byte $01, $00, $00, $10
003E43r 1  00 11 11 00  .byte $00, $11, $11, $00
003E47r 1               
003E47r 1  00 11 11 00  .byte $00, $11, $11, $00   ; C
003E4Br 1  01 00 00 00  .byte $01, $00, $00, $00
003E4Fr 1  01 00 00 00  .byte $01, $00, $00, $00
003E53r 1  00 00 00 00  .byte $00, $00, $00, $00
003E57r 1  01 00 00 00  .byte $01, $00, $00, $00
003E5Br 1  01 00 00 00  .byte $01, $00, $00, $00
003E5Fr 1  01 00 00 00  .byte $01, $00, $00, $00
003E63r 1  00 11 11 00  .byte $00, $11, $11, $00
003E67r 1               
003E67r 1  00 00 00 00  .byte $00, $00, $00, $00   ; D
003E6Br 1  00 00 00 10  .byte $00, $00, $00, $10
003E6Fr 1  00 00 00 10  .byte $00, $00, $00, $10
003E73r 1  00 11 11 00  .byte $00, $11, $11, $00
003E77r 1  01 00 00 10  .byte $01, $00, $00, $10
003E7Br 1  01 00 00 10  .byte $01, $00, $00, $10
003E7Fr 1  01 00 00 10  .byte $01, $00, $00, $10
003E83r 1  00 11 11 00  .byte $00, $11, $11, $00
003E87r 1               
003E87r 1  00 11 11 00  .byte $00, $11, $11, $00   ; E
003E8Br 1  01 00 00 00  .byte $01, $00, $00, $00
003E8Fr 1  01 00 00 00  .byte $01, $00, $00, $00
003E93r 1  00 11 11 00  .byte $00, $11, $11, $00
003E97r 1  01 00 00 00  .byte $01, $00, $00, $00
003E9Br 1  01 00 00 00  .byte $01, $00, $00, $00
003E9Fr 1  01 00 00 00  .byte $01, $00, $00, $00
003EA3r 1  00 11 11 00  .byte $00, $11, $11, $00
003EA7r 1               
003EA7r 1  00 11 11 00  .byte $00, $11, $11, $00   ; F   sprite addr 48
003EABr 1  01 00 00 00  .byte $01, $00, $00, $00
003EAFr 1  01 00 00 00  .byte $01, $00, $00, $00
003EB3r 1  00 11 11 00  .byte $00, $11, $11, $00
003EB7r 1  01 00 00 00  .byte $01, $00, $00, $00
003EBBr 1  01 00 00 00  .byte $01, $00, $00, $00
003EBFr 1  01 00 00 00  .byte $01, $00, $00, $00
003EC3r 1  00 00 00 00  .byte $00, $00, $00, $00
003EC7r 1               
003EC7r 1  00 00 00 00  .byte $00, $00, $00, $00  ;  bearing label   sprite addr 49
003ECBr 1  00 00 01 00  .byte $00, $00, $01, $00
003ECFr 1  00 00 10 00  .byte $00, $00, $10, $00
003ED3r 1  00 01 00 00  .byte $00, $01, $00, $00
003ED7r 1  00 10 00 00  .byte $00, $10, $00, $00
003EDBr 1  01 00 00 00  .byte $01, $00, $00, $00
003EDFr 1  11 11 11 00  .byte $11, $11, $11, $00
003EE3r 1  00 00 00 00  .byte $00, $00, $00, $00
003EE7r 1               
003EE7r 1               ; cell position label sprite addr 50-57
003EE7r 1  00 FF 00 FF  .byte $00,$FF,$00,$FF,$FF,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
003EEBr 1  FF 00 FF 00  
003EEFr 1  00 FF 00 00  
003F07r 1  FF 00 00 FF  .byte $FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
003F0Br 1  00 00 FF 00  
003F0Fr 1  00 FF 00 00  
003F27r 1  FF 00 00 FF  .byte $FF,$00,$00,$FF,$FF,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
003F2Br 1  FF 00 FF 00  
003F2Fr 1  00 FF 00 00  
003F47r 1  FF 00 00 FF  .byte $FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
003F4Br 1  00 00 FF 00  
003F4Fr 1  00 FF 00 00  
003F67r 1  00 FF 00 FF  .byte $00,$FF,$00,$FF,$FF,$00,$FF,$FF,$00,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
003F6Br 1  FF 00 FF FF  
003F6Fr 1  00 FF FF 00  
003F87r 1               ;      01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF
003F87r 1               ;     XH                               $XL                            ___  __  YH                              YL
003F87r 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$00,$00,$10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00
003F8Br 1  00 00 00 00  
003F8Fr 1  10 10 10 00  
003FA7r 1  01 00 11 10  .byte $01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00
003FABr 1  00 00 00 00  
003FAFr 1  01 00 10 00  
003FC7r 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$11,$10,$00,$00,$00,$00,$00,$00,$01,$00,$10,$10,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00
003FCBr 1  00 00 00 00  
003FCFr 1  10 10 11 10  
003FE7r 1               
003FE7r 1               ; world position label 58-65
003FE7r 1               ;     XH                 $XL                  ___  ___  YH                  YL
003FE7r 1  FF 00 00 00  .byte $FF,$00,$00,$00,$FF,$00,$00,$FF,$00,$00,$FF,$FF,$00,$00,$FF,$00,$00,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
003FEBr 1  FF 00 00 FF  
003FEFr 1  00 00 FF FF  
004007r 1  FF 00 00 00  .byte $FF,$00,$00,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$00,$FF,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00400Br 1  FF 00 FF 00  
00400Fr 1  FF 00 FF 00  
004027r 1  FF 00 FF 00  .byte $FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$FF,$00,$00,$FF,$00,$00,$FF,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00402Br 1  FF 00 FF 00  
00402Fr 1  FF 00 FF FF  
004047r 1  FF 00 FF 00  .byte $FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$00,$FF,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00404Br 1  FF 00 FF 00  
00404Fr 1  FF 00 FF 00  
004067r 1  00 FF 00 FF  .byte $00,$FF,$00,$FF,$00,$00,$00,$FF,$00,$00,$FF,$00,$FF,$00,$FF,$FF,$00,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00406Br 1  00 00 00 FF  
00406Fr 1  00 00 FF 00  
004087r 1               ;      01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF
004087r 1               ;     XH                               $XL                            ___  __  YH                              YL
004087r 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$00,$00,$10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00
00408Br 1  00 00 00 00  
00408Fr 1  10 10 10 00  
0040A7r 1  01 00 11 10  .byte $01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00
0040ABr 1  00 00 00 00  
0040AFr 1  01 00 10 00  
0040C7r 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$11,$10,$00,$00,$00,$00,$00,$00,$01,$00,$10,$10,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00
0040CBr 1  00 00 00 00  
0040CFr 1  10 10 11 10  
0040E7r 1               
0040E7r 1               ; directional cursor reminder... 16x16 - 66-69
0040E7r 1               
0040E7r 1  00 10 00 10  .byte $00, $10, $00, $10, $01, $11, $11, $00
0040EBr 1  01 11 11 00  
0040EFr 1  00 10 00 10  .byte $00, $10, $00, $10, $01, $00, $00, $00
0040F3r 1  01 00 00 00  
0040F7r 1  00 10 10 10  .byte $00, $10, $10, $10, $01, $11, $00, $00
0040FBr 1  01 11 00 00  
0040FFr 1  00 10 10 10  .byte $00, $10, $10, $10, $01, $00, $00, $00
004103r 1  01 00 00 00  
004107r 1  00 01 01 00  .byte $00, $01, $01, $00, $01, $11, $11, $00
00410Br 1  01 11 11 00  
00410Fr 1  00 00 00 00  .byte $00, $00, $00, $00, $00, $00, $00, $00
004113r 1  00 00 00 00  
004117r 1  01 11 00 00  .byte $01, $11, $00, $00, $00, $01, $11, $00
00411Br 1  00 01 11 00  
00411Fr 1  10 00 10 01  .byte $10, $00, $10, $01, $10, $01, $00, $01
004123r 1  10 01 00 01  
004127r 1  11 11 10 01  .byte $11, $11, $10, $01, $10, $01, $00, $01
00412Br 1  10 01 00 01  
00412Fr 1  10 00 10 00  .byte $10, $00, $10, $00, $00, $01, $11, $10
004133r 1  00 01 11 10  
004137r 1  00 00 00 00  .byte $00, $00, $00, $00, $00, $00, $00, $00
00413Br 1  00 00 00 00  
00413Fr 1  00 11 11 10  .byte $00, $11, $11, $10, $01, $00, $01, $00
004143r 1  01 00 01 00  
004147r 1  00 00 01 00  .byte $00, $00, $01, $00, $00, $10, $10, $00
00414Br 1  00 10 10 00  
00414Fr 1  00 00 10 00  .byte $00, $00, $10, $00, $00, $01, $00, $00
004153r 1  00 01 00 00  
004157r 1  00 01 00 00  .byte $00, $01, $00, $00, $00, $10, $10, $00
00415Br 1  00 10 10 00  
00415Fr 1  00 11 11 10  .byte $00, $11, $11, $10, $01, $00, $01, $00
004163r 1  01 00 01 00  
004167r 1               
004167r 1  80 80 80 80  .repeat 58 ; 128-70
00416Br 1  80 80 80 80  
00416Fr 1  80 80 80 80  
0048A7r 1                   .res 32,$80
0048A7r 1               .endrepeat
0048A7r 1               
0048A7r 1               ; alernate tile graphic to use for tub wall .. 128 to 159 16x64
0048A7r 1  16 16 16 16  .repeat 32
0048ABr 1  16 16 16 16  
0048AFr 1  61 61 61 61  
0048A7r 1                   .byte $16, $16, $16, $16, $16, $16, $16, $16
0048A7r 1                   .byte $61, $61, $61, $61, $61, $61, $61, $61
0048A7r 1               .endrepeat
0048A7r 1               
