ca65 V2.19 - Git 8e6c0c1
Main file   : hex.s
Current file: hex.s

000000r 1               ; 	080D
000000r 1  4C rr rr     jmp start ; 	3 bytes
000003r 1               ;	0810 	- 240 bytes available for stuff that doesn't need alignment
000003r 1  DE AD BE EF  .repeat 28
000007r 1  DE AD BE EF  
00000Br 1  DE AD BE EF  
000073r 1               	.byte $DE,$AD,$BE,$EF
000073r 1               .endrepeat
000073r 1               SCRATCH128:
000073r 1  DE AD BE EF  .repeat 32
000077r 1  DE AD BE EF  
00007Br 1  DE AD BE EF  
0000F3r 1               	.byte $DE,$AD,$BE,$EF
0000F3r 1               .endrepeat
0000F3r 1               
0000F3r 1               ACROSS_ROW_X_L: ; 0900  16 wide , 45* tilt ... this is added to go up row, sub for down row
0000F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0000F3r 1  00 FE FB F4  .byte
0000F7r 1  EC E1 D3 C3  
0000FBr 1  B1 9C 85 6B  
0001F3r 1               
0001F3r 1               ACROSS_ROW_X_H: ; 0A00
0001F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0001F3r 1  10 0F 0F 0F  .byte $10, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $E, $E, $E, $E, $E, $E, $D, $D, $D, $D, $D, $C, $C, $C, $C, $B, $B, $B, $B, $A, $A, $A, $9, $9, $9, $8, $8, $8, $7, $7, $7, $6, $6, $6, $5, $5, $5, $4, $4, $3, $3, $3, $2, $2, $1, $1, $1, $0, $0, $0, $FF, $FF, $FE, $FE, $FE, $FD, $FD, $FC, $FC, $FC, $FB, $FB, $FA, $FA, $FA, $F9, $F9, $F9, $F8, $F8, $F8, $F7, $F7, $F7, $F6, $F6, $F6, $F5, $F5, $F5, $F4, $F4, $F4, $F4, $F3, $F3, $F3, $F3, $F2, $F2, $F2, $F2, $F2, $F1, $F1, $F1, $F1, $F1, $F1, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F1, $F1, $F1, $F1, $F1, $F1, $F2, $F2, $F2, $F2, $F2, $F3, $F3, $F3, $F3, $F4, $F4, $F4, $F4, $F5, $F5, $F5, $F6, $F6, $F6, $F7, $F7, $F7, $F8, $F8, $F8, $F9, $F9, $F9, $FA, $FA, $FA, $FB, $FB, $FC, $FC, $FC, $FD, $FD, $FE, $FE, $FE, $FF, $FF, $00, $0, $0, $1, $1, $1, $2, $2, $3, $3, $3, $4, $4, $5, $5, $5, $6, $6, $6, $7, $7, $7, $8, $8, $8, $9, $9, $9, $A, $A, $A, $B, $B, $B, $B, $C, $C, $C, $C, $D, $D, $D, $D, $D, $E, $E, $E, $E, $E, $E, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F
0001F7r 1  0F 0F 0F 0F  
0001FBr 1  0F 0F 0F 0F  
0002F3r 1               
0002F3r 1               ACROSS_ROW_Y_L: ; 0B00
0002F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0002F3r 1  00 B8 71 2A  .byte $0,$B8,$71,$2A,$E4,$9D,$57,$10,$CA,$85,$40,$FB,$B7,$73,$30,$ED,$AB,$6A,$29,$E9,$AA,$6C,$2E,$F2,$B6,$7C,$42,$A,$D2,$9C,$66,$32,$0,$CE,$9D,$6E,$41,$14,$E9,$C0,$97,$71,$4B,$27,$5,$E4,$C5,$A8,$8C,$71,$58,$41,$2C,$18,$6,$F6,$E7,$DA,$CF,$C5,$BD,$B7,$B3,$B0,$AF,$B0,$B3,$B7,$BD,$C5,$CF,$DA,$E7,$F6,$6,$18,$2C,$41,$58,$71,$8C,$A8,$C5,$E4,$5,$27,$4B,$71,$97,$C0,$E9,$14,$41,$6E,$9D,$CE,$0,$32,$66,$9C,$D2,$A,$42,$7C,$B6,$F2,$2E,$6C,$AA,$E9,$29,$6A,$AB,$ED,$30,$73,$B7,$FB,$40,$85,$CA,$10,$57,$9D,$E4,$2A,$71,$B8,$0,$47,$8E,$D5,$1B,$62,$A8,$EF,$35,$7A,$BF,$4,$48,$8C,$CF,$12,$54,$95,$D6,$16,$55,$93,$D1,$D,$49,$83,$BD,$F5,$2D,$63,$99,$CD,$0,$31,$62,$91,$BE,$EB,$16,$3F,$68,$8E,$B4,$D8,$FA,$1B,$3A,$57,$73,$8E,$A7,$BE,$D3,$E7,$F9,$9,$18,$25,$30,$3A,$42,$48,$4C,$4F,$50,$4F,$4C,$48,$42,$3A,$30,$25,$18,$9,$F9,$E7,$D3,$BE,$A7,$8E,$73,$57,$3A,$1B,$FA,$D8,$B4,$8E,$68,$3F,$16,$EB,$BE,$91,$62,$31,$0,$CD,$99,$63,$2D,$F5,$BD,$83,$49,$D,$D1,$93,$55,$16,$D6,$95,$54,$12,$CF,$8C,$48,$4,$BF,$7A,$35,$EF,$A8,$62,$1B,$D5,$8E,$47
0002F7r 1  E4 9D 57 10  
0002FBr 1  CA 85 40 FB  
0003F3r 1               
0003F3r 1               ACROSS_ROW_Y_H: ; 0C00
0003F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0003F3r 1  00 FF FF FF  .byte $0,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F9,$F8,$F8,$F8,$F8,$F8,$F7,$F7,$F7,$F7,$F7,$F6,$F6,$F6,$F6,$F6,$F6,$F6,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F6,$F6,$F6,$F6,$F6,$F6,$F6,$F7,$F7,$F7,$F7,$F7,$F8,$F8,$F8,$F8,$F8,$F9,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$00,$0,$0,$0,$1,$1,$1,$1,$2,$2,$2,$3,$3,$3,$3,$4,$4,$4,$4,$5,$5,$5,$5,$6,$6,$6,$6,$6,$7,$7,$7,$7,$8,$8,$8,$8,$8,$8,$9,$9,$9,$9,$9,$9,$9,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$9,$9,$9,$9,$9,$9,$9,$8,$8,$8,$8,$8,$8,$7,$7,$7,$7,$6,$6,$6,$6,$6,$5,$5,$5,$5,$4,$4,$4,$4,$3,$3,$3,$3,$2,$2,$2,$1,$1,$1,$1,$0,$0,$0
0003F7r 1  FE FE FE FE  
0003FBr 1  FD FD FD FC  
0004F3r 1               
0004F3r 1               NEXT_ROW_X_L: ; 0D00 next row LEFT/up when added
0004F3r 1  00 A9 54 00  .byte
0004F7r 1  AE 5D 0D BF  
0004FBr 1  73 28 DF 98  
0005F3r 1               
0005F3r 1               NEXT_ROW_X_H: ; 0E00
0005F3r 1  F8 F7 F7 F7  .byte
0005F7r 1  F6 F6 F6 F5  
0005FBr 1  F5 F5 F4 F4  
0006F3r 1               
0006F3r 1               NEXT_ROW_Y_L: ; 0F00
0006F3r 1  33 58 7D A5  .byte $33,$58,$7D,$A5,$CD,$F7,$23,$50,$7E,$AD,$DE,$10,$44,$78,$AE,$E4,$1C,$55,$8F,$CA,$6,$43,$81,$BF,$FE,$3F,$7F,$C1,$3,$46,$8A,$CD,$12,$57,$9C,$E2,$28,$6E,$B4,$FB,$42,$89,$D0,$17,$5E,$A5,$EC,$33,$7A,$C0,$6,$4C,$91,$D6,$1B,$5F,$A2,$E6,$28,$6A,$AB,$EB,$2B,$6A,$A8,$E5,$21,$5C,$97,$D0,$8,$3F,$75,$AA,$DE,$10,$41,$71,$A0,$CD,$F9,$24,$4D,$75,$9B,$C0,$E3,$5,$25,$44,$61,$7C,$96,$AE,$C5,$DA,$ED,$FF,$F,$1D,$29,$34,$3D,$44,$4A,$4D,$4F,$50,$4E,$4B,$46,$3F,$37,$2D,$21,$13,$4,$F3,$E0,$CC,$B6,$9E,$85,$6A,$4E,$30,$10,$EF,$CC,$A7,$82,$5A,$32,$8,$DC,$AF,$81,$52,$21,$EF,$BB,$87,$51,$1B,$E3,$AA,$70,$35,$F9,$BC,$7E,$40,$1,$C0,$80,$3E,$FC,$B9,$75,$32,$ED,$A8,$63,$1D,$D7,$91,$4B,$4,$BD,$76,$2F,$E8,$A1,$5A,$13,$CC,$85,$3F,$F9,$B3,$6E,$29,$E4,$A0,$5D,$19,$D7,$95,$54,$14,$D4,$95,$57,$1A,$DE,$A3,$68,$2F,$F7,$C0,$8A,$55,$21,$EF,$BE,$8E,$5F,$32,$6,$DB,$B2,$8A,$64,$3F,$1C,$FA,$DA,$BB,$9E,$83,$69,$51,$3A,$25,$12,$0,$F0,$E2,$D6,$CB,$C2,$BB,$B5,$B2,$B0,$AF,$B1,$B4,$B9,$C0,$C8,$D2,$DE,$EC,$FB,$C,$1F,$33,$49,$61,$7A,$95,$B1,$CF,$EF,$10
0006F7r 1  CD F7 23 50  
0006FBr 1  7E AD DE 10  
0007F3r 1               
0007F3r 1               NEXT_ROW_Y_H: ; 1000
0007F3r 1  F6 F6 F6 F6  .byte $F6,$F6,$F6,$F6,$F6,$F6,$F7,$F7,$F7,$F7,$F7,$F8,$F8,$F8,$F8,$F8,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$0,$0,$0,$0,$1,$1,$1,$2,$2,$2,$2,$3,$3,$3,$3,$4,$4,$4,$4,$5,$5,$5,$5,$6,$6,$6,$6,$7,$7,$7,$7,$7,$8,$8,$8,$8,$8,$8,$9,$9,$9,$9,$9,$9,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$9,$9,$9,$9,$9,$9,$9,$8,$8,$8,$8,$8,$7,$7,$7,$7,$7,$6,$6,$6,$6,$5,$5,$5,$5,$5,$4,$4,$4,$3,$3,$3,$3,$2,$2,$2,$2,$1,$1,$1,$1,$0,$0,$0,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F8,$F8,$F8,$F8,$F8,$F7,$F7,$F7,$F7,$F7,$F7,$F6,$F6,$F6,$F6,$F6,$F6,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F6
0007F7r 1  F6 F6 F7 F7  
0007FBr 1  F7 F7 F7 F8  
0008F3r 1               
0008F3r 1               WORLD_TO_CELL_XH: ; 1100
0008F3r 1  00 00 01 02  .byte 0,0,1,2,3,4,5,6,6,7,8,9,10,11,12,12,13,14,15,16,17,18,19,19,20,21,22,23,24,25,25,26,27,28,29,30,31,32,32,33,34,35,36,37,38,38,39,40,41,42,43,44,45,45,46,47,48,49,50,51,51,52,53,54,55,56,57,58,58,59,60,61,62,63,64,64,65,66,67,68,69,70,71,71,72,73,74,75,76,77,77,78,79,80,81,82,83,84,84,85,86,87,88,89,90,90,91,92,93,94,95,96,96,97,98,99,100,101,102,103,103,104,105,106,107,108,109,109,110,111,112,113,114,115,116,116,117,118,119,120,121,122,122,123,124,125,126,127,128,129,129,130,131,132,133,134,135,135,136,137,138,139,140,141,142,142,143,144,145,146,147,148,148,149,150,151,152,153,154,155,155,156,157,158,159,160,161,161,162,163,164,165,166,167,168,168,169,170,171,172,173,174,174,175,176,177,178,179,180,180,181,182,183,184,185,186,187,187,188,189,190,191,192,193,193,194,195,196,197,198,199,200,200,201,202,203,204,205,206,206,207,208,209,210,211,212,213,213,214,215,216,217,218,219,219,220
0008F7r 1  03 04 05 06  
0008FBr 1  06 07 08 09  
0009F3r 1               WORLD_TO_CELL_XL: ; 1200
0009F3r 1  00 DD BB 99  .byte 0,221,187,153,118,84,50,15,237,203,169,134,100,66,31,253,219,184,150,116,82,47,13,235,200,166,132,97,63,29,251,216,182,148,113,79,45,10,232,198,164,129,95,61,26,248,214,180,145,111,77,42,8,230,195,161,127,93,58,24,246,211,177,143,108,74,40,6,227,193,159,124,90,56,21,243,209,175,140,106,72,37,3,225,191,156,122,88,53,19,241,206,172,138,104,69,35,1,222,188,154,119,85,51,17,238,204,170,135,101,67,32,254,220,186,151,117,83,48,14,236,202,167,133,99,64,30,252,217,183,149,115,80,46,12,233,199,165,130,96,62,28,249,215,181,146,112,78,43,9,231,197,162,128,94,59,25,247,212,178,144,110,75,41,7,228,194,160,126,91,57,23,244,210,176,141,107,73,39,4,226,192,157,123,89,54,20,242,208,173,139,105,70,36,2,223,189,155,121,86,52,18,239,205,171,137,102,68,34,255,221,187,152,118,84,50,15,237,203,168,134,100,65,31,253,219,184,150,116,81,47,13,234,200,166,132,97,63,29,250,216,182,148,113,79,45,10,232,198,163,129,95,61,26,248,214
0009F7r 1  76 54 32 0F  
0009FBr 1  ED CB A9 86  
000AF3r 1               CELL_TO_WORLD_XH: ; 1300 ; 128 bytes
000AF3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,8,9,10,11,12,13,15,16,17,18,19,20,21,23,24,25,26,27,28,30,31,32,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,50,51,53,54,55,56,57,58,60,61,62,63,64,65,66,68,69,70,71,72,73,75,76,77,78,79,80,81,83,84,85,86,87,88,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,112,113,114,115,116,117,118,120,121,122,123,124,125,127,128,129,130,131,132,133,135,136,137,138,139,140,142,143,144,145,146
000AF7r 1  04 05 06 08  
000AFBr 1  09 0A 0B 0C  
000B73r 1               CELL_TO_WORLD_XL: ; 1380 ; 128 bytes
000B73r 1  00 27 4F 76  .byte 0,39,79,118,158,198,237,21,60,100,140,179,219,2,42,82,121,161,200,240,24,63,103,142,182,222,5,45,84,124,164,203,243,26,66,106,145,185,224,8,48,87,127,166,206,246,29,69,108,148,188,227,11,50,90,130,169,209,248,32,72,111,151,191,230,14,53,93,133,172,212,251,35,75,114,154,193,233,17,56,96,135,175,215,254,38,77,117,157,196,236,19,59,99,138,178,217,1,41,80,120,159,199,239,22,62,101,141,181,220,4,43,83,123,162,202,241,25,65,104,144,184,223,7,46,86,126,165
000B77r 1  9E C6 ED 15  
000B7Br 1  3C 64 8C B3  
000BF3r 1               
000BF3r 1               CELL_LOW_TO_WORLD_XH: ; 1400
000BF3r 1  00 00 00 00  .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
000BF7r 1  00 00 00 00  
000BFBr 1  00 00 00 00  
000CF3r 1               CELL_LOW_TO_WORLD_XL: ; 1500
000CF3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,8,9,10,11,12,13,15,16,17,18,19,20,21,23,24,25,26,27,28,30,31,32,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,50,51,53,54,55,56,57,58,60,61,62,63,64,65,66,68,69,70,71,72,73,75,76,77,78,79,80,81,83,84,85,86,87,88,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,112,113,114,115,116,117,118,120,121,122,123,124,125,127,128,129,130,131,132,133,135,136,137,138,139,140,142,143,144,145,146,147,148,150,151,152,153,154,155,157,158,159,160,161,162,163,165,166,167,168,169,170,172,173,174,175,176,177,178,180,181,182,183,184,185,187,188,189,190,191,192,193,195,196,197,198,199,200,202,203,204,205,206,207,209,210,211,212,213,214,215,217,218,219,220,221,222,224,225,226,227,228,229,230,232,233,234,235,236,237,239,240,241,242,243,244,245,247,248,249,250,251,252,254,255,0,1,2,3,4,6,7,8,9,10,11,13,14,15,16,17,18,19,21,22,23,24,25,26,28,29,30,31,32,33,34,36,37,38
000CF7r 1  04 05 06 08  
000CFBr 1  09 0A 0B 0C  
000DF3r 1               
000DF3r 1               SPRITE_NUM_HIGH_NIBBLE: ; 1600
000DF3r 1  00 00 00 00  .res 16, 0
000DF7r 1  00 00 00 00  
000DFBr 1  00 00 00 00  
000E03r 1  01 01 01 01  .res 16, 1
000E07r 1  01 01 01 01  
000E0Br 1  01 01 01 01  
000E13r 1  02 02 02 02  .res 16, 2
000E17r 1  02 02 02 02  
000E1Br 1  02 02 02 02  
000E23r 1  03 03 03 03  .res 16, 3
000E27r 1  03 03 03 03  
000E2Br 1  03 03 03 03  
000E33r 1  04 04 04 04  .res 16, 4
000E37r 1  04 04 04 04  
000E3Br 1  04 04 04 04  
000E43r 1  05 05 05 05  .res 16, 5
000E47r 1  05 05 05 05  
000E4Br 1  05 05 05 05  
000E53r 1  06 06 06 06  .res 16, 6
000E57r 1  06 06 06 06  
000E5Br 1  06 06 06 06  
000E63r 1  07 07 07 07  .res 16, 7
000E67r 1  07 07 07 07  
000E6Br 1  07 07 07 07  
000E73r 1  08 08 08 08  .res 16, 8
000E77r 1  08 08 08 08  
000E7Br 1  08 08 08 08  
000E83r 1  09 09 09 09  .res 16, 9
000E87r 1  09 09 09 09  
000E8Br 1  09 09 09 09  
000E93r 1  0A 0A 0A 0A  .res 16, 10
000E97r 1  0A 0A 0A 0A  
000E9Br 1  0A 0A 0A 0A  
000EA3r 1  0B 0B 0B 0B  .res 16, 11
000EA7r 1  0B 0B 0B 0B  
000EABr 1  0B 0B 0B 0B  
000EB3r 1  0C 0C 0C 0C  .res 16, 12
000EB7r 1  0C 0C 0C 0C  
000EBBr 1  0C 0C 0C 0C  
000EC3r 1  0D 0D 0D 0D  .res 16, 13
000EC7r 1  0D 0D 0D 0D  
000ECBr 1  0D 0D 0D 0D  
000ED3r 1  0E 0E 0E 0E  .res 16, 14
000ED7r 1  0E 0E 0E 0E  
000EDBr 1  0E 0E 0E 0E  
000EE3r 1  0F 0F 0F 0F  .res 16, 15
000EE7r 1  0F 0F 0F 0F  
000EEBr 1  0F 0F 0F 0F  
000EF3r 1               
000EF3r 1               SPRITE_NUM_LOW_NIBBLE: ; 1700
000EF3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000EF7r 1  04 05 06 07  
000EFBr 1  08 09 0A 0B  
000F03r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000F07r 1  04 05 06 07  
000F0Br 1  08 09 0A 0B  
000F13r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000F17r 1  04 05 06 07  
000F1Br 1  08 09 0A 0B  
000F23r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000F27r 1  04 05 06 07  
000F2Br 1  08 09 0A 0B  
000F33r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000F37r 1  04 05 06 07  
000F3Br 1  08 09 0A 0B  
000F43r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000F47r 1  04 05 06 07  
000F4Br 1  08 09 0A 0B  
000F53r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000F57r 1  04 05 06 07  
000F5Br 1  08 09 0A 0B  
000F63r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000F67r 1  04 05 06 07  
000F6Br 1  08 09 0A 0B  
000F73r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000F77r 1  04 05 06 07  
000F7Br 1  08 09 0A 0B  
000F83r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000F87r 1  04 05 06 07  
000F8Br 1  08 09 0A 0B  
000F93r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000F97r 1  04 05 06 07  
000F9Br 1  08 09 0A 0B  
000FA3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000FA7r 1  04 05 06 07  
000FABr 1  08 09 0A 0B  
000FB3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000FB7r 1  04 05 06 07  
000FBBr 1  08 09 0A 0B  
000FC3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000FC7r 1  04 05 06 07  
000FCBr 1  08 09 0A 0B  
000FD3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000FD7r 1  04 05 06 07  
000FDBr 1  08 09 0A 0B  
000FE3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
000FE7r 1  04 05 06 07  
000FEBr 1  08 09 0A 0B  
000FF3r 1               
000FF3r 1               LOW_NIBBLE_TO_HEX: ; 1800
000FF3r 1  30 31 32 33  .repeat 16
000FF7r 1  34 35 36 37  
000FFBr 1  38 39 01 02  
0010F3r 1               ;      0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
0010F3r 1               .byte  48, 49, 50, 51, 52, 53, 54, 55, 56, 57,  1,  2,  3,  4,  5,  6
0010F3r 1               .endrepeat
0010F3r 1               
0010F3r 1               HIGH_NIBBLE_TO_HEX: ; 1900
0010F3r 1  30 30 30 30  .res 16,48
0010F7r 1  30 30 30 30  
0010FBr 1  30 30 30 30  
001103r 1  31 31 31 31  .res 16,49
001107r 1  31 31 31 31  
00110Br 1  31 31 31 31  
001113r 1  32 32 32 32  .res 16,50
001117r 1  32 32 32 32  
00111Br 1  32 32 32 32  
001123r 1  33 33 33 33  .res 16,51
001127r 1  33 33 33 33  
00112Br 1  33 33 33 33  
001133r 1  34 34 34 34  .res 16,52
001137r 1  34 34 34 34  
00113Br 1  34 34 34 34  
001143r 1  35 35 35 35  .res 16,53
001147r 1  35 35 35 35  
00114Br 1  35 35 35 35  
001153r 1  36 36 36 36  .res 16,54
001157r 1  36 36 36 36  
00115Br 1  36 36 36 36  
001163r 1  37 37 37 37  .res 16,55
001167r 1  37 37 37 37  
00116Br 1  37 37 37 37  
001173r 1  38 38 38 38  .res 16,56
001177r 1  38 38 38 38  
00117Br 1  38 38 38 38  
001183r 1  39 39 39 39  .res 16,57
001187r 1  39 39 39 39  
00118Br 1  39 39 39 39  
001193r 1  01 01 01 01  .res 16,1
001197r 1  01 01 01 01  
00119Br 1  01 01 01 01  
0011A3r 1  02 02 02 02  .res 16,2
0011A7r 1  02 02 02 02  
0011ABr 1  02 02 02 02  
0011B3r 1  03 03 03 03  .res 16,3
0011B7r 1  03 03 03 03  
0011BBr 1  03 03 03 03  
0011C3r 1  04 04 04 04  .res 16,4
0011C7r 1  04 04 04 04  
0011CBr 1  04 04 04 04  
0011D3r 1  05 05 05 05  .res 16,5
0011D7r 1  05 05 05 05  
0011DBr 1  05 05 05 05  
0011E3r 1  06 06 06 06  .res 16,6
0011E7r 1  06 06 06 06  
0011EBr 1  06 06 06 06  
0011F3r 1               CONVERT_HEIGHTS_PIXELS: ; 1A00
0011F3r 1  00 00 01 01  .byte 0,0,1,1,2,3,3,4,4,5,6,6,7,7,8,9,9,10,11,11,12,12,13,14,14,15,15,16,17,17,18,18,19,20,20,21,22,22,23,23,24,25,25,26,26,27,28,28,29,30,30,31,31,32,33,33,34,34,35,36,36,37,37,38,39,39,40,41,41,42,42,43,44,44,45,45,46,47,47,48,48,49,50,50,51,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52;,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52
0011F7r 1  02 03 03 04  
0011FBr 1  04 05 06 06  
001273r 1  00 00 00 00  .res 128,0
001277r 1  00 00 00 00  
00127Br 1  00 00 00 00  
0012F3r 1               CONVERT_HEIGHTS_PIXELS_L: ; 1B00
0012F3r 1               ;.res 256,0
0012F3r 1  00 9C 39 D6  .byte 0,156,57,214,115,15,172,73,230,130,31,188,89,245,146,47,204,105,5,162,63,220,120,21,178,79,235,136,37,194,95,251,152,53,210,110,11,168,69,225,126,27,184,84,241,142,43,200,100,1,158,59,215,116,17,174,74,231,132,33,190,90,247,148,49,205,106,7,164,64,221,122,23,180,80,237,138,39,195,96,253,154,54,211,112,0,169,70,227,128,29,185,86,243,144,44,201,102,3,159,60,217,118,19,175,76,233,134,34,191,92,249,149,50,207,108,9,165,66,223,124,24,181,82,239,139,40,197,98,254,155,56,213,114,14,171,72,229,129,30,187,88,244,145,46,203,104,4,161,62,219,119,20,177,78,234,135,36,193,94,250,151,52,209,109,10,167,68,224,125,26,183,83,240,141,42,199,99,0,157,58,214,115,16,173,73,230,131,32,189,89,246,147,48,204,105,6,163,63,220,121,22,179,79,236,137,38,194,95,252,153,53,210,111,12,168,69,226,127,28,184,85,242,143,43,200,101,2,158,59,216,117,18,174,75,232,133,33,190,91,248,148,49,206,107,7,164,65,222,123,23,180,81,238,138,39
0012F7r 1  73 0F AC 49  
0012FBr 1  E6 82 1F BC  
0013F3r 1               MOVE_Y_H: ; 1C00
0013F3r 1  00 00 00 00  .byte
0013F7r 1  00 00 00 00  
0013FBr 1  00 00 00 00  
0014F3r 1               MOVE_Y_L: ; 1D00
0014F3r 1  08 07 07 07  .byte $8,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$6,$6,$6,$6,$6,$6,$6,$6,$6,$5,$5,$5,$5,$5,$5,$5,$4,$4,$4,$4,$4,$4,$3,$3,$3,$3,$3,$3,$2,$2,$2,$2,$2,$1,$1,$1,$1,$1,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF,$FF,$0,$0,$0,$0,$0,$0,$1,$1,$1,$1,$1,$2,$2,$2,$2,$2,$3,$3,$3,$3,$3,$3,$4,$4,$4,$4,$4,$4,$5,$5,$5,$5,$5,$5,$5,$6,$6,$6,$6,$6,$6,$6,$6,$6,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7
0014F7r 1  07 07 07 07  
0014FBr 1  07 07 07 07  
0015F3r 1               MOVE_X_H: ; 1E00
0015F3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
0015F7r 1  00 00 00 00  
0015FBr 1  00 00 00 00  
0016F3r 1               MOVE_X_L: ; 1F00
0016F3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$1,$1,$1,$1,$1,$1,$2,$2,$2,$2,$2,$2,$2,$3,$3,$3,$3,$3,$3,$3,$4,$4,$4,$4,$4,$4,$4,$5,$5,$5,$5,$5,$5,$5,$5,$5,$5,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$5,$5,$5,$5,$5,$5,$5,$5,$5,$5,$4,$4,$4,$4,$4,$4,$4,$3,$3,$3,$3,$3,$3,$3,$2,$2,$2,$2,$2,$2,$2,$1,$1,$1,$1,$1,$1,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FB,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF,$FF
0016F7r 1  00 00 01 01  
0016FBr 1  01 01 01 01  
0017F3r 1               
0017F3r 1               
0017F3r 1               TUB_WORLD: ; 32*64 = 2K ... is 2000 to 2800-1
0017F3r 1               .include "tub_world_hieghts_01.inc"
0017F3r 2               
0017F3r 2               
0017F3r 2               
0017F3r 2               
0017F3r 2               
0017F3r 2               
0017F3r 2               ; 0 to 128 will be water level. >128 = distance along row to water (neg) , 128 = no water this row.
0017F3r 2               ; rows are stored within 64 byte rows
0017F3r 2               ; 	  0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63
0017F3r 2  FF FF FF FF  .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 30
0017F7r 2  FF FF FF FF  
0017FBr 2  FF FF FF FF  
001833r 2  FF FF FF FF  .byte   $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF ; 29
001837r 2  FF FF FF FF  
00183Br 2  FF FF FF FF  
001873r 2  FF FF FF FF  .byte     $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF ; 28
001877r 2  FF FF FF FF  
00187Br 2  FF FF FF FF  
0018B3r 2  FF FF FF FF  .byte       $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF ; 27
0018B7r 2  FF FF FF FF  
0018BBr 2  FF FF FF FF  
0018F3r 2  FF FF FF FF  .byte         $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF ; 26
0018F7r 2  FF FF FF FF  
0018FBr 2  FF FF FF FF  
001933r 2  FF FF FF FF  .byte           $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 25
001937r 2  FF FF FF FF  
00193Br 2  FF FF FF FF  
001973r 2  FF FF FF FF  .byte             $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 24
001977r 2  FF FF FF FF  
00197Br 2  FF FF FF FF  
0019B3r 2  FF FF FF FF  .byte               $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 23
0019B7r 2  FF FF FF FF  
0019BBr 2  FF FF FF 80  
0019F3r 2  FF FF FF FF  .byte                 $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 22
0019F7r 2  FF FF FF FF  
0019FBr 2  FF FF 80 00  
001A33r 2  FF FF FF FF  .byte                   $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF; 21
001A37r 2  FF FF FF FF  
001A3Br 2  FF 80 00 00  
001A73r 2  FF FF FF FF  .byte                     $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF ; 20
001A77r 2  FF FF FF FF  
001A7Br 2  FF 80 00 00  
001AB3r 2  FF FF FF FF  .byte                       $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF ; 19
001AB7r 2  FF FF FF FF  
001ABBr 2  80 00 00 00  
001AF3r 2  FF FF FF FF  .byte                         $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 18
001AF7r 2  FF FF FF FF  
001AFBr 2  80 00 00 00  
001B33r 2  FF FF FF FF  .byte                           $FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 17
001B37r 2  FF FF FF 80  
001B3Br 2  00 00 00 00  
001B73r 2  FF FF FF FF  .byte                             $FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF ; 16
001B77r 2  FF FF FF 80  
001B7Br 2  00 00 00 00  
001BB3r 2  FF FF FF FF  .byte                               $FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF ; 15
001BB7r 2  FF FF 80 00  
001BBBr 2  00 00 00 00  
001BF3r 2  FF FF FF FF  .byte                                 $FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 14
001BF7r 2  FF FF 80 00  
001BFBr 2  00 00 00 00  
001C33r 2  FF FF FF FF  .byte                                   $FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 13
001C37r 2  FF 80 00 00  
001C3Br 2  00 00 00 00  
001C73r 2  FF FF FF FF  .byte                                     $FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 12
001C77r 2  FF 80 00 00  
001C7Br 2  00 00 00 00  
001CB3r 2  FF FF FF FF  .byte                                       $FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 11
001CB7r 2  80 00 00 00  
001CBBr 2  00 00 00 00  
001CF3r 2  FF FF FF FF  .byte                                         $FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 10
001CF7r 2  80 00 00 00  
001CFBr 2  00 00 00 00  
001D33r 2  FF FF FF 80  .byte                                           $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 9
001D37r 2  00 00 00 00  
001D3Br 2  00 00 00 00  
001D73r 2  FF FF FF 80  .byte                                             $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 8
001D77r 2  00 00 00 00  
001D7Br 2  00 00 00 00  
001DB3r 2  FF FF FF 80  .byte                                               $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 7
001DB7r 2  00 00 00 00  
001DBBr 2  00 00 00 00  
001DF3r 2  FF FF FF 80  .byte                                                 $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 6
001DF7r 2  00 00 00 00  
001DFBr 2  00 00 00 00  
001E33r 2  FF FF FF 80  .byte                                                   $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 5
001E37r 2  00 00 00 00  
001E3Br 2  00 00 00 00  
001E73r 2  FF FF FF 80  .byte                                                     $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 4
001E77r 2  00 00 00 00  
001E7Br 2  00 00 00 00  
001EB3r 2  FF FF FF 80  .byte                                                       $FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 3
001EB7r 2  80 00 00 00  
001EBBr 2  00 00 00 00  
001EF3r 2  FF FF FF FF  .byte                                                         $FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 2
001EF7r 2  80 80 00 00  
001EFBr 2  00 00 00 00  
001F33r 2  FF FF FF FF  .byte                                                           $FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 01
001F37r 2  FF 80 80 00  
001F3Br 2  00 00 00 00  
001F73r 2  FF FF FF FF  .byte                                                             $FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 00 tub wall north
001F77r 2  FF FF 80 80  
001F7Br 2  80 80 80 80  
001FB3r 2  FF FF FF FF  .res 64,$FF
001FB7r 2  FF FF FF FF  
001FBBr 2  FF FF FF FF  
001FF3r 2               
001FF3r 2               
001FF3r 2               
001FF3r 1               
001FF3r 1               TUB_WORLD_LOW: ; 2800 to 3000-1
001FF3r 1  00 00 00 00  .res 2048,0
001FF7r 1  00 00 00 00  
001FFBr 1  00 00 00 00  
0027F3r 1               
0027F3r 1               WATER_CALC_SCRATCH: ; 3000 to 3800-1
0027F3r 1  00 00 00 00  .res 2048,0
0027F7r 1  00 00 00 00  
0027FBr 1  00 00 00 00  
002FF3r 1               
002FF3r 1               WATER_CALC_SCRATCH_LOW: ; 3800 to 4000-1
002FF3r 1  00 00 00 00  .res 2048,0
002FF7r 1  00 00 00 00  
002FFBr 1  00 00 00 00  
0037F3r 1               
0037F3r 1               ;3000
0037F3r 1               
0037F3r 1               
0037F3r 1               
0037F3r 1               
0037F3r 1               
0037F3r 1               
0037F3r 1               
0037F3r 1               SCREEN_Y_TO_Z: ; 3100 this is shifted to be within range so that 192 =0 and -16 is 255
0037F3r 1  EB EA E8 E7  .byte 235,234,232,231,230,229,227,226,225,224,223,221,220,219,218,216,215,214,213,211,210,209,208,207,205,204,203,202,200,199,198,197,195,194,193,192,191,189,188,187,186,184,183,182,181,179,178,177,176,175,173,172,171,170,168,167,166,165,163,162,161,160,159,157,156,155,154,152,151,150,149,147,146,145,144,143,141,140,139,138,136,135,134,133,131,130,129,128,127,125,124,123,122,120,119,118,117,115,114,113,112,111,109,108,107,106,104,103,102,101,99,98,97,96,95,93,92,91,90,88,87,86,85,83,82,81,80,79,77,76,75,74,72,71,70,69,67,66,65,64,63,61,60,59,58,56,55,54,53,51,50,49,48,47,45,44,43,42,40,39,38,37,35,34,33,32,31,29,28,27,26,24,23,22,21,19,18,17,16,15,13,12,11,10,8,7,6,5,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,253,252,251,250,248,247,246,245,243,242,241,240,239,237,236
0037F7r 1  E6 E5 E3 E2  
0037FBr 1  E1 E0 DF DD  
0038F3r 1               SUBCELL_X_COS_L: ; 3200
0038F3r 1  00 FF FF FF  .byte $0,$FF,$FF,$FF,$FE,$FE,$FD,$FC,$FB,$F9,$F8,$F6,$F4,$F3,$F1,$EE,$EC,$EA,$E7,$E4,$E1,$DE,$DB,$D8,$D4,$D1,$CD,$C9,$C5,$C1,$BD,$B9,$B5,$B0,$AB,$A7,$A2,$9D,$98,$93,$8E,$88,$83,$7E,$78,$73,$6D,$67,$61,$5C,$56,$50,$4A,$44,$3E,$38,$31,$2B,$25,$1F,$19,$12,$C,$6,$0,$F9,$F3,$ED,$E6,$E0,$DA,$D4,$CE,$C7,$C1,$BB,$B5,$AF,$A9,$A3,$9E,$98,$92,$8C,$87,$81,$7C,$77,$71,$6C,$67,$62,$5D,$58,$54,$4F,$4A,$46,$42,$3E,$3A,$36,$32,$2E,$2B,$27,$24,$21,$1E,$1B,$18,$15,$13,$11,$E,$C,$B,$9,$7,$6,$4,$3,$2,$1,$1,$0,$0,$0,$0,$0,$0,$0,$1,$1,$2,$3,$4,$6,$7,$9,$B,$C,$E,$11,$13,$15,$18,$1B,$1E,$21,$24,$27,$2B,$2E,$32,$36,$3A,$3E,$42,$46,$4A,$4F,$54,$58,$5D,$62,$67,$6C,$71,$77,$7C,$81,$87,$8C,$92,$98,$9E,$A3,$A9,$AF,$B5,$BB,$C1,$C7,$CE,$D4,$DA,$E0,$E6,$ED,$F3,$F9,$0,$6,$C,$12,$19,$1F,$25,$2B,$31,$38,$3E,$44,$4A,$50,$56,$5C,$61,$67,$6D,$73,$78,$7E,$83,$88,$8E,$93,$98,$9D,$A2,$A7,$AB,$B0,$B5,$B9,$BD,$C1,$C5,$C9,$CD,$D1,$D4,$D8,$DB,$DE,$E1,$E4,$E7,$EA,$EC,$EE,$F1,$F3,$F4,$F6,$F8,$F9,$FB,$FC,$FD,$FE,$FE,$FF,$FF,$FF
0038F7r 1  FE FE FD FC  
0038FBr 1  FB F9 F8 F6  
0039F3r 1               SUBCELL_X_COS_H: ; 3300
0039F3r 1  01 00 00 00  .byte
0039F7r 1  00 00 00 00  
0039FBr 1  00 00 00 00  
003AF3r 1               SUBCELL_X_SIN_H: ; 3400
003AF3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
003AF7r 1  00 00 00 00  
003AFBr 1  00 00 00 00  
003BF3r 1               SUBCELL_X_SIN_L: ; 3500
003BF3r 1  00 05 0A 10  .byte $0,$5,$A,$10,$15,$1B,$20,$25,$2B,$30,$35,$3B,$40,$45,$4A,$4F,$54,$59,$5E,$63,$68,$6D,$71,$76,$7B,$7F,$84,$88,$8C,$90,$94,$98,$9C,$A0,$A4,$A7,$AB,$AE,$B2,$B5,$B8,$BB,$BE,$C0,$C3,$C6,$C8,$CA,$CC,$CE,$D0,$D2,$D4,$D5,$D7,$D8,$D9,$DA,$DB,$DC,$DC,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DC,$DC,$DB,$DA,$D9,$D8,$D7,$D5,$D4,$D2,$D0,$CE,$CC,$CA,$C8,$C6,$C3,$C0,$BE,$BB,$B8,$B5,$B2,$AE,$AB,$A7,$A4,$A0,$9C,$98,$94,$90,$8C,$88,$84,$7F,$7B,$76,$71,$6D,$68,$63,$5E,$59,$54,$4F,$4A,$45,$40,$3B,$35,$30,$2B,$25,$20,$1B,$15,$10,$A,$5,$0,$FA,$F5,$EF,$EA,$E4,$DF,$DA,$D4,$CF,$CA,$C4,$BF,$BA,$B5,$B0,$AB,$A6,$A1,$9C,$97,$92,$8E,$89,$84,$80,$7B,$77,$73,$6F,$6B,$67,$63,$5F,$5B,$58,$54,$51,$4D,$4A,$47,$44,$41,$3F,$3C,$39,$37,$35,$33,$31,$2F,$2D,$2B,$2A,$28,$27,$26,$25,$24,$23,$23,$22,$22,$22,$22,$22,$22,$22,$23,$23,$24,$25,$26,$27,$28,$2A,$2B,$2D,$2F,$31,$33,$35,$37,$39,$3C,$3F,$41,$44,$47,$4A,$4D,$51,$54,$58,$5B,$5F,$63,$67,$6B,$6F,$73,$77,$7B,$80,$84,$89,$8E,$92,$97,$9C,$A1,$A6,$AB,$B0,$B5,$BA,$BF,$C4,$CA,$CF,$D4,$DA,$DF,$E4,$EA,$EF,$F5,$FA
003BF7r 1  15 1B 20 25  
003BFBr 1  2B 30 35 3B  
003CF3r 1               SUBCELL_Y_COS_H: ; 3600
003CF3r 1  00 00 00 00  .byte
003CF7r 1  00 00 00 00  
003CFBr 1  00 00 00 00  
003DF3r 1               SUBCELL_Y_COS_L: ; 3700
003DF3r 1  9C 9C 9C 9C  .byte $9C,$9C,$9C,$9C,$9C,$9B,$9B,$9A,$99,$98,$98,$97,$96,$94,$93,$92,$90,$8F,$8D,$8C,$8A,$88,$86,$84,$82,$80,$7D,$7B,$79,$76,$74,$71,$6E,$6C,$69,$66,$63,$60,$5D,$5A,$57,$53,$50,$4D,$49,$46,$43,$3F,$3B,$38,$34,$31,$2D,$29,$26,$22,$1E,$1A,$17,$13,$F,$B,$7,$3,$0,$FC,$F8,$F4,$F0,$EC,$E8,$E5,$E1,$DD,$D9,$D6,$D2,$CE,$CB,$C7,$C4,$C0,$BC,$B9,$B6,$B2,$AF,$AC,$A8,$A5,$A2,$9F,$9C,$99,$96,$93,$91,$8E,$8B,$89,$86,$84,$82,$7F,$7D,$7B,$79,$77,$75,$73,$72,$70,$6F,$6D,$6C,$6B,$69,$68,$67,$67,$66,$65,$64,$64,$63,$63,$63,$63,$63,$63,$63,$63,$63,$64,$64,$65,$66,$67,$67,$68,$69,$6B,$6C,$6D,$6F,$70,$72,$73,$75,$77,$79,$7B,$7D,$7F,$82,$84,$86,$89,$8B,$8E,$91,$93,$96,$99,$9C,$9F,$A2,$A5,$A8,$AC,$AF,$B2,$B6,$B9,$BC,$C0,$C4,$C7,$CB,$CE,$D2,$D6,$D9,$DD,$E1,$E5,$E8,$EC,$F0,$F4,$F8,$FC,$0,$3,$7,$B,$F,$13,$17,$1A,$1E,$22,$26,$29,$2D,$31,$34,$38,$3B,$3F,$43,$46,$49,$4D,$50,$53,$57,$5A,$5D,$60,$63,$66,$69,$6C,$6E,$71,$74,$76,$79,$7B,$7D,$80,$82,$84,$86,$88,$8A,$8C,$8D,$8F,$90,$92,$93,$94,$96,$97,$98,$98,$99,$9A,$9B,$9B,$9C,$9C,$9C,$9C
003DF7r 1  9C 9B 9B 9A  
003DFBr 1  99 98 98 97  
003EF3r 1               SUBCELL_Y_SIN_H: ; 3800
003EF3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
003EF7r 1  00 00 00 00  
003EFBr 1  00 00 00 00  
003FF3r 1               SUBCELL_Y_SIN_L: ; 3900
003FF3r 1  00 04 08 0D  .byte $0,$4,$8,$D,$11,$16,$1A,$1E,$23,$27,$2B,$30,$34,$38,$3C,$41,$45,$49,$4D,$51,$55,$59,$5D,$60,$64,$68,$6B,$6F,$72,$76,$79,$7C,$7F,$83,$86,$89,$8B,$8E,$91,$93,$96,$98,$9B,$9D,$9F,$A1,$A3,$A5,$A7,$A8,$AA,$AB,$AD,$AE,$AF,$B0,$B1,$B2,$B3,$B3,$B4,$B4,$B4,$B4,$B5,$B4,$B4,$B4,$B4,$B3,$B3,$B2,$B1,$B0,$AF,$AE,$AD,$AB,$AA,$A8,$A7,$A5,$A3,$A1,$9F,$9D,$9B,$98,$96,$93,$91,$8E,$8B,$89,$86,$83,$80,$7C,$79,$76,$72,$6F,$6B,$68,$64,$60,$5D,$59,$55,$51,$4D,$49,$45,$41,$3C,$38,$34,$30,$2B,$27,$23,$1E,$1A,$16,$11,$D,$8,$4,$0,$FB,$F7,$F2,$EE,$E9,$E5,$E1,$DC,$D8,$D4,$CF,$CB,$C7,$C3,$BE,$BA,$B6,$B2,$AE,$AA,$A6,$A2,$9F,$9B,$97,$94,$90,$8D,$89,$86,$83,$80,$7C,$79,$76,$74,$71,$6E,$6C,$69,$67,$64,$62,$60,$5E,$5C,$5A,$58,$57,$55,$54,$52,$51,$50,$4F,$4E,$4D,$4C,$4C,$4B,$4B,$4B,$4B,$4A,$4B,$4B,$4B,$4B,$4C,$4C,$4D,$4E,$4F,$50,$51,$52,$54,$55,$57,$58,$5A,$5C,$5E,$60,$62,$64,$67,$69,$6C,$6E,$71,$74,$76,$79,$7C,$80,$83,$86,$89,$8D,$90,$94,$97,$9B,$9F,$A2,$A6,$AA,$AE,$B2,$B6,$BA,$BE,$C3,$C7,$CB,$CF,$D4,$D8,$DC,$E1,$E5,$E9,$EE,$F2,$F7,$FB
003FF7r 1  11 16 1A 1E  
003FFBr 1  23 27 2B 30  
0040F3r 1               
0040F3r 1               
0040F3r 1               
0040F3r 1               WORLD_SPRITE_CENTER_XH: ; 3A00 128 bytes
0040F3r 1  64 64 64 64  .byte
0040F7r 1  64 64 64 64  
0040FBr 1  64 64 64 64  
004173r 1               WORLD_SPRITE_CENTER_XL: ; 3A80 128 bytes
004173r 1  00 0D 1B 29  .byte $0,$D,$1B,$29,$36,$43,$51,$5E,$6B,$78,$85,$92,$9F,$AB,$B8,$C4,$D1,$DD,$E9,$F6,$2,$E,$A,$FE,$F2,$E5,$D9,$CD,$C0,$B4,$A7,$9A,$8E,$81,$74,$67,$5A,$4C,$3F,$32,$24,$16,$9,$4,$12,$20,$2D,$3B,$48,$55,$62,$6F,$7C,$89,$96,$A3,$B0,$BC,$C9,$D5,$E1,$EE,$FA,$6,$12,$13,$FA,$EE,$E1,$D5,$C9,$BC,$B0,$A3,$96,$89,$7C,$6F,$62,$55,$48,$3B,$2D,$20,$12,$4,$9,$16,$24,$32,$3F,$4C,$5A,$67,$74,$81,$8E,$9A,$A7,$B4,$C0,$CD,$D9,$E5,$F2,$FE,$A,$E,$2,$F6,$E9,$DD,$D1,$C4,$B8,$AB,$9F,$92,$85,$78,$6B,$5E,$51,$43,$36,$29,$1B,$D
004177r 1  36 43 51 5E  
00417Br 1  6B 78 85 92  
0041F3r 1               WORLD_SPRITE_CENTER_YH: ; 3B00 128 bytes
0041F3r 1  4C 4C 4C 4C  .byte $4C,$4C,$4C,$4C,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4C,$4C,$4C,$4C,$4C,$4C,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4C,$4C,$4C,$4C,$4C,$4C,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4C,$4C,$4C
0041F7r 1  4B 4B 4B 4B  
0041FBr 1  4B 4B 4B 4B  
004273r 1               WORLD_SPRITE_CENTER_YL: ; 3B80 128 bytes
004273r 1  19 11 08 00  .byte $19,$11,$8,$0,$F7,$EE,$E6,$DD,$D4,$CB,$C2,$B9,$B0,$A7,$9D,$94,$8B,$81,$78,$6E,$64,$5B,$5E,$68,$71,$7B,$84,$8E,$97,$A0,$AA,$B3,$BC,$C5,$CE,$D7,$E0,$E8,$F1,$FA,$3,$B,$14,$17,$E,$5,$FD,$F4,$EB,$E3,$DA,$D1,$C8,$BF,$B6,$AD,$A3,$9A,$91,$87,$7E,$74,$6B,$61,$57,$57,$6B,$74,$7E,$87,$91,$9A,$A3,$AD,$B6,$BF,$C8,$D1,$DA,$E3,$EB,$F4,$FD,$5,$E,$17,$14,$B,$3,$FA,$F1,$E8,$E0,$D7,$CE,$C5,$BC,$B3,$AA,$A0,$97,$8E,$84,$7B,$71,$68,$5E,$5B,$64,$6E,$78,$81,$8B,$94,$9D,$A7,$B0,$B9,$C2,$CB,$D4,$DD,$E6,$EE,$F7,$0,$8,$11
004277r 1  F7 EE E6 DD  
00427Br 1  D4 CB C2 B9  
0042F3r 1               
0042F3r 1               WORLD_SPRITE_NUM_lookies: ; 3C00 128 bytes
0042F3r 1               ;      0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
0042F3r 1  00 00 00 00  .byte   0,  0,  0,  0, 32, 32, 32, 32, 32, 32, 64, 64, 64, 64, 64, 64
0042F7r 1  20 20 20 20  
0042FBr 1  20 20 40 40  
004303r 1  40 40 60 60  .byte  64, 64, 96, 96,160,160,160, 96, 96, 96, 64, 64, 64, 64, 64, 64
004307r 1  A0 A0 A0 60  
00430Br 1  60 60 40 40  
004313r 1  40 40 20 20  .byte  64, 64, 32, 32, 32, 32, 32, 32,  0,  0,  0,  0,  0,  0, 32, 32
004317r 1  20 20 20 20  
00431Br 1  00 00 00 00  
004323r 1  20 20 20 20  .byte  32, 32, 32, 32, 32, 64, 64, 64, 64, 64, 64, 64, 96, 96, 96,160
004327r 1  20 40 40 40  
00432Br 1  40 40 40 40  
004333r 1  A0 A0 60 60  .byte 160,160, 96, 96, 96, 64, 64, 64, 64, 64, 64, 64, 32, 32, 32, 32
004337r 1  60 40 40 40  
00433Br 1  40 40 40 40  
004343r 1  20 20 20 00  .byte  32, 32, 32,  0,  0,  0,  0,  0,  0, 32, 32, 32, 32, 32, 32, 64
004347r 1  00 00 00 00  
00434Br 1  00 20 20 20  
004353r 1  40 40 40 40  .byte  64, 64, 64, 64, 64, 64, 64, 96, 96, 96,160,160,160, 96, 96, 64
004357r 1  40 40 40 60  
00435Br 1  60 60 A0 A0  
004363r 1  40 40 40 40  .byte  64, 64, 64, 64, 64, 64, 64, 32, 32, 32, 32, 32, 32,  0,  0,  0
004367r 1  40 40 40 20  
00436Br 1  20 20 20 20  
004373r 1               WORLD_WALL_SPRITE_NUM_lookies: ; 3C80
004373r 1  80 80 80 80  .byte 128,128,128,128,128,128,128,128,128,128,192,192,192,192,192,192
004377r 1  80 80 80 80  
00437Br 1  80 80 C0 C0  
004383r 1  C0 C0 C0 C0  .byte 192,192,192,192,224,224,224,192,192,192,192,192,192,192,192,192
004387r 1  E0 E0 E0 C0  
00438Br 1  C0 C0 C0 C0  
004393r 1  C0 C0 80 80  .byte 192,192,128,128,128,128,128,128,128,128,128,128,128,128,128,128
004397r 1  80 80 80 80  
00439Br 1  80 80 80 80  
0043A3r 1  80 80 80 80  .byte 128,128,128,128,128,192,192,192,192,192,192,192,192,192,192,224
0043A7r 1  80 C0 C0 C0  
0043ABr 1  C0 C0 C0 C0  
0043B3r 1  E0 E0 C0 C0  .byte 224,224,192,192,192,192,192,192,192,192,192,192,128,128,128,128
0043B7r 1  C0 C0 C0 C0  
0043BBr 1  C0 C0 C0 C0  
0043C3r 1  80 80 80 80  .byte 128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,192
0043C7r 1  80 80 80 80  
0043CBr 1  80 80 80 80  
0043D3r 1  C0 C0 C0 C0  .byte 192,192,192,192,192,192,192,192,192,192,224,224,224,192,192,192
0043D7r 1  C0 C0 C0 C0  
0043DBr 1  C0 C0 E0 E0  
0043E3r 1  C0 C0 C0 C0  .byte 192,192,192,192,192,192,192,128,128,128,128,128,128,128,128,128
0043E7r 1  C0 C0 C0 80  
0043EBr 1  80 80 80 80  
0043F3r 1               
0043F3r 1               SPRITE_ADDRESS_LOW_HIGH: ; 3D00
0043F3r 1  00 00 00 00  .byte 0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31
0043F7r 1  00 00 00 00  
0043FBr 1  01 01 01 01  
0044F3r 1               
0044F3r 1               SPRITE_ADDRESS_LOW_LOW: ; 3E00
0044F3r 1  00 20 40 60  .byte 0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224
0044F7r 1  80 A0 C0 E0  
0044FBr 1  00 20 40 60  
0045F3r 1               
0045F3r 1               NIBBLE_SWAPPER: ; 3F00
0045F3r 1               ;      0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
0045F3r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
0045F7r 1  40 50 60 70  
0045FBr 1  80 90 A0 B0  
004603r 1  01 11 21 31  .byte $01,$11,$21,$31,$41,$51,$61,$71,$81,$91,$A1,$B1,$C1,$D1,$E1,$F1
004607r 1  41 51 61 71  
00460Br 1  81 91 A1 B1  
004613r 1  02 12 22 32  .byte $02,$12,$22,$32,$42,$52,$62,$72,$82,$92,$A2,$B2,$C2,$D2,$E2,$F2
004617r 1  42 52 62 72  
00461Br 1  82 92 A2 B2  
004623r 1  03 13 23 33  .byte $03,$13,$23,$33,$43,$53,$63,$73,$83,$93,$A3,$B3,$C3,$D3,$E3,$F3
004627r 1  43 53 63 73  
00462Br 1  83 93 A3 B3  
004633r 1  04 14 24 34  .byte $04,$14,$24,$34,$44,$54,$64,$74,$84,$94,$A4,$B4,$C4,$D4,$E4,$F4
004637r 1  44 54 64 74  
00463Br 1  84 94 A4 B4  
004643r 1  05 15 25 35  .byte $05,$15,$25,$35,$45,$55,$65,$75,$85,$95,$A5,$B5,$C5,$D5,$E5,$F5
004647r 1  45 55 65 75  
00464Br 1  85 95 A5 B5  
004653r 1  06 16 26 36  .byte $06,$16,$26,$36,$46,$56,$66,$76,$86,$96,$A6,$B6,$C6,$D6,$E6,$F6
004657r 1  46 56 66 76  
00465Br 1  86 96 A6 B6  
004663r 1  07 17 27 37  .byte $07,$17,$27,$37,$47,$57,$67,$77,$87,$97,$A7,$B7,$C7,$D7,$E7,$F7
004667r 1  47 57 67 77  
00466Br 1  87 97 A7 B7  
004673r 1  08 18 28 38  .byte $08,$18,$28,$38,$48,$58,$68,$78,$88,$98,$A8,$B8,$C8,$D8,$E8,$F8
004677r 1  48 58 68 78  
00467Br 1  88 98 A8 B8  
004683r 1  09 19 29 39  .byte $09,$19,$29,$39,$49,$59,$69,$79,$89,$99,$A9,$B9,$C9,$D9,$E9,$F9
004687r 1  49 59 69 79  
00468Br 1  89 99 A9 B9  
004693r 1  0A 1A 2A 3A  .byte $0A,$1A,$2A,$3A,$4A,$5A,$6A,$7A,$8A,$9A,$AA,$BA,$CA,$DA,$EA,$FA
004697r 1  4A 5A 6A 7A  
00469Br 1  8A 9A AA BA  
0046A3r 1  0B 1B 2B 3B  .byte $0B,$1B,$2B,$3B,$4B,$5B,$6B,$7B,$8B,$9B,$AB,$BB,$CB,$DB,$EB,$FB
0046A7r 1  4B 5B 6B 7B  
0046ABr 1  8B 9B AB BB  
0046B3r 1  0C 1C 2C 3C  .byte $0C,$1C,$2C,$3C,$4C,$5C,$6C,$7C,$8C,$9C,$AC,$BC,$CC,$DC,$EC,$FC
0046B7r 1  4C 5C 6C 7C  
0046BBr 1  8C 9C AC BC  
0046C3r 1  0D 1D 2D 3D  .byte $0D,$1D,$2D,$3D,$4D,$5D,$6D,$7D,$8D,$9D,$AD,$BD,$CD,$DD,$ED,$FD
0046C7r 1  4D 5D 6D 7D  
0046CBr 1  8D 9D AD BD  
0046D3r 1  0E 1E 2E 3E  .byte $0E,$1E,$2E,$3E,$4E,$5E,$6E,$7E,$8E,$9E,$AE,$BE,$CE,$DE,$EE,$FE
0046D7r 1  4E 5E 6E 7E  
0046DBr 1  8E 9E AE BE  
0046E3r 1  0F 1F 2F 3F  .byte $0F,$1F,$2F,$3F,$4F,$5F,$6F,$7F,$8F,$9F,$AF,$BF,$CF,$DF,$EF,$FF
0046E7r 1  4F 5F 6F 7F  
0046EBr 1  8F 9F AF BF  
0046F3r 1               
0046F3r 1               LOW_NIBBLE_HIGH: ; 4000
0046F3r 1               ;      0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
0046F3r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
0046F7r 1  40 50 60 70  
0046FBr 1  80 90 A0 B0  
004703r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
004707r 1  40 50 60 70  
00470Br 1  80 90 A0 B0  
004713r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
004717r 1  40 50 60 70  
00471Br 1  80 90 A0 B0  
004723r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
004727r 1  40 50 60 70  
00472Br 1  80 90 A0 B0  
004733r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
004737r 1  40 50 60 70  
00473Br 1  80 90 A0 B0  
004743r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
004747r 1  40 50 60 70  
00474Br 1  80 90 A0 B0  
004753r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
004757r 1  40 50 60 70  
00475Br 1  80 90 A0 B0  
004763r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
004767r 1  40 50 60 70  
00476Br 1  80 90 A0 B0  
004773r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
004777r 1  40 50 60 70  
00477Br 1  80 90 A0 B0  
004783r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
004787r 1  40 50 60 70  
00478Br 1  80 90 A0 B0  
004793r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
004797r 1  40 50 60 70  
00479Br 1  80 90 A0 B0  
0047A3r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
0047A7r 1  40 50 60 70  
0047ABr 1  80 90 A0 B0  
0047B3r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
0047B7r 1  40 50 60 70  
0047BBr 1  80 90 A0 B0  
0047C3r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
0047C7r 1  40 50 60 70  
0047CBr 1  80 90 A0 B0  
0047D3r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
0047D7r 1  40 50 60 70  
0047DBr 1  80 90 A0 B0  
0047E3r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
0047E7r 1  40 50 60 70  
0047EBr 1  80 90 A0 B0  
0047F3r 1               
0047F3r 1               
0047F3r 1               ; 4100
0047F3r 1               
0047F3r 1               OBJECT_LIST_Z_START_POINTERS: ; 3100
0047F3r 1  00 00 00 00  .res 256,0
0047F7r 1  00 00 00 00  
0047FBr 1  00 00 00 00  
0048F3r 1               OBJECT_LIST_BYTE0_ADDRLOW: ; 1A00 addr low
0048F3r 1  00 00 00 00  .res 256,0
0048F7r 1  00 00 00 00  
0048FBr 1  00 00 00 00  
0049F3r 1               OBJECT_LIST_BYTE1_MODE: ; 1B00 mode/addr bank
0049F3r 1  00 00 00 00  .res 256,0
0049F7r 1  00 00 00 00  
0049FBr 1  00 00 00 00  
004AF3r 1               OBJECT_LIST_BYTE2_X: ; 1C00 X position onscreen ( assumed positive for now)
004AF3r 1  00 00 00 00  .res 256,0
004AF7r 1  00 00 00 00  
004AFBr 1  00 00 00 00  
004BF3r 1               OBJECT_LIST_BYTE3_Y: ; 1D00 y position onscreen
004BF3r 1  00 00 00 00  .res 256,0
004BF7r 1  00 00 00 00  
004BFBr 1  00 00 00 00  
004CF3r 1               OBJECT_LIST_BYTE4_ZFLIPS: ; 1E00 collision / z / flips
004CF3r 1  00 00 00 00  .res 256,0
004CF7r 1  00 00 00 00  
004CFBr 1  00 00 00 00  
004DF3r 1               OBJECT_LIST_BYTE5_SIZE: ; 1F00 size / pal offset
004DF3r 1  00 00 00 00  .res 256,0
004DF7r 1  00 00 00 00  
004DFBr 1  00 00 00 00  
004EF3r 1               OBJECT_LIST_BYTE6_NEXT: ; 2000 NEXT
004EF3r 1  00 00 00 00  .res 256,0
004EF7r 1  00 00 00 00  
004EFBr 1  00 00 00 00  
004FF3r 1               
004FF3r 1               BUFFER_A_OFFSETS_HIGH: ; 128 bytes
004FF3r 1  18 18 19 19  .byte 24,24,25,25,26,27,27,28,29,29,30,30,31,32,32,33,34,34,35,35,36,37,37,38,39,39,40,40,41,42,42,43,44,44,45,45,46,47,47,48,49,49,50,50,51,52,52,53,54,54,55,55,56,57,57,58,59,59,60,60,61,62,62,63,64,64,65,65,66,67,67,68,69,69,70,70,71,72,72,73,74,74,75,75,76,77,77,78,79,79,80,80,81,82,82,83,84,84,85,85,86,87,87,88,89,89,90,90,91,92,92,93,94,94,95,95,96,97,97,98,99,99,100,100,101,102,102,103
004FF7r 1  1A 1B 1B 1C  
004FFBr 1  1D 1D 1E 1E  
005073r 1               
005073r 1               BITMAP_OFFSETS_LOW: ; 128 bytes
005073r 1  00 A0 40 E0  .byte 0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96
005077r 1  80 20 C0 60  
00507Br 1  00 A0 40 E0  
0050F3r 1               
0050F3r 1               BUFFER_B_OFFSETS_HIGH: ; 3080    128 bytes
0050F3r 1  80 80 81 81  .byte 128,128,129,129,130,131,131,132,133,133,134,134,135,136,136,137,138,138,139,139,140,141,141,142,143,143,144,144,145,146,146,147,148,148,149,149,150,151,151,152,153,153,154,154,155,156,156,157,158,158,159,159,160,161,161,162,163,163,164,164,165,166,166,167,168,168,169,169,170,171,171,172,173,173,174,174,175,176,176,177,178,178,179,179,180,181,181,182,183,183,184,184,185,186,186,187,188,188,189,189,190,191,191,192,193,193,194,194,195,196,196,197,198,198,199,199,200,201,201,202,203,203,204,204,205,206,206,207
0050F7r 1  82 83 83 84  
0050FBr 1  85 85 86 86  
005173r 1               
005173r 1               
005173r 1               
005173r 1               
005173r 1               
005173r 1               ;constants
005173r 1               ;--------------------------------
005173r 1               
005173r 1               ; RAM Interrupt Vectors
005173r 1               IRQVec            = $0314
005173r 1               
005173r 1               ; VERA
005173r 1               VERA_addr_low     = $9F20
005173r 1               VERA_addr_high    = $9F21
005173r 1               VERA_addr_bank    = $9F22
005173r 1               VERA_data0        = $9F23
005173r 1               VERA_data1        = $9F24
005173r 1               VERA_ctrl         = $9F25
005173r 1               VERA_ien          = $9F26
005173r 1               VERA_isr          = $9F27
005173r 1               VERA_dc_video     = $9F29 ; DCSEL = 0
005173r 1               FX_CTRL           = $9F29 ; DCSEL = 2
005173r 1               FX_MULT           = $9F2C ; DCSEL = 2
005173r 1               FX_CACHE_L        = $9F29 ; DCSEL = 6
005173r 1               FX_CACHE_M        = $9F2A
005173r 1               FX_CACHE_H        = $9F2B
005173r 1               FX_CACHE_U        = $9F2C
005173r 1               ;   Current Field | Sprites Enable | Layer1 Enable  |Layer0 Enable
005173r 1               ; NTSC/RGB: 240P  | NTSC: Chroma Disable / RGB: HV Sync Output Mode
005173r 1               
005173r 1               VERA_dc_hscale    = $9F2A
005173r 1               VERA_dc_vscale    = $9F2B
005173r 1               
005173r 1               VERA_L0_config    = $9F2D
005173r 1               ;   7       6     5   4       3       2             1   0
005173r 1               ;   Map Height | Map Width | T256C | Bitmap Mode | Color Depth
005173r 1               ;   0 - 32                  0 - 16    0 tiled       0   1bpp mono
005173r 1               ;   1 - 64                  1 - 256   1 enabled     1   2bpp 4 color
005173r 1               ;   2 - 128                                         2   4bpp 16 color
005173r 1               ;   3 - 256                                         3   8bpp 256 color
005173r 1               ;   bitmap mode - tilebase points to bitmap data, mapbase not used
005173r 1               ;   tile width = 0 is 320 pixels / tile width=1 is 640 pixels.. so could do 4bpp x 320?
005173r 1               ;   The palette offset (in 'H-Scroll (11:8)') modifies the color indexes of the bitmap in the same way as in the tile modes.
005173r 1               
005173r 1               VERA_L0_mapbase   = $9F2E
005173r 1               VERA_L0_tilebase  = $9F2F ;   Tile Base Address (16:11) | Tile Height 0-8/1-16 | Tile Width 0-8/1-16
005173r 1               VERA_L0_HSCROLL_L = $9F30 ;  H-Scroll (7:0)
005173r 1               VERA_L0_HSCROLL_H = $9F31 ;  - H-Scroll (11:8)
005173r 1               VERA_L0_VSCROLL_L = $9F32 ;  V-Scroll (7:0)
005173r 1               VERA_L0_VSCROLL_H = $9F33 ;  - V-Scroll (11:8)
005173r 1               
005173r 1               VERA_L1_config    = $9F34
005173r 1               VERA_L1_mapbase   = $9F35
005173r 1               VERA_L1_tilebase  = $9F36
005173r 1               VERA_L1_HSCROLL_L = $9F37 ;  H-Scroll (7:0)
005173r 1               VERA_L1_HSCROLL_H = $9F38 ;  - H-Scroll (11:8)
005173r 1               VERA_L1_VSCROLL_L = $9F39 ;  V-Scroll (7:0)
005173r 1               VERA_L1_VSCROLL_H = $9F3A ;  - V-Scroll (11:8)
005173r 1               
005173r 1               VSYNC_BIT         = $01
005173r 1               
005173r 1               ; VRAM Addresses
005173r 1               ;   Address range Description
005173r 1               ;   $00000 - $1F9BF Video RAM   - 129,424 bytes -> 126K is 129,024 (1F800)
005173r 1               ;   $1F9C0 - $1F9FF PSG registers
005173r 1               ;   $1FA00 - $1FBFF Palette
005173r 1               ;   $1FC00 - $1FFFF Sprite attributes
005173r 1               VRAM_SPRITES =      $00000  ; putting sprite data at start of VRAM for now.. may move later?
005173r 1               VRAM_BITMAP_LAYERA =$11800  ; setting this to 68K ; was starts at 70K ... so up to ~70K for sprites.. not too shabby..
005173r 1               VRAM_BITMAP_LAYERB =$18000  ; ~25K needs to start at 2K boundary... 121.5-25= 96k
005173r 1               VRAM_TEXT_SCREEN =  $1E400  ; 121.5K    256 x 21 => 32 x 24 would take 1.5K tiles is min.. 64*32 = 2K 8 config..
005173r 1               VRAM_SPRITE_BUF =   $1EC00  ; 123K - sprite attribute buffer for swapping data in ..
005173r 1               VRAM_CHARSET =      $1F000  ;  $1:F000-$1:F7FF Charset loaded by kernal here .. is at 124K ..
005173r 1               ; only can go to 126K ...
005173r 1               VRAM_palette      = $1FA00      ;
005173r 1               VRAM_sprite_attributes = $1FC00
005173r 1               
005173r 1               SPRITES_ONLY_VGA = $41
005173r 1               SPRITES_LAYER1_LAYER0_VGA = $71
005173r 1               
005173r 1               
005173r 1               ; Kernal
005173r 1               CHROUT            = $FFD2
005173r 1               GETIN             = $FFE4
005173r 1               CINT              = $FF81
005173r 1               
005173r 1               
005173r 1               ; PETSCII Codes
005173r 1               WHITE             = $05
005173r 1               RETURN            = $0D
005173r 1               SPACE             = $20
005173r 1               ZERO_CHAR         = $30
005173r 1               ONE_CHAR          = $31
005173r 1               TWO_CHAR          = $32
005173r 1               THREE_CHAR        = $33
005173r 1               FOUR_CHAR         = $34
005173r 1               FIVE_CHAR         = $35
005173r 1               SIX_CHAR          = $36
005173r 1               SEVEN_CHAR        = $37
005173r 1               EIGHT_CHAR        = $38
005173r 1               NINE_CHAR         = $39
005173r 1               
005173r 1               A_CHAR            = $41
005173r 1               C_CHAR            = $43
005173r 1               D_CHAR            = $44
005173r 1               E_CHAR            = $45
005173r 1               I_CHAR            = $49
005173r 1               J_CHAR            = $4A
005173r 1               K_CHAR            = $4B
005173r 1               L_CHAR            = $4C
005173r 1               O_CHAR            = $4F
005173r 1               T_CHAR            = $54
005173r 1               W_CHAR            = $57
005173r 1               X_CHAR            = $58
005173r 1               Y_CHAR            = $59
005173r 1               Z_CHAR            = $5A
005173r 1               
005173r 1               CLR               = $93
005173r 1               
005173r 1               ; 	$0800-$9EFF	BASIC program/variables; available to the user
005173r 1               WORLD_DATA = $6000 	;	so is %100 [Y 5 bits ] : [ab] 0 [X - 6 bits
005173r 1               SCREEN_buffer = $8000
005173r 1               
005173r 1               ; zero page layout $0022-$007F is available to user
005173r 1               ZP_PTR = $22
005173r 1               SCRATCH_PTR = $7E
005173r 1               
005173r 1               SPRITE_SIZE_ORA = $D0 ; $D0 for 16x64, $50 for 16x16
005173r 1               
005173r 1               diff_sprite_to_transparent = 15
005173r 1               
005173r 1               SCREEN_OUT_RIGHT  = 160 ; right of middle is 116, +48 = 164
005173r 1               SCREEN_OUT_LEFT8    = 256-8
005173r 1               SCREEN_OUT_LEFT16   = 256-16  ; left of middle is 100, -48=52-16=36
005173r 1               SCREEN_OUT_LEFT32   = 256-32  ; left of middle is 100, -48=52-16=36
005173r 1               SCREEN_OUT_LEFT64   = 256-64  ; left of middle is 100, -48=52-16=36
005173r 1               SCREEN_OUT_TOP     = 240
005173r 1               SCREEN_OUT_BOTTOM  = 120
005173r 1               
005173r 1               ; global data ; 2E00
005173r 1  00 00        default_irq_vector:  .addr 0 ; 4-5
005175r 1               ; current cell values in neighborhood...
005175r 1  FF           CELL_VAL_UPLEFT:  .byte 255
005176r 1  FF           CELL_VAL_UPRIGHT: .byte 255
005177r 1  FF           CELL_VAL_LEFT:    .byte 255
005178r 1  FF           CELL_VAL_SELF:    .byte 255
005179r 1  FF           CELL_VAL_RIGHT:   .byte 255
00517Ar 1  FF           CELL_VAL_DOWNLEFT: .byte 255
00517Br 1  FF           CELL_VAL_DOWNRIGHT: .byte 255
00517Cr 1               
00517Cr 1  DE AD BE EF  GLOBAL_DATA:         .byte $DE,$AD,$BE,$EF ; 0-1
005180r 1               ;line 0
005180r 1  00 00        MASTER_CLOCK:        .addr 0 ; 6-7
005182r 1  00           .byte 0
005183r 1  00           STATUS:              .byte 0
005184r 1               ;line 1
005184r 1  00           .byte 0
005185r 1  01           VSYNC_counter:       .byte 1 ; 8
005186r 1  00           STALL_COUNTERH:      .byte 0
005187r 1  00           STALL_COUNTER:       .byte 0
005188r 1               ;line 2
005188r 1  00           .byte 0
005189r 1  00           LAST_VSYNC_COUNTER:  .byte 0
00518Ar 1  00           LAST_STALLCOUNTERH:  .byte 0
00518Br 1  00           LAST_STALLCOUNTER:   .byte 0
00518Cr 1               ; line 3
00518Cr 1  FF           VERA_LOCK:           .byte 255 ; 9 value written to screen is value at time DEBUG_WRITE
00518Dr 1  50           IRQ_VERA_LOCK:       .byte 80 ; value of VERA_LOCK when reached the Interrupt
00518Er 1  40           CURRENT_BITMAP_BUFFER: .byte 64 ;
00518Fr 1               ;        A        B     CURRENT BITMAP BUFFER
00518Fr 1               ;   0   display  dirty    A is being displayed, B to be drawn on
00518Fr 1               ;  64   display  ready    B  is ready for swap
00518Fr 1               ; 128   dirty    display  B is being displayed, A to be drawn on
00518Fr 1               ; 192   ready    display  A  is ready for swap
00518Fr 1  00           LAST_BITMAP_BUFFER:    .byte 0 ;
005190r 1               
005190r 1               ; line 4
005190r 1  01           camera_facing: 		 .byte 1 ; 7
005191r 1  00           .byte 0
005192r 1  00           CAMERA_CENTER_XH:    .byte 0 ; 13
005193r 1  00           CAMERA_CENTER_YH:    .byte 0 ; 15
005194r 1               ; line 5
005194r 1  00           camera_cell_x: 		 .byte 0 ; c
005195r 1  00           camera_cell_xl:       .byte 0 ; d
005196r 1  00           camera_cell_y: 		 .byte 0 ; e
005197r 1  00           camera_cell_yl:       .byte 0 ; f
005198r 1               ; line 6
005198r 1  2C           camera_world_pos_XH:    .byte 44 ; 8
005199r 1  30           camera_world_pos_XL:       .byte 48 ; 9
00519Ar 1  0F           camera_world_pos_YH:        .byte 15 ; A
00519Br 1  80           camera_world_pos_YL:       .byte 128  ; B
00519Cr 1               ; line 7
00519Cr 1  00           DO_WATER:   .byte 0 ;
00519Dr 1  00           DO_FAUCET:  .byte 0 ;
00519Er 1  00           CALC_WATER: .byte 0 ;
00519Fr 1               ; line 8
00519Fr 1  80           NUM_AVAIL_SPRITES:   .byte 128 ; A
0051A0r 1  00           NUM_RESERVED_SPRITES:    .byte  0;(1+NUM_RESERVED_SPRITES-MASTER_CLOCK) << 1 ; F
0051A1r 1  FF           SPRITE_OBJECT_ENABLE: .byte 255 ;255 ;
0051A2r 1               
0051A2r 1  00           CAMERA_CENTER_XL:    .byte 0 ; 12
0051A3r 1  00           CAMERA_CENTER_YL:    .byte 0 ; 14
0051A4r 1  00           CAMERA_CENTER_TOP_PX: .byte 0 ; 16
0051A5r 1  00 00        CAMERA_CELL_LINE_PTR: .addr 0 ; 17-18
0051A7r 1  00           WORLD_SPRITE_NUM:    .byte 0 ; 1B
0051A8r 1  00           WORLD_WALL_SPRITE_NUM: .byte 0; 1C
0051A9r 1  FF           BUFFER_A_DIRTY:        .byte 255 ;
0051AAr 1  FF           BUFFER_B_DIRTY:        .byte 255 ;
0051ABr 1               
0051ABr 1  F0           camera_screen_out_top: .byte SCREEN_OUT_TOP       ; for determining visibility / stop conditions for checking if within range to view..
0051ACr 1  78           camera_screen_out_bottom: .byte SCREEN_OUT_BOTTOM
0051ADr 1               
0051ADr 1               ENDGLOBALS:
0051ADr 1               
0051ADr 1               .macro stash_scratch
0051ADr 1               	STA (SCRATCH_PTR)
0051ADr 1                   INC SCRATCH_PTR
0051ADr 1               .endmacro
0051ADr 1               
0051ADr 1               
0051ADr 1               custom_irq_handler: ; 2E12
0051ADr 1  AD 27 9F        lda VERA_isr
0051B0r 1  29 01           and #VSYNC_BIT
0051B2r 1  F0 11           BEQ :++
0051B4r 1                  ;  for debug ..
0051B4r 1  AD rr rr        LDA VERA_LOCK
0051B7r 1  8D rr rr        STA IRQ_VERA_LOCK
0051BAr 1               
0051BAr 1  EE rr rr        INC VSYNC_counter
0051BDr 1               
0051BDr 1  EE rr rr        INC VERA_LOCK
0051C0r 1  F0 06           BEQ :+++  ; @unlock_vera ; if we don't have lock we'll just fail this frame..
0051C2r 1                @NOP_nothing_to_do:
0051C2r 1  CE rr rr      : DEC VERA_LOCK
0051C5r 1  6C rr rr      : jmp (default_irq_vector)
0051C8r 1               
0051C8r 1  AD rr rr      : LDA CURRENT_BITMAP_BUFFER
0051CBr 1  4D rr rr        EOR LAST_BITMAP_BUFFER
0051CEr 1  F0 F2           BEQ :--- ; if these match then there's nothing to change
0051D0r 1  18              CLC
0051D1r 1  AD rr rr        LDA CURRENT_BITMAP_BUFFER
0051D4r 1  8D rr rr        STA LAST_BITMAP_BUFFER
0051D7r 1               ;        A        B     CURRENT BITMAP BUFFER
0051D7r 1               ;   0   display  dirty    A is being displayed, B to be drawn on
0051D7r 1               ;  64   display  ready    B  is ready for swap
0051D7r 1               ; 128   dirty    display  B is being displayed, A to be drawn on
0051D7r 1               ; 192   ready    display  A  is ready for swap
0051D7r 1  30 0B           BMI @DISPLAY_B
0051D9r 1               @DISPLAY_A:
0051D9r 1  F0 E7           BEQ @NOP_nothing_to_do ;
0051DBr 1  A9 80           LDA #128
0051DDr 1  8D rr rr        STA CURRENT_BITMAP_BUFFER
0051E0r 1  A9 C0           LDA #VRAM_BITMAP_LAYERB>>9
0051E2r 1  80 09           BRA @GO_SWAP
0051E4r 1               @DISPLAY_B:
0051E4r 1  C9 C0           CMP #192
0051E6r 1  90 DA           BCC @NOP_nothing_to_do
0051E8r 1  9C rr rr        STZ CURRENT_BITMAP_BUFFER
0051EBr 1  A9 8C           LDA #VRAM_BITMAP_LAYERA>>9
0051EDr 1               @GO_SWAP:
0051EDr 1  8D 2F 9F        STA VERA_L0_tilebase
0051F0r 1               
0051F0r 1  A9 01           LDA #$01
0051F2r 1  8D 25 9F        STA VERA_ctrl
0051F5r 1               
0051F5r 1  A2 FF           LDX #$FF
0051F7r 1  8E 20 9F        STX VERA_addr_low
0051FAr 1  8E 21 9F        STX VERA_addr_high
0051FDr 1  A9 19           LDA #$19
0051FFr 1  8D 22 9F        STA VERA_addr_bank
005202r 1               
005202r 1  9C 25 9F        STZ VERA_ctrl  ;  reset to address 0
005205r 1  8D 22 9F        STA VERA_addr_bank
005208r 1               
005208r 1  A9 EF           LDA #$EF
00520Ar 1  8D 21 9F        STA VERA_addr_high
00520Dr 1  8E 20 9F        STX VERA_addr_low
005210r 1               
005210r 1  AE rr rr        LDX NUM_AVAIL_SPRITES
005213r 1  AD 23 9F      : LDA VERA_data0   ;  4
005216r 1  8D 24 9F        STA VERA_data1   ;  4  20
005219r 1  AD 23 9F        LDA VERA_data0   ;  4  8
00521Cr 1  8D 24 9F        STA VERA_data1   ;  4  20
00521Fr 1  AD 23 9F        LDA VERA_data0   ;  4  12
005222r 1  8D 24 9F        STA VERA_data1   ;  4  20
005225r 1  AD 23 9F        LDA VERA_data0   ;  4  16
005228r 1  8D 24 9F        STA VERA_data1   ;  4  20
00522Br 1  AD 23 9F        LDA VERA_data0   ;  4
00522Er 1  8D 24 9F        STA VERA_data1   ;  4  20
005231r 1  AD 23 9F        LDA VERA_data0   ;  4  8
005234r 1  8D 24 9F        STA VERA_data1   ;  4  20
005237r 1  AD 23 9F        LDA VERA_data0   ;  4  12
00523Ar 1  8D 24 9F        STA VERA_data1   ;  4  20
00523Dr 1  AD 23 9F        LDA VERA_data0   ;  4  16
005240r 1  8D 24 9F        STA VERA_data1   ;  4  20
005243r 1  CA              DEX         ;  2  22
005244r 1  D0 CD           BNE :-      ;  3  25       8per byte = 64 per sprite + 5 = 69 per * 128 = 8,832 cycles
005246r 1               
005246r 1  6C rr rr        jmp (default_irq_vector)
005249r 1                  ; RTI will happen after jump
005249r 1               
005249r 1               
005249r 1               ;TUB_WORLD:    "presentation" layer
005249r 1               ;TUB_WORLD_LOW: hidden low bytes
005249r 1               ;WATER_CALC_SCRATCH: scratch layer for bouncing
005249r 1               ;WATER_CALC_SCRATCH_LOW: scratch layer for bouncing
005249r 1               
005249r 1               
005249r 1               ; produce downright to scratch for next row to use as upleft...
005249r 1               .macro calc_row_even row, start, end ; ZP_PTR should contain right+downright of right most..
005249r 1               ;  going to 14bit here ..
005249r 1               .local SELF
005249r 1               .local SELF_H
005249r 1               .local SELF_L
005249r 1               .local SC_UPLEFT_H ; scratch upleft
005249r 1               .local SC_UPLEFT_L
005249r 1               .local LEFT_H
005249r 1               .local LEFT_L
005249r 1               .local DOWNLEFT_H
005249r 1               .local DOWNLEFT_L
005249r 1               .local SC_SELF_H ; scratch self
005249r 1               .local SC_SELF_L
005249r 1               .local COUNT
005249r 1               .local ZP_SCRATCH_AH
005249r 1               .local ZP_SCRATCH_AL
005249r 1               .local ZP_SCRATCH_BH
005249r 1               .local ZP_SCRATCH_BL
005249r 1               .local ZP_SELF_L
005249r 1                  SELF = (64*row)+start-1
005249r 1                  SELF_H = TUB_WORLD+SELF
005249r 1                  SELF_L = TUB_WORLD_LOW+SELF
005249r 1                  SC_SELF_H = WATER_CALC_SCRATCH+SELF
005249r 1                  SC_SELF_L = WATER_CALC_SCRATCH_LOW+SELF
005249r 1                  SC_UPLEFT_H = SC_SELF_H-64
005249r 1                  SC_UPLEFT_L = SC_SELF_L-64
005249r 1                  LEFT_H = SELF_H-1
005249r 1                  LEFT_L = SELF_L+SELF-1
005249r 1                  DOWNLEFT_H = SELF_H+63
005249r 1                  DOWNLEFT_L = SELF_L+SELF+63
005249r 1                  COUNT = 1+end-start
005249r 1                  ZP_SCRATCH_AL = ZP_PTR
005249r 1                  ZP_SCRATCH_AH = ZP_PTR+1
005249r 1                  ZP_SCRATCH_BL = ZP_PTR+2
005249r 1                  ZP_SCRATCH_BH = ZP_PTR+3
005249r 1                  ZP_SELF_L     = ZP_PTR+4
005249r 1               
005249r 1               
005249r 1                  LDX #COUNT        ;  2  2    leftmost is done at x=1
005249r 1               
005249r 1                  ;feed in one to start
005249r 1                  LDA SELF_L+1,X     ; 4   6
005249r 1                  ADC DOWNLEFT_L+1,X ; 8  10
005249r 1                  STA ZP_SCRATCH_AL  ; 4  14    because this is used by A / EVEN count.
005249r 1               
005249r 1                  LDA SELF_H+1,X     ; 4  18
005249r 1                  ADC DOWNLEFT_H+1,X ; 4  22
005249r 1                  STA ZP_SCRATCH_AH  ; 4  26    ;  26 cycles overhead to get primed.. OK ...
005249r 1               
005249r 1               
005249r 1                : LDA SELF_L,X      ;  4  4
005249r 1                  ADC DOWNLEFT_L,X  ;  4  8
005249r 1                  STA ZP_SCRATCH_BL ;  3  11    because used by B / ODD counts
005249r 1               
005249r 1                  LDA SELF_H,X      ;  4  15
005249r 1                  ADC DOWNLEFT_H,X  ;  4  19
005249r 1                  STA ZP_SCRATCH_BH ;  3  22
005249r 1               
005249r 1                  LDA ZP_SCRATCH_BL ;  3  26
005249r 1                  ADC ZP_SCRATCH_AL ;  3  29    add previous - self+right+downleft+downright ;
005249r 1                  STA SC_SELF_L,X   ;  4  33    stash downright for next row to use as upleft ..
005249r 1               
005249r 1                  LDA ZP_SCRATCH_BH ;  3  36
005249r 1                  ADC ZP_SCRATCH_AH ;  3  39
005249r 1                  STA SC_SELF_H,X   ;  4  43
005249r 1               
005249r 1                  LDA SC_SELF_L,X   ;  4  47    recall the downright low byte
005249r 1                  ADC SC_UPLEFT_L,X ;  4  51    add upleft from prev row
005249r 1                  STA ZP_SELF_L     ;  3  54    save this to zero page temporarily..
005249r 1               
005249r 1                  LDA SC_SELF_H,X   ;  4  58    recall downright high byte
005249r 1                  ADC SC_UPLEFT_H,X ;  4  63    add the uoleft high byte
005249r 1                  ROR ; 8x to 4x    ;  2  65
005249r 1               
005249r 1                  ROR ZP_SELF_L     ;  5  70
005249r 1                  LSR ; 4x to 2x    ;  2  72
005249r 1                  ADC #0
005249r 1               ;   ROR ZP_SELF_L     ;  5  77
005249r 1                  LSR ; 2x to 1x    ;  2  79
005249r 1                  STA SELF_H,X      ;  4  83    save the new value.. this self+downleft is in ZP_PTR+1  .. OK
005249r 1               
005249r 1                  LDA ZP_SELF_L     ;  3  86
005249r 1                  ROR
005249r 1                  STA SELF_L,X      ;  4  92
005249r 1                  DEX               ;  2  94    OK now this should be odd..
005249r 1               
005249r 1                  LDA SELF_L,X      ;  4  4
005249r 1                  ADC DOWNLEFT_L,X  ;  4  8
005249r 1                  STA ZP_SCRATCH_AL ;  3  11    because used by A / EVEN counts
005249r 1                  LDA SELF_H,X      ;  4  15
005249r 1                  ADC DOWNLEFT_H,X  ;  4  19
005249r 1                  STA ZP_SCRATCH_AH ;  3  22
005249r 1               
005249r 1                  LDA ZP_SCRATCH_BL ;  3  26    add previous - self+right+downleft+downright ;
005249r 1                  ADC ZP_SCRATCH_AL ;  3  29
005249r 1                  STA SC_SELF_L,X   ;  4  33    stash downright for next row to use as upleft ..
005249r 1                  LDA ZP_SCRATCH_BH ;  3  36
005249r 1                  ADC ZP_SCRATCH_AH ;  3  39
005249r 1                  STA SC_SELF_H,X   ;  4  43
005249r 1               
005249r 1                  LDA SC_SELF_L,X   ;  4  49    recall the downright low byte
005249r 1                  ADC SC_UPLEFT_L,X ;  4  53    add upleft from prev row
005249r 1                  STA ZP_SELF_L     ;  3  56    save this to zero page temporarily..
005249r 1                  LDA SC_SELF_H,X               ;  2  59    recall downright high byte
005249r 1                  ADC SC_UPLEFT_H,X ;  4  63    add the uoleft high byte
005249r 1                  ROR ; 8x to 4x    ;  2  65
005249r 1                  ROR ZP_SELF_L     ;  5  70
005249r 1                  LSR ; 4x to 2x    ;  2  72
005249r 1                  ADC #0
005249r 1                ;  ROR ZP_SELF_L     ;  5  77
005249r 1                  LSR ; 2x to 1x    ;  2  79
005249r 1                  STA SELF_H,X      ;  4  83    save the new value.. this self+downleft is in ZP_PTR+1  .. OK
005249r 1               
005249r 1                  LDA ZP_SELF_L     ;  3  86
005249r 1                  ROR
005249r 1                  STA SELF_L,X      ;  4  92
005249r 1                  DEX               ;  2  94    OK now this should be odd..
005249r 1               
005249r 1                  BNE :-            ;  3  - so ~96 each.. expecting almost 1 Jiffy to calculate world now..
005249r 1               
005249r 1                  ;  exiting this, we have the next right+downright bit stashed in ZP_PTP[0,1]
005249r 1               .endmacro
005249r 1               
005249r 1               UPDATE_WATER_SIM:
005249r 1                  ; for each row, need to fixup right-most and left-most few so that uplefts exist and down-rights can be calculated..
005249r 1                  ; for now, am leaving the borders out of it..
005249r 1  A2 22 BD rr     calc_row_even  2, 21, 54
00524Dr 1  rr 7D rr rr  
005251r 1  85 22 BD rr  
0052D7r 1  A2 24 BD rr     calc_row_even  3, 20, 55
0052DBr 1  rr 7D rr rr  
0052DFr 1  85 22 BD rr  
005365r 1  A2 26 BD rr     calc_row_even  4, 19, 56
005369r 1  rr 7D rr rr  
00536Dr 1  85 22 BD rr  
0053F3r 1  A2 2A BD rr     calc_row_even  5, 16, 57
0053F7r 1  rr 7D rr rr  
0053FBr 1  85 22 BD rr  
005481r 1  A2 2C BD rr     calc_row_even  6, 14, 57
005485r 1  rr 7D rr rr  
005489r 1  85 22 BD rr  
00550Fr 1  A2 2E BD rr     calc_row_even  7, 13, 58
005513r 1  rr 7D rr rr  
005517r 1  85 22 BD rr  
00559Dr 1  A2 2E BD rr     calc_row_even  8, 12, 57
0055A1r 1  rr 7D rr rr  
0055A5r 1  85 22 BD rr  
00562Br 1  A2 30 BD rr     calc_row_even  9, 11, 58
00562Fr 1  rr 7D rr rr  
005633r 1  85 22 BD rr  
0056B9r 1  A2 2E BD rr     calc_row_even 10, 11, 56
0056BDr 1  rr 7D rr rr  
0056C1r 1  85 22 BD rr  
005747r 1  A2 30 BD rr     calc_row_even 11, 10, 57
00574Br 1  rr 7D rr rr  
00574Fr 1  85 22 BD rr  
0057D5r 1  A2 2E BD rr     calc_row_even 12, 10, 55
0057D9r 1  rr 7D rr rr  
0057DDr 1  85 22 BD rr  
005863r 1  A2 30 BD rr     calc_row_even 13,  9, 56
005867r 1  rr 7D rr rr  
00586Br 1  85 22 BD rr  
0058F1r 1  A2 2E BD rr     calc_row_even 14,  9, 54
0058F5r 1  rr 7D rr rr  
0058F9r 1  85 22 BD rr  
00597Fr 1  A2 30 BD rr     calc_row_even 15,  8, 55
005983r 1  rr 7D rr rr  
005987r 1  85 22 BD rr  
005A0Dr 1  A2 2E BD rr     calc_row_even 16,  8, 53
005A11r 1  rr 7D rr rr  
005A15r 1  85 22 BD rr  
005A9Br 1  A2 30 BD rr     calc_row_even 17,  7, 54
005A9Fr 1  rr 7D rr rr  
005AA3r 1  85 22 BD rr  
005B29r 1  A2 2E BD rr     calc_row_even 18,  7, 52
005B2Dr 1  rr 7D rr rr  
005B31r 1  85 22 BD rr  
005BB7r 1  A2 30 BD rr     calc_row_even 19,  6, 53
005BBBr 1  rr 7D rr rr  
005BBFr 1  85 22 BD rr  
005C45r 1  A2 2E BD rr     calc_row_even 20,  6, 51
005C49r 1  rr 7D rr rr  
005C4Dr 1  85 22 BD rr  
005CD3r 1  A2 30 BD rr     calc_row_even 21,  5, 52
005CD7r 1  rr 7D rr rr  
005CDBr 1  85 22 BD rr  
005D61r 1  A2 2E BD rr     calc_row_even 22,  5, 50
005D65r 1  rr 7D rr rr  
005D69r 1  85 22 BD rr  
005DEFr 1  A2 2E BD rr     calc_row_even 23,  5, 50
005DF3r 1  rr 7D rr rr  
005DF7r 1  85 22 BD rr  
005E7Dr 1  A2 2C BD rr     calc_row_even 24,  5, 48
005E81r 1  rr 7D rr rr  
005E85r 1  85 22 BD rr  
005F0Br 1  A2 2A BD rr     calc_row_even 25,  5, 46
005F0Fr 1  rr 7D rr rr  
005F13r 1  85 22 BD rr  
005F99r 1  A2 28 BD rr     calc_row_even 26,  6, 45
005F9Dr 1  rr 7D rr rr  
005FA1r 1  85 22 BD rr  
006027r 1  A2 24 BD rr     calc_row_even 27,  7, 42
00602Br 1  rr 7D rr rr  
00602Fr 1  85 22 BD rr  
0060B5r 1  A2 22 BD rr     calc_row_even 28,  8, 41
0060B9r 1  rr 7D rr rr  
0060BDr 1  85 22 BD rr  
006143r 1               
006143r 1  60              RTS
006144r 1               
006144r 1               start:
006144r 1                 ; start of program - init globals
006144r 1  AD 14 03       lda IRQVec
006147r 1  8D rr rr       sta default_irq_vector
00614Ar 1  AD 15 03       lda IRQVec+1
00614Dr 1  8D rr rr       sta default_irq_vector+1
006150r 1               
006150r 1  9C 29 9F       stz VERA_dc_video   ; disable display
006153r 1  A9 33          lda #51 ; #43 ; set scale for bitmap mode - going for 215x161 mode
006155r 1  8D 2A 9F       sta VERA_dc_hscale
006158r 1  8D 2B 9F       sta VERA_dc_vscale
00615Br 1                 ; for now no L0 or L1
00615Br 1               
00615Br 1                 ; let's stick that test sprite data into VRAM at zero for now..
00615Br 1  9C 25 9F       stz VERA_ctrl
00615Er 1  9C 20 9F       stz VERA_addr_low
006161r 1  9C 21 9F       stz VERA_addr_high
006164r 1  A9 10          lda #$10
006166r 1  8D 22 9F       sta VERA_addr_bank
006169r 1                 ; load test VRAM data
006169r 1               
006169r 1                 ; is 512 bytes at test_cell_sprite label
006169r 1  A0 00          ldy #0
00616Br 1               
00616Br 1  A9 rr          LDA #<test_vram_data
00616Dr 1  85 22          STA ZP_PTR
00616Fr 1  A9 rr          LDA #>test_vram_data
006171r 1  85 23          STA ZP_PTR+1
006173r 1  A2 23          LDX #35   ;   num pages to copy - 34 pages of 256bytes => 276 sprite addresses..
006175r 1  80 02          BRA :++
006177r 1                 :
006177r 1  E6 23             INC ZP_PTR+1
006179r 1                   :
006179r 1  B1 22              LDA (ZP_PTR),Y
00617Br 1  8D 23 9F           STA VERA_data0
00617Er 1  C8                 INY
00617Fr 1  D0 F8              BNE :-
006181r 1  CA                DEX
006182r 1  D0 F3             BNE :--
006184r 1               
006184r 1                 ; write custom palette data  - 16 colors only for now.. $1:FA00-$1:FBFF   VERA Color Palette (256 x 2 bytes)
006184r 1  A9 01          LDA #1
006186r 1  8D 25 9F       STA VERA_ctrl
006189r 1  A9 3F          LDA #63
00618Br 1  8D 20 9F       STA VERA_addr_low
00618Er 1  A9 FA          LDA #$FA
006190r 1  8D 21 9F       STA VERA_addr_high
006193r 1  A9 19          LDA #$19
006195r 1  8D 22 9F       STA VERA_addr_bank
006198r 1  9C 25 9F       STZ VERA_ctrl
00619Br 1  A2 1F          LDX #31
00619Dr 1  8E 20 9F       STX VERA_addr_low
0061A0r 1  A9 FA          LDA #$FA
0061A2r 1  8D 21 9F       STA VERA_addr_high
0061A5r 1  A9 19          LDA #$19
0061A7r 1  8D 22 9F       STA VERA_addr_bank
0061AAr 1                 :
0061AAr 1  BD rr rr         LDA test_optimal_pal_data,X
0061ADr 1  8D 23 9F         STA VERA_data0
0061B0r 1  49 FF            EOR #$FF
0061B2r 1  8D 24 9F         STA VERA_data1
0061B5r 1  CA               DEX
0061B6r 1  D0 F2            BNE :-
0061B8r 1  BD rr rr       LDA test_optimal_pal_data,X
0061BBr 1  8D 23 9F       STA VERA_data0
0061BEr 1               
0061BEr 1  A9 08          LDA #8
0061C0r 1  9C 34 9F       STz VERA_L1_config
0061C3r 1  A9 F8          LDA #VRAM_CHARSET >> 9
0061C5r 1  8D 36 9F       STA VERA_L1_tilebase
0061C8r 1  A9 F2          LDA #VRAM_TEXT_SCREEN >> 9
0061CAr 1  8D 35 9F       STA VERA_L1_mapbase
0061CDr 1               
0061CDr 1  9C 20 9F       STZ VERA_addr_low
0061D0r 1  A9 18          LDA #>VRAM_BITMAP_LAYERA
0061D2r 1  8D 21 9F       STA VERA_addr_high
0061D5r 1  A9 11          LDA #$11
0061D7r 1  8D 22 9F       STA VERA_addr_bank
0061DAr 1  A2 67          LDX #103  ;  zero bufferA
0061DCr 1  A0 00          LDY #0
0061DEr 1  9C 23 9F     : STZ VERA_data0
0061E1r 1  C8             INY
0061E2r 1  D0 FA          BNE :-
0061E4r 1  CA             DEX
0061E5r 1  D0 F7          BNE :-
0061E7r 1  A2 65          LDX #101  ;  write A to bufferB initially as debug / flashing display when swapped..
0061E9r 1                 ;LDA #255
0061E9r 1  9C 23 9F     : STZ VERA_data0
0061ECr 1  C8             INY
0061EDr 1  D0 FA          BNE :-
0061EFr 1  CA             DEX
0061F0r 1  D0 F7          BNE :-
0061F2r 1               
0061F2r 1  9C 23 9F       STZ VERA_data0
0061F5r 1  A9 21          LDA #$21
0061F7r 1  8D 22 9F       STA VERA_addr_bank
0061FAr 1               
0061FAr 1  A2 0F          LDX #15
0061FCr 1  A0 14        : LDY #20
0061FEr 1  A9 01          LDA #$01
006200r 1               
006200r 1  8D 23 9F       : STA VERA_data0
006203r 1  88               DEY
006204r 1  D0 FA            BNE :-
006206r 1  A0 F1            LDY #$F1
006208r 1  8C 23 9F         STY VERA_data0 ; cols 20-23
00620Br 1  8C 23 9F         STY VERA_data0
00620Er 1  8C 23 9F         STY VERA_data0
006211r 1  8C 23 9F         STY VERA_data0
006214r 1               
006214r 1  8C 23 9F         STY VERA_data0 ; cols 24-27
006217r 1  8C 23 9F         STY VERA_data0
00621Ar 1  8C 23 9F         STY VERA_data0
00621Dr 1  8C 23 9F         STY VERA_data0
006220r 1               
006220r 1  8C 23 9F         STY VERA_data0 ; cols 28-31
006223r 1  8C 23 9F         STY VERA_data0
006226r 1  8C 23 9F         STY VERA_data0
006229r 1  8C 23 9F         STY VERA_data0
00622Cr 1  CA              DEX
00622Dr 1  D0 CD           BNE :--
00622Fr 1  A2 A0          LDX #160
006231r 1  8C 23 9F       : STY VERA_data0
006234r 1  8C 23 9F         STY VERA_data0
006237r 1  CA               DEX
006238r 1  D0 F7            BNE :-
00623Ar 1               ;  LDA #4
00623Ar 1               ;  STA VERA_L1_HSCROLL_L
00623Ar 1               ;  STA VERA_L1_VSCROLL_L
00623Ar 1               
00623Ar 1  9C 20 9F       STZ VERA_addr_low
00623Dr 1  A9 E4          LDA #>VRAM_TEXT_SCREEN
00623Fr 1  8D 21 9F       STA VERA_addr_high
006242r 1  A2 04          LDX #4
006244r 1  A9 20          LDA #32
006246r 1  8D 23 9F     : STA VERA_data0
006249r 1  C8             INY
00624Ar 1  D0 FA          BNE :-
00624Cr 1  CA             DEX
00624Dr 1  D0 F7          BNE :-
00624Fr 1               
00624Fr 1  A9 06          LDA #$06
006251r 1  8D 2D 9F       STA VERA_L0_config
006254r 1  A9 01          LDA #$01 ; set L0 to palette offset 1 for now, to see where stuff is.
006256r 1  8D 31 9F       STA VERA_L0_HSCROLL_H
006259r 1  A9 8C          LDA #(VRAM_BITMAP_LAYERA>>9)
00625Br 1               
00625Br 1               ;  LDA #VRAM_BITMAP_LAYERB>>9
00625Br 1  8D 2F 9F       STA VERA_L0_tilebase
00625Er 1               
00625Er 1  A9 06          LDA #6
006260r 1  8D 20 9F       STA VERA_addr_low
006263r 1  A9 EC          LDA #>VRAM_SPRITE_BUF
006265r 1  8D 21 9F       STA VERA_addr_high
006268r 1  A9 41          LDA #$41
00626Ar 1  8D 22 9F       STA VERA_addr_bank
00626Dr 1  9C 23 9F       : STZ VERA_data0
006270r 1  E8               INX
006271r 1  D0 FA            BNE :-
006273r 1                 ; enable display
006273r 1  9C 25 9F       stz VERA_ctrl
006276r 1  A9 71          lda #SPRITES_LAYER1_LAYER0_VGA ; #SPRITES_ONLY_VGA
006278r 1  8D 29 9F       sta VERA_dc_video
00627Br 1               
00627Br 1               ;  DEC VERA_LOCK ; unlock the vera for first go...
00627Br 1               ;   BRA @camera_world_changed
00627Br 1                 ; overwrite RAM IRQ vector with custom handler address
00627Br 1  78             sei ; disable IRQ while vector is changing
00627Cr 1  A9 rr          lda #<custom_irq_handler
00627Er 1  8D 14 03       sta IRQVec
006281r 1  A9 rr          lda #>custom_irq_handler
006283r 1  8D 15 03       sta IRQVec+1
006286r 1  A9 01          lda #VSYNC_BIT ; make VERA only generate VSYNC IRQs
006288r 1  8D 26 9F       sta VERA_ien
00628Br 1  58             cli ; enable IRQ now that vector is properly set
00628Cr 1               
00628Cr 1               
00628Cr 1                 ; main loop here...
00628Cr 1  9C rr rr        STZ camera_facing
00628Fr 1               
00628Fr 1               @camera_world_changed:
00628Fr 1                  ; copy over cell YL as-is
00628Fr 1  AD rr rr        LDA camera_world_pos_YL
006292r 1  8D rr rr        STA camera_cell_yl
006295r 1                  ; YH gets copied over ..
006295r 1  AD rr rr        LDA camera_world_pos_YH
006298r 1  8D rr rr        STA camera_cell_y
00629Br 1                  ; cellX = WORLDX*ratio - floor(cellY)/2
00629Br 1                  ;  halve floor(cellY)
00629Br 1  4A              LSR
00629Cr 1  85 7F           STA $7F ; stash it for scratch
00629Er 1  A9 00           LDA #0
0062A0r 1  6A              ROR
0062A1r 1  85 7E           STA $7E ; and there's the half..
0062A3r 1               
0062A3r 1  AE rr rr        LDX camera_world_pos_XH
0062A6r 1  AC rr rr        LDY camera_world_pos_XL
0062A9r 1  18              CLC
0062AAr 1  B9 rr rr        LDA WORLD_TO_CELL_XH,Y ; that bit from pos_XL
0062ADr 1  7D rr rr        ADC WORLD_TO_CELL_XL,X ; plus the bit from pos_XH
0062B0r 1  A8              TAY   ;  cellXL from ratio
0062B1r 1  BD rr rr        LDA WORLD_TO_CELL_XH,X
0062B4r 1  69 00           ADC #0 ; gotta do that carry and all ..
0062B6r 1  AA              TAX   ; cellXH from ratio
0062B7r 1               
0062B7r 1  98              TYA
0062B8r 1  38              SEC
0062B9r 1  E5 7E           SBC $7E
0062BBr 1  8D rr rr        STA camera_cell_xl
0062BEr 1  8A              TXA
0062BFr 1  E5 7F           SBC $7F
0062C1r 1  8D rr rr        STA camera_cell_x
0062C4r 1  4C rr rr        jmp @do_update
0062C7r 1               
0062C7r 1               @camera_cell_changed: ; run through this more as a normalization step for camera..
0062C7r 1                  ; worldX = scaled(floor(cellY)/2 + cellX )
0062C7r 1  AD rr rr        LDA camera_cell_yl
0062CAr 1  8D rr rr        STA camera_world_pos_YL
0062CDr 1  AD rr rr        LDA camera_cell_y
0062D0r 1  8D rr rr        STA camera_world_pos_YH
0062D3r 1  4A              LSR
0062D4r 1  AA              TAX  ; high byte floor(Y)/2
0062D5r 1  A9 00           LDA #0
0062D7r 1  6A              ROR ; either is zero or 128 now ... either way, carry is cleared.
0062D8r 1  6D rr rr        ADC camera_cell_xl
0062DBr 1  A8              TAY ; stash the low to byte
0062DCr 1  8A              TXA ; high byte floor (Y)/2 .. ready for adding
0062DDr 1  6D rr rr        ADC camera_cell_x
0062E0r 1  AA              TAX ; stash high byte ... carry _should_ be cleared unless X >255 ... ?
0062E1r 1  B9 rr rr        LDA CELL_LOW_TO_WORLD_XL,Y
0062E4r 1  7D rr rr        ADC CELL_TO_WORLD_XL,X
0062E7r 1  8D rr rr        STA camera_world_pos_XL
0062EAr 1  B9 rr rr        LDA CELL_LOW_TO_WORLD_XH,Y
0062EDr 1  7D rr rr        ADC CELL_TO_WORLD_XH,X
0062F0r 1  8D rr rr        STA camera_world_pos_XH
0062F3r 1                  ;  jmp @do_update ; superfluous currently. redundant even..
0062F3r 1               
0062F3r 1               
0062F3r 1               @do_update:
0062F3r 1               
0062F3r 1                  ;  set up screen center stuff
0062F3r 1               
0062F3r 1               
0062F3r 1  AD rr rr        LDA camera_facing
0062F6r 1  29 7F           AND #127
0062F8r 1  AA              TAX
0062F9r 1  BD rr rr        LDA WORLD_SPRITE_NUM_lookies,X
0062FCr 1  8D rr rr        STA WORLD_SPRITE_NUM
0062FFr 1  BD rr rr        LDA WORLD_WALL_SPRITE_NUM_lookies,X
006302r 1  8D rr rr        STA WORLD_WALL_SPRITE_NUM
006305r 1               
006305r 1  38              SEC
006306r 1  BD rr rr        LDA WORLD_SPRITE_CENTER_XL,X
006309r 1  8D rr rr        STA CAMERA_CENTER_XL
00630Cr 1  BD rr rr        LDA WORLD_SPRITE_CENTER_XH,X
00630Fr 1  E9 1C           SBC #28
006311r 1  8D rr rr        STA CAMERA_CENTER_XH
006314r 1               
006314r 1  BD rr rr        LDA WORLD_SPRITE_CENTER_YL,X
006317r 1  8D rr rr        STA CAMERA_CENTER_YL
00631Ar 1  38              SEC
00631Br 1  BD rr rr        LDA WORLD_SPRITE_CENTER_YH,X
00631Er 1  E9 14           SBC #20
006320r 1  8D rr rr        STA CAMERA_CENTER_TOP_PX
006323r 1               
006323r 1  AE rr rr         LDX camera_facing
006326r 1               
006326r 1  AD rr rr         LDA camera_cell_xl
006329r 1  4A               LSR ;   /2
00632Ar 1  4A               LSR ;   /4
00632Br 1  4A               LSR ;   /8
00632Cr 1  4A               LSR ;   /16
00632Dr 1  38               SEC
00632Er 1  E9 08            SBC #8 ;   subtract le middle..
006330r 1  A8               TAY
006331r 1  B0 29            BCS :++    ;  is positive..
006333r 1  18             : CLC
006334r 1  AD rr rr         LDA CAMERA_CENTER_XL
006337r 1  7D rr rr         ADC SUBCELL_X_COS_L,X
00633Ar 1  8D rr rr         STA CAMERA_CENTER_XL
00633Dr 1  AD rr rr         LDA CAMERA_CENTER_XH
006340r 1  7D rr rr         ADC SUBCELL_X_COS_H,X
006343r 1  8D rr rr         STA CAMERA_CENTER_XH
006346r 1  38               SEC
006347r 1  AD rr rr         LDA CAMERA_CENTER_YL
00634Ar 1  FD rr rr         SBC SUBCELL_Y_SIN_L,X
00634Dr 1  8D rr rr         STA CAMERA_CENTER_YL
006350r 1  AD rr rr         LDA CAMERA_CENTER_TOP_PX
006353r 1  FD rr rr         SBC SUBCELL_Y_SIN_H,X
006356r 1  8D rr rr         STA CAMERA_CENTER_TOP_PX
006359r 1  C8               INY
00635Ar 1  D0 D7            BNE :-
00635Cr 1  F0 29          : BEQ :++
00635Er 1  38             : SEC
00635Fr 1  AD rr rr         LDA CAMERA_CENTER_XL
006362r 1  FD rr rr         SBC SUBCELL_X_COS_L,X
006365r 1  8D rr rr         STA CAMERA_CENTER_XL
006368r 1  AD rr rr         LDA CAMERA_CENTER_XH
00636Br 1  FD rr rr         SBC SUBCELL_X_COS_H,X
00636Er 1  8D rr rr         STA CAMERA_CENTER_XH
006371r 1  18               CLC
006372r 1  AD rr rr         LDA CAMERA_CENTER_YL
006375r 1  7D rr rr         ADC SUBCELL_Y_SIN_L,X
006378r 1  8D rr rr         STA CAMERA_CENTER_YL
00637Br 1  AD rr rr         LDA CAMERA_CENTER_TOP_PX
00637Er 1  7D rr rr         ADC SUBCELL_Y_SIN_H,X
006381r 1  8D rr rr         STA CAMERA_CENTER_TOP_PX
006384r 1  88               DEY
006385r 1  D0 D7            BNE :-
006387r 1                 :
006387r 1               
006387r 1  AD rr rr         LDA camera_cell_yl
00638Ar 1  4A               LSR ;   /2
00638Br 1  4A               LSR ;   /4
00638Cr 1  4A               LSR ;   /8
00638Dr 1  4A               LSR ;   /16
00638Er 1  38               SEC
00638Fr 1  E9 08            SBC #8 ;   subtract le middle..
006391r 1  A8               TAY
006392r 1  B0 29            BCS :++    ;  is positive..
006394r 1  18             : CLC
006395r 1  AD rr rr         LDA CAMERA_CENTER_XL
006398r 1  7D rr rr         ADC SUBCELL_X_SIN_L,X
00639Br 1  8D rr rr         STA CAMERA_CENTER_XL
00639Er 1  AD rr rr         LDA CAMERA_CENTER_XH
0063A1r 1  7D rr rr         ADC SUBCELL_X_SIN_H,X
0063A4r 1  8D rr rr         STA CAMERA_CENTER_XH
0063A7r 1  18               CLC
0063A8r 1  AD rr rr         LDA CAMERA_CENTER_YL
0063ABr 1  7D rr rr         ADC SUBCELL_Y_COS_L,X
0063AEr 1  8D rr rr         STA CAMERA_CENTER_YL
0063B1r 1  AD rr rr         LDA CAMERA_CENTER_TOP_PX
0063B4r 1  7D rr rr         ADC SUBCELL_Y_COS_H,X
0063B7r 1  8D rr rr         STA CAMERA_CENTER_TOP_PX
0063BAr 1  C8               INY
0063BBr 1  D0 D7            BNE :-
0063BDr 1  F0 29          : BEQ :++
0063BFr 1  38             : SEC
0063C0r 1  AD rr rr         LDA CAMERA_CENTER_XL
0063C3r 1  FD rr rr         SBC SUBCELL_X_SIN_L,X
0063C6r 1  8D rr rr         STA CAMERA_CENTER_XL
0063C9r 1  AD rr rr         LDA CAMERA_CENTER_XH
0063CCr 1  FD rr rr         SBC SUBCELL_X_SIN_H,X
0063CFr 1  8D rr rr         STA CAMERA_CENTER_XH
0063D2r 1               
0063D2r 1  38               SEC
0063D3r 1  AD rr rr         LDA CAMERA_CENTER_YL
0063D6r 1  FD rr rr         SBC SUBCELL_Y_COS_L,X
0063D9r 1  8D rr rr         STA CAMERA_CENTER_YL
0063DCr 1  AD rr rr         LDA CAMERA_CENTER_TOP_PX
0063DFr 1  FD rr rr         SBC SUBCELL_Y_COS_H,X
0063E2r 1  8D rr rr         STA CAMERA_CENTER_TOP_PX
0063E5r 1  88               DEY
0063E6r 1  D0 D7            BNE :-
0063E8r 1                 :
0063E8r 1               
0063E8r 1                  ;  set up tub pointer .. this will let us grab the height value for current location..
0063E8r 1               
0063E8r 1  64 7C            STZ $7C
0063EAr 1  AD rr rr         LDA camera_cell_y
0063EDr 1  4A               LSR  ;  y pages of 128
0063EEr 1  66 7C            ROR $7C
0063F0r 1  4A               LSR  ; y pages of 64 !
0063F1r 1  66 7C            ROR $7C
0063F3r 1  69 rr            ADC #>TUB_WORLD
0063F5r 1  85 7D            STA $7D
0063F7r 1  8D rr rr         STA CAMERA_CELL_LINE_PTR+1
0063FAr 1  A5 7C            LDA $7C
0063FCr 1  8D rr rr         STA CAMERA_CELL_LINE_PTR
0063FFr 1               
0063FFr 1               
0063FFr 1  AC rr rr         LDY camera_cell_x
006402r 1  B1 7C            LDA ($7C),y
006404r 1  A8               TAY
006405r 1               
006405r 1  18              CLC
006406r 1  AD rr rr        LDA CAMERA_CENTER_YL
006409r 1  79 rr rr        ADC CONVERT_HEIGHTS_PIXELS_L,Y
00640Cr 1  8D rr rr        STA CAMERA_CENTER_YL
00640Fr 1  AD rr rr        LDA CAMERA_CENTER_TOP_PX
006412r 1  79 rr rr        ADC CONVERT_HEIGHTS_PIXELS,Y
006415r 1  8D rr rr        STA CAMERA_CENTER_YH
006418r 1               
006418r 1  18              CLC
006419r 1  A9 78           LDA #SCREEN_OUT_BOTTOM
00641Br 1  79 rr rr        ADC CONVERT_HEIGHTS_PIXELS,Y
00641Er 1  8D rr rr        STA camera_screen_out_bottom
006421r 1               
006421r 1                  ; if something is higher than us it would be (52-CONVERT_HEIGHTS_PIXELS,Y)
006421r 1                  ; so true effective top of screen check to account for that would be ...
006421r 1                  ; SCREEN_OUT_TOP - (52 - CONVERT_HEIGHTS_PIXELS,Y)
006421r 1                  ; screen out top - 52 + CONVERT_HEIGHTS_PIXELS,Y
006421r 1                  ; ok so if we are as high as we can be, then something at farthest Z visible Z
006421r 1                  ; or s this constant??? should it even be attempted to add to world data?
006421r 1  38              SEC
006422r 1  AD rr rr        LDA CAMERA_CENTER_TOP_PX
006425r 1  E9 80           SBC #16+60+52 ;-16 is top out.. 60 to mid screen, then max diff in height from there.. so if was middle screen 60 now its -68
006427r 1  8D rr rr        STA camera_screen_out_top
00642Ar 1               
00642Ar 1                  ; clear the object list ...
00642Ar 1  38               SEC
00642Br 1  A9 80            LDA #128
00642Dr 1  ED rr rr         SBC NUM_RESERVED_SPRITES
006430r 1  8D rr rr         STA NUM_AVAIL_SPRITES
006433r 1               
006433r 1  9C rr rr         STZ OBJECT_LIST_BYTE6_NEXT ; because we can't use zero anyway..
006436r 1  A9 08            LDA #$08 ; is basis for all the z_flips <- this may change depending on orientation..
006438r 1  A2 00            LDX #0
00643Ar 1  9E rr rr         : STZ OBJECT_LIST_Z_START_POINTERS,X
00643Dr 1  9E rr rr           STZ OBJECT_LIST_BYTE1_MODE,X          ; 16 color / low address
006440r 1  9C rr rr           STZ OBJECT_LIST_BYTE2_X
006443r 1  9D rr rr           STA OBJECT_LIST_BYTE4_ZFLIPS,X
006446r 1                     ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
006446r 1  E8                 INX
006447r 1  D0 F1              BNE :-
006449r 1               
006449r 1  A9 D0            LDA #SPRITE_SIZE_ORA
00644Br 1  9D rr rr         : STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
00644Er 1  E8                 INX
00644Fr 1  D0 FA              BNE :-
006451r 1  AD rr rr         LDA WORLD_SPRITE_NUM
006454r 1  9D rr rr         : STA OBJECT_LIST_BYTE0_ADDRLOW,X ; 01.3456 done .
006457r 1  E8                 INX
006458r 1  D0 FA              BNE :-
00645Ar 1               
00645Ar 1  AD rr rr        LDA DO_WATER
00645Dr 1  F0 34           BEQ :+++
00645Fr 1                ;  STZ DO_WATER
00645Fr 1  AD rr rr        LDA DO_FAUCET
006462r 1  F0 09           BEQ :+
006464r 1               ;   STZ DO_FAUCET
006464r 1  AD rr rr        LDA TUB_WORLD+(15*64)+8
006467r 1  C9 3F           CMP #63
006469r 1  B0 02           BCS :+
00646Br 1  A9 3F           LDA #63
00646Dr 1                  ; we're going to pretend the faucet is running...
00646Dr 1  8D rr rr      :   STA TUB_WORLD+(15*64)+8 ;  this is middle row furthest west ( < x )
006470r 1  8D rr rr          STA TUB_WORLD+(15*64)+9
006473r 1  8D rr rr          STA TUB_WORLD+(14*64)+9
006476r 1  8D rr rr          STA TUB_WORLD+(16*64)+8
006479r 1  AD rr rr        LDA CAMERA_CELL_LINE_PTR
00647Cr 1  85 22           STA ZP_PTR
00647Er 1  AD rr rr        LDA CAMERA_CELL_LINE_PTR+1
006481r 1  85 23           STA ZP_PTR+1
006483r 1  AC rr rr        LDY camera_cell_x
006486r 1  B1 22           LDA (ZP_PTR),y
006488r 1               ;   inc A
006488r 1  C9 40           CMP #64
00648Ar 1  90 02           BCC :+
00648Cr 1  A9 3F           LDA #63
00648Er 1  91 22         : STA (ZP_PTR),y
006490r 1               
006490r 1  20 rr rr        JSR UPDATE_WATER_SIM
006493r 1               
006493r 1               
006493r 1               :
006493r 1               
006493r 1  20 rr rr       jsr push_world_to_object_list
006496r 1  AC rr rr       LDY CAMERA_CENTER_YH
006499r 1  B9 rr rr       LDA OBJECT_LIST_Z_START_POINTERS,y ;  get pointer to current next..
00649Cr 1  EE rr rr       INC OBJECT_LIST_BYTE6_NEXT ; get next available object...
00649Fr 1  AE rr rr       LDX OBJECT_LIST_BYTE6_NEXT ; get offset for that
0064A2r 1  9D rr rr       STA OBJECT_LIST_BYTE6_NEXT,X ; set the old value to this next..
0064A5r 1  8A             TXA
0064A6r 1  99 rr rr       STA OBJECT_LIST_Z_START_POINTERS,y ; patch this into Z
0064A9r 1  A9 10          LDA #16
0064ABr 1  9D rr rr       STA OBJECT_LIST_BYTE0_ADDRLOW,X
0064AEr 1  A9 01          LDA #1
0064B0r 1  9D rr rr       STA OBJECT_LIST_BYTE1_MODE,X
0064B3r 1  A9 48          LDA #80-8
0064B5r 1  9D rr rr       STA OBJECT_LIST_BYTE2_X,X
0064B8r 1  A9 2C          LDA #60-16
0064BAr 1  9D rr rr       STA OBJECT_LIST_BYTE3_Y,X
0064BDr 1  A9 50          LDA #$50
0064BFr 1  9D rr rr       STA OBJECT_LIST_BYTE5_SIZE,X
0064C2r 1               
0064C2r 1               ;        A        B     CURRENT BITMAP BUFFER
0064C2r 1               ;   0   display  dirty    A is being displayed, B to be drawn on
0064C2r 1               ;  64   display  ready    B  is ready for swap
0064C2r 1               ; 128   dirty    display  B is being displayed, A to be drawn on
0064C2r 1               ; 192   ready    display  A  is ready for swap
0064C2r 1               
0064C2r 1               ; OK so we want bit 6 (64) to be set
0064C2r 1  80 01           BRA :++
0064C4r 1               ;   LDA #2
0064C4r 1               :
0064C4r 1  CB              wai
0064C5r 1               ;   CMP VSYNC_counter
0064C5r 1               ;   BCS :-
0064C5r 1  AD rr rr     :  LDA CURRENT_BITMAP_BUFFER
0064C8r 1  29 40           AND #64
0064CAr 1  D0 F8           BNE :--
0064CCr 1  9C rr rr        STZ VERA_LOCK ; ok gotta lock the VERA...
0064CFr 1  A9 D1           LDA #$D1
0064D1r 1  8D rr rr        STA OBJECT_LIST_BYTE5_SIZE+1
0064D4r 1               
0064D4r 1  20 rr rr        jsr draw_object_list
0064D7r 1               
0064D7r 1               @WRITE_DEBUG:
0064D7r 1  64 7A            STZ $7A
0064D9r 1  AD rr rr         LDA camera_cell_y
0064DCr 1  3A               DEC A
0064DDr 1  4A               LSR
0064DEr 1  66 7A            ROR $7A
0064E0r 1  4A               LSR
0064E1r 1  66 7A            ROR $7A
0064E3r 1  69 rr            ADC #>TUB_WORLD
0064E5r 1  85 7B            STA $7B
0064E7r 1  AC rr rr         LDY camera_cell_x
0064EAr 1  B1 7A            LDA ($7A),y
0064ECr 1  8D rr rr         STA CELL_VAL_UPLEFT
0064EFr 1  C8               INY
0064F0r 1  B1 7A            LDA ($7A),Y
0064F2r 1  8D rr rr         STA CELL_VAL_UPRIGHT
0064F5r 1               
0064F5r 1  64 7C            STZ $7C
0064F7r 1  AD rr rr         LDA camera_cell_y
0064FAr 1  4A               LSR  ;  y pages of 128
0064FBr 1  66 7C            ROR $7C
0064FDr 1  4A               LSR  ; y pages of 64 !
0064FEr 1  66 7C            ROR $7C
006500r 1  69 rr            ADC #>TUB_WORLD
006502r 1  85 7D            STA $7D
006504r 1  8D rr rr         STA CAMERA_CELL_LINE_PTR+1
006507r 1  A5 7C            LDA $7C
006509r 1  8D rr rr         STA CAMERA_CELL_LINE_PTR
00650Cr 1  B1 7C            LDA ($7C),Y
00650Er 1  8D rr rr         STA CELL_VAL_RIGHT
006511r 1  88               DEY
006512r 1  B1 7C            LDA ($7C),Y
006514r 1  8D rr rr         STA CELL_VAL_SELF
006517r 1  88               DEY
006518r 1  B1 7C            LDA ($7C),Y
00651Ar 1  8D rr rr         STA CELL_VAL_LEFT
00651Dr 1               
00651Dr 1  64 7E            STZ $7E
00651Fr 1  AD rr rr         LDA camera_cell_y
006522r 1  1A               INC A
006523r 1  4A               LSR  ;  y pages of 128
006524r 1  66 7E            ROR $7E
006526r 1  4A               LSR  ; y pages of 64 !
006527r 1  66 7E            ROR $7E
006529r 1  69 rr            ADC #>TUB_WORLD
00652Br 1  85 7F            STA $7F
00652Dr 1  B1 7E            LDA ($7E),Y
00652Fr 1  8D rr rr         STA CELL_VAL_DOWNLEFT
006532r 1  C8               INY
006533r 1  B1 7E            LDA ($7E),Y
006535r 1  8D rr rr         STA CELL_VAL_DOWNRIGHT
006538r 1               
006538r 1  9C 25 9F        STZ VERA_ctrl
00653Br 1  A9 2A           LDA #42;+64
00653Dr 1  8D 20 9F        STA VERA_addr_low
006540r 1  A9 E4           LDA #>VRAM_TEXT_SCREEN
006542r 1  8D 21 9F        STA VERA_addr_high
006545r 1  A9 21           LDA #$21
006547r 1  8D 22 9F        STA VERA_addr_bank
00654Ar 1               
00654Ar 1  AD 23 9F        LDA VERA_data0 ; skip a spot at 2
00654Dr 1  AD 23 9F        LDA VERA_data0 ; skip a spot at 4
006550r 1               
006550r 1  AE rr rr        LDX CELL_VAL_UPLEFT
006553r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X
006556r 1  8D 23 9F        STA VERA_data0                ;  6
006559r 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X
00655Cr 1  8D 23 9F        STA VERA_data0                ;  8
00655Fr 1               
00655Fr 1  AD 23 9F        LDA VERA_data0     ; skip a spot    10
006562r 1  AD 23 9F        LDA VERA_data0     ; skip a spot    12
006565r 1               
006565r 1  AE rr rr        LDX CELL_VAL_UPRIGHT
006568r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X
00656Br 1  8D 23 9F        STA VERA_data0                ;  14
00656Er 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X
006571r 1  8D 23 9F        STA VERA_data0                ;  16
006574r 1  18              CLC
006575r 1  AD 20 9F        LDA VERA_addr_low
006578r 1  69 30           ADC #64-16
00657Ar 1  8D 20 9F        STA VERA_addr_low
00657Dr 1               
00657Dr 1  AE rr rr        LDX CELL_VAL_LEFT
006580r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X
006583r 1  8D 23 9F        STA VERA_data0                ;  2
006586r 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X
006589r 1  8D 23 9F        STA VERA_data0                ;  4
00658Cr 1               
00658Cr 1  AD 23 9F        LDA VERA_data0    ;     6
00658Fr 1  AD 23 9F        LDA VERA_data0    ;     8
006592r 1               
006592r 1  AE rr rr        LDX CELL_VAL_SELF
006595r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X
006598r 1  8D 23 9F        STA VERA_data0                ;  10
00659Br 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X
00659Er 1  8D 23 9F        STA VERA_data0                ;  12
0065A1r 1               
0065A1r 1  AD 23 9F        LDA VERA_data0    ;     14
0065A4r 1  AD 23 9F        LDA VERA_data0    ;     16
0065A7r 1               
0065A7r 1  AE rr rr        LDX CELL_VAL_RIGHT
0065AAr 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X
0065ADr 1  8D 23 9F        STA VERA_data0                ;  18
0065B0r 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X
0065B3r 1  8D 23 9F        STA VERA_data0                ;  20
0065B6r 1               
0065B6r 1  18              CLC
0065B7r 1  AD 20 9F        LDA VERA_addr_low
0065BAr 1  69 2C           ADC #64-20
0065BCr 1  8D 20 9F        STA VERA_addr_low
0065BFr 1               
0065BFr 1  AD 23 9F        LDA VERA_data0 ; skip a spot at 2
0065C2r 1  AD 23 9F        LDA VERA_data0 ; skip a spot at 4
0065C5r 1               
0065C5r 1  AE rr rr        LDX CELL_VAL_DOWNLEFT
0065C8r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X
0065CBr 1  8D 23 9F        STA VERA_data0                ;  6
0065CEr 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X
0065D1r 1  8D 23 9F        STA VERA_data0                ;  8
0065D4r 1               
0065D4r 1  AD 23 9F        LDA VERA_data0     ; skip a spot    10
0065D7r 1  AD 23 9F        LDA VERA_data0     ; skip a spot    12
0065DAr 1               
0065DAr 1  AE rr rr        LDX CELL_VAL_DOWNRIGHT
0065DDr 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X
0065E0r 1  8D 23 9F        STA VERA_data0                ;  14
0065E3r 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X
0065E6r 1  8D 23 9F        STA VERA_data0                ;  16
0065E9r 1               
0065E9r 1  A9 2A           LDA #42
0065EBr 1  8D 20 9F        STA VERA_addr_low
0065EEr 1  EE 21 9F        INC VERA_addr_high
0065F1r 1               
0065F1r 1               
0065F1r 1  A0 00           LDY #0
0065F3r 1  BE rr rr      : LDX GLOBAL_DATA,Y
0065F6r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X ; 1
0065F9r 1  8D 23 9F        STA VERA_data0
0065FCr 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X  ; 2
0065FFr 1  8D 23 9F        STA VERA_data0
006602r 1  C8              INY
006603r 1  BE rr rr        LDX GLOBAL_DATA,Y
006606r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X   ;  3
006609r 1  8D 23 9F        STA VERA_data0
00660Cr 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X    ;  4
00660Fr 1  8D 23 9F        STA VERA_data0
006612r 1  C8              INY
006613r 1  AD 23 9F        LDA VERA_data0             ;  5
006616r 1  BE rr rr        LDX GLOBAL_DATA,Y
006619r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X   ;  6
00661Cr 1  8D 23 9F        STA VERA_data0
00661Fr 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X    ;  7
006622r 1  8D 23 9F        STA VERA_data0
006625r 1  C8              INY
006626r 1  BE rr rr        LDX GLOBAL_DATA,Y
006629r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X   ;  8
00662Cr 1  8D 23 9F        STA VERA_data0
00662Fr 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X    ;  9
006632r 1  8D 23 9F        STA VERA_data0
006635r 1  C8              INY
006636r 1  18              CLC
006637r 1  AD 20 9F        LDA VERA_addr_low          ;  moved 18 out of 64 bytes...
00663Ar 1  69 2E           ADC #64-18
00663Cr 1  8D 20 9F        STA VERA_addr_low
00663Fr 1  90 03           BCC :+
006641r 1  EE 21 9F        INC VERA_addr_high
006644r 1  C0 31         : CPY #ENDGLOBALS-GLOBAL_DATA  ;
006646r 1  90 AB           BCC :--
006648r 1               
006648r 1  18              CLC
006649r 1  AD rr rr        LDA CURRENT_BITMAP_BUFFER
00664Cr 1  69 40           ADC #64
00664Er 1  8D rr rr        STA CURRENT_BITMAP_BUFFER
006651r 1               
006651r 1  A9 FF           LDA #$FF ; time to unlock the VERA ..
006653r 1  8D rr rr        STA VERA_LOCK
006656r 1               
006656r 1               ;   rts
006656r 1               
006656r 1               @FRAME_CHECK:
006656r 1  AD rr rr        LDA STALL_COUNTERH
006659r 1  8D rr rr        STA LAST_STALLCOUNTERH
00665Cr 1  AD rr rr        LDA STALL_COUNTER
00665Fr 1  8D rr rr        STA LAST_STALLCOUNTER
006662r 1  A2 FF           LDX #255
006664r 1  A0 FF           LDY #255
006666r 1  AD rr rr        LDA VSYNC_counter
006669r 1  8D rr rr        STA LAST_VSYNC_COUNTER
00666Cr 1               ;   BNE :+++
00666Cr 1  9C rr rr        STZ VSYNC_counter
00666Fr 1  E8           :  INX                     ;  2 cycles    8
006670r 1  D0 01           BNE :+                  ;  ~3 cycles   11 or 10 if drop through
006672r 1  C8              INY                     ; 2            11/12
006673r 1               :  ;wai   disables the busy wait..
006673r 1  AD rr rr        lda VSYNC_counter       ;  4  cyles    15/16
006676r 1  F0 F7           BEQ :--                ;  3  cycles     18/19   so 1 full of X = ~4,607 cycles .. count would go to ~7,407 for full frame.. or ~ $1C,$F0
006678r 1               ;:
006678r 1  9C rr rr        STZ VSYNC_counter
00667Br 1  8E rr rr        STX STALL_COUNTER
00667Er 1  8C rr rr        STY STALL_COUNTERH
006681r 1               ;   LDA MASTER_CLOCK
006681r 1               ;   INC A
006681r 1               ;   CLC
006681r 1               ;   ADC LAST_VSYNC_COUNTER
006681r 1               ;   STA MASTER_CLOCK
006681r 1  EE rr rr        INC MASTER_CLOCK
006684r 1  D0 03           BNE :+
006686r 1  EE rr rr        INC MASTER_CLOCK+1
006689r 1               :
006689r 1               ;   AND #1 ; restrict to 30 fps.. don't care missed cycle.
006689r 1               ;   BEQ :+
006689r 1               ;   JMP @WRITE_DEBUG
006689r 1                  ; poll keyboard for input
006689r 1               ; :
006689r 1  20 E4 FF        jsr GETIN
00668Cr 1  C9 00           cmp #0
00668Er 1  D0 03           BNE :+
006690r 1  4C rr rr        JMP @do_update
006693r 1  C9 0D         : CMP #RETURN
006695r 1  D0 03           BNE :+
006697r 1  4C rr rr        JMP @cleanup_and_exit
00669Ar 1  C9 1D         : cmp #$1D 	;	cursor right
00669Cr 1  D0 06           BNE :+
00669Er 1  EE rr rr        INC camera_facing
0066A1r 1  4C rr rr        JMP @do_update
0066A4r 1                  :
0066A4r 1  C9 9D           cmp  #$9D 	;	cursor left
0066A6r 1  D0 06           BNE :+
0066A8r 1  CE rr rr        DEC camera_facing
0066ABr 1  4C rr rr        JMP @do_update
0066AEr 1  C9 11         : cmp #$11; cursor down
0066B0r 1  D0 2C           BNE :+
0066B2r 1  AE rr rr        LDX camera_facing
0066B5r 1  38              SEC
0066B6r 1  AD rr rr        LDA camera_world_pos_XL
0066B9r 1  FD rr rr        SBC MOVE_X_L,X
0066BCr 1  8D rr rr        STA camera_world_pos_XL
0066BFr 1  AD rr rr        LDA camera_world_pos_XH
0066C2r 1  FD rr rr        SBC MOVE_X_H,X
0066C5r 1  8D rr rr        STA camera_world_pos_XH
0066C8r 1  18              CLC
0066C9r 1  AD rr rr        LDA camera_world_pos_YL
0066CCr 1  7D rr rr        ADC MOVE_Y_L,X
0066CFr 1  8D rr rr        STA camera_world_pos_YL
0066D2r 1  AD rr rr        LDA camera_world_pos_YH
0066D5r 1  7D rr rr        ADC MOVE_Y_H,X
0066D8r 1  8D rr rr        STA camera_world_pos_YH
0066DBr 1  4C rr rr        jmp @camera_world_changed
0066DEr 1               
0066DEr 1  C9 91         : cmp #$91 ; cursor up
0066E0r 1  D0 2C           BNE :+
0066E2r 1  AE rr rr        LDX camera_facing
0066E5r 1  18              CLC
0066E6r 1  AD rr rr        LDA camera_world_pos_XL
0066E9r 1  7D rr rr        ADC MOVE_X_L,X
0066ECr 1  8D rr rr        STA camera_world_pos_XL
0066EFr 1  AD rr rr        LDa camera_world_pos_XH
0066F2r 1  7D rr rr        ADC MOVE_X_H,X
0066F5r 1  8D rr rr        STA camera_world_pos_XH
0066F8r 1  38              SEC
0066F9r 1  AD rr rr        LDA camera_world_pos_YL
0066FCr 1  FD rr rr        SBC MOVE_Y_L,X
0066FFr 1  8D rr rr        STA camera_world_pos_YL
006702r 1  AD rr rr        LDA camera_world_pos_YH
006705r 1  FD rr rr        SBC MOVE_Y_H,X
006708r 1  8D rr rr        STA camera_world_pos_YH
00670Br 1  4C rr rr        jmp @camera_world_changed
00670Er 1               
00670Er 1  C9 45         : cmp  #E_CHAR ; cell up right
006710r 1  D0 15           BNE :+++
006712r 1  AD rr rr        LDA camera_cell_y
006715r 1  F0 03           BEQ :+
006717r 1  CE rr rr        DEC camera_cell_y
00671Ar 1  AD rr rr      : LDA camera_cell_x
00671Dr 1  C9 3F           CMP #63
00671Fr 1  B0 03           BCS :+
006721r 1  EE rr rr        INC camera_cell_x
006724r 1  4C rr rr      : JMP @camera_cell_changed
006727r 1               
006727r 1  C9 57         : cmp #W_CHAR ; cell up left
006729r 1  D0 0B           BNE :++
00672Br 1  AD rr rr        LDA camera_cell_y
00672Er 1  F0 03           BEQ :+
006730r 1  CE rr rr        DEC camera_cell_y
006733r 1  4C rr rr      : JMP @camera_cell_changed
006736r 1               
006736r 1  C9 41         : cmp #A_CHAR ; cell left
006738r 1  D0 0B           BNE :++
00673Ar 1  AD rr rr        LDA camera_cell_x
00673Dr 1  F0 03           BEQ :+
00673Fr 1  CE rr rr        DEC camera_cell_x
006742r 1  4C rr rr      : JMP @camera_cell_changed
006745r 1               
006745r 1  C9 44         : cmp #D_CHAR ; cell right
006747r 1  D0 0D           BNE :++
006749r 1  AD rr rr        LDA camera_cell_x
00674Cr 1  C9 3F           CMP #63
00674Er 1  B0 03           BCS :+
006750r 1  EE rr rr        INC camera_cell_x
006753r 1  4C rr rr      : JMP @camera_cell_changed
006756r 1               
006756r 1  C9 58         : cmp #X_CHAR ; cell down right
006758r 1  D0 0D           BNE :++
00675Ar 1  AD rr rr        LDA camera_cell_y
00675Dr 1  C9 1E           CMP #30
00675Fr 1  B0 03           BCS :+
006761r 1  EE rr rr        INC camera_cell_y
006764r 1  4C rr rr      : JMP @camera_cell_changed
006767r 1               
006767r 1  C9 5A         : cmp  #Z_CHAR ; cell down left
006769r 1  D0 15           BNE :+++
00676Br 1  AD rr rr        LDA camera_cell_y
00676Er 1  C9 1E           CMP #30
006770r 1  B0 03           BCS :+
006772r 1  EE rr rr        INC camera_cell_y
006775r 1  AD rr rr      : LDA camera_cell_x
006778r 1  F0 03           BEQ :+
00677Ar 1  CE rr rr        DEC camera_cell_x
00677Dr 1  4C rr rr      : JMP @camera_cell_changed
006780r 1               
006780r 1  C9 20         : cmp #SPACE;
006782r 1  D0 09           BNE :+
006784r 1  9C rr rr        STZ camera_cell_xl
006787r 1  9C rr rr        STZ camera_cell_yl
00678Ar 1  4C rr rr        JMP @camera_cell_changed
00678Dr 1               
00678Dr 1  C9 49         : cmp #I_CHAR ; cell y - 1/16
00678Fr 1  D0 25           BNE :++
006791r 1  38              SEC
006792r 1  AD rr rr        LDA camera_cell_yl
006795r 1  E9 10           SBC #16
006797r 1  8D rr rr        STA camera_cell_yl
00679Ar 1  B0 17           BCS :+
00679Cr 1  AD rr rr        LDA camera_cell_y
00679Fr 1  F0 12           BEQ :+
0067A1r 1  3A              DEC A
0067A2r 1  8D rr rr        STA camera_cell_y
0067A5r 1  18              CLC
0067A6r 1  AD rr rr        LDA camera_cell_xl
0067A9r 1  69 80           ADC #128
0067ABr 1  8D rr rr        STA camera_cell_xl
0067AEr 1  90 03           BCC :+
0067B0r 1  EE rr rr        INC camera_cell_x
0067B3r 1  4C rr rr      : JMP @camera_cell_changed
0067B6r 1               
0067B6r 1  C9 4A         : cmp #J_CHAR ; cell x - 1/16
0067B8r 1  D0 17           BNE :++
0067BAr 1  38              SEC
0067BBr 1  AD rr rr        LDA camera_cell_xl
0067BEr 1  E9 10           SBC #16
0067C0r 1  8D rr rr        STA camera_cell_xl
0067C3r 1  B0 09           BCS :+
0067C5r 1  AD rr rr        LDA camera_cell_x
0067C8r 1  F0 04           BEQ :+
0067CAr 1  3A              DEC A
0067CBr 1  8D rr rr        STA camera_cell_x
0067CEr 1  4C rr rr      : JMP @camera_cell_changed
0067D1r 1               
0067D1r 1  C9 4B         : cmp #K_CHAR ; cell y + 1/16
0067D3r 1  D0 27           BNE :++
0067D5r 1  18              CLC
0067D6r 1  AD rr rr        LDA camera_cell_yl
0067D9r 1  69 10           ADC #16
0067DBr 1  8D rr rr        STA camera_cell_yl
0067DEr 1  90 19           BCC :+
0067E0r 1  AD rr rr        LDA camera_cell_y
0067E3r 1  C9 1F           CMP #31
0067E5r 1  B0 12           BCS :+
0067E7r 1  1A              INC A
0067E8r 1  8D rr rr        STA camera_cell_y
0067EBr 1  38              SEC
0067ECr 1  AD rr rr        LDA camera_cell_xl
0067EFr 1  E9 80           SBC #128
0067F1r 1  8D rr rr        STA camera_cell_xl
0067F4r 1  B0 03           BCS :+
0067F6r 1  CE rr rr        DEC camera_cell_x
0067F9r 1  4C rr rr      : JMP @camera_cell_changed
0067FCr 1               
0067FCr 1  C9 4C         : cmp #L_CHAR ; cell x + 1/16
0067FEr 1  D0 11           BNE :++
006800r 1  18              CLC
006801r 1  AD rr rr        LDA camera_cell_xl
006804r 1  69 10           ADC #16
006806r 1  8D rr rr        STA camera_cell_xl
006809r 1  90 03           BCC :+
00680Br 1  EE rr rr        INC camera_cell_x
00680Er 1  4C rr rr      : JMP @camera_cell_changed
006811r 1               
006811r 1  C9 31         : CMP #ONE_CHAR
006813r 1  D0 08           BNE :+
006815r 1  AD 29 9F        LDA VERA_dc_video
006818r 1  49 20           EOR #%00100000
00681Ar 1  8D 29 9F        STA VERA_dc_video
00681Dr 1               
00681Dr 1  C9 32         : CMP #TWO_CHAR
00681Fr 1  D0 08           BNE :+
006821r 1  AD 29 9F        LDA VERA_dc_video
006824r 1  49 40           EOR #%01000000
006826r 1  8D 29 9F        STA VERA_dc_video
006829r 1               
006829r 1  C9 33         : CMP #THREE_CHAR
00682Br 1  D0 08           BNE :+
00682Dr 1  AD 29 9F        LDA VERA_dc_video
006830r 1  49 10           EOR #%00010000
006832r 1  8D 29 9F        STA VERA_dc_video
006835r 1               
006835r 1  C9 30         : CMP #ZERO_CHAR
006837r 1  D0 13           BNE :+++
006839r 1  AD 2A 9F        LDA VERA_dc_hscale
00683Cr 1  C9 2B           CMP #43
00683Er 1  B0 04           BCS :+
006840r 1  A9 33           LDA #51 ; #51 ; 51 is 255
006842r 1  80 02           BRA :++
006844r 1  A9 20         : LDA #32
006846r 1  8D 2A 9F      : STA VERA_dc_hscale
006849r 1  8D 2B 9F        STA VERA_dc_vscale
00684Cr 1               
00684Cr 1  C9 39         : CMP #NINE_CHAR
00684Er 1  D0 08           BNE :+
006850r 1  AD rr rr        LDA SPRITE_OBJECT_ENABLE
006853r 1  49 FF           EOR #$FF
006855r 1  8D rr rr        STA SPRITE_OBJECT_ENABLE
006858r 1               
006858r 1  C9 38         : CMP #EIGHT_CHAR
00685Ar 1  D0 08           BNE :+
00685Cr 1  A9 FF           LDA #$FF
00685Er 1  4D rr rr        EOR DO_WATER
006861r 1  8D rr rr        STA DO_WATER
006864r 1               
006864r 1  C9 37         : CMP #SEVEN_CHAR
006866r 1  D0 08           BNE :+
006868r 1  AD rr rr        LDA DO_WATER
00686Br 1  D0 03           BNE :+
00686Dr 1  20 rr rr        JSR UPDATE_WATER_SIM
006870r 1               
006870r 1  C9 36         : CMP #SIX_CHAR
006872r 1  D0 08           BNE :+
006874r 1  AD rr rr        LDA DO_FAUCET
006877r 1  49 FF           EOR #$FF
006879r 1  8D rr rr        STA DO_FAUCET
00687Cr 1               
00687Cr 1  4C rr rr      : JMP @do_update
00687Fr 1               
00687Fr 1               @cleanup_and_exit:
00687Fr 1                  ; restore default IRQ vector
00687Fr 1  78              sei
006880r 1  AD rr rr        lda default_irq_vector
006883r 1  8D 14 03        sta IRQVec
006886r 1  AD rr rr        lda default_irq_vector+1
006889r 1  8D 15 03        sta IRQVec+1
00688Cr 1  58              cli
00688Dr 1  20 81 FF        jsr CINT
006890r 1  60              rts
006891r 1               
006891r 1               
006891r 1               ; CURRENT
006891r 1               push_world_to_object_list: ; as in.. let's try this again?? wait.. missing a STZ ZP_PTR...
006891r 1               PWOL_TUB_PTR_AL   = ZP_PTR
006891r 1               PWOL_TUB_PTR_AH   = ZP_PTR+1
006891r 1               PWOL_TUB_PTR_BL   = ZP_PTR+2
006891r 1               PWOL_TUB_PTR_BH   = ZP_PTR+3
006891r 1               PWOL_CURRENT_XL   = ZP_PTR+4
006891r 1               PWOL_CURRENT_XH   = ZP_PTR+5
006891r 1               PWOL_CURRENT_YL   = ZP_PTR+6
006891r 1               PWOL_CURRENT_YH   = ZP_PTR+7
006891r 1               PWOL_ACROSS_ROW_XL= ZP_PTR+8
006891r 1               PWOL_ACROSS_ROW_XH= ZP_PTR+9
006891r 1               PWOL_ACROSS_ROW_YL= ZP_PTR+10
006891r 1               PWOL_ACROSS_ROW_YH= ZP_PTR+11
006891r 1               PWOL_NEXT_ROW_A_LEFT_XL  = ZP_PTR+12
006891r 1               PWOL_NEXT_ROW_A_LEFT_XH  = ZP_PTR+13
006891r 1               PWOL_NEXT_ROW_A_LEFT_YL  = ZP_PTR+14
006891r 1               PWOL_NEXT_ROW_A_LEFT_YH  = ZP_PTR+15
006891r 1               PWOL_NEXT_ROW_A_RIGHT_XL  = ZP_PTR+16
006891r 1               PWOL_NEXT_ROW_A_RIGHT_XH  = ZP_PTR+17
006891r 1               PWOL_NEXT_ROW_A_RIGHT_YL  = ZP_PTR+18
006891r 1               PWOL_NEXT_ROW_A_RIGHT_YH  = ZP_PTR+19
006891r 1               PWOL_NEXT_ROW_B_LEFT_XL  = ZP_PTR+20
006891r 1               PWOL_NEXT_ROW_B_LEFT_XH  = ZP_PTR+21
006891r 1               PWOL_NEXT_ROW_B_LEFT_YL  = ZP_PTR+22
006891r 1               PWOL_NEXT_ROW_B_LEFT_YH  = ZP_PTR+23
006891r 1               PWOL_NEXT_ROW_B_RIGHT_XL  = ZP_PTR+24
006891r 1               PWOL_NEXT_ROW_B_RIGHT_XH  = ZP_PTR+25
006891r 1               PWOL_NEXT_ROW_B_RIGHT_YL  = ZP_PTR+26
006891r 1               PWOL_NEXT_ROW_B_RIGHT_YH  = ZP_PTR+27
006891r 1               PWOL_Z_STARTS_PTR = ZP_PTR+28
006891r 1               PWOL_Z_STARTS_PTRH = ZP_PTR+29
006891r 1               PWOL_CONVERT_HEIGHTS = ZP_PTR+30
006891r 1               PWOL_CONVERT_HEIGHTSH= ZP_PTR+31
006891r 1               PWOL_CONVERT_HEIGHTS_L = ZP_PTR+32
006891r 1               PWOL_CONVERT_HEIGHTS_LH = ZP_PTR+33
006891r 1               PWOL_TRIES_COUNTER = ZP_PTR+34
006891r 1               PWOL_START_XL = ZP_PTR+35
006891r 1               PWOL_START_YL = ZP_PTR+36
006891r 1               PWOL_START_XH = ZP_PTR+37
006891r 1               PWOL_START_YH = ZP_PTR+38
006891r 1               
006891r 1               PWOL_START_COS_XL = ZP_PTR+39
006891r 1               PWOL_START_COS_XH = ZP_PTR+40
006891r 1               PWOL_START_COS_YL = ZP_PTR+41
006891r 1               PWOL_START_COS_YH = ZP_PTR+42
006891r 1               PWOL_START_SIN_XL = ZP_PTR+43
006891r 1               PWOL_START_SIN_XH = ZP_PTR+44
006891r 1               PWOL_START_SIN_YL = ZP_PTR+45
006891r 1               PWOL_START_SIN_YH = ZP_PTR+46
006891r 1               
006891r 1               PWOL_camera_cell_xl = ZP_PTR+47
006891r 1               PWOL_camera_cell_yl = ZP_PTR+48
006891r 1               PWOL_CENTER_Y  =  ZP_PTR+49
006891r 1               PWOL_CENTER_Y_TOP     =  ZP_PTR+50
006891r 1               
006891r 1               PWOL_TOP_CHECK = ZP_PTR+51
006891r 1               PWOL_BOT_CHECK = ZP_PTR+52
006891r 1               
006891r 1               TRY_AGAIN = 6
006891r 1  AD rr rr        LDA camera_screen_out_top
006894r 1  85 55           STA PWOL_TOP_CHECK
006896r 1  AD rr rr        LDA camera_screen_out_bottom
006899r 1  85 56           STA PWOL_BOT_CHECK
00689Br 1               
00689Br 1  AD rr rr        LDA CAMERA_CENTER_YH
00689Er 1  1A              INC A
00689Fr 1  85 53           STA PWOL_CENTER_Y
0068A1r 1  AD rr rr        LDA CAMERA_CENTER_TOP_PX
0068A4r 1  18              CLC
0068A5r 1  69 0A           ADC #10
0068A7r 1  85 54           STA PWOL_CENTER_Y_TOP
0068A9r 1               
0068A9r 1               
0068A9r 1  A9 rr           LDA #>CONVERT_HEIGHTS_PIXELS
0068ABr 1  85 41           STA PWOL_CONVERT_HEIGHTSH
0068ADr 1  A9 rr           LDA #>CONVERT_HEIGHTS_PIXELS_L
0068AFr 1  85 43           STA PWOL_CONVERT_HEIGHTS_LH
0068B1r 1               
0068B1r 1  A9 rr           LDA #>OBJECT_LIST_Z_START_POINTERS
0068B3r 1  85 3F           STA PWOL_Z_STARTS_PTRH
0068B5r 1               
0068B5r 1  AE rr rr        LDX camera_facing
0068B8r 1  BD rr rr        LDA ACROSS_ROW_X_L,x    ; 0900  16 wide , 45* tilt ... this is added to go up row, sub for down row
0068BBr 1  85 2A           STA PWOL_ACROSS_ROW_XL
0068BDr 1  BD rr rr        LDA ACROSS_ROW_X_H,x
0068C0r 1  85 2B           STA PWOL_ACROSS_ROW_XH
0068C2r 1               
0068C2r 1  BD rr rr        LDA ACROSS_ROW_Y_L,x
0068C5r 1  85 2C           STA PWOL_ACROSS_ROW_YL
0068C7r 1  BD rr rr        LDA ACROSS_ROW_Y_H,x
0068CAr 1  85 2D           STA PWOL_ACROSS_ROW_YH
0068CCr 1               
0068CCr 1  18              CLC
0068CDr 1  BD rr rr        LDA NEXT_ROW_X_L,X  ; 0D00 next row LEFT/up when added
0068D0r 1  85 2E           STA PWOL_NEXT_ROW_A_LEFT_XL   ; -> next row is left, going up the screen ..  -1,-1
0068D2r 1  65 2A           ADC PWOL_ACROSS_ROW_XL   ; across row is for right , subtract to go left  +1 -> 0,1
0068D4r 1  85 32           STA PWOL_NEXT_ROW_A_RIGHT_XL  ;  -> next row is right, going up the screen .. -1,-1
0068D6r 1  BD rr rr        LDA NEXT_ROW_X_H,x
0068D9r 1  85 2F           STA PWOL_NEXT_ROW_A_LEFT_XH
0068DBr 1  65 2B           ADC PWOL_ACROSS_ROW_XH
0068DDr 1  85 33           STA PWOL_NEXT_ROW_A_RIGHT_XH
0068DFr 1               
0068DFr 1  18              CLC
0068E0r 1  BD rr rr        LDA NEXT_ROW_Y_L,X  ; 0F00 next row LEFT/up when added
0068E3r 1  85 30           STA PWOL_NEXT_ROW_A_LEFT_YL   ; -> next row is left, going up the screen
0068E5r 1  65 2C           ADC PWOL_ACROSS_ROW_YL   ; across row is for right
0068E7r 1  85 34           STA PWOL_NEXT_ROW_A_RIGHT_YL  ;  -> next row is right, going up the screen
0068E9r 1  BD rr rr        LDA NEXT_ROW_Y_H,x
0068ECr 1  85 31           STA PWOL_NEXT_ROW_A_LEFT_YH
0068EEr 1  65 2D           ADC PWOL_ACROSS_ROW_YH
0068F0r 1  85 35           STA PWOL_NEXT_ROW_A_RIGHT_YH
0068F2r 1               
0068F2r 1               
0068F2r 1               ; for zig B , the opposite of left/up is right/down.. so A_LEFT * -1 = B_RIGHT
0068F2r 1  38              SEC ; flip A_LEFT X to B_RIGHT X
0068F3r 1  A9 00           LDA #0
0068F5r 1  E5 2E           SBC PWOL_NEXT_ROW_A_LEFT_XL
0068F7r 1  85 3A           STA PWOL_NEXT_ROW_B_RIGHT_XL
0068F9r 1  A9 00           LDA #0
0068FBr 1  E5 2F           SBC PWOL_NEXT_ROW_A_LEFT_XH
0068FDr 1  85 3B           STA PWOL_NEXT_ROW_B_RIGHT_XH
0068FFr 1               
0068FFr 1  38              SEC ; flip A_LEFT Y to B_RIGHT Y
006900r 1  A9 00           LDA #0
006902r 1  E5 30           SBC PWOL_NEXT_ROW_A_LEFT_YL
006904r 1  85 3C           STA PWOL_NEXT_ROW_B_RIGHT_YL
006906r 1  A9 00           LDA #0
006908r 1  E5 31           SBC PWOL_NEXT_ROW_A_LEFT_YH
00690Ar 1  85 3D           STA PWOL_NEXT_ROW_B_RIGHT_YH
00690Cr 1               
00690Cr 1  38              SEC ; flip A_RIGHT X to B_LEFT X
00690Dr 1  A9 00           LDA #0
00690Fr 1  E5 32           SBC PWOL_NEXT_ROW_A_RIGHT_XL
006911r 1  85 36           STA PWOL_NEXT_ROW_B_LEFT_XL
006913r 1  A9 00           LDA #0
006915r 1  E5 33           SBC PWOL_NEXT_ROW_A_RIGHT_XH
006917r 1  85 37           STA PWOL_NEXT_ROW_B_LEFT_XH
006919r 1               
006919r 1  38              SEC ; flip A_RIGHT Y to B_LEFT Y
00691Ar 1  A9 00           LDA #0
00691Cr 1  E5 34           SBC PWOL_NEXT_ROW_A_RIGHT_YL
00691Er 1  85 38           STA PWOL_NEXT_ROW_B_LEFT_YL
006920r 1  A9 00           LDA #0
006922r 1  E5 35           SBC PWOL_NEXT_ROW_A_RIGHT_YH
006924r 1  85 39           STA PWOL_NEXT_ROW_B_LEFT_YH
006926r 1               
006926r 1  AD rr rr        LDA CAMERA_CENTER_XL
006929r 1  85 26            STA PWOL_CURRENT_XL
00692Br 1  85 45            STA PWOL_START_XL
00692Dr 1               
00692Dr 1  AD rr rr        LDA CAMERA_CENTER_YL
006930r 1  85 28            STA PWOL_CURRENT_YL
006932r 1  85 46            STA PWOL_START_YL
006934r 1               
006934r 1  AD rr rr        LDA CAMERA_CENTER_XH
006937r 1  85 27            STA PWOL_CURRENT_XH
006939r 1  85 47            STA PWOL_START_XH
00693Br 1               
00693Br 1               
00693Br 1  AD rr rr        LDA CAMERA_CENTER_YH
00693Er 1  85 29            STA PWOL_CURRENT_YH
006940r 1  85 48            STA PWOL_START_YH
006942r 1               
006942r 1  AD rr rr         LDA CAMERA_CELL_LINE_PTR
006945r 1  85 22            STA PWOL_TUB_PTR_AL
006947r 1  85 24            STA PWOL_TUB_PTR_BL
006949r 1  AD rr rr         LDA CAMERA_CELL_LINE_PTR+1
00694Cr 1  85 23            STA PWOL_TUB_PTR_AH
00694Er 1  85 25            STA PWOL_TUB_PTR_BH
006950r 1               
006950r 1                  ; STZ VERA_ctrl
006950r 1                  ; LDA #<(VRAM_TEXT_SCREEN+17*64)
006950r 1                  ; STA VERA_addr_low
006950r 1                  ; LDA #>(VRAM_TEXT_SCREEN+17*64)
006950r 1                  ; STA VERA_addr_high
006950r 1                  ; LDA #$21
006950r 1                  ; STA VERA_addr_bank
006950r 1                  ; LDA #26
006950r 1                  ; STA VERA_data0
006950r 1               
006950r 1                 @zigzag_A: ; going to right and up the screen, including where we are currently..
006950r 1  AC rr rr         LDY camera_cell_x
006953r 1  80 00            BRA @zigzag_A_right
006955r 1                  @ZAR_OUT:
006955r 1               
006955r 1                   @zigzag_A_right:
006955r 1  C0 40                CPY #64  ;  make sure we don't go outside level..
006957r 1  B0 68                BCS @ZAR_NEXT ; if we're outside we'll just skip is OK here
006959r 1  B1 22                LDA (PWOL_TUB_PTR_AL),y
00695Br 1  C9 81                CMP #129
00695Dr 1  B0 62                BCS @ZAR_NEXT ; this isn't a valid spot in the level map..
00695Fr 1                       ; bytes 1 and 4 were updated when we cleared the object list
00695Fr 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
006962r 1  D0 04                BNE :++
006964r 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
006967r 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
006968r 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
00696Ar 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
00696Dr 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen... (could cause issues if we're high up? can't see behind?)
00696Fr 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
006971r 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
006973r 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
006976r 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
006979r 1  8A                   TXA ; push new next to the Z buffer spot
00697Ar 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
00697Cr 1                       ; bytes .1..4.6 filled in already..
00697Cr 1  B1 22                LDA (PWOL_TUB_PTR_AL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
00697Er 1  10 08                BPL @ZAR_INSIDE_TUB
006980r 1                     @ZAR_HIT_WALL_OUCH:
006980r 1  AD rr rr               LDA WORLD_WALL_SPRITE_NUM
006983r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
006986r 1  A9 56                  LDA #86 ; max height..
006988r 1                     @ZAR_INSIDE_TUB:
006988r 1  85 40                  STA PWOL_CONVERT_HEIGHTS ;
00698Ar 1  85 42                  STA PWOL_CONVERT_HEIGHTS_L;
00698Cr 1  38                     SEC
00698Dr 1  A5 28                  LDA PWOL_CURRENT_YL
00698Fr 1  F2 42                  SBC (PWOL_CONVERT_HEIGHTS_L)
006991r 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
006993r 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
006995r 1  C9 78                  CMP #SCREEN_OUT_BOTTOM    ;  are we even visible?
006997r 1  90 0E                  BCC :+
006999r 1  C5 55                  CMP PWOL_TOP_CHECK  ;     #SCREEN_OUT_TOP-50 ;PWOL_TOP_CHECK;
00699Br 1  B0 0A                  BCS :+
00699Dr 1  CE rr rr               DEC OBJECT_LIST_BYTE6_NEXT
0069A0r 1  BD rr rr               LDA OBJECT_LIST_BYTE6_NEXT,X ; grab the old next value
0069A3r 1  92 3E                  STA (PWOL_Z_STARTS_PTR) ; patch the old one back in..
0069A5r 1  80 1A                  BRA @ZAR_NEXT ; and skip THIS
0069A7r 1                       :
0069A7r 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
0069AAr 1  C5 54                  CMP PWOL_CENTER_Y_TOP ; is this above center on screen??
0069ACr 1  B0 0E                  BCS :+ ; is not covering us
0069AEr 1  A5 29                  LDA PWOL_CURRENT_YH
0069B0r 1  C5 53                  CMP PWOL_CENTER_Y
0069B2r 1  90 08                  BCC :+ ; its from ahead of us, OK
0069B4r 1                         ; it was from below and covers us ..
0069B4r 1  BD rr rr               LDA OBJECT_LIST_BYTE0_ADDRLOW,X
0069B7r 1  69 0F                  ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
0069B9r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X
0069BCr 1                         ;LDA #$D0
0069BCr 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
0069BCr 1  A5 27                : LDA PWOL_CURRENT_XH
0069BEr 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
0069C1r 1                         ; for debugging ...
0069C1r 1                     ;    STZ VERA_data0
0069C1r 1                     ;    STA VERA_data0
0069C1r 1                     ;    LDA PWOL_CURRENT_YH
0069C1r 1                     ;    STA VERA_data0
0069C1r 1                     ;    STZ VERA_data0
0069C1r 1               
0069C1r 1                    @ZAR_NEXT:
0069C1r 1                        ; calc next to the right..
0069C1r 1  C8                    INY
0069C2r 1  18                    CLC
0069C3r 1  A5 26                 LDA PWOL_CURRENT_XL
0069C5r 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
0069C7r 1  85 26                 STA PWOL_CURRENT_XL
0069C9r 1  A5 27                 LDA PWOL_CURRENT_XH
0069CBr 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
0069CDr 1  85 27                 STA PWOL_CURRENT_XH
0069CFr 1  AA                    TAX
0069D0r 1  18                    CLC
0069D1r 1  A5 28                 LDA PWOL_CURRENT_YL
0069D3r 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
0069D5r 1  85 28                 STA PWOL_CURRENT_YL
0069D7r 1  A5 29                 LDA PWOL_CURRENT_YH
0069D9r 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
0069DBr 1  85 29                 STA PWOL_CURRENT_YH
0069DDr 1               
0069DDr 1               
0069DDr 1  C5 56                 CMP PWOL_BOT_CHECK
0069DFr 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
0069E1r 1  C9 F0                 CMP #SCREEN_OUT_TOP
0069E3r 1  90 0B                 BCC @ZAR_ZIG_LEFT_SWITCH ; its bottom_out <= Y < top out .. because negatives are bigger
0069E5r 1                      :
0069E5r 1  E0 A0                 CPX #SCREEN_OUT_RIGHT ; check against right side
0069E7r 1  90 04                 BCC :+                ; if its within right side then go do next thing..
0069E9r 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
0069EBr 1  90 03                 BCC @ZAR_ZIG_LEFT_SWITCH ; we're to the right of the screen but not far enough to wrap around..
0069EDr 1  4C rr rr            : JMP @zigzag_A_right
0069F0r 1                    @ZAR_ZIG_LEFT_SWITCH: ;PWOL_NEXT_ROW_A_LEFT_XL   ; -> next row is left, going up the screen ..  +0,-1
0069F0r 1  A9 06                 LDA #TRY_AGAIN
0069F2r 1  85 44                 STA PWOL_TRIES_COUNTER
0069F4r 1               ;         INY
0069F4r 1  38                    SEC
0069F5r 1  A5 22                 LDA PWOL_TUB_PTR_AL
0069F7r 1  E9 40                 SBC #64 ;   0,-1
0069F9r 1  85 22                 STA PWOL_TUB_PTR_AL
0069FBr 1  A5 23                 LDA PWOL_TUB_PTR_AH
0069FDr 1  E9 00                 SBC #0
0069FFr 1  C9 rr                 CMP #>TUB_WORLD ; are we inside the world still?
006A01r 1  B0 03                 BCS :+
006A03r 1  4C rr rr              JMP @zigzag_B
006A06r 1  85 23               : STA PWOL_TUB_PTR_AH
006A08r 1               
006A08r 1  18                    CLC
006A09r 1  A5 26                 LDA PWOL_CURRENT_XL
006A0Br 1  65 2E                 ADC PWOL_NEXT_ROW_A_LEFT_XL
006A0Dr 1  85 26                 STA PWOL_CURRENT_XL
006A0Fr 1  A5 27                 LDA PWOL_CURRENT_XH
006A11r 1  65 2F                 ADC PWOL_NEXT_ROW_A_LEFT_XH
006A13r 1  85 27                 STA PWOL_CURRENT_XH
006A15r 1  AA                    TAX
006A16r 1  18                    CLC
006A17r 1  A5 28                 LDA PWOL_CURRENT_YL
006A19r 1  65 30                 ADC PWOL_NEXT_ROW_A_LEFT_YL
006A1Br 1  85 28                 STA PWOL_CURRENT_YL
006A1Dr 1  A5 29                 LDA PWOL_CURRENT_YH
006A1Fr 1  65 31                 ADC PWOL_NEXT_ROW_A_LEFT_YH
006A21r 1  80 21                 BRA @ZAR_ZIG_LEFT_SWITCH_CHECK
006A23r 1               
006A23r 1                  @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN:
006A23r 1  C6 44                 DEC PWOL_TRIES_COUNTER
006A25r 1  D0 03                 BNE @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT
006A27r 1  4C rr rr              JMP @zigzag_B
006A2Ar 1                  @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT:
006A2Ar 1  88                    DEY
006A2Br 1  38                    SEC
006A2Cr 1  A5 26                 LDA PWOL_CURRENT_XL
006A2Er 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
006A30r 1  85 26                 STA PWOL_CURRENT_XL
006A32r 1  A5 27                 LDA PWOL_CURRENT_XH
006A34r 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
006A36r 1  85 27                 STA PWOL_CURRENT_XH
006A38r 1  AA                    TAX
006A39r 1  38                    SEC
006A3Ar 1  A5 28                 LDA PWOL_CURRENT_YL
006A3Cr 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
006A3Er 1  85 28                 STA PWOL_CURRENT_YL
006A40r 1  A5 29                 LDA PWOL_CURRENT_YH
006A42r 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
006A44r 1               
006A44r 1                  @ZAR_ZIG_LEFT_SWITCH_CHECK:
006A44r 1  85 29                 STA PWOL_CURRENT_YH
006A46r 1  C5 56                 CMP PWOL_BOT_CHECK
006A48r 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
006A4Ar 1  C9 F0                 CMP #SCREEN_OUT_TOP
006A4Cr 1  90 D5                 BCC @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN   ; its bottom_out <= Y < top out .. because negatives are bigger
006A4Er 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
006A50r 1  90 04                 BCC @zigzag_A_left
006A52r 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
006A54r 1  90 CD                 BCC @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
006A56r 1               
006A56r 1               
006A56r 1               
006A56r 1                  @zigzag_A_left:
006A56r 1  C0 40                CPY #64  ;  make sure we don't go outside level..
006A58r 1  B0 6E                BCS @ZAL_NEXT ; if we're outside we'll just skip is OK
006A5Ar 1  B1 22                LDA (PWOL_TUB_PTR_AL),y
006A5Cr 1  C9 81                CMP #129
006A5Er 1  B0 68                BCS @ZAL_NEXT ; we're outside level.
006A60r 1               
006A60r 1                       ; bytes 1 and 4 were updated when we cleared the object list
006A60r 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
006A63r 1  D0 04                BNE :++
006A65r 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
006A68r 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
006A69r 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
006A6Br 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
006A6Er 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen...
006A70r 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
006A72r 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
006A74r 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
006A77r 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
006A7Ar 1  8A                   TXA ; push new next to the Z buffer spot
006A7Br 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
006A7Dr 1                       ; bytes .1..4.6 filled in already..
006A7Dr 1  AD rr rr             LDA WORLD_SPRITE_NUM
006A80r 1  9D rr rr             STA OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway..
006A83r 1  B1 22                LDA (PWOL_TUB_PTR_AL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
006A85r 1  10 08                BPL @ZAL_INSIDE_TUB
006A87r 1                     @ZAL_HIT_WALL_OUCH:
006A87r 1  AD rr rr               LDA WORLD_WALL_SPRITE_NUM
006A8Ar 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
006A8Dr 1  A9 56                  LDA #86 ; max height..
006A8Fr 1                     @ZAL_INSIDE_TUB:
006A8Fr 1  85 40                  STA PWOL_CONVERT_HEIGHTS ;
006A91r 1  85 42                  STA PWOL_CONVERT_HEIGHTS_L;
006A93r 1  38                     SEC
006A94r 1  A5 28                  LDA PWOL_CURRENT_YL
006A96r 1  F2 42                  SBC (PWOL_CONVERT_HEIGHTS_L)
006A98r 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
006A9Ar 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
006A9Cr 1  C9 78                  CMP #SCREEN_OUT_BOTTOM    ;  are we even visible?
006A9Er 1  90 0E                  BCC :+
006AA0r 1  C5 55                  CMP PWOL_TOP_CHECK  ;     #SCREEN_OUT_TOP-50 ;PWOL_TOP_CHECK;
006AA2r 1  B0 0A                  BCS :+
006AA4r 1  CE rr rr               DEC OBJECT_LIST_BYTE6_NEXT
006AA7r 1  BD rr rr               LDA OBJECT_LIST_BYTE6_NEXT,X ; grab the old next value
006AAAr 1  92 3E                  STA (PWOL_Z_STARTS_PTR) ; patch the old one back in..
006AACr 1  80 1A                  BRA @ZAL_NEXT ; and skip THIS
006AAEr 1                       :
006AAEr 1               
006AAEr 1               
006AAEr 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
006AB1r 1  C5 54                  CMP PWOL_CENTER_Y_TOP ; is this above center on screen??
006AB3r 1  B0 0E                  BCS :+ ; is not covering us
006AB5r 1  A5 29                  LDA PWOL_CURRENT_YH
006AB7r 1  C5 53                  CMP PWOL_CENTER_Y
006AB9r 1  90 08                  BCC :+ ; its from ahead of us, OK
006ABBr 1                         ; it was from below and covers us ..
006ABBr 1  BD rr rr               LDA OBJECT_LIST_BYTE0_ADDRLOW,X
006ABEr 1  69 0F                  ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
006AC0r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X
006AC3r 1                         ;LDA #$D0
006AC3r 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
006AC3r 1  A5 27                : LDA PWOL_CURRENT_XH
006AC5r 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
006AC8r 1                    @ZAL_NEXT:
006AC8r 1                        ; calc next to the LEFT
006AC8r 1  88                    DEY
006AC9r 1  38                    SEC
006ACAr 1  A5 26                 LDA PWOL_CURRENT_XL
006ACCr 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
006ACEr 1  85 26                 STA PWOL_CURRENT_XL
006AD0r 1  A5 27                 LDA PWOL_CURRENT_XH
006AD2r 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
006AD4r 1  85 27                 STA PWOL_CURRENT_XH
006AD6r 1  AA                    TAX
006AD7r 1  38                    SEC
006AD8r 1  A5 28                 LDA PWOL_CURRENT_YL
006ADAr 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
006ADCr 1  85 28                 STA PWOL_CURRENT_YL
006ADEr 1  A5 29                 LDA PWOL_CURRENT_YH
006AE0r 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
006AE2r 1  85 29                 STA PWOL_CURRENT_YH
006AE4r 1               
006AE4r 1               
006AE4r 1  C5 56                 CMP PWOL_BOT_CHECK
006AE6r 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
006AE8r 1  C9 F0                 CMP #SCREEN_OUT_TOP
006AEAr 1  90 0B                 BCC @ZAL_ZIG_RIGHT_SWITCH   ; its bottom_out <= Y < top out .. because negatives are bigger
006AECr 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
006AEEr 1  90 04                 BCC :+                ; if its within right side then go do next thing..
006AF0r 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
006AF2r 1  90 03                 BCC @ZAL_ZIG_RIGHT_SWITCH     ; we're to the right of the screen but not far enough to wrap around..
006AF4r 1  4C rr rr            : JMP @zigzag_A_left
006AF7r 1               
006AF7r 1                    @ZAL_ZIG_RIGHT_SWITCH: ; up/right is +1,+1  from where we is right now ..
006AF7r 1  A9 06                 LDA #TRY_AGAIN
006AF9r 1  85 44                 STA PWOL_TRIES_COUNTER
006AFBr 1  C8                    INY
006AFCr 1  38                    SEC
006AFDr 1  A5 22                 LDA PWOL_TUB_PTR_AL
006AFFr 1  E9 40                 SBC #64
006B01r 1  85 22                 STA PWOL_TUB_PTR_AL
006B03r 1  A5 23                 LDA PWOL_TUB_PTR_AH
006B05r 1  E9 00                 SBC #0
006B07r 1  C9 rr                 CMP #>TUB_WORLD ; are we inside the world still?
006B09r 1  B0 03                 BCS :+
006B0Br 1  4C rr rr              JMP @zigzag_B
006B0Er 1  85 23               : STA PWOL_TUB_PTR_AH
006B10r 1               
006B10r 1               
006B10r 1  18                    CLC
006B11r 1               
006B11r 1  A5 26                 LDA PWOL_CURRENT_XL
006B13r 1  65 32                 ADC PWOL_NEXT_ROW_A_RIGHT_XL
006B15r 1  85 26                 STA PWOL_CURRENT_XL
006B17r 1               
006B17r 1  A5 27                 LDA PWOL_CURRENT_XH
006B19r 1  65 33                 ADC PWOL_NEXT_ROW_A_RIGHT_XH
006B1Br 1  85 27                 STA PWOL_CURRENT_XH
006B1Dr 1  AA                    TAX
006B1Er 1               
006B1Er 1               
006B1Er 1  18                    CLC
006B1Fr 1  A5 28                 LDA PWOL_CURRENT_YL
006B21r 1  65 34                 ADC PWOL_NEXT_ROW_A_RIGHT_YL
006B23r 1  85 28                 STA PWOL_CURRENT_YL
006B25r 1  A5 29                 LDA PWOL_CURRENT_YH
006B27r 1  65 35                 ADC PWOL_NEXT_ROW_A_RIGHT_YH
006B29r 1  80 1E                 BRA @ZAL_ZIG_RIGHT_SWITCH_CHECK
006B2Br 1               
006B2Br 1               
006B2Br 1               
006B2Br 1                  @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN:
006B2Br 1  C6 44                 DEC PWOL_TRIES_COUNTER
006B2Dr 1  F0 2F                 BEQ @zigzag_B
006B2Fr 1                  @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN_GO_RIGHT:
006B2Fr 1  C8                    INY
006B30r 1  18                    CLC
006B31r 1  A5 26                 LDA PWOL_CURRENT_XL
006B33r 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
006B35r 1  85 26                 STA PWOL_CURRENT_XL
006B37r 1  A5 27                 LDA PWOL_CURRENT_XH
006B39r 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
006B3Br 1  85 27                 STA PWOL_CURRENT_XH
006B3Dr 1  AA                    TAX
006B3Er 1  18                    CLC
006B3Fr 1  A5 28                 LDA PWOL_CURRENT_YL
006B41r 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
006B43r 1  85 28                 STA PWOL_CURRENT_YL
006B45r 1  A5 29                 LDA PWOL_CURRENT_YH
006B47r 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
006B49r 1                  @ZAL_ZIG_RIGHT_SWITCH_CHECK:
006B49r 1  85 29                 STA PWOL_CURRENT_YH
006B4Br 1  C5 56                 CMP PWOL_BOT_CHECK
006B4Dr 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
006B4Fr 1  C9 F0                 CMP #SCREEN_OUT_TOP
006B51r 1  90 D8                 BCC @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN    ; its bottom_out <= Y < top out .. because negatives are bigger
006B53r 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
006B55r 1  90 04                 BCC :+
006B57r 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
006B59r 1  90 D0                 BCC @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
006B5Br 1  4C rr rr            : JMP @zigzag_A_right
006B5Er 1               
006B5Er 1               
006B5Er 1                 @zigzag_B: ; going to left and down the screen, including where we are currently..
006B5Er 1  38                 SEC
006B5Fr 1  A5 45              LDA PWOL_START_XL
006B61r 1  E5 2A              SBC PWOL_ACROSS_ROW_XL
006B63r 1  85 26              STA PWOL_CURRENT_XL
006B65r 1  A5 47              LDA PWOL_START_XH
006B67r 1  E5 2B              SBC PWOL_ACROSS_ROW_XH
006B69r 1  85 27              STA PWOL_CURRENT_XH
006B6Br 1               
006B6Br 1               
006B6Br 1  38                 SEC
006B6Cr 1  A5 46              LDA PWOL_START_YL
006B6Er 1  E5 2C              SBC PWOL_ACROSS_ROW_YL
006B70r 1  85 28              STA PWOL_CURRENT_YL
006B72r 1  A5 48              LDA PWOL_START_YH
006B74r 1  E5 2D              SBC PWOL_ACROSS_ROW_YH
006B76r 1  85 29              STA PWOL_CURRENT_YH
006B78r 1               
006B78r 1  AC rr rr           LDY camera_cell_x   ;  eh voila! we haz pointer to ze row to start on .. woot!
006B7Br 1  88                 DEY ; start left
006B7Cr 1               
006B7Cr 1                  @zigzag_B_left:
006B7Cr 1  C0 40                CPY #64  ;  make sure we don't go outside level..
006B7Er 1  B0 6E                BCS @ZBL_NEXT ; if we're outside we'll just skip is OK
006B80r 1  B1 24                LDA (PWOL_TUB_PTR_BL),y
006B82r 1  C9 81                CMP #129
006B84r 1  B0 68                BCS @ZBL_NEXT ; we're outside level.
006B86r 1               
006B86r 1                       ; bytes 1 and 4 were updated when we cleared the object list
006B86r 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
006B89r 1  D0 04                BNE :++
006B8Br 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
006B8Er 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
006B8Fr 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
006B91r 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
006B94r 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen...
006B96r 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
006B98r 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
006B9Ar 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
006B9Dr 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
006BA0r 1  8A                   TXA ; push new next to the Z buffer spot
006BA1r 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
006BA3r 1                       ; bytes .1..4.6 filled in already..
006BA3r 1  AD rr rr             LDA WORLD_SPRITE_NUM
006BA6r 1  9D rr rr             STA OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway..
006BA9r 1  B1 24                LDA (PWOL_TUB_PTR_BL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
006BABr 1  10 08                BPL @ZBL_INSIDE_TUB
006BADr 1                     @ZBL_HIT_WALL_OUCH:
006BADr 1  AD rr rr               LDA WORLD_WALL_SPRITE_NUM
006BB0r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
006BB3r 1  A9 56                  LDA #86 ; max height..
006BB5r 1                     @ZBL_INSIDE_TUB:
006BB5r 1  85 40                  STA PWOL_CONVERT_HEIGHTS ;
006BB7r 1  85 42                  STA PWOL_CONVERT_HEIGHTS_L;
006BB9r 1  38                     SEC
006BBAr 1  A5 28                  LDA PWOL_CURRENT_YL
006BBCr 1  F2 42                  SBC (PWOL_CONVERT_HEIGHTS_L)
006BBEr 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
006BC0r 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
006BC2r 1  C9 78                  CMP #SCREEN_OUT_BOTTOM    ;  are we even visible?
006BC4r 1  90 0E                  BCC :+
006BC6r 1  C5 55                  CMP PWOL_TOP_CHECK  ;     #SCREEN_OUT_TOP-50 ;PWOL_TOP_CHECK;
006BC8r 1  B0 0A                  BCS :+
006BCAr 1  CE rr rr               DEC OBJECT_LIST_BYTE6_NEXT
006BCDr 1  BD rr rr               LDA OBJECT_LIST_BYTE6_NEXT,X ; grab the old next value
006BD0r 1  92 3E                  STA (PWOL_Z_STARTS_PTR) ; patch the old one back in..
006BD2r 1  80 1A                  BRA @ZBL_NEXT ; and skip THIS
006BD4r 1                       :
006BD4r 1               
006BD4r 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
006BD7r 1  C5 54                  CMP PWOL_CENTER_Y_TOP ; is this above center on screen??
006BD9r 1  B0 0E                  BCS :+ ; is not covering us
006BDBr 1  A5 29                  LDA PWOL_CURRENT_YH
006BDDr 1  C5 53                  CMP PWOL_CENTER_Y
006BDFr 1  90 08                  BCC :+ ; its from ahead of us, OK
006BE1r 1                         ; it was from below and covers us ..
006BE1r 1  BD rr rr               LDA OBJECT_LIST_BYTE0_ADDRLOW,X
006BE4r 1  69 0F                  ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
006BE6r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X
006BE9r 1                         ;LDA #$D0
006BE9r 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
006BE9r 1  A5 27                : LDA PWOL_CURRENT_XH
006BEBr 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
006BEEr 1                    @ZBL_NEXT:
006BEEr 1                        ; calc next to the LEFT
006BEEr 1  88                    DEY
006BEFr 1  38                    SEC
006BF0r 1  A5 26                 LDA PWOL_CURRENT_XL
006BF2r 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
006BF4r 1  85 26                 STA PWOL_CURRENT_XL
006BF6r 1  A5 27                 LDA PWOL_CURRENT_XH
006BF8r 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
006BFAr 1  85 27                 STA PWOL_CURRENT_XH
006BFCr 1  AA                    TAX
006BFDr 1  38                    SEC
006BFEr 1  A5 28                 LDA PWOL_CURRENT_YL
006C00r 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
006C02r 1  85 28                 STA PWOL_CURRENT_YL
006C04r 1  A5 29                 LDA PWOL_CURRENT_YH
006C06r 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
006C08r 1  85 29                 STA PWOL_CURRENT_YH
006C0Ar 1               
006C0Ar 1               
006C0Ar 1  C5 56                 CMP PWOL_BOT_CHECK
006C0Cr 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
006C0Er 1  C9 F0                 CMP #SCREEN_OUT_TOP
006C10r 1  90 0B                 BCC @ZBL_ZIG_RIGHT_SWITCH     ; its bottom_out <= Y < top out .. because negatives are bigger
006C12r 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
006C14r 1  90 04                 BCC :+                ; if its within right side then go do next thing..
006C16r 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
006C18r 1  90 03                 BCC @ZBL_ZIG_RIGHT_SWITCH     ; we're to the right of the screen but not far enough to wrap around..
006C1Ar 1  4C rr rr            : JMP @zigzag_B_left
006C1Dr 1               
006C1Dr 1               
006C1Dr 1               
006C1Dr 1                    @ZBL_ZIG_RIGHT_SWITCH: ; DOWN/LEFT to start right is is 0,+1  from where we is right now ..
006C1Dr 1                        ;INY
006C1Dr 1                        ;INY
006C1Dr 1  A9 06                 LDA #TRY_AGAIN
006C1Fr 1  85 44                 STA PWOL_TRIES_COUNTER
006C21r 1  18                    CLC
006C22r 1  A5 24                 LDA PWOL_TUB_PTR_BL
006C24r 1  69 40                 ADC #64
006C26r 1  85 24                 STA PWOL_TUB_PTR_BL
006C28r 1  A5 25                 LDA PWOL_TUB_PTR_BH
006C2Ar 1  69 00                 ADC #0
006C2Cr 1  C9 rr                 CMP #>TUB_WORLD+8
006C2Er 1  90 01                 BCC :+
006C30r 1  60                    rts
006C31r 1  85 25               : STA PWOL_TUB_PTR_BH
006C33r 1               
006C33r 1               
006C33r 1  18                    CLC
006C34r 1               
006C34r 1  A5 26                 LDA PWOL_CURRENT_XL
006C36r 1  65 3A                 ADC PWOL_NEXT_ROW_B_RIGHT_XL
006C38r 1  85 26                 STA PWOL_CURRENT_XL
006C3Ar 1               
006C3Ar 1  A5 27                 LDA PWOL_CURRENT_XH
006C3Cr 1  65 3B                 ADC PWOL_NEXT_ROW_B_RIGHT_XH
006C3Er 1  85 27                 STA PWOL_CURRENT_XH
006C40r 1  AA                    TAX
006C41r 1               
006C41r 1               
006C41r 1  18                    CLC
006C42r 1  A5 28                 LDA PWOL_CURRENT_YL
006C44r 1  65 3C                 ADC PWOL_NEXT_ROW_B_RIGHT_YL
006C46r 1  85 28                 STA PWOL_CURRENT_YL
006C48r 1  A5 29                 LDA PWOL_CURRENT_YH
006C4Ar 1  65 3D                 ADC PWOL_NEXT_ROW_B_RIGHT_YH
006C4Cr 1  80 1F                 BRA @ZBL_ZIG_RIGHT_SWITCH_CHECK
006C4Er 1               
006C4Er 1                  @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN:
006C4Er 1  C6 44                 DEC PWOL_TRIES_COUNTER
006C50r 1  D0 01                 BNE @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN_GO_RIGHT
006C52r 1                  @ZBL_RTS:
006C52r 1               ;          STZ VERA_data0
006C52r 1                ;         STZ VERA_data0
006C52r 1                 ;        STZ VERA_data0
006C52r 1                  ;       STZ VERA_data0
006C52r 1  60                 rts
006C53r 1                  @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN_GO_RIGHT:
006C53r 1  C8                    INY
006C54r 1  18                    CLC
006C55r 1  A5 26                 LDA PWOL_CURRENT_XL
006C57r 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
006C59r 1  85 26                 STA PWOL_CURRENT_XL
006C5Br 1  A5 27                 LDA PWOL_CURRENT_XH
006C5Dr 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
006C5Fr 1  85 27                 STA PWOL_CURRENT_XH
006C61r 1  AA                    TAX
006C62r 1  18                    CLC
006C63r 1  A5 28                 LDA PWOL_CURRENT_YL
006C65r 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
006C67r 1  85 28                 STA PWOL_CURRENT_YL
006C69r 1  A5 29                 LDA PWOL_CURRENT_YH
006C6Br 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
006C6Dr 1                  @ZBL_ZIG_RIGHT_SWITCH_CHECK:
006C6Dr 1  85 29                 STA PWOL_CURRENT_YH
006C6Fr 1  C5 56                 CMP PWOL_BOT_CHECK
006C71r 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
006C73r 1  C9 F0                 CMP #SCREEN_OUT_TOP
006C75r 1  90 D7                 BCC @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN    ; its bottom_out <= Y < top out .. because negatives are bigger
006C77r 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
006C79r 1  90 04                 BCC @zigzag_B_right
006C7Br 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
006C7Dr 1  90 CF                 BCC @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
006C7Fr 1               
006C7Fr 1               
006C7Fr 1               
006C7Fr 1                   @zigzag_B_right:
006C7Fr 1  C0 40                CPY #64  ;  make sure we don't go outside level..
006C81r 1  B0 6E                BCS @ZBR_NEXT ; if we're outside we'll just skip is OK
006C83r 1  B1 24                LDA (PWOL_TUB_PTR_BL),y
006C85r 1  C9 81                CMP #129
006C87r 1  B0 68                BCS @ZBR_NEXT ; we're outside level.
006C89r 1               
006C89r 1                       ; bytes 1 and 4 were updated when we cleared the object list
006C89r 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
006C8Cr 1  D0 04                BNE :++
006C8Er 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
006C91r 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
006C92r 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
006C94r 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
006C97r 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen...
006C99r 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
006C9Br 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
006C9Dr 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
006CA0r 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
006CA3r 1  8A                   TXA ; push new next to the Z buffer spot
006CA4r 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
006CA6r 1                       ; bytes .1..4.6 filled in already..
006CA6r 1  AD rr rr             LDA WORLD_SPRITE_NUM
006CA9r 1  9D rr rr             STA OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway..
006CACr 1  B1 24                LDA (PWOL_TUB_PTR_BL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
006CAEr 1  10 08                BPL @ZBR_INSIDE_TUB
006CB0r 1                     @ZBR_HIT_WALL_OUCH:
006CB0r 1  AD rr rr               LDA WORLD_WALL_SPRITE_NUM
006CB3r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
006CB6r 1  A9 56                  LDA #86 ; max height..
006CB8r 1                     @ZBR_INSIDE_TUB:
006CB8r 1  85 40                  STA PWOL_CONVERT_HEIGHTS ;
006CBAr 1  85 42                  STA PWOL_CONVERT_HEIGHTS_L;
006CBCr 1  38                     SEC
006CBDr 1  A5 28                  LDA PWOL_CURRENT_YL
006CBFr 1  F2 42                  SBC (PWOL_CONVERT_HEIGHTS_L)
006CC1r 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
006CC3r 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
006CC5r 1  C9 78                  CMP #SCREEN_OUT_BOTTOM    ;  are we even visible?
006CC7r 1  90 0E                  BCC :+
006CC9r 1  C5 55                  CMP PWOL_TOP_CHECK  ;     #SCREEN_OUT_TOP-50 ;PWOL_TOP_CHECK;
006CCBr 1  B0 0A                  BCS :+
006CCDr 1  CE rr rr               DEC OBJECT_LIST_BYTE6_NEXT
006CD0r 1  BD rr rr               LDA OBJECT_LIST_BYTE6_NEXT,X ; grab the old next value
006CD3r 1  92 3E                  STA (PWOL_Z_STARTS_PTR) ; patch the old one back in..
006CD5r 1  80 1A                  BRA @ZBR_NEXT ; and skip THIS
006CD7r 1                       :
006CD7r 1               
006CD7r 1               
006CD7r 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
006CDAr 1  C5 54                  CMP PWOL_CENTER_Y_TOP ; is this above center on screen??
006CDCr 1  B0 0E                  BCS :+ ; is not covering us
006CDEr 1  A5 29                  LDA PWOL_CURRENT_YH
006CE0r 1  C5 53                  CMP PWOL_CENTER_Y
006CE2r 1  90 08                  BCC :+ ; its from ahead of us, OK
006CE4r 1                         ; it was from below and covers us ..
006CE4r 1  BD rr rr               LDA OBJECT_LIST_BYTE0_ADDRLOW,X
006CE7r 1  69 0F                  ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
006CE9r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X
006CECr 1                         ;LDA #$D0
006CECr 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
006CECr 1  A5 27                : LDA PWOL_CURRENT_XH
006CEEr 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
006CF1r 1                    @ZBR_NEXT:
006CF1r 1                        ; calc next to the right..
006CF1r 1  C8                    INY
006CF2r 1  18                    CLC
006CF3r 1  A5 26                 LDA PWOL_CURRENT_XL
006CF5r 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
006CF7r 1  85 26                 STA PWOL_CURRENT_XL
006CF9r 1  A5 27                 LDA PWOL_CURRENT_XH
006CFBr 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
006CFDr 1  85 27                 STA PWOL_CURRENT_XH
006CFFr 1  AA                    TAX
006D00r 1  18                    CLC
006D01r 1  A5 28                 LDA PWOL_CURRENT_YL
006D03r 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
006D05r 1  85 28                 STA PWOL_CURRENT_YL
006D07r 1  A5 29                 LDA PWOL_CURRENT_YH
006D09r 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
006D0Br 1  85 29                 STA PWOL_CURRENT_YH
006D0Dr 1               
006D0Dr 1               
006D0Dr 1  C5 56                 CMP PWOL_BOT_CHECK
006D0Fr 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
006D11r 1  C9 F0                 CMP #SCREEN_OUT_TOP
006D13r 1  90 0B                 BCC @ZBR_ZIG_LEFT_SWITCH     ; its bottom_out <= Y < top out .. because negatives are bigger
006D15r 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
006D17r 1  90 04                 BCC :+                ; if its within right side then go do next thing..
006D19r 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
006D1Br 1  90 03                 BCC @ZBR_ZIG_LEFT_SWITCH        ; we're to the right of the screen but not far enough to wrap around..
006D1Dr 1  4C rr rr            : JMP @zigzag_B_right
006D20r 1               
006D20r 1               
006D20r 1               
006D20r 1                    @ZBR_ZIG_LEFT_SWITCH: ;PWOL_NEXT_ROW_A_LEFT_XL   ; -> next row is left, going down the screen ..  +1,+1
006D20r 1  A9 06                 LDA #TRY_AGAIN
006D22r 1  85 44                 STA PWOL_TRIES_COUNTER
006D24r 1  88                   DEY ; have to go this to match where the thing is going .. 0,0
006D25r 1  18                    CLC
006D26r 1  A5 24                 LDA PWOL_TUB_PTR_BL
006D28r 1  69 40                 ADC #64 ;   0,-1
006D2Ar 1  85 24                 STA PWOL_TUB_PTR_BL
006D2Cr 1  A5 25                 LDA PWOL_TUB_PTR_BH
006D2Er 1  69 00                 ADC #0
006D30r 1  C9 rr                 CMP #>TUB_WORLD+8
006D32r 1  90 01                 BCC :+
006D34r 1  60                    rts
006D35r 1  85 25               : STA PWOL_TUB_PTR_BH
006D37r 1               
006D37r 1  18                    CLC
006D38r 1  A5 26                 LDA PWOL_CURRENT_XL
006D3Ar 1  65 36                 ADC PWOL_NEXT_ROW_B_LEFT_XL
006D3Cr 1  85 26                 STA PWOL_CURRENT_XL
006D3Er 1  A5 27                 LDA PWOL_CURRENT_XH
006D40r 1  65 37                 ADC PWOL_NEXT_ROW_B_LEFT_XH
006D42r 1  85 27                 STA PWOL_CURRENT_XH
006D44r 1  AA                    TAX
006D45r 1  18                    CLC
006D46r 1  A5 28                 LDA PWOL_CURRENT_YL
006D48r 1  65 38                 ADC PWOL_NEXT_ROW_B_LEFT_YL
006D4Ar 1  85 28                 STA PWOL_CURRENT_YL
006D4Cr 1  A5 29                 LDA PWOL_CURRENT_YH
006D4Er 1  65 39                 ADC PWOL_NEXT_ROW_B_LEFT_YH
006D50r 1  80 1F                 BRA @ZBR_ZIG_LEFT_SWITCH_CHECK
006D52r 1               
006D52r 1               
006D52r 1               
006D52r 1                  @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN:
006D52r 1  C6 44                 DEC PWOL_TRIES_COUNTER
006D54r 1  D0 01                 BNE @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT
006D56r 1                  @ZBR_RTS:
006D56r 1               ;          STZ VERA_data0
006D56r 1               ;          STZ VERA_data0
006D56r 1               ;          STZ VERA_data0
006D56r 1               ;          STZ VERA_data0
006D56r 1  60                    rts
006D57r 1                  @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT:
006D57r 1  88                    DEY
006D58r 1  38                    SEC
006D59r 1  A5 26                 LDA PWOL_CURRENT_XL
006D5Br 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
006D5Dr 1  85 26                 STA PWOL_CURRENT_XL
006D5Fr 1  A5 27                 LDA PWOL_CURRENT_XH
006D61r 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
006D63r 1  85 27                 STA PWOL_CURRENT_XH
006D65r 1  AA                    TAX
006D66r 1  38                    SEC
006D67r 1  A5 28                 LDA PWOL_CURRENT_YL
006D69r 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
006D6Br 1  85 28                 STA PWOL_CURRENT_YL
006D6Dr 1  A5 29                 LDA PWOL_CURRENT_YH
006D6Fr 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
006D71r 1               
006D71r 1               @ZBR_ZIG_LEFT_SWITCH_CHECK:
006D71r 1  85 29                 STA PWOL_CURRENT_YH
006D73r 1  C5 56                 CMP PWOL_BOT_CHECK
006D75r 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
006D77r 1  C9 F0                 CMP #SCREEN_OUT_TOP
006D79r 1  90 D7                 BCC @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN   ; its bottom_out <= Y < top out .. because negatives are bigger
006D7Br 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
006D7Dr 1  90 04                 BCC :+
006D7Fr 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
006D81r 1  90 CF                 BCC @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
006D83r 1  4C rr rr            : JMP @zigzag_B_left
006D86r 1               
006D86r 1               
006D86r 1               draw_object_list:
006D86r 1  AC rr rr          LDY NUM_AVAIL_SPRITES ; num sprites can write
006D89r 1  D0 03             BNE :+
006D8Br 1  4C rr rr          JMP draw_object_list_to_BUFFER
006D8Er 1                  :
006D8Er 1  AD rr rr         LDA NUM_RESERVED_SPRITES
006D91r 1               ;    INC VERA_LOCK
006D91r 1               ;    BNE @unlock_vera   there's no actual way to get here and not have vera unlock.. s
006D91r 1               ;  so instead, we're going to DEC the VERA_LOCK after the new frame is ready, which is after this function..
006D91r 1               
006D91r 1               
006D91r 1               
006D91r 1               
006D91r 1  9C 25 9F         STZ VERA_ctrl
006D94r 1  64 22            STZ ZP_PTR
006D96r 1  0A               ASL
006D97r 1  26 22            ROL ZP_PTR
006D99r 1  0A               ASL
006D9Ar 1  26 22            ROL ZP_PTR
006D9Cr 1  0A               ASL
006D9Dr 1  26 22            ROL ZP_PTR
006D9Fr 1  8D 20 9F         STA VERA_addr_low
006DA2r 1  18               CLC
006DA3r 1  A5 22            LDA ZP_PTR
006DA5r 1  69 EC            ADC #>VRAM_SPRITE_BUF;  #>VRAM_SPRITE_BUF ; #>VRAM_sprite_attributes;
006DA7r 1  8D 21 9F         sta VERA_addr_high
006DAAr 1  A9 11            lda #$11
006DACr 1  8D 22 9F         sta VERA_addr_bank
006DAFr 1  AD rr rr         LDA SPRITE_OBJECT_ENABLE
006DB2r 1  D0 22            BNE @SET_Z_PTR
006DB4r 1  A9 01            LDA #1
006DB6r 1  A2 0C            LDX #$0C
006DB8r 1  9C 23 9F        : STZ VERA_data0  ; addr low
006DBBr 1  8D 23 9F          STA VERA_data0  ; mod/addr_hi
006DBEr 1  9C 23 9F          STZ VERA_data0  ; xl
006DC1r 1  9C 23 9F          STZ VERA_data0  ; Xh
006DC4r 1  9C 23 9F          STZ VERA_data0  ; yl
006DC7r 1  9C 23 9F          STZ VERA_data0  ; yh
006DCAr 1  8E 23 9F          STX VERA_data0
006DCDr 1  9C 23 9F          STZ VERA_data0
006DD0r 1  88                DEY
006DD1r 1  D0 E5             BNE :-
006DD3r 1  4C rr rr         JMP draw_object_list_to_BUFFER
006DD6r 1               
006DD6r 1               
006DD6r 1               @SET_Z_PTR:
006DD6r 1  64 22            STZ ZP_PTR
006DD8r 1  A9 rr            LDA #>OBJECT_LIST_Z_START_POINTERS
006DDAr 1  85 23            STA ZP_PTR+1
006DDCr 1               
006DDCr 1               
006DDCr 1                 @NEXT_Z: ; Z=0 is invalid...
006DDCr 1  E6 22              INC ZP_PTR
006DDEr 1  D0 1C              BNE @Z_LOOP
006DE0r 1  AD 23 9F           : LDA VERA_data0
006DE3r 1  AD 23 9F             LDA VERA_data0
006DE6r 1  9C 23 9F             STZ VERA_data0
006DE9r 1  9C 23 9F             STZ VERA_data0
006DECr 1  AD 23 9F             LDA VERA_data0
006DEFr 1  AD 23 9F             LDA VERA_data0
006DF2r 1  AD 23 9F             LDA VERA_data0
006DF5r 1  AD 23 9F             LDA VERA_data0
006DF8r 1  88                   DEY
006DF9r 1  D0 E5                BNE :-
006DFBr 1                  @rts:
006DFBr 1  60                 rts
006DFCr 1                 @Z_LOOP:
006DFCr 1  B2 22              LDA (ZP_PTR) ; get our first victim
006DFEr 1  AA                 TAX
006DFFr 1  A9 00              LDA #0
006E01r 1  92 22              STA (ZP_PTR) ; zero this Z_next for now
006E03r 1  8A                 TXA
006E04r 1                    @OBJ_LOOP:
006E04r 1  AA                    TAX
006E05r 1  F0 D5                 BEQ @NEXT_Z ; got a bum next pointer there ...
006E07r 1  BD rr rr              LDA OBJECT_LIST_BYTE0_ADDRLOW,X
006E0Ar 1  8D 23 9F              STA VERA_data0
006E0Dr 1  BD rr rr              LDA OBJECT_LIST_BYTE1_MODE,x
006E10r 1  8D 23 9F              STA VERA_data0
006E13r 1  BD rr rr              LDA OBJECT_LIST_BYTE2_X,x
006E16r 1  8D 23 9F              STA VERA_data0
006E19r 1  C9 A0                 CMP #SCREEN_OUT_RIGHT
006E1Br 1  A9 00                 LDA #0
006E1Dr 1  90 02                 BCC :+
006E1Fr 1  A9 FF                 LDA #$FF
006E21r 1  8D 23 9F            : STA VERA_data0
006E24r 1               
006E24r 1  BD rr rr              LDA OBJECT_LIST_BYTE3_Y,x
006E27r 1  8D 23 9F              STA VERA_data0
006E2Ar 1  C9 78                 CMP #SCREEN_OUT_BOTTOM
006E2Cr 1  A9 00                 LDA #0
006E2Er 1  90 02                 BCC :+
006E30r 1  A9 FF                 LDA #$FF
006E32r 1  8D 23 9F            : STA VERA_data0
006E35r 1  BD rr rr              LDA OBJECT_LIST_BYTE4_ZFLIPS,x
006E38r 1  8D 23 9F              STA VERA_data0
006E3Br 1  BD rr rr              LDA OBJECT_LIST_BYTE5_SIZE,x
006E3Er 1  8D 23 9F              STA VERA_data0
006E41r 1  BD rr rr              LDA OBJECT_LIST_BYTE6_NEXT,x
006E44r 1  88                    DEY ; decrement that Y
006E45r 1  D0 BD                 BNE @OBJ_LOOP ; still sprite slots left.. woot!
006E47r 1  92 22                 STA (ZP_PTR) ; oops.. save that last thing and exit..
006E49r 1               draw_object_list_to_BUFFER:
006E49r 1               DOLB_ZTRACKER = ZP_PTR
006E49r 1               DOLB_ZTRACKERH = ZP_PTR+1
006E49r 1               DOLB_BUFFER_HIGH_BYTE = ZP_PTR+2
006E49r 1               DOLB_CALC_DEST_LOW = ZP_PTR+3
006E49r 1               DOLB_CALC_DEST_HIGH = ZP_PTR+4
006E49r 1               DOLB_CALC_SCRATCH = ZP_PTR+5
006E49r 1               DOLB_STOP_BOTTOM = ZP_PTR+6
006E49r 1               DOLB_Y_CALC_POINTER = ZP_PTR+7
006E49r 1               DOLB_Y_CALC_POINTERH = ZP_PTR+8
006E49r 1               
006E49r 1  A9 0C           LDA #12
006E4Br 1  8D 25 9F        STA VERA_ctrl
006E4Er 1  9C 29 9F        STZ FX_CACHE_L ; zero out the cache bytes..
006E51r 1  9C 2A 9F        STZ FX_CACHE_M
006E54r 1  9C 2B 9F        STZ FX_CACHE_H
006E57r 1  9C 2C 9F        STZ FX_CACHE_U
006E5Ar 1               
006E5Ar 1  A9 04           LDA #4  ;    DCSEL 2 with address select 0.. to be used as destination..
006E5Cr 1  8D 25 9F        STA VERA_ctrl
006E5Fr 1  9C 2C 9F        STZ FX_MULT
006E62r 1  A9 60           LDA #%01100000
006E64r 1  8D 29 9F        STA FX_CTRL ;     cache write enable, cache fill and other stuff disabled
006E67r 1               
006E67r 1  9C 20 9F        STZ VERA_addr_low
006E6Ar 1               ;        A        B     CURRENT BITMAP BUFFER
006E6Ar 1               ;   0   display  dirty    A is being displayed, B to be drawn on
006E6Ar 1               ;  64   display  ready    B  is ready for swap
006E6Ar 1               ; 128   dirty    display  B is being displayed, A to be drawn on
006E6Ar 1               ; 192   ready    display  A  is ready for swap
006E6Ar 1               
006E6Ar 1  64 29           STZ DOLB_Y_CALC_POINTER
006E6Cr 1  AD rr rr        LDA CURRENT_BITMAP_BUFFER
006E6Fr 1  10 08           BPL @DRAW_ON_B
006E71r 1               @DRAW_ON_A:
006E71r 1  A9 18           LDA #>VRAM_BITMAP_LAYERA
006E73r 1  A2 80           LDX #>VRAM_BITMAP_LAYERB
006E75r 1  A0 rr           LDY #>BUFFER_A_OFFSETS_HIGH
006E77r 1  80 06           BRA @GO_DRAW
006E79r 1               @DRAW_ON_B:
006E79r 1  A9 80           LDA #>VRAM_BITMAP_LAYERB
006E7Br 1  A2 E4           LDX #>VRAM_TEXT_SCREEN
006E7Dr 1  A0 rr           LDY #>BUFFER_B_OFFSETS_HIGH
006E7Fr 1               @GO_DRAW:
006E7Fr 1  85 24           STA DOLB_BUFFER_HIGH_BYTE
006E81r 1  CA              DEX
006E82r 1  86 28           STX DOLB_STOP_BOTTOM
006E84r 1  84 2A           STY DOLB_Y_CALC_POINTERH
006E86r 1  8D 21 9F        STA VERA_addr_high
006E89r 1  A9 31           LDA #$31; 4 at a time
006E8Br 1  8D 22 9F        STA VERA_addr_bank
006E8Er 1                  ; clear the buffer ...
006E8Er 1               
006E8Er 1               
006E8Er 1  18              CLC
006E8Fr 1  A9 00           LDA #0
006E91r 1  A2 78           LDX #120;120 ; do 160*120 = 19,200/4 = 4,800 iterations.. if we do 20 iterations a pop.. 240 x iterations
006E93r 1               
006E93r 1               
006E93r 1  9C 23 9F      : STZ VERA_data0 ;     trigger cache write - 4 bytes / 8px
006E96r 1  9C 23 9F        STZ VERA_data0
006E99r 1  9C 23 9F        STZ VERA_data0
006E9Cr 1  9C 23 9F        STZ VERA_data0 ; 32 px cleared
006E9Fr 1               
006E9Fr 1  9C 23 9F        STZ VERA_data0
006EA2r 1  9C 23 9F        STZ VERA_data0
006EA5r 1  9C 23 9F        STZ VERA_data0
006EA8r 1  9C 23 9F        STZ VERA_data0 ; 64 px cleared
006EABr 1               
006EABr 1  9C 23 9F        STZ VERA_data0
006EAEr 1  9C 23 9F        STZ VERA_data0
006EB1r 1  9C 23 9F        STZ VERA_data0
006EB4r 1  9C 23 9F        STZ VERA_data0 ; 96
006EB7r 1               
006EB7r 1  9C 23 9F        STZ VERA_data0
006EBAr 1  9C 23 9F        STZ VERA_data0
006EBDr 1  9C 23 9F        STZ VERA_data0
006EC0r 1  9C 23 9F        STZ VERA_data0 ; 128
006EC3r 1               
006EC3r 1  9C 23 9F        STZ VERA_data0
006EC6r 1  9C 23 9F        STZ VERA_data0
006EC9r 1  9C 23 9F        STZ VERA_data0
006ECCr 1  9C 23 9F        STZ VERA_data0 ; 160 px cleared
006ECFr 1               
006ECFr 1  18              CLC
006ED0r 1  AD 20 9F        LDA VERA_addr_low
006ED3r 1  69 50           ADC #80     ;     increment A for the low part the address
006ED5r 1  8D 20 9F        STA VERA_addr_low
006ED8r 1  AD 21 9F        LDA VERA_addr_high
006EDBr 1  69 00           ADC #0
006EDDr 1  8D 21 9F        STA VERA_addr_high
006EE0r 1               
006EE0r 1  CA              DEX
006EE1r 1  D0 B0           BNE :- ; 85 * 120 = 10,200 .. + 119 * 14 =1,666 .. 11,866 cycles to clear entire screen.. ok
006EE3r 1               
006EE3r 1  A9 E0            LDA #$E0
006EE5r 1  8D 29 9F        STA FX_CTRL
006EE8r 1               ;    STZ FX_CTRL
006EE8r 1  A9 FF           LDA #$FF
006EEAr 1  85 22           STA DOLB_ZTRACKER
006EECr 1  A9 rr           LDA #>OBJECT_LIST_Z_START_POINTERS
006EEEr 1  85 23           STA DOLB_ZTRACKERH
006EF0r 1  80 0B           BRA @GO_Z
006EF2r 1                 @DONE_Z: ; Z=0 is invalid...
006EF2r 1  9C 29 9F           STZ FX_CTRL ;     clear the cache writing for now
006EF5r 1  9C 25 9F           STZ VERA_ctrl  ;     switch back to regular mode for now..
006EF8r 1  60                 RTS
006EF9r 1                 @NEXT_Z:
006EF9r 1  C6 22              DEC DOLB_ZTRACKER
006EFBr 1  F0 F5              BEQ @DONE_Z
006EFDr 1                 @GO_Z:
006EFDr 1  B2 22              LDA (DOLB_ZTRACKER) ; get our first victim
006EFFr 1  D0 07              BNE @DO_OBJECT
006F01r 1  80 F6              BRA @NEXT_Z
006F03r 1                 @NEXT_OBJECT:
006F03r 1  BD rr rr           LDA OBJECT_LIST_BYTE6_NEXT,x
006F06r 1  F0 F1              BEQ @NEXT_Z
006F08r 1                 @DO_OBJECT:
006F08r 1  AA                 TAX      ;     get that pointer into X so we can do stuffs...
006F09r 1                     ; OK so now reference OBJECT_LIST_BYTE*,X for whatever we're drawing.. and Y is free for whatever..
006F09r 1                     ; first things first, let's figure out where in the buffer to draw.. starting with X location..
006F09r 1  BC rr rr           LDY OBJECT_LIST_BYTE3_Y,X
006F0Cr 1  BD rr rr           LDA OBJECT_LIST_BYTE2_X,X  ;
006F0Fr 1  4A                 LSR
006F10r 1  C9 50              CMP #80
006F12r 1  90 04              BCC @X_POSITIVE ; check  outside screen.. left/right...
006F14r 1  18                 CLC
006F15r 1  69 20              ADC #32 ; to <128, then to <160 of the previous Y ?
006F17r 1  88                 DEY
006F18r 1                  @X_POSITIVE:
006F18r 1  C0 78              CPY #120 ; check inside screen..
006F1Ar 1  90 41              BCC @Y_POSITIVE ;   for now, just skip if outside..
006F1Cr 1  C0 C1              CPY #193
006F1Er 1  90 E3              BCC @NEXT_OBJECT
006F20r 1  8D 20 9F           STA VERA_addr_low
006F23r 1  B2 29              LDA (DOLB_Y_CALC_POINTER)
006F25r 1  8D 21 9F           STA VERA_addr_high
006F28r 1  EE 25 9F           INC VERA_ctrl
006F2Br 1  98                 TYA
006F2Cr 1  49 FF              EOR #$FF
006F2Er 1  1A                 INC A
006F2Fr 1  0A                 ASL ; x2 bytes
006F30r 1  0A                 ASL ; x4 bytes
006F31r 1  0A                 ASL ; x8 bytes - is offset into sprite address start..
006F32r 1  85 27              STA DOLB_CALC_SCRATCH
006F34r 1  AC rr rr           LDY OBJECT_LIST_BYTE1_MODE
006F37r 1               
006F37r 1  B9 rr rr           LDA LOW_NIBBLE_HIGH,Y
006F3Ar 1  0A                 ASL
006F3Br 1  A8                 TAY
006F3Cr 1  A9 08              LDA #$08
006F3Er 1  2A                 ROL
006F3Fr 1  8D 22 9F           STA VERA_addr_bank
006F42r 1  98                 TYA
006F43r 1  BC rr rr           LDY OBJECT_LIST_BYTE0_ADDRLOW,X
006F46r 1  19 rr rr           ORA SPRITE_ADDRESS_LOW_HIGH,Y
006F49r 1  8D 21 9F           STA VERA_addr_high
006F4Cr 1  18                 CLC
006F4Dr 1  B9 rr rr           LDA SPRITE_ADDRESS_LOW_LOW,Y
006F50r 1  65 27              ADC DOLB_CALC_SCRATCH
006F52r 1  8D 20 9F           STA VERA_addr_low
006F55r 1               
006F55r 1  BD rr rr           LDA OBJECT_LIST_BYTE3_Y,X
006F58r 1  69 40              ADC #64 ; push positive..
006F5Ar 1  A8                 TAY
006F5Br 1  80 3B              BRA @Y_WAS_NEGATIVE
006F5Dr 1               
006F5Dr 1                  @Y_POSITIVE:
006F5Dr 1  79 rr rr           ADC BITMAP_OFFSETS_LOW,Y ; note how this works because carry isn't set.. ?
006F60r 1  8D 20 9F           STA VERA_addr_low
006F63r 1  B1 29              LDA (DOLB_Y_CALC_POINTER),Y ; now do the high for the dest..
006F65r 1  69 00              ADC #0
006F67r 1  8D 21 9F           STA VERA_addr_high
006F6Ar 1  EE 25 9F           INC VERA_ctrl  ;  now we need to calculate sprite source address..
006F6Dr 1  BC rr rr           LDY OBJECT_LIST_BYTE1_MODE,X
006F70r 1  B9 rr rr           LDA LOW_NIBBLE_HIGH,Y
006F73r 1  0A                 ASL
006F74r 1  A8                 TAY
006F75r 1  A9 08              LDA #$08
006F77r 1  2A                 ROL
006F78r 1  8D 22 9F           STA VERA_addr_bank
006F7Br 1  98                 TYA
006F7Cr 1  BC rr rr           LDY OBJECT_LIST_BYTE0_ADDRLOW,X
006F7Fr 1  19 rr rr           ORA SPRITE_ADDRESS_LOW_HIGH,Y
006F82r 1  8D 21 9F           STA VERA_addr_high
006F85r 1  B9 rr rr           LDA SPRITE_ADDRESS_LOW_LOW,Y
006F88r 1  8D 20 9F           STA VERA_addr_low
006F8Br 1               
006F8Br 1  38                 SEC
006F8Cr 1  A9 78              LDA #120
006F8Er 1  FD rr rr           SBC OBJECT_LIST_BYTE3_Y,X ;   want to check if screenH-Y < 64
006F91r 1  C9 41              CMP #65
006F93r 1  90 02              BCC :+
006F95r 1  A9 40              LDA #64
006F97r 1  A8               : TAY
006F98r 1                  @CHECK_ALIGN:
006F98r 1                  @Y_WAS_NEGATIVE:
006F98r 1  CE 25 9F           DEC VERA_ctrl  ;  regain dest address
006F9Br 1  AD 20 9F           LDA VERA_addr_low
006F9Er 1  29 03              AND #$03
006FA0r 1  F0 07              BEQ @DO_ZERO_RIGHT
006FA2r 1  0A                 ASL
006FA3r 1  0A                 ASL
006FA4r 1  8D 2C 9F           STA FX_MULT
006FA7r 1  D0 39              BNE @CHECK_OTHER_ALIGNS
006FA9r 1                  @DO_ZERO_RIGHT:
006FA9r 1  9C 2C 9F           STZ FX_MULT
006FACr 1  80 10              BRA :++
006FAEr 1                  :
006FAEr 1  AD 20 9F           LDA VERA_addr_low
006FB1r 1  69 98              ADC #160-8
006FB3r 1  8D 20 9F           STA VERA_addr_low
006FB6r 1  AD 21 9F           LDA VERA_addr_high
006FB9r 1  69 00              ADC #0
006FBBr 1  8D 21 9F           STA VERA_addr_high
006FBEr 1                  :
006FBEr 1  AD 24 9F           LDA VERA_data1
006FC1r 1  AD 24 9F           LDA VERA_data1
006FC4r 1  AD 24 9F           LDA VERA_data1
006FC7r 1  AD 24 9F           LDA VERA_data1
006FCAr 1  9C 23 9F           STZ VERA_data0
006FCDr 1               
006FCDr 1  AD 24 9F           LDA VERA_data1
006FD0r 1  AD 24 9F           LDA VERA_data1
006FD3r 1  AD 24 9F           LDA VERA_data1
006FD6r 1  AD 24 9F           LDA VERA_data1
006FD9r 1  9C 23 9F           STZ VERA_data0
006FDCr 1  88                 DEY
006FDDr 1  D0 CF              BNE :--
006FDFr 1  4C rr rr           JMP @NEXT_OBJECT
006FE2r 1                  @CHECK_OTHER_ALIGNS:
006FE2r 1  C9 08              CMP #8   ;  is either 4,8,12
006FE4r 1  90 16              BCC @DO_ONE_RIGHT
006FE6r 1  F0 4F              BEQ @DO_TWO_RIGHT
006FE8r 1  18                 CLC
006FE9r 1  4C rr rr           JMP @DO_THREE_RIGHT
006FECr 1                   :
006FECr 1  AD 20 9F           LDA VERA_addr_low
006FEFr 1  69 94              ADC #160-12
006FF1r 1  8D 20 9F           STA VERA_addr_low
006FF4r 1  AD 21 9F           LDA VERA_addr_high
006FF7r 1  69 00              ADC #0
006FF9r 1  8D 21 9F           STA VERA_addr_high
006FFCr 1                  @DO_ONE_RIGHT:
006FFCr 1  AD 24 9F           LDA VERA_data1
006FFFr 1  AD 24 9F           LDA VERA_data1
007002r 1  AD 24 9F           LDA VERA_data1
007005r 1  A9 03              LDA #%00000011
007007r 1  8D 23 9F           STA VERA_data0
00700Ar 1               
00700Ar 1  AD 24 9F           LDA VERA_data1
00700Dr 1  AD 24 9F           LDA VERA_data1
007010r 1  AD 24 9F           LDA VERA_data1
007013r 1  AD 24 9F           LDA VERA_data1
007016r 1  9C 23 9F           STZ VERA_data0
007019r 1               
007019r 1  AD 24 9F           LDA VERA_data1
00701Cr 1  A9 FC              LDA #%11111100
00701Er 1  8D 23 9F           STA VERA_data0
007021r 1  88                 DEY
007022r 1  D0 C8              BNE :-
007024r 1  4C rr rr           JMP @NEXT_OBJECT
007027r 1               
007027r 1                   :
007027r 1  AD 20 9F           LDA VERA_addr_low
00702Ar 1  69 94              ADC #160-12
00702Cr 1  8D 20 9F           STA VERA_addr_low
00702Fr 1  AD 21 9F           LDA VERA_addr_high
007032r 1  69 00              ADC #0
007034r 1  8D 21 9F           STA VERA_addr_high
007037r 1                  @DO_TWO_RIGHT:
007037r 1  AD 24 9F           LDA VERA_data1
00703Ar 1  AD 24 9F           LDA VERA_data1
00703Dr 1  A9 0F              LDA #%00001111
00703Fr 1  8D 23 9F           STA VERA_data0
007042r 1               
007042r 1  AD 24 9F           LDA VERA_data1
007045r 1  AD 24 9F           LDA VERA_data1
007048r 1  AD 24 9F           LDA VERA_data1
00704Br 1  AD 24 9F           LDA VERA_data1
00704Er 1  9C 23 9F           STZ VERA_data0
007051r 1               
007051r 1  AD 24 9F           LDA VERA_data1
007054r 1  AD 24 9F           LDA VERA_data1
007057r 1  A9 F0              LDA #%11110000
007059r 1  8D 23 9F           STA VERA_data0
00705Cr 1  88                 DEY
00705Dr 1  D0 C8              BNE :-
00705Fr 1  4C rr rr           JMP @NEXT_OBJECT
007062r 1               
007062r 1                   :
007062r 1  AD 20 9F           LDA VERA_addr_low
007065r 1  69 94              ADC #160-12
007067r 1  8D 20 9F           STA VERA_addr_low
00706Ar 1  AD 21 9F           LDA VERA_addr_high
00706Dr 1  69 00              ADC #0
00706Fr 1  8D 21 9F           STA VERA_addr_high
007072r 1                  @DO_THREE_RIGHT:
007072r 1  AD 24 9F           LDA VERA_data1
007075r 1  A9 3F              LDA #%00111111
007077r 1  8D 23 9F           STA VERA_data0
00707Ar 1               
00707Ar 1  AD 24 9F           LDA VERA_data1
00707Dr 1  AD 24 9F           LDA VERA_data1
007080r 1  AD 24 9F           LDA VERA_data1
007083r 1  AD 24 9F           LDA VERA_data1
007086r 1  9C 23 9F           STZ VERA_data0
007089r 1               
007089r 1  AD 24 9F           LDA VERA_data1
00708Cr 1  AD 24 9F           LDA VERA_data1
00708Fr 1  AD 24 9F           LDA VERA_data1
007092r 1  A9 C0              LDA #%11000000
007094r 1  8D 23 9F           STA VERA_data0
007097r 1  88                 DEY
007098r 1  D0 C8              BNE :-
00709Ar 1  4C rr rr           JMP @NEXT_OBJECT
00709Dr 1               
00709Dr 1               
00709Dr 1               test_optimal_pal_data:
00709Dr 1               ;      GB   R  $1:FA00-$1:FBFF   VERA Color Palette (256 x 2 bytes)
00709Dr 1  00 00        .byte $00,$00  ; 0 - black/transparent
00709Fr 1  C8 0F        .byte $c8,$0f  ; 1 #ffcc88
0070A1r 1  04 06        .byte $04,$06  ; 2 #660044
0070A3r 1  00 0C        .byte $00,$0C  ; 3  #cc0000
0070A5r 1  F0 0C        .byte $F0,$0C  ; 4#ccff00
0070A7r 1  42 03        .byte $42,$03
0070A9r 1  60 0C        .byte $60,$0c   ; 6  #cc6600
0070ABr 1  40 08        .byte $40,$08   ; 7 #884400
0070ADr 1  C0 0C        .byte $c0,$0c   ; 8 #cccc00
0070AFr 1  6A 02        .byte $6a,$02   ; 9 #2266aa mid blue
0070B1r 1  C0 00        .byte $c0,$00   ; A #00cc00
0070B3r 1  AC 07        .byte $ac,$07   ; B #77aacc light blue
0070B5r 1  C0 00        .byte $c0,$00   ; C #0000c0 dark blue
0070B7r 1  0C 0C        .byte $0c,$0c   ; D #cc00cc
0070B9r 1  88 08        .byte $88,$08   ; E #888888
0070BBr 1  22 02        .byte $22,$02   ; F #222222
0070BDr 1               
0070BDr 1               test_vram_data:
0070BDr 1               ; 70 to 127 - start of 16x16 (each 128 byte) for testing directions / sizing..
0070BDr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11  ;  0-15 16x10 -  0
0070C1r 1  11 11 11 11  
0070C5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
0070C9r 1  FF FF FF F1  
0070CDr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0070D1r 1  FF FF FF F1  
0070D5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0070D9r 1  FF FF FF F1  
0070DDr 1  1F FF FF F1  .byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$F1
0070E1r 1  FF FF FF F1  
0070E5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0070E9r 1  FF FF FF F1  
0070EDr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0070F1r 1  FF FF FF F1  
0070F5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0070F9r 1  FF FF FF F1  
0070FDr 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
007101r 1  FF FF FF F1  
007105r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11
007109r 1  11 11 11 11  
00710Dr 1  55 55 55 55  .repeat 54
007111r 1  55 55 55 55  
007115r 1  55 55 55 55  
0072BDr 1               .res 8,$55
0072BDr 1               .endrepeat
0072BDr 1               
0072BDr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11  ;  16-31    16x10 -  0 trans
0072C1r 1  11 11 11 11  
0072C5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0072C9r 1  F0 F0 F0 F1  
0072CDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
0072D1r 1  0F 0F 0F 01  
0072D5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0072D9r 1  F0 F0 F0 F1  
0072DDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
0072E1r 1  0F 0F 0F 01  
0072E5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0072E9r 1  F0 F0 F0 F1  
0072EDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
0072F1r 1  0F 0F 0F 01  
0072F5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0072F9r 1  F0 F0 F0 F1  
0072FDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
007301r 1  0F 0F 0F 01  
007305r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11
007309r 1  11 11 11 11  
00730Dr 1  50 50 50 50  .repeat 27
007311r 1  50 50 50 50  
007315r 1  05 05 05 05  
0074BDr 1               .res 8,$50
0074BDr 1               .res 8,$05
0074BDr 1               .endrepeat
0074BDr 1               
0074BDr 1               
0074BDr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11  ;  32-47    16x11 -  4
0074C1r 1  11 11 11 11  
0074C5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
0074C9r 1  FF FF FF F1  
0074CDr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0074D1r 1  FF FF FF F1  
0074D5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0074D9r 1  FF FF FF F1  
0074DDr 1  1F FF FF F1  .byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$F1
0074E1r 1  FF FF FF F1  
0074E5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0074E9r 1  FF FF FF F1  
0074EDr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0074F1r 1  FF FF FF F1  
0074F5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0074F9r 1  FF FF FF F1  
0074FDr 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
007501r 1  FF FF FF F1  
007505r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
007509r 1  FF FF FF F1  
00750Dr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11
007511r 1  11 11 11 11  
007515r 1  55 55 55 55  .repeat 53
007519r 1  55 55 55 55  
00751Dr 1  55 55 55 55  
0076BDr 1               .res 8,$55
0076BDr 1               .endrepeat
0076BDr 1               
0076BDr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11  ;  48-63    16x11 -  4 trans
0076C1r 1  11 11 11 11  
0076C5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0076C9r 1  F0 F0 F0 F1  
0076CDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
0076D1r 1  0F 0F 0F 01  
0076D5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0076D9r 1  F0 F0 F0 F1  
0076DDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
0076E1r 1  0F 0F 0F 01  
0076E5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0076E9r 1  F0 F0 F0 F1  
0076EDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
0076F1r 1  0F 0F 0F 01  
0076F5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0076F9r 1  F0 F0 F0 F1  
0076FDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
007701r 1  0F 0F 0F 01  
007705r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
007709r 1  F0 F0 F0 F1  
00770Dr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11
007711r 1  11 11 11 11  
007715r 1  05 05 05 05  .res 7,$05
007719r 1  05 05 05     
00771Cr 1  00           .byte 0
00771Dr 1  50 50 50 50  .repeat 26
007721r 1  50 50 50 50  
007725r 1  05 05 05 05  
0078BDr 1               .res 8,$50
0078BDr 1               .res 7,$05
0078BDr 1               .byte 0
0078BDr 1               .endrepeat
0078BDr 1               
0078BDr 1               
0078BDr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10  ;  64-79    15x11 - 10
0078C1r 1  11 11 11 10  
0078C5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
0078C9r 1  FF FF FF 10  
0078CDr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
0078D1r 1  FF FF FF 10  
0078D5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
0078D9r 1  FF FF FF 10  
0078DDr 1  1F FF FF F1  .byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$10
0078E1r 1  FF FF FF 10  
0078E5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
0078E9r 1  FF FF FF 10  
0078EDr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
0078F1r 1  FF FF FF 10  
0078F5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
0078F9r 1  FF FF FF 10  
0078FDr 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
007901r 1  FF FF FF 10  
007905r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
007909r 1  FF FF FF 10  
00790Dr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
007911r 1  11 11 11 10  
007915r 1  55 55 55 55  .repeat 53
007919r 1  55 55 55 50  
00791Dr 1  55 55 55 55  
007ABDr 1               .res 7,$55
007ABDr 1               .byte $50
007ABDr 1               .endrepeat
007ABDr 1               
007ABDr 1               
007ABDr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10  ;  80-95    15x11 - 10 trans
007AC1r 1  11 11 11 10  
007AC5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
007AC9r 1  F0 F0 F0 10  
007ACDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
007AD1r 1  0F 0F 0F 10  
007AD5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
007AD9r 1  F0 F0 F0 10  
007ADDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
007AE1r 1  0F 0F 0F 10  
007AE5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
007AE9r 1  F0 F0 F0 10  
007AEDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
007AF1r 1  0F 0F 0F 10  
007AF5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
007AF9r 1  F0 F0 F0 10  
007AFDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
007B01r 1  0F 0F 0F 10  
007B05r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
007B09r 1  F0 F0 F0 10  
007B0Dr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
007B11r 1  11 11 11 10  
007B15r 1  05 05 05 05  .res 7,$05
007B19r 1  05 05 05     
007B1Cr 1  00           .byte 0
007B1Dr 1  50 50 50 50  .repeat 26
007B21r 1  50 50 50 50  
007B25r 1  05 05 05 05  
007CBDr 1               .res 8,$50
007CBDr 1               .res 7,$05
007CBDr 1               .byte 0
007CBDr 1               .endrepeat
007CBDr 1               
007CBDr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10  ;  96-111    15x12 - 18
007CC1r 1  11 11 11 10  
007CC5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
007CC9r 1  FF FF FF 10  
007CCDr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
007CD1r 1  FF FF FF 10  
007CD5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
007CD9r 1  FF FF FF 10  
007CDDr 1  1F FF FF F1  .byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$10
007CE1r 1  FF FF FF 10  
007CE5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
007CE9r 1  FF FF FF 10  
007CEDr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
007CF1r 1  FF FF FF 10  
007CF5r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
007CF9r 1  FF FF FF 10  
007CFDr 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
007D01r 1  FF FF FF 10  
007D05r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
007D09r 1  FF FF FF 10  
007D0Dr 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
007D11r 1  FF FF FF 10  
007D15r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
007D19r 1  11 11 11 10  
007D1Dr 1  55 55 55 55  .repeat 52
007D21r 1  55 55 55 50  
007D25r 1  55 55 55 55  
007EBDr 1               .res 7,$55
007EBDr 1               .byte $50
007EBDr 1               .endrepeat
007EBDr 1               
007EBDr 1               
007EBDr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10  ;  112-127    15x12 - 18 trans
007EC1r 1  11 11 11 10  
007EC5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
007EC9r 1  F0 F0 F0 10  
007ECDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
007ED1r 1  0F 0F 0F 10  
007ED5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
007ED9r 1  F0 F0 F0 10  
007EDDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
007EE1r 1  0F 0F 0F 10  
007EE5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
007EE9r 1  F0 F0 F0 10  
007EEDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
007EF1r 1  0F 0F 0F 10  
007EF5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
007EF9r 1  F0 F0 F0 10  
007EFDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
007F01r 1  0F 0F 0F 10  
007F05r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
007F09r 1  F0 F0 F0 10  
007F0Dr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
007F11r 1  0F 0F 0F 10  
007F15r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
007F19r 1  11 11 11 10  
007F1Dr 1  50 50 50 50  .repeat 26
007F21r 1  50 50 50 50  
007F25r 1  05 05 05 05  
0080BDr 1               .res 8,$50
0080BDr 1               .res 7,$05
0080BDr 1               .byte 0
0080BDr 1               .endrepeat
0080BDr 1               
0080BDr 1               ; alernate tile graphic to use for tub wall .. 128-143 ; 16x tile
0080BDr 1  16 16 16 16  .repeat 32
0080C1r 1  16 16 16 16  
0080C5r 1  61 61 61 61  
0082BDr 1                   .byte $16, $16, $16, $16, $16, $16, $16, $16
0082BDr 1                   .byte $61, $61, $61, $61, $61, $61, $61, $61
0082BDr 1               .endrepeat
0082BDr 1               
0082BDr 1  10 10 10 10  .repeat 32  ;  144-159
0082C1r 1  10 10 10 10  
0082C5r 1  06 06 06 06  
0084BDr 1                   .byte $10, $10, $10, $10, $10, $10, $10, $10
0084BDr 1                   .byte $06, $06, $06, $06, $06, $06, $06, $06
0084BDr 1               .endrepeat
0084BDr 1               
0084BDr 1               
0084BDr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$00  ;  160-175    14x12
0084C1r 1  11 11 11 00  
0084C5r 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$fF,$FF,$F1,$00
0084C9r 1  FF FF F1 00  
0084CDr 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$fF,$FF,$F1,$00
0084D1r 1  FF FF F1 00  
0084D5r 1  1F FF FF FF  .byte $1f,$FF,$ff,$Ff,$Ff,$fF,$F1,$00
0084D9r 1  FF FF F1 00  
0084DDr 1  1F FF FF F1  .byte $1f,$FF,$FF,$f1,$fF,$FF,$F1,$00
0084E1r 1  FF FF F1 00  
0084E5r 1  1F FF FF FF  .byte $1f,$FF,$FF,$Ff,$Ff,$fF,$F1,$00
0084E9r 1  FF FF F1 00  
0084EDr 1  1F FF FF FF  .byte $1f,$FF,$FF,$fF,$FF,$FF,$F1,$00
0084F1r 1  FF FF F1 00  
0084F5r 1  1F FF FF FF  .byte $1f,$FF,$FF,$fF,$FF,$FF,$F1,$00
0084F9r 1  FF FF F1 00  
0084FDr 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$FF,$FF,$F1,$00
008501r 1  FF FF F1 00  
008505r 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$FF,$FF,$F1,$00
008509r 1  FF FF F1 00  
00850Dr 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$FF,$FF,$F1,$00
008511r 1  FF FF F1 00  
008515r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$00
008519r 1  11 11 11 00  
00851Dr 1  55 55 55 55  .repeat 52
008521r 1  55 55 55 00  
008525r 1  55 55 55 55  
0086BDr 1               .res 7,$55
0086BDr 1               .byte 0
0086BDr 1               .endrepeat
0086BDr 1               
0086BDr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$00  ;  176-191
0086C1r 1  11 11 11 00  
0086C5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0086C9r 1  F0 F0 F0 10  
0086CDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0086D1r 1  0F 0F 0F 10  
0086D5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0086D9r 1  F0 F0 F0 10  
0086DDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0086E1r 1  0F 0F 0F 10  
0086E5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0086E9r 1  F0 F0 F0 10  
0086EDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0086F1r 1  0F 0F 0F 10  
0086F5r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0086F9r 1  F0 F0 F0 10  
0086FDr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
008701r 1  0F 0F 0F 10  
008705r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
008709r 1  F0 F0 F0 10  
00870Dr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
008711r 1  0F 0F 0F 10  
008715r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
008719r 1  11 11 11 10  
00871Dr 1  50 50 50 50  .repeat 26
008721r 1  50 50 50 50  
008725r 1  05 05 05 05  
0088BDr 1               .res 8,$50
0088BDr 1               .res 7,$05
0088BDr 1               .byte 0
0088BDr 1               .endrepeat
0088BDr 1               
0088BDr 1               ; alernate tile graphic to use for tub wall .. 192-223 ; 15x tile
0088BDr 1  16 16 16 16  .repeat 32
0088C1r 1  16 16 16 10  
0088C5r 1  61 61 61 61  
008ABDr 1                   .byte $16, $16, $16, $16, $16, $16, $16, $10
008ABDr 1                   .byte $61, $61, $61, $61, $61, $61, $61, $60
008ABDr 1               .endrepeat
008ABDr 1               
008ABDr 1  10 10 10 10  .repeat 32  ;  144-159
008AC1r 1  10 10 10 10  
008AC5r 1  06 06 06 06  
008CBDr 1                   .byte $10, $10, $10, $10, $10, $10, $10, $10
008CBDr 1                   .byte $06, $06, $06, $06, $06, $06, $06, $00
008CBDr 1               .endrepeat
008CBDr 1               
008CBDr 1               
008CBDr 1               ; alernate tile graphic to use for tub wall .. 224 ; 14x tile
008CBDr 1  16 16 16 16  .repeat 32
008CC1r 1  16 16 16 00  
008CC5r 1  61 61 61 61  
008EBDr 1                   .byte $16, $16, $16, $16, $16, $16, $16, $00
008EBDr 1                   .byte $61, $61, $61, $61, $61, $61, $61, $00
008EBDr 1               .endrepeat
008EBDr 1               
008EBDr 1  10 10 10 10  .repeat 32  ;  144-159
008EC1r 1  10 10 10 00  
008EC5r 1  06 06 06 06  
0090BDr 1                   .byte $10, $10, $10, $10, $10, $10, $10, $00
0090BDr 1                   .byte $06, $06, $06, $06, $06, $06, $06, $00
0090BDr 1               .endrepeat
0090BDr 1               
0090BDr 1               
0090BDr 1               
0090BDr 1               HEX_DISPLAY_FONT:       ; 8x8x16 color = 32 bytes ... sprite addr 256
0090BDr 1               ;     01   23   45   67
0090BDr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 0
0090C1r 1  01 00 00 10  .byte $01, $00, $00, $10
0090C5r 1  01 00 00 10  .byte $01, $00, $00, $10
0090C9r 1  00 00 00 00  .byte $00, $00, $00, $00
0090CDr 1  01 00 00 10  .byte $01, $00, $00, $10
0090D1r 1  01 00 00 10  .byte $01, $00, $00, $10
0090D5r 1  01 00 00 10  .byte $01, $00, $00, $10
0090D9r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 0 /
0090DDr 1               
0090DDr 1  00 00 00 00  .byte $00, $00, $00, $00 ; 1
0090E1r 1  00 00 00 10  .byte $00, $00, $00, $10
0090E5r 1  00 00 00 10  .byte $00, $00, $00, $10
0090E9r 1  00 00 00 00  .byte $00, $00, $00, $00
0090EDr 1  00 00 00 10  .byte $00, $00, $00, $10
0090F1r 1  00 00 00 10  .byte $00, $00, $00, $10
0090F5r 1  00 00 00 10  .byte $00, $00, $00, $10
0090F9r 1  00 00 00 00  .byte $00, $00, $00, $00
0090FDr 1               
0090FDr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 2
009101r 1  00 00 00 10  .byte $00, $00, $00, $10
009105r 1  00 00 00 10  .byte $00, $00, $00, $10
009109r 1  00 11 11 00  .byte $00, $11, $11, $00
00910Dr 1  01 00 00 00  .byte $01, $00, $00, $00
009111r 1  01 00 00 00  .byte $01, $00, $00, $00
009115r 1  01 00 00 00  .byte $01, $00, $00, $00
009119r 1  00 11 11 00  .byte $00, $11, $11, $00
00911Dr 1               
00911Dr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 3
009121r 1  00 00 00 10  .byte $00, $00, $00, $10
009125r 1  00 00 00 10  .byte $00, $00, $00, $10
009129r 1  00 11 11 00  .byte $00, $11, $11, $00
00912Dr 1  00 00 00 10  .byte $00, $00, $00, $10
009131r 1  00 00 00 10  .byte $00, $00, $00, $10
009135r 1  00 00 00 10  .byte $00, $00, $00, $10
009139r 1  00 11 11 00  .byte $00, $11, $11, $00
00913Dr 1               
00913Dr 1  00 00 00 00  .byte $00, $00, $00, $00   ; 4
009141r 1  01 00 00 10  .byte $01, $00, $00, $10
009145r 1  01 00 00 10  .byte $01, $00, $00, $10
009149r 1  00 11 11 00  .byte $00, $11, $11, $00
00914Dr 1  00 00 00 10  .byte $00, $00, $00, $10
009151r 1  00 00 00 10  .byte $00, $00, $00, $10
009155r 1  00 00 00 10  .byte $00, $00, $00, $10
009159r 1  00 00 00 00  .byte $00, $00, $00, $00
00915Dr 1               
00915Dr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 5
009161r 1  01 00 00 00  .byte $01, $00, $00, $00
009165r 1  01 00 00 00  .byte $01, $00, $00, $00
009169r 1  00 11 11 00  .byte $00, $11, $11, $00
00916Dr 1  00 00 00 10  .byte $00, $00, $00, $10
009171r 1  00 00 00 10  .byte $00, $00, $00, $10
009175r 1  00 00 00 10  .byte $00, $00, $00, $10
009179r 1  00 11 11 00  .byte $00, $11, $11, $00
00917Dr 1               
00917Dr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 6
009181r 1  01 00 00 00  .byte $01, $00, $00, $00
009185r 1  01 00 00 00  .byte $01, $00, $00, $00
009189r 1  00 11 11 00  .byte $00, $11, $11, $00
00918Dr 1  01 00 00 10  .byte $01, $00, $00, $10
009191r 1  01 00 00 10  .byte $01, $00, $00, $10
009195r 1  01 00 00 10  .byte $01, $00, $00, $10
009199r 1  00 11 11 00  .byte $00, $11, $11, $00
00919Dr 1               
00919Dr 1  00 01 01 00  .byte $00, $01, $01, $00 ; 7
0091A1r 1  00 00 00 10  .byte $00, $00, $00, $10
0091A5r 1  00 00 00 10  .byte $00, $00, $00, $10
0091A9r 1  00 00 00 00  .byte $00, $00, $00, $00
0091ADr 1  00 00 00 10  .byte $00, $00, $00, $10
0091B1r 1  00 00 00 10  .byte $00, $00, $00, $10
0091B5r 1  00 00 00 10  .byte $00, $00, $00, $10
0091B9r 1  00 00 00 00  .byte $00, $00, $00, $00
0091BDr 1               
0091BDr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 8
0091C1r 1  01 00 00 10  .byte $01, $00, $00, $10
0091C5r 1  01 00 00 10  .byte $01, $00, $00, $10
0091C9r 1  00 11 11 00  .byte $00, $11, $11, $00
0091CDr 1  01 00 00 10  .byte $01, $00, $00, $10
0091D1r 1  01 00 00 10  .byte $01, $00, $00, $10
0091D5r 1  01 00 00 10  .byte $01, $00, $00, $10
0091D9r 1  00 11 11 00  .byte $00, $11, $11, $00
0091DDr 1               
0091DDr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 9
0091E1r 1  01 00 00 10  .byte $01, $00, $00, $10
0091E5r 1  01 00 00 10  .byte $01, $00, $00, $10
0091E9r 1  00 11 11 00  .byte $00, $11, $11, $00
0091EDr 1  00 00 00 10  .byte $00, $00, $00, $10
0091F1r 1  00 00 00 10  .byte $00, $00, $00, $10
0091F5r 1  00 00 00 10  .byte $00, $00, $00, $10
0091F9r 1  00 11 11 00  .byte $00, $11, $11, $00
0091FDr 1               
0091FDr 1  00 11 11 00  .byte $00, $11, $11, $00   ; A
009201r 1  01 00 00 10  .byte $01, $00, $00, $10
009205r 1  01 00 00 10  .byte $01, $00, $00, $10
009209r 1  00 11 11 00  .byte $00, $11, $11, $00
00920Dr 1  01 00 00 10  .byte $01, $00, $00, $10
009211r 1  01 00 00 10  .byte $01, $00, $00, $10
009215r 1  01 00 00 10  .byte $01, $00, $00, $10
009219r 1  00 00 00 00  .byte $00, $00, $00, $00
00921Dr 1               
00921Dr 1               
00921Dr 1  00 00 00 00  .byte $00, $00, $00, $00   ; B
009221r 1  01 00 00 00  .byte $01, $00, $00, $00
009225r 1  01 00 00 00  .byte $01, $00, $00, $00
009229r 1  00 11 11 00  .byte $00, $11, $11, $00
00922Dr 1  01 00 00 10  .byte $01, $00, $00, $10
009231r 1  01 00 00 10  .byte $01, $00, $00, $10
009235r 1  01 00 00 10  .byte $01, $00, $00, $10
009239r 1  00 11 11 00  .byte $00, $11, $11, $00
00923Dr 1               
00923Dr 1  00 11 11 00  .byte $00, $11, $11, $00   ; C
009241r 1  01 00 00 00  .byte $01, $00, $00, $00
009245r 1  01 00 00 00  .byte $01, $00, $00, $00
009249r 1  00 00 00 00  .byte $00, $00, $00, $00
00924Dr 1  01 00 00 00  .byte $01, $00, $00, $00
009251r 1  01 00 00 00  .byte $01, $00, $00, $00
009255r 1  01 00 00 00  .byte $01, $00, $00, $00
009259r 1  00 11 11 00  .byte $00, $11, $11, $00
00925Dr 1               
00925Dr 1  00 00 00 00  .byte $00, $00, $00, $00   ; D
009261r 1  00 00 00 10  .byte $00, $00, $00, $10
009265r 1  00 00 00 10  .byte $00, $00, $00, $10
009269r 1  00 11 11 00  .byte $00, $11, $11, $00
00926Dr 1  01 00 00 10  .byte $01, $00, $00, $10
009271r 1  01 00 00 10  .byte $01, $00, $00, $10
009275r 1  01 00 00 10  .byte $01, $00, $00, $10
009279r 1  00 11 11 00  .byte $00, $11, $11, $00
00927Dr 1               
00927Dr 1  00 11 11 00  .byte $00, $11, $11, $00   ; E
009281r 1  01 00 00 00  .byte $01, $00, $00, $00
009285r 1  01 00 00 00  .byte $01, $00, $00, $00
009289r 1  00 11 11 00  .byte $00, $11, $11, $00
00928Dr 1  01 00 00 00  .byte $01, $00, $00, $00
009291r 1  01 00 00 00  .byte $01, $00, $00, $00
009295r 1  01 00 00 00  .byte $01, $00, $00, $00
009299r 1  00 11 11 00  .byte $00, $11, $11, $00
00929Dr 1               
00929Dr 1  00 11 11 00  .byte $00, $11, $11, $00   ; F   sprite addr 48
0092A1r 1  01 00 00 00  .byte $01, $00, $00, $00
0092A5r 1  01 00 00 00  .byte $01, $00, $00, $00
0092A9r 1  00 11 11 00  .byte $00, $11, $11, $00
0092ADr 1  01 00 00 00  .byte $01, $00, $00, $00
0092B1r 1  01 00 00 00  .byte $01, $00, $00, $00
0092B5r 1  01 00 00 00  .byte $01, $00, $00, $00
0092B9r 1  00 00 00 00  .byte $00, $00, $00, $00
0092BDr 1               
0092BDr 1               ; test circle thing ... 16.. 16x16 - 128 bytes..
0092BDr 1  00 00 00 AA  .byte $00, $00, $00, $AA, $AA, $00, $00, $00
0092C1r 1  AA 00 00 00  
0092C5r 1  00 00 AA AA  .byte $00, $00, $AA, $AA, $AA, $AA, $00, $00
0092C9r 1  AA AA 00 00  
0092CDr 1  00 0A AA AA  .byte $00, $0A, $AA, $AA, $AA, $AA, $A0, $00
0092D1r 1  AA AA A0 00  
0092D5r 1  00 AA AA AA  .byte $00, $AA, $AA, $AA, $AA, $AA, $AA, $00
0092D9r 1  AA AA AA 00  
0092DDr 1  0A AA AA AA  .byte $0A, $AA, $AA, $AA, $AA, $AA, $AA, $A0
0092E1r 1  AA AA AA A0  
0092E5r 1  0A AA AA AA  .byte $0A, $AA, $AA, $AA, $AA, $AA, $AA, $A0
0092E9r 1  AA AA AA A0  
0092EDr 1  AA AA AA AA  .byte $AA, $AA, $AA, $AA, $AA, $AA, $AA, $AA
0092F1r 1  AA AA AA AA  
0092F5r 1  AA AA AA AA  .byte $AA, $AA, $AA, $AA, $AA, $AA, $AA, $AA
0092F9r 1  AA AA AA AA  
0092FDr 1  AA AA AA AA  .byte $AA, $AA, $AA, $AA, $AA, $AA, $AA, $AA
009301r 1  AA AA AA AA  
009305r 1  AA AA AA AA  .byte $AA, $AA, $AA, $AA, $AA, $AA, $AA, $AA
009309r 1  AA AA AA AA  
00930Dr 1  0A AA AA AA  .byte $0A, $AA, $AA, $AA, $AA, $AA, $AA, $A0
009311r 1  AA AA AA A0  
009315r 1  0A AA AA AA  .byte $0A, $AA, $AA, $AA, $AA, $AA, $AA, $A0
009319r 1  AA AA AA A0  
00931Dr 1  00 AA AA AA  .byte $00, $AA, $AA, $AA, $AA, $AA, $AA, $00
009321r 1  AA AA AA 00  
009325r 1  00 0A AA AA  .byte $00, $0A, $AA, $AA, $AA, $AA, $A0, $00
009329r 1  AA AA A0 00  
00932Dr 1  00 00 AA AA  .byte $00, $00, $AA, $AA, $AA, $AA, $00, $00
009331r 1  AA AA 00 00  
009335r 1  00 00 00 AA  .byte $00, $00, $00, $AA, $AA, $00, $00, $00
009339r 1  AA 00 00 00  
00933Dr 1               
00933Dr 1  00 00 00 00  .res 384,0
009341r 1  00 00 00 00  
009345r 1  00 00 00 00  
00933Dr 1               
