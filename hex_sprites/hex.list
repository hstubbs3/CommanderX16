ca65 V2.19 - Git 8e6c0c1
Main file   : hex.s
Current file: hex.s

000000r 1               ; 	080D
000000r 1  4C rr rr     jmp start ; 	3 bytes
000003r 1               ;	0810 	- 240 bytes available for stuff that doesn't need alignment
000003r 1  DE AD BE EF  .repeat 28
000007r 1  DE AD BE EF  
00000Br 1  DE AD BE EF  
000073r 1               	.byte $DE,$AD,$BE,$EF
000073r 1               .endrepeat
000073r 1               SCRATCH128:
000073r 1  DE AD BE EF  .repeat 32
000077r 1  DE AD BE EF  
00007Br 1  DE AD BE EF  
0000F3r 1               	.byte $DE,$AD,$BE,$EF
0000F3r 1               .endrepeat
0000F3r 1               
0000F3r 1               ACROSS_ROW_X_L: ; 0900  16 wide , 45* tilt ... this is added to go up row, sub for down row
0000F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0000F3r 1  00 FE FB F4  .byte
0000F7r 1  EC E1 D3 C3  
0000FBr 1  B1 9C 85 6B  
0001F3r 1               
0001F3r 1               ACROSS_ROW_X_H: ; 0A00
0001F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0001F3r 1  10 0F 0F 0F  .byte $10, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $E, $E, $E, $E, $E, $E, $D, $D, $D, $D, $D, $C, $C, $C, $C, $B, $B, $B, $B, $A, $A, $A, $9, $9, $9, $8, $8, $8, $7, $7, $7, $6, $6, $6, $5, $5, $5, $4, $4, $3, $3, $3, $2, $2, $1, $1, $1, $0, $0, $0, $FF, $FF, $FE, $FE, $FE, $FD, $FD, $FC, $FC, $FC, $FB, $FB, $FA, $FA, $FA, $F9, $F9, $F9, $F8, $F8, $F8, $F7, $F7, $F7, $F6, $F6, $F6, $F5, $F5, $F5, $F4, $F4, $F4, $F4, $F3, $F3, $F3, $F3, $F2, $F2, $F2, $F2, $F2, $F1, $F1, $F1, $F1, $F1, $F1, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F1, $F1, $F1, $F1, $F1, $F1, $F2, $F2, $F2, $F2, $F2, $F3, $F3, $F3, $F3, $F4, $F4, $F4, $F4, $F5, $F5, $F5, $F6, $F6, $F6, $F7, $F7, $F7, $F8, $F8, $F8, $F9, $F9, $F9, $FA, $FA, $FA, $FB, $FB, $FC, $FC, $FC, $FD, $FD, $FE, $FE, $FE, $FF, $FF, $00, $0, $0, $1, $1, $1, $2, $2, $3, $3, $3, $4, $4, $5, $5, $5, $6, $6, $6, $7, $7, $7, $8, $8, $8, $9, $9, $9, $A, $A, $A, $B, $B, $B, $B, $C, $C, $C, $C, $D, $D, $D, $D, $D, $E, $E, $E, $E, $E, $E, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F
0001F7r 1  0F 0F 0F 0F  
0001FBr 1  0F 0F 0F 0F  
0002F3r 1               
0002F3r 1               ACROSS_ROW_Y_L: ; 0B00
0002F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0002F3r 1  00 B8 71 2A  .byte $0,$B8,$71,$2A,$E4,$9D,$57,$10,$CA,$85,$40,$FB,$B7,$73,$30,$ED,$AB,$6A,$29,$E9,$AA,$6C,$2E,$F2,$B6,$7C,$42,$A,$D2,$9C,$66,$32,$0,$CE,$9D,$6E,$41,$14,$E9,$C0,$97,$71,$4B,$27,$5,$E4,$C5,$A8,$8C,$71,$58,$41,$2C,$18,$6,$F6,$E7,$DA,$CF,$C5,$BD,$B7,$B3,$B0,$AF,$B0,$B3,$B7,$BD,$C5,$CF,$DA,$E7,$F6,$6,$18,$2C,$41,$58,$71,$8C,$A8,$C5,$E4,$5,$27,$4B,$71,$97,$C0,$E9,$14,$41,$6E,$9D,$CE,$0,$32,$66,$9C,$D2,$A,$42,$7C,$B6,$F2,$2E,$6C,$AA,$E9,$29,$6A,$AB,$ED,$30,$73,$B7,$FB,$40,$85,$CA,$10,$57,$9D,$E4,$2A,$71,$B8,$0,$47,$8E,$D5,$1B,$62,$A8,$EF,$35,$7A,$BF,$4,$48,$8C,$CF,$12,$54,$95,$D6,$16,$55,$93,$D1,$D,$49,$83,$BD,$F5,$2D,$63,$99,$CD,$0,$31,$62,$91,$BE,$EB,$16,$3F,$68,$8E,$B4,$D8,$FA,$1B,$3A,$57,$73,$8E,$A7,$BE,$D3,$E7,$F9,$9,$18,$25,$30,$3A,$42,$48,$4C,$4F,$50,$4F,$4C,$48,$42,$3A,$30,$25,$18,$9,$F9,$E7,$D3,$BE,$A7,$8E,$73,$57,$3A,$1B,$FA,$D8,$B4,$8E,$68,$3F,$16,$EB,$BE,$91,$62,$31,$0,$CD,$99,$63,$2D,$F5,$BD,$83,$49,$D,$D1,$93,$55,$16,$D6,$95,$54,$12,$CF,$8C,$48,$4,$BF,$7A,$35,$EF,$A8,$62,$1B,$D5,$8E,$47
0002F7r 1  E4 9D 57 10  
0002FBr 1  CA 85 40 FB  
0003F3r 1               
0003F3r 1               ACROSS_ROW_Y_H: ; 0C00
0003F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0003F3r 1  00 FF FF FF  .byte $0,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F9,$F8,$F8,$F8,$F8,$F8,$F7,$F7,$F7,$F7,$F7,$F6,$F6,$F6,$F6,$F6,$F6,$F6,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F6,$F6,$F6,$F6,$F6,$F6,$F6,$F7,$F7,$F7,$F7,$F7,$F8,$F8,$F8,$F8,$F8,$F9,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$00,$0,$0,$0,$1,$1,$1,$1,$2,$2,$2,$3,$3,$3,$3,$4,$4,$4,$4,$5,$5,$5,$5,$6,$6,$6,$6,$6,$7,$7,$7,$7,$8,$8,$8,$8,$8,$8,$9,$9,$9,$9,$9,$9,$9,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$9,$9,$9,$9,$9,$9,$9,$8,$8,$8,$8,$8,$8,$7,$7,$7,$7,$6,$6,$6,$6,$6,$5,$5,$5,$5,$4,$4,$4,$4,$3,$3,$3,$3,$2,$2,$2,$1,$1,$1,$1,$0,$0,$0
0003F7r 1  FE FE FE FE  
0003FBr 1  FD FD FD FC  
0004F3r 1               
0004F3r 1               NEXT_ROW_X_L: ; 0D00 next row LEFT/up when added
0004F3r 1  00 A9 54 00  .byte
0004F7r 1  AE 5D 0D BF  
0004FBr 1  73 28 DF 98  
0005F3r 1               
0005F3r 1               NEXT_ROW_X_H: ; 0E00
0005F3r 1  F8 F7 F7 F7  .byte
0005F7r 1  F6 F6 F6 F5  
0005FBr 1  F5 F5 F4 F4  
0006F3r 1               
0006F3r 1               NEXT_ROW_Y_L: ; 0F00
0006F3r 1  33 58 7D A5  .byte $33,$58,$7D,$A5,$CD,$F7,$23,$50,$7E,$AD,$DE,$10,$44,$78,$AE,$E4,$1C,$55,$8F,$CA,$6,$43,$81,$BF,$FE,$3F,$7F,$C1,$3,$46,$8A,$CD,$12,$57,$9C,$E2,$28,$6E,$B4,$FB,$42,$89,$D0,$17,$5E,$A5,$EC,$33,$7A,$C0,$6,$4C,$91,$D6,$1B,$5F,$A2,$E6,$28,$6A,$AB,$EB,$2B,$6A,$A8,$E5,$21,$5C,$97,$D0,$8,$3F,$75,$AA,$DE,$10,$41,$71,$A0,$CD,$F9,$24,$4D,$75,$9B,$C0,$E3,$5,$25,$44,$61,$7C,$96,$AE,$C5,$DA,$ED,$FF,$F,$1D,$29,$34,$3D,$44,$4A,$4D,$4F,$50,$4E,$4B,$46,$3F,$37,$2D,$21,$13,$4,$F3,$E0,$CC,$B6,$9E,$85,$6A,$4E,$30,$10,$EF,$CC,$A7,$82,$5A,$32,$8,$DC,$AF,$81,$52,$21,$EF,$BB,$87,$51,$1B,$E3,$AA,$70,$35,$F9,$BC,$7E,$40,$1,$C0,$80,$3E,$FC,$B9,$75,$32,$ED,$A8,$63,$1D,$D7,$91,$4B,$4,$BD,$76,$2F,$E8,$A1,$5A,$13,$CC,$85,$3F,$F9,$B3,$6E,$29,$E4,$A0,$5D,$19,$D7,$95,$54,$14,$D4,$95,$57,$1A,$DE,$A3,$68,$2F,$F7,$C0,$8A,$55,$21,$EF,$BE,$8E,$5F,$32,$6,$DB,$B2,$8A,$64,$3F,$1C,$FA,$DA,$BB,$9E,$83,$69,$51,$3A,$25,$12,$0,$F0,$E2,$D6,$CB,$C2,$BB,$B5,$B2,$B0,$AF,$B1,$B4,$B9,$C0,$C8,$D2,$DE,$EC,$FB,$C,$1F,$33,$49,$61,$7A,$95,$B1,$CF,$EF,$10
0006F7r 1  CD F7 23 50  
0006FBr 1  7E AD DE 10  
0007F3r 1               
0007F3r 1               NEXT_ROW_Y_H: ; 1000
0007F3r 1  F6 F6 F6 F6  .byte $F6,$F6,$F6,$F6,$F6,$F6,$F7,$F7,$F7,$F7,$F7,$F8,$F8,$F8,$F8,$F8,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$0,$0,$0,$0,$1,$1,$1,$2,$2,$2,$2,$3,$3,$3,$3,$4,$4,$4,$4,$5,$5,$5,$5,$6,$6,$6,$6,$7,$7,$7,$7,$7,$8,$8,$8,$8,$8,$8,$9,$9,$9,$9,$9,$9,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$9,$9,$9,$9,$9,$9,$9,$8,$8,$8,$8,$8,$7,$7,$7,$7,$7,$6,$6,$6,$6,$5,$5,$5,$5,$5,$4,$4,$4,$3,$3,$3,$3,$2,$2,$2,$2,$1,$1,$1,$1,$0,$0,$0,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F8,$F8,$F8,$F8,$F8,$F7,$F7,$F7,$F7,$F7,$F7,$F6,$F6,$F6,$F6,$F6,$F6,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F6
0007F7r 1  F6 F6 F7 F7  
0007FBr 1  F7 F7 F7 F8  
0008F3r 1               
0008F3r 1               TUB_WORLD: ; 32*64 = 2K ... is 1100 to 1900-1
0008F3r 1               .include "tub_world_hieghts_01.inc"
0008F3r 2               ; 0 to 128 will be water level. >128 = distance along row to water (neg) , 128 = no water this row.
0008F3r 2               ; rows are stored within 64 byte rows
0008F3r 2               ; 	  0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63
0008F3r 2  FF FF FF FF  .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 30
0008F7r 2  FF FF FF FF  
0008FBr 2  FF FF FF FF  
000933r 2  FF FF FF FF  .byte   $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF ; 29
000937r 2  FF FF FF FF  
00093Br 2  FF FF FF FF  
000973r 2  FF FF FF FF  .byte     $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF ; 28
000977r 2  FF FF FF FF  
00097Br 2  FF FF FF FF  
0009B3r 2  FF FF FF FF  .byte       $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF ; 27
0009B7r 2  FF FF FF FF  
0009BBr 2  FF FF FF FF  
0009F3r 2  FF FF FF FF  .byte         $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF ; 26
0009F7r 2  FF FF FF FF  
0009FBr 2  FF FF FF FF  
000A33r 2  FF FF FF FF  .byte           $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 25
000A37r 2  FF FF FF FF  
000A3Br 2  FF FF FF FF  
000A73r 2  FF FF FF FF  .byte             $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 24
000A77r 2  FF FF FF FF  
000A7Br 2  FF FF FF FF  
000AB3r 2  FF FF FF FF  .byte               $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 23
000AB7r 2  FF FF FF FF  
000ABBr 2  FF FF FF 80  
000AF3r 2  FF FF FF FF  .byte                 $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 22
000AF7r 2  FF FF FF FF  
000AFBr 2  FF FF 80 00  
000B33r 2  FF FF FF FF  .byte                   $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF; 21
000B37r 2  FF FF FF FF  
000B3Br 2  FF 80 00 00  
000B73r 2  FF FF FF FF  .byte                     $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF ; 20
000B77r 2  FF FF FF FF  
000B7Br 2  FF 80 00 00  
000BB3r 2  FF FF FF FF  .byte                       $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF ; 19
000BB7r 2  FF FF FF FF  
000BBBr 2  80 00 00 00  
000BF3r 2  FF FF FF FF  .byte                         $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 18
000BF7r 2  FF FF FF FF  
000BFBr 2  80 00 00 00  
000C33r 2  FF FF FF FF  .byte                           $FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 17
000C37r 2  FF FF FF 80  
000C3Br 2  00 00 00 00  
000C73r 2  FF FF FF FF  .byte                             $FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 16
000C77r 2  FF FF FF 80  
000C7Br 2  00 00 00 00  
000CB3r 2  FF FF FF FF  .byte                               $FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 15
000CB7r 2  FF FF 80 00  
000CBBr 2  00 00 00 00  
000CF3r 2  FF FF FF FF  .byte                                 $FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF ; 14
000CF7r 2  FF FF 80 00  
000CFBr 2  00 00 00 00  
000D33r 2  FF FF FF FF  .byte                                   $FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 13
000D37r 2  FF 80 00 00  
000D3Br 2  00 00 00 00  
000D73r 2  FF FF FF FF  .byte                                     $FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 12
000D77r 2  FF 80 00 00  
000D7Br 2  00 00 00 00  
000DB3r 2  FF FF FF FF  .byte                                       $FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 11
000DB7r 2  80 00 00 00  
000DBBr 2  00 00 00 00  
000DF3r 2  FF FF FF FF  .byte                                         $FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 10
000DF7r 2  80 00 00 00  
000DFBr 2  00 00 00 00  
000E33r 2  FF FF FF 80  .byte                                           $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 9
000E37r 2  00 00 00 00  
000E3Br 2  00 00 00 00  
000E73r 2  FF FF FF 80  .byte                                             $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 8
000E77r 2  00 00 00 00  
000E7Br 2  00 00 00 00  
000EB3r 2  FF FF FF 80  .byte                                               $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 7
000EB7r 2  00 00 00 00  
000EBBr 2  00 00 00 00  
000EF3r 2  FF FF FF 80  .byte                                                 $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 6
000EF7r 2  00 00 00 00  
000EFBr 2  00 00 00 00  
000F33r 2  FF FF FF 80  .byte                                                   $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 5
000F37r 2  00 00 00 00  
000F3Br 2  00 00 00 00  
000F73r 2  FF FF FF 80  .byte                                                     $FF,$FF,$FF,$80,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 4
000F77r 2  00 01 02 02  
000F7Br 2  01 01 00 01  
000FB3r 2  FF FF FF 80  .byte                                                       $FF,$FF,$FF,$80,$80,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 3
000FB7r 2  80 00 01 02  
000FBBr 2  02 01 01 00  
000FF3r 2  FF FF FF FF  .byte                                                         $FF,$FF,$FF,$FF,$80,$80,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 2
000FF7r 2  80 80 00 01  
000FFBr 2  02 02 01 01  
001033r 2  FF FF FF FF  .byte                                                           $FF,$FF,$FF,$FF,$FF,$80,$80,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 01
001037r 2  FF 80 80 00  
00103Br 2  01 02 02 01  
001073r 2  FF FF FF FF  .byte                                                             $FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 00 tub wall north
001077r 2  FF FF 80 80  
00107Br 2  80 80 80 80  
0010B3r 2  FF FF FF FF  .res 64,$FF
0010B7r 2  FF FF FF FF  
0010BBr 2  FF FF FF FF  
0010F3r 2               
0010F3r 2               
0010F3r 2               
0010F3r 1               
0010F3r 1               ; 1900
0010F3r 1               
0010F3r 1               OBJECT_LIST_Z_START_POINTERS: ; 1900
0010F3r 1  00 00 00 00  .res 256,0
0010F7r 1  00 00 00 00  
0010FBr 1  00 00 00 00  
0011F3r 1               OBJECT_LIST_BYTE0_ADDRLOW: ; 1A00 addr low
0011F3r 1  00 00 00 00  .res 256,0
0011F7r 1  00 00 00 00  
0011FBr 1  00 00 00 00  
0012F3r 1               OBJECT_LIST_BYTE1_MODE: ; 1B00 mode/addr bank
0012F3r 1  00 00 00 00  .res 256,0
0012F7r 1  00 00 00 00  
0012FBr 1  00 00 00 00  
0013F3r 1               OBJECT_LIST_BYTE2_X: ; 1C00 X position onscreen ( assumed positive for now)
0013F3r 1  00 00 00 00  .res 256,0
0013F7r 1  00 00 00 00  
0013FBr 1  00 00 00 00  
0014F3r 1               OBJECT_LIST_BYTE3_Y: ; 1D00 y position onscreen
0014F3r 1  00 00 00 00  .res 256,0
0014F7r 1  00 00 00 00  
0014FBr 1  00 00 00 00  
0015F3r 1               OBJECT_LIST_BYTE4_ZFLIPS: ; 1E00 collision / z / flips
0015F3r 1  00 00 00 00  .res 256,0
0015F7r 1  00 00 00 00  
0015FBr 1  00 00 00 00  
0016F3r 1               OBJECT_LIST_BYTE5_SIZE: ; 1F00 size / pal offset
0016F3r 1  00 00 00 00  .res 256,0
0016F7r 1  00 00 00 00  
0016FBr 1  00 00 00 00  
0017F3r 1               OBJECT_LIST_BYTE6_NEXT: ; 2000 NEXT
0017F3r 1  00 00 00 00  .res 256,0
0017F7r 1  00 00 00 00  
0017FBr 1  00 00 00 00  
0018F3r 1               
0018F3r 1               
0018F3r 1               
0018F3r 1               WORLD_TO_CELL_XH: ; 2100
0018F3r 1  00 00 01 02  .byte 0,0,1,2,3,4,5,6,6,7,8,9,10,11,12,12,13,14,15,16,17,18,19,19,20,21,22,23,24,25,25,26,27,28,29,30,31,32,32,33,34,35,36,37,38,38,39,40,41,42,43,44,45,45,46,47,48,49,50,51,51,52,53,54,55,56,57,58,58,59,60,61,62,63,64,64,65,66,67,68,69,70,71,71,72,73,74,75,76,77,77,78,79,80,81,82,83,84,84,85,86,87,88,89,90,90,91,92,93,94,95,96,96,97,98,99,100,101,102,103,103,104,105,106,107,108,109,109,110,111,112,113,114,115,116,116,117,118,119,120,121,122,122,123,124,125,126,127,128,129,129,130,131,132,133,134,135,135,136,137,138,139,140,141,142,142,143,144,145,146,147,148,148,149,150,151,152,153,154,155,155,156,157,158,159,160,161,161,162,163,164,165,166,167,168,168,169,170,171,172,173,174,174,175,176,177,178,179,180,180,181,182,183,184,185,186,187,187,188,189,190,191,192,193,193,194,195,196,197,198,199,200,200,201,202,203,204,205,206,206,207,208,209,210,211,212,213,213,214,215,216,217,218,219,219,220
0018F7r 1  03 04 05 06  
0018FBr 1  06 07 08 09  
0019F3r 1               ;.byte 0,0,1,2,3,4,5,6,6,7,8,9,10,11,12,12,13,14,15,16,17,18,19,19,20,21,22,23,24,25,25,26,27,28,29,30,31,32,32,33,34,35,36,37,38,38,39,40,41,42,43,44,45,45,46,47,48,49,50,51,51,52,53,54,55,56,57,58,58,59,60,61,62,63,64,64,65,66,67,68,69,70,71,71,72,73,74,75,76,77,77,78,79,80,81,82,83,84,84,85,86,87,88,89,90,90,91,92,93,94,95,96,96,97,98,99,100,101,102,103,103,104,105,106,107,108,109,109
0019F3r 1               ;.res 128,128
0019F3r 1               WORLD_TO_CELL_XL:
0019F3r 1  00 DD BB 99  .byte 0,221,187,153,118,84,50,15,237,203,169,134,100,66,31,253,219,184,150,116,82,47,13,235,200,166,132,97,63,29,251,216,182,148,113,79,45,10,232,198,164,129,95,61,26,248,214,180,145,111,77,42,8,230,195,161,127,93,58,24,246,211,177,143,108,74,40,6,227,193,159,124,90,56,21,243,209,175,140,106,72,37,3,225,191,156,122,88,53,19,241,206,172,138,104,69,35,1,222,188,154,119,85,51,17,238,204,170,135,101,67,32,254,220,186,151,117,83,48,14,236,202,167,133,99,64,30,252,217,183,149,115,80,46,12,233,199,165,130,96,62,28,249,215,181,146,112,78,43,9,231,197,162,128,94,59,25,247,212,178,144,110,75,41,7,228,194,160,126,91,57,23,244,210,176,141,107,73,39,4,226,192,157,123,89,54,20,242,208,173,139,105,70,36,2,223,189,155,121,86,52,18,239,205,171,137,102,68,34,255,221,187,152,118,84,50,15,237,203,168,134,100,65,31,253,219,184,150,116,81,47,13,234,200,166,132,97,63,29,250,216,182,148,113,79,45,10,232,198,163,129,95,61,26,248,214
0019F7r 1  76 54 32 0F  
0019FBr 1  ED CB A9 86  
001AF3r 1               ;.byte 0,221,187,153,118,84,50,15,237,203,169,134,100,66,31,253,219,184,150,116,82,47,13,235,200,166,132,97,63,29,251,216,182,148,113,79,45,10,232,198,164,129,95,61,26,248,214,180,145,111,77,42,8,230,195,161,127,93,58,24,246,211,177,143,108,74,40,6,227,193,159,124,90,56,21,243,209,175,140,106,72,37,3,225,191,156,122,88,53,19,241,206,172,138,104,69,35,1,222,188,154,119,85,51,17,238,204,170,135,101,67,32,254,220,186,151,117,83,48,14,236,202,167,133,99,64,30,252
001AF3r 1               ;.res 128,0
001AF3r 1               CELL_TO_WORLD_XH: ; 2200
001AF3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,8,9,10,11,12,13,15,16,17,18,19,20,21,23,24,25,26,27,28,30,31,32,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,50,51,53,54,55,56,57,58,60,61,62,63,64,65,66,68,69,70,71,72,73,75,76,77,78,79,80,81,83,84,85,86,87,88,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,112,113,114,115,116,117,118,120,121,122,123,124,125,127,128,129,130,131,132,133,135,136,137,138,139,140,142,143,144,145,146
001AF7r 1  04 05 06 08  
001AFBr 1  09 0A 0B 0C  
001B73r 1               CELL_TO_WORLD_XL: ; 2280
001B73r 1  00 27 4F 76  .byte 0,39,79,118,158,198,237,21,60,100,140,179,219,2,42,82,121,161,200,240,24,63,103,142,182,222,5,45,84,124,164,203,243,26,66,106,145,185,224,8,48,87,127,166,206,246,29,69,108,148,188,227,11,50,90,130,169,209,248,32,72,111,151,191,230,14,53,93,133,172,212,251,35,75,114,154,193,233,17,56,96,135,175,215,254,38,77,117,157,196,236,19,59,99,138,178,217,1,41,80,120,159,199,239,22,62,101,141,181,220,4,43,83,123,162,202,241,25,65,104,144,184,223,7,46,86,126,165
001B77r 1  9E C6 ED 15  
001B7Br 1  3C 64 8C B3  
001BF3r 1               
001BF3r 1               CELL_LOW_TO_WORLD_XH: ; 2300
001BF3r 1  00 00 00 00  .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
001BF7r 1  00 00 00 00  
001BFBr 1  00 00 00 00  
001CF3r 1               CELL_LOW_TO_WORLD_XL: ; 2400
001CF3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,8,9,10,11,12,13,15,16,17,18,19,20,21,23,24,25,26,27,28,30,31,32,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,50,51,53,54,55,56,57,58,60,61,62,63,64,65,66,68,69,70,71,72,73,75,76,77,78,79,80,81,83,84,85,86,87,88,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,112,113,114,115,116,117,118,120,121,122,123,124,125,127,128,129,130,131,132,133,135,136,137,138,139,140,142,143,144,145,146,147,148,150,151,152,153,154,155,157,158,159,160,161,162,163,165,166,167,168,169,170,172,173,174,175,176,177,178,180,181,182,183,184,185,187,188,189,190,191,192,193,195,196,197,198,199,200,202,203,204,205,206,207,209,210,211,212,213,214,215,217,218,219,220,221,222,224,225,226,227,228,229,230,232,233,234,235,236,237,239,240,241,242,243,244,245,247,248,249,250,251,252,254,255,0,1,2,3,4,6,7,8,9,10,11,13,14,15,16,17,18,19,21,22,23,24,25,26,28,29,30,31,32,33,34,36,37,38
001CF7r 1  04 05 06 08  
001CFBr 1  09 0A 0B 0C  
001DF3r 1               
001DF3r 1               SPRITE_NUM_HIGH_NIBBLE: ; 2900
001DF3r 1  00 00 00 00  .res 16, 0
001DF7r 1  00 00 00 00  
001DFBr 1  00 00 00 00  
001E03r 1  01 01 01 01  .res 16, 1
001E07r 1  01 01 01 01  
001E0Br 1  01 01 01 01  
001E13r 1  02 02 02 02  .res 16, 2
001E17r 1  02 02 02 02  
001E1Br 1  02 02 02 02  
001E23r 1  03 03 03 03  .res 16, 3
001E27r 1  03 03 03 03  
001E2Br 1  03 03 03 03  
001E33r 1  04 04 04 04  .res 16, 4
001E37r 1  04 04 04 04  
001E3Br 1  04 04 04 04  
001E43r 1  05 05 05 05  .res 16, 5
001E47r 1  05 05 05 05  
001E4Br 1  05 05 05 05  
001E53r 1  06 06 06 06  .res 16, 6
001E57r 1  06 06 06 06  
001E5Br 1  06 06 06 06  
001E63r 1  07 07 07 07  .res 16, 7
001E67r 1  07 07 07 07  
001E6Br 1  07 07 07 07  
001E73r 1  08 08 08 08  .res 16, 8
001E77r 1  08 08 08 08  
001E7Br 1  08 08 08 08  
001E83r 1  09 09 09 09  .res 16, 9
001E87r 1  09 09 09 09  
001E8Br 1  09 09 09 09  
001E93r 1  0A 0A 0A 0A  .res 16, 10
001E97r 1  0A 0A 0A 0A  
001E9Br 1  0A 0A 0A 0A  
001EA3r 1  0B 0B 0B 0B  .res 16, 11
001EA7r 1  0B 0B 0B 0B  
001EABr 1  0B 0B 0B 0B  
001EB3r 1  0C 0C 0C 0C  .res 16, 12
001EB7r 1  0C 0C 0C 0C  
001EBBr 1  0C 0C 0C 0C  
001EC3r 1  0D 0D 0D 0D  .res 16, 13
001EC7r 1  0D 0D 0D 0D  
001ECBr 1  0D 0D 0D 0D  
001ED3r 1  0E 0E 0E 0E  .res 16, 14
001ED7r 1  0E 0E 0E 0E  
001EDBr 1  0E 0E 0E 0E  
001EE3r 1  0F 0F 0F 0F  .res 16, 15
001EE7r 1  0F 0F 0F 0F  
001EEBr 1  0F 0F 0F 0F  
001EF3r 1               
001EF3r 1               SPRITE_NUM_LOW_NIBBLE: ; 2A00
001EF3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001EF7r 1  04 05 06 07  
001EFBr 1  08 09 0A 0B  
001F03r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F07r 1  04 05 06 07  
001F0Br 1  08 09 0A 0B  
001F13r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F17r 1  04 05 06 07  
001F1Br 1  08 09 0A 0B  
001F23r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F27r 1  04 05 06 07  
001F2Br 1  08 09 0A 0B  
001F33r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F37r 1  04 05 06 07  
001F3Br 1  08 09 0A 0B  
001F43r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F47r 1  04 05 06 07  
001F4Br 1  08 09 0A 0B  
001F53r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F57r 1  04 05 06 07  
001F5Br 1  08 09 0A 0B  
001F63r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F67r 1  04 05 06 07  
001F6Br 1  08 09 0A 0B  
001F73r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F77r 1  04 05 06 07  
001F7Br 1  08 09 0A 0B  
001F83r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F87r 1  04 05 06 07  
001F8Br 1  08 09 0A 0B  
001F93r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F97r 1  04 05 06 07  
001F9Br 1  08 09 0A 0B  
001FA3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001FA7r 1  04 05 06 07  
001FABr 1  08 09 0A 0B  
001FB3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001FB7r 1  04 05 06 07  
001FBBr 1  08 09 0A 0B  
001FC3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001FC7r 1  04 05 06 07  
001FCBr 1  08 09 0A 0B  
001FD3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001FD7r 1  04 05 06 07  
001FDBr 1  08 09 0A 0B  
001FE3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001FE7r 1  04 05 06 07  
001FEBr 1  08 09 0A 0B  
001FF3r 1               
001FF3r 1               SCREEN_Y_TO_Z: ; 2B00
001FF3r 1  FF FD FB FA  .byte 255,253,251,250,248,247,245,243,242,240,239,237,235,234,232,231,229,227,226,224,223,221,220,218,216,215,213,212,210,208,207,205,204,202,200,199,197,196,194,192,191,189,188,186,185,183,181,180,178,177,175,173,172,170,169,167,165,164,162,161,159,158,156,154,153,151,150,148,146,145,143,142,140,138,137,135,134,132,130,129,127,126,124,123,121,119,118,116,115,113,111,110,108,107,105,103,102,100,99,97,95,94,92,91,89,88,86,84,83,81,80,78,76,75,73,72,70,68,67,65,64,62,61,59,57,56,54,53,51,49,48,46,45,43,41,40,38,37,35,33,32,30,29,27,26,24,22,21,19,18,16,14,13,11,10,8,6,5,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
001FF7r 1  F8 F7 F5 F3  
001FFBr 1  F2 F0 EF ED  
0020F3r 1               
0020F3r 1               CONVERT_HEIGHTS_PIXELS: ; 2C00
0020F3r 1               ;.res 256,0
0020F3r 1  00 00 01 01  .byte 0,0,1,1,2,3,3,4,4,5,6,6,7,7,8,9,9,10,11,11,12,12,13,14,14,15,15,16,17,17,18,18,19,20,20,21,22,22,23,23,24,25,25,26,26,27,28,28,29,30,30,31,31,32,33,33,34,34,35,36,36,37,37,38,39,39,40,41,41,42,42,43,44,44,45,45,46,47,47,48,48,49,50,50,51,52,52,53,53,54,55,55,56,56,57,58,58,59,60,60,61,61,62,63,63,64,64,65,66,66,67,67,68,69,69,70,71,71,72,72,73,74,74,75,75,76,77,77,78,78,79,80,80,81,82,82,83,83,84,85,85,86,86,87,88,88,89,90,90,91,91,92,93,93,94,94,95,96,96,97,97,98,99,99,100,101,101,102,102,103,104,104,105,105,106,107,107,108,109,109,110,110,111,112,112,113,113,114,115,115,116,116,117,118,118,119,120,120,121,121,122,123,123,124,124,125,126,126,127,127,128,129,129,130,131,131,132,132,133,134,134,135,135,136,137,137,138,139,139,140,140,141,142,142,143,143,144,145,145,146,146,147,148,148,149,150,150,151,151,152,153,153,154,154,155,156
0020F7r 1  02 03 03 04  
0020FBr 1  04 05 06 06  
0021F3r 1               ;.byte 0,0,1,1,2,3,3,4,4,5,6,6,7,7,8,9,9,10,11,11,12,12,13,14,14,15,15,16,17,17,18,18,19,20,20,21,22,22,23,23,24,25,25,26,26,27,28,28,29,30,30,31,31,32,33,33,34,34,35,36,36,37,37,38,39,39,40,41,41,42,42,43,44,44,45,45,46,47,47,48,48,49,50,50,51,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52;,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52
0021F3r 1               ;.res 128,0
0021F3r 1               CONVERT_HEIGHTS_PIXELS_L:
0021F3r 1               ;.res 256,0
0021F3r 1  00 9C 39 D6  .byte 0,156,57,214,115,15,172,73,230,130,31,188,89,245,146,47,204,105,5,162,63,220,120,21,178,79,235,136,37,194,95,251,152,53,210,110,11,168,69,225,126,27,184,84,241,142,43,200,100,1,158,59,215,116,17,174,74,231,132,33,190,90,247,148,49,205,106,7,164,64,221,122,23,180,80,237,138,39,195,96,253,154,54,211,112,0,169,70,227,128,29,185,86,243,144,44,201,102,3,159,60,217,118,19,175,76,233,134,34,191,92,249,149,50,207,108,9,165,66,223,124,24,181,82,239,139,40,197,98,254,155,56,213,114,14,171,72,229,129,30,187,88,244,145,46,203,104,4,161,62,219,119,20,177,78,234,135,36,193,94,250,151,52,209,109,10,167,68,224,125,26,183,83,240,141,42,199,99,0,157,58,214,115,16,173,73,230,131,32,189,89,246,147,48,204,105,6,163,63,220,121,22,179,79,236,137,38,194,95,252,153,53,210,111,12,168,69,226,127,28,184,85,242,143,43,200,101,2,158,59,216,117,18,174,75,232,133,33,190,91,248,148,49,206,107,7,164,65,222,123,23,180,81,238,138,39
0021F7r 1  73 0F AC 49  
0021FBr 1  E6 82 1F BC  
0022F3r 1               
0022F3r 1               SUBCELL_X_COS_L:
0022F3r 1  00 FF FF FF  .byte $0,$FF,$FF,$FF,$FE,$FE,$FD,$FC,$FB,$F9,$F8,$F6,$F4,$F3,$F1,$EE,$EC,$EA,$E7,$E4,$E1,$DE,$DB,$D8,$D4,$D1,$CD,$C9,$C5,$C1,$BD,$B9,$B5,$B0,$AB,$A7,$A2,$9D,$98,$93,$8E,$88,$83,$7E,$78,$73,$6D,$67,$61,$5C,$56,$50,$4A,$44,$3E,$38,$31,$2B,$25,$1F,$19,$12,$C,$6,$0,$F9,$F3,$ED,$E6,$E0,$DA,$D4,$CE,$C7,$C1,$BB,$B5,$AF,$A9,$A3,$9E,$98,$92,$8C,$87,$81,$7C,$77,$71,$6C,$67,$62,$5D,$58,$54,$4F,$4A,$46,$42,$3E,$3A,$36,$32,$2E,$2B,$27,$24,$21,$1E,$1B,$18,$15,$13,$11,$E,$C,$B,$9,$7,$6,$4,$3,$2,$1,$1,$0,$0,$0,$0,$0,$0,$0,$1,$1,$2,$3,$4,$6,$7,$9,$B,$C,$E,$11,$13,$15,$18,$1B,$1E,$21,$24,$27,$2B,$2E,$32,$36,$3A,$3E,$42,$46,$4A,$4F,$54,$58,$5D,$62,$67,$6C,$71,$77,$7C,$81,$87,$8C,$92,$98,$9E,$A3,$A9,$AF,$B5,$BB,$C1,$C7,$CE,$D4,$DA,$E0,$E6,$ED,$F3,$F9,$0,$6,$C,$12,$19,$1F,$25,$2B,$31,$38,$3E,$44,$4A,$50,$56,$5C,$61,$67,$6D,$73,$78,$7E,$83,$88,$8E,$93,$98,$9D,$A2,$A7,$AB,$B0,$B5,$B9,$BD,$C1,$C5,$C9,$CD,$D1,$D4,$D8,$DB,$DE,$E1,$E4,$E7,$EA,$EC,$EE,$F1,$F3,$F4,$F6,$F8,$F9,$FB,$FC,$FD,$FE,$FE,$FF,$FF,$FF
0022F7r 1  FE FE FD FC  
0022FBr 1  FB F9 F8 F6  
0023F3r 1               SUBCELL_X_COS_H:
0023F3r 1  01 00 00 00  .byte
0023F7r 1  00 00 00 00  
0023FBr 1  00 00 00 00  
0024F3r 1               SUBCELL_X_SIN_H:
0024F3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
0024F7r 1  00 00 00 00  
0024FBr 1  00 00 00 00  
0025F3r 1               SUBCELL_X_SIN_L:
0025F3r 1  00 05 0A 10  .byte $0,$5,$A,$10,$15,$1B,$20,$25,$2B,$30,$35,$3B,$40,$45,$4A,$4F,$54,$59,$5E,$63,$68,$6D,$71,$76,$7B,$7F,$84,$88,$8C,$90,$94,$98,$9C,$A0,$A4,$A7,$AB,$AE,$B2,$B5,$B8,$BB,$BE,$C0,$C3,$C6,$C8,$CA,$CC,$CE,$D0,$D2,$D4,$D5,$D7,$D8,$D9,$DA,$DB,$DC,$DC,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DC,$DC,$DB,$DA,$D9,$D8,$D7,$D5,$D4,$D2,$D0,$CE,$CC,$CA,$C8,$C6,$C3,$C0,$BE,$BB,$B8,$B5,$B2,$AE,$AB,$A7,$A4,$A0,$9C,$98,$94,$90,$8C,$88,$84,$7F,$7B,$76,$71,$6D,$68,$63,$5E,$59,$54,$4F,$4A,$45,$40,$3B,$35,$30,$2B,$25,$20,$1B,$15,$10,$A,$5,$0,$FA,$F5,$EF,$EA,$E4,$DF,$DA,$D4,$CF,$CA,$C4,$BF,$BA,$B5,$B0,$AB,$A6,$A1,$9C,$97,$92,$8E,$89,$84,$80,$7B,$77,$73,$6F,$6B,$67,$63,$5F,$5B,$58,$54,$51,$4D,$4A,$47,$44,$41,$3F,$3C,$39,$37,$35,$33,$31,$2F,$2D,$2B,$2A,$28,$27,$26,$25,$24,$23,$23,$22,$22,$22,$22,$22,$22,$22,$23,$23,$24,$25,$26,$27,$28,$2A,$2B,$2D,$2F,$31,$33,$35,$37,$39,$3C,$3F,$41,$44,$47,$4A,$4D,$51,$54,$58,$5B,$5F,$63,$67,$6B,$6F,$73,$77,$7B,$80,$84,$89,$8E,$92,$97,$9C,$A1,$A6,$AB,$B0,$B5,$BA,$BF,$C4,$CA,$CF,$D4,$DA,$DF,$E4,$EA,$EF,$F5,$FA
0025F7r 1  15 1B 20 25  
0025FBr 1  2B 30 35 3B  
0026F3r 1               SUBCELL_Y_COS_H:
0026F3r 1  00 00 00 00  .byte
0026F7r 1  00 00 00 00  
0026FBr 1  00 00 00 00  
0027F3r 1               SUBCELL_Y_COS_L:
0027F3r 1  9C 9C 9C 9C  .byte $9C,$9C,$9C,$9C,$9C,$9B,$9B,$9A,$99,$98,$98,$97,$96,$94,$93,$92,$90,$8F,$8D,$8C,$8A,$88,$86,$84,$82,$80,$7D,$7B,$79,$76,$74,$71,$6E,$6C,$69,$66,$63,$60,$5D,$5A,$57,$53,$50,$4D,$49,$46,$43,$3F,$3B,$38,$34,$31,$2D,$29,$26,$22,$1E,$1A,$17,$13,$F,$B,$7,$3,$0,$FC,$F8,$F4,$F0,$EC,$E8,$E5,$E1,$DD,$D9,$D6,$D2,$CE,$CB,$C7,$C4,$C0,$BC,$B9,$B6,$B2,$AF,$AC,$A8,$A5,$A2,$9F,$9C,$99,$96,$93,$91,$8E,$8B,$89,$86,$84,$82,$7F,$7D,$7B,$79,$77,$75,$73,$72,$70,$6F,$6D,$6C,$6B,$69,$68,$67,$67,$66,$65,$64,$64,$63,$63,$63,$63,$63,$63,$63,$63,$63,$64,$64,$65,$66,$67,$67,$68,$69,$6B,$6C,$6D,$6F,$70,$72,$73,$75,$77,$79,$7B,$7D,$7F,$82,$84,$86,$89,$8B,$8E,$91,$93,$96,$99,$9C,$9F,$A2,$A5,$A8,$AC,$AF,$B2,$B6,$B9,$BC,$C0,$C4,$C7,$CB,$CE,$D2,$D6,$D9,$DD,$E1,$E5,$E8,$EC,$F0,$F4,$F8,$FC,$0,$3,$7,$B,$F,$13,$17,$1A,$1E,$22,$26,$29,$2D,$31,$34,$38,$3B,$3F,$43,$46,$49,$4D,$50,$53,$57,$5A,$5D,$60,$63,$66,$69,$6C,$6E,$71,$74,$76,$79,$7B,$7D,$80,$82,$84,$86,$88,$8A,$8C,$8D,$8F,$90,$92,$93,$94,$96,$97,$98,$98,$99,$9A,$9B,$9B,$9C,$9C,$9C,$9C
0027F7r 1  9C 9B 9B 9A  
0027FBr 1  99 98 98 97  
0028F3r 1               SUBCELL_Y_SIN_H:
0028F3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
0028F7r 1  00 00 00 00  
0028FBr 1  00 00 00 00  
0029F3r 1               SUBCELL_Y_SIN_L:
0029F3r 1  00 04 08 0D  .byte $0,$4,$8,$D,$11,$16,$1A,$1E,$23,$27,$2B,$30,$34,$38,$3C,$41,$45,$49,$4D,$51,$55,$59,$5D,$60,$64,$68,$6B,$6F,$72,$76,$79,$7C,$7F,$83,$86,$89,$8B,$8E,$91,$93,$96,$98,$9B,$9D,$9F,$A1,$A3,$A5,$A7,$A8,$AA,$AB,$AD,$AE,$AF,$B0,$B1,$B2,$B3,$B3,$B4,$B4,$B4,$B4,$B5,$B4,$B4,$B4,$B4,$B3,$B3,$B2,$B1,$B0,$AF,$AE,$AD,$AB,$AA,$A8,$A7,$A5,$A3,$A1,$9F,$9D,$9B,$98,$96,$93,$91,$8E,$8B,$89,$86,$83,$80,$7C,$79,$76,$72,$6F,$6B,$68,$64,$60,$5D,$59,$55,$51,$4D,$49,$45,$41,$3C,$38,$34,$30,$2B,$27,$23,$1E,$1A,$16,$11,$D,$8,$4,$0,$FB,$F7,$F2,$EE,$E9,$E5,$E1,$DC,$D8,$D4,$CF,$CB,$C7,$C3,$BE,$BA,$B6,$B2,$AE,$AA,$A6,$A2,$9F,$9B,$97,$94,$90,$8D,$89,$86,$83,$80,$7C,$79,$76,$74,$71,$6E,$6C,$69,$67,$64,$62,$60,$5E,$5C,$5A,$58,$57,$55,$54,$52,$51,$50,$4F,$4E,$4D,$4C,$4C,$4B,$4B,$4B,$4B,$4A,$4B,$4B,$4B,$4B,$4C,$4C,$4D,$4E,$4F,$50,$51,$52,$54,$55,$57,$58,$5A,$5C,$5E,$60,$62,$64,$67,$69,$6C,$6E,$71,$74,$76,$79,$7C,$80,$83,$86,$89,$8D,$90,$94,$97,$9B,$9F,$A2,$A6,$AA,$AE,$B2,$B6,$BA,$BE,$C3,$C7,$CB,$CF,$D4,$D8,$DC,$E1,$E5,$E9,$EE,$F2,$F7,$FB
0029F7r 1  11 16 1A 1E  
0029FBr 1  23 27 2B 30  
002AF3r 1               
002AF3r 1               MOVE_Y_H:
002AF3r 1  00 00 00 00  .byte
002AF7r 1  00 00 00 00  
002AFBr 1  00 00 00 00  
002BF3r 1               MOVE_Y_L:
002BF3r 1  08 07 07 07  .byte $8,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$6,$6,$6,$6,$6,$6,$6,$6,$6,$5,$5,$5,$5,$5,$5,$5,$4,$4,$4,$4,$4,$4,$3,$3,$3,$3,$3,$3,$2,$2,$2,$2,$2,$1,$1,$1,$1,$1,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF,$FF,$0,$0,$0,$0,$0,$0,$1,$1,$1,$1,$1,$2,$2,$2,$2,$2,$3,$3,$3,$3,$3,$3,$4,$4,$4,$4,$4,$4,$5,$5,$5,$5,$5,$5,$5,$6,$6,$6,$6,$6,$6,$6,$6,$6,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7
002BF7r 1  07 07 07 07  
002BFBr 1  07 07 07 07  
002CF3r 1               MOVE_X_H:
002CF3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
002CF7r 1  00 00 00 00  
002CFBr 1  00 00 00 00  
002DF3r 1               MOVE_X_L:
002DF3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$1,$1,$1,$1,$1,$1,$2,$2,$2,$2,$2,$2,$2,$3,$3,$3,$3,$3,$3,$3,$4,$4,$4,$4,$4,$4,$4,$5,$5,$5,$5,$5,$5,$5,$5,$5,$5,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$5,$5,$5,$5,$5,$5,$5,$5,$5,$5,$4,$4,$4,$4,$4,$4,$4,$3,$3,$3,$3,$3,$3,$3,$2,$2,$2,$2,$2,$2,$2,$1,$1,$1,$1,$1,$1,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FB,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF,$FF
002DF7r 1  00 00 01 01  
002DFBr 1  01 01 01 01  
002EF3r 1               
002EF3r 1               
002EF3r 1               WORLD_SPRITE_CENTER_XH: ; 128 bytes
002EF3r 1  64 64 64 64  .byte
002EF7r 1  64 64 64 64  
002EFBr 1  64 64 64 64  
002F73r 1               WORLD_SPRITE_CENTER_XL: ; 128 bytes
002F73r 1  00 0D 1B 29  .byte $0,$D,$1B,$29,$36,$43,$51,$5E,$6B,$78,$85,$92,$9F,$AB,$B8,$C4,$D1,$DD,$E9,$F6,$2,$E,$A,$FE,$F2,$E5,$D9,$CD,$C0,$B4,$A7,$9A,$8E,$81,$74,$67,$5A,$4C,$3F,$32,$24,$16,$9,$4,$12,$20,$2D,$3B,$48,$55,$62,$6F,$7C,$89,$96,$A3,$B0,$BC,$C9,$D5,$E1,$EE,$FA,$6,$12,$13,$FA,$EE,$E1,$D5,$C9,$BC,$B0,$A3,$96,$89,$7C,$6F,$62,$55,$48,$3B,$2D,$20,$12,$4,$9,$16,$24,$32,$3F,$4C,$5A,$67,$74,$81,$8E,$9A,$A7,$B4,$C0,$CD,$D9,$E5,$F2,$FE,$A,$E,$2,$F6,$E9,$DD,$D1,$C4,$B8,$AB,$9F,$92,$85,$78,$6B,$5E,$51,$43,$36,$29,$1B,$D
002F77r 1  36 43 51 5E  
002F7Br 1  6B 78 85 92  
002FF3r 1               WORLD_SPRITE_CENTER_YH: ; 128 bytes
002FF3r 1  4C 4C 4C 4C  .byte $4C,$4C,$4C,$4C,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4C,$4C,$4C,$4C,$4C,$4C,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4C,$4C,$4C,$4C,$4C,$4C,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4C,$4C,$4C
002FF7r 1  4B 4B 4B 4B  
002FFBr 1  4B 4B 4B 4B  
003073r 1               WORLD_SPRITE_CENTER_YL: ; 128 bytes
003073r 1  19 11 08 00  .byte $19,$11,$8,$0,$F7,$EE,$E6,$DD,$D4,$CB,$C2,$B9,$B0,$A7,$9D,$94,$8B,$81,$78,$6E,$64,$5B,$5E,$68,$71,$7B,$84,$8E,$97,$A0,$AA,$B3,$BC,$C5,$CE,$D7,$E0,$E8,$F1,$FA,$3,$B,$14,$17,$E,$5,$FD,$F4,$EB,$E3,$DA,$D1,$C8,$BF,$B6,$AD,$A3,$9A,$91,$87,$7E,$74,$6B,$61,$57,$57,$6B,$74,$7E,$87,$91,$9A,$A3,$AD,$B6,$BF,$C8,$D1,$DA,$E3,$EB,$F4,$FD,$5,$E,$17,$14,$B,$3,$FA,$F1,$E8,$E0,$D7,$CE,$C5,$BC,$B3,$AA,$A0,$97,$8E,$84,$7B,$71,$68,$5E,$5B,$64,$6E,$78,$81,$8B,$94,$9D,$A7,$B0,$B9,$C2,$CB,$D4,$DD,$E6,$EE,$F7,$0,$8,$11
003077r 1  F7 EE E6 DD  
00307Br 1  D4 CB C2 B9  
0030F3r 1               
0030F3r 1               WORLD_SPRITE_NUM_lookies: ; 128 bytes
0030F3r 1               ;      0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
0030F3r 1  00 00 00 00  .byte   0,  0,  0,  0, 32, 32, 32, 32, 32, 32, 64, 64, 64, 64, 64, 64
0030F7r 1  20 20 20 20  
0030FBr 1  20 20 40 40  
003103r 1  40 40 60 60  .byte  64, 64, 96, 96,160,160,160, 96, 96, 96, 64, 64, 64, 64, 64, 64
003107r 1  A0 A0 A0 60  
00310Br 1  60 60 40 40  
003113r 1  40 40 20 20  .byte  64, 64, 32, 32, 32, 32, 32, 32,  0,  0,  0,  0,  0,  0, 32, 32
003117r 1  20 20 20 20  
00311Br 1  00 00 00 00  
003123r 1  20 20 20 20  .byte  32, 32, 32, 32, 32, 64, 64, 64, 64, 64, 64, 64, 96, 96, 96,160
003127r 1  20 40 40 40  
00312Br 1  40 40 40 40  
003133r 1  A0 A0 60 60  .byte 160,160, 96, 96, 96, 64, 64, 64, 64, 64, 64, 64, 32, 32, 32, 32
003137r 1  60 40 40 40  
00313Br 1  40 40 40 40  
003143r 1  20 20 20 00  .byte  32, 32, 32,  0,  0,  0,  0,  0,  0, 32, 32, 32, 32, 32, 32, 64
003147r 1  00 00 00 00  
00314Br 1  00 20 20 20  
003153r 1  40 40 40 40  .byte  64, 64, 64, 64, 64, 64, 64, 96, 96, 96,160,160,160, 96, 96, 64
003157r 1  40 40 40 60  
00315Br 1  60 60 A0 A0  
003163r 1  40 40 40 40  .byte  64, 64, 64, 64, 64, 64, 64, 32, 32, 32, 32, 32, 32,  0,  0,  0
003167r 1  40 40 40 20  
00316Br 1  20 20 20 20  
003173r 1               
003173r 1               ;constants
003173r 1               
003173r 1               ; RAM Interrupt Vectors
003173r 1               IRQVec            = $0314
003173r 1               
003173r 1               ; VERA
003173r 1               VERA_addr_low     = $9F20
003173r 1               VERA_addr_high    = $9F21
003173r 1               VERA_addr_bank    = $9F22
003173r 1               VERA_data0        = $9F23
003173r 1               VERA_data1        = $9F24
003173r 1               VERA_ctrl         = $9F25
003173r 1               VERA_ien          = $9F26
003173r 1               VERA_isr          = $9F27
003173r 1               VERA_dc_video     = $9F29 ; DCSEL = 0
003173r 1               FX_CTRL           = $9F29 ; DCSEL = 2
003173r 1               FX_CACHE_L        = $9F29 ; DCSEL = 6
003173r 1               FX_CACHE_M        = $9F2A
003173r 1               FX_CACHE_H        = $9F2B
003173r 1               FX_CACHE_U        = $9F2C
003173r 1               ;   Current Field | Sprites Enable | Layer1 Enable  |Layer0 Enable
003173r 1               ; NTSC/RGB: 240P  | NTSC: Chroma Disable / RGB: HV Sync Output Mode
003173r 1               
003173r 1               VERA_dc_hscale    = $9F2A
003173r 1               VERA_dc_vscale    = $9F2B
003173r 1               
003173r 1               VERA_L0_config    = $9F2D
003173r 1               ;   7       6     5   4       3       2             1   0
003173r 1               ;   Map Height | Map Width | T256C | Bitmap Mode | Color Depth
003173r 1               ;   0 - 32                  0 - 16    0 tiled       0   1bpp mono
003173r 1               ;   1 - 64                  1 - 256   1 enabled     1   2bpp 4 color
003173r 1               ;   2 - 128                                         2   4bpp 16 color
003173r 1               ;   3 - 256                                         3   8bpp 256 color
003173r 1               ;   bitmap mode - tilebase points to bitmap data, mapbase not used
003173r 1               ;   tile width = 0 is 320 pixels / tile width=1 is 640 pixels.. so could do 4bpp x 320?
003173r 1               ;   The palette offset (in 'H-Scroll (11:8)') modifies the color indexes of the bitmap in the same way as in the tile modes.
003173r 1               
003173r 1               VERA_L0_mapbase   = $9F2E
003173r 1               VERA_L0_tilebase  = $9F2F ;   Tile Base Address (16:11) | Tile Height 0-8/1-16 | Tile Width 0-8/1-16
003173r 1               VERA_L0_HSCROLL_L = $9F30 ;  H-Scroll (7:0)
003173r 1               VERA_L0_HSCROLL_H = $9F31 ;  - H-Scroll (11:8)
003173r 1               VERA_L0_VSCROLL_L = $9F32 ;  V-Scroll (7:0)
003173r 1               VERA_L0_VSCROLL_H = $9F33 ;  - V-Scroll (11:8)
003173r 1               
003173r 1               VERA_L1_config    = $9F34
003173r 1               VERA_L1_mapbase   = $9F35
003173r 1               VERA_L1_tilebase  = $9F36
003173r 1               VERA_L1_HSCROLL_L = $9F37 ;  H-Scroll (7:0)
003173r 1               VERA_L1_HSCROLL_H = $9F38 ;  - H-Scroll (11:8)
003173r 1               VERA_L1_VSCROLL_L = $9F39 ;  V-Scroll (7:0)
003173r 1               VERA_L1_VSCROLL_H = $9F3A ;  - V-Scroll (11:8)
003173r 1               
003173r 1               VSYNC_BIT         = $01
003173r 1               
003173r 1               ; VRAM Addresses
003173r 1               ;   Address range Description
003173r 1               ;   $00000 - $1F9BF Video RAM   - 129,424 bytes -> 126K is 129,024 (1F800)
003173r 1               ;   $1F9C0 - $1F9FF PSG registers
003173r 1               ;   $1FA00 - $1FBFF Palette
003173r 1               ;   $1FC00 - $1FFFF Sprite attributes
003173r 1               
003173r 1               VRAM_UNRESERVED   = $1A000      ;
003173r 1               ; sprite starts must be 32byte aligned...
003173r 1               ; only can go to 126K ...
003173r 1               VRAM_palette      = $1FA00      ;
003173r 1               VRAM_sprite_attributes = $1FC00
003173r 1               
003173r 1               SPRITES_ONLY_VGA = $41
003173r 1               
003173r 1               
003173r 1               
003173r 1               ; Kernal
003173r 1               CHROUT            = $FFD2
003173r 1               GETIN             = $FFE4
003173r 1               CINT              = $FF81
003173r 1               
003173r 1               
003173r 1               ; PETSCII Codes
003173r 1               WHITE             = $05
003173r 1               RETURN            = $0D
003173r 1               SPACE             = $20
003173r 1               ZERO_CHAR         = $30
003173r 1               SIX_CHAR          = $36
003173r 1               NINE_CHAR         = $39
003173r 1               
003173r 1               A_CHAR            = $41
003173r 1               C_CHAR            = $43
003173r 1               D_CHAR            = $44
003173r 1               E_CHAR            = $45
003173r 1               I_CHAR            = $49
003173r 1               J_CHAR            = $4A
003173r 1               K_CHAR            = $4B
003173r 1               L_CHAR            = $4C
003173r 1               O_CHAR            = $4F
003173r 1               T_CHAR            = $54
003173r 1               W_CHAR            = $57
003173r 1               X_CHAR            = $58
003173r 1               Y_CHAR            = $59
003173r 1               Z_CHAR            = $5A
003173r 1               
003173r 1               CLR               = $93
003173r 1               
003173r 1               ; 	$0800-$9EFF	BASIC program/variables; available to the user
003173r 1               WORLD_DATA = $6000 	;	so is %100 [Y 5 bits ] : [ab] 0 [X - 6 bits
003173r 1               SCREEN_buffer = $8000
003173r 1               
003173r 1               ; zero page layout $0022-$007F is available to user
003173r 1               ZP_PTR = $22
003173r 1               SCRATCH_PTR = $7E
003173r 1               
003173r 1               SPRITE_SIZE_ORA = $D0 ; $D0 for 16x64, $50 for 16x16
003173r 1               
003173r 1               diff_sprite_to_transparent = 15
003173r 1               
003173r 1               ; global data ; 2E00
003173r 1  DE AD BE EF  .byte $DE,$AD,$BE,$EF ; 0-3
003177r 1  00 00        default_irq_vector:  .addr 0 ; 4-5
003179r 1  01           VSYNC_counter:       .byte 1 ; 6
00317Ar 1  01           camera_facing: 		 .byte 1 ; 7
00317Br 1  2C           camera_world_pos_XH:    .byte 44 ; 8
00317Cr 1  30           camera_world_pos_XL:       .byte 48 ; 9
00317Dr 1  0F           camera_world_pos_YH:        .byte 15 ; A
00317Er 1  80           camera_world_pos_YL:       .byte 128  ; B
00317Fr 1  00           camera_cell_x: 		 .byte 0 ; c
003180r 1  00           camera_cell_xl:       .byte 0 ; d
003181r 1  00           DEBUG_A: .byte 0  ; 12
003182r 1  00           DEBUG_B: .byte 0  ; 13
003183r 1  00           DEBUG_C: .byte 0
003184r 1  00           DEBUG_D: .byte 0
003185r 1  00           camera_cell_y: 		 .byte 0 ; e
003186r 1  00           camera_cell_yl:       .byte 0 ; f
003187r 1  00 00        MASTER_CLOCK:        .addr 0 ; 10-11
003189r 1  00           CAMERA_CENTER_XL:    .byte 0 ; 13
00318Ar 1  00           CAMERA_CENTER_XH:    .byte 0 ; 14
00318Br 1  00           CAMERA_CENTER_YL:    .byte 0 ; 15
00318Cr 1  00           CAMERA_CENTER_YH:    .byte 0 ; 16
00318Dr 1  00           WORLD_SPRITE_NUM:    .byte 0 ; 12
00318Er 1  00           CAMERA_CENTER_TOP_PX: .byte 0 ; 13
00318Fr 1  00 00        CAMERA_CELL_LINE_PTR: .addr 0 ; 14-15
003191r 1               
003191r 1               .macro stash_scratch
003191r 1               	STA (SCRATCH_PTR)
003191r 1                   INC SCRATCH_PTR
003191r 1               .endmacro
003191r 1               
003191r 1               custom_irq_handler: ; 2E12
003191r 1  AD 27 9F        lda VERA_isr
003194r 1  29 01           and #VSYNC_BIT
003196r 1  F0 03           beq @continue ; non-VSYNC IRQ, no tick update
003198r 1  EE rr rr        inc VSYNC_counter
00319Br 1               @continue:
00319Br 1                  ; continue to default IRQ handler
00319Br 1  6C rr rr        jmp (default_irq_vector)
00319Er 1                  ; RTI will happen after jump
00319Er 1               
00319Er 1               start:
00319Er 1                 ; start of program - init globals
00319Er 1  AD 14 03       lda IRQVec
0031A1r 1  8D rr rr       sta default_irq_vector
0031A4r 1  AD 15 03       lda IRQVec+1
0031A7r 1  8D rr rr       sta default_irq_vector+1
0031AAr 1               
0031AAr 1  9C 29 9F       stz VERA_dc_video   ; disable display
0031ADr 1  A9 2B          lda #43 ; set scale for bitmap mode - going for 215x161 mode
0031AFr 1  8D 2A 9F       sta VERA_dc_hscale
0031B2r 1  8D 2B 9F       sta VERA_dc_vscale
0031B5r 1                 ; for now no L0 or L1
0031B5r 1               
0031B5r 1                 ; let's stick that test sprite data into VRAM at zero for now..
0031B5r 1  9C 25 9F       stz VERA_ctrl
0031B8r 1  9C 20 9F       stz VERA_addr_low
0031BBr 1  9C 21 9F       stz VERA_addr_high
0031BEr 1  A9 10          lda #$10
0031C0r 1  8D 22 9F       sta VERA_addr_bank
0031C3r 1                 ; load test VRAM data
0031C3r 1               
0031C3r 1                 ; is 512 bytes at test_cell_sprite label
0031C3r 1  A0 00          ldy #0
0031C5r 1               
0031C5r 1  A9 rr          LDA #<test_vram_data
0031C7r 1  85 22          STA ZP_PTR
0031C9r 1  A9 rr          LDA #>test_vram_data
0031CBr 1  85 23          STA ZP_PTR+1
0031CDr 1  A2 40          LDX #64   ;   num pages to copy - 16 pages / 8K  - sprite addr 0-255
0031CFr 1  80 02          BRA :++
0031D1r 1                 :
0031D1r 1  E6 23             INC ZP_PTR+1
0031D3r 1                   :
0031D3r 1  B1 22              LDA (ZP_PTR),Y
0031D5r 1  8D 23 9F           STA VERA_data0
0031D8r 1  C8                 INY
0031D9r 1  D0 F8              BNE :-
0031DBr 1  CA                DEX
0031DCr 1  D0 F3             BNE :--
0031DEr 1               
0031DEr 1                 ; initialize some waves
0031DEr 1  64 22          STZ ZP_PTR
0031E0r 1  A9 rr          LDA #>TUB_WORLD
0031E2r 1  85 23          STA ZP_PTR+1
0031E4r 1  A9 08          LDA #8
0031E6r 1  85 24          STA ZP_PTR+2 ; for use as page counter..
0031E8r 1  A2 00          LDX #0
0031EAr 1  B1 22          : LDA (ZP_PTR),y ; grab world data
0031ECr 1  C9 80            CMP #128       ; is outside or inside tub?
0031EEr 1  B0 0B            BCS :+         ; skip this one
0031F0r 1  8A               TXA
0031F1r 1  91 22            STA (ZP_PTR),y
0031F3r 1  E8               INX
0031F4r 1  E8               INX
0031F5r 1  E8               INX
0031F6r 1  E8               INX
0031F7r 1  E0 34            CPX #52
0031F9r 1  B0 0B            BCS :++
0031FBr 1  C8             : INY
0031FCr 1  D0 EC            BNE :--
0031FEr 1  E6 23            INC ZP_PTR+1
003200r 1  C6 24            DEC ZP_PTR+2
003202r 1  D0 E6            BNE :--
003204r 1  80 18            BRA :+++
003206r 1  B1 22          : LDA (ZP_PTR),y
003208r 1  C9 80            CMP #128       ; is outside or inside tub?
00320Ar 1  B0 09            BCS :+         ; skip this one
00320Cr 1  8A               TXA
00320Dr 1  91 22            STA (ZP_PTR),y
00320Fr 1  CA               DEX
003210r 1  CA               DEX
003211r 1  CA               DEX
003212r 1  CA               DEX
003213r 1  F0 E6            BEQ :--
003215r 1  C8             : INY
003216r 1  D0 EE            BNE :--
003218r 1  E6 23            INC ZP_PTR+1
00321Ar 1  C6 24            DEC ZP_PTR+2
00321Cr 1  D0 E8            BNE :--
00321Er 1                 :
00321Er 1                 ; write sprite test data
00321Er 1  A9 FF          LDA #255
003220r 1  8D 20 9F       STA VERA_addr_low
003223r 1  A9 FC          lda #>VRAM_sprite_attributes
003225r 1  8D 21 9F       sta VERA_addr_high
003228r 1  A9 19          lda #$19   ;  decrement 1 bank 1
00322Ar 1  8D 22 9F       sta VERA_addr_bank
00322Dr 1  A2 FF          LDX #255
00322Fr 1                 :
00322Fr 1  BD rr rr         LDA test_sprite_data,X
003232r 1  8D 23 9F         STA VERA_data0
003235r 1  CA               DEX
003236r 1  D0 F7            BNE :-
003238r 1  BD rr rr        LDA test_sprite_data,X
00323Br 1  8D 23 9F        STA VERA_data0
00323Er 1               
00323Er 1               
00323Er 1                 ; write custom palette data  - 16 colors only for now.. $1:FA00-$1:FBFF   VERA Color Palette (256 x 2 bytes)
00323Er 1  A2 1F          LDX #31
003240r 1  8E 20 9F       STX VERA_addr_low
003243r 1  A9 FA          LDA #$FA
003245r 1  8D 21 9F       STA VERA_addr_high
003248r 1  A9 19          LDA #$19
00324Ar 1  8D 22 9F       STA VERA_addr_bank
00324Dr 1                 :
00324Dr 1  BD rr rr         LDA test_optimal_pal_data,X
003250r 1  8D 23 9F         STA VERA_data0
003253r 1  CA               DEX
003254r 1  D0 F7            BNE :-
003256r 1  BD rr rr       LDA test_optimal_pal_data,X
003259r 1  8D 23 9F       STA VERA_data0
00325Cr 1               
00325Cr 1                 ; enable display
00325Cr 1  9C 25 9F       stz VERA_ctrl
00325Fr 1  A9 41          lda #SPRITES_ONLY_VGA
003261r 1  8D 29 9F       sta VERA_dc_video
003264r 1               
003264r 1                 ; overwrite RAM IRQ vector with custom handler address
003264r 1  78             sei ; disable IRQ while vector is changing
003265r 1  A9 rr          lda #<custom_irq_handler
003267r 1  8D 14 03       sta IRQVec
00326Ar 1  A9 rr          lda #>custom_irq_handler
00326Cr 1  8D 15 03       sta IRQVec+1
00326Fr 1  A9 01          lda #VSYNC_BIT ; make VERA only generate VSYNC IRQs
003271r 1  8D 26 9F       sta VERA_ien
003274r 1  58             cli ; enable IRQ now that vector is properly set
003275r 1               
003275r 1               
003275r 1                 ; main loop here...
003275r 1  9C rr rr        STZ camera_facing
003278r 1               
003278r 1               @camera_world_changed:
003278r 1                  ; copy over cell YL as-is
003278r 1  AD rr rr        LDA camera_world_pos_YL
00327Br 1  8D rr rr        STA camera_cell_yl
00327Er 1                  ; YH gets copied over ..
00327Er 1  AD rr rr        LDA camera_world_pos_YH
003281r 1  8D rr rr        STA camera_cell_y
003284r 1                  ; cellX = WORLDX*ratio - floor(cellY)/2
003284r 1                  ;  halve floor(cellY)
003284r 1  4A              LSR
003285r 1  85 7F           STA $7F ; stash it for scratch
003287r 1  A9 00           LDA #0
003289r 1  6A              ROR
00328Ar 1  85 7E           STA $7E ; and there's the half..
00328Cr 1               
00328Cr 1  AE rr rr        LDX camera_world_pos_XH
00328Fr 1  AC rr rr        LDY camera_world_pos_XL
003292r 1  18              CLC
003293r 1  B9 rr rr        LDA WORLD_TO_CELL_XH,Y ; that bit from pos_XL
003296r 1  7D rr rr        ADC WORLD_TO_CELL_XL,X ; plus the bit from pos_XH
003299r 1  A8              TAY   ;  cellXL from ratio
00329Ar 1  BD rr rr        LDA WORLD_TO_CELL_XH,X
00329Dr 1  69 00           ADC #0 ; gotta do that carry and all ..
00329Fr 1  AA              TAX   ; cellXH from ratio
0032A0r 1               
0032A0r 1  98              TYA
0032A1r 1  38              SEC
0032A2r 1  E5 7E           SBC $7E
0032A4r 1  8D rr rr        STA camera_cell_xl
0032A7r 1  8A              TXA
0032A8r 1  E5 7F           SBC $7F
0032AAr 1  8D rr rr        STA camera_cell_x
0032ADr 1  4C rr rr        jmp @do_update
0032B0r 1               
0032B0r 1               @camera_cell_changed: ; run through this more as a normalization step for camera..
0032B0r 1                  ; worldX = scaled(floor(cellY)/2 + cellX )
0032B0r 1  AD rr rr        LDA camera_cell_yl
0032B3r 1  8D rr rr        STA camera_world_pos_YL
0032B6r 1  AD rr rr        LDA camera_cell_y
0032B9r 1  8D rr rr        STA camera_world_pos_YH
0032BCr 1  4A              LSR
0032BDr 1  AA              TAX  ; high byte floor(Y)/2
0032BEr 1  A9 00           LDA #0
0032C0r 1  6A              ROR ; either is zero or 128 now ... either way, carry is cleared.
0032C1r 1  6D rr rr        ADC camera_cell_xl
0032C4r 1  A8              TAY ; stash the low to byte
0032C5r 1  8A              TXA ; high byte floor (Y)/2 .. ready for adding
0032C6r 1  6D rr rr        ADC camera_cell_x
0032C9r 1  AA              TAX ; stash high byte ... carry _should_ be cleared unless X >255 ... ?
0032CAr 1  B9 rr rr        LDA CELL_LOW_TO_WORLD_XL,Y
0032CDr 1  7D rr rr        ADC CELL_TO_WORLD_XL,X
0032D0r 1  8D rr rr        STA camera_world_pos_XL
0032D3r 1  B9 rr rr        LDA CELL_LOW_TO_WORLD_XH,Y
0032D6r 1  7D rr rr        ADC CELL_TO_WORLD_XH,X
0032D9r 1  8D rr rr        STA camera_world_pos_XH
0032DCr 1                  ;  jmp @do_update ; superfluous currently. redundant even..
0032DCr 1               
0032DCr 1               
0032DCr 1               @do_update:
0032DCr 1                  ;  set up screen center stuff
0032DCr 1               
0032DCr 1               
0032DCr 1  AD rr rr        LDA camera_facing
0032DFr 1  29 7F           AND #127
0032E1r 1  AA              TAX
0032E2r 1  BD rr rr        LDA WORLD_SPRITE_NUM_lookies,X
0032E5r 1  8D rr rr        STA WORLD_SPRITE_NUM
0032E8r 1  BD rr rr        LDA WORLD_SPRITE_CENTER_XL,X
0032EBr 1  8D rr rr        STA CAMERA_CENTER_XL
0032EEr 1  BD rr rr        LDA WORLD_SPRITE_CENTER_XH,X
0032F1r 1  8D rr rr        STA CAMERA_CENTER_XH
0032F4r 1               
0032F4r 1  BD rr rr        LDA WORLD_SPRITE_CENTER_YL,X
0032F7r 1  8D rr rr        STA CAMERA_CENTER_YL
0032FAr 1  BD rr rr        LDA WORLD_SPRITE_CENTER_YH,X
0032FDr 1  8D rr rr        STA CAMERA_CENTER_TOP_PX
003300r 1               
003300r 1  AE rr rr         LDX camera_facing
003303r 1               
003303r 1  AD rr rr         LDA camera_cell_xl
003306r 1  4A               LSR ;   /2
003307r 1  4A               LSR ;   /4
003308r 1  4A               LSR ;   /8
003309r 1  4A               LSR ;   /16
00330Ar 1  38               SEC
00330Br 1  E9 08            SBC #8 ;   subtract le middle..
00330Dr 1  A8               TAY
00330Er 1  B0 29            BCS :++    ;  is positive..
003310r 1  18             : CLC
003311r 1  AD rr rr         LDA CAMERA_CENTER_XL
003314r 1  7D rr rr         ADC SUBCELL_X_COS_L,X
003317r 1  8D rr rr         STA CAMERA_CENTER_XL
00331Ar 1  AD rr rr         LDA CAMERA_CENTER_XH
00331Dr 1  7D rr rr         ADC SUBCELL_X_COS_H,X
003320r 1  8D rr rr         STA CAMERA_CENTER_XH
003323r 1  38               SEC
003324r 1  AD rr rr         LDA CAMERA_CENTER_YL
003327r 1  FD rr rr         SBC SUBCELL_Y_SIN_L,X
00332Ar 1  8D rr rr         STA CAMERA_CENTER_YL
00332Dr 1  AD rr rr         LDA CAMERA_CENTER_TOP_PX
003330r 1  FD rr rr         SBC SUBCELL_Y_SIN_H,X
003333r 1  8D rr rr         STA CAMERA_CENTER_TOP_PX
003336r 1  C8               INY
003337r 1  D0 D7            BNE :-
003339r 1  F0 29          : BEQ :++
00333Br 1  38             : SEC
00333Cr 1  AD rr rr         LDA CAMERA_CENTER_XL
00333Fr 1  FD rr rr         SBC SUBCELL_X_COS_L,X
003342r 1  8D rr rr         STA CAMERA_CENTER_XL
003345r 1  AD rr rr         LDA CAMERA_CENTER_XH
003348r 1  FD rr rr         SBC SUBCELL_X_COS_H,X
00334Br 1  8D rr rr         STA CAMERA_CENTER_XH
00334Er 1  18               CLC
00334Fr 1  AD rr rr         LDA CAMERA_CENTER_YL
003352r 1  7D rr rr         ADC SUBCELL_Y_SIN_L,X
003355r 1  8D rr rr         STA CAMERA_CENTER_YL
003358r 1  AD rr rr         LDA CAMERA_CENTER_TOP_PX
00335Br 1  7D rr rr         ADC SUBCELL_Y_SIN_H,X
00335Er 1  8D rr rr         STA CAMERA_CENTER_TOP_PX
003361r 1  88               DEY
003362r 1  D0 D7            BNE :-
003364r 1                 :
003364r 1               
003364r 1  AD rr rr         LDA camera_cell_yl
003367r 1  4A               LSR ;   /2
003368r 1  4A               LSR ;   /4
003369r 1  4A               LSR ;   /8
00336Ar 1  4A               LSR ;   /16
00336Br 1  38               SEC
00336Cr 1  E9 08            SBC #8 ;   subtract le middle..
00336Er 1  A8               TAY
00336Fr 1  B0 29            BCS :++    ;  is positive..
003371r 1  18             : CLC
003372r 1  AD rr rr         LDA CAMERA_CENTER_XL
003375r 1  7D rr rr         ADC SUBCELL_X_SIN_L,X
003378r 1  8D rr rr         STA CAMERA_CENTER_XL
00337Br 1  AD rr rr         LDA CAMERA_CENTER_XH
00337Er 1  7D rr rr         ADC SUBCELL_X_SIN_H,X
003381r 1  8D rr rr         STA CAMERA_CENTER_XH
003384r 1  18               CLC
003385r 1  AD rr rr         LDA CAMERA_CENTER_YL
003388r 1  7D rr rr         ADC SUBCELL_Y_COS_L,X
00338Br 1  8D rr rr         STA CAMERA_CENTER_YL
00338Er 1  AD rr rr         LDA CAMERA_CENTER_TOP_PX
003391r 1  7D rr rr         ADC SUBCELL_Y_COS_H,X
003394r 1  8D rr rr         STA CAMERA_CENTER_TOP_PX
003397r 1  C8               INY
003398r 1  D0 D7            BNE :-
00339Ar 1  F0 29          : BEQ :++
00339Cr 1  38             : SEC
00339Dr 1  AD rr rr         LDA CAMERA_CENTER_XL
0033A0r 1  FD rr rr         SBC SUBCELL_X_SIN_L,X
0033A3r 1  8D rr rr         STA CAMERA_CENTER_XL
0033A6r 1  AD rr rr         LDA CAMERA_CENTER_XH
0033A9r 1  FD rr rr         SBC SUBCELL_X_SIN_H,X
0033ACr 1  8D rr rr         STA CAMERA_CENTER_XH
0033AFr 1               
0033AFr 1  38               SEC
0033B0r 1  AD rr rr         LDA CAMERA_CENTER_YL
0033B3r 1  FD rr rr         SBC SUBCELL_Y_COS_L,X
0033B6r 1  8D rr rr         STA CAMERA_CENTER_YL
0033B9r 1  AD rr rr         LDA CAMERA_CENTER_TOP_PX
0033BCr 1  FD rr rr         SBC SUBCELL_Y_COS_H,X
0033BFr 1  8D rr rr         STA CAMERA_CENTER_TOP_PX
0033C2r 1  88               DEY
0033C3r 1  D0 D7            BNE :-
0033C5r 1                 :
0033C5r 1                  ;  set up tub pointer .. this will let us grab the height value for current location..
0033C5r 1  64 7E            STZ $7E
0033C7r 1  AD rr rr         LDA camera_cell_y
0033CAr 1  4A               LSR  ;  y pages of 128
0033CBr 1  66 7E            ROR $7E
0033CDr 1  4A               LSR  ; y pages of 64 !
0033CEr 1  66 7E            ROR $7E
0033D0r 1  69 rr            ADC #>TUB_WORLD
0033D2r 1  85 7F            STA $7F
0033D4r 1  8D rr rr         STA CAMERA_CELL_LINE_PTR+1
0033D7r 1  A5 7E            LDA $7E
0033D9r 1  8D rr rr         STA CAMERA_CELL_LINE_PTR
0033DCr 1               
0033DCr 1  AC rr rr         LDY camera_cell_x
0033DFr 1  B1 7E            LDA ($7E),y
0033E1r 1  C9 56            CMP #86 ; is largest value we will allow .. accounts for tub heights..
0033E3r 1  90 02            BCC :+
0033E5r 1  A9 56            LDA #86    ;
0033E7r 1  A8              : TAY
0033E8r 1               
0033E8r 1  18              CLC
0033E9r 1  AD rr rr        LDA CAMERA_CENTER_YL
0033ECr 1  79 rr rr        ADC CONVERT_HEIGHTS_PIXELS_L,Y
0033EFr 1  8D rr rr        STA CAMERA_CENTER_YL
0033F2r 1  AD rr rr        LDA CAMERA_CENTER_TOP_PX
0033F5r 1  79 rr rr        ADC CONVERT_HEIGHTS_PIXELS,Y
0033F8r 1  8D rr rr        STA CAMERA_CENTER_YH
0033FBr 1               
0033FBr 1                  ; clear the object list ...
0033FBr 1  9C rr rr         STZ OBJECT_LIST_BYTE6_NEXT ; because we can't use zero anyway..
0033FEr 1  A9 0C            LDA #$0C ; is basis for all the z_flips <- this may change depending on orientation..
003400r 1  A2 00            LDX #0
003402r 1  9E rr rr         : STZ OBJECT_LIST_Z_START_POINTERS,X
003405r 1  9E rr rr           STZ OBJECT_LIST_BYTE1_MODE,X          ; 16 color / low address
003408r 1  9C rr rr           STZ OBJECT_LIST_BYTE2_X
00340Br 1  9D rr rr           STA OBJECT_LIST_BYTE4_ZFLIPS,X
00340Er 1  9D rr rr           STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
003411r 1  E8                 INX
003412r 1  D0 EE              BNE :-
003414r 1               
003414r 1  A9 D0            LDA #SPRITE_SIZE_ORA
003416r 1  9D rr rr         : STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
003419r 1  E8                 INX
00341Ar 1  D0 FA              BNE :-
00341Cr 1  AD rr rr         LDA WORLD_SPRITE_NUM
00341Fr 1  9D rr rr         : STA OBJECT_LIST_BYTE0_ADDRLOW,X ; 01.3456 done .
003422r 1  E8                 INX
003423r 1  D0 FA              BNE :-
003425r 1               
003425r 1               
003425r 1  20 rr rr        jsr push_world_to_object_list
003428r 1               
003428r 1  AE rr rr        LDX OBJECT_LIST_BYTE6_NEXT
00342Br 1  8E rr rr        STX DEBUG_C
00342Er 1               
00342Er 1                  ;  write location datas..
00342Er 1  A9 F8           lda #248
003430r 1  8D 20 9F        STA VERA_addr_low
003433r 1  A9 FC           LDA #$FC
003435r 1  8D 21 9F        STA VERA_addr_high
003438r 1  A9 49           LDA #$49
00343Ar 1  8D 22 9F        STA VERA_addr_bank
00343Dr 1               
00343Dr 1               
00343Dr 1  A0 0A           ldy #10
00343Fr 1  BE rr rr      : LDX camera_facing-1,y
003442r 1  BD rr rr        LDA SPRITE_NUM_LOW_NIBBLE,X
003445r 1  8D 23 9F        STA VERA_data0
003448r 1  BD rr rr        LDA SPRITE_NUM_HIGH_NIBBLE,X
00344Br 1  8D 23 9F        STA VERA_data0
00344Er 1  88              dey
00344Fr 1  D0 EE           BNE :-
003451r 1               
003451r 1               
003451r 1  20 rr rr        jsr draw_object_list
003454r 1               
003454r 1               
003454r 1               @FRAME_CHECK:
003454r 1  CB              wai
003455r 1  AD rr rr        lda VSYNC_counter
003458r 1  F0 FA           beq @FRAME_CHECK
00345Ar 1  9C rr rr        stz VSYNC_counter
00345Dr 1  18              CLC
00345Er 1  6D rr rr        ADC MASTER_CLOCK
003461r 1  AA              TAX
003462r 1  8D rr rr        STA MASTER_CLOCK
003465r 1  AD rr rr        LDA MASTER_CLOCK+1
003468r 1  69 00           ADC #0
00346Ar 1  8D rr rr        STA MASTER_CLOCK+1
00346Dr 1  8A              TXA
00346Er 1  29 01           AND #1 ; restrict to 30 fps.. don't care missed cycle.
003470r 1  D0 E2           BNE @FRAME_CHECK
003472r 1                  ; poll keyboard for input
003472r 1  20 E4 FF        jsr GETIN
003475r 1  C9 00           cmp #0
003477r 1  F0 DB           beq @FRAME_CHECK
003479r 1  C9 1D           cmp #$1D 	;	cursor right
00347Br 1  D0 06           BNE :+
00347Dr 1  EE rr rr        INC camera_facing
003480r 1  4C rr rr        JMP @do_update
003483r 1                  :
003483r 1  C9 9D           cmp  #$9D 	;	cursor left
003485r 1  D0 06           BNE :+
003487r 1  CE rr rr        DEC camera_facing
00348Ar 1  4C rr rr        JMP @do_update
00348Dr 1  C9 11         : cmp #$11; cursor down
00348Fr 1  D0 2C           BNE :+
003491r 1  AE rr rr        LDX camera_facing
003494r 1  38              SEC
003495r 1  AD rr rr        LDA camera_world_pos_XL
003498r 1  FD rr rr        SBC MOVE_X_L,X
00349Br 1  8D rr rr        STA camera_world_pos_XL
00349Er 1  AD rr rr        LDA camera_world_pos_XH
0034A1r 1  FD rr rr        SBC MOVE_X_H,X
0034A4r 1  8D rr rr        STA camera_world_pos_XH
0034A7r 1  18              CLC
0034A8r 1  AD rr rr        LDA camera_world_pos_YL
0034ABr 1  7D rr rr        ADC MOVE_Y_L,X
0034AEr 1  8D rr rr        STA camera_world_pos_YL
0034B1r 1  AD rr rr        LDA camera_world_pos_YH
0034B4r 1  7D rr rr        ADC MOVE_Y_H,X
0034B7r 1  8D rr rr        STA camera_world_pos_YH
0034BAr 1  4C rr rr        jmp @camera_world_changed
0034BDr 1               
0034BDr 1  C9 91         : cmp #$91 ; cursor up
0034BFr 1  D0 2C           BNE :+
0034C1r 1  AE rr rr        LDX camera_facing
0034C4r 1  18              CLC
0034C5r 1  AD rr rr        LDA camera_world_pos_XL
0034C8r 1  7D rr rr        ADC MOVE_X_L,X
0034CBr 1  8D rr rr        STA camera_world_pos_XL
0034CEr 1  AD rr rr        LDa camera_world_pos_XH
0034D1r 1  7D rr rr        ADC MOVE_X_H,X
0034D4r 1  8D rr rr        STA camera_world_pos_XH
0034D7r 1  38              SEC
0034D8r 1  AD rr rr        LDA camera_world_pos_YL
0034DBr 1  FD rr rr        SBC MOVE_Y_L,X
0034DEr 1  8D rr rr        STA camera_world_pos_YL
0034E1r 1  AD rr rr        LDA camera_world_pos_YH
0034E4r 1  FD rr rr        SBC MOVE_Y_H,X
0034E7r 1  8D rr rr        STA camera_world_pos_YH
0034EAr 1  4C rr rr        jmp @camera_world_changed
0034EDr 1               
0034EDr 1  C9 45         : cmp  #E_CHAR ; cell up right
0034EFr 1  D0 15           BNE :+++
0034F1r 1  AD rr rr        LDA camera_cell_y
0034F4r 1  F0 03           BEQ :+
0034F6r 1  CE rr rr        DEC camera_cell_y
0034F9r 1  AD rr rr      : LDA camera_cell_x
0034FCr 1  C9 3F           CMP #63
0034FEr 1  B0 03           BCS :+
003500r 1  EE rr rr        INC camera_cell_x
003503r 1  4C rr rr      : JMP @camera_cell_changed
003506r 1               
003506r 1  C9 57         : cmp #W_CHAR ; cell up left
003508r 1  D0 0B           BNE :++
00350Ar 1  AD rr rr        LDA camera_cell_y
00350Dr 1  F0 03           BEQ :+
00350Fr 1  CE rr rr        DEC camera_cell_y
003512r 1  4C rr rr      : JMP @camera_cell_changed
003515r 1               
003515r 1  C9 41         : cmp #A_CHAR ; cell left
003517r 1  D0 0B           BNE :++
003519r 1  AD rr rr        LDA camera_cell_x
00351Cr 1  F0 03           BEQ :+
00351Er 1  CE rr rr        DEC camera_cell_x
003521r 1  4C rr rr      : JMP @camera_cell_changed
003524r 1               
003524r 1  C9 44         : cmp #D_CHAR ; cell right
003526r 1  D0 0D           BNE :++
003528r 1  AD rr rr        LDA camera_cell_x
00352Br 1  C9 3F           CMP #63
00352Dr 1  B0 03           BCS :+
00352Fr 1  EE rr rr        INC camera_cell_x
003532r 1  4C rr rr      : JMP @camera_cell_changed
003535r 1               
003535r 1  C9 58         : cmp #X_CHAR ; cell down right
003537r 1  D0 0D           BNE :++
003539r 1  AD rr rr        LDA camera_cell_y
00353Cr 1  C9 1E           CMP #30
00353Er 1  B0 03           BCS :+
003540r 1  EE rr rr        INC camera_cell_y
003543r 1  4C rr rr      : JMP @camera_cell_changed
003546r 1               
003546r 1  C9 5A         : cmp  #Z_CHAR ; cell down left
003548r 1  D0 15           BNE :+++
00354Ar 1  AD rr rr        LDA camera_cell_y
00354Dr 1  C9 1E           CMP #30
00354Fr 1  B0 03           BCS :+
003551r 1  EE rr rr        INC camera_cell_y
003554r 1  AD rr rr      : LDA camera_cell_x
003557r 1  F0 03           BEQ :+
003559r 1  CE rr rr        DEC camera_cell_x
00355Cr 1  4C rr rr      : JMP @camera_cell_changed
00355Fr 1               
00355Fr 1  C9 20         : cmp #SPACE;
003561r 1  D0 09           BNE :+
003563r 1  9C rr rr        STZ camera_cell_xl
003566r 1  9C rr rr        STZ camera_cell_yl
003569r 1  4C rr rr        JMP @camera_cell_changed
00356Cr 1               
00356Cr 1  C9 49         : cmp #I_CHAR ; cell y - 1/16
00356Er 1  D0 25           BNE :++
003570r 1  38              SEC
003571r 1  AD rr rr        LDA camera_cell_yl
003574r 1  E9 10           SBC #16
003576r 1  8D rr rr        STA camera_cell_yl
003579r 1  B0 17           BCS :+
00357Br 1  AD rr rr        LDA camera_cell_y
00357Er 1  F0 12           BEQ :+
003580r 1  3A              DEC A
003581r 1  8D rr rr        STA camera_cell_y
003584r 1  18              CLC
003585r 1  AD rr rr        LDA camera_cell_xl
003588r 1  69 80           ADC #128
00358Ar 1  8D rr rr        STA camera_cell_xl
00358Dr 1  90 03           BCC :+
00358Fr 1  EE rr rr        INC camera_cell_x
003592r 1  4C rr rr      : JMP @camera_cell_changed
003595r 1               
003595r 1  C9 4A         : cmp #J_CHAR ; cell x - 1/16
003597r 1  D0 17           BNE :++
003599r 1  38              SEC
00359Ar 1  AD rr rr        LDA camera_cell_xl
00359Dr 1  E9 10           SBC #16
00359Fr 1  8D rr rr        STA camera_cell_xl
0035A2r 1  B0 09           BCS :+
0035A4r 1  AD rr rr        LDA camera_cell_x
0035A7r 1  F0 04           BEQ :+
0035A9r 1  3A              DEC A
0035AAr 1  8D rr rr        STA camera_cell_x
0035ADr 1  4C rr rr      : JMP @camera_cell_changed
0035B0r 1               
0035B0r 1  C9 4B         : cmp #K_CHAR ; cell y + 1/16
0035B2r 1  D0 27           BNE :++
0035B4r 1  18              CLC
0035B5r 1  AD rr rr        LDA camera_cell_yl
0035B8r 1  69 10           ADC #16
0035BAr 1  8D rr rr        STA camera_cell_yl
0035BDr 1  90 19           BCC :+
0035BFr 1  AD rr rr        LDA camera_cell_y
0035C2r 1  C9 1F           CMP #31
0035C4r 1  B0 12           BCS :+
0035C6r 1  1A              INC A
0035C7r 1  8D rr rr        STA camera_cell_y
0035CAr 1  38              SEC
0035CBr 1  AD rr rr        LDA camera_cell_xl
0035CEr 1  E9 80           SBC #128
0035D0r 1  8D rr rr        STA camera_cell_xl
0035D3r 1  B0 03           BCS :+
0035D5r 1  CE rr rr        DEC camera_cell_x
0035D8r 1  4C rr rr      : JMP @camera_cell_changed
0035DBr 1               
0035DBr 1  C9 4C         : cmp #L_CHAR ; cell x + 1/16
0035DDr 1  D0 11           BNE :++
0035DFr 1  18              CLC
0035E0r 1  AD rr rr        LDA camera_cell_xl
0035E3r 1  69 10           ADC #16
0035E5r 1  8D rr rr        STA camera_cell_xl
0035E8r 1  90 03           BCC :+
0035EAr 1  EE rr rr        INC camera_cell_x
0035EDr 1  4C rr rr      : JMP @camera_cell_changed
0035F0r 1               
0035F0r 1  C9 00         : cmp #0 ; cell y - 1/16
0035F2r 1  D0 03           BNE :+
0035F4r 1  4C rr rr        JMP @do_update
0035F7r 1               
0035F7r 1  4C rr rr      : JMP @FRAME_CHECK
0035FAr 1               
0035FAr 1               @cleanup_and_exit:
0035FAr 1                  ; restore default IRQ vector
0035FAr 1  78              sei
0035FBr 1  AD rr rr        lda default_irq_vector
0035FEr 1  8D 14 03        sta IRQVec
003601r 1  AD rr rr        lda default_irq_vector+1
003604r 1  8D 15 03        sta IRQVec+1
003607r 1  58              cli
003608r 1  20 81 FF        jsr CINT
00360Br 1  60              rts
00360Cr 1               
00360Cr 1               
00360Cr 1               ; CURRENT
00360Cr 1               push_world_to_object_list: ; as in.. let's try this again?? wait.. missing a STZ ZP_PTR...
00360Cr 1               PWOL_TUB_PTR_AL   = ZP_PTR
00360Cr 1               PWOL_TUB_PTR_AH   = ZP_PTR+1
00360Cr 1               PWOL_TUB_PTR_BL   = ZP_PTR+2
00360Cr 1               PWOL_TUB_PTR_BH   = ZP_PTR+3
00360Cr 1               PWOL_CURRENT_XL   = ZP_PTR+4
00360Cr 1               PWOL_CURRENT_XH   = ZP_PTR+5
00360Cr 1               PWOL_CURRENT_YL   = ZP_PTR+6
00360Cr 1               PWOL_CURRENT_YH   = ZP_PTR+7
00360Cr 1               PWOL_ACROSS_ROW_XL= ZP_PTR+8
00360Cr 1               PWOL_ACROSS_ROW_XH= ZP_PTR+9
00360Cr 1               PWOL_ACROSS_ROW_YL= ZP_PTR+10
00360Cr 1               PWOL_ACROSS_ROW_YH= ZP_PTR+11
00360Cr 1               PWOL_NEXT_ROW_A_LEFT_XL  = ZP_PTR+12
00360Cr 1               PWOL_NEXT_ROW_A_LEFT_XH  = ZP_PTR+13
00360Cr 1               PWOL_NEXT_ROW_A_LEFT_YL  = ZP_PTR+14
00360Cr 1               PWOL_NEXT_ROW_A_LEFT_YH  = ZP_PTR+15
00360Cr 1               PWOL_NEXT_ROW_A_RIGHT_XL  = ZP_PTR+16
00360Cr 1               PWOL_NEXT_ROW_A_RIGHT_XH  = ZP_PTR+17
00360Cr 1               PWOL_NEXT_ROW_A_RIGHT_YL  = ZP_PTR+18
00360Cr 1               PWOL_NEXT_ROW_A_RIGHT_YH  = ZP_PTR+19
00360Cr 1               PWOL_NEXT_ROW_B_LEFT_XL  = ZP_PTR+20
00360Cr 1               PWOL_NEXT_ROW_B_LEFT_XH  = ZP_PTR+21
00360Cr 1               PWOL_NEXT_ROW_B_LEFT_YL  = ZP_PTR+22
00360Cr 1               PWOL_NEXT_ROW_B_LEFT_YH  = ZP_PTR+23
00360Cr 1               PWOL_NEXT_ROW_B_RIGHT_XL  = ZP_PTR+24
00360Cr 1               PWOL_NEXT_ROW_B_RIGHT_XH  = ZP_PTR+25
00360Cr 1               PWOL_NEXT_ROW_B_RIGHT_YL  = ZP_PTR+26
00360Cr 1               PWOL_NEXT_ROW_B_RIGHT_YH  = ZP_PTR+27
00360Cr 1               PWOL_Z_STARTS_PTR = ZP_PTR+28
00360Cr 1               PWOL_Z_STARTS_PTRH = ZP_PTR+29
00360Cr 1               PWOL_CONVERT_HEIGHTS = ZP_PTR+30
00360Cr 1               PWOL_CONVERT_HEIGHTSH= ZP_PTR+31
00360Cr 1               PWOL_CONVERT_HEIGHTS_L = ZP_PTR+32
00360Cr 1               PWOL_CONVERT_HEIGHTS_LH = ZP_PTR+33
00360Cr 1               PWOL_TRIES_COUNTER = ZP_PTR+34
00360Cr 1               PWOL_START_XL = ZP_PTR+35
00360Cr 1               PWOL_START_YL = ZP_PTR+36
00360Cr 1               PWOL_START_XH = ZP_PTR+37
00360Cr 1               PWOL_START_YH = ZP_PTR+38
00360Cr 1               
00360Cr 1               PWOL_START_COS_XL = ZP_PTR+39
00360Cr 1               PWOL_START_COS_XH = ZP_PTR+40
00360Cr 1               PWOL_START_COS_YL = ZP_PTR+41
00360Cr 1               PWOL_START_COS_YH = ZP_PTR+42
00360Cr 1               PWOL_START_SIN_XL = ZP_PTR+43
00360Cr 1               PWOL_START_SIN_XH = ZP_PTR+44
00360Cr 1               PWOL_START_SIN_YL = ZP_PTR+45
00360Cr 1               PWOL_START_SIN_YH = ZP_PTR+46
00360Cr 1               
00360Cr 1               PWOL_camera_cell_xl = ZP_PTR+47
00360Cr 1               PWOL_camera_cell_yl = ZP_PTR+48
00360Cr 1               PWOL_CENTER_Y  =  ZP_PTR+49
00360Cr 1               PWOL_CENTER_Y_TOP     =  ZP_PTR+50
00360Cr 1               
00360Cr 1               TRY_AGAIN = 6
00360Cr 1               SCREEN_MID_X = 108
00360Cr 1               SCREEN_MID_Y =  80
00360Cr 1               SCREEN_OUT_RIGHT  = 164 ; right of middle is 116, +48 = 164
00360Cr 1               SCREEN_OUT_LEFT   =  36 ; left of middle is 100, -48=52-16=36
00360Cr 1               SCREEN_OUT_TOP     = 24
00360Cr 1               SCREEN_OUT_BOTTOM  = 136
00360Cr 1               
00360Cr 1  AD rr rr        LDA CAMERA_CENTER_YH
00360Fr 1  1A              INC A
003610r 1  85 53           STA PWOL_CENTER_Y
003612r 1  AD rr rr        LDA CAMERA_CENTER_TOP_PX
003615r 1  18              CLC
003616r 1  69 0A           ADC #10
003618r 1  85 54           STA PWOL_CENTER_Y_TOP
00361Ar 1               
00361Ar 1               
00361Ar 1  A9 rr           LDA #>CONVERT_HEIGHTS_PIXELS
00361Cr 1  85 41           STA PWOL_CONVERT_HEIGHTSH
00361Er 1  A9 rr           LDA #>CONVERT_HEIGHTS_PIXELS_L
003620r 1  85 43           STA PWOL_CONVERT_HEIGHTS_LH
003622r 1               
003622r 1  A9 rr           LDA #>OBJECT_LIST_Z_START_POINTERS
003624r 1  85 3F           STA PWOL_Z_STARTS_PTRH
003626r 1               
003626r 1  AE rr rr        LDX camera_facing
003629r 1  BD rr rr        LDA ACROSS_ROW_X_L,x    ; 0900  16 wide , 45* tilt ... this is added to go up row, sub for down row
00362Cr 1  85 2A           STA PWOL_ACROSS_ROW_XL
00362Er 1  BD rr rr        LDA ACROSS_ROW_X_H,x
003631r 1  85 2B           STA PWOL_ACROSS_ROW_XH
003633r 1               
003633r 1  BD rr rr        LDA ACROSS_ROW_Y_L,x
003636r 1  85 2C           STA PWOL_ACROSS_ROW_YL
003638r 1  BD rr rr        LDA ACROSS_ROW_Y_H,x
00363Br 1  85 2D           STA PWOL_ACROSS_ROW_YH
00363Dr 1               
00363Dr 1  18              CLC
00363Er 1  BD rr rr        LDA NEXT_ROW_X_L,X  ; 0D00 next row LEFT/up when added
003641r 1  85 2E           STA PWOL_NEXT_ROW_A_LEFT_XL   ; -> next row is left, going up the screen ..  -1,-1
003643r 1  65 2A           ADC PWOL_ACROSS_ROW_XL   ; across row is for right , subtract to go left  +1 -> 0,1
003645r 1  85 32           STA PWOL_NEXT_ROW_A_RIGHT_XL  ;  -> next row is right, going up the screen .. -1,-1
003647r 1  BD rr rr        LDA NEXT_ROW_X_H,x
00364Ar 1  85 2F           STA PWOL_NEXT_ROW_A_LEFT_XH
00364Cr 1  65 2B           ADC PWOL_ACROSS_ROW_XH
00364Er 1  85 33           STA PWOL_NEXT_ROW_A_RIGHT_XH
003650r 1               
003650r 1  18              CLC
003651r 1  BD rr rr        LDA NEXT_ROW_Y_L,X  ; 0F00 next row LEFT/up when added
003654r 1  85 30           STA PWOL_NEXT_ROW_A_LEFT_YL   ; -> next row is left, going up the screen
003656r 1  65 2C           ADC PWOL_ACROSS_ROW_YL   ; across row is for right
003658r 1  85 34           STA PWOL_NEXT_ROW_A_RIGHT_YL  ;  -> next row is right, going up the screen
00365Ar 1  BD rr rr        LDA NEXT_ROW_Y_H,x
00365Dr 1  85 31           STA PWOL_NEXT_ROW_A_LEFT_YH
00365Fr 1  65 2D           ADC PWOL_ACROSS_ROW_YH
003661r 1  85 35           STA PWOL_NEXT_ROW_A_RIGHT_YH
003663r 1               
003663r 1               
003663r 1               ; for zig B , the opposite of left/up is right/down.. so A_LEFT * -1 = B_RIGHT
003663r 1  38              SEC ; flip A_LEFT X to B_RIGHT X
003664r 1  A9 00           LDA #0
003666r 1  E5 2E           SBC PWOL_NEXT_ROW_A_LEFT_XL
003668r 1  85 3A           STA PWOL_NEXT_ROW_B_RIGHT_XL
00366Ar 1  A9 00           LDA #0
00366Cr 1  E5 2F           SBC PWOL_NEXT_ROW_A_LEFT_XH
00366Er 1  85 3B           STA PWOL_NEXT_ROW_B_RIGHT_XH
003670r 1               
003670r 1  38              SEC ; flip A_LEFT Y to B_RIGHT Y
003671r 1  A9 00           LDA #0
003673r 1  E5 30           SBC PWOL_NEXT_ROW_A_LEFT_YL
003675r 1  85 3C           STA PWOL_NEXT_ROW_B_RIGHT_YL
003677r 1  A9 00           LDA #0
003679r 1  E5 31           SBC PWOL_NEXT_ROW_A_LEFT_YH
00367Br 1  85 3D           STA PWOL_NEXT_ROW_B_RIGHT_YH
00367Dr 1               
00367Dr 1  38              SEC ; flip A_RIGHT X to B_LEFT X
00367Er 1  A9 00           LDA #0
003680r 1  E5 32           SBC PWOL_NEXT_ROW_A_RIGHT_XL
003682r 1  85 36           STA PWOL_NEXT_ROW_B_LEFT_XL
003684r 1  A9 00           LDA #0
003686r 1  E5 33           SBC PWOL_NEXT_ROW_A_RIGHT_XH
003688r 1  85 37           STA PWOL_NEXT_ROW_B_LEFT_XH
00368Ar 1               
00368Ar 1  38              SEC ; flip A_RIGHT Y to B_LEFT Y
00368Br 1  A9 00           LDA #0
00368Dr 1  E5 34           SBC PWOL_NEXT_ROW_A_RIGHT_YL
00368Fr 1  85 38           STA PWOL_NEXT_ROW_B_LEFT_YL
003691r 1  A9 00           LDA #0
003693r 1  E5 35           SBC PWOL_NEXT_ROW_A_RIGHT_YH
003695r 1  85 39           STA PWOL_NEXT_ROW_B_LEFT_YH
003697r 1               
003697r 1  AD rr rr        LDA CAMERA_CENTER_XL
00369Ar 1  85 26            STA PWOL_CURRENT_XL
00369Cr 1  85 45            STA PWOL_START_XL
00369Er 1               
00369Er 1  AD rr rr        LDA CAMERA_CENTER_YL
0036A1r 1  85 28            STA PWOL_CURRENT_YL
0036A3r 1  85 46            STA PWOL_START_YL
0036A5r 1               
0036A5r 1  AD rr rr        LDA CAMERA_CENTER_XH
0036A8r 1  85 27            STA PWOL_CURRENT_XH
0036AAr 1  85 47            STA PWOL_START_XH
0036ACr 1               
0036ACr 1               
0036ACr 1  AD rr rr        LDA CAMERA_CENTER_YH
0036AFr 1  85 29            STA PWOL_CURRENT_YH
0036B1r 1  85 48            STA PWOL_START_YH
0036B3r 1               
0036B3r 1  AD rr rr         LDA CAMERA_CELL_LINE_PTR
0036B6r 1  85 22            STA PWOL_TUB_PTR_AL
0036B8r 1  85 24            STA PWOL_TUB_PTR_BL
0036BAr 1  AD rr rr         LDA CAMERA_CELL_LINE_PTR+1
0036BDr 1  85 23            STA PWOL_TUB_PTR_AH
0036BFr 1  85 25            STA PWOL_TUB_PTR_BH
0036C1r 1               
0036C1r 1                 @zigzag_A: ; going to right and up the screen, including where we are currently..
0036C1r 1  AC rr rr         LDY camera_cell_x
0036C4r 1  80 00            BRA @zigzag_A_right
0036C6r 1                  @ZAR_OUT:
0036C6r 1               
0036C6r 1                   @zigzag_A_right:
0036C6r 1  C0 40                CPY #64  ;  make sure we don't go outside level..
0036C8r 1  B0 53                BCS @ZAR_NEXT ; if we're outside we'll just skip is OK here
0036CAr 1  B1 22                LDA (PWOL_TUB_PTR_AL),y
0036CCr 1  C9 81                CMP #129
0036CEr 1  B0 4D                BCS @ZAR_NEXT ; this isn't a valid spot in the level map..
0036D0r 1                       ; bytes 1 and 4 were updated when we cleared the object list
0036D0r 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
0036D3r 1  D0 04                BNE :++
0036D5r 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
0036D8r 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
0036D9r 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
0036DBr 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
0036DEr 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen... (could cause issues if we're high up? can't see behind?)
0036E0r 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
0036E2r 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
0036E4r 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
0036E7r 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
0036EAr 1  8A                   TXA ; push new next to the Z buffer spot
0036EBr 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
0036EDr 1                       ; bytes .1..4.6 filled in already..
0036EDr 1  B1 22                LDA (PWOL_TUB_PTR_AL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
0036EFr 1  10 05                BPL @ZAR_INSIDE_TUB
0036F1r 1                     @ZAR_HIT_WALL_OUCH:
0036F1r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
0036F4r 1  A9 56                  LDA #86 ; max height..
0036F6r 1                     @ZAR_INSIDE_TUB:
0036F6r 1  85 40                  STA PWOL_CONVERT_HEIGHTS ;
0036F8r 1  85 42                  STA PWOL_CONVERT_HEIGHTS_L;
0036FAr 1  38                     SEC
0036FBr 1  A5 28                  LDA PWOL_CURRENT_YL
0036FDr 1  F2 42                  SBC (PWOL_CONVERT_HEIGHTS_L)
0036FFr 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
003701r 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
003703r 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
003706r 1  C5 54                  CMP PWOL_CENTER_Y_TOP ; is this above center on screen??
003708r 1  B0 0E                  BCS :+ ; is not covering us
00370Ar 1  A5 29                  LDA PWOL_CURRENT_YH
00370Cr 1  C5 53                  CMP PWOL_CENTER_Y
00370Er 1  90 08                  BCC :+ ; its from ahead of us, OK
003710r 1                         ; it was from below and covers us ..
003710r 1  BD rr rr               LDA OBJECT_LIST_BYTE0_ADDRLOW,X
003713r 1  69 0F                  ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
003715r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X
003718r 1                         ;LDA #$D0
003718r 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
003718r 1  A5 27                : LDA PWOL_CURRENT_XH
00371Ar 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
00371Dr 1                    @ZAR_NEXT:
00371Dr 1                        ; calc next to the right..
00371Dr 1  C8                    INY
00371Er 1  18                    CLC
00371Fr 1  A5 26                 LDA PWOL_CURRENT_XL
003721r 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
003723r 1  85 26                 STA PWOL_CURRENT_XL
003725r 1  A5 27                 LDA PWOL_CURRENT_XH
003727r 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
003729r 1  85 27                 STA PWOL_CURRENT_XH
00372Br 1  AA                    TAX
00372Cr 1  18                    CLC
00372Dr 1  A5 28                 LDA PWOL_CURRENT_YL
00372Fr 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
003731r 1  85 28                 STA PWOL_CURRENT_YL
003733r 1  A5 29                 LDA PWOL_CURRENT_YH
003735r 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
003737r 1  85 29                 STA PWOL_CURRENT_YH
003739r 1               
003739r 1  8E rr rr              STX DEBUG_A
00373Cr 1  8D rr rr              STA DEBUG_B
00373Fr 1               
00373Fr 1  E0 A4                 CPX #SCREEN_OUT_RIGHT
003741r 1  B0 0F                 BCS @ZAR_ZIG_LEFT_SWITCH
003743r 1  E0 24                 CPX #SCREEN_OUT_LEFT
003745r 1  90 0B                 BCC @ZAR_ZIG_LEFT_SWITCH
003747r 1  C9 18                 CMP #SCREEN_OUT_TOP
003749r 1  90 07                 BCC @ZAR_ZIG_LEFT_SWITCH
00374Br 1  C9 88                 CMP #SCREEN_OUT_BOTTOM
00374Dr 1  B0 03                 BCS @ZAR_ZIG_LEFT_SWITCH
00374Fr 1  4C rr rr              JMP @zigzag_A_right
003752r 1                    @ZAR_ZIG_LEFT_SWITCH: ;PWOL_NEXT_ROW_A_LEFT_XL   ; -> next row is left, going up the screen ..  +0,-1
003752r 1  A9 06                 LDA #TRY_AGAIN
003754r 1  85 44                 STA PWOL_TRIES_COUNTER
003756r 1               ;         INY
003756r 1  38                    SEC
003757r 1  A5 22                 LDA PWOL_TUB_PTR_AL
003759r 1  E9 40                 SBC #64 ;   0,-1
00375Br 1  85 22                 STA PWOL_TUB_PTR_AL
00375Dr 1  A5 23                 LDA PWOL_TUB_PTR_AH
00375Fr 1  E9 00                 SBC #0
003761r 1  C9 rr                 CMP #>TUB_WORLD ; are we inside the world still?
003763r 1  B0 03                 BCS :+
003765r 1  4C rr rr              JMP @zigzag_B
003768r 1  85 23               : STA PWOL_TUB_PTR_AH
00376Ar 1               
00376Ar 1  18                    CLC
00376Br 1  A5 26                 LDA PWOL_CURRENT_XL
00376Dr 1  65 2E                 ADC PWOL_NEXT_ROW_A_LEFT_XL
00376Fr 1  85 26                 STA PWOL_CURRENT_XL
003771r 1  A5 27                 LDA PWOL_CURRENT_XH
003773r 1  65 2F                 ADC PWOL_NEXT_ROW_A_LEFT_XH
003775r 1  85 27                 STA PWOL_CURRENT_XH
003777r 1  AA                    TAX
003778r 1  18                    CLC
003779r 1  A5 28                 LDA PWOL_CURRENT_YL
00377Br 1  65 30                 ADC PWOL_NEXT_ROW_A_LEFT_YL
00377Dr 1  85 28                 STA PWOL_CURRENT_YL
00377Fr 1  A5 29                 LDA PWOL_CURRENT_YH
003781r 1  65 31                 ADC PWOL_NEXT_ROW_A_LEFT_YH
003783r 1  85 29                 STA PWOL_CURRENT_YH
003785r 1                        ; check if we're outside ..
003785r 1               
003785r 1  E0 A4                 CPX #SCREEN_OUT_RIGHT
003787r 1  B0 0C                 BCS @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
003789r 1  E0 24                 CPX #SCREEN_OUT_LEFT
00378Br 1  90 08                 BCC @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
00378Dr 1  C9 18                 CMP #SCREEN_OUT_TOP
00378Fr 1  90 04                 BCC @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
003791r 1  C9 88                 CMP #SCREEN_OUT_BOTTOM
003793r 1  90 33                 BCC @zigzag_A_left
003795r 1                  @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN:
003795r 1  C6 44                 DEC PWOL_TRIES_COUNTER
003797r 1  D0 03                 BNE @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT
003799r 1  4C rr rr              JMP @zigzag_B
00379Cr 1                  @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT:
00379Cr 1  88                    DEY
00379Dr 1  38                    SEC
00379Er 1  A5 26                 LDA PWOL_CURRENT_XL
0037A0r 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
0037A2r 1  85 26                 STA PWOL_CURRENT_XL
0037A4r 1  A5 27                 LDA PWOL_CURRENT_XH
0037A6r 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
0037A8r 1  85 27                 STA PWOL_CURRENT_XH
0037AAr 1  AA                    TAX
0037ABr 1  38                    SEC
0037ACr 1  A5 28                 LDA PWOL_CURRENT_YL
0037AEr 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
0037B0r 1  85 28                 STA PWOL_CURRENT_YL
0037B2r 1  A5 29                 LDA PWOL_CURRENT_YH
0037B4r 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
0037B6r 1  85 29                 STA PWOL_CURRENT_YH
0037B8r 1  E0 A4                 CPX #SCREEN_OUT_RIGHT
0037BAr 1  B0 D9                 BCS @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
0037BCr 1  E0 24                 CPX #SCREEN_OUT_LEFT
0037BEr 1  90 D5                 BCC @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
0037C0r 1  C9 18                 CMP #SCREEN_OUT_TOP
0037C2r 1  90 D1                 BCC @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
0037C4r 1  C9 88                 CMP #SCREEN_OUT_BOTTOM
0037C6r 1  B0 CD                 BCS @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
0037C8r 1                  @zigzag_A_left:
0037C8r 1  C0 40                CPY #64  ;  make sure we don't go outside level..
0037CAr 1  B0 59                BCS @ZAL_NEXT ; if we're outside we'll just skip is OK
0037CCr 1  B1 22                LDA (PWOL_TUB_PTR_AL),y
0037CEr 1  C9 81                CMP #129
0037D0r 1  B0 53                BCS @ZAL_NEXT ; we're outside level.
0037D2r 1               
0037D2r 1                       ; bytes 1 and 4 were updated when we cleared the object list
0037D2r 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
0037D5r 1  D0 04                BNE :++
0037D7r 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
0037DAr 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
0037DBr 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
0037DDr 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
0037E0r 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen...
0037E2r 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
0037E4r 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
0037E6r 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
0037E9r 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
0037ECr 1  8A                   TXA ; push new next to the Z buffer spot
0037EDr 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
0037EFr 1                       ; bytes .1..4.6 filled in already..
0037EFr 1  AD rr rr             LDA WORLD_SPRITE_NUM
0037F2r 1  9D rr rr             STA OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway..
0037F5r 1  B1 22                LDA (PWOL_TUB_PTR_AL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
0037F7r 1  10 05                BPL @ZAL_INSIDE_TUB
0037F9r 1                     @ZAL_HIT_WALL_OUCH:
0037F9r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
0037FCr 1  A9 56                  LDA #86 ; max height..
0037FEr 1                     @ZAL_INSIDE_TUB:
0037FEr 1  85 40                  STA PWOL_CONVERT_HEIGHTS ;
003800r 1  85 42                  STA PWOL_CONVERT_HEIGHTS_L;
003802r 1  38                     SEC
003803r 1  A5 28                  LDA PWOL_CURRENT_YL
003805r 1  F2 42                  SBC (PWOL_CONVERT_HEIGHTS_L)
003807r 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
003809r 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
00380Br 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
00380Er 1  C5 54                  CMP PWOL_CENTER_Y_TOP ; is this above center on screen??
003810r 1  B0 0E                  BCS :+ ; is not covering us
003812r 1  A5 29                  LDA PWOL_CURRENT_YH
003814r 1  C5 53                  CMP PWOL_CENTER_Y
003816r 1  90 08                  BCC :+ ; its from ahead of us, OK
003818r 1                         ; it was from below and covers us ..
003818r 1  BD rr rr               LDA OBJECT_LIST_BYTE0_ADDRLOW,X
00381Br 1  69 0F                  ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
00381Dr 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X
003820r 1                         ;LDA #$D0
003820r 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
003820r 1  A5 27                : LDA PWOL_CURRENT_XH
003822r 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
003825r 1                    @ZAL_NEXT:
003825r 1                        ; calc next to the LEFT
003825r 1  88                    DEY
003826r 1  38                    SEC
003827r 1  A5 26                 LDA PWOL_CURRENT_XL
003829r 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
00382Br 1  85 26                 STA PWOL_CURRENT_XL
00382Dr 1  A5 27                 LDA PWOL_CURRENT_XH
00382Fr 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
003831r 1  85 27                 STA PWOL_CURRENT_XH
003833r 1  AA                    TAX
003834r 1  38                    SEC
003835r 1  A5 28                 LDA PWOL_CURRENT_YL
003837r 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
003839r 1  85 28                 STA PWOL_CURRENT_YL
00383Br 1  A5 29                 LDA PWOL_CURRENT_YH
00383Dr 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
00383Fr 1  85 29                 STA PWOL_CURRENT_YH
003841r 1               
003841r 1  8E rr rr              STX DEBUG_A
003844r 1  8D rr rr              STA DEBUG_B
003847r 1               
003847r 1  E0 A4                 CPX #SCREEN_OUT_RIGHT
003849r 1  B0 0F                 BCS @ZAL_ZIG_RIGHT_SWITCH
00384Br 1  E0 24                 CPX #SCREEN_OUT_LEFT
00384Dr 1  90 0B                 BCC @ZAL_ZIG_RIGHT_SWITCH
00384Fr 1  C9 18                 CMP #SCREEN_OUT_TOP
003851r 1  90 07                 BCC @ZAL_ZIG_RIGHT_SWITCH
003853r 1  C9 88                 CMP #SCREEN_OUT_BOTTOM
003855r 1  B0 03                 BCS @ZAL_ZIG_RIGHT_SWITCH
003857r 1  4C rr rr              JMP @zigzag_A_left
00385Ar 1                    @ZAL_ZIG_RIGHT_SWITCH: ; up/right is +1,+1  from where we is right now ..
00385Ar 1  A9 06                 LDA #TRY_AGAIN
00385Cr 1  85 44                 STA PWOL_TRIES_COUNTER
00385Er 1  C8                    INY
00385Fr 1  38                    SEC
003860r 1  A5 22                 LDA PWOL_TUB_PTR_AL
003862r 1  E9 40                 SBC #64
003864r 1  85 22                 STA PWOL_TUB_PTR_AL
003866r 1  A5 23                 LDA PWOL_TUB_PTR_AH
003868r 1  E9 00                 SBC #0
00386Ar 1  C9 rr                 CMP #>TUB_WORLD ; are we inside the world still?
00386Cr 1  B0 03                 BCS :+
00386Er 1  4C rr rr              JMP @zigzag_B
003871r 1  85 23               : STA PWOL_TUB_PTR_AH
003873r 1               
003873r 1               
003873r 1  18                    CLC
003874r 1               
003874r 1  A5 26                 LDA PWOL_CURRENT_XL
003876r 1  65 32                 ADC PWOL_NEXT_ROW_A_RIGHT_XL
003878r 1  85 26                 STA PWOL_CURRENT_XL
00387Ar 1               
00387Ar 1  A5 27                 LDA PWOL_CURRENT_XH
00387Cr 1  65 33                 ADC PWOL_NEXT_ROW_A_RIGHT_XH
00387Er 1  85 27                 STA PWOL_CURRENT_XH
003880r 1  AA                    TAX
003881r 1               
003881r 1               
003881r 1  18                    CLC
003882r 1  A5 28                 LDA PWOL_CURRENT_YL
003884r 1  65 34                 ADC PWOL_NEXT_ROW_A_RIGHT_YL
003886r 1  85 28                 STA PWOL_CURRENT_YL
003888r 1  A5 29                 LDA PWOL_CURRENT_YH
00388Ar 1  65 35                 ADC PWOL_NEXT_ROW_A_RIGHT_YH
00388Cr 1  85 29                 STA PWOL_CURRENT_YH
00388Er 1               
00388Er 1  E0 A4                 CPX #SCREEN_OUT_RIGHT
003890r 1  B0 0F                 BCS @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003892r 1  E0 24                 CPX #SCREEN_OUT_LEFT
003894r 1  90 0B                 BCC @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003896r 1  C9 18                 CMP #SCREEN_OUT_TOP
003898r 1  90 07                 BCC @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
00389Ar 1  C9 88                 CMP #SCREEN_OUT_BOTTOM
00389Cr 1  B0 03                 BCS @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
00389Er 1  4C rr rr              JMP @zigzag_A_right
0038A1r 1                  @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN:
0038A1r 1  C6 44                 DEC PWOL_TRIES_COUNTER
0038A3r 1  F0 2F                 BEQ @zigzag_B
0038A5r 1                  @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN_GO_RIGHT:
0038A5r 1  C8                    INY
0038A6r 1  18                    CLC
0038A7r 1  A5 26                 LDA PWOL_CURRENT_XL
0038A9r 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
0038ABr 1  85 26                 STA PWOL_CURRENT_XL
0038ADr 1  A5 27                 LDA PWOL_CURRENT_XH
0038AFr 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
0038B1r 1  85 27                 STA PWOL_CURRENT_XH
0038B3r 1  AA                    TAX
0038B4r 1  18                    CLC
0038B5r 1  A5 28                 LDA PWOL_CURRENT_YL
0038B7r 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
0038B9r 1  85 28                 STA PWOL_CURRENT_YL
0038BBr 1  A5 29                 LDA PWOL_CURRENT_YH
0038BDr 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
0038BFr 1  85 29                 STA PWOL_CURRENT_YH
0038C1r 1               
0038C1r 1  E0 A4                 CPX #SCREEN_OUT_RIGHT
0038C3r 1  B0 DC                 BCS @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
0038C5r 1  E0 24                 CPX #SCREEN_OUT_LEFT
0038C7r 1  90 D8                 BCC @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
0038C9r 1  C9 18                 CMP #SCREEN_OUT_TOP
0038CBr 1  90 D4                 BCC @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
0038CDr 1  C9 88                 CMP #SCREEN_OUT_BOTTOM
0038CFr 1  B0 D0                 BCS @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
0038D1r 1  4C rr rr              JMP @zigzag_A_right
0038D4r 1               
0038D4r 1               
0038D4r 1               
0038D4r 1                 @zigzag_B: ; going to left and down the screen, including where we are currently..
0038D4r 1                    ; RTS
0038D4r 1  38                 SEC
0038D5r 1  A5 45              LDA PWOL_START_XL
0038D7r 1  E5 2A              SBC PWOL_ACROSS_ROW_XL
0038D9r 1  85 26              STA PWOL_CURRENT_XL
0038DBr 1  A5 47              LDA PWOL_START_XH
0038DDr 1  E5 2B              SBC PWOL_ACROSS_ROW_XH
0038DFr 1  85 27              STA PWOL_CURRENT_XH
0038E1r 1               
0038E1r 1               
0038E1r 1  38                 SEC
0038E2r 1  A5 46              LDA PWOL_START_YL
0038E4r 1  E5 2C              SBC PWOL_ACROSS_ROW_YL
0038E6r 1  85 28              STA PWOL_CURRENT_YL
0038E8r 1  A5 48              LDA PWOL_START_YH
0038EAr 1  E5 2D              SBC PWOL_ACROSS_ROW_YH
0038ECr 1  85 29              STA PWOL_CURRENT_YH
0038EEr 1               
0038EEr 1  AC rr rr           LDY camera_cell_x   ;  eh voila! we haz pointer to ze row to start on .. woot!
0038F1r 1  88                 DEY ; start left
0038F2r 1               
0038F2r 1                  @zigzag_B_left:
0038F2r 1  C0 40                CPY #64  ;  make sure we don't go outside level..
0038F4r 1  B0 59                BCS @ZBL_NEXT ; if we're outside we'll just skip is OK
0038F6r 1  B1 24                LDA (PWOL_TUB_PTR_BL),y
0038F8r 1  C9 81                CMP #129
0038FAr 1  B0 53                BCS @ZBL_NEXT ; we're outside level.
0038FCr 1               
0038FCr 1                       ; bytes 1 and 4 were updated when we cleared the object list
0038FCr 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
0038FFr 1  D0 04                BNE :++
003901r 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
003904r 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
003905r 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
003907r 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
00390Ar 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen...
00390Cr 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
00390Er 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
003910r 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
003913r 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
003916r 1  8A                   TXA ; push new next to the Z buffer spot
003917r 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
003919r 1                       ; bytes .1..4.6 filled in already..
003919r 1  AD rr rr             LDA WORLD_SPRITE_NUM
00391Cr 1  9D rr rr             STA OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway..
00391Fr 1  B1 24                LDA (PWOL_TUB_PTR_BL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
003921r 1  10 05                BPL @ZBL_INSIDE_TUB
003923r 1                     @ZBL_HIT_WALL_OUCH:
003923r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
003926r 1  A9 56                  LDA #86 ; max height..
003928r 1                     @ZBL_INSIDE_TUB:
003928r 1  85 40                  STA PWOL_CONVERT_HEIGHTS ;
00392Ar 1  85 42                  STA PWOL_CONVERT_HEIGHTS_L;
00392Cr 1  38                     SEC
00392Dr 1  A5 28                  LDA PWOL_CURRENT_YL
00392Fr 1  F2 42                  SBC (PWOL_CONVERT_HEIGHTS_L)
003931r 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
003933r 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
003935r 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
003938r 1  C5 54                  CMP PWOL_CENTER_Y_TOP ; is this above center on screen??
00393Ar 1  B0 0E                  BCS :+ ; is not covering us
00393Cr 1  A5 29                  LDA PWOL_CURRENT_YH
00393Er 1  C5 53                  CMP PWOL_CENTER_Y
003940r 1  90 08                  BCC :+ ; its from ahead of us, OK
003942r 1                         ; it was from below and covers us ..
003942r 1  BD rr rr               LDA OBJECT_LIST_BYTE0_ADDRLOW,X
003945r 1  69 0F                  ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
003947r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X
00394Ar 1                         ;LDA #$D0
00394Ar 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
00394Ar 1  A5 27                : LDA PWOL_CURRENT_XH
00394Cr 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
00394Fr 1                    @ZBL_NEXT:
00394Fr 1                        ; calc next to the LEFT
00394Fr 1  88                    DEY
003950r 1  38                    SEC
003951r 1  A5 26                 LDA PWOL_CURRENT_XL
003953r 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
003955r 1  85 26                 STA PWOL_CURRENT_XL
003957r 1  A5 27                 LDA PWOL_CURRENT_XH
003959r 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
00395Br 1  85 27                 STA PWOL_CURRENT_XH
00395Dr 1  AA                    TAX
00395Er 1  38                    SEC
00395Fr 1  A5 28                 LDA PWOL_CURRENT_YL
003961r 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
003963r 1  85 28                 STA PWOL_CURRENT_YL
003965r 1  A5 29                 LDA PWOL_CURRENT_YH
003967r 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
003969r 1  85 29                 STA PWOL_CURRENT_YH
00396Br 1               
00396Br 1  8E rr rr              STX DEBUG_A
00396Er 1  8D rr rr              STA DEBUG_B
003971r 1               
003971r 1  E0 A4                 CPX #SCREEN_OUT_RIGHT
003973r 1  B0 0F                 BCS @ZBL_ZIG_RIGHT_SWITCH
003975r 1  E0 24                 CPX #SCREEN_OUT_LEFT
003977r 1  90 0B                 BCC @ZBL_ZIG_RIGHT_SWITCH
003979r 1  C9 18                 CMP #SCREEN_OUT_TOP
00397Br 1  90 07                 BCC @ZBL_ZIG_RIGHT_SWITCH
00397Dr 1  C9 88                 CMP #SCREEN_OUT_BOTTOM
00397Fr 1  B0 03                 BCS @ZBL_ZIG_RIGHT_SWITCH
003981r 1  4C rr rr              JMP @zigzag_B_left
003984r 1                    @ZBL_ZIG_RIGHT_SWITCH: ; DOWN/LEFT to start right is is 0,+1  from where we is right now ..
003984r 1                        ;INY
003984r 1                        ;INY
003984r 1  A9 06                 LDA #TRY_AGAIN
003986r 1  85 44                 STA PWOL_TRIES_COUNTER
003988r 1  18                    CLC
003989r 1  A5 24                 LDA PWOL_TUB_PTR_BL
00398Br 1  69 40                 ADC #64
00398Dr 1  85 24                 STA PWOL_TUB_PTR_BL
00398Fr 1  A5 25                 LDA PWOL_TUB_PTR_BH
003991r 1  69 00                 ADC #0
003993r 1  C9 rr                 CMP #>TUB_WORLD+8
003995r 1  90 01                 BCC :+
003997r 1  60                    rts
003998r 1  85 25               : STA PWOL_TUB_PTR_BH
00399Ar 1               
00399Ar 1               
00399Ar 1  18                    CLC
00399Br 1               
00399Br 1  A5 26                 LDA PWOL_CURRENT_XL
00399Dr 1  65 3A                 ADC PWOL_NEXT_ROW_B_RIGHT_XL
00399Fr 1  85 26                 STA PWOL_CURRENT_XL
0039A1r 1               
0039A1r 1  A5 27                 LDA PWOL_CURRENT_XH
0039A3r 1  65 3B                 ADC PWOL_NEXT_ROW_B_RIGHT_XH
0039A5r 1  85 27                 STA PWOL_CURRENT_XH
0039A7r 1  AA                    TAX
0039A8r 1               
0039A8r 1               
0039A8r 1  18                    CLC
0039A9r 1  A5 28                 LDA PWOL_CURRENT_YL
0039ABr 1  65 3C                 ADC PWOL_NEXT_ROW_B_RIGHT_YL
0039ADr 1  85 28                 STA PWOL_CURRENT_YL
0039AFr 1  A5 29                 LDA PWOL_CURRENT_YH
0039B1r 1  65 3D                 ADC PWOL_NEXT_ROW_B_RIGHT_YH
0039B3r 1  85 29                 STA PWOL_CURRENT_YH
0039B5r 1               
0039B5r 1  E0 A4                 CPX #SCREEN_OUT_RIGHT
0039B7r 1  B0 0F                 BCS @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
0039B9r 1  E0 24                 CPX #SCREEN_OUT_LEFT
0039BBr 1  90 0B                 BCC @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
0039BDr 1  C9 18                 CMP #SCREEN_OUT_TOP
0039BFr 1  90 07                 BCC @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
0039C1r 1  C9 88                 CMP #SCREEN_OUT_BOTTOM
0039C3r 1  B0 03                 BCS @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
0039C5r 1  4C rr rr              JMP @zigzag_B_right
0039C8r 1                  @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN:
0039C8r 1  C6 44                 DEC PWOL_TRIES_COUNTER
0039CAr 1  D0 01                 BNE @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN_GO_RIGHT
0039CCr 1                  @ZBL_RTS:
0039CCr 1  60                 rts
0039CDr 1                  @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN_GO_RIGHT:
0039CDr 1  C8                    INY
0039CEr 1  18                    CLC
0039CFr 1  A5 26                 LDA PWOL_CURRENT_XL
0039D1r 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
0039D3r 1  85 26                 STA PWOL_CURRENT_XL
0039D5r 1  A5 27                 LDA PWOL_CURRENT_XH
0039D7r 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
0039D9r 1  85 27                 STA PWOL_CURRENT_XH
0039DBr 1  AA                    TAX
0039DCr 1  18                    CLC
0039DDr 1  A5 28                 LDA PWOL_CURRENT_YL
0039DFr 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
0039E1r 1  85 28                 STA PWOL_CURRENT_YL
0039E3r 1  A5 29                 LDA PWOL_CURRENT_YH
0039E5r 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
0039E7r 1  85 29                 STA PWOL_CURRENT_YH
0039E9r 1               
0039E9r 1  E0 A4                 CPX #SCREEN_OUT_RIGHT
0039EBr 1  B0 DB                 BCS @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
0039EDr 1  E0 24                 CPX #SCREEN_OUT_LEFT
0039EFr 1  90 D7                 BCC @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
0039F1r 1  C9 18                 CMP #SCREEN_OUT_TOP
0039F3r 1  90 D3                 BCC @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
0039F5r 1  C9 88                 CMP #SCREEN_OUT_BOTTOM
0039F7r 1  B0 CF                 BCS @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
0039F9r 1               
0039F9r 1                   @zigzag_B_right:
0039F9r 1  C0 40                CPY #64  ;  make sure we don't go outside level..
0039FBr 1  B0 59                BCS @ZBR_NEXT ; if we're outside we'll just skip is OK
0039FDr 1  B1 24                LDA (PWOL_TUB_PTR_BL),y
0039FFr 1  C9 81                CMP #129
003A01r 1  B0 53                BCS @ZBR_NEXT ; we're outside level.
003A03r 1               
003A03r 1                       ; bytes 1 and 4 were updated when we cleared the object list
003A03r 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
003A06r 1  D0 04                BNE :++
003A08r 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
003A0Br 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
003A0Cr 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
003A0Er 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
003A11r 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen...
003A13r 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
003A15r 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
003A17r 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
003A1Ar 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
003A1Dr 1  8A                   TXA ; push new next to the Z buffer spot
003A1Er 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
003A20r 1                       ; bytes .1..4.6 filled in already..
003A20r 1  AD rr rr             LDA WORLD_SPRITE_NUM
003A23r 1  9D rr rr             STA OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway..
003A26r 1  B1 24                LDA (PWOL_TUB_PTR_BL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
003A28r 1  10 05                BPL @ZBR_INSIDE_TUB
003A2Ar 1                     @ZBR_HIT_WALL_OUCH:
003A2Ar 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
003A2Dr 1  A9 56                  LDA #86 ; max height..
003A2Fr 1                     @ZBR_INSIDE_TUB:
003A2Fr 1  85 40                  STA PWOL_CONVERT_HEIGHTS ;
003A31r 1  85 42                  STA PWOL_CONVERT_HEIGHTS_L;
003A33r 1  38                     SEC
003A34r 1  A5 28                  LDA PWOL_CURRENT_YL
003A36r 1  F2 42                  SBC (PWOL_CONVERT_HEIGHTS_L)
003A38r 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
003A3Ar 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
003A3Cr 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
003A3Fr 1  C5 54                  CMP PWOL_CENTER_Y_TOP ; is this above center on screen??
003A41r 1  B0 0E                  BCS :+ ; is not covering us
003A43r 1  A5 29                  LDA PWOL_CURRENT_YH
003A45r 1  C5 53                  CMP PWOL_CENTER_Y
003A47r 1  90 08                  BCC :+ ; its from ahead of us, OK
003A49r 1                         ; it was from below and covers us ..
003A49r 1  BD rr rr               LDA OBJECT_LIST_BYTE0_ADDRLOW,X
003A4Cr 1  69 0F                  ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
003A4Er 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X
003A51r 1                         ;LDA #$D0
003A51r 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
003A51r 1  A5 27                : LDA PWOL_CURRENT_XH
003A53r 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
003A56r 1                    @ZBR_NEXT:
003A56r 1                        ; calc next to the right..
003A56r 1  C8                    INY
003A57r 1  18                    CLC
003A58r 1  A5 26                 LDA PWOL_CURRENT_XL
003A5Ar 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
003A5Cr 1  85 26                 STA PWOL_CURRENT_XL
003A5Er 1  A5 27                 LDA PWOL_CURRENT_XH
003A60r 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
003A62r 1  85 27                 STA PWOL_CURRENT_XH
003A64r 1  AA                    TAX
003A65r 1  18                    CLC
003A66r 1  A5 28                 LDA PWOL_CURRENT_YL
003A68r 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
003A6Ar 1  85 28                 STA PWOL_CURRENT_YL
003A6Cr 1  A5 29                 LDA PWOL_CURRENT_YH
003A6Er 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
003A70r 1  85 29                 STA PWOL_CURRENT_YH
003A72r 1               
003A72r 1  8E rr rr              STX DEBUG_A
003A75r 1  8D rr rr              STA DEBUG_B
003A78r 1               
003A78r 1  E0 A4                 CPX #SCREEN_OUT_RIGHT
003A7Ar 1  B0 0F                 BCS @ZBR_ZIG_LEFT_SWITCH
003A7Cr 1  E0 24                 CPX #SCREEN_OUT_LEFT
003A7Er 1  90 0B                 BCC @ZBR_ZIG_LEFT_SWITCH
003A80r 1  C9 18                 CMP #SCREEN_OUT_TOP
003A82r 1  90 07                 BCC @ZBR_ZIG_LEFT_SWITCH
003A84r 1  C9 88                 CMP #SCREEN_OUT_BOTTOM
003A86r 1  B0 03                 BCS @ZBR_ZIG_LEFT_SWITCH
003A88r 1  4C rr rr              jmp @zigzag_B_right
003A8Br 1                    @ZBR_ZIG_LEFT_SWITCH: ;PWOL_NEXT_ROW_A_LEFT_XL   ; -> next row is left, going down the screen ..  +1,+1
003A8Br 1  A9 06                 LDA #TRY_AGAIN
003A8Dr 1  85 44                 STA PWOL_TRIES_COUNTER
003A8Fr 1  88                   DEY ; have to go this to match where the thing is going .. 0,0
003A90r 1  18                    CLC
003A91r 1  A5 24                 LDA PWOL_TUB_PTR_BL
003A93r 1  69 40                 ADC #64 ;   0,-1
003A95r 1  85 24                 STA PWOL_TUB_PTR_BL
003A97r 1  A5 25                 LDA PWOL_TUB_PTR_BH
003A99r 1  69 00                 ADC #0
003A9Br 1  C9 rr                 CMP #>TUB_WORLD+8
003A9Dr 1  90 01                 BCC :+
003A9Fr 1  60                    rts
003AA0r 1  85 25               : STA PWOL_TUB_PTR_BH
003AA2r 1               
003AA2r 1  18                    CLC
003AA3r 1  A5 26                 LDA PWOL_CURRENT_XL
003AA5r 1  65 36                 ADC PWOL_NEXT_ROW_B_LEFT_XL
003AA7r 1  85 26                 STA PWOL_CURRENT_XL
003AA9r 1  A5 27                 LDA PWOL_CURRENT_XH
003AABr 1  65 37                 ADC PWOL_NEXT_ROW_B_LEFT_XH
003AADr 1  85 27                 STA PWOL_CURRENT_XH
003AAFr 1  AA                    TAX
003AB0r 1  18                    CLC
003AB1r 1  A5 28                 LDA PWOL_CURRENT_YL
003AB3r 1  65 38                 ADC PWOL_NEXT_ROW_B_LEFT_YL
003AB5r 1  85 28                 STA PWOL_CURRENT_YL
003AB7r 1  A5 29                 LDA PWOL_CURRENT_YH
003AB9r 1  65 39                 ADC PWOL_NEXT_ROW_B_LEFT_YH
003ABBr 1  85 29                 STA PWOL_CURRENT_YH
003ABDr 1                        ; check if we're outside ..
003ABDr 1               
003ABDr 1  E0 A4                 CPX #SCREEN_OUT_RIGHT
003ABFr 1  B0 0F                 BCS @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
003AC1r 1  E0 24                 CPX #SCREEN_OUT_LEFT
003AC3r 1  90 0B                 BCC @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
003AC5r 1  C9 18                 CMP #SCREEN_OUT_TOP
003AC7r 1  90 07                 BCC @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
003AC9r 1  C9 88                 CMP #SCREEN_OUT_BOTTOM
003ACBr 1  B0 03                 BCS @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
003ACDr 1  4C rr rr              jmp @zigzag_B_left
003AD0r 1                  @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN:
003AD0r 1  C6 44                 DEC PWOL_TRIES_COUNTER
003AD2r 1  D0 01                 BNE @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT
003AD4r 1                  @ZBR_RTS:
003AD4r 1  60                    rts
003AD5r 1                  @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT:
003AD5r 1  88                    DEY
003AD6r 1  38                    SEC
003AD7r 1  A5 26                 LDA PWOL_CURRENT_XL
003AD9r 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
003ADBr 1  85 26                 STA PWOL_CURRENT_XL
003ADDr 1  A5 27                 LDA PWOL_CURRENT_XH
003ADFr 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
003AE1r 1  85 27                 STA PWOL_CURRENT_XH
003AE3r 1  AA                    TAX
003AE4r 1  38                    SEC
003AE5r 1  A5 28                 LDA PWOL_CURRENT_YL
003AE7r 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
003AE9r 1  85 28                 STA PWOL_CURRENT_YL
003AEBr 1  A5 29                 LDA PWOL_CURRENT_YH
003AEDr 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
003AEFr 1  85 29                 STA PWOL_CURRENT_YH
003AF1r 1  E0 A4                 CPX #SCREEN_OUT_RIGHT
003AF3r 1  B0 DB                 BCS @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
003AF5r 1  E0 24                 CPX #SCREEN_OUT_LEFT
003AF7r 1  90 D7                 BCC @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
003AF9r 1  C9 18                 CMP #SCREEN_OUT_TOP
003AFBr 1  90 D3                 BCC @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
003AFDr 1  C9 88                 CMP #SCREEN_OUT_BOTTOM
003AFFr 1  B0 CF                 BCS @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
003B01r 1  4C rr rr              JMP @zigzag_B_left
003B04r 1               
003B04r 1               draw_object_list:
003B04r 1  9C 25 9F         STZ VERA_ctrl
003B07r 1  9C 20 9F         STZ VERA_addr_low
003B0Ar 1  A9 FD            lda #(>VRAM_sprite_attributes)+1
003B0Cr 1  8D 21 9F         sta VERA_addr_high
003B0Fr 1  A9 11            lda #$11
003B11r 1  8D 22 9F         sta VERA_addr_bank
003B14r 1  64 22            STZ ZP_PTR
003B16r 1  A9 rr            LDA #>OBJECT_LIST_Z_START_POINTERS
003B18r 1  85 23            STA ZP_PTR+1
003B1Ar 1  A0 60            LDY #96 ; num sprites can write
003B1Cr 1                 @NEXT_Z: ; Z=0 is invalid...
003B1Cr 1  E6 22              INC ZP_PTR
003B1Er 1  D0 1C              BNE @Z_LOOP
003B20r 1  AD 23 9F           : LDA VERA_data0
003B23r 1  AD 23 9F             LDA VERA_data0
003B26r 1  9C 23 9F             STZ VERA_data0
003B29r 1  9C 23 9F             STZ VERA_data0
003B2Cr 1  AD 23 9F             LDA VERA_data0
003B2Fr 1  AD 23 9F             LDA VERA_data0
003B32r 1  AD 23 9F             LDA VERA_data0
003B35r 1  AD 23 9F             LDA VERA_data0
003B38r 1  88                   DEY
003B39r 1  D0 E5                BNE :-
003B3Br 1               
003B3Br 1  60                 rts
003B3Cr 1                 @Z_LOOP:
003B3Cr 1  B2 22              LDA (ZP_PTR) ; get our first victim
003B3Er 1  AA                 TAX
003B3Fr 1  A9 00              LDA #0
003B41r 1  92 22              STA (ZP_PTR) ; zero this Z_next for now
003B43r 1  8A                 TXA
003B44r 1                    @OBJ_LOOP:
003B44r 1  AA                    TAX
003B45r 1  F0 D5                 BEQ @NEXT_Z ; got a bum next pointer there ...
003B47r 1  BD rr rr              LDA OBJECT_LIST_BYTE0_ADDRLOW,X
003B4Ar 1  8D 23 9F              STA VERA_data0
003B4Dr 1  BD rr rr              LDA OBJECT_LIST_BYTE1_MODE,x
003B50r 1  8D 23 9F              STA VERA_data0
003B53r 1  BD rr rr              LDA OBJECT_LIST_BYTE2_X,x
003B56r 1  8D 23 9F              STA VERA_data0
003B59r 1               ;         CMP #216
003B59r 1                 ;       LDA #0
003B59r 1                ;        BCC :+
003B59r 1                ;        LDA #$FF
003B59r 1                 ;     : STA VERA_data0
003B59r 1  9C 23 9F              STZ VERA_data0
003B5Cr 1  BD rr rr              LDA OBJECT_LIST_BYTE3_Y,x
003B5Fr 1  8D 23 9F              STA VERA_data0
003B62r 1               ;         CMP #161
003B62r 1                ;        LDA #0
003B62r 1                 ;       BCC :+
003B62r 1                  ;      LDA #$FF
003B62r 1                   ;   : STA VERA_data0
003B62r 1  9C 23 9F              STZ VERA_data0
003B65r 1  BD rr rr              LDA OBJECT_LIST_BYTE4_ZFLIPS,x
003B68r 1  8D 23 9F              STA VERA_data0
003B6Br 1  BD rr rr              LDA OBJECT_LIST_BYTE5_SIZE,x
003B6Er 1  8D 23 9F              STA VERA_data0
003B71r 1  BD rr rr              LDA OBJECT_LIST_BYTE6_NEXT,x
003B74r 1  88                    DEY ; decrement that Y
003B75r 1  D0 CD                 BNE @OBJ_LOOP ; still sprite slots left.. woot!
003B77r 1  92 22                 STA (ZP_PTR) ; oops.. save that last thing and exit..
003B79r 1  60                    RTS
003B7Ar 1               
003B7Ar 1               
003B7Ar 1               
003B7Ar 1               test_sprite_data:
003B7Ar 1               ; first 16 sprites reserved ...
003B7Ar 1               ;      0   1   2   3   4   5   6  7
003B7Ar 1               ;     add,mod, XL, XH, YL, YH,msk,hwp
003B7Ar 1  42 01 64 00  .byte  66,$01,100,  0,72,  0,$0C,$50  ;  cursor middle - 8x8  sprite 0
003B7Er 1  48 00 0C 50  
003B82r 1  10 01 0C 00  .byte  16,$01, 12,  0,  0,  0,$0C,$30  ;  border top - 64x8    sprite 1
003B86r 1  00 00 0C 30  
003B8Ar 1  10 01 4C 00  .byte  16,$01, 76,  0,SCREEN_OUT_TOP,  0,$0C,$30  ;  border top - 64x8    sprite 2
003B8Er 1  18 00 0C 30  
003B92r 1  10 01 8C 00  .byte  16,$01,140,  0,  0,  0,$0C,$30  ;  border top - 64x8    sprite 3
003B96r 1  00 00 0C 30  
003B9Ar 1               
003B9Ar 1  10 01 0C 00  .byte  16,$01, 12,  0,153,  0,$0F,$30  ;  border bottom - 64x8  sprite 4
003B9Er 1  99 00 0F 30  
003BA2r 1  10 01 4C 00  .byte  16,$01, 76,  0,SCREEN_OUT_BOTTOM,  0,$0F,$30  ;  border bottom - 64x8  sprite 5
003BA6r 1  88 00 0F 30  
003BAAr 1  10 01 8C 00  .byte  16,$01,140,  0,153,  0,$0F,$30  ;  border bottom - 64x8  sprite 6
003BAEr 1  99 00 0F 30  
003BB2r 1               
003BB2r 1  10 01 00 00  .byte  16,$01,  0,  0, 16,  0,$0C,$C0  ;  border left    8x64   sprite 7
003BB6r 1  10 00 0C C0  
003BBAr 1  10 01 2C 00  .byte  16,$01,SCREEN_OUT_LEFT+8,  0, 80,  0,$0C,$C0  ;  border left    8x64   sprite 8
003BBEr 1  50 00 0C C0  
003BC2r 1  10 01 D0 00  .byte  16,$01,208,  0, 16,  0,$0F,$C0  ;  border left    8x64   sprite 9
003BC6r 1  10 00 0F C0  
003BCAr 1  10 01 A4 00  .byte  16,$01,SCREEN_OUT_RIGHT,  0, 80,  0,$0F,$C0  ;  border left    8x64   sprite A
003BCEr 1  50 00 0F C0  
003BD2r 1  31 01 8C 00  .byte  49,$01,140,  0,109,  0,$0C,$00  ; sprite B   bearing  Label
003BD6r 1  6D 00 0C 00  
003BDAr 1               ;.byte  58,$00,140,  0,118,  0,$0c,$30  ; sprite C   WORLD
003BDAr 1               ;.byte  50,$00,140,  0,136,  0,$0c,$30  ; sprite D   Cell
003BDAr 1  00 01 94 00  .byte  0,$01,148,  0,109,  0,$0C,$00  ; 0 test    sprite 0E   bearing
003BDEr 1  6D 00 0C 00  
003BE2r 1  01 01 9C 00  .byte  1,$01,156,  0,109,  0,$0C,$00  ; 1 test    sprite 0F
003BE6r 1  6D 00 0C 00  
003BEAr 1  02 01 8C 00  .byte  2,$01,140,  0,127,  0,$0C,$00  ; 6 test    sprite 10   world XH
003BEEr 1  7F 00 0C 00  
003BF2r 1  03 01 94 00  .byte  3,$01,148,  0,127,  0,$0C,$00  ; 7 test    sprite 11
003BF6r 1  7F 00 0C 00  
003BFAr 1  04 01 9C 00  .byte  4,$01,156,  0,127,  0,$0C,$00  ; 8 test    sprite 12   world Xl
003BFEr 1  7F 00 0C 00  
003C02r 1  05 01 A4 00  .byte  5,$01,164,  0,127,  0,$0C,$00  ; 9 test    sprite 13
003C06r 1  7F 00 0C 00  
003C0Ar 1  06 01 B0 00  .byte  6,$01,176,  0,127,  0,$0C,$00  ; A test    sprite 14   world YH
003C0Er 1  7F 00 0C 00  
003C12r 1  06 01 B8 00  .byte  6,$01,184,  0,127,  0,$0C,$00  ; B test    sprite 15
003C16r 1  7F 00 0C 00  
003C1Ar 1  06 01 C0 00  .byte  6,$01,192,  0,127,  0,$0C,$00  ; C test    sprite 16   world Yl
003C1Er 1  7F 00 0C 00  
003C22r 1  06 01 C8 00  .byte  6,$01,200,  0,127,  0,$0C,$00  ; D test    sprite 17
003C26r 1  7F 00 0C 00  
003C2Ar 1  06 01 8C 00  .byte  6,$01,140,  0,145,  0,$0C,$00  ; 2 test    sprite 18   Cell X
003C2Er 1  91 00 0C 00  
003C32r 1  06 01 94 00  .byte  6,$01,148,  0,145,  0,$0C,$00  ; 3 test    sprite 19
003C36r 1  91 00 0C 00  
003C3Ar 1  06 01 9C 00  .byte  6,$01,156,  0,145,  0,$0C,$00  ; E test    sprite 1A   X Subcell
003C3Er 1  91 00 0C 00  
003C42r 1  06 01 A4 00  .byte  6,$01,164,  0,145,  0,$0C,$00  ; E test    sprite 1A
003C46r 1  91 00 0C 00  
003C4Ar 1  06 01 B0 00  .byte  6,$01,176,  0,100,  0,$0C,$00  ; 4 test    sprite 1C   DEBUG_A
003C4Er 1  64 00 0C 00  
003C52r 1  06 01 B8 00  .byte  6,$01,184,  0,100,  0,$0C,$00  ; 5 test    sprite 1D
003C56r 1  64 00 0C 00  
003C5Ar 1  06 01 C0 00  .byte  6,$01,192,  0,100,  0,$0C,$00  ; F test    sprite 1E   DEBUG_B
003C5Er 1  64 00 0C 00  
003C62r 1  06 01 C8 00  .byte  6,$01,200,  0,100,  0,$0C,$00  ; F test    sprite 1F
003C66r 1  64 00 0C 00  
003C6Ar 1  06 01 C0 00  .byte  6,$01,192,  0, 91,  0,$0C,$00  ; 0 test    sprite 0E   DEBUG_C
003C6Er 1  5B 00 0C 00  
003C72r 1  06 01 C8 00  .byte  6,$01,200,  0, 91,  0,$0C,$00  ; 0 test    sprite 0E
003C76r 1  5B 00 0C 00  
003C7Ar 1               
003C7Ar 1               test_optimal_pal_data:
003C7Ar 1               ;      GB   R  $1:FA00-$1:FBFF   VERA Color Palette (256 x 2 bytes)
003C7Ar 1  00 00        .byte $00,$00  ; 0 - black/transparent
003C7Cr 1  C8 0F        .byte $c8,$0f  ; 1 #ffcc88
003C7Er 1               
003C7Er 1  04 06        .byte $04,$06  ; 2 #660044
003C80r 1  00 0C        .byte $00,$0C  ; 3  #cc0000
003C82r 1  F0 0C        .byte $F0,$0C  ; 4#ccff00
003C84r 1  42 03        .byte $42,$03
003C86r 1  60 0C        .byte $60,$0c   ; 6  #cc6600
003C88r 1  40 08        .byte $40,$08   ; 7 #884400
003C8Ar 1  C0 0C        .byte $c0,$0c   ; 8 #cccc00
003C8Cr 1  6A 02        .byte $6a,$02   ; 9 #2266aa mid blue
003C8Er 1  C0 00        .byte $c0,$00   ; A #00cc00
003C90r 1  AC 07        .byte $ac,$07   ; B #77aacc light blue
003C92r 1  C0 00        .byte $c0,$00   ; C #0000c0 dark blue
003C94r 1  0C 0C        .byte $0c,$0c   ; D #cc00cc
003C96r 1  88 08        .byte $88,$08   ; E #888888
003C98r 1  22 02        .byte $22,$02   ; F #222222
003C9Ar 1               
003C9Ar 1               test_vram_data:
003C9Ar 1               ; 70 to 127 - start of 16x16 (each 128 byte) for testing directions / sizing..
003C9Ar 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11  ;  0-15 16x10 -  0
003C9Er 1  11 11 11 11  
003CA2r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
003CA6r 1  FF FF FF F1  
003CAAr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
003CAEr 1  FF FF FF F1  
003CB2r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
003CB6r 1  FF FF FF F1  
003CBAr 1  1F FF FF F1  .byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$F1
003CBEr 1  FF FF FF F1  
003CC2r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
003CC6r 1  FF FF FF F1  
003CCAr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
003CCEr 1  FF FF FF F1  
003CD2r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
003CD6r 1  FF FF FF F1  
003CDAr 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
003CDEr 1  FF FF FF F1  
003CE2r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11
003CE6r 1  11 11 11 11  
003CEAr 1  55 55 55 55  .repeat 54
003CEEr 1  55 55 55 55  
003CF2r 1  55 55 55 55  
003E9Ar 1               .res 8,$55
003E9Ar 1               .endrepeat
003E9Ar 1               
003E9Ar 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11  ;  16-31    16x10 -  0 trans
003E9Er 1  11 11 11 11  
003EA2r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
003EA6r 1  F0 F0 F0 F1  
003EAAr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
003EAEr 1  0F 0F 0F 01  
003EB2r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
003EB6r 1  F0 F0 F0 F1  
003EBAr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
003EBEr 1  0F 0F 0F 01  
003EC2r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
003EC6r 1  F0 F0 F0 F1  
003ECAr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
003ECEr 1  0F 0F 0F 01  
003ED2r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
003ED6r 1  F0 F0 F0 F1  
003EDAr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
003EDEr 1  0F 0F 0F 01  
003EE2r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11
003EE6r 1  11 11 11 11  
003EEAr 1  50 50 50 50  .repeat 27
003EEEr 1  50 50 50 50  
003EF2r 1  05 05 05 05  
00409Ar 1               .res 8,$50
00409Ar 1               .res 8,$05
00409Ar 1               .endrepeat
00409Ar 1               
00409Ar 1               
00409Ar 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11  ;  32-47    16x11 -  4
00409Er 1  11 11 11 11  
0040A2r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
0040A6r 1  FF FF FF F1  
0040AAr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0040AEr 1  FF FF FF F1  
0040B2r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0040B6r 1  FF FF FF F1  
0040BAr 1  1F FF FF F1  .byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$F1
0040BEr 1  FF FF FF F1  
0040C2r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0040C6r 1  FF FF FF F1  
0040CAr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0040CEr 1  FF FF FF F1  
0040D2r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
0040D6r 1  FF FF FF F1  
0040DAr 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
0040DEr 1  FF FF FF F1  
0040E2r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
0040E6r 1  FF FF FF F1  
0040EAr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11
0040EEr 1  11 11 11 11  
0040F2r 1  55 55 55 55  .repeat 53
0040F6r 1  55 55 55 55  
0040FAr 1  55 55 55 55  
00429Ar 1               .res 8,$55
00429Ar 1               .endrepeat
00429Ar 1               
00429Ar 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11  ;  48-63    16x11 -  4 trans
00429Er 1  11 11 11 11  
0042A2r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0042A6r 1  F0 F0 F0 F1  
0042AAr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
0042AEr 1  0F 0F 0F 01  
0042B2r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0042B6r 1  F0 F0 F0 F1  
0042BAr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
0042BEr 1  0F 0F 0F 01  
0042C2r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0042C6r 1  F0 F0 F0 F1  
0042CAr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
0042CEr 1  0F 0F 0F 01  
0042D2r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0042D6r 1  F0 F0 F0 F1  
0042DAr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
0042DEr 1  0F 0F 0F 01  
0042E2r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0042E6r 1  F0 F0 F0 F1  
0042EAr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11
0042EEr 1  11 11 11 11  
0042F2r 1  05 05 05 05  .res 7,$05
0042F6r 1  05 05 05     
0042F9r 1  00           .byte 0
0042FAr 1  50 50 50 50  .repeat 26
0042FEr 1  50 50 50 50  
004302r 1  05 05 05 05  
00449Ar 1               .res 8,$50
00449Ar 1               .res 7,$05
00449Ar 1               .byte 0
00449Ar 1               .endrepeat
00449Ar 1               
00449Ar 1               
00449Ar 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10  ;  64-79    15x11 - 10
00449Er 1  11 11 11 10  
0044A2r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
0044A6r 1  FF FF FF 10  
0044AAr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
0044AEr 1  FF FF FF 10  
0044B2r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
0044B6r 1  FF FF FF 10  
0044BAr 1  1F FF FF F1  .byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$10
0044BEr 1  FF FF FF 10  
0044C2r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
0044C6r 1  FF FF FF 10  
0044CAr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
0044CEr 1  FF FF FF 10  
0044D2r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
0044D6r 1  FF FF FF 10  
0044DAr 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
0044DEr 1  FF FF FF 10  
0044E2r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
0044E6r 1  FF FF FF 10  
0044EAr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
0044EEr 1  11 11 11 10  
0044F2r 1  55 55 55 55  .repeat 53
0044F6r 1  55 55 55 50  
0044FAr 1  55 55 55 55  
00469Ar 1               .res 7,$55
00469Ar 1               .byte $50
00469Ar 1               .endrepeat
00469Ar 1               
00469Ar 1               
00469Ar 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10  ;  80-95    15x11 - 10 trans
00469Er 1  11 11 11 10  
0046A2r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0046A6r 1  F0 F0 F0 10  
0046AAr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0046AEr 1  0F 0F 0F 10  
0046B2r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0046B6r 1  F0 F0 F0 10  
0046BAr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0046BEr 1  0F 0F 0F 10  
0046C2r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0046C6r 1  F0 F0 F0 10  
0046CAr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0046CEr 1  0F 0F 0F 10  
0046D2r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0046D6r 1  F0 F0 F0 10  
0046DAr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0046DEr 1  0F 0F 0F 10  
0046E2r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0046E6r 1  F0 F0 F0 10  
0046EAr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
0046EEr 1  11 11 11 10  
0046F2r 1  05 05 05 05  .res 7,$05
0046F6r 1  05 05 05     
0046F9r 1  00           .byte 0
0046FAr 1  50 50 50 50  .repeat 26
0046FEr 1  50 50 50 50  
004702r 1  05 05 05 05  
00489Ar 1               .res 8,$50
00489Ar 1               .res 7,$05
00489Ar 1               .byte 0
00489Ar 1               .endrepeat
00489Ar 1               
00489Ar 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10  ;  96-111    15x12 - 18
00489Er 1  11 11 11 10  
0048A2r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
0048A6r 1  FF FF FF 10  
0048AAr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
0048AEr 1  FF FF FF 10  
0048B2r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
0048B6r 1  FF FF FF 10  
0048BAr 1  1F FF FF F1  .byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$10
0048BEr 1  FF FF FF 10  
0048C2r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
0048C6r 1  FF FF FF 10  
0048CAr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
0048CEr 1  FF FF FF 10  
0048D2r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
0048D6r 1  FF FF FF 10  
0048DAr 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
0048DEr 1  FF FF FF 10  
0048E2r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
0048E6r 1  FF FF FF 10  
0048EAr 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
0048EEr 1  FF FF FF 10  
0048F2r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
0048F6r 1  11 11 11 10  
0048FAr 1  55 55 55 55  .repeat 52
0048FEr 1  55 55 55 50  
004902r 1  55 55 55 55  
004A9Ar 1               .res 7,$55
004A9Ar 1               .byte $50
004A9Ar 1               .endrepeat
004A9Ar 1               
004A9Ar 1               
004A9Ar 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10  ;  112-127    15x12 - 18 trans
004A9Er 1  11 11 11 10  
004AA2r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
004AA6r 1  F0 F0 F0 10  
004AAAr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
004AAEr 1  0F 0F 0F 10  
004AB2r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
004AB6r 1  F0 F0 F0 10  
004ABAr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
004ABEr 1  0F 0F 0F 10  
004AC2r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
004AC6r 1  F0 F0 F0 10  
004ACAr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
004ACEr 1  0F 0F 0F 10  
004AD2r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
004AD6r 1  F0 F0 F0 10  
004ADAr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
004ADEr 1  0F 0F 0F 10  
004AE2r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
004AE6r 1  F0 F0 F0 10  
004AEAr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
004AEEr 1  0F 0F 0F 10  
004AF2r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
004AF6r 1  11 11 11 10  
004AFAr 1  50 50 50 50  .repeat 26
004AFEr 1  50 50 50 50  
004B02r 1  05 05 05 05  
004C9Ar 1               .res 8,$50
004C9Ar 1               .res 7,$05
004C9Ar 1               .byte 0
004C9Ar 1               .endrepeat
004C9Ar 1               
004C9Ar 1               ; alernate tile graphic to use for tub wall .. 128-143
004C9Ar 1  16 16 16 16  .repeat 32
004C9Er 1  16 16 16 16  
004CA2r 1  61 61 61 61  
004E9Ar 1                   .byte $16, $16, $16, $16, $16, $16, $16, $16
004E9Ar 1                   .byte $61, $61, $61, $61, $61, $61, $61, $61
004E9Ar 1               .endrepeat
004E9Ar 1               
004E9Ar 1  10 10 10 10  .repeat 32  ;  144-159
004E9Er 1  10 10 10 10  
004EA2r 1  06 06 06 06  
00509Ar 1                   .byte $10, $10, $10, $10, $10, $10, $10, $10
00509Ar 1                   .byte $06, $06, $06, $06, $06, $06, $06, $06
00509Ar 1               .endrepeat
00509Ar 1               
00509Ar 1               
00509Ar 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$00  ;  160-175    14x12
00509Er 1  11 11 11 00  
0050A2r 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$fF,$FF,$F1,$00
0050A6r 1  FF FF F1 00  
0050AAr 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$fF,$FF,$F1,$00
0050AEr 1  FF FF F1 00  
0050B2r 1  1F FF FF FF  .byte $1f,$FF,$ff,$Ff,$Ff,$fF,$F1,$00
0050B6r 1  FF FF F1 00  
0050BAr 1  1F FF FF F1  .byte $1f,$FF,$FF,$f1,$fF,$FF,$F1,$00
0050BEr 1  FF FF F1 00  
0050C2r 1  1F FF FF FF  .byte $1f,$FF,$FF,$Ff,$Ff,$fF,$F1,$00
0050C6r 1  FF FF F1 00  
0050CAr 1  1F FF FF FF  .byte $1f,$FF,$FF,$fF,$FF,$FF,$F1,$00
0050CEr 1  FF FF F1 00  
0050D2r 1  1F FF FF FF  .byte $1f,$FF,$FF,$fF,$FF,$FF,$F1,$00
0050D6r 1  FF FF F1 00  
0050DAr 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$FF,$FF,$F1,$00
0050DEr 1  FF FF F1 00  
0050E2r 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$FF,$FF,$F1,$00
0050E6r 1  FF FF F1 00  
0050EAr 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$FF,$FF,$F1,$00
0050EEr 1  FF FF F1 00  
0050F2r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$00
0050F6r 1  11 11 11 00  
0050FAr 1  55 55 55 55  .repeat 52
0050FEr 1  55 55 55 00  
005102r 1  55 55 55 55  
00529Ar 1               .res 7,$55
00529Ar 1               .byte 0
00529Ar 1               .endrepeat
00529Ar 1               
00529Ar 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$00  ;  176-191
00529Er 1  11 11 11 00  
0052A2r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0052A6r 1  F0 F0 F0 10  
0052AAr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0052AEr 1  0F 0F 0F 10  
0052B2r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0052B6r 1  F0 F0 F0 10  
0052BAr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0052BEr 1  0F 0F 0F 10  
0052C2r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0052C6r 1  F0 F0 F0 10  
0052CAr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0052CEr 1  0F 0F 0F 10  
0052D2r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0052D6r 1  F0 F0 F0 10  
0052DAr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0052DEr 1  0F 0F 0F 10  
0052E2r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0052E6r 1  F0 F0 F0 10  
0052EAr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
0052EEr 1  0F 0F 0F 10  
0052F2r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
0052F6r 1  11 11 11 10  
0052FAr 1  50 50 50 50  .repeat 26
0052FEr 1  50 50 50 50  
005302r 1  05 05 05 05  
00549Ar 1               .res 8,$50
00549Ar 1               .res 7,$05
00549Ar 1               .byte 0
00549Ar 1               .endrepeat
00549Ar 1               
00549Ar 1  10 10 10 10  .repeat 64
00549Er 1  10 10 10 10  
0054A2r 1  10 10 10 10  
005C9Ar 1                 .res 32,$10
005C9Ar 1               .endrepeat
005C9Ar 1               
005C9Ar 1               
005C9Ar 1               HEX_DISPLAY_FONT:       ; 8x8x16 color = 32 bytes ... sprite addr 256
005C9Ar 1               ;     01   23   45   67
005C9Ar 1  00 11 11 00  .byte $00, $11, $11, $00   ; 0
005C9Er 1  01 00 00 10  .byte $01, $00, $00, $10
005CA2r 1  01 00 00 10  .byte $01, $00, $00, $10
005CA6r 1  00 00 00 00  .byte $00, $00, $00, $00
005CAAr 1  01 00 00 10  .byte $01, $00, $00, $10
005CAEr 1  01 00 00 10  .byte $01, $00, $00, $10
005CB2r 1  01 00 00 10  .byte $01, $00, $00, $10
005CB6r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 0 /
005CBAr 1               
005CBAr 1  00 00 00 00  .byte $00, $00, $00, $00 ; 1
005CBEr 1  00 00 00 10  .byte $00, $00, $00, $10
005CC2r 1  00 00 00 10  .byte $00, $00, $00, $10
005CC6r 1  00 00 00 00  .byte $00, $00, $00, $00
005CCAr 1  00 00 00 10  .byte $00, $00, $00, $10
005CCEr 1  00 00 00 10  .byte $00, $00, $00, $10
005CD2r 1  00 00 00 10  .byte $00, $00, $00, $10
005CD6r 1  00 00 00 00  .byte $00, $00, $00, $00
005CDAr 1               
005CDAr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 2
005CDEr 1  00 00 00 10  .byte $00, $00, $00, $10
005CE2r 1  00 00 00 10  .byte $00, $00, $00, $10
005CE6r 1  00 11 11 00  .byte $00, $11, $11, $00
005CEAr 1  01 00 00 00  .byte $01, $00, $00, $00
005CEEr 1  01 00 00 00  .byte $01, $00, $00, $00
005CF2r 1  01 00 00 00  .byte $01, $00, $00, $00
005CF6r 1  00 11 11 00  .byte $00, $11, $11, $00
005CFAr 1               
005CFAr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 3
005CFEr 1  00 00 00 10  .byte $00, $00, $00, $10
005D02r 1  00 00 00 10  .byte $00, $00, $00, $10
005D06r 1  00 11 11 00  .byte $00, $11, $11, $00
005D0Ar 1  00 00 00 10  .byte $00, $00, $00, $10
005D0Er 1  00 00 00 10  .byte $00, $00, $00, $10
005D12r 1  00 00 00 10  .byte $00, $00, $00, $10
005D16r 1  00 11 11 00  .byte $00, $11, $11, $00
005D1Ar 1               
005D1Ar 1  00 00 00 00  .byte $00, $00, $00, $00   ; 4
005D1Er 1  01 00 00 10  .byte $01, $00, $00, $10
005D22r 1  01 00 00 10  .byte $01, $00, $00, $10
005D26r 1  00 11 11 00  .byte $00, $11, $11, $00
005D2Ar 1  00 00 00 10  .byte $00, $00, $00, $10
005D2Er 1  00 00 00 10  .byte $00, $00, $00, $10
005D32r 1  00 00 00 10  .byte $00, $00, $00, $10
005D36r 1  00 00 00 00  .byte $00, $00, $00, $00
005D3Ar 1               
005D3Ar 1  00 11 11 00  .byte $00, $11, $11, $00   ; 5
005D3Er 1  01 00 00 00  .byte $01, $00, $00, $00
005D42r 1  01 00 00 00  .byte $01, $00, $00, $00
005D46r 1  00 11 11 00  .byte $00, $11, $11, $00
005D4Ar 1  00 00 00 10  .byte $00, $00, $00, $10
005D4Er 1  00 00 00 10  .byte $00, $00, $00, $10
005D52r 1  00 00 00 10  .byte $00, $00, $00, $10
005D56r 1  00 11 11 00  .byte $00, $11, $11, $00
005D5Ar 1               
005D5Ar 1  00 11 11 00  .byte $00, $11, $11, $00   ; 6
005D5Er 1  01 00 00 00  .byte $01, $00, $00, $00
005D62r 1  01 00 00 00  .byte $01, $00, $00, $00
005D66r 1  00 11 11 00  .byte $00, $11, $11, $00
005D6Ar 1  01 00 00 10  .byte $01, $00, $00, $10
005D6Er 1  01 00 00 10  .byte $01, $00, $00, $10
005D72r 1  01 00 00 10  .byte $01, $00, $00, $10
005D76r 1  00 11 11 00  .byte $00, $11, $11, $00
005D7Ar 1               
005D7Ar 1  00 01 01 00  .byte $00, $01, $01, $00 ; 7
005D7Er 1  00 00 00 10  .byte $00, $00, $00, $10
005D82r 1  00 00 00 10  .byte $00, $00, $00, $10
005D86r 1  00 00 00 00  .byte $00, $00, $00, $00
005D8Ar 1  00 00 00 10  .byte $00, $00, $00, $10
005D8Er 1  00 00 00 10  .byte $00, $00, $00, $10
005D92r 1  00 00 00 10  .byte $00, $00, $00, $10
005D96r 1  00 00 00 00  .byte $00, $00, $00, $00
005D9Ar 1               
005D9Ar 1  00 11 11 00  .byte $00, $11, $11, $00   ; 8
005D9Er 1  01 00 00 10  .byte $01, $00, $00, $10
005DA2r 1  01 00 00 10  .byte $01, $00, $00, $10
005DA6r 1  00 11 11 00  .byte $00, $11, $11, $00
005DAAr 1  01 00 00 10  .byte $01, $00, $00, $10
005DAEr 1  01 00 00 10  .byte $01, $00, $00, $10
005DB2r 1  01 00 00 10  .byte $01, $00, $00, $10
005DB6r 1  00 11 11 00  .byte $00, $11, $11, $00
005DBAr 1               
005DBAr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 9
005DBEr 1  01 00 00 10  .byte $01, $00, $00, $10
005DC2r 1  01 00 00 10  .byte $01, $00, $00, $10
005DC6r 1  00 11 11 00  .byte $00, $11, $11, $00
005DCAr 1  00 00 00 10  .byte $00, $00, $00, $10
005DCEr 1  00 00 00 10  .byte $00, $00, $00, $10
005DD2r 1  00 00 00 10  .byte $00, $00, $00, $10
005DD6r 1  00 11 11 00  .byte $00, $11, $11, $00
005DDAr 1               
005DDAr 1  00 11 11 00  .byte $00, $11, $11, $00   ; A
005DDEr 1  01 00 00 10  .byte $01, $00, $00, $10
005DE2r 1  01 00 00 10  .byte $01, $00, $00, $10
005DE6r 1  00 11 11 00  .byte $00, $11, $11, $00
005DEAr 1  01 00 00 10  .byte $01, $00, $00, $10
005DEEr 1  01 00 00 10  .byte $01, $00, $00, $10
005DF2r 1  01 00 00 10  .byte $01, $00, $00, $10
005DF6r 1  00 00 00 00  .byte $00, $00, $00, $00
005DFAr 1               
005DFAr 1               
005DFAr 1  00 00 00 00  .byte $00, $00, $00, $00   ; B
005DFEr 1  01 00 00 00  .byte $01, $00, $00, $00
005E02r 1  01 00 00 00  .byte $01, $00, $00, $00
005E06r 1  00 11 11 00  .byte $00, $11, $11, $00
005E0Ar 1  01 00 00 10  .byte $01, $00, $00, $10
005E0Er 1  01 00 00 10  .byte $01, $00, $00, $10
005E12r 1  01 00 00 10  .byte $01, $00, $00, $10
005E16r 1  00 11 11 00  .byte $00, $11, $11, $00
005E1Ar 1               
005E1Ar 1  00 11 11 00  .byte $00, $11, $11, $00   ; C
005E1Er 1  01 00 00 00  .byte $01, $00, $00, $00
005E22r 1  01 00 00 00  .byte $01, $00, $00, $00
005E26r 1  00 00 00 00  .byte $00, $00, $00, $00
005E2Ar 1  01 00 00 00  .byte $01, $00, $00, $00
005E2Er 1  01 00 00 00  .byte $01, $00, $00, $00
005E32r 1  01 00 00 00  .byte $01, $00, $00, $00
005E36r 1  00 11 11 00  .byte $00, $11, $11, $00
005E3Ar 1               
005E3Ar 1  00 00 00 00  .byte $00, $00, $00, $00   ; D
005E3Er 1  00 00 00 10  .byte $00, $00, $00, $10
005E42r 1  00 00 00 10  .byte $00, $00, $00, $10
005E46r 1  00 11 11 00  .byte $00, $11, $11, $00
005E4Ar 1  01 00 00 10  .byte $01, $00, $00, $10
005E4Er 1  01 00 00 10  .byte $01, $00, $00, $10
005E52r 1  01 00 00 10  .byte $01, $00, $00, $10
005E56r 1  00 11 11 00  .byte $00, $11, $11, $00
005E5Ar 1               
005E5Ar 1  00 11 11 00  .byte $00, $11, $11, $00   ; E
005E5Er 1  01 00 00 00  .byte $01, $00, $00, $00
005E62r 1  01 00 00 00  .byte $01, $00, $00, $00
005E66r 1  00 11 11 00  .byte $00, $11, $11, $00
005E6Ar 1  01 00 00 00  .byte $01, $00, $00, $00
005E6Er 1  01 00 00 00  .byte $01, $00, $00, $00
005E72r 1  01 00 00 00  .byte $01, $00, $00, $00
005E76r 1  00 11 11 00  .byte $00, $11, $11, $00
005E7Ar 1               
005E7Ar 1  00 11 11 00  .byte $00, $11, $11, $00   ; F   sprite addr 48
005E7Er 1  01 00 00 00  .byte $01, $00, $00, $00
005E82r 1  01 00 00 00  .byte $01, $00, $00, $00
005E86r 1  00 11 11 00  .byte $00, $11, $11, $00
005E8Ar 1  01 00 00 00  .byte $01, $00, $00, $00
005E8Er 1  01 00 00 00  .byte $01, $00, $00, $00
005E92r 1  01 00 00 00  .byte $01, $00, $00, $00
005E96r 1  00 00 00 00  .byte $00, $00, $00, $00
005E9Ar 1               
005E9Ar 1               test_cell_sprite:    ;  is 16x64x16 bit = 512 bytes   sprite addr = 10
005E9Ar 1               ;     01   23   45   67   89   AB   CD   EF
005E9Ar 1  CC C9 CC C9  .byte $CC, $C9, $CC, $C9, $CC, $C9, $CC, $C0    ;  0
005E9Er 1  CC C9 CC C0  
005EA2r 1  09 9B 99 9B  .byte $09, $9B, $99, $9B, $99, $9B, $99, $9C    ;  1
005EA6r 1  99 9B 99 9C  
005EAAr 1  CB BC BB BC  .byte $CB, $BC, $BB, $BC, $BB, $BC, $BB, $B0    ;  2
005EAEr 1  BB BC BB B0  
005EB2r 1  0C C9 CC C9  .byte $0C, $C9, $CC, $C9, $CC, $C9, $CC, $CC    ;  3
005EB6r 1  CC C9 CC CC  
005EBAr 1  C9 9B 99 9B  .byte $C9, $9B, $99, $9B, $99, $9B, $99, $90    ;  4
005EBEr 1  99 9B 99 90  
005EC2r 1  0B BC BB BC  .byte $0B, $BC, $BB, $BC, $BB, $BC, $BB, $BC    ;  5
005EC6r 1  BB BC BB BC  
005ECAr 1  CC C9 CC C9  .byte $CC, $C9, $CC, $C9, $CC, $C9, $CC, $C0    ;  6
005ECEr 1  CC C9 CC C0  
005ED2r 1  09 9B 99 9B  .byte $09, $9B, $99, $9B, $99, $9B, $99, $9C    ;  7
005ED6r 1  99 9B 99 9C  
005EDAr 1  CB BC BB BC  .byte $CB, $BC, $BB, $BC, $BB, $BC, $BB, $B0    ;  8 ; 45* is 9.5 ..
005EDEr 1  BB BC BB B0  
005EE2r 1  0C 09 0C 09  .byte $0C, $09, $0C, $09, $0C, $09, $0C, $0C    ;  9
005EE6r 1  0C 09 0C 0C  
005EEAr 1  09 90 09 90  .byte $09, $90, $09, $90, $09, $90, $09, $90   ;  10
005EEEr 1  09 90 09 90  
005EF2r 1  0E 9E E9 9E  .byte $0E, $9E, $E9, $9E, $E9, $9E, $E9, $9E   ;  11
005EF6r 1  E9 9E E9 9E  
005EFAr 1               
005EFAr 1  EE EE EE EE  .repeat 13
005EFEr 1  EE EE EE E0  
005F02r 1  0E EE 66 EE  
00609Ar 1                   .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $E0    ;  12
00609Ar 1                   .byte $0E, $EE, $66, $EE, $EE, $66, $EE, $EE    ;
00609Ar 1                   .byte $EE, $66, $EE, $66, $66, $EE, $66, $E0    ;
00609Ar 1                   .byte $06, $EE, $EE, $EE, $EE, $EE, $EE, $66    ;
00609Ar 1               .endrepeat
00609Ar 1               
00609Ar 1               test_border: ; 32
00609Ar 1  0B 0B 0B 0B  .repeat 64
00609Er 1  B0 B0 B0 B0  
0060A2r 1  0B 0B 0B 0B  
00629Ar 1                  .res 4, $0B
00629Ar 1                  .res 4, $B0
00629Ar 1               .endrepeat
00629Ar 1               
00629Ar 1               test_cross_hair_8x8:    ;  8x8x16 color = 32 bytes ; sprite 96
00629Ar 1               ;     01   23   45   67
00629Ar 1  11 00 00 11  .byte $11, $00, $00, $11
00629Er 1  10 00 00 01  .byte $10, $00, $00, $01
0062A2r 1  00 00 00 00  .byte $00, $00, $00, $00
0062A6r 1  00 01 10 00  .byte $00, $01, $10, $00
0062AAr 1  00 01 10 00  .byte $00, $01, $10, $00
0062AEr 1  00 00 00 00  .byte $00, $00, $00, $00
0062B2r 1  10 00 00 01  .byte $10, $00, $00, $01
0062B6r 1  11 00 00 11  .byte $11, $00, $00, $11
0062BAr 1               
0062BAr 1  00 00 00 00  .byte $00, $00, $00, $00  ;  bearing label   sprite addr 97
0062BEr 1  00 00 01 00  .byte $00, $00, $01, $00
0062C2r 1  00 00 10 00  .byte $00, $00, $10, $00
0062C6r 1  00 01 00 00  .byte $00, $01, $00, $00
0062CAr 1  00 10 00 00  .byte $00, $10, $00, $00
0062CEr 1  01 00 00 00  .byte $01, $00, $00, $00
0062D2r 1  11 11 11 00  .byte $11, $11, $11, $00
0062D6r 1  00 00 00 00  .byte $00, $00, $00, $00
0062DAr 1               
0062DAr 1               ; cell position label sprite addr 50-57
0062DAr 1  00 FF 00 FF  .byte $00,$FF,$00,$FF,$FF,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0062DEr 1  FF 00 FF 00  
0062E2r 1  00 FF 00 00  
0062FAr 1  FF 00 00 FF  .byte $FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0062FEr 1  00 00 FF 00  
006302r 1  00 FF 00 00  
00631Ar 1  FF 00 00 FF  .byte $FF,$00,$00,$FF,$FF,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00631Er 1  FF 00 FF 00  
006322r 1  00 FF 00 00  
00633Ar 1  FF 00 00 FF  .byte $FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00633Er 1  00 00 FF 00  
006342r 1  00 FF 00 00  
00635Ar 1  00 FF 00 FF  .byte $00,$FF,$00,$FF,$FF,$00,$FF,$FF,$00,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00635Er 1  FF 00 FF FF  
006362r 1  00 FF FF 00  
00637Ar 1               ;      01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF
00637Ar 1               ;     XH                               $XL                            ___  __  YH                              YL
00637Ar 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$00,$00,$10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00
00637Er 1  00 00 00 00  
006382r 1  10 10 10 00  
00639Ar 1  01 00 11 10  .byte $01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00
00639Er 1  00 00 00 00  
0063A2r 1  01 00 10 00  
0063BAr 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$11,$10,$00,$00,$00,$00,$00,$00,$01,$00,$10,$10,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00
0063BEr 1  00 00 00 00  
0063C2r 1  10 10 11 10  
0063DAr 1               
0063DAr 1               ; world position label 58-65
0063DAr 1               ;     XH                 $XL                  ___  ___  YH                  YL
0063DAr 1  FF 00 00 00  .byte $FF,$00,$00,$00,$FF,$00,$00,$FF,$00,$00,$FF,$FF,$00,$00,$FF,$00,$00,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0063DEr 1  FF 00 00 FF  
0063E2r 1  00 00 FF FF  
0063FAr 1  FF 00 00 00  .byte $FF,$00,$00,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$00,$FF,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0063FEr 1  FF 00 FF 00  
006402r 1  FF 00 FF 00  
00641Ar 1  FF 00 FF 00  .byte $FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$FF,$00,$00,$FF,$00,$00,$FF,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00641Er 1  FF 00 FF 00  
006422r 1  FF 00 FF FF  
00643Ar 1  FF 00 FF 00  .byte $FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$00,$FF,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00643Er 1  FF 00 FF 00  
006442r 1  FF 00 FF 00  
00645Ar 1  00 FF 00 FF  .byte $00,$FF,$00,$FF,$00,$00,$00,$FF,$00,$00,$FF,$00,$FF,$00,$FF,$FF,$00,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00645Er 1  00 00 00 FF  
006462r 1  00 00 FF 00  
00647Ar 1               ;      01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF
00647Ar 1               ;     XH                               $XL                            ___  __  YH                              YL
00647Ar 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$00,$00,$10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00
00647Er 1  00 00 00 00  
006482r 1  10 10 10 00  
00649Ar 1  01 00 11 10  .byte $01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00
00649Er 1  00 00 00 00  
0064A2r 1  01 00 10 00  
0064BAr 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$11,$10,$00,$00,$00,$00,$00,$00,$01,$00,$10,$10,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00
0064BEr 1  00 00 00 00  
0064C2r 1  10 10 11 10  
0064DAr 1               
0064DAr 1               ; directional cursor reminder... 16x16 - 66-69
0064DAr 1  00 10 00 10  .byte $00, $10, $00, $10, $01, $11, $11, $00
0064DEr 1  01 11 11 00  
0064E2r 1  00 10 00 10  .byte $00, $10, $00, $10, $01, $00, $00, $00
0064E6r 1  01 00 00 00  
0064EAr 1  00 10 10 10  .byte $00, $10, $10, $10, $01, $11, $00, $00
0064EEr 1  01 11 00 00  
0064F2r 1  00 10 10 10  .byte $00, $10, $10, $10, $01, $00, $00, $00
0064F6r 1  01 00 00 00  
0064FAr 1  00 01 01 00  .byte $00, $01, $01, $00, $01, $11, $11, $00
0064FEr 1  01 11 11 00  
006502r 1  00 00 00 00  .byte $00, $00, $00, $00, $00, $00, $00, $00
006506r 1  00 00 00 00  
00650Ar 1  01 11 00 00  .byte $01, $11, $00, $00, $00, $01, $11, $00
00650Er 1  00 01 11 00  
006512r 1  10 00 10 01  .byte $10, $00, $10, $01, $10, $01, $00, $01
006516r 1  10 01 00 01  
00651Ar 1  11 11 10 01  .byte $11, $11, $10, $01, $10, $01, $00, $01
00651Er 1  10 01 00 01  
006522r 1  10 00 10 00  .byte $10, $00, $10, $00, $00, $01, $11, $10
006526r 1  00 01 11 10  
00652Ar 1  00 00 00 00  .byte $00, $00, $00, $00, $00, $00, $00, $00
00652Er 1  00 00 00 00  
006532r 1  00 11 11 10  .byte $00, $11, $11, $10, $01, $00, $01, $00
006536r 1  01 00 01 00  
00653Ar 1  00 00 01 00  .byte $00, $00, $01, $00, $00, $10, $10, $00
00653Er 1  00 10 10 00  
006542r 1  00 00 10 00  .byte $00, $00, $10, $00, $00, $01, $00, $00
006546r 1  00 01 00 00  
00654Ar 1  00 01 00 00  .byte $00, $01, $00, $00, $00, $10, $10, $00
00654Er 1  00 10 10 00  
006552r 1  00 11 11 10  .byte $00, $11, $11, $10, $01, $00, $01, $00
006556r 1  01 00 01 00  
006559r 1               
