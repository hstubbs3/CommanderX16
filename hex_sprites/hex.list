ca65 V2.19 - Git 8e6c0c1
Main file   : hex.s
Current file: hex.s

000000r 1               ; 	080D
000000r 1  4C rr rr     jmp start ; 	3 bytes
000003r 1               ;	0810 	- 240 bytes available for stuff that doesn't need alignment
000003r 1  DE AD BE EF  .repeat 28
000007r 1  DE AD BE EF  
00000Br 1  DE AD BE EF  
000073r 1               	.byte $DE,$AD,$BE,$EF
000073r 1               .endrepeat
000073r 1               SCRATCH128:
000073r 1  DE AD BE EF  .repeat 32
000077r 1  DE AD BE EF  
00007Br 1  DE AD BE EF  
0000F3r 1               	.byte $DE,$AD,$BE,$EF
0000F3r 1               .endrepeat
0000F3r 1               
0000F3r 1               ACROSS_ROW_X_H: ; 0900  15.5 wide
0000F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0000F3r 1  10 0F 0F 0F  .byte $10, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $E, $E, $E, $E, $E, $E, $D, $D, $D, $D, $D, $C, $C, $C, $C, $B, $B, $B, $B, $A, $A, $A, $9, $9, $9, $8, $8, $8, $7, $7, $7, $6, $6, $6, $5, $5, $5, $4, $4, $3, $3, $3, $2, $2, $1, $1, $1, $0, $0, $0, $FF, $FF, $FE, $FE, $FE, $FD, $FD, $FC, $FC, $FC, $FB, $FB, $FA, $FA, $FA, $F9, $F9, $F9, $F8, $F8, $F8, $F7, $F7, $F7, $F6, $F6, $F6, $F5, $F5, $F5, $F4, $F4, $F4, $F4, $F3, $F3, $F3, $F3, $F2, $F2, $F2, $F2, $F2, $F1, $F1, $F1, $F1, $F1, $F1, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F1, $F1, $F1, $F1, $F1, $F1, $F2, $F2, $F2, $F2, $F2, $F3, $F3, $F3, $F3, $F4, $F4, $F4, $F4, $F5, $F5, $F5, $F6, $F6, $F6, $F7, $F7, $F7, $F8, $F8, $F8, $F9, $F9, $F9, $FA, $FA, $FA, $FB, $FB, $FC, $FC, $FC, $FD, $FD, $FE, $FE, $FE, $FF, $FF, $00, $0, $0, $1, $1, $1, $2, $2, $3, $3, $3, $4, $4, $5, $5, $5, $6, $6, $6, $7, $7, $7, $8, $8, $8, $9, $9, $9, $A, $A, $A, $B, $B, $B, $B, $C, $C, $C, $C, $D, $D, $D, $D, $D, $E, $E, $E, $E, $E, $E, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F
0000F7r 1  0F 0F 0F 0F  
0000FBr 1  0F 0F 0F 0F  
0001F3r 1               
0001F3r 1               ACROSS_ROW_X_L: ; 0A00
0001F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0001F3r 1  00 FE FB F4  .byte
0001F7r 1  EC E1 D3 C3  
0001FBr 1  B1 9C 85 6B  
0002F3r 1               
0002F3r 1               ACROSS_ROW_Y_H: ; 0B00
0002F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0002F3r 1  00 00 00 00  .byte
0002F7r 1  01 01 01 01  
0002FBr 1  02 02 02 03  
0003F3r 1               
0003F3r 1               ACROSS_ROW_Y_L: ; 0C00
0003F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0003F3r 1  00 47 8E D5  .byte $0, $47, $8E, $D5, $1B, $62, $A8, $EF, $35, $7A, $BF, $4, $48, $8C, $CF, $12, $54, $95, $D6, $16, $55, $93, $D1, $D, $49, $83, $BD, $F5, $2D, $63, $99, $CD, $0, $31, $62, $91, $BE, $EB, $16, $3F, $68, $8E, $B4, $D8, $FA, $1B, $3A, $57, $73, $8E, $A7, $BE, $D3, $E7, $F9, $9, $18, $25, $30, $3A, $42, $48, $4C, $4F, $50, $4F, $4C, $48, $42, $3A, $30, $25, $18, $9, $F9, $E7, $D3, $BE, $A7, $8E, $73, $57, $3A, $1B, $FA, $D8, $B4, $8E, $68, $3F, $16, $EB, $BE, $91, $62, $31, $0, $CD, $99, $63, $2D, $F5, $BD, $83, $49, $D, $D1, $93, $55, $16, $D6, $95, $54, $12, $CF, $8C, $48, $4, $BF, $7A, $35, $EF, $A8, $62, $1B, $D5, $8E, $47, $0, $B8, $71, $2A, $E4, $9D, $57, $10, $CA, $85, $40, $FB, $B7, $73, $30, $ED, $AB, $6A, $29, $E9, $AA, $6C, $2E, $F2, $B6, $7C, $42, $A, $D2, $9C, $66, $32, $0, $CE, $9D, $6E, $41, $14, $E9, $C0, $97, $71, $4B, $27, $5, $E4, $C5, $A8, $8C, $71, $58, $41, $2C, $18, $6, $F6, $E7, $DA, $CF, $C5, $BD, $B7, $B3, $B0, $AF, $B0, $B3, $B7, $BD, $C5, $CF, $DA, $E7, $F6, $6, $18, $2C, $41, $58, $71, $8C, $A8, $C5, $E4, $5, $27, $4B, $71, $97, $C0, $E9, $14, $41, $6E, $9D, $CE, $0, $32, $66, $9C, $D2, $A, $42, $7C, $B6, $F2, $2E, $6C, $AA, $E9, $29, $6A, $AB, $ED, $30, $73, $B7, $FB, $40, $85, $CA, $10, $57, $9D, $E4, $2A, $71, $B8
0003F7r 1  1B 62 A8 EF  
0003FBr 1  35 7A BF 04  
0004F3r 1               
0004F3r 1               NEXT_ROW_X_H: ; 0D00
0004F3r 1  F8 F7 F7 F7  .byte
0004F7r 1  F6 F6 F6 F5  
0004FBr 1  F5 F5 F4 F4  
0005F3r 1               
0005F3r 1               NEXT_ROW_X_L: ; 0E00
0005F3r 1  00 A9 54 00  .byte
0005F7r 1  AE 5D 0D BF  
0005FBr 1  73 28 DF 98  
0006F3r 1               
0006F3r 1               NEXT_ROW_Y_H: ; 0F00
0006F3r 1               ;.byte
0006F3r 1  09 09 09 09  .byte $9, $9, $9, $9, $9, $9, $8, $8, $8, $8, $8, $7, $7, $7, $7, $7, $6, $6, $6, $6, $5, $5, $5, $5, $5, $4, $4, $4, $3, $3, $3, $3, $2, $2, $2, $2, $1, $1, $1, $1, $0, $0, $0, $FF, $FF, $FF, $FF, $FE, $FE, $FE, $FD, $FD, $FD, $FD, $FC, $FC, $FC, $FC, $FB, $FB, $FB, $FB, $FA, $FA, $FA, $FA, $F9, $F9, $F9, $F9, $F8, $F8, $F8, $F8, $F8, $F7, $F7, $F7, $F7, $F7, $F7, $F6, $F6, $F6, $F6, $F6, $F6, $F5, $F5, $F5, $F5, $F5, $F5, $F5, $F5, $F5, $F5, $F5, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F5, $F5, $F5, $F5, $F5, $F5, $F5, $F5, $F5, $F5, $F6, $F6, $F6, $F6, $F6, $F6, $F6, $F7, $F7, $F7, $F7, $F7, $F8, $F8, $F8, $F8, $F8, $F9, $F9, $F9, $F9, $FA, $FA, $FA, $FA, $FA, $FB, $FB, $FB, $FC, $FC, $FC, $FC, $FD, $FD, $FD, $FD, $FE, $FE, $FE, $FE, $FF, $FF, $FF, $0, $0, $0, $0, $1, $1, $1, $2, $2, $2, $2, $3, $3, $3, $3, $4, $4, $4, $4, $5, $5, $5, $5, $6, $6, $6, $6, $7, $7, $7, $7, $7, $8, $8, $8, $8, $8, $8, $9, $9, $9, $9, $9, $9, $A, $A, $A, $A, $A, $A, $A, $A, $A, $A, $A, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B, $A, $A, $A, $A, $A, $A, $A, $A, $A, $A, $9
0006F7r 1  09 09 08 08  
0006FBr 1  08 08 08 07  
0007F3r 1               
0007F3r 1               NEXT_ROW_Y_L:
0007F3r 1               ; .byte $38, $19, $FA, $D9, $B7, $93, $6F, $49, $22, $FB, $D2, $A8, $7D, $51, $24, $F6, $C7, $97, $66, $35, $3, $D0, $9C, $67, $32, $FC, $C6, $8F, $57, $1F, $E7, $AE, $74, $3B, $0, $C6, $8B, $50, $15, $DA, $9E, $63, $27, $EC, $B0, $74, $39, $FE, $C2, $87, $4D, $12, $D8, $9E, $64, $2B, $F2, $BA, $82, $4B, $15, $DF, $A9, $75, $41, $D, $DB, $A9, $78, $48, $19, $EB, $BD, $91, $66, $3B, $12, $EA, $C3, $9D, $78, $54, $31, $10, $F0, $D1, $B4, $97, $7C, $62, $4A, $33, $1D, $9, $F6, $E5, $D4, $C6, $B8, $AC, $A2, $99, $92, $8B, $87, $84, $82, $82, $83, $86, $8A, $8F, $96, $9F, $A9, $B4, $C1, $CF, $DF, $F0, $3, $16, $2C, $42, $5A, $73, $8E, $AA, $C7, $E6, $5, $26, $48, $6C, $90, $B6, $DD, $4, $2D, $57, $82, $AE, $DB, $9, $38, $68, $99, $CA, $FC, $2F, $63, $98, $CD, $3, $39, $70, $A8, $E0, $18, $51, $8B, $C4, $FF, $39, $74, $AF, $EA, $25, $61, $9C, $D8, $13, $4F, $8B, $C6, $1, $3D, $78, $B2, $ED, $27, $61, $9B, $D4, $D, $45, $7D, $B4, $EA, $20, $56, $8A, $BE, $F2, $24, $56, $87, $B7, $E6, $14, $42, $6E, $99, $C4, $ED, $15, $3C, $62, $87, $AB, $CE, $EF, $F, $2E, $4B, $68, $83, $9D, $B5, $CC, $E2, $F6, $9, $1A, $2B, $39, $47, $53, $5D, $66, $6D, $74, $78, $7B, $7D, $7D, $7C, $79, $75, $70, $69, $60, $56, $4B, $3E, $30, $20, $F, $FC, $E9, $D3, $BD, $A5, $8C, $71, $55
0007F3r 1  CC A7 82 5A  .byte
0007F7r 1  32 08 DC AF  
0007FBr 1  81 52 21 EF  
0008F3r 1               
0008F3r 1               
0008F3r 1               SPRITE_NUM_HIGH_NIBBLE:
0008F3r 1  21 21 21 21  .res 16, 33
0008F7r 1  21 21 21 21  
0008FBr 1  21 21 21 21  
000903r 1  22 22 22 22  .res 16, 34
000907r 1  22 22 22 22  
00090Br 1  22 22 22 22  
000913r 1  23 23 23 23  .res 16, 35
000917r 1  23 23 23 23  
00091Br 1  23 23 23 23  
000923r 1  24 24 24 24  .res 16, 36
000927r 1  24 24 24 24  
00092Br 1  24 24 24 24  
000933r 1  25 25 25 25  .res 16, 37
000937r 1  25 25 25 25  
00093Br 1  25 25 25 25  
000943r 1  26 26 26 26  .res 16, 38
000947r 1  26 26 26 26  
00094Br 1  26 26 26 26  
000953r 1  27 27 27 27  .res 16, 39
000957r 1  27 27 27 27  
00095Br 1  27 27 27 27  
000963r 1  28 28 28 28  .res 16, 40
000967r 1  28 28 28 28  
00096Br 1  28 28 28 28  
000973r 1  29 29 29 29  .res 16, 41
000977r 1  29 29 29 29  
00097Br 1  29 29 29 29  
000983r 1  2A 2A 2A 2A  .res 16, 42
000987r 1  2A 2A 2A 2A  
00098Br 1  2A 2A 2A 2A  
000993r 1  2B 2B 2B 2B  .res 16, 43
000997r 1  2B 2B 2B 2B  
00099Br 1  2B 2B 2B 2B  
0009A3r 1  2C 2C 2C 2C  .res 16, 44
0009A7r 1  2C 2C 2C 2C  
0009ABr 1  2C 2C 2C 2C  
0009B3r 1  2D 2D 2D 2D  .res 16, 45
0009B7r 1  2D 2D 2D 2D  
0009BBr 1  2D 2D 2D 2D  
0009C3r 1  2E 2E 2E 2E  .res 16, 46
0009C7r 1  2E 2E 2E 2E  
0009CBr 1  2E 2E 2E 2E  
0009D3r 1  2F 2F 2F 2F  .res 16, 47
0009D7r 1  2F 2F 2F 2F  
0009DBr 1  2F 2F 2F 2F  
0009E3r 1  30 30 30 30  .res 16, 48
0009E7r 1  30 30 30 30  
0009EBr 1  30 30 30 30  
0009F3r 1               
0009F3r 1               SPRITE_NUM_LOW_NIBBLE:
0009F3r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
0009F7r 1  25 26 27 28  
0009FBr 1  29 2A 2B 2C  
000A03r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
000A07r 1  25 26 27 28  
000A0Br 1  29 2A 2B 2C  
000A13r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
000A17r 1  25 26 27 28  
000A1Br 1  29 2A 2B 2C  
000A23r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
000A27r 1  25 26 27 28  
000A2Br 1  29 2A 2B 2C  
000A33r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
000A37r 1  25 26 27 28  
000A3Br 1  29 2A 2B 2C  
000A43r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
000A47r 1  25 26 27 28  
000A4Br 1  29 2A 2B 2C  
000A53r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
000A57r 1  25 26 27 28  
000A5Br 1  29 2A 2B 2C  
000A63r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
000A67r 1  25 26 27 28  
000A6Br 1  29 2A 2B 2C  
000A73r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
000A77r 1  25 26 27 28  
000A7Br 1  29 2A 2B 2C  
000A83r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
000A87r 1  25 26 27 28  
000A8Br 1  29 2A 2B 2C  
000A93r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
000A97r 1  25 26 27 28  
000A9Br 1  29 2A 2B 2C  
000AA3r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
000AA7r 1  25 26 27 28  
000AABr 1  29 2A 2B 2C  
000AB3r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
000AB7r 1  25 26 27 28  
000ABBr 1  29 2A 2B 2C  
000AC3r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
000AC7r 1  25 26 27 28  
000ACBr 1  29 2A 2B 2C  
000AD3r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
000AD7r 1  25 26 27 28  
000ADBr 1  29 2A 2B 2C  
000AE3r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
000AE7r 1  25 26 27 28  
000AEBr 1  29 2A 2B 2C  
000AF3r 1               
000AF3r 1               TUB_WORLD:
000AF3r 1               .include "tub_world.inc"
000AF3r 2               ; 0 to 128 will be water level. >128 = distance along row to water (neg) , 128 = no water this row.
000AF3r 2               ; rows are stored within 64 byte rows
000AF3r 2               ; 	                                                              0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63
000AF3r 2  80 80 80 80  .byte                                                             $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80  ; 00 - tub
000AF7r 2  80 80 80 80  
000AFBr 2  80 80 80 80  
000B33r 2  80 80 80 FC  .byte                                                           $80,$80,$80,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4,$F3,$F2,$F1,$F0,$EF,$EE,$ED,$EC,$EB  ; 01
000B37r 2  FD FE FF 00  
000B3Br 2  00 00 00 00  
000B73r 2  80 80 80 FD  .byte                                                         $80,$80,$80,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4,$F3,$F2,$F1,$F0,$EF,$EE,$ED  ; 2
000B77r 2  FE FF 00 00  
000B7Br 2  00 00 00 00  
000BB3r 2  80 80 80 FE  .byte                                                       $80,$80,$80,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4,$F3,$F2,$F1,$F0,$EF  ; 3
000BB7r 2  FF 00 00 00  
000BBBr 2  00 00 00 00  
000BF3r 2  80 80 FE FF  .byte                                                     $80,$80,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4,$F3,$F2,$F1  ; 4
000BF7r 2  00 00 00 00  
000BFBr 2  00 00 00 00  
000C33r 2  80 80 FE FF  .byte                                                   $80,$80,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4,$F3,$F2  ; 5
000C37r 2  00 00 00 00  
000C3Br 2  00 00 00 00  
000C73r 2  80 80 FE FF  .byte                                                 $80,$80,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4,$F3 ; 6
000C77r 2  00 00 00 00  
000C7Br 2  00 00 00 00  
000CB3r 2  80 80 FE FF  .byte                                               $80,$80,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4 ; 7
000CB7r 2  00 00 00 00  
000CBBr 2  00 00 00 00  
000CF3r 2  80 80 FE FF  .byte                                             $80,$80,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5 ; 8
000CF7r 2  00 00 00 00  
000CFBr 2  00 00 00 00  
000D33r 2  80 80 FE FF  .byte                                           $80,$80,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6 ; 9
000D37r 2  00 00 00 00  
000D3Br 2  00 00 00 00  
000D73r 2  80 80 80 FE  .byte                                         $80,$80,$80,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6 ; 10
000D77r 2  FF 00 00 00  
000D7Br 2  00 00 00 00  
000DB3r 2  80 80 80 FE  .byte                                       $80,$80,$80,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6 ; 11
000DB7r 2  FF 00 00 00  
000DBBr 2  00 00 00 00  
000DF3r 2  FA FB FC FD  .byte                                     $FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7 ; 12
000DF7r 2  FE FF 00 00  
000DFBr 2  00 00 00 00  
000E33r 2  FA FB FC FD  .byte                                   $FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8 ; 13
000E37r 2  FE FF 00 00  
000E3Br 2  00 00 00 00  
000E73r 2  FA FB FC FD  .byte                                 $FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8 ; 14
000E77r 2  FE FF 00 00  
000E7Br 2  00 00 00 00  
000EB2r 2  F9 FA FB FC  .byte                               $F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9 ; 15
000EB6r 2  FD FE FF 00  
000EBAr 2  00 00 00 00  
000EF2r 2  80 80 80 FB  .byte                             $80,$80,$80,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9 ; 16
000EF6r 2  FC FD FE FF  
000EFAr 2  00 00 00 00  
000F32r 2  80 80 80 FB  .byte                           $80,$80,$80,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA ; 17
000F36r 2  FC FD FE FF  
000F3Ar 2  00 00 00 00  
000F72r 2  80 80 80 FC  .byte                         $80,$80,$80,$FC,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA ; 18
000F76r 2  FB FC FD FE  
000F7Ar 2  FF 00 00 00  
000FB2r 2  80 80 80 FA  .byte                       $80,$80,$80,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB ; 19
000FB6r 2  FB FC FD FE  
000FBAr 2  FF 00 00 00  
000FF2r 2  80 80 80 F9  .byte                     $80,$80,$80,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB ; 20
000FF6r 2  FA FB FC FD  
000FFAr 2  FE FF 00 00  
001032r 2  80 80 80 F9  .byte                   $80,$80,$80,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC ; 21
001036r 2  FA FB FC FD  
00103Ar 2  FE FF 00 00  
001072r 2  80 80 80 F8  .byte                 $80,$80,$80,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC ; 22
001076r 2  F9 FA FB FC  
00107Ar 2  FD FE FF 00  
0010B2r 2  80 80 80 F7  .byte               $80,$80,$80,$F7,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC ; 23
0010B6r 2  F8 F9 FA FB  
0010BAr 2  FC FD FE FF  
0010F2r 2  80 80 80 F6  .byte             $80,$80,$80,$F6,$F7,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC ; 24
0010F6r 2  F7 F8 F9 FA  
0010FAr 2  FB FC FD FE  
001132r 2  80 80 80 F5  .byte           $80,$80,$80,$F5,$F6,$F7,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC ; 25
001136r 2  F6 F7 F8 F9  
00113Ar 2  FA FB FC FD  
001172r 2  80 80 80 F4  .byte         $80,$80,$80,$F4,$F5,$F6,$F7,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB ; 26
001176r 2  F5 F6 F7 F8  
00117Ar 2  F9 FA FB FC  
0011B2r 2  80 80 80 F2  .byte       $80,$80,$80,$F2,$F3,$F4,$F5,$F6,$F7,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA ; 27
0011B6r 2  F3 F4 F5 F6  
0011BAr 2  F7 F8 F9 FA  
0011F2r 2  80 80 80 F0  .byte     $80,$80,$80,$F0,$F1,$F2,$F3,$F4,$F5,$F6,$F7,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9 ; 28
0011F6r 2  F1 F2 F3 F4  
0011FAr 2  F5 F6 F7 F8  
001232r 2  80 80 80 EE  .byte   $80,$80,$80,$EE,$EF,$F0,$F1,$F2,$F3,$F4,$F5,$F6,$F7,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8 ; 29
001236r 2  EF F0 F1 F2  
00123Ar 2  F3 F4 F5 F6  
001272r 2  80 80 80 80  .byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80  ; 30
001276r 2  80 80 80 80  
00127Ar 2  80 80 80 80  
0012B2r 2               
0012B2r 2               
0012B2r 2               
0012B2r 1               ;constants
0012B2r 1               
0012B2r 1               ; RAM Interrupt Vectors
0012B2r 1               IRQVec            = $0314
0012B2r 1               
0012B2r 1               ; VERA
0012B2r 1               VERA_addr_low     = $9F20
0012B2r 1               VERA_addr_high    = $9F21
0012B2r 1               VERA_addr_bank    = $9F22
0012B2r 1               VERA_data0        = $9F23
0012B2r 1               VERA_data1        = $9F24
0012B2r 1               VERA_ctrl         = $9F25
0012B2r 1               VERA_ien          = $9F26
0012B2r 1               VERA_isr          = $9F27
0012B2r 1               VERA_dc_video     = $9F29 ; DCSEL = 0
0012B2r 1               ;   Current Field | Sprites Enable | Layer1 Enable  |Layer0 Enable
0012B2r 1               ; NTSC/RGB: 240P  | NTSC: Chroma Disable / RGB: HV Sync Output Mode
0012B2r 1               
0012B2r 1               VERA_dc_hscale    = $9F2A
0012B2r 1               VERA_dc_vscale    = $9F2B
0012B2r 1               
0012B2r 1               VERA_L0_config    = $9F2D
0012B2r 1               ;   7       6     5   4       3       2             1   0
0012B2r 1               ;   Map Height | Map Width | T256C | Bitmap Mode | Color Depth
0012B2r 1               ;   0 - 32                  0 - 16    0 tiled       0   1bpp mono
0012B2r 1               ;   1 - 64                  1 - 256   1 enabled     1   2bpp 4 color
0012B2r 1               ;   2 - 128                                         2   4bpp 16 color
0012B2r 1               ;   3 - 256                                         3   8bpp 256 color
0012B2r 1               ;   bitmap mode - tilebase points to bitmap data, mapbase not used
0012B2r 1               ;   tile width = 0 is 320 pixels / tile width=1 is 640 pixels.. so could do 4bpp x 320?
0012B2r 1               ;   The palette offset (in 'H-Scroll (11:8)') modifies the color indexes of the bitmap in the same way as in the tile modes.
0012B2r 1               
0012B2r 1               VERA_L0_mapbase   = $9F2E
0012B2r 1               VERA_L0_tilebase  = $9F2F ;   Tile Base Address (16:11) | Tile Height 0-8/1-16 | Tile Width 0-8/1-16
0012B2r 1               VERA_L0_HSCROLL_L = $9F30 ;  H-Scroll (7:0)
0012B2r 1               VERA_L0_HSCROLL_H = $9F31 ;  - H-Scroll (11:8)
0012B2r 1               VERA_L0_VSCROLL_L = $9F32 ;  V-Scroll (7:0)
0012B2r 1               VERA_L0_VSCROLL_H = $9F33 ;  - V-Scroll (11:8)
0012B2r 1               
0012B2r 1               VERA_L1_config    = $9F34
0012B2r 1               VERA_L1_mapbase   = $9F35
0012B2r 1               VERA_L1_tilebase  = $9F36
0012B2r 1               VERA_L1_HSCROLL_L = $9F37 ;  H-Scroll (7:0)
0012B2r 1               VERA_L1_HSCROLL_H = $9F38 ;  - H-Scroll (11:8)
0012B2r 1               VERA_L1_VSCROLL_L = $9F39 ;  V-Scroll (7:0)
0012B2r 1               VERA_L1_VSCROLL_H = $9F3A ;  - V-Scroll (11:8)
0012B2r 1               
0012B2r 1               VSYNC_BIT         = $01
0012B2r 1               
0012B2r 1               ; VRAM Addresses
0012B2r 1               ;   Address range Description
0012B2r 1               ;   $00000 - $1F9BF Video RAM   - 129,424 bytes -> 126K is 129,024 (1F800)
0012B2r 1               ;   $1F9C0 - $1F9FF PSG registers
0012B2r 1               ;   $1FA00 - $1FBFF Palette
0012B2r 1               ;   $1FC00 - $1FFFF Sprite attributes
0012B2r 1               
0012B2r 1               VRAM_UNRESERVED   = $1A000      ;
0012B2r 1               ; sprite starts must be 32byte aligned...
0012B2r 1               ; only can go to 126K ...
0012B2r 1               VRAM_palette      = $1FA00      ;
0012B2r 1               VRAM_sprite_attributes = $1FC00
0012B2r 1               
0012B2r 1               SPRITES_ONLY_VGA = $41
0012B2r 1               
0012B2r 1               
0012B2r 1               
0012B2r 1               ; Kernal
0012B2r 1               CHROUT            = $FFD2
0012B2r 1               GETIN             = $FFE4
0012B2r 1               CINT              = $FF81
0012B2r 1               
0012B2r 1               
0012B2r 1               ; PETSCII Codes
0012B2r 1               WHITE             = $05
0012B2r 1               RETURN            = $0D
0012B2r 1               SPACE             = $20
0012B2r 1               ZERO_CHAR         = $30
0012B2r 1               SIX_CHAR          = $36
0012B2r 1               NINE_CHAR         = $39
0012B2r 1               C_CHAR            = $43
0012B2r 1               I_CHAR            = $49
0012B2r 1               O_CHAR            = $4F
0012B2r 1               T_CHAR            = $54
0012B2r 1               CLR               = $93
0012B2r 1               
0012B2r 1               ; 	$0800-$9EFF	BASIC program/variables; available to the user
0012B2r 1               WORLD_DATA = $6000 	;	so is %100 [Y 5 bits ] : [ab] 0 [X - 6 bits
0012B2r 1               SCREEN_buffer = $8000
0012B2r 1               
0012B2r 1               ; zero page layout $0022-$007F is available to user
0012B2r 1               ZP_PTR = $22
0012B2r 1               SCRATCH_PTR = $7E
0012B2r 1               
0012B2r 1               ; global data
0012B2r 1  DE AD BE EF  .byte $DE,$AD,$BE,$EF
0012B6r 1  00 00        default_irq_vector:  .addr 0
0012B8r 1  01           VSYNC_counter:       .byte 1
0012B9r 1  01           camera_facing: 		 .byte 1
0012BAr 1               
0012BAr 1  20           camera_cell_x: 		 .byte 32
0012BBr 1  0F           camera_cell_y: 		 .byte 15
0012BCr 1               
0012BCr 1               .macro stash_scratch
0012BCr 1               	STA (SCRATCH_PTR)
0012BCr 1                   INC SCRATCH_PTR
0012BCr 1               .endmacro
0012BCr 1               
0012BCr 1               custom_irq_handler:
0012BCr 1  AD 27 9F        lda VERA_isr
0012BFr 1  29 01           and #VSYNC_BIT
0012C1r 1  F0 03           beq @continue ; non-VSYNC IRQ, no tick update
0012C3r 1  EE rr rr        inc VSYNC_counter
0012C6r 1               @continue:
0012C6r 1                  ; continue to default IRQ handler
0012C6r 1  6C rr rr        jmp (default_irq_vector)
0012C9r 1                  ; RTI will happen after jump
0012C9r 1               
0012C9r 1               start:
0012C9r 1                 ; start of program - init globals
0012C9r 1  AD 14 03       lda IRQVec
0012CCr 1  8D rr rr       sta default_irq_vector
0012CFr 1  AD 15 03       lda IRQVec+1
0012D2r 1  8D rr rr       sta default_irq_vector+1
0012D5r 1  9C 29 9F       stz VERA_dc_video   ; disable display
0012D8r 1  A9 2B          lda #43 ; set scale for bitmap mode - going for 215x161 mode
0012DAr 1  8D 2A 9F       sta VERA_dc_hscale
0012DDr 1  8D 2B 9F       sta VERA_dc_vscale
0012E0r 1                 ; for now no L0 or L1
0012E0r 1               
0012E0r 1                 ; let's stick that test sprite data into VRAM at zero for now..
0012E0r 1  9C 25 9F       stz VERA_ctrl
0012E3r 1  9C 20 9F       stz VERA_addr_low
0012E6r 1  9C 21 9F       stz VERA_addr_high
0012E9r 1  A9 10          lda #$10
0012EBr 1  8D 22 9F       sta VERA_addr_bank
0012EEr 1                 ; load test VRAM data
0012EEr 1               
0012EEr 1                 ; is 512 bytes at test_cell_sprite label
0012EEr 1  A0 00          ldy #0
0012F0r 1               
0012F0r 1  A9 rr          LDA #<test_vram_data
0012F2r 1  85 22          STA ZP_PTR
0012F4r 1  A9 rr          LDA #>test_vram_data
0012F6r 1  85 23          STA ZP_PTR+1
0012F8r 1  A2 07          LDX #7   ;   num pages to copy
0012FAr 1  80 02          BRA :++
0012FCr 1                 :
0012FCr 1  E6 23             INC ZP_PTR+1
0012FEr 1                   :
0012FEr 1  B1 22              LDA (ZP_PTR),Y
001300r 1  8D 23 9F           STA VERA_data0
001303r 1  C8                 INY
001304r 1  D0 F8              BNE :-
001306r 1  CA                DEX
001307r 1  D0 F3             BNE :--
001309r 1               
001309r 1                 ; write sprite test data
001309r 1  A9 FF          LDA #255
00130Br 1  8D 20 9F       STA VERA_addr_low
00130Er 1  A9 FC          lda #>VRAM_sprite_attributes
001310r 1  8D 21 9F       sta VERA_addr_high
001313r 1  A9 19          lda #$19   ;  decrement 1 bank 1
001315r 1  8D 22 9F       sta VERA_addr_bank
001318r 1  A2 FF          LDX #255
00131Ar 1                 :
00131Ar 1  BD rr rr         LDA test_sprite_data,X
00131Dr 1  8D 23 9F         STA VERA_data0
001320r 1  CA               DEX
001321r 1  D0 F7            BNE :-
001323r 1  BD rr rr        LDA test_sprite_data,X
001326r 1  8D 23 9F        STA VERA_data0
001329r 1               
001329r 1                 ; write custom palette data  - 16 colors only for now.. $1:FA00-$1:FBFF   VERA Color Palette (256 x 2 bytes)
001329r 1  A2 1F          LDX #31
00132Br 1  8E 20 9F       STX VERA_addr_low
00132Er 1  A9 FA          LDA #$FA
001330r 1  8D 21 9F       STA VERA_addr_high
001333r 1  A9 19          LDA #$19
001335r 1  8D 22 9F       STA VERA_addr_bank
001338r 1                 :
001338r 1  BD rr rr         LDA test_optimal_pal_data,X
00133Br 1  8D 23 9F         STA VERA_data0
00133Er 1  CA               DEX
00133Fr 1  D0 F7            BNE :-
001341r 1  BD rr rr       LDA test_optimal_pal_data,X
001344r 1  8D 23 9F       STA VERA_data0
001347r 1               
001347r 1                 ; enable display
001347r 1  9C 25 9F       stz VERA_ctrl
00134Ar 1  A9 41          lda #SPRITES_ONLY_VGA
00134Cr 1  8D 29 9F       sta VERA_dc_video
00134Fr 1               
00134Fr 1                 ; overwrite RAM IRQ vector with custom handler address
00134Fr 1  78             sei ; disable IRQ while vector is changing
001350r 1  A9 rr          lda #<custom_irq_handler
001352r 1  8D 14 03       sta IRQVec
001355r 1  A9 rr          lda #>custom_irq_handler
001357r 1  8D 15 03       sta IRQVec+1
00135Ar 1  A9 01          lda #VSYNC_BIT ; make VERA only generate VSYNC IRQs
00135Cr 1  8D 26 9F       sta VERA_ien
00135Fr 1  58             cli ; enable IRQ now that vector is properly set
001360r 1               
001360r 1                 ; main loop here...
001360r 1  9C rr rr        STz camera_facing
001363r 1               
001363r 1               @do_update:
001363r 1  20 rr rr        jsr draw_test
001366r 1  A9 80           lda #128
001368r 1  8D 20 9F        STA VERA_addr_low
00136Br 1  A9 FC           LDA #$FC
00136Dr 1  8D 21 9F        STA VERA_addr_high
001370r 1  A9 41           LDA #$41
001372r 1  8D 22 9F        STA VERA_addr_bank
001375r 1  AE rr rr        ldx camera_facing
001378r 1  BD rr rr        LDA SPRITE_NUM_HIGH_NIBBLE,X
00137Br 1  8D 23 9F        STA VERA_data0
00137Er 1  BD rr rr        LDA SPRITE_NUM_LOW_NIBBLE,X
001381r 1  8D 23 9F        STA VERA_data0
001384r 1               
001384r 1               @FRAME_CHECK:
001384r 1  A9 04           lda #4
001386r 1                 @frame_A:
001386r 1  CB              wai
001387r 1  AC rr rr        ldy VSYNC_counter
00138Ar 1  F0 FA           beq @frame_A
00138Cr 1  9C rr rr        stz VSYNC_counter
00138Fr 1  3A              DEC A
001390r 1  D0 F4           BNE @frame_A
001392r 1                  ; poll keyboard for input
001392r 1  20 E4 FF        jsr GETIN
001395r 1  C9 00           cmp #0
001397r 1  F0 EB           beq @FRAME_CHECK
001399r 1  C9 1D           cmp #$1D 	;	cursor right
00139Br 1  D0 05           BNE :+
00139Dr 1  CE rr rr        DEC camera_facing
0013A0r 1  80 C1           BRA @do_update
0013A2r 1                  :
0013A2r 1  C9 9D           cmp  #$9D 	;	cursor left
0013A4r 1  D0 BD           BNE @do_update
0013A6r 1  EE rr rr        INC camera_facing
0013A9r 1  80 B8           BRA @do_update
0013ABr 1               
0013ABr 1               @cleanup_and_exit:
0013ABr 1                  ; restore default IRQ vector
0013ABr 1  78              sei
0013ACr 1  AD rr rr        lda default_irq_vector
0013AFr 1  8D 14 03        sta IRQVec
0013B2r 1  AD rr rr        lda default_irq_vector+1
0013B5r 1  8D 15 03        sta IRQVec+1
0013B8r 1  58              cli
0013B9r 1  20 81 FF        jsr CINT
0013BCr 1  60              rts
0013BDr 1               
0013BDr 1               ; all the objects need to get into a structure to be drawn at each screen Y..
0013BDr 1               ; need object type, screenX .. store back to front .. track # objects to be drawn ?
0013BDr 1               ; there's 120 lines on screen.. up to say 32 objects per line would need about 8K RAM for the list.. each line needs 64 bytes
0013BDr 1               
0013BDr 1               draw_test:
0013BDr 1  9C 20 9F     	STZ VERA_addr_low
0013C0r 1  A9 FD            lda #>VRAM_sprite_attributes+1
0013C2r 1  8D 21 9F         sta VERA_addr_high
0013C5r 1  A9 11            lda #$11
0013C7r 1  8D 22 9F         sta VERA_addr_bank
0013CAr 1               
0013CAr 1               
0013CAr 1                   ; load increments and set start position...
0013CAr 1  AE rr rr         LDX camera_facing
0013CDr 1  8A               TXA
0013CEr 1  49 80            EOR #$80
0013D0r 1  85 33            STA ZP_PTR+17
0013D2r 1                   ; increments across rows
0013D2r 1  64 32            STZ ZP_PTR+16   ; 	is driving me nuts so ..
0013D4r 1               
0013D4r 1  64 2E            STZ ZP_PTR+12 	;	next row  start XL at ZP_PTR+12
0013D6r 1  64 30            STZ ZP_PTR+14 	;	next row  start YL at ZP_PTR+14
0013D8r 1               
0013D8r 1  A9 64            LDA #100
0013DAr 1  85 2F            STA ZP_PTR+13 	;	next row start at XH ZP_PTR+13
0013DCr 1  A9 84            LDA #132
0013DEr 1  85 31         	 STA ZP_PTR+15 	;	next row start YH at ZP_PTR+15
0013E0r 1               
0013E0r 1  BD rr rr         LDA ACROSS_ROW_X_L,X
0013E3r 1  85 26            STA ZP_PTR+4 	; 	ZP_PTR+4 = spriteX increment Low byte
0013E5r 1  BD rr rr         LDA ACROSS_ROW_X_H,X
0013E8r 1  85 27            STA ZP_PTR+5 	;	ZP_PTR+4 = spriteX increment high byte
0013EAr 1  BD rr rr         LDA ACROSS_ROW_Y_L,X
0013EDr 1  85 28            STA ZP_PTR+6 	; 	ZP_PTR+6 = spriteY increment low byte
0013EFr 1  BD rr rr         LDA ACROSS_ROW_Y_H,X
0013F2r 1  85 29            STA ZP_PTR+7 	; 	ZP_PTR+3 = spriteY increment
0013F4r 1                   ; increments o next rows
0013F4r 1  BD rr rr         LDA NEXT_ROW_X_L,X
0013F7r 1  85 2A            STA ZP_PTR+8 	; 	ZP_PTR+4 = spriteX increment Low byte
0013F9r 1  BD rr rr         LDA NEXT_ROW_X_H,X
0013FCr 1  85 2B            STA ZP_PTR+9 	;	ZP_PTR+4 = spriteX increment high byte
0013FEr 1  BD rr rr         LDA NEXT_ROW_Y_L,X
001401r 1  85 2C            STA ZP_PTR+10 	; 	ZP_PTR+6 = spriteY increment low byte
001403r 1  BD rr rr         LDA NEXT_ROW_Y_H,X
001406r 1  85 2D            STA ZP_PTR+11	; 	ZP_PTR+3 = spriteY increment
001408r 1               
001408r 1  A9 50            LDA #$50
00140Ar 1  85 40            STA ZP_PTR+30
00140Cr 1               
00140Cr 1  A0 60            LDY #96		;	amount of sprites we can write max
00140Er 1                 @quad_loop:
00140Er 1  A2 08           LDX #8
001410r 1  86 7F           STX $7F
001412r 1  80 04          	bra @do_row
001414r 1                 @next_row:
001414r 1  88                 DEY
001415r 1  D0 01              BNE @do_row
001417r 1  60                 rts
001418r 1                 @do_row:
001418r 1  C6 7F              DEC $7F
00141Ar 1  F0 77              BEQ @next_quad
00141Cr 1               
00141Cr 1  A2 1B           LDX #27
00141Er 1  A5 2E          	LDA ZP_PTR+12 	;
001420r 1  85 22          	STA ZP_PTR 		;	current row XL
001422r 1               
001422r 1  18               CLC  ; clear before doing 16bit add!
001423r 1  65 2A            ADC ZP_PTR+8
001425r 1  85 2E            STA ZP_PTR+12 	;	next row XL
001427r 1  A5 2F            LDA ZP_PTR+13 	;
001429r 1  C9 C9            CMP #201
00142Br 1  B0 66            BCS @next_quad 		;	off screen
00142Dr 1  85 23            STA ZP_PTR+1 	;	current row XH
00142Fr 1  65 2B            ADC ZP_PTR+9 	;
001431r 1  85 2F            STA ZP_PTR+13 	;	next row XH
001433r 1               
001433r 1  18               CLC  ; clear before doing 16bit add!
001434r 1  A5 30            LDA ZP_PTR+14
001436r 1  85 24            STA ZP_PTR+2 	;	current row YL
001438r 1  65 2C            ADC ZP_PTR+10
00143Ar 1  85 30            STA ZP_PTR+14 	;	next row YL
00143Cr 1  A5 31            LDA ZP_PTR+15
00143Er 1  C9 99            CMP #153
001440r 1  B0 51            BCS @next_quad;	off screen
001442r 1  85 25            STA ZP_PTR+3
001444r 1  65 2D            ADC ZP_PTR+11
001446r 1  85 31            STA ZP_PTR+15 	;	next row YH
001448r 1                 @forward_row_loop:
001448r 1  9C 23 9F           STZ VERA_data0 ; 	address 12:5
00144Br 1  9C 23 9F           STZ VERA_data0 ;  mode  | address 16:13
00144Er 1  A5 23              LDA ZP_PTR+1
001450r 1  8D 23 9F           STA VERA_data0 ; 	X 7:0
001453r 1  9C 23 9F           STZ VERA_data0 ; 	X 9:8
001456r 1  A5 25              LDA ZP_PTR+3  ; 	spriteY
001458r 1  8D 23 9F           STA VERA_data0 ;  Y 7:0
00145Br 1  9C 23 9F           STZ VERA_data0 ; 	Y 9:8
00145Er 1  A9 0C              LDA #$0C
001460r 1  8D 23 9F           STA VERA_data0 	; 	3 z depth no flip
001463r 1  A9 50              LDA #$50 			; 	16x8 no palette offset
001465r 1  A5 40              LDA ZP_PTR+30;
001467r 1  8D 23 9F           STA VERA_data0
00146Ar 1                   ; increment X
00146Ar 1  18               CLC  ; clear before doing 16bit add!
00146Br 1  A5 22              LDA ZP_PTR 	;	load X_l
00146Dr 1               
00146Dr 1  65 26              ADC ZP_PTR+4
00146Fr 1  85 22              STA ZP_PTR
001471r 1               
001471r 1  A5 23              LDA ZP_PTR+1
001473r 1  65 27              ADC ZP_PTR+5
001475r 1  C9 D0              CMP #208
001477r 1  B0 9B              BCS @next_row		; covers negatives even..
001479r 1  85 23              STA ZP_PTR+1
00147Br 1                   ; increment Y
00147Br 1  18               CLC  ; clear before doing 16bit add!
00147Cr 1               
00147Cr 1  A5 24              LDA ZP_PTR+2 	;
00147Er 1  65 28              ADC ZP_PTR+6
001480r 1  85 24              STA ZP_PTR+2
001482r 1               
001482r 1  A5 25              LDA ZP_PTR+3
001484r 1  65 29              ADC ZP_PTR+7
001486r 1  C9 99              CMP #153
001488r 1  B0 8A              BCS @next_row		; 	 covers negatives even..
00148Ar 1  85 25              STA ZP_PTR+3
00148Cr 1  CA                 DEX
00148Dr 1  F0 85              BEQ @next_row
00148Fr 1  88                 DEY
001490r 1  D0 B6              BNE @forward_row_loop
001492r 1                 @end:
001492r 1  60                rts
001493r 1               
001493r 1                 @next_quad:
001493r 1  E6 40          	  inc ZP_PTR+30
001495r 1  A6 32          	  LDX ZP_PTR+16 	;
001497r 1  8A             	  TXA
001498r 1  18             	  CLC
001499r 1  69 02          	  ADC #2
00149Br 1  85 32          	  STA ZP_PTR+16
00149Dr 1  7C rr rr       	  jmp (@t_quads,X) 	;
0014A0r 1                 	@t_quads:
0014A0r 1  rr rr          	  .addr @quad_1
0014A2r 1  rr rr          	  .addr @quad_2
0014A4r 1  rr rr          	  .addr @quad_3
0014A6r 1  rr rr          	  .addr @end
0014A8r 1                 @quad_1: 	;	need invert across row to make next bits . next row stays same
0014A8r 1  A6 33        	LDX ZP_PTR+17
0014AAr 1  18               CLC  ; clear before doing 16bit add!
0014ABr 1  BD rr rr         LDA ACROSS_ROW_X_L,X
0014AEr 1  85 26            STA ZP_PTR+4 	; 	ZP_PTR+4 = spriteX increment Low byte
0014B0r 1  85 2E            STA ZP_PTR+12
0014B2r 1  BD rr rr         LDA ACROSS_ROW_X_H,X
0014B5r 1  85 27            STA ZP_PTR+5 	;	ZP_PTR+4 = spriteX increment high byte
0014B7r 1  69 64            ADC #100
0014B9r 1  85 2F            STA ZP_PTR+13
0014BBr 1  18               CLC  ; clear before doing 16bit add!
0014BCr 1  BD rr rr         LDA ACROSS_ROW_Y_L,X
0014BFr 1  85 28            STA ZP_PTR+6 	; 	ZP_PTR+6 = spriteY increment low byte
0014C1r 1  85 30            STA ZP_PTR+14
0014C3r 1  BD rr rr         LDA ACROSS_ROW_Y_H,X
0014C6r 1  85 29            STA ZP_PTR+7 	; 	ZP_PTR+3 = spriteY increment
0014C8r 1  69 84            ADC #132
0014CAr 1  85 31            STA ZP_PTR+15
0014CCr 1  4C rr rr         jmp @quad_loop
0014CFr 1               @quad_2: ; invert next row - start 1 row up
0014CFr 1  A6 33        	LDX ZP_PTR+17
0014D1r 1               
0014D1r 1  18               CLC  ; clear before doing 16bit add!
0014D2r 1  BD rr rr         LDA NEXT_ROW_X_L,X
0014D5r 1  85 2A            STA ZP_PTR+8 	; 	ZP_PTR+4 = spriteX increment Low byte
0014D7r 1  85 2E            STA ZP_PTR+12
0014D9r 1  85 34            STA ZP_PTR+18
0014DBr 1  BD rr rr         LDA NEXT_ROW_X_H,X
0014DEr 1  85 2B            STA ZP_PTR+9 	;	ZP_PTR+4 = spriteX increment high byte
0014E0r 1  69 64            ADC #100
0014E2r 1  85 2F            STA ZP_PTR+13
0014E4r 1  85 35            STA ZP_PTR+19
0014E6r 1               
0014E6r 1  18               CLC  ; clear before doing 16bit add!
0014E7r 1  BD rr rr         LDA NEXT_ROW_Y_L,X
0014EAr 1  85 2C            STA ZP_PTR+10 	; 	ZP_PTR+6 = spriteY increment low byte
0014ECr 1  85 30            STA ZP_PTR+14
0014EEr 1  85 36            STA ZP_PTR+20
0014F0r 1  BD rr rr         LDA NEXT_ROW_Y_H,X
0014F3r 1  85 2D            STA ZP_PTR+11 	; 	ZP_PTR+3 = spriteY increment
0014F5r 1  69 84            ADC #132
0014F7r 1  85 31            STA ZP_PTR+15
0014F9r 1  85 37            STA ZP_PTR+21
0014FBr 1  4C rr rr         jmp @quad_loop
0014FEr 1               @quad_3: ; restore across row and increment ..
0014FEr 1  AE rr rr     	LDX camera_facing
001501r 1               
001501r 1  18               CLC  ; clear before doing 16bit add!
001502r 1  BD rr rr         LDA ACROSS_ROW_X_L,X
001505r 1  85 26            STA ZP_PTR+4 	; 	ZP_PTR+4 = spriteX increment Low byte
001507r 1  65 34            ADC ZP_PTR+18
001509r 1  85 2E            STA ZP_PTR+12
00150Br 1  BD rr rr         LDA ACROSS_ROW_X_H,X
00150Er 1  85 27            STA ZP_PTR+5 	;	ZP_PTR+4 = spriteX increment high byte
001510r 1  65 35            ADC ZP_PTR+19
001512r 1  85 2F            STA ZP_PTR+13
001514r 1               
001514r 1  18               CLC  ; clear before doing 16bit add!
001515r 1  BD rr rr         LDA ACROSS_ROW_Y_L,X
001518r 1  85 28            STA ZP_PTR+6 	; 	ZP_PTR+6 = spriteY increment low byte
00151Ar 1  65 36            ADC ZP_PTR+20
00151Cr 1  85 30            STA ZP_PTR+14
00151Er 1  BD rr rr         LDA ACROSS_ROW_Y_H,X
001521r 1  85 29            STA ZP_PTR+7 	; 	ZP_PTR+3 = spriteY increment
001523r 1  65 37            ADC ZP_PTR+21
001525r 1  85 31            STA ZP_PTR+15
001527r 1  4C rr rr         jmp @quad_loop
00152Ar 1               
00152Ar 1               draw_world:
00152Ar 1                 ; clear first entry for each line...
00152Ar 1  64 22          STZ ZP_PTR
00152Cr 1  A9 80          LDA #>SCREEN_buffer
00152Er 1  85 23          STA ZP_PTR+1
001530r 1  A2 1E          LDX #30
001532r 1  A9 00          LDA #0
001534r 1                 @loop:
001534r 1  A8               TAY
001535r 1  91 22            STA (ZP_PTR),y 	;	set first buffer entry for line mod 4 = 0
001537r 1  A0 40            LDY #64 		; 	move buffer pointer to next line
001539r 1  91 22            STA (ZP_PTR),y 	;	set first buffer entry for line mode 4 =1
00153Br 1  A0 80            LDY #128 		; 	move buffer pointer to next line
00153Dr 1  91 22            STA (ZP_PTR),y 	;	set first buffer entry for line mode 4 =2
00153Fr 1  A0 C0            LDY #192 		; 	move buffer pointer to next line
001541r 1  91 22            STA (ZP_PTR),y 	;	set first buffer entry for line mode 4 =3
001543r 1  E6 23            INC ZP_PTR+1 	;	next page plz
001545r 1  CA               DEX
001546r 1  D0 EC            BNE @loop
001548r 1                 ; fetch bearing data ..
001548r 1  AD rr rr       LDA camera_facing
00154Br 1  0A             ASL
00154Cr 1  AA             TAX
00154Dr 1  7C rr rr       jmp (@T_BEARINGS,X)
001550r 1               @T_BEARINGS:
001550r 1  rr rr        	.addr BEARING_ZERO
001552r 1  rr rr        	.addr BEARING_ONE
001554r 1  rr rr        	.addr BEARING_TWO
001556r 1               
001556r 1               BEARING_ZERO:
001556r 1  A9 70            LDA #112 ; starting at screen Y=112
001558r 1                 @E_loop:
001558r 1  85 24            STA ZP_PTR+2 ; stash the Y we're working at...
00155Ar 1  64 22              STZ ZP_PTR   ; zero this out to use pointer ..
00155Cr 1  4A                 LSR
00155Dr 1  66 22              ROR ZP_PTR ;
00155Fr 1  4A                 LSR
001560r 1  66 22              ROR ZP_PTR ; because is 64 avail for each
001562r 1  09 80              ORA #>SCREEN_buffer ; making pointer woot!
001564r 1  85 23              STA ZP_PTR+1 ; ZP_PTR points to the line..
001566r 1  A0 00              LDY #0 	;	set to first offset in that buffer.. we'll add other objects to the lines later so this will always be null object
001568r 1  A9 08              LDA #8 	;   start at X=0
00156Ar 1                   @E_loopE:
00156Ar 1  AA                   TAX
00156Br 1  A9 02                LDA #2 	;	water type
00156Dr 1  91 22                STA (ZP_PTR),y
00156Fr 1  C8                   iny
001570r 1  8A                   TXA ;	get X value
001571r 1  91 22                STA (ZP_PTR),y
001573r 1  C8                   iny
001574r 1  18                   CLC
001575r 1  69 10                adc #16
001577r 1  C9 88                CMP #136
001579r 1  90 EF                BCC @E_loopE 	;kk
00157Br 1  A9 00              LDA #0
00157Dr 1  91 22              STA (ZP_PTR),y ; stash zero value to end the thing
00157Fr 1  A5 24              LDA ZP_PTR+2
001581r 1  E9 0F              SBC #15 	;	borrow is set ...
001583r 1  B0 D3              BCS @E_loop ; still spots left on screen.. otay
001585r 1  4C rr rr         jmp update_screen
001588r 1               BEARING_ONE:
001588r 1               BEARING_TWO: ; 30 degrees ..
001588r 1  A9 74            LDA #116 ; starting at screen Y=112
00158Ar 1                 @E_loop:
00158Ar 1  85 24            STA ZP_PTR+2 ; stash the Y we're working at...
00158Cr 1  64 22              STZ ZP_PTR   ; zero this out to use pointer ..
00158Er 1  4A                 LSR
00158Fr 1  66 22              ROR ZP_PTR ;
001591r 1  4A                 LSR
001592r 1  66 22              ROR ZP_PTR ; because is 64 avail for each
001594r 1  09 80              ORA #>SCREEN_buffer ; making pointer woot!
001596r 1  85 23              STA ZP_PTR+1 ; ZP_PTR points to the line..
001598r 1  A0 00              LDY #0 	;	set to first offset in that buffer.. we'll add other objects to the lines later so this will always be null object
00159Ar 1  A9 0C              LDA #12 	;   start at X=0
00159Cr 1                   @E_loopE:
00159Cr 1  AA                   TAX
00159Dr 1  A9 02                LDA #2 	;	water type
00159Fr 1  91 22                STA (ZP_PTR),y
0015A1r 1  C8                   iny
0015A2r 1  8A                   TXA ;	get X value
0015A3r 1  91 22                STA (ZP_PTR),y
0015A5r 1  C8                   iny
0015A6r 1  18                   CLC
0015A7r 1  69 1C                adc #28
0015A9r 1  C9 88                CMP #136
0015ABr 1  90 EF                BCC @E_loopE 	;kk
0015ADr 1  A9 00              LDA #0
0015AFr 1  91 22              STA (ZP_PTR),y ; stash zero value to end the thing
0015B1r 1  A5 24              LDA ZP_PTR+2
0015B3r 1  E9 0D              SBC #13 	;	borrow is set ...
0015B5r 1  B0 D3              BCS @E_loop ; still spots left on screen.. otay
0015B7r 1  4C rr rr         jmp update_screen
0015BAr 1               
0015BAr 1  60             rts
0015BBr 1               
0015BBr 1               update_screen:
0015BBr 1  9C 20 9F       stz VERA_addr_low
0015BEr 1  A9 FC          lda #>VRAM_sprite_attributes
0015C0r 1  8D 21 9F       sta VERA_addr_high
0015C3r 1  A9 11          lda #$11
0015C5r 1  8D 22 9F       sta VERA_addr_bank
0015C8r 1  A9 77            LDA #119
0015CAr 1  85 24            STA ZP_PTR+2 ; stash line we at ..
0015CCr 1  64 22              STZ ZP_PTR
0015CEr 1  4A                 LSR
0015CFr 1  66 22              ROR ZP_PTR ;
0015D1r 1  4A                 LSR
0015D2r 1  66 22              ROR ZP_PTR ; because is 64 avail for each
0015D4r 1  09 80              ORA #>SCREEN_buffer ; making pointer woot!
0015D6r 1  85 23              STA ZP_PTR+1 ; ZP_PTR points to the line..
0015D8r 1                 @y_line_loop:
0015D8r 1  A0 00              LDY #0 ; set to check that first point ..
0015DAr 1  C6 24              dec ZP_PTR+2
0015DCr 1                   @do_check_line:
0015DCr 1  B1 22                LDA (ZP_PTR),Y ;	get type
0015DEr 1  C8                   INY
0015DFr 1  AA                   TAX
0015E0r 1  7C rr rr             JMP (@T_objtypes,X) ;
0015E3r 1                   @T_objtypes:
0015E3r 1  rr rr                .addr @end_line
0015E5r 1  rr rr                .addr @do_water
0015E7r 1                   @do_water:
0015E7r 1  9C 23 9F           stz VERA_data0 	; 	address 12:5
0015EAr 1  9C 23 9F           STZ VERA_data0 	; 	4bit color address 16:13
0015EDr 1  B1 22              LDA (ZP_PTR),Y  	;	get the X
0015EFr 1  C8                 iny
0015F0r 1  8D 23 9F           STA VERA_data0 	;	X
0015F3r 1  9C 23 9F           STZ VERA_data0 	;	 X
0015F6r 1  A5 24              LDA ZP_PTR+2
0015F8r 1  8D 23 9F           STA VERA_data0 	;	y
0015FBr 1  9C 23 9F           STZ VERA_data0 	; 	y
0015FEr 1  A9 0C              LDA #$0C
001600r 1  8D 23 9F           STA VERA_data0 	; 	3 z depth no flip
001603r 1  A9 D0              LDA #$D0 			; 	16x64 no palette offset
001605r 1  8D 23 9F           STA VERA_data0
001608r 1  80 D2              bra @do_check_line
00160Ar 1                   @end_line:
00160Ar 1  38                   SEC
00160Br 1  A5 22                LDA ZP_PTR
00160Dr 1  E9 40                SBC #64
00160Fr 1  85 22                STA ZP_PTR
001611r 1  A5 23                LDA ZP_PTR+1
001613r 1  E9 00                SBC #0
001615r 1  85 23                STA ZP_PTR+1
001617r 1  C9 80                CMP #>SCREEN_buffer
001619r 1  B0 BD                BCS @y_line_loop
00161Br 1  60           rts
00161Cr 1               
00161Cr 1               test_sprite_data:
00161Cr 1               ; first 16 sprites reserved ...
00161Cr 1               ;      0   1   2   3   4   5   6  7
00161Cr 1               ;     add,mod, XL, XH, YL, YH,msk,hwp
00161Cr 1  20 00 68 00  .byte  32,$00,104,  0,132,  0,$0C,$00  ;  cursor middle - 8x8  sprite 0
001620r 1  84 00 0C 00  
001624r 1  10 00 0C 00  .byte  16,$00, 12,  0,  0,  0,$0C,$30  ;  border top - 64x8    sprite 1
001628r 1  00 00 0C 30  
00162Cr 1  10 00 4C 00  .byte  16,$00, 76,  0,  0,  0,$0C,$30  ;  border top - 64x8    sprite 2
001630r 1  00 00 0C 30  
001634r 1  10 00 8C 00  .byte  16,$00,140,  0,  0,  0,$0C,$30  ;  border top - 64x8    sprite 3
001638r 1  00 00 0C 30  
00163Cr 1               
00163Cr 1  10 00 0C 00  .byte  16,$00, 12,  0,153,  0,$0F,$30  ;  border bottom - 64x8  sprite 4
001640r 1  99 00 0F 30  
001644r 1  10 00 4C 00  .byte  16,$00, 76,  0,153,  0,$0F,$30  ;  border bottom - 64x8  sprite 5
001648r 1  99 00 0F 30  
00164Cr 1  10 00 8C 00  .byte  16,$00,140,  0,153,  0,$0F,$30  ;  border bottom - 64x8  sprite 6
001650r 1  99 00 0F 30  
001654r 1               
001654r 1  10 00 00 00  .byte  16,$00,  0,  0, 16,  0,$0C,$C0  ;  border left    8x64   sprite 7
001658r 1  10 00 0C C0  
00165Cr 1  10 00 00 00  .byte  16,$00,  0,  0, 80,  0,$0C,$C0  ;  border left    8x64   sprite 8
001660r 1  50 00 0C C0  
001664r 1  10 00 D0 00  .byte  16,$00,208,  0, 16,  0,$0F,$C0  ;  border left    8x64   sprite 9
001668r 1  10 00 0F C0  
00166Cr 1  10 00 D0 00  .byte  16,$00,208,  0, 80,  0,$0F,$C0  ;  border left    8x64   sprite A
001670r 1  50 00 0F C0  
001674r 1  00 00 00 00  .res 8, 0  ; sprite B
001678r 1  00 00 00 00  
00167Cr 1  00 00 00 00  .res 8, 0  ; sprite C
001680r 1  00 00 00 00  
001684r 1  00 00 00 00  .res 8, 0  ; sprite D
001688r 1  00 00 00 00  
00168Cr 1  00 00 00 00  .res 8, 0  ; sprite E
001690r 1  00 00 00 00  
001694r 1  00 00 00 00  .res 8, 0  ; sprite F
001698r 1  00 00 00 00  
00169Cr 1  21 00 08 00  .byte  33,$00,  8,  0,  9,  0,$0C,$00  ; 0 test    sprite 10
0016A0r 1  09 00 0C 00  
0016A4r 1  22 00 10 00  .byte  34,$00, 16,  0,  9,  0,$0C,$00  ; 1 test    sprite 11
0016A8r 1  09 00 0C 00  
0016ACr 1  23 00 18 00  .byte  35,$00, 24,  0,  9,  0,$0C,$00  ; 2 test    sprite 12
0016B0r 1  09 00 0C 00  
0016B4r 1  24 00 20 00  .byte  36,$00, 32,  0,  9,  0,$0C,$00  ; 3 test    sprite 13
0016B8r 1  09 00 0C 00  
0016BCr 1  25 00 28 00  .byte  37,$00, 40,  0,  9,  0,$0C,$00  ; 4 test    sprite 14
0016C0r 1  09 00 0C 00  
0016C4r 1  26 00 30 00  .byte  38,$00, 48,  0,  9,  0,$0C,$00  ; 5 test    sprite 15
0016C8r 1  09 00 0C 00  
0016CCr 1  27 00 38 00  .byte  39,$00, 56,  0,  9,  0,$0C,$00  ; 6 test    sprite 16
0016D0r 1  09 00 0C 00  
0016D4r 1  28 00 40 00  .byte  40,$00, 64,  0,  9,  0,$0C,$00  ; 7 test    sprite 17
0016D8r 1  09 00 0C 00  
0016DCr 1  29 00 48 00  .byte  41,$00, 72,  0,  9,  0,$0C,$00  ; 8 test    sprite 18
0016E0r 1  09 00 0C 00  
0016E4r 1  2A 00 50 00  .byte  42,$00, 80,  0,  9,  0,$0C,$00  ; 9 test    sprite 19
0016E8r 1  09 00 0C 00  
0016ECr 1  2B 00 58 00  .byte  43,$00, 88,  0,  9,  0,$0C,$00  ; A test    sprite 1A
0016F0r 1  09 00 0C 00  
0016F4r 1  2C 00 60 00  .byte  44,$00, 96,  0,  9,  0,$0C,$00  ; B test    sprite 1B
0016F8r 1  09 00 0C 00  
0016FCr 1  2D 00 68 00  .byte  45,$00,104,  0,  9,  0,$0C,$00  ; C test    sprite 1C
001700r 1  09 00 0C 00  
001704r 1  2E 00 70 00  .byte  46,$00,112,  0,  9,  0,$0C,$00  ; D test    sprite 1D
001708r 1  09 00 0C 00  
00170Cr 1  2F 00 78 00  .byte  47,$00,120,  0,  9,  0,$0C,$00  ; E test    sprite 1E
001710r 1  09 00 0C 00  
001714r 1  30 00 80 00  .byte  48,$00,128,  0,  9,  0,$0C,$00  ; F test    sprite 1F
001718r 1  09 00 0C 00  
00171Cr 1               
00171Cr 1               test_optimal_pal_data:
00171Cr 1               ;      GB   R  $1:FA00-$1:FBFF   VERA Color Palette (256 x 2 bytes)
00171Cr 1  00 00        .byte $00,$00  ; 0 - black/transparent
00171Er 1  EC 0F        .byte $EC,$0F  ; 1 - cream
001720r 1  04 06        .byte $04,$06  ; 2 #660044
001722r 1  00 0C        .byte $00,$0C  ; 3  #cc0000
001724r 1  F0 0C        .byte $F0,$0C  ; 4#ccff00
001726r 1  C8 0F        .byte $c8,$0f  ; 5 #ffcc88
001728r 1  60 0C        .byte $60,$0c   ; 6  #cc6600
00172Ar 1  40 08        .byte $40,$08   ; 7 #884400
00172Cr 1  C0 0C        .byte $c0,$0c   ; 8 #cccc00
00172Er 1  6A 02        .byte $6a,$02   ; 9 #2266aa mid blue
001730r 1  C0 00        .byte $c0,$00   ; A #00cc00
001732r 1  AC 07        .byte $ac,$07   ; B #77aacc light blue
001734r 1  C0 00        .byte $c0,$00   ; C #0000c0 dark blue
001736r 1  0C 0C        .byte $0c,$0c   ; D #cc00cc
001738r 1  88 08        .byte $88,$08   ; E #888888
00173Ar 1  22 02        .byte $22,$02   ; F #222222
00173Cr 1               
00173Cr 1               test_vram_data:
00173Cr 1               test_cell_sprite: 	;	is 16x64x16 bit = 512 bytes   sprite addr = 0
00173Cr 1               ; 	   01   23   45   67   89   AB   CD   EF
00173Cr 1  CC C9 CC C9  .byte $CC, $C9, $CC, $C9, $CC, $C9, $CC, $C0    ;  0
001740r 1  CC C9 CC C0  
001744r 1  09 9B 99 9B  .byte $09, $9B, $99, $9B, $99, $9B, $99, $9C    ;  1
001748r 1  99 9B 99 9C  
00174Cr 1  CB BC BB BC  .byte $CB, $BC, $BB, $BC, $BB, $BC, $BB, $B0    ;  2
001750r 1  BB BC BB B0  
001754r 1  0C C9 CC C9  .byte $0C, $C9, $CC, $C9, $CC, $C9, $CC, $CC    ;  3
001758r 1  CC C9 CC CC  
00175Cr 1  C9 9B 99 9B  .byte $C9, $9B, $99, $9B, $99, $9B, $99, $90    ;  4
001760r 1  99 9B 99 90  
001764r 1  0B BC BB BC  .byte $0B, $BC, $BB, $BC, $BB, $BC, $BB, $BC    ;  5
001768r 1  BB BC BB BC  
00176Cr 1  CC C9 CC C9  .byte $CC, $C9, $CC, $C9, $CC, $C9, $CC, $C0    ;  6
001770r 1  CC C9 CC C0  
001774r 1  09 9B 99 9B  .byte $09, $9B, $99, $9B, $99, $9B, $99, $9C    ;  7
001778r 1  99 9B 99 9C  
00177Cr 1  CB BC BB BC  .byte $CB, $BC, $BB, $BC, $BB, $BC, $BB, $B0    ;  8 ; 45* is 9.5 ..
001780r 1  BB BC BB B0  
001784r 1  0C 09 0C 09  .byte $0C, $09, $0C, $09, $0C, $09, $0C, $0C    ;  9
001788r 1  0C 09 0C 0C  
00178Cr 1  09 90 09 90  .byte $09, $90, $09, $90, $09, $90, $09, $90   ;  10
001790r 1  09 90 09 90  
001794r 1  90 09 90 09  .byte $90, $09, $90, $09, $90, $09, $90, $09   ; 11
001798r 1  90 09 90 09  
00179Cr 1  00 00 00 00  .res 32, 0  ;  5 lines zeroed
0017A0r 1  00 00 00 00  
0017A4r 1  00 00 00 00  
0017BCr 1               
0017BCr 1               
0017BCr 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	16
0017C0r 1  EE EE EE EE  
0017C4r 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
0017C8r 1  EE 66 EE EE  
0017CCr 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
0017D0r 1  66 EE 66 EE  
0017D4r 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
0017D8r 1  EE EE EE 66  
0017DCr 1               
0017DCr 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	20
0017E0r 1  EE EE EE EE  
0017E4r 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
0017E8r 1  EE 66 EE EE  
0017ECr 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
0017F0r 1  66 EE 66 EE  
0017F4r 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
0017F8r 1  EE EE EE 66  
0017FCr 1               
0017FCr 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	24
001800r 1  EE EE EE EE  
001804r 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
001808r 1  EE 66 EE EE  
00180Cr 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
001810r 1  66 EE 66 EE  
001814r 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
001818r 1  EE EE EE 66  
00181Cr 1               
00181Cr 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	28
001820r 1  EE EE EE EE  
001824r 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
001828r 1  EE 66 EE EE  
00182Cr 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
001830r 1  66 EE 66 EE  
001834r 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
001838r 1  EE EE EE 66  
00183Cr 1               
00183Cr 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	32
001840r 1  EE EE EE EE  
001844r 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
001848r 1  EE 66 EE EE  
00184Cr 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
001850r 1  66 EE 66 EE  
001854r 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
001858r 1  EE EE EE 66  
00185Cr 1               
00185Cr 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	36
001860r 1  EE EE EE EE  
001864r 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
001868r 1  EE 66 EE EE  
00186Cr 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
001870r 1  66 EE 66 EE  
001874r 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
001878r 1  EE EE EE 66  
00187Cr 1               
00187Cr 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	40
001880r 1  EE EE EE EE  
001884r 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
001888r 1  EE 66 EE EE  
00188Cr 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
001890r 1  66 EE 66 EE  
001894r 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
001898r 1  EE EE EE 66  
00189Cr 1               
00189Cr 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	44
0018A0r 1  EE EE EE EE  
0018A4r 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
0018A8r 1  EE 66 EE EE  
0018ACr 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
0018B0r 1  66 EE 66 EE  
0018B4r 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
0018B8r 1  EE EE EE 66  
0018BCr 1               
0018BCr 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	48
0018C0r 1  EE EE EE EE  
0018C4r 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
0018C8r 1  EE 66 EE EE  
0018CCr 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
0018D0r 1  66 EE 66 EE  
0018D4r 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
0018D8r 1  EE EE EE 66  
0018DCr 1               
0018DCr 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	52
0018E0r 1  EE EE EE EE  
0018E4r 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
0018E8r 1  EE 66 EE EE  
0018ECr 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
0018F0r 1  66 EE 66 EE  
0018F4r 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
0018F8r 1  EE EE EE 66  
0018FCr 1               
0018FCr 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	56
001900r 1  EE EE EE EE  
001904r 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
001908r 1  EE 66 EE EE  
00190Cr 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
001910r 1  66 EE 66 EE  
001914r 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
001918r 1  EE EE EE 66  
00191Cr 1               
00191Cr 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	60
001920r 1  EE EE EE EE  
001924r 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
001928r 1  EE 66 EE EE  
00192Cr 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
001930r 1  66 EE 66 EE  
001934r 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63   512 bytes - next sprite addr = 16
001938r 1  EE EE EE 66  
00193Cr 1               
00193Cr 1               
00193Cr 1               test_border:
00193Cr 1  0B 0B 0B 0B  .repeat 64
001940r 1  B0 B0 B0 B0  
001944r 1  0B 0B 0B 0B  
001B3Cr 1                  .res 4, $0B
001B3Cr 1                  .res 4, $B0
001B3Cr 1               .endrepeat
001B3Cr 1               
001B3Cr 1               test_cross_hair_8x8:    ;  8x8x16 color = 32 bytes ; sprite 32
001B3Cr 1               ;     01   23   45   67
001B3Cr 1  11 00 00 11  .byte $11, $00, $00, $11
001B40r 1  10 00 00 01  .byte $10, $00, $00, $01
001B44r 1  00 00 00 00  .byte $00, $00, $00, $00
001B48r 1  00 01 10 00  .byte $00, $01, $10, $00
001B4Cr 1  00 01 10 00  .byte $00, $01, $10, $00
001B50r 1  00 00 00 00  .byte $00, $00, $00, $00
001B54r 1  10 00 00 01  .byte $10, $00, $00, $01
001B58r 1  11 00 00 11  .byte $11, $00, $00, $11
001B5Cr 1               
001B5Cr 1               HEX_DISPLAY_FONT:       ; 8x8x16 color = 32 bytes ... sprite addr 33+ ($0440)
001B5Cr 1               ;     01   23   45   67
001B5Cr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 0
001B60r 1  01 00 00 10  .byte $01, $00, $00, $10
001B64r 1  01 00 00 10  .byte $01, $00, $00, $10
001B68r 1  00 00 00 00  .byte $00, $00, $00, $00
001B6Cr 1  01 00 00 10  .byte $01, $00, $00, $10
001B70r 1  01 00 00 10  .byte $01, $00, $00, $10
001B74r 1  01 00 00 10  .byte $01, $00, $00, $10
001B78r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 0 /
001B7Cr 1               
001B7Cr 1  00 00 00 00  .byte $00, $00, $00, $00 ; 1
001B80r 1  00 00 00 10  .byte $00, $00, $00, $10
001B84r 1  00 00 00 10  .byte $00, $00, $00, $10
001B88r 1  00 00 00 00  .byte $00, $00, $00, $00
001B8Cr 1  00 00 00 10  .byte $00, $00, $00, $10
001B90r 1  00 00 00 10  .byte $00, $00, $00, $10
001B94r 1  00 00 00 10  .byte $00, $00, $00, $10
001B98r 1  00 00 00 00  .byte $00, $00, $00, $00
001B9Cr 1               
001B9Cr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 2
001BA0r 1  00 00 00 10  .byte $00, $00, $00, $10
001BA4r 1  00 00 00 10  .byte $00, $00, $00, $10
001BA8r 1  00 11 11 00  .byte $00, $11, $11, $00
001BACr 1  01 00 00 00  .byte $01, $00, $00, $00
001BB0r 1  01 00 00 00  .byte $01, $00, $00, $00
001BB4r 1  01 00 00 00  .byte $01, $00, $00, $00
001BB8r 1  00 11 11 00  .byte $00, $11, $11, $00
001BBCr 1               
001BBCr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 3
001BC0r 1  00 00 00 10  .byte $00, $00, $00, $10
001BC4r 1  00 00 00 10  .byte $00, $00, $00, $10
001BC8r 1  00 11 11 00  .byte $00, $11, $11, $00
001BCCr 1  00 00 00 10  .byte $00, $00, $00, $10
001BD0r 1  00 00 00 10  .byte $00, $00, $00, $10
001BD4r 1  00 00 00 10  .byte $00, $00, $00, $10
001BD8r 1  00 11 11 00  .byte $00, $11, $11, $00
001BDCr 1               
001BDCr 1  00 00 00 00  .byte $00, $00, $00, $00   ; 4
001BE0r 1  01 00 00 10  .byte $01, $00, $00, $10
001BE4r 1  01 00 00 10  .byte $01, $00, $00, $10
001BE8r 1  00 11 11 00  .byte $00, $11, $11, $00
001BECr 1  00 00 00 10  .byte $00, $00, $00, $10
001BF0r 1  00 00 00 10  .byte $00, $00, $00, $10
001BF4r 1  00 00 00 10  .byte $00, $00, $00, $10
001BF8r 1  00 00 00 00  .byte $00, $00, $00, $00
001BFCr 1               
001BFCr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 5
001C00r 1  01 00 00 00  .byte $01, $00, $00, $00
001C04r 1  01 00 00 00  .byte $01, $00, $00, $00
001C08r 1  00 11 11 00  .byte $00, $11, $11, $00
001C0Cr 1  00 00 00 10  .byte $00, $00, $00, $10
001C10r 1  00 00 00 10  .byte $00, $00, $00, $10
001C14r 1  00 00 00 10  .byte $00, $00, $00, $10
001C18r 1  00 11 11 00  .byte $00, $11, $11, $00
001C1Cr 1               
001C1Cr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 6
001C20r 1  01 00 00 00  .byte $01, $00, $00, $00
001C24r 1  01 00 00 00  .byte $01, $00, $00, $00
001C28r 1  00 11 11 00  .byte $00, $11, $11, $00
001C2Cr 1  01 00 00 10  .byte $01, $00, $00, $10
001C30r 1  01 00 00 10  .byte $01, $00, $00, $10
001C34r 1  01 00 00 10  .byte $01, $00, $00, $10
001C38r 1  00 11 11 00  .byte $00, $11, $11, $00
001C3Cr 1               
001C3Cr 1  00 01 01 00  .byte $00, $01, $01, $00 ; 7
001C40r 1  00 00 00 10  .byte $00, $00, $00, $10
001C44r 1  00 00 00 10  .byte $00, $00, $00, $10
001C48r 1  00 00 00 00  .byte $00, $00, $00, $00
001C4Cr 1  00 00 00 10  .byte $00, $00, $00, $10
001C50r 1  00 00 00 10  .byte $00, $00, $00, $10
001C54r 1  00 00 00 10  .byte $00, $00, $00, $10
001C58r 1  00 00 00 00  .byte $00, $00, $00, $00
001C5Cr 1               
001C5Cr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 8
001C60r 1  01 00 00 10  .byte $01, $00, $00, $10
001C64r 1  01 00 00 10  .byte $01, $00, $00, $10
001C68r 1  00 11 11 00  .byte $00, $11, $11, $00
001C6Cr 1  01 00 00 10  .byte $01, $00, $00, $10
001C70r 1  01 00 00 10  .byte $01, $00, $00, $10
001C74r 1  01 00 00 10  .byte $01, $00, $00, $10
001C78r 1  00 11 11 00  .byte $00, $11, $11, $00
001C7Cr 1               
001C7Cr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 9
001C80r 1  01 00 00 10  .byte $01, $00, $00, $10
001C84r 1  01 00 00 10  .byte $01, $00, $00, $10
001C88r 1  00 11 11 00  .byte $00, $11, $11, $00
001C8Cr 1  00 00 00 10  .byte $00, $00, $00, $10
001C90r 1  00 00 00 10  .byte $00, $00, $00, $10
001C94r 1  00 00 00 10  .byte $00, $00, $00, $10
001C98r 1  00 11 11 00  .byte $00, $11, $11, $00
001C9Cr 1               
001C9Cr 1  00 11 11 00  .byte $00, $11, $11, $00   ; A
001CA0r 1  01 00 00 10  .byte $01, $00, $00, $10
001CA4r 1  01 00 00 10  .byte $01, $00, $00, $10
001CA8r 1  00 11 11 00  .byte $00, $11, $11, $00
001CACr 1  01 00 00 10  .byte $01, $00, $00, $10
001CB0r 1  01 00 00 10  .byte $01, $00, $00, $10
001CB4r 1  01 00 00 10  .byte $01, $00, $00, $10
001CB8r 1  00 00 00 00  .byte $00, $00, $00, $00
001CBCr 1               
001CBCr 1               
001CBCr 1  00 00 00 00  .byte $00, $00, $00, $00   ; B
001CC0r 1  01 00 00 00  .byte $01, $00, $00, $00
001CC4r 1  01 00 00 00  .byte $01, $00, $00, $00
001CC8r 1  00 11 11 00  .byte $00, $11, $11, $00
001CCCr 1  01 00 00 10  .byte $01, $00, $00, $10
001CD0r 1  01 00 00 10  .byte $01, $00, $00, $10
001CD4r 1  01 00 00 10  .byte $01, $00, $00, $10
001CD8r 1  00 11 11 00  .byte $00, $11, $11, $00
001CDCr 1               
001CDCr 1  00 11 11 00  .byte $00, $11, $11, $00   ; C
001CE0r 1  01 00 00 00  .byte $01, $00, $00, $00
001CE4r 1  01 00 00 00  .byte $01, $00, $00, $00
001CE8r 1  00 00 00 00  .byte $00, $00, $00, $00
001CECr 1  01 00 00 00  .byte $01, $00, $00, $00
001CF0r 1  01 00 00 00  .byte $01, $00, $00, $00
001CF4r 1  01 00 00 00  .byte $01, $00, $00, $00
001CF8r 1  00 11 11 00  .byte $00, $11, $11, $00
001CFCr 1               
001CFCr 1  00 00 00 00  .byte $00, $00, $00, $00   ; D
001D00r 1  00 00 00 10  .byte $00, $00, $00, $10
001D04r 1  00 00 00 10  .byte $00, $00, $00, $10
001D08r 1  00 11 11 00  .byte $00, $11, $11, $00
001D0Cr 1  01 00 00 10  .byte $01, $00, $00, $10
001D10r 1  01 00 00 10  .byte $01, $00, $00, $10
001D14r 1  01 00 00 10  .byte $01, $00, $00, $10
001D18r 1  00 11 11 00  .byte $00, $11, $11, $00
001D1Cr 1               
001D1Cr 1  00 11 11 00  .byte $00, $11, $11, $00   ; E
001D20r 1  01 00 00 00  .byte $01, $00, $00, $00
001D24r 1  01 00 00 00  .byte $01, $00, $00, $00
001D28r 1  00 11 11 00  .byte $00, $11, $11, $00
001D2Cr 1  01 00 00 00  .byte $01, $00, $00, $00
001D30r 1  01 00 00 00  .byte $01, $00, $00, $00
001D34r 1  01 00 00 00  .byte $01, $00, $00, $00
001D38r 1  00 11 11 00  .byte $00, $11, $11, $00
001D3Cr 1               
001D3Cr 1  00 11 11 00  .byte $00, $11, $11, $00   ; F
001D40r 1  01 00 00 00  .byte $01, $00, $00, $00
001D44r 1  01 00 00 00  .byte $01, $00, $00, $00
001D48r 1  00 11 11 00  .byte $00, $11, $11, $00
001D4Cr 1  01 00 00 00  .byte $01, $00, $00, $00
001D50r 1  01 00 00 00  .byte $01, $00, $00, $00
001D54r 1  01 00 00 00  .byte $01, $00, $00, $00
001D58r 1  00 00 00 00  .byte $00, $00, $00, $00
001D5Br 1               
