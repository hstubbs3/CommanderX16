ca65 V2.19 - Git 8e6c0c1
Main file   : hex.s
Current file: hex.s

000000r 1               ; 	080D
000000r 1  4C rr rr     jmp start ; 	3 bytes
000003r 1               ;	0810 	- 240 bytes available for stuff that doesn't need alignment
000003r 1  DE AD BE EF  .repeat 28
000007r 1  DE AD BE EF  
00000Br 1  DE AD BE EF  
000073r 1               	.byte $DE,$AD,$BE,$EF
000073r 1               .endrepeat
000073r 1               SCRATCH128:
000073r 1  DE AD BE EF  .repeat 32
000077r 1  DE AD BE EF  
00007Br 1  DE AD BE EF  
0000F3r 1               	.byte $DE,$AD,$BE,$EF
0000F3r 1               .endrepeat
0000F3r 1               
0000F3r 1               ACROSS_ROW_X_L: ; 0900  16 wide , 45* tilt ... this is added to go up row, sub for down row
0000F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0000F3r 1  00 FE FB F4  .byte
0000F7r 1  EC E1 D3 C3  
0000FBr 1  B1 9C 85 6B  
0001F3r 1               
0001F3r 1               ACROSS_ROW_X_H: ; 0A00
0001F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0001F3r 1  10 0F 0F 0F  .byte $10, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $E, $E, $E, $E, $E, $E, $D, $D, $D, $D, $D, $C, $C, $C, $C, $B, $B, $B, $B, $A, $A, $A, $9, $9, $9, $8, $8, $8, $7, $7, $7, $6, $6, $6, $5, $5, $5, $4, $4, $3, $3, $3, $2, $2, $1, $1, $1, $0, $0, $0, $FF, $FF, $FE, $FE, $FE, $FD, $FD, $FC, $FC, $FC, $FB, $FB, $FA, $FA, $FA, $F9, $F9, $F9, $F8, $F8, $F8, $F7, $F7, $F7, $F6, $F6, $F6, $F5, $F5, $F5, $F4, $F4, $F4, $F4, $F3, $F3, $F3, $F3, $F2, $F2, $F2, $F2, $F2, $F1, $F1, $F1, $F1, $F1, $F1, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F1, $F1, $F1, $F1, $F1, $F1, $F2, $F2, $F2, $F2, $F2, $F3, $F3, $F3, $F3, $F4, $F4, $F4, $F4, $F5, $F5, $F5, $F6, $F6, $F6, $F7, $F7, $F7, $F8, $F8, $F8, $F9, $F9, $F9, $FA, $FA, $FA, $FB, $FB, $FC, $FC, $FC, $FD, $FD, $FE, $FE, $FE, $FF, $FF, $00, $0, $0, $1, $1, $1, $2, $2, $3, $3, $3, $4, $4, $5, $5, $5, $6, $6, $6, $7, $7, $7, $8, $8, $8, $9, $9, $9, $A, $A, $A, $B, $B, $B, $B, $C, $C, $C, $C, $D, $D, $D, $D, $D, $E, $E, $E, $E, $E, $E, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F
0001F7r 1  0F 0F 0F 0F  
0001FBr 1  0F 0F 0F 0F  
0002F3r 1               
0002F3r 1               ACROSS_ROW_Y_L: ; 0B00
0002F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0002F3r 1  00 B8 71 2A  .byte $0,$B8,$71,$2A,$E4,$9D,$57,$10,$CA,$85,$40,$FB,$B7,$73,$30,$ED,$AB,$6A,$29,$E9,$AA,$6C,$2E,$F2,$B6,$7C,$42,$A,$D2,$9C,$66,$32,$0,$CE,$9D,$6E,$41,$14,$E9,$C0,$97,$71,$4B,$27,$5,$E4,$C5,$A8,$8C,$71,$58,$41,$2C,$18,$6,$F6,$E7,$DA,$CF,$C5,$BD,$B7,$B3,$B0,$AF,$B0,$B3,$B7,$BD,$C5,$CF,$DA,$E7,$F6,$6,$18,$2C,$41,$58,$71,$8C,$A8,$C5,$E4,$5,$27,$4B,$71,$97,$C0,$E9,$14,$41,$6E,$9D,$CE,$0,$32,$66,$9C,$D2,$A,$42,$7C,$B6,$F2,$2E,$6C,$AA,$E9,$29,$6A,$AB,$ED,$30,$73,$B7,$FB,$40,$85,$CA,$10,$57,$9D,$E4,$2A,$71,$B8,$0,$47,$8E,$D5,$1B,$62,$A8,$EF,$35,$7A,$BF,$4,$48,$8C,$CF,$12,$54,$95,$D6,$16,$55,$93,$D1,$D,$49,$83,$BD,$F5,$2D,$63,$99,$CD,$0,$31,$62,$91,$BE,$EB,$16,$3F,$68,$8E,$B4,$D8,$FA,$1B,$3A,$57,$73,$8E,$A7,$BE,$D3,$E7,$F9,$9,$18,$25,$30,$3A,$42,$48,$4C,$4F,$50,$4F,$4C,$48,$42,$3A,$30,$25,$18,$9,$F9,$E7,$D3,$BE,$A7,$8E,$73,$57,$3A,$1B,$FA,$D8,$B4,$8E,$68,$3F,$16,$EB,$BE,$91,$62,$31,$0,$CD,$99,$63,$2D,$F5,$BD,$83,$49,$D,$D1,$93,$55,$16,$D6,$95,$54,$12,$CF,$8C,$48,$4,$BF,$7A,$35,$EF,$A8,$62,$1B,$D5,$8E,$47
0002F7r 1  E4 9D 57 10  
0002FBr 1  CA 85 40 FB  
0003F3r 1               
0003F3r 1               ACROSS_ROW_Y_H: ; 0C00
0003F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0003F3r 1  00 FF FF FF  .byte $0,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F9,$F8,$F8,$F8,$F8,$F8,$F7,$F7,$F7,$F7,$F7,$F6,$F6,$F6,$F6,$F6,$F6,$F6,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F6,$F6,$F6,$F6,$F6,$F6,$F6,$F7,$F7,$F7,$F7,$F7,$F8,$F8,$F8,$F8,$F8,$F9,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$00,$0,$0,$0,$1,$1,$1,$1,$2,$2,$2,$3,$3,$3,$3,$4,$4,$4,$4,$5,$5,$5,$5,$6,$6,$6,$6,$6,$7,$7,$7,$7,$8,$8,$8,$8,$8,$8,$9,$9,$9,$9,$9,$9,$9,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$9,$9,$9,$9,$9,$9,$9,$8,$8,$8,$8,$8,$8,$7,$7,$7,$7,$6,$6,$6,$6,$6,$5,$5,$5,$5,$4,$4,$4,$4,$3,$3,$3,$3,$2,$2,$2,$1,$1,$1,$1,$0,$0,$0
0003F7r 1  FE FE FE FE  
0003FBr 1  FD FD FD FC  
0004F3r 1               
0004F3r 1               NEXT_ROW_X_L: ; 0D00 next row LEFT/up when added
0004F3r 1  00 A9 54 00  .byte
0004F7r 1  AE 5D 0D BF  
0004FBr 1  73 28 DF 98  
0005F3r 1               
0005F3r 1               NEXT_ROW_X_H: ; 0E00
0005F3r 1  F8 F7 F7 F7  .byte
0005F7r 1  F6 F6 F6 F5  
0005FBr 1  F5 F5 F4 F4  
0006F3r 1               
0006F3r 1               NEXT_ROW_Y_L: ; 0F00
0006F3r 1  33 58 7D A5  .byte $33,$58,$7D,$A5,$CD,$F7,$23,$50,$7E,$AD,$DE,$10,$44,$78,$AE,$E4,$1C,$55,$8F,$CA,$6,$43,$81,$BF,$FE,$3F,$7F,$C1,$3,$46,$8A,$CD,$12,$57,$9C,$E2,$28,$6E,$B4,$FB,$42,$89,$D0,$17,$5E,$A5,$EC,$33,$7A,$C0,$6,$4C,$91,$D6,$1B,$5F,$A2,$E6,$28,$6A,$AB,$EB,$2B,$6A,$A8,$E5,$21,$5C,$97,$D0,$8,$3F,$75,$AA,$DE,$10,$41,$71,$A0,$CD,$F9,$24,$4D,$75,$9B,$C0,$E3,$5,$25,$44,$61,$7C,$96,$AE,$C5,$DA,$ED,$FF,$F,$1D,$29,$34,$3D,$44,$4A,$4D,$4F,$50,$4E,$4B,$46,$3F,$37,$2D,$21,$13,$4,$F3,$E0,$CC,$B6,$9E,$85,$6A,$4E,$30,$10,$EF,$CC,$A7,$82,$5A,$32,$8,$DC,$AF,$81,$52,$21,$EF,$BB,$87,$51,$1B,$E3,$AA,$70,$35,$F9,$BC,$7E,$40,$1,$C0,$80,$3E,$FC,$B9,$75,$32,$ED,$A8,$63,$1D,$D7,$91,$4B,$4,$BD,$76,$2F,$E8,$A1,$5A,$13,$CC,$85,$3F,$F9,$B3,$6E,$29,$E4,$A0,$5D,$19,$D7,$95,$54,$14,$D4,$95,$57,$1A,$DE,$A3,$68,$2F,$F7,$C0,$8A,$55,$21,$EF,$BE,$8E,$5F,$32,$6,$DB,$B2,$8A,$64,$3F,$1C,$FA,$DA,$BB,$9E,$83,$69,$51,$3A,$25,$12,$0,$F0,$E2,$D6,$CB,$C2,$BB,$B5,$B2,$B0,$AF,$B1,$B4,$B9,$C0,$C8,$D2,$DE,$EC,$FB,$C,$1F,$33,$49,$61,$7A,$95,$B1,$CF,$EF,$10
0006F7r 1  CD F7 23 50  
0006FBr 1  7E AD DE 10  
0007F3r 1               
0007F3r 1               NEXT_ROW_Y_H: ; 1000
0007F3r 1  F6 F6 F6 F6  .byte $F6,$F6,$F6,$F6,$F6,$F6,$F7,$F7,$F7,$F7,$F7,$F8,$F8,$F8,$F8,$F8,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$0,$0,$0,$0,$1,$1,$1,$2,$2,$2,$2,$3,$3,$3,$3,$4,$4,$4,$4,$5,$5,$5,$5,$6,$6,$6,$6,$7,$7,$7,$7,$7,$8,$8,$8,$8,$8,$8,$9,$9,$9,$9,$9,$9,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$9,$9,$9,$9,$9,$9,$9,$8,$8,$8,$8,$8,$7,$7,$7,$7,$7,$6,$6,$6,$6,$5,$5,$5,$5,$5,$4,$4,$4,$3,$3,$3,$3,$2,$2,$2,$2,$1,$1,$1,$1,$0,$0,$0,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F8,$F8,$F8,$F8,$F8,$F7,$F7,$F7,$F7,$F7,$F7,$F6,$F6,$F6,$F6,$F6,$F6,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F6
0007F7r 1  F6 F6 F7 F7  
0007FBr 1  F7 F7 F7 F8  
0008F3r 1               
0008F3r 1               TUB_WORLD: ; 32*64 = 2K ... is 1100 to 1900-1
0008F3r 1               .include "tub_world_hieghts_01.inc"
0008F3r 2               ; 0 to 128 will be water level. >128 = distance along row to water (neg) , 128 = no water this row.
0008F3r 2               ; rows are stored within 64 byte rows
0008F3r 2               ; 	  0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63
0008F3r 2  FF FF FF FF  .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 30
0008F7r 2  FF FF FF FF  
0008FBr 2  FF FF FF FF  
000933r 2  FF FF FF FF  .byte   $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF ; 29
000937r 2  FF FF FF FF  
00093Br 2  FF FF FF FF  
000973r 2  FF FF FF FF  .byte     $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF ; 28
000977r 2  FF FF FF FF  
00097Br 2  FF FF FF FF  
0009B3r 2  FF FF FF FF  .byte       $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF ; 27
0009B7r 2  FF FF FF FF  
0009BBr 2  FF FF FF FF  
0009F3r 2  FF FF FF FF  .byte         $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF ; 26
0009F7r 2  FF FF FF FF  
0009FBr 2  FF FF FF FF  
000A33r 2  FF FF FF FF  .byte           $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 25
000A37r 2  FF FF FF FF  
000A3Br 2  FF FF FF FF  
000A73r 2  FF FF FF FF  .byte             $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 24
000A77r 2  FF FF FF FF  
000A7Br 2  FF FF FF FF  
000AB3r 2  FF FF FF FF  .byte               $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 23
000AB7r 2  FF FF FF FF  
000ABBr 2  FF FF FF 80  
000AF3r 2  FF FF FF FF  .byte                 $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 22
000AF7r 2  FF FF FF FF  
000AFBr 2  FF FF 80 00  
000B33r 2  FF FF FF FF  .byte                   $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF; 21
000B37r 2  FF FF FF FF  
000B3Br 2  FF 80 00 00  
000B73r 2  FF FF FF FF  .byte                     $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF ; 20
000B77r 2  FF FF FF FF  
000B7Br 2  FF 80 00 00  
000BB3r 2  FF FF FF FF  .byte                       $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF ; 19
000BB7r 2  FF FF FF FF  
000BBBr 2  80 00 00 00  
000BF3r 2  FF FF FF FF  .byte                         $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 18
000BF7r 2  FF FF FF FF  
000BFBr 2  80 00 00 00  
000C33r 2  FF FF FF FF  .byte                           $FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 17
000C37r 2  FF FF FF 80  
000C3Br 2  00 00 00 00  
000C73r 2  FF FF FF FF  .byte                             $FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 16
000C77r 2  FF FF FF 80  
000C7Br 2  00 00 00 00  
000CB3r 2  FF FF FF FF  .byte                               $FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 15
000CB7r 2  FF FF 80 00  
000CBBr 2  00 00 00 00  
000CF3r 2  FF FF FF FF  .byte                                 $FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF ; 14
000CF7r 2  FF FF 80 00  
000CFBr 2  00 00 00 00  
000D33r 2  FF FF FF FF  .byte                                   $FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 13
000D37r 2  FF 80 00 00  
000D3Br 2  00 00 00 00  
000D73r 2  FF FF FF FF  .byte                                     $FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 12
000D77r 2  FF 80 00 00  
000D7Br 2  00 00 00 00  
000DB3r 2  FF FF FF FF  .byte                                       $FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 11
000DB7r 2  80 00 00 00  
000DBBr 2  00 00 00 00  
000DF3r 2  FF FF FF FF  .byte                                         $FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 10
000DF7r 2  80 00 00 00  
000DFBr 2  00 00 00 00  
000E33r 2  FF FF FF 80  .byte                                           $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 9
000E37r 2  00 00 00 00  
000E3Br 2  00 00 00 00  
000E73r 2  FF FF FF 80  .byte                                             $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 8
000E77r 2  00 00 00 00  
000E7Br 2  00 00 00 00  
000EB3r 2  FF FF FF 80  .byte                                               $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 7
000EB7r 2  00 00 00 00  
000EBBr 2  00 00 00 00  
000EF3r 2  FF FF FF 80  .byte                                                 $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 6
000EF7r 2  00 00 00 00  
000EFBr 2  00 00 00 00  
000F33r 2  FF FF FF 80  .byte                                                   $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 5
000F37r 2  00 00 00 00  
000F3Br 2  00 00 00 00  
000F73r 2  FF FF FF 80  .byte                                                     $FF,$FF,$FF,$80,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 4
000F77r 2  00 01 02 02  
000F7Br 2  01 01 00 01  
000FB3r 2  FF FF FF 80  .byte                                                       $FF,$FF,$FF,$80,$80,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 3
000FB7r 2  80 00 01 02  
000FBBr 2  02 01 01 00  
000FF3r 2  FF FF FF FF  .byte                                                         $FF,$FF,$FF,$FF,$80,$80,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 2
000FF7r 2  80 80 00 01  
000FFBr 2  02 02 01 01  
001033r 2  FF FF FF FF  .byte                                                           $FF,$FF,$FF,$FF,$FF,$80,$80,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 01
001037r 2  FF 80 80 00  
00103Br 2  01 02 02 01  
001073r 2  FF FF FF FF  .byte                                                             $FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 00 tub wall north
001077r 2  FF FF 80 80  
00107Br 2  80 80 80 80  
0010B3r 2  FF FF FF FF  .res 64,$FF
0010B7r 2  FF FF FF FF  
0010BBr 2  FF FF FF FF  
0010F3r 2               
0010F3r 2               
0010F3r 2               
0010F3r 1               
0010F3r 1               ; 1900
0010F3r 1               
0010F3r 1               OBJECT_LIST_Z_START_POINTERS: ; 1900
0010F3r 1  00 00 00 00  .res 256,0
0010F7r 1  00 00 00 00  
0010FBr 1  00 00 00 00  
0011F3r 1               OBJECT_LIST_BYTE0_ADDRLOW: ; 1A00 addr low
0011F3r 1  00 00 00 00  .res 256,0
0011F7r 1  00 00 00 00  
0011FBr 1  00 00 00 00  
0012F3r 1               OBJECT_LIST_BYTE1_MODE: ; 1B00 mode/addr bank
0012F3r 1  00 00 00 00  .res 256,0
0012F7r 1  00 00 00 00  
0012FBr 1  00 00 00 00  
0013F3r 1               OBJECT_LIST_BYTE2_X: ; 1C00 X position onscreen ( assumed positive for now)
0013F3r 1  00 00 00 00  .res 256,0
0013F7r 1  00 00 00 00  
0013FBr 1  00 00 00 00  
0014F3r 1               OBJECT_LIST_BYTE3_Y: ; 1D00 y position onscreen
0014F3r 1  00 00 00 00  .res 256,0
0014F7r 1  00 00 00 00  
0014FBr 1  00 00 00 00  
0015F3r 1               OBJECT_LIST_BYTE4_ZFLIPS: ; 1E00 collision / z / flips
0015F3r 1  00 00 00 00  .res 256,0
0015F7r 1  00 00 00 00  
0015FBr 1  00 00 00 00  
0016F3r 1               OBJECT_LIST_BYTE5_SIZE: ; 1F00 size / pal offset
0016F3r 1  00 00 00 00  .res 256,0
0016F7r 1  00 00 00 00  
0016FBr 1  00 00 00 00  
0017F3r 1               OBJECT_LIST_BYTE6_NEXT: ; 2000 NEXT
0017F3r 1  00 00 00 00  .res 256,0
0017F7r 1  00 00 00 00  
0017FBr 1  00 00 00 00  
0018F3r 1               
0018F3r 1               
0018F3r 1               
0018F3r 1               WORLD_TO_CELL_XH: ; 2100
0018F3r 1  00 00 01 02  .byte 0,0,1,2,3,4,5,6,6,7,8,9,10,11,12,12,13,14,15,16,17,18,19,19,20,21,22,23,24,25,25,26,27,28,29,30,31,32,32,33,34,35,36,37,38,38,39,40,41,42,43,44,45,45,46,47,48,49,50,51,51,52,53,54,55,56,57,58,58,59,60,61,62,63,64,64,65,66,67,68,69,70,71,71,72,73,74,75,76,77,77,78,79,80,81,82,83,84,84,85,86,87,88,89,90,90,91,92,93,94,95,96,96,97,98,99,100,101,102,103,103,104,105,106,107,108,109,109,110,111,112,113,114,115,116,116,117,118,119,120,121,122,122,123,124,125,126,127,128,129,129,130,131,132,133,134,135,135,136,137,138,139,140,141,142,142,143,144,145,146,147,148,148,149,150,151,152,153,154,155,155,156,157,158,159,160,161,161,162,163,164,165,166,167,168,168,169,170,171,172,173,174,174,175,176,177,178,179,180,180,181,182,183,184,185,186,187,187,188,189,190,191,192,193,193,194,195,196,197,198,199,200,200,201,202,203,204,205,206,206,207,208,209,210,211,212,213,213,214,215,216,217,218,219,219,220
0018F7r 1  03 04 05 06  
0018FBr 1  06 07 08 09  
0019F3r 1               ;.byte 0,0,1,2,3,4,5,6,6,7,8,9,10,11,12,12,13,14,15,16,17,18,19,19,20,21,22,23,24,25,25,26,27,28,29,30,31,32,32,33,34,35,36,37,38,38,39,40,41,42,43,44,45,45,46,47,48,49,50,51,51,52,53,54,55,56,57,58,58,59,60,61,62,63,64,64,65,66,67,68,69,70,71,71,72,73,74,75,76,77,77,78,79,80,81,82,83,84,84,85,86,87,88,89,90,90,91,92,93,94,95,96,96,97,98,99,100,101,102,103,103,104,105,106,107,108,109,109
0019F3r 1               ;.res 128,128
0019F3r 1               WORLD_TO_CELL_XL:
0019F3r 1  00 DD BB 99  .byte 0,221,187,153,118,84,50,15,237,203,169,134,100,66,31,253,219,184,150,116,82,47,13,235,200,166,132,97,63,29,251,216,182,148,113,79,45,10,232,198,164,129,95,61,26,248,214,180,145,111,77,42,8,230,195,161,127,93,58,24,246,211,177,143,108,74,40,6,227,193,159,124,90,56,21,243,209,175,140,106,72,37,3,225,191,156,122,88,53,19,241,206,172,138,104,69,35,1,222,188,154,119,85,51,17,238,204,170,135,101,67,32,254,220,186,151,117,83,48,14,236,202,167,133,99,64,30,252,217,183,149,115,80,46,12,233,199,165,130,96,62,28,249,215,181,146,112,78,43,9,231,197,162,128,94,59,25,247,212,178,144,110,75,41,7,228,194,160,126,91,57,23,244,210,176,141,107,73,39,4,226,192,157,123,89,54,20,242,208,173,139,105,70,36,2,223,189,155,121,86,52,18,239,205,171,137,102,68,34,255,221,187,152,118,84,50,15,237,203,168,134,100,65,31,253,219,184,150,116,81,47,13,234,200,166,132,97,63,29,250,216,182,148,113,79,45,10,232,198,163,129,95,61,26,248,214
0019F7r 1  76 54 32 0F  
0019FBr 1  ED CB A9 86  
001AF3r 1               ;.byte 0,221,187,153,118,84,50,15,237,203,169,134,100,66,31,253,219,184,150,116,82,47,13,235,200,166,132,97,63,29,251,216,182,148,113,79,45,10,232,198,164,129,95,61,26,248,214,180,145,111,77,42,8,230,195,161,127,93,58,24,246,211,177,143,108,74,40,6,227,193,159,124,90,56,21,243,209,175,140,106,72,37,3,225,191,156,122,88,53,19,241,206,172,138,104,69,35,1,222,188,154,119,85,51,17,238,204,170,135,101,67,32,254,220,186,151,117,83,48,14,236,202,167,133,99,64,30,252
001AF3r 1               ;.res 128,0
001AF3r 1               CELL_TO_WORLD_XH: ; 2200
001AF3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,8,9,10,11,12,13,15,16,17,18,19,20,21,23,24,25,26,27,28,30,31,32,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,50,51,53,54,55,56,57,58,60,61,62,63,64,65,66,68,69,70,71,72,73,75,76,77,78,79,80,81,83,84,85,86,87,88,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,112,113,114,115,116,117,118,120,121,122,123,124,125,127,128,129,130,131,132,133,135,136,137,138,139,140,142,143,144,145,146
001AF7r 1  04 05 06 08  
001AFBr 1  09 0A 0B 0C  
001B73r 1               CELL_TO_WORLD_XL: ; 2280
001B73r 1  00 27 4F 76  .byte 0,39,79,118,158,198,237,21,60,100,140,179,219,2,42,82,121,161,200,240,24,63,103,142,182,222,5,45,84,124,164,203,243,26,66,106,145,185,224,8,48,87,127,166,206,246,29,69,108,148,188,227,11,50,90,130,169,209,248,32,72,111,151,191,230,14,53,93,133,172,212,251,35,75,114,154,193,233,17,56,96,135,175,215,254,38,77,117,157,196,236,19,59,99,138,178,217,1,41,80,120,159,199,239,22,62,101,141,181,220,4,43,83,123,162,202,241,25,65,104,144,184,223,7,46,86,126,165
001B77r 1  9E C6 ED 15  
001B7Br 1  3C 64 8C B3  
001BF3r 1               
001BF3r 1               CELL_LOW_TO_WORLD_XH: ; 2300
001BF3r 1  00 00 00 00  .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
001BF7r 1  00 00 00 00  
001BFBr 1  00 00 00 00  
001CF3r 1               CELL_LOW_TO_WORLD_XL: ; 2400
001CF3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,8,9,10,11,12,13,15,16,17,18,19,20,21,23,24,25,26,27,28,30,31,32,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,50,51,53,54,55,56,57,58,60,61,62,63,64,65,66,68,69,70,71,72,73,75,76,77,78,79,80,81,83,84,85,86,87,88,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,112,113,114,115,116,117,118,120,121,122,123,124,125,127,128,129,130,131,132,133,135,136,137,138,139,140,142,143,144,145,146,147,148,150,151,152,153,154,155,157,158,159,160,161,162,163,165,166,167,168,169,170,172,173,174,175,176,177,178,180,181,182,183,184,185,187,188,189,190,191,192,193,195,196,197,198,199,200,202,203,204,205,206,207,209,210,211,212,213,214,215,217,218,219,220,221,222,224,225,226,227,228,229,230,232,233,234,235,236,237,239,240,241,242,243,244,245,247,248,249,250,251,252,254,255,0,1,2,3,4,6,7,8,9,10,11,13,14,15,16,17,18,19,21,22,23,24,25,26,28,29,30,31,32,33,34,36,37,38
001CF7r 1  04 05 06 08  
001CFBr 1  09 0A 0B 0C  
001DF3r 1               
001DF3r 1               SPRITE_NUM_HIGH_NIBBLE: ; 2900
001DF3r 1  00 00 00 00  .res 16, 0
001DF7r 1  00 00 00 00  
001DFBr 1  00 00 00 00  
001E03r 1  01 01 01 01  .res 16, 1
001E07r 1  01 01 01 01  
001E0Br 1  01 01 01 01  
001E13r 1  02 02 02 02  .res 16, 2
001E17r 1  02 02 02 02  
001E1Br 1  02 02 02 02  
001E23r 1  03 03 03 03  .res 16, 3
001E27r 1  03 03 03 03  
001E2Br 1  03 03 03 03  
001E33r 1  04 04 04 04  .res 16, 4
001E37r 1  04 04 04 04  
001E3Br 1  04 04 04 04  
001E43r 1  05 05 05 05  .res 16, 5
001E47r 1  05 05 05 05  
001E4Br 1  05 05 05 05  
001E53r 1  06 06 06 06  .res 16, 6
001E57r 1  06 06 06 06  
001E5Br 1  06 06 06 06  
001E63r 1  07 07 07 07  .res 16, 7
001E67r 1  07 07 07 07  
001E6Br 1  07 07 07 07  
001E73r 1  08 08 08 08  .res 16, 8
001E77r 1  08 08 08 08  
001E7Br 1  08 08 08 08  
001E83r 1  09 09 09 09  .res 16, 9
001E87r 1  09 09 09 09  
001E8Br 1  09 09 09 09  
001E93r 1  0A 0A 0A 0A  .res 16, 10
001E97r 1  0A 0A 0A 0A  
001E9Br 1  0A 0A 0A 0A  
001EA3r 1  0B 0B 0B 0B  .res 16, 11
001EA7r 1  0B 0B 0B 0B  
001EABr 1  0B 0B 0B 0B  
001EB3r 1  0C 0C 0C 0C  .res 16, 12
001EB7r 1  0C 0C 0C 0C  
001EBBr 1  0C 0C 0C 0C  
001EC3r 1  0D 0D 0D 0D  .res 16, 13
001EC7r 1  0D 0D 0D 0D  
001ECBr 1  0D 0D 0D 0D  
001ED3r 1  0E 0E 0E 0E  .res 16, 14
001ED7r 1  0E 0E 0E 0E  
001EDBr 1  0E 0E 0E 0E  
001EE3r 1  0F 0F 0F 0F  .res 16, 15
001EE7r 1  0F 0F 0F 0F  
001EEBr 1  0F 0F 0F 0F  
001EF3r 1               
001EF3r 1               SPRITE_NUM_LOW_NIBBLE: ; 2A00
001EF3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001EF7r 1  04 05 06 07  
001EFBr 1  08 09 0A 0B  
001F03r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F07r 1  04 05 06 07  
001F0Br 1  08 09 0A 0B  
001F13r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F17r 1  04 05 06 07  
001F1Br 1  08 09 0A 0B  
001F23r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F27r 1  04 05 06 07  
001F2Br 1  08 09 0A 0B  
001F33r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F37r 1  04 05 06 07  
001F3Br 1  08 09 0A 0B  
001F43r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F47r 1  04 05 06 07  
001F4Br 1  08 09 0A 0B  
001F53r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F57r 1  04 05 06 07  
001F5Br 1  08 09 0A 0B  
001F63r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F67r 1  04 05 06 07  
001F6Br 1  08 09 0A 0B  
001F73r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F77r 1  04 05 06 07  
001F7Br 1  08 09 0A 0B  
001F83r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F87r 1  04 05 06 07  
001F8Br 1  08 09 0A 0B  
001F93r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F97r 1  04 05 06 07  
001F9Br 1  08 09 0A 0B  
001FA3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001FA7r 1  04 05 06 07  
001FABr 1  08 09 0A 0B  
001FB3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001FB7r 1  04 05 06 07  
001FBBr 1  08 09 0A 0B  
001FC3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001FC7r 1  04 05 06 07  
001FCBr 1  08 09 0A 0B  
001FD3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001FD7r 1  04 05 06 07  
001FDBr 1  08 09 0A 0B  
001FE3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001FE7r 1  04 05 06 07  
001FEBr 1  08 09 0A 0B  
001FF3r 1               
001FF3r 1               LOW_NIBBLE_TO_HEX: ;
001FF3r 1  30 31 32 33  .repeat 16
001FF7r 1  34 35 36 37  
001FFBr 1  38 39 01 02  
0020F3r 1               ;      0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
0020F3r 1               .byte  48, 49, 50, 51, 52, 53, 54, 55, 56, 57,  1,  2,  3,  4,  5,  6
0020F3r 1               .endrepeat
0020F3r 1               
0020F3r 1               HIGH_NIBBLE_TO_HEX: ;
0020F3r 1  30 30 30 30  .res 16,48
0020F7r 1  30 30 30 30  
0020FBr 1  30 30 30 30  
002103r 1  31 31 31 31  .res 16,49
002107r 1  31 31 31 31  
00210Br 1  31 31 31 31  
002113r 1  32 32 32 32  .res 16,50
002117r 1  32 32 32 32  
00211Br 1  32 32 32 32  
002123r 1  33 33 33 33  .res 16,51
002127r 1  33 33 33 33  
00212Br 1  33 33 33 33  
002133r 1  34 34 34 34  .res 16,52
002137r 1  34 34 34 34  
00213Br 1  34 34 34 34  
002143r 1  35 35 35 35  .res 16,53
002147r 1  35 35 35 35  
00214Br 1  35 35 35 35  
002153r 1  36 36 36 36  .res 16,54
002157r 1  36 36 36 36  
00215Br 1  36 36 36 36  
002163r 1  37 37 37 37  .res 16,55
002167r 1  37 37 37 37  
00216Br 1  37 37 37 37  
002173r 1  38 38 38 38  .res 16,56
002177r 1  38 38 38 38  
00217Br 1  38 38 38 38  
002183r 1  39 39 39 39  .res 16,57
002187r 1  39 39 39 39  
00218Br 1  39 39 39 39  
002193r 1  01 01 01 01  .res 16,1
002197r 1  01 01 01 01  
00219Br 1  01 01 01 01  
0021A3r 1  02 02 02 02  .res 16,2
0021A7r 1  02 02 02 02  
0021ABr 1  02 02 02 02  
0021B3r 1  03 03 03 03  .res 16,3
0021B7r 1  03 03 03 03  
0021BBr 1  03 03 03 03  
0021C3r 1  04 04 04 04  .res 16,4
0021C7r 1  04 04 04 04  
0021CBr 1  04 04 04 04  
0021D3r 1  05 05 05 05  .res 16,5
0021D7r 1  05 05 05 05  
0021DBr 1  05 05 05 05  
0021E3r 1  06 06 06 06  .res 16,6
0021E7r 1  06 06 06 06  
0021EBr 1  06 06 06 06  
0021F3r 1               
0021F3r 1               SCREEN_Y_TO_Z: ; 2B00 this is shifted to be within range so that 192 =0 and -16 is 255
0021F3r 1  EB EA E8 E7  .byte 235,234,232,231,230,229,227,226,225,224,223,221,220,219,218,216,215,214,213,211,210,209,208,207,205,204,203,202,200,199,198,197,195,194,193,192,191,189,188,187,186,184,183,182,181,179,178,177,176,175,173,172,171,170,168,167,166,165,163,162,161,160,159,157,156,155,154,152,151,150,149,147,146,145,144,143,141,140,139,138,136,135,134,133,131,130,129,128,127,125,124,123,122,120,119,118,117,115,114,113,112,111,109,108,107,106,104,103,102,101,99,98,97,96,95,93,92,91,90,88,87,86,85,83,82,81,80,79,77,76,75,74,72,71,70,69,67,66,65,64,63,61,60,59,58,56,55,54,53,51,50,49,48,47,45,44,43,42,40,39,38,37,35,34,33,32,31,29,28,27,26,24,23,22,21,19,18,17,16,15,13,12,11,10,8,7,6,5,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,253,252,251,250,248,247,246,245,243,242,241,240,239,237,236
0021F7r 1  E6 E5 E3 E2  
0021FBr 1  E1 E0 DF DD  
0022F3r 1               ;.byte 255,253,252,250,249,247,246,244,243,241,240,238,237,235,234,232,231,229,228,227,225,224,222,221,219,218,216,215,213,212,210,209,207,206,204,203,202,200,199,197,196,194,193,191,190,188,187,185,184,182,181,179,178,177,175,174,172,171,169,168,166,165,163,162,160,159,157,156,154,153,152,150,149,147,146,144,143,141,140,138,137,135,134,132,131,129,128,127,125,124,122,121,119,118,116,115,113,112,110,109,107,106,104,103,101,100,99,97,96,94,93,91,90,88,87,85,84,82,81,79,78,76,75,74,72,71,69,68,66,65,63,62,60,59,57,56,54,53,51,50,49,47,46,44,43,41,40,38,37,35,34,32,31,29,28,26,25,24,22,21,19,18,16,15,13,12,10,9,7,6,4,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255
0022F3r 1               ;.byte 255,253,251,250,248,247,245,243,242,240,239,237,235,234,232,231,229,227,226,224,223,221,220,218,216,215,213,212,210,208,207,205,204,202,200,199,197,196,194,192,191,189,188,186,185,183,181,180,178,177,175,173,172,170,169,167,165,164,162,161,159,158,156,154,153,151,150,148,146,145,143,142,140,138,137,135,134,132,130,129,127,126,124,123,121,119,118,116,115,113,111,110,108,107,105,103,102,100,99,97,95,94,92,91,89,88,86,84,83,81,80,78,76,75,73,72,70,68,67,65,64,62,61,59,57,56,54,53,51,49,48,46,45,43,41,40,38,37,35,33,32,30,29,27,26,24,22,21,19,18,16,14,13,11,10,8,6,5,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0022F3r 1               
0022F3r 1               CONVERT_HEIGHTS_PIXELS: ; 2C00
0022F3r 1               ;.res 256,0
0022F3r 1               ;.byte 0,0,1,1,2,3,3,4,4,5,6,6,7,7,8,9,9,10,11,11,12,12,13,14,14,15,15,16,17,17,18,18,19,20,20,21,22,22,23,23,24,25,25,26,26,27,28,28,29,30,30,31,31,32,33,33,34,34,35,36,36,37,37,38,39,39,40,41,41,42,42,43,44,44,45,45,46,47,47,48,48,49,50,50,51,52,52,53,53,54,55,55,56,56,57,58,58,59,60,60,61,61,62,63,63,64,64,65,66,66,67,67,68,69,69,70,71,71,72,72,73,74,74,75,75,76,77,77,78,78,79,80,80,81,82,82,83,83,84,85,85,86,86,87,88,88,89,90,90,91,91,92,93,93,94,94,95,96,96,97,97,98,99,99,100,101,101,102,102,103,104,104,105,105,106,107,107,108,109,109,110,110,111,112,112,113,113,114,115,115,116,116,117,118,118,119,120,120,121,121,122,123,123,124,124,125,126,126,127,127,128,129,129,130,131,131,132,132,133,134,134,135,135,136,137,137,138,139,139,140,140,141,142,142,143,143,144,145,145,146,146,147,148,148,149,150,150,151,151,152,153,153,154,154,155,156
0022F3r 1  00 00 01 01  .byte 0,0,1,1,2,3,3,4,4,5,6,6,7,7,8,9,9,10,11,11,12,12,13,14,14,15,15,16,17,17,18,18,19,20,20,21,22,22,23,23,24,25,25,26,26,27,28,28,29,30,30,31,31,32,33,33,34,34,35,36,36,37,37,38,39,39,40,41,41,42,42,43,44,44,45,45,46,47,47,48,48,49,50,50,51,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52;,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52
0022F7r 1  02 03 03 04  
0022FBr 1  04 05 06 06  
002373r 1  00 00 00 00  .res 128,0
002377r 1  00 00 00 00  
00237Br 1  00 00 00 00  
0023F3r 1               CONVERT_HEIGHTS_PIXELS_L:
0023F3r 1               ;.res 256,0
0023F3r 1  00 9C 39 D6  .byte 0,156,57,214,115,15,172,73,230,130,31,188,89,245,146,47,204,105,5,162,63,220,120,21,178,79,235,136,37,194,95,251,152,53,210,110,11,168,69,225,126,27,184,84,241,142,43,200,100,1,158,59,215,116,17,174,74,231,132,33,190,90,247,148,49,205,106,7,164,64,221,122,23,180,80,237,138,39,195,96,253,154,54,211,112,0,169,70,227,128,29,185,86,243,144,44,201,102,3,159,60,217,118,19,175,76,233,134,34,191,92,249,149,50,207,108,9,165,66,223,124,24,181,82,239,139,40,197,98,254,155,56,213,114,14,171,72,229,129,30,187,88,244,145,46,203,104,4,161,62,219,119,20,177,78,234,135,36,193,94,250,151,52,209,109,10,167,68,224,125,26,183,83,240,141,42,199,99,0,157,58,214,115,16,173,73,230,131,32,189,89,246,147,48,204,105,6,163,63,220,121,22,179,79,236,137,38,194,95,252,153,53,210,111,12,168,69,226,127,28,184,85,242,143,43,200,101,2,158,59,216,117,18,174,75,232,133,33,190,91,248,148,49,206,107,7,164,65,222,123,23,180,81,238,138,39
0023F7r 1  73 0F AC 49  
0023FBr 1  E6 82 1F BC  
0024F3r 1               
0024F3r 1               SUBCELL_X_COS_L:
0024F3r 1  00 FF FF FF  .byte $0,$FF,$FF,$FF,$FE,$FE,$FD,$FC,$FB,$F9,$F8,$F6,$F4,$F3,$F1,$EE,$EC,$EA,$E7,$E4,$E1,$DE,$DB,$D8,$D4,$D1,$CD,$C9,$C5,$C1,$BD,$B9,$B5,$B0,$AB,$A7,$A2,$9D,$98,$93,$8E,$88,$83,$7E,$78,$73,$6D,$67,$61,$5C,$56,$50,$4A,$44,$3E,$38,$31,$2B,$25,$1F,$19,$12,$C,$6,$0,$F9,$F3,$ED,$E6,$E0,$DA,$D4,$CE,$C7,$C1,$BB,$B5,$AF,$A9,$A3,$9E,$98,$92,$8C,$87,$81,$7C,$77,$71,$6C,$67,$62,$5D,$58,$54,$4F,$4A,$46,$42,$3E,$3A,$36,$32,$2E,$2B,$27,$24,$21,$1E,$1B,$18,$15,$13,$11,$E,$C,$B,$9,$7,$6,$4,$3,$2,$1,$1,$0,$0,$0,$0,$0,$0,$0,$1,$1,$2,$3,$4,$6,$7,$9,$B,$C,$E,$11,$13,$15,$18,$1B,$1E,$21,$24,$27,$2B,$2E,$32,$36,$3A,$3E,$42,$46,$4A,$4F,$54,$58,$5D,$62,$67,$6C,$71,$77,$7C,$81,$87,$8C,$92,$98,$9E,$A3,$A9,$AF,$B5,$BB,$C1,$C7,$CE,$D4,$DA,$E0,$E6,$ED,$F3,$F9,$0,$6,$C,$12,$19,$1F,$25,$2B,$31,$38,$3E,$44,$4A,$50,$56,$5C,$61,$67,$6D,$73,$78,$7E,$83,$88,$8E,$93,$98,$9D,$A2,$A7,$AB,$B0,$B5,$B9,$BD,$C1,$C5,$C9,$CD,$D1,$D4,$D8,$DB,$DE,$E1,$E4,$E7,$EA,$EC,$EE,$F1,$F3,$F4,$F6,$F8,$F9,$FB,$FC,$FD,$FE,$FE,$FF,$FF,$FF
0024F7r 1  FE FE FD FC  
0024FBr 1  FB F9 F8 F6  
0025F3r 1               SUBCELL_X_COS_H:
0025F3r 1  01 00 00 00  .byte
0025F7r 1  00 00 00 00  
0025FBr 1  00 00 00 00  
0026F3r 1               SUBCELL_X_SIN_H:
0026F3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
0026F7r 1  00 00 00 00  
0026FBr 1  00 00 00 00  
0027F3r 1               SUBCELL_X_SIN_L:
0027F3r 1  00 05 0A 10  .byte $0,$5,$A,$10,$15,$1B,$20,$25,$2B,$30,$35,$3B,$40,$45,$4A,$4F,$54,$59,$5E,$63,$68,$6D,$71,$76,$7B,$7F,$84,$88,$8C,$90,$94,$98,$9C,$A0,$A4,$A7,$AB,$AE,$B2,$B5,$B8,$BB,$BE,$C0,$C3,$C6,$C8,$CA,$CC,$CE,$D0,$D2,$D4,$D5,$D7,$D8,$D9,$DA,$DB,$DC,$DC,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DC,$DC,$DB,$DA,$D9,$D8,$D7,$D5,$D4,$D2,$D0,$CE,$CC,$CA,$C8,$C6,$C3,$C0,$BE,$BB,$B8,$B5,$B2,$AE,$AB,$A7,$A4,$A0,$9C,$98,$94,$90,$8C,$88,$84,$7F,$7B,$76,$71,$6D,$68,$63,$5E,$59,$54,$4F,$4A,$45,$40,$3B,$35,$30,$2B,$25,$20,$1B,$15,$10,$A,$5,$0,$FA,$F5,$EF,$EA,$E4,$DF,$DA,$D4,$CF,$CA,$C4,$BF,$BA,$B5,$B0,$AB,$A6,$A1,$9C,$97,$92,$8E,$89,$84,$80,$7B,$77,$73,$6F,$6B,$67,$63,$5F,$5B,$58,$54,$51,$4D,$4A,$47,$44,$41,$3F,$3C,$39,$37,$35,$33,$31,$2F,$2D,$2B,$2A,$28,$27,$26,$25,$24,$23,$23,$22,$22,$22,$22,$22,$22,$22,$23,$23,$24,$25,$26,$27,$28,$2A,$2B,$2D,$2F,$31,$33,$35,$37,$39,$3C,$3F,$41,$44,$47,$4A,$4D,$51,$54,$58,$5B,$5F,$63,$67,$6B,$6F,$73,$77,$7B,$80,$84,$89,$8E,$92,$97,$9C,$A1,$A6,$AB,$B0,$B5,$BA,$BF,$C4,$CA,$CF,$D4,$DA,$DF,$E4,$EA,$EF,$F5,$FA
0027F7r 1  15 1B 20 25  
0027FBr 1  2B 30 35 3B  
0028F3r 1               SUBCELL_Y_COS_H:
0028F3r 1  00 00 00 00  .byte
0028F7r 1  00 00 00 00  
0028FBr 1  00 00 00 00  
0029F3r 1               SUBCELL_Y_COS_L:
0029F3r 1  9C 9C 9C 9C  .byte $9C,$9C,$9C,$9C,$9C,$9B,$9B,$9A,$99,$98,$98,$97,$96,$94,$93,$92,$90,$8F,$8D,$8C,$8A,$88,$86,$84,$82,$80,$7D,$7B,$79,$76,$74,$71,$6E,$6C,$69,$66,$63,$60,$5D,$5A,$57,$53,$50,$4D,$49,$46,$43,$3F,$3B,$38,$34,$31,$2D,$29,$26,$22,$1E,$1A,$17,$13,$F,$B,$7,$3,$0,$FC,$F8,$F4,$F0,$EC,$E8,$E5,$E1,$DD,$D9,$D6,$D2,$CE,$CB,$C7,$C4,$C0,$BC,$B9,$B6,$B2,$AF,$AC,$A8,$A5,$A2,$9F,$9C,$99,$96,$93,$91,$8E,$8B,$89,$86,$84,$82,$7F,$7D,$7B,$79,$77,$75,$73,$72,$70,$6F,$6D,$6C,$6B,$69,$68,$67,$67,$66,$65,$64,$64,$63,$63,$63,$63,$63,$63,$63,$63,$63,$64,$64,$65,$66,$67,$67,$68,$69,$6B,$6C,$6D,$6F,$70,$72,$73,$75,$77,$79,$7B,$7D,$7F,$82,$84,$86,$89,$8B,$8E,$91,$93,$96,$99,$9C,$9F,$A2,$A5,$A8,$AC,$AF,$B2,$B6,$B9,$BC,$C0,$C4,$C7,$CB,$CE,$D2,$D6,$D9,$DD,$E1,$E5,$E8,$EC,$F0,$F4,$F8,$FC,$0,$3,$7,$B,$F,$13,$17,$1A,$1E,$22,$26,$29,$2D,$31,$34,$38,$3B,$3F,$43,$46,$49,$4D,$50,$53,$57,$5A,$5D,$60,$63,$66,$69,$6C,$6E,$71,$74,$76,$79,$7B,$7D,$80,$82,$84,$86,$88,$8A,$8C,$8D,$8F,$90,$92,$93,$94,$96,$97,$98,$98,$99,$9A,$9B,$9B,$9C,$9C,$9C,$9C
0029F7r 1  9C 9B 9B 9A  
0029FBr 1  99 98 98 97  
002AF3r 1               SUBCELL_Y_SIN_H:
002AF3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
002AF7r 1  00 00 00 00  
002AFBr 1  00 00 00 00  
002BF3r 1               SUBCELL_Y_SIN_L:
002BF3r 1  00 04 08 0D  .byte $0,$4,$8,$D,$11,$16,$1A,$1E,$23,$27,$2B,$30,$34,$38,$3C,$41,$45,$49,$4D,$51,$55,$59,$5D,$60,$64,$68,$6B,$6F,$72,$76,$79,$7C,$7F,$83,$86,$89,$8B,$8E,$91,$93,$96,$98,$9B,$9D,$9F,$A1,$A3,$A5,$A7,$A8,$AA,$AB,$AD,$AE,$AF,$B0,$B1,$B2,$B3,$B3,$B4,$B4,$B4,$B4,$B5,$B4,$B4,$B4,$B4,$B3,$B3,$B2,$B1,$B0,$AF,$AE,$AD,$AB,$AA,$A8,$A7,$A5,$A3,$A1,$9F,$9D,$9B,$98,$96,$93,$91,$8E,$8B,$89,$86,$83,$80,$7C,$79,$76,$72,$6F,$6B,$68,$64,$60,$5D,$59,$55,$51,$4D,$49,$45,$41,$3C,$38,$34,$30,$2B,$27,$23,$1E,$1A,$16,$11,$D,$8,$4,$0,$FB,$F7,$F2,$EE,$E9,$E5,$E1,$DC,$D8,$D4,$CF,$CB,$C7,$C3,$BE,$BA,$B6,$B2,$AE,$AA,$A6,$A2,$9F,$9B,$97,$94,$90,$8D,$89,$86,$83,$80,$7C,$79,$76,$74,$71,$6E,$6C,$69,$67,$64,$62,$60,$5E,$5C,$5A,$58,$57,$55,$54,$52,$51,$50,$4F,$4E,$4D,$4C,$4C,$4B,$4B,$4B,$4B,$4A,$4B,$4B,$4B,$4B,$4C,$4C,$4D,$4E,$4F,$50,$51,$52,$54,$55,$57,$58,$5A,$5C,$5E,$60,$62,$64,$67,$69,$6C,$6E,$71,$74,$76,$79,$7C,$80,$83,$86,$89,$8D,$90,$94,$97,$9B,$9F,$A2,$A6,$AA,$AE,$B2,$B6,$BA,$BE,$C3,$C7,$CB,$CF,$D4,$D8,$DC,$E1,$E5,$E9,$EE,$F2,$F7,$FB
002BF7r 1  11 16 1A 1E  
002BFBr 1  23 27 2B 30  
002CF3r 1               
002CF3r 1               MOVE_Y_H:
002CF3r 1  00 00 00 00  .byte
002CF7r 1  00 00 00 00  
002CFBr 1  00 00 00 00  
002DF3r 1               MOVE_Y_L:
002DF3r 1  08 07 07 07  .byte $8,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$6,$6,$6,$6,$6,$6,$6,$6,$6,$5,$5,$5,$5,$5,$5,$5,$4,$4,$4,$4,$4,$4,$3,$3,$3,$3,$3,$3,$2,$2,$2,$2,$2,$1,$1,$1,$1,$1,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF,$FF,$0,$0,$0,$0,$0,$0,$1,$1,$1,$1,$1,$2,$2,$2,$2,$2,$3,$3,$3,$3,$3,$3,$4,$4,$4,$4,$4,$4,$5,$5,$5,$5,$5,$5,$5,$6,$6,$6,$6,$6,$6,$6,$6,$6,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7
002DF7r 1  07 07 07 07  
002DFBr 1  07 07 07 07  
002EF3r 1               MOVE_X_H:
002EF3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
002EF7r 1  00 00 00 00  
002EFBr 1  00 00 00 00  
002FF3r 1               MOVE_X_L:
002FF3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$1,$1,$1,$1,$1,$1,$2,$2,$2,$2,$2,$2,$2,$3,$3,$3,$3,$3,$3,$3,$4,$4,$4,$4,$4,$4,$4,$5,$5,$5,$5,$5,$5,$5,$5,$5,$5,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$5,$5,$5,$5,$5,$5,$5,$5,$5,$5,$4,$4,$4,$4,$4,$4,$4,$3,$3,$3,$3,$3,$3,$3,$2,$2,$2,$2,$2,$2,$2,$1,$1,$1,$1,$1,$1,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FB,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF,$FF
002FF7r 1  00 00 01 01  
002FFBr 1  01 01 01 01  
0030F3r 1               
0030F3r 1               
0030F3r 1               WORLD_SPRITE_CENTER_XH: ; 128 bytes
0030F3r 1  64 64 64 64  .byte
0030F7r 1  64 64 64 64  
0030FBr 1  64 64 64 64  
003173r 1               WORLD_SPRITE_CENTER_XL: ; 128 bytes
003173r 1  00 0D 1B 29  .byte $0,$D,$1B,$29,$36,$43,$51,$5E,$6B,$78,$85,$92,$9F,$AB,$B8,$C4,$D1,$DD,$E9,$F6,$2,$E,$A,$FE,$F2,$E5,$D9,$CD,$C0,$B4,$A7,$9A,$8E,$81,$74,$67,$5A,$4C,$3F,$32,$24,$16,$9,$4,$12,$20,$2D,$3B,$48,$55,$62,$6F,$7C,$89,$96,$A3,$B0,$BC,$C9,$D5,$E1,$EE,$FA,$6,$12,$13,$FA,$EE,$E1,$D5,$C9,$BC,$B0,$A3,$96,$89,$7C,$6F,$62,$55,$48,$3B,$2D,$20,$12,$4,$9,$16,$24,$32,$3F,$4C,$5A,$67,$74,$81,$8E,$9A,$A7,$B4,$C0,$CD,$D9,$E5,$F2,$FE,$A,$E,$2,$F6,$E9,$DD,$D1,$C4,$B8,$AB,$9F,$92,$85,$78,$6B,$5E,$51,$43,$36,$29,$1B,$D
003177r 1  36 43 51 5E  
00317Br 1  6B 78 85 92  
0031F3r 1               WORLD_SPRITE_CENTER_YH: ; 128 bytes
0031F3r 1  4C 4C 4C 4C  .byte $4C,$4C,$4C,$4C,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4C,$4C,$4C,$4C,$4C,$4C,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4C,$4C,$4C,$4C,$4C,$4C,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4C,$4C,$4C
0031F7r 1  4B 4B 4B 4B  
0031FBr 1  4B 4B 4B 4B  
003273r 1               WORLD_SPRITE_CENTER_YL: ; 128 bytes
003273r 1  19 11 08 00  .byte $19,$11,$8,$0,$F7,$EE,$E6,$DD,$D4,$CB,$C2,$B9,$B0,$A7,$9D,$94,$8B,$81,$78,$6E,$64,$5B,$5E,$68,$71,$7B,$84,$8E,$97,$A0,$AA,$B3,$BC,$C5,$CE,$D7,$E0,$E8,$F1,$FA,$3,$B,$14,$17,$E,$5,$FD,$F4,$EB,$E3,$DA,$D1,$C8,$BF,$B6,$AD,$A3,$9A,$91,$87,$7E,$74,$6B,$61,$57,$57,$6B,$74,$7E,$87,$91,$9A,$A3,$AD,$B6,$BF,$C8,$D1,$DA,$E3,$EB,$F4,$FD,$5,$E,$17,$14,$B,$3,$FA,$F1,$E8,$E0,$D7,$CE,$C5,$BC,$B3,$AA,$A0,$97,$8E,$84,$7B,$71,$68,$5E,$5B,$64,$6E,$78,$81,$8B,$94,$9D,$A7,$B0,$B9,$C2,$CB,$D4,$DD,$E6,$EE,$F7,$0,$8,$11
003277r 1  F7 EE E6 DD  
00327Br 1  D4 CB C2 B9  
0032F3r 1               
0032F3r 1               WORLD_SPRITE_NUM_lookies: ; 128 bytes
0032F3r 1               ;      0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
0032F3r 1  00 00 00 00  .byte   0,  0,  0,  0, 32, 32, 32, 32, 32, 32, 64, 64, 64, 64, 64, 64
0032F7r 1  20 20 20 20  
0032FBr 1  20 20 40 40  
003303r 1  40 40 60 60  .byte  64, 64, 96, 96,160,160,160, 96, 96, 96, 64, 64, 64, 64, 64, 64
003307r 1  A0 A0 A0 60  
00330Br 1  60 60 40 40  
003313r 1  40 40 20 20  .byte  64, 64, 32, 32, 32, 32, 32, 32,  0,  0,  0,  0,  0,  0, 32, 32
003317r 1  20 20 20 20  
00331Br 1  00 00 00 00  
003323r 1  20 20 20 20  .byte  32, 32, 32, 32, 32, 64, 64, 64, 64, 64, 64, 64, 96, 96, 96,160
003327r 1  20 40 40 40  
00332Br 1  40 40 40 40  
003333r 1  A0 A0 60 60  .byte 160,160, 96, 96, 96, 64, 64, 64, 64, 64, 64, 64, 32, 32, 32, 32
003337r 1  60 40 40 40  
00333Br 1  40 40 40 40  
003343r 1  20 20 20 00  .byte  32, 32, 32,  0,  0,  0,  0,  0,  0, 32, 32, 32, 32, 32, 32, 64
003347r 1  00 00 00 00  
00334Br 1  00 20 20 20  
003353r 1  40 40 40 40  .byte  64, 64, 64, 64, 64, 64, 64, 96, 96, 96,160,160,160, 96, 96, 64
003357r 1  40 40 40 60  
00335Br 1  60 60 A0 A0  
003363r 1  40 40 40 40  .byte  64, 64, 64, 64, 64, 64, 64, 32, 32, 32, 32, 32, 32,  0,  0,  0
003367r 1  40 40 40 20  
00336Br 1  20 20 20 20  
003373r 1               WORLD_WALL_SPRITE_NUM_lookies:
003373r 1  80 80 80 80  .byte 128,128,128,128,128,128,128,128,128,128,192,192,192,192,192,192
003377r 1  80 80 80 80  
00337Br 1  80 80 C0 C0  
003383r 1  C0 C0 C0 C0  .byte 192,192,192,192,224,224,224,192,192,192,192,192,192,192,192,192
003387r 1  E0 E0 E0 C0  
00338Br 1  C0 C0 C0 C0  
003393r 1  C0 C0 80 80  .byte 192,192,128,128,128,128,128,128,128,128,128,128,128,128,128,128
003397r 1  80 80 80 80  
00339Br 1  80 80 80 80  
0033A3r 1  80 80 80 80  .byte 128,128,128,128,128,192,192,192,192,192,192,192,192,192,192,224
0033A7r 1  80 C0 C0 C0  
0033ABr 1  C0 C0 C0 C0  
0033B3r 1  E0 E0 C0 C0  .byte 224,224,192,192,192,192,192,192,192,192,192,192,128,128,128,128
0033B7r 1  C0 C0 C0 C0  
0033BBr 1  C0 C0 C0 C0  
0033C3r 1  80 80 80 80  .byte 128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,192
0033C7r 1  80 80 80 80  
0033CBr 1  80 80 80 80  
0033D3r 1  C0 C0 C0 C0  .byte 192,192,192,192,192,192,192,192,192,192,224,224,224,192,192,192
0033D7r 1  C0 C0 C0 C0  
0033DBr 1  C0 C0 E0 E0  
0033E3r 1  C0 C0 C0 C0  .byte 192,192,192,192,192,192,192,128,128,128,128,128,128,128,128,128
0033E7r 1  C0 C0 C0 80  
0033EBr 1  80 80 80 80  
0033F3r 1               
0033F3r 1               SPRITE_ADDRESS_LOW_HIGH:
0033F3r 1  00 00 00 00  .byte 0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31
0033F7r 1  00 00 00 00  
0033FBr 1  01 01 01 01  
0034F3r 1               
0034F3r 1               SPRITE_ADDRESS_LOW_LOW:
0034F3r 1  00 20 40 60  .byte 0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224,0,32,64,96,128,160,192,224
0034F7r 1  80 A0 C0 E0  
0034FBr 1  00 20 40 60  
0035F3r 1               
0035F3r 1               NIBBLE_SWAPPER:
0035F3r 1               ;      0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
0035F3r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
0035F7r 1  40 50 60 70  
0035FBr 1  80 90 A0 B0  
003603r 1  01 11 21 31  .byte $01,$11,$21,$31,$41,$51,$61,$71,$81,$91,$A1,$B1,$C1,$D1,$E1,$F1
003607r 1  41 51 61 71  
00360Br 1  81 91 A1 B1  
003613r 1  02 12 22 32  .byte $02,$12,$22,$32,$42,$52,$62,$72,$82,$92,$A2,$B2,$C2,$D2,$E2,$F2
003617r 1  42 52 62 72  
00361Br 1  82 92 A2 B2  
003623r 1  03 13 23 33  .byte $03,$13,$23,$33,$43,$53,$63,$73,$83,$93,$A3,$B3,$C3,$D3,$E3,$F3
003627r 1  43 53 63 73  
00362Br 1  83 93 A3 B3  
003633r 1  04 14 24 34  .byte $04,$14,$24,$34,$44,$54,$64,$74,$84,$94,$A4,$B4,$C4,$D4,$E4,$F4
003637r 1  44 54 64 74  
00363Br 1  84 94 A4 B4  
003643r 1  05 15 25 35  .byte $05,$15,$25,$35,$45,$55,$65,$75,$85,$95,$A5,$B5,$C5,$D5,$E5,$F5
003647r 1  45 55 65 75  
00364Br 1  85 95 A5 B5  
003653r 1  06 16 26 36  .byte $06,$16,$26,$36,$46,$56,$66,$76,$86,$96,$A6,$B6,$C6,$D6,$E6,$F6
003657r 1  46 56 66 76  
00365Br 1  86 96 A6 B6  
003663r 1  07 17 27 37  .byte $07,$17,$27,$37,$47,$57,$67,$77,$87,$97,$A7,$B7,$C7,$D7,$E7,$F7
003667r 1  47 57 67 77  
00366Br 1  87 97 A7 B7  
003673r 1  08 18 28 38  .byte $08,$18,$28,$38,$48,$58,$68,$78,$88,$98,$A8,$B8,$C8,$D8,$E8,$F8
003677r 1  48 58 68 78  
00367Br 1  88 98 A8 B8  
003683r 1  09 19 29 39  .byte $09,$19,$29,$39,$49,$59,$69,$79,$89,$99,$A9,$B9,$C9,$D9,$E9,$F9
003687r 1  49 59 69 79  
00368Br 1  89 99 A9 B9  
003693r 1  0A 1A 2A 3A  .byte $0A,$1A,$2A,$3A,$4A,$5A,$6A,$7A,$8A,$9A,$AA,$BA,$CA,$DA,$EA,$FA
003697r 1  4A 5A 6A 7A  
00369Br 1  8A 9A AA BA  
0036A3r 1  0B 1B 2B 3B  .byte $0B,$1B,$2B,$3B,$4B,$5B,$6B,$7B,$8B,$9B,$AB,$BB,$CB,$DB,$EB,$FB
0036A7r 1  4B 5B 6B 7B  
0036ABr 1  8B 9B AB BB  
0036B3r 1  0C 1C 2C 3C  .byte $0C,$1C,$2C,$3C,$4C,$5C,$6C,$7C,$8C,$9C,$AC,$BC,$CC,$DC,$EC,$FC
0036B7r 1  4C 5C 6C 7C  
0036BBr 1  8C 9C AC BC  
0036C3r 1  0D 1D 2D 3D  .byte $0D,$1D,$2D,$3D,$4D,$5D,$6D,$7D,$8D,$9D,$AD,$BD,$CD,$DD,$ED,$FD
0036C7r 1  4D 5D 6D 7D  
0036CBr 1  8D 9D AD BD  
0036D3r 1  0E 1E 2E 3E  .byte $0E,$1E,$2E,$3E,$4E,$5E,$6E,$7E,$8E,$9E,$AE,$BE,$CE,$DE,$EE,$FE
0036D7r 1  4E 5E 6E 7E  
0036DBr 1  8E 9E AE BE  
0036E3r 1  0F 1F 2F 3F  .byte $0F,$1F,$2F,$3F,$4F,$5F,$6F,$7F,$8F,$9F,$AF,$BF,$CF,$DF,$EF,$FF
0036E7r 1  4F 5F 6F 7F  
0036EBr 1  8F 9F AF BF  
0036F3r 1               
0036F3r 1               LOW_NIBBLE_HIGH:
0036F3r 1               ;      0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
0036F3r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
0036F7r 1  40 50 60 70  
0036FBr 1  80 90 A0 B0  
003703r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003707r 1  40 50 60 70  
00370Br 1  80 90 A0 B0  
003713r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003717r 1  40 50 60 70  
00371Br 1  80 90 A0 B0  
003723r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003727r 1  40 50 60 70  
00372Br 1  80 90 A0 B0  
003733r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003737r 1  40 50 60 70  
00373Br 1  80 90 A0 B0  
003743r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003747r 1  40 50 60 70  
00374Br 1  80 90 A0 B0  
003753r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003757r 1  40 50 60 70  
00375Br 1  80 90 A0 B0  
003763r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003767r 1  40 50 60 70  
00376Br 1  80 90 A0 B0  
003773r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003777r 1  40 50 60 70  
00377Br 1  80 90 A0 B0  
003783r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003787r 1  40 50 60 70  
00378Br 1  80 90 A0 B0  
003793r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
003797r 1  40 50 60 70  
00379Br 1  80 90 A0 B0  
0037A3r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
0037A7r 1  40 50 60 70  
0037ABr 1  80 90 A0 B0  
0037B3r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
0037B7r 1  40 50 60 70  
0037BBr 1  80 90 A0 B0  
0037C3r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
0037C7r 1  40 50 60 70  
0037CBr 1  80 90 A0 B0  
0037D3r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
0037D7r 1  40 50 60 70  
0037DBr 1  80 90 A0 B0  
0037E3r 1  00 10 20 30  .byte $00,$10,$20,$30,$40,$50,$60,$70,$80,$90,$A0,$B0,$C0,$D0,$E0,$F0
0037E7r 1  40 50 60 70  
0037EBr 1  80 90 A0 B0  
0037F3r 1               
0037F3r 1               BUFFER_A_OFFSETS_HIGH: ; 128 bytes
0037F3r 1  18 18 19 19  .byte 24,24,25,25,26,27,27,28,29,29,30,30,31,32,32,33,34,34,35,35,36,37,37,38,39,39,40,40,41,42,42,43,44,44,45,45,46,47,47,48,49,49,50,50,51,52,52,53,54,54,55,55,56,57,57,58,59,59,60,60,61,62,62,63,64,64,65,65,66,67,67,68,69,69,70,70,71,72,72,73,74,74,75,75,76,77,77,78,79,79,80,80,81,82,82,83,84,84,85,85,86,87,87,88,89,89,90,90,91,92,92,93,94,94,95,95,96,97,97,98,99,99,100,100,101,102,102,103
0037F7r 1  1A 1B 1B 1C  
0037FBr 1  1D 1D 1E 1E  
003873r 1               
003873r 1               BITMAP_OFFSETS_LOW: ; 128 bytes
003873r 1  00 A0 40 E0  .byte 0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96
003877r 1  80 20 C0 60  
00387Br 1  00 A0 40 E0  
0038F3r 1               
0038F3r 1               BUFFER_B_OFFSETS_HIGH: ; 128 bytes
0038F3r 1  80 80 81 81  .byte 128,128,129,129,130,131,131,132,133,133,134,134,135,136,136,137,138,138,139,139,140,141,141,142,143,143,144,144,145,146,146,147,148,148,149,149,150,151,151,152,153,153,154,154,155,156,156,157,158,158,159,159,160,161,161,162,163,163,164,164,165,166,166,167,168,168,169,169,170,171,171,172,173,173,174,174,175,176,176,177,178,178,179,179,180,181,181,182,183,183,184,184,185,186,186,187,188,188,189,189,190,191,191,192,193,193,194,194,195,196,196,197,198,198,199,199,200,201,201,202,203,203,204,204,205,206,206,207
0038F7r 1  82 83 83 84  
0038FBr 1  85 85 86 86  
003973r 1               
003973r 1               
003973r 1               
003973r 1               ;constants
003973r 1               ;--------------------------------
003973r 1               
003973r 1               ; RAM Interrupt Vectors
003973r 1               IRQVec            = $0314
003973r 1               
003973r 1               ; VERA
003973r 1               VERA_addr_low     = $9F20
003973r 1               VERA_addr_high    = $9F21
003973r 1               VERA_addr_bank    = $9F22
003973r 1               VERA_data0        = $9F23
003973r 1               VERA_data1        = $9F24
003973r 1               VERA_ctrl         = $9F25
003973r 1               VERA_ien          = $9F26
003973r 1               VERA_isr          = $9F27
003973r 1               VERA_dc_video     = $9F29 ; DCSEL = 0
003973r 1               FX_CTRL           = $9F29 ; DCSEL = 2
003973r 1               FX_MULT           = $9F2C ; DCSEL = 2
003973r 1               FX_CACHE_L        = $9F29 ; DCSEL = 6
003973r 1               FX_CACHE_M        = $9F2A
003973r 1               FX_CACHE_H        = $9F2B
003973r 1               FX_CACHE_U        = $9F2C
003973r 1               ;   Current Field | Sprites Enable | Layer1 Enable  |Layer0 Enable
003973r 1               ; NTSC/RGB: 240P  | NTSC: Chroma Disable / RGB: HV Sync Output Mode
003973r 1               
003973r 1               VERA_dc_hscale    = $9F2A
003973r 1               VERA_dc_vscale    = $9F2B
003973r 1               
003973r 1               VERA_L0_config    = $9F2D
003973r 1               ;   7       6     5   4       3       2             1   0
003973r 1               ;   Map Height | Map Width | T256C | Bitmap Mode | Color Depth
003973r 1               ;   0 - 32                  0 - 16    0 tiled       0   1bpp mono
003973r 1               ;   1 - 64                  1 - 256   1 enabled     1   2bpp 4 color
003973r 1               ;   2 - 128                                         2   4bpp 16 color
003973r 1               ;   3 - 256                                         3   8bpp 256 color
003973r 1               ;   bitmap mode - tilebase points to bitmap data, mapbase not used
003973r 1               ;   tile width = 0 is 320 pixels / tile width=1 is 640 pixels.. so could do 4bpp x 320?
003973r 1               ;   The palette offset (in 'H-Scroll (11:8)') modifies the color indexes of the bitmap in the same way as in the tile modes.
003973r 1               
003973r 1               VERA_L0_mapbase   = $9F2E
003973r 1               VERA_L0_tilebase  = $9F2F ;   Tile Base Address (16:11) | Tile Height 0-8/1-16 | Tile Width 0-8/1-16
003973r 1               VERA_L0_HSCROLL_L = $9F30 ;  H-Scroll (7:0)
003973r 1               VERA_L0_HSCROLL_H = $9F31 ;  - H-Scroll (11:8)
003973r 1               VERA_L0_VSCROLL_L = $9F32 ;  V-Scroll (7:0)
003973r 1               VERA_L0_VSCROLL_H = $9F33 ;  - V-Scroll (11:8)
003973r 1               
003973r 1               VERA_L1_config    = $9F34
003973r 1               VERA_L1_mapbase   = $9F35
003973r 1               VERA_L1_tilebase  = $9F36
003973r 1               VERA_L1_HSCROLL_L = $9F37 ;  H-Scroll (7:0)
003973r 1               VERA_L1_HSCROLL_H = $9F38 ;  - H-Scroll (11:8)
003973r 1               VERA_L1_VSCROLL_L = $9F39 ;  V-Scroll (7:0)
003973r 1               VERA_L1_VSCROLL_H = $9F3A ;  - V-Scroll (11:8)
003973r 1               
003973r 1               VSYNC_BIT         = $01
003973r 1               
003973r 1               ; VRAM Addresses
003973r 1               ;   Address range Description
003973r 1               ;   $00000 - $1F9BF Video RAM   - 129,424 bytes -> 126K is 129,024 (1F800)
003973r 1               ;   $1F9C0 - $1F9FF PSG registers
003973r 1               ;   $1FA00 - $1FBFF Palette
003973r 1               ;   $1FC00 - $1FFFF Sprite attributes
003973r 1               VRAM_SPRITES =      $00000  ; putting sprite data at start of VRAM for now.. may move later?
003973r 1               VRAM_BITMAP_LAYERA =$11800  ; setting this to 68K ; was starts at 70K ... so up to ~70K for sprites.. not too shabby..
003973r 1               VRAM_BITMAP_LAYERB =$18000  ; ~25K needs to start at 2K boundary... 121.5-25= 96k
003973r 1               VRAM_TEXT_SCREEN =  $1E400  ; 121.5K    256 x 21 => 32 x 24 would take 1.5K tiles is min.. 64*32 = 2K 8 config..
003973r 1               VRAM_SPRITE_BUF =   $1EC00  ; 123K - sprite attribute buffer for swapping data in ..
003973r 1               VRAM_CHARSET =      $1F000  ;  $1:F000-$1:F7FF Charset loaded by kernal here .. is at 124K ..
003973r 1               ; only can go to 126K ...
003973r 1               VRAM_palette      = $1FA00      ;
003973r 1               VRAM_sprite_attributes = $1FC00
003973r 1               
003973r 1               SPRITES_ONLY_VGA = $41
003973r 1               SPRITES_LAYER1_LAYER0_VGA = $71
003973r 1               
003973r 1               
003973r 1               ; Kernal
003973r 1               CHROUT            = $FFD2
003973r 1               GETIN             = $FFE4
003973r 1               CINT              = $FF81
003973r 1               
003973r 1               
003973r 1               ; PETSCII Codes
003973r 1               WHITE             = $05
003973r 1               RETURN            = $0D
003973r 1               SPACE             = $20
003973r 1               ZERO_CHAR         = $30
003973r 1               ONE_CHAR          = $31
003973r 1               TWO_CHAR          = $32
003973r 1               THREE_CHAR        = $33
003973r 1               FOUR_CHAR         = $34
003973r 1               FIVE_CHAR         = $35
003973r 1               SIX_CHAR          = $36
003973r 1               SEVEN_CHAR        = $37
003973r 1               EIGHT_CHAR        = $38
003973r 1               NINE_CHAR         = $39
003973r 1               
003973r 1               A_CHAR            = $41
003973r 1               C_CHAR            = $43
003973r 1               D_CHAR            = $44
003973r 1               E_CHAR            = $45
003973r 1               I_CHAR            = $49
003973r 1               J_CHAR            = $4A
003973r 1               K_CHAR            = $4B
003973r 1               L_CHAR            = $4C
003973r 1               O_CHAR            = $4F
003973r 1               T_CHAR            = $54
003973r 1               W_CHAR            = $57
003973r 1               X_CHAR            = $58
003973r 1               Y_CHAR            = $59
003973r 1               Z_CHAR            = $5A
003973r 1               
003973r 1               CLR               = $93
003973r 1               
003973r 1               ; 	$0800-$9EFF	BASIC program/variables; available to the user
003973r 1               WORLD_DATA = $6000 	;	so is %100 [Y 5 bits ] : [ab] 0 [X - 6 bits
003973r 1               SCREEN_buffer = $8000
003973r 1               
003973r 1               ; zero page layout $0022-$007F is available to user
003973r 1               ZP_PTR = $22
003973r 1               SCRATCH_PTR = $7E
003973r 1               
003973r 1               SPRITE_SIZE_ORA = $D0 ; $D0 for 16x64, $50 for 16x16
003973r 1               
003973r 1               diff_sprite_to_transparent = 15
003973r 1               
003973r 1               SCREEN_OUT_RIGHT  = 160 ; right of middle is 116, +48 = 164
003973r 1               SCREEN_OUT_LEFT8    = 256-8
003973r 1               SCREEN_OUT_LEFT16   = 256-16  ; left of middle is 100, -48=52-16=36
003973r 1               SCREEN_OUT_LEFT32   = 256-32  ; left of middle is 100, -48=52-16=36
003973r 1               SCREEN_OUT_LEFT64   = 256-64  ; left of middle is 100, -48=52-16=36
003973r 1               SCREEN_OUT_TOP     = 240
003973r 1               SCREEN_OUT_BOTTOM  = 120
003973r 1               
003973r 1               ; global data ; 2E00
003973r 1  DE AD        GLOBAL_DATA:         .byte $DE,$AD ; 0-1
003975r 1  00 00        default_irq_vector:  .addr 0 ; 4-5
003977r 1               ;line 0
003977r 1  00 00        MASTER_CLOCK:        .addr 0 ; 6-7
003979r 1  00           .byte 0
00397Ar 1  00           STATUS:              .byte 0
00397Br 1               ;line 1
00397Br 1  00           .byte 0
00397Cr 1  01           VSYNC_counter:       .byte 1 ; 8
00397Dr 1  00           STALL_COUNTERH:      .byte 0
00397Er 1  00           STALL_COUNTER:       .byte 0
00397Fr 1               ;line 2
00397Fr 1  00           .byte 0
003980r 1  00           LAST_VSYNC_COUNTER:  .byte 0
003981r 1  00           LAST_STALLCOUNTERH:  .byte 0
003982r 1  00           LAST_STALLCOUNTER:   .byte 0
003983r 1               ; line 3
003983r 1  FF           VERA_LOCK:           .byte 255 ; 9 value written to screen is value at time DEBUG_WRITE
003984r 1  50           IRQ_VERA_LOCK:       .byte 80 ; value of VERA_LOCK when reached the Interrupt
003985r 1  40           CURRENT_BITMAP_BUFFER: .byte 64 ;
003986r 1               ;        A        B     CURRENT BITMAP BUFFER
003986r 1               ;   0   display  dirty    A is being displayed, B to be drawn on
003986r 1               ;  64   display  ready    B  is ready for swap
003986r 1               ; 128   dirty    display  B is being displayed, A to be drawn on
003986r 1               ; 192   ready    display  A  is ready for swap
003986r 1               
003986r 1  00           LAST_BITMAP_BUFFER:    .byte 0 ;
003987r 1               ; line 4
003987r 1  01           camera_facing: 		 .byte 1 ; 7
003988r 1  00           .byte 0
003989r 1  00           CAMERA_CENTER_XH:    .byte 0 ; 13
00398Ar 1  00           CAMERA_CENTER_YH:    .byte 0 ; 15
00398Br 1               ; line 5
00398Br 1  00           camera_cell_x: 		 .byte 0 ; c
00398Cr 1  00           camera_cell_xl:       .byte 0 ; d
00398Dr 1  00           camera_cell_y: 		 .byte 0 ; e
00398Er 1  00           camera_cell_yl:       .byte 0 ; f
00398Fr 1               ; line 6
00398Fr 1  2C           camera_world_pos_XH:    .byte 44 ; 8
003990r 1  30           camera_world_pos_XL:       .byte 48 ; 9
003991r 1  0F           camera_world_pos_YH:        .byte 15 ; A
003992r 1  80           camera_world_pos_YL:       .byte 128  ; B
003993r 1               ; line 7
003993r 1  00           DEBUG_A: .byte 0  ; B
003994r 1  00           DEBUG_B: .byte 0  ; C
003995r 1  00           DEBUG_C: .byte 0  ; D
003996r 1  00           DEBUG_D: .byte 0  ; E
003997r 1               ; line 8
003997r 1               
003997r 1  00           NUM_AVAIL_SPRITES:   .byte 0 ; A
003998r 1  00           NUM_RESERVED_SPRITES:    .byte  0;(1+NUM_RESERVED_SPRITES-MASTER_CLOCK) << 1 ; F
003999r 1               
003999r 1  00           SPRITE_OBJECT_ENABLE: .byte 0 ;255 ;
00399Ar 1               
00399Ar 1  00           CAMERA_CENTER_XL:    .byte 0 ; 12
00399Br 1  00           CAMERA_CENTER_YL:    .byte 0 ; 14
00399Cr 1  00           CAMERA_CENTER_TOP_PX: .byte 0 ; 16
00399Dr 1  00 00        CAMERA_CELL_LINE_PTR: .addr 0 ; 17-18
00399Fr 1  00           WORLD_SPRITE_NUM:    .byte 0 ; 1B
0039A0r 1  00           WORLD_WALL_SPRITE_NUM: .byte 0; 1C
0039A1r 1  FF           BUFFER_A_DIRTY:        .byte 255 ;
0039A2r 1  FF           BUFFER_B_DIRTY:        .byte 255 ;
0039A3r 1               
0039A3r 1  F0           camera_screen_out_top: .byte SCREEN_OUT_TOP       ; for determining visibility / stop conditions for checking if within range to view..
0039A4r 1  78           camera_screen_out_bottom: .byte SCREEN_OUT_BOTTOM
0039A5r 1               
0039A5r 1               ENDGLOBALS:
0039A5r 1               
0039A5r 1               .macro stash_scratch
0039A5r 1               	STA (SCRATCH_PTR)
0039A5r 1                   INC SCRATCH_PTR
0039A5r 1               .endmacro
0039A5r 1               
0039A5r 1               custom_irq_handler: ; 2E12
0039A5r 1  AD 27 9F        lda VERA_isr
0039A8r 1  29 01           and #VSYNC_BIT
0039AAr 1  F0 11           BEQ :++
0039ACr 1                  ;  for debug ..
0039ACr 1  AD rr rr        LDA VERA_LOCK
0039AFr 1  8D rr rr        STA IRQ_VERA_LOCK
0039B2r 1               
0039B2r 1  EE rr rr        INC VSYNC_counter
0039B5r 1               
0039B5r 1  EE rr rr        INC VERA_LOCK
0039B8r 1  F0 06           BEQ :+++  ; @unlock_vera ; if we don't have lock we'll just fail this frame..
0039BAr 1                @NOP_nothing_to_do:
0039BAr 1  CE rr rr      : DEC VERA_LOCK
0039BDr 1  6C rr rr      : jmp (default_irq_vector)
0039C0r 1               
0039C0r 1  EE rr rr      : INC DEBUG_C
0039C3r 1  AD rr rr        LDA CURRENT_BITMAP_BUFFER
0039C6r 1  4D rr rr        EOR LAST_BITMAP_BUFFER
0039C9r 1  F0 EF           BEQ :--- ; if these match then there's nothing to change
0039CBr 1  18              CLC
0039CCr 1  AD rr rr        LDA CURRENT_BITMAP_BUFFER
0039CFr 1  8D rr rr        STA LAST_BITMAP_BUFFER
0039D2r 1               ;        A        B     CURRENT BITMAP BUFFER
0039D2r 1               ;   0   display  dirty    A is being displayed, B to be drawn on
0039D2r 1               ;  64   display  ready    B  is ready for swap
0039D2r 1               ; 128   dirty    display  B is being displayed, A to be drawn on
0039D2r 1               ; 192   ready    display  A  is ready for swap
0039D2r 1  30 0B           BMI @DISPLAY_B
0039D4r 1               @DISPLAY_A:
0039D4r 1  F0 E4           BEQ @NOP_nothing_to_do ;
0039D6r 1  A9 80           LDA #128
0039D8r 1  8D rr rr        STA CURRENT_BITMAP_BUFFER
0039DBr 1  A9 C0           LDA #VRAM_BITMAP_LAYERB>>9
0039DDr 1  80 09           BRA @GO_SWAP
0039DFr 1               @DISPLAY_B:
0039DFr 1  C9 C0           CMP #192
0039E1r 1  90 D7           BCC @NOP_nothing_to_do
0039E3r 1  9C rr rr        STZ CURRENT_BITMAP_BUFFER
0039E6r 1  A9 8C           LDA #VRAM_BITMAP_LAYERA>>9
0039E8r 1               @GO_SWAP:
0039E8r 1  8D 2F 9F        STA VERA_L0_tilebase
0039EBr 1               
0039EBr 1  A9 01           LDA #$01
0039EDr 1  8D 25 9F        STA VERA_ctrl
0039F0r 1               
0039F0r 1  A2 FF           LDX #$FF
0039F2r 1  8E 20 9F        STX VERA_addr_low
0039F5r 1  8E 21 9F        STX VERA_addr_high
0039F8r 1  A9 19           LDA #$19
0039FAr 1  8D 22 9F        STA VERA_addr_bank
0039FDr 1               
0039FDr 1  9C 25 9F        STZ VERA_ctrl  ;  reset to address 0
003A00r 1  8D 22 9F        STA VERA_addr_bank
003A03r 1               
003A03r 1  A9 EF           LDA #$EF
003A05r 1  8D 21 9F        STA VERA_addr_high
003A08r 1  8E 20 9F        STX VERA_addr_low
003A0Br 1               
003A0Br 1  AE rr rr        LDX NUM_AVAIL_SPRITES
003A0Er 1  AD 23 9F      : LDA VERA_data0   ;  4
003A11r 1  8D 24 9F        STA VERA_data1   ;  4  20
003A14r 1  AD 23 9F        LDA VERA_data0   ;  4  8
003A17r 1  8D 24 9F        STA VERA_data1   ;  4  20
003A1Ar 1  AD 23 9F        LDA VERA_data0   ;  4  12
003A1Dr 1  8D 24 9F        STA VERA_data1   ;  4  20
003A20r 1  AD 23 9F        LDA VERA_data0   ;  4  16
003A23r 1  8D 24 9F        STA VERA_data1   ;  4  20
003A26r 1  AD 23 9F        LDA VERA_data0   ;  4
003A29r 1  8D 24 9F        STA VERA_data1   ;  4  20
003A2Cr 1  AD 23 9F        LDA VERA_data0   ;  4  8
003A2Fr 1  8D 24 9F        STA VERA_data1   ;  4  20
003A32r 1  AD 23 9F        LDA VERA_data0   ;  4  12
003A35r 1  8D 24 9F        STA VERA_data1   ;  4  20
003A38r 1  AD 23 9F        LDA VERA_data0   ;  4  16
003A3Br 1  8D 24 9F        STA VERA_data1   ;  4  20
003A3Er 1  CA              DEX         ;  2  22
003A3Fr 1  D0 CD           BNE :-      ;  3  25       8per byte = 64 per sprite + 5 = 69 per * 128 = 8,832 cycles
003A41r 1               
003A41r 1  6C rr rr        jmp (default_irq_vector)
003A44r 1                  ; RTI will happen after jump
003A44r 1               
003A44r 1               start:
003A44r 1                 ; start of program - init globals
003A44r 1  AD 14 03       lda IRQVec
003A47r 1  8D rr rr       sta default_irq_vector
003A4Ar 1  AD 15 03       lda IRQVec+1
003A4Dr 1  8D rr rr       sta default_irq_vector+1
003A50r 1               
003A50r 1  9C 29 9F       stz VERA_dc_video   ; disable display
003A53r 1  A9 33          lda #51 ; #43 ; set scale for bitmap mode - going for 215x161 mode
003A55r 1  8D 2A 9F       sta VERA_dc_hscale
003A58r 1  8D 2B 9F       sta VERA_dc_vscale
003A5Br 1                 ; for now no L0 or L1
003A5Br 1               
003A5Br 1                 ; let's stick that test sprite data into VRAM at zero for now..
003A5Br 1  9C 25 9F       stz VERA_ctrl
003A5Er 1  9C 20 9F       stz VERA_addr_low
003A61r 1  9C 21 9F       stz VERA_addr_high
003A64r 1  A9 10          lda #$10
003A66r 1  8D 22 9F       sta VERA_addr_bank
003A69r 1                 ; load test VRAM data
003A69r 1               
003A69r 1                 ; is 512 bytes at test_cell_sprite label
003A69r 1  A0 00          ldy #0
003A6Br 1               
003A6Br 1  A9 rr          LDA #<test_vram_data
003A6Dr 1  85 22          STA ZP_PTR
003A6Fr 1  A9 rr          LDA #>test_vram_data
003A71r 1  85 23          STA ZP_PTR+1
003A73r 1  A2 40          LDX #64   ;   num pages to copy - 16 pages / 8K  - sprite addr 0-255
003A75r 1  80 02          BRA :++
003A77r 1                 :
003A77r 1  E6 23             INC ZP_PTR+1
003A79r 1                   :
003A79r 1  B1 22              LDA (ZP_PTR),Y
003A7Br 1  8D 23 9F           STA VERA_data0
003A7Er 1  C8                 INY
003A7Fr 1  D0 F8              BNE :-
003A81r 1  CA                DEX
003A82r 1  D0 F3             BNE :--
003A84r 1               
003A84r 1                 ; initialize some waves
003A84r 1  64 22          STZ ZP_PTR
003A86r 1  A9 rr          LDA #>TUB_WORLD
003A88r 1  85 23          STA ZP_PTR+1
003A8Ar 1  A9 08          LDA #8
003A8Cr 1  85 24          STA ZP_PTR+2 ; for use as page counter..
003A8Er 1  A2 00          LDX #0
003A90r 1  B1 22          : LDA (ZP_PTR),y ; grab world data
003A92r 1  C9 80            CMP #128       ; is outside or inside tub?
003A94r 1  B0 0B            BCS :+         ; skip this one
003A96r 1  8A               TXA
003A97r 1  91 22            STA (ZP_PTR),y
003A99r 1  E8               INX
003A9Ar 1  E8               INX
003A9Br 1  E8               INX
003A9Cr 1  E8               INX
003A9Dr 1  E0 34            CPX #52
003A9Fr 1  B0 0B            BCS :++
003AA1r 1  C8             : INY
003AA2r 1  D0 EC            BNE :--
003AA4r 1  E6 23            INC ZP_PTR+1
003AA6r 1  C6 24            DEC ZP_PTR+2
003AA8r 1  D0 E6            BNE :--
003AAAr 1  80 18            BRA :+++
003AACr 1  B1 22          : LDA (ZP_PTR),y
003AAEr 1  C9 80            CMP #128       ; is outside or inside tub?
003AB0r 1  B0 09            BCS :+         ; skip this one
003AB2r 1  8A               TXA
003AB3r 1  91 22            STA (ZP_PTR),y
003AB5r 1  CA               DEX
003AB6r 1  CA               DEX
003AB7r 1  CA               DEX
003AB8r 1  CA               DEX
003AB9r 1  F0 E6            BEQ :--
003ABBr 1  C8             : INY
003ABCr 1  D0 EE            BNE :--
003ABEr 1  E6 23            INC ZP_PTR+1
003AC0r 1  C6 24            DEC ZP_PTR+2
003AC2r 1  D0 E8            BNE :--
003AC4r 1                 :
003AC4r 1               
003AC4r 1               
003AC4r 1                 ; write custom palette data  - 16 colors only for now.. $1:FA00-$1:FBFF   VERA Color Palette (256 x 2 bytes)
003AC4r 1  A9 01          LDA #1
003AC6r 1  8D 25 9F       STA VERA_ctrl
003AC9r 1  A9 3F          LDA #63
003ACBr 1  8D 20 9F       STA VERA_addr_low
003ACEr 1  A9 FA          LDA #$FA
003AD0r 1  8D 21 9F       STA VERA_addr_high
003AD3r 1  A9 19          LDA #$19
003AD5r 1  8D 22 9F       STA VERA_addr_bank
003AD8r 1  9C 25 9F       STZ VERA_ctrl
003ADBr 1  A2 1F          LDX #31
003ADDr 1  8E 20 9F       STX VERA_addr_low
003AE0r 1  A9 FA          LDA #$FA
003AE2r 1  8D 21 9F       STA VERA_addr_high
003AE5r 1  A9 19          LDA #$19
003AE7r 1  8D 22 9F       STA VERA_addr_bank
003AEAr 1                 :
003AEAr 1  BD rr rr         LDA test_optimal_pal_data,X
003AEDr 1  8D 23 9F         STA VERA_data0
003AF0r 1  49 FF            EOR #$FF
003AF2r 1  8D 24 9F         STA VERA_data1
003AF5r 1  CA               DEX
003AF6r 1  D0 F2            BNE :-
003AF8r 1  BD rr rr       LDA test_optimal_pal_data,X
003AFBr 1  8D 23 9F       STA VERA_data0
003AFEr 1               
003AFEr 1  A9 08          LDA #8
003B00r 1  9C 34 9F       STz VERA_L1_config
003B03r 1  A9 F8          LDA #VRAM_CHARSET >> 9
003B05r 1  8D 36 9F       STA VERA_L1_tilebase
003B08r 1  A9 F2          LDA #VRAM_TEXT_SCREEN >> 9
003B0Ar 1  8D 35 9F       STA VERA_L1_mapbase
003B0Dr 1               
003B0Dr 1  9C 20 9F       STZ VERA_addr_low
003B10r 1  A9 18          LDA #>VRAM_BITMAP_LAYERA
003B12r 1  8D 21 9F       STA VERA_addr_high
003B15r 1  A9 11          LDA #$11
003B17r 1  8D 22 9F       STA VERA_addr_bank
003B1Ar 1  A2 67          LDX #103  ;  zero bufferA
003B1Cr 1  A0 00          LDY #0
003B1Er 1  9C 23 9F     : STZ VERA_data0
003B21r 1  C8             INY
003B22r 1  D0 FA          BNE :-
003B24r 1  CA             DEX
003B25r 1  D0 F7          BNE :-
003B27r 1  A2 65          LDX #101  ;  write A to bufferB initially as debug / flashing display when swapped..
003B29r 1                 ;LDA #255
003B29r 1  9C 23 9F     : STZ VERA_data0
003B2Cr 1  C8             INY
003B2Dr 1  D0 FA          BNE :-
003B2Fr 1  CA             DEX
003B30r 1  D0 F7          BNE :-
003B32r 1               
003B32r 1  9C 23 9F       STZ VERA_data0
003B35r 1  A9 21          LDA #$21
003B37r 1  8D 22 9F       STA VERA_addr_bank
003B3Ar 1               
003B3Ar 1  A2 0F          LDX #15
003B3Cr 1  A0 14        : LDY #20
003B3Er 1  A9 01          LDA #$01
003B40r 1               
003B40r 1  8D 23 9F       : STA VERA_data0
003B43r 1  88               DEY
003B44r 1  D0 FA            BNE :-
003B46r 1  A0 F1            LDY #$F1
003B48r 1  8C 23 9F         STY VERA_data0 ; cols 20-23
003B4Br 1  8C 23 9F         STY VERA_data0
003B4Er 1  8C 23 9F         STY VERA_data0
003B51r 1  8C 23 9F         STY VERA_data0
003B54r 1               
003B54r 1  8C 23 9F         STY VERA_data0 ; cols 24-27
003B57r 1  8C 23 9F         STY VERA_data0
003B5Ar 1  8C 23 9F         STY VERA_data0
003B5Dr 1  8C 23 9F         STY VERA_data0
003B60r 1               
003B60r 1  8C 23 9F         STY VERA_data0 ; cols 28-31
003B63r 1  8C 23 9F         STY VERA_data0
003B66r 1  8C 23 9F         STY VERA_data0
003B69r 1  8C 23 9F         STY VERA_data0
003B6Cr 1  CA              DEX
003B6Dr 1  D0 CD           BNE :--
003B6Fr 1  A2 A0          LDX #160
003B71r 1  8C 23 9F       : STY VERA_data0
003B74r 1  8C 23 9F         STY VERA_data0
003B77r 1  CA               DEX
003B78r 1  D0 F7            BNE :-
003B7Ar 1               ;  LDA #4
003B7Ar 1               ;  STA VERA_L1_HSCROLL_L
003B7Ar 1               ;  STA VERA_L1_VSCROLL_L
003B7Ar 1               
003B7Ar 1  9C 20 9F       STZ VERA_addr_low
003B7Dr 1  A9 E4          LDA #>VRAM_TEXT_SCREEN
003B7Fr 1  8D 21 9F       STA VERA_addr_high
003B82r 1  A2 04          LDX #4
003B84r 1  A9 20          LDA #32
003B86r 1  8D 23 9F     : STA VERA_data0
003B89r 1  C8             INY
003B8Ar 1  D0 FA          BNE :-
003B8Cr 1  CA             DEX
003B8Dr 1  D0 F7          BNE :-
003B8Fr 1               
003B8Fr 1  A9 06          LDA #$06
003B91r 1  8D 2D 9F       STA VERA_L0_config
003B94r 1  A9 01          LDA #$01 ; set L0 to palette offset 1 for now, to see where stuff is.
003B96r 1  8D 31 9F       STA VERA_L0_HSCROLL_H
003B99r 1  A9 8C          LDA #(VRAM_BITMAP_LAYERA>>9)
003B9Br 1               
003B9Br 1               ;  LDA #VRAM_BITMAP_LAYERB>>9
003B9Br 1  8D 2F 9F       STA VERA_L0_tilebase
003B9Er 1               
003B9Er 1  A9 06          LDA #6
003BA0r 1  8D 20 9F       STA VERA_addr_low
003BA3r 1  A9 EC          LDA #>VRAM_SPRITE_BUF
003BA5r 1  8D 21 9F       STA VERA_addr_high
003BA8r 1  A9 41          LDA #$41
003BAAr 1  8D 22 9F       STA VERA_addr_bank
003BADr 1  9C 23 9F       : STZ VERA_data0
003BB0r 1  E8               INX
003BB1r 1  D0 FA            BNE :-
003BB3r 1                 ; enable display
003BB3r 1  9C 25 9F       stz VERA_ctrl
003BB6r 1  A9 71          lda #SPRITES_LAYER1_LAYER0_VGA ; #SPRITES_ONLY_VGA
003BB8r 1  8D 29 9F       sta VERA_dc_video
003BBBr 1               
003BBBr 1               ;  DEC VERA_LOCK ; unlock the vera for first go...
003BBBr 1               ;   BRA @camera_world_changed
003BBBr 1                 ; overwrite RAM IRQ vector with custom handler address
003BBBr 1  78             sei ; disable IRQ while vector is changing
003BBCr 1  A9 rr          lda #<custom_irq_handler
003BBEr 1  8D 14 03       sta IRQVec
003BC1r 1  A9 rr          lda #>custom_irq_handler
003BC3r 1  8D 15 03       sta IRQVec+1
003BC6r 1  A9 01          lda #VSYNC_BIT ; make VERA only generate VSYNC IRQs
003BC8r 1  8D 26 9F       sta VERA_ien
003BCBr 1  58             cli ; enable IRQ now that vector is properly set
003BCCr 1               
003BCCr 1               
003BCCr 1                 ; main loop here...
003BCCr 1  9C rr rr        STZ camera_facing
003BCFr 1               
003BCFr 1               @camera_world_changed:
003BCFr 1                  ; copy over cell YL as-is
003BCFr 1  AD rr rr        LDA camera_world_pos_YL
003BD2r 1  8D rr rr        STA camera_cell_yl
003BD5r 1                  ; YH gets copied over ..
003BD5r 1  AD rr rr        LDA camera_world_pos_YH
003BD8r 1  8D rr rr        STA camera_cell_y
003BDBr 1                  ; cellX = WORLDX*ratio - floor(cellY)/2
003BDBr 1                  ;  halve floor(cellY)
003BDBr 1  4A              LSR
003BDCr 1  85 7F           STA $7F ; stash it for scratch
003BDEr 1  A9 00           LDA #0
003BE0r 1  6A              ROR
003BE1r 1  85 7E           STA $7E ; and there's the half..
003BE3r 1               
003BE3r 1  AE rr rr        LDX camera_world_pos_XH
003BE6r 1  AC rr rr        LDY camera_world_pos_XL
003BE9r 1  18              CLC
003BEAr 1  B9 rr rr        LDA WORLD_TO_CELL_XH,Y ; that bit from pos_XL
003BEDr 1  7D rr rr        ADC WORLD_TO_CELL_XL,X ; plus the bit from pos_XH
003BF0r 1  A8              TAY   ;  cellXL from ratio
003BF1r 1  BD rr rr        LDA WORLD_TO_CELL_XH,X
003BF4r 1  69 00           ADC #0 ; gotta do that carry and all ..
003BF6r 1  AA              TAX   ; cellXH from ratio
003BF7r 1               
003BF7r 1  98              TYA
003BF8r 1  38              SEC
003BF9r 1  E5 7E           SBC $7E
003BFBr 1  8D rr rr        STA camera_cell_xl
003BFEr 1  8A              TXA
003BFFr 1  E5 7F           SBC $7F
003C01r 1  8D rr rr        STA camera_cell_x
003C04r 1  4C rr rr        jmp @do_update
003C07r 1               
003C07r 1               @camera_cell_changed: ; run through this more as a normalization step for camera..
003C07r 1                  ; worldX = scaled(floor(cellY)/2 + cellX )
003C07r 1  AD rr rr        LDA camera_cell_yl
003C0Ar 1  8D rr rr        STA camera_world_pos_YL
003C0Dr 1  AD rr rr        LDA camera_cell_y
003C10r 1  8D rr rr        STA camera_world_pos_YH
003C13r 1  4A              LSR
003C14r 1  AA              TAX  ; high byte floor(Y)/2
003C15r 1  A9 00           LDA #0
003C17r 1  6A              ROR ; either is zero or 128 now ... either way, carry is cleared.
003C18r 1  6D rr rr        ADC camera_cell_xl
003C1Br 1  A8              TAY ; stash the low to byte
003C1Cr 1  8A              TXA ; high byte floor (Y)/2 .. ready for adding
003C1Dr 1  6D rr rr        ADC camera_cell_x
003C20r 1  AA              TAX ; stash high byte ... carry _should_ be cleared unless X >255 ... ?
003C21r 1  B9 rr rr        LDA CELL_LOW_TO_WORLD_XL,Y
003C24r 1  7D rr rr        ADC CELL_TO_WORLD_XL,X
003C27r 1  8D rr rr        STA camera_world_pos_XL
003C2Ar 1  B9 rr rr        LDA CELL_LOW_TO_WORLD_XH,Y
003C2Dr 1  7D rr rr        ADC CELL_TO_WORLD_XH,X
003C30r 1  8D rr rr        STA camera_world_pos_XH
003C33r 1                  ;  jmp @do_update ; superfluous currently. redundant even..
003C33r 1               
003C33r 1               
003C33r 1               @do_update:
003C33r 1                  ;  set up screen center stuff
003C33r 1               
003C33r 1               
003C33r 1  AD rr rr        LDA camera_facing
003C36r 1  29 7F           AND #127
003C38r 1  AA              TAX
003C39r 1  BD rr rr        LDA WORLD_SPRITE_NUM_lookies,X
003C3Cr 1  8D rr rr        STA WORLD_SPRITE_NUM
003C3Fr 1  BD rr rr        LDA WORLD_WALL_SPRITE_NUM_lookies,X
003C42r 1  8D rr rr        STA WORLD_WALL_SPRITE_NUM
003C45r 1               
003C45r 1  38              SEC
003C46r 1  BD rr rr        LDA WORLD_SPRITE_CENTER_XL,X
003C49r 1  8D rr rr        STA CAMERA_CENTER_XL
003C4Cr 1  BD rr rr        LDA WORLD_SPRITE_CENTER_XH,X
003C4Fr 1  E9 1C           SBC #28
003C51r 1  8D rr rr        STA CAMERA_CENTER_XH
003C54r 1               
003C54r 1  BD rr rr        LDA WORLD_SPRITE_CENTER_YL,X
003C57r 1  8D rr rr        STA CAMERA_CENTER_YL
003C5Ar 1  38              SEC
003C5Br 1  BD rr rr        LDA WORLD_SPRITE_CENTER_YH,X
003C5Er 1  E9 14           SBC #20
003C60r 1  8D rr rr        STA CAMERA_CENTER_TOP_PX
003C63r 1               
003C63r 1  AE rr rr         LDX camera_facing
003C66r 1               
003C66r 1  AD rr rr         LDA camera_cell_xl
003C69r 1  4A               LSR ;   /2
003C6Ar 1  4A               LSR ;   /4
003C6Br 1  4A               LSR ;   /8
003C6Cr 1  4A               LSR ;   /16
003C6Dr 1  38               SEC
003C6Er 1  E9 08            SBC #8 ;   subtract le middle..
003C70r 1  A8               TAY
003C71r 1  B0 29            BCS :++    ;  is positive..
003C73r 1  18             : CLC
003C74r 1  AD rr rr         LDA CAMERA_CENTER_XL
003C77r 1  7D rr rr         ADC SUBCELL_X_COS_L,X
003C7Ar 1  8D rr rr         STA CAMERA_CENTER_XL
003C7Dr 1  AD rr rr         LDA CAMERA_CENTER_XH
003C80r 1  7D rr rr         ADC SUBCELL_X_COS_H,X
003C83r 1  8D rr rr         STA CAMERA_CENTER_XH
003C86r 1  38               SEC
003C87r 1  AD rr rr         LDA CAMERA_CENTER_YL
003C8Ar 1  FD rr rr         SBC SUBCELL_Y_SIN_L,X
003C8Dr 1  8D rr rr         STA CAMERA_CENTER_YL
003C90r 1  AD rr rr         LDA CAMERA_CENTER_TOP_PX
003C93r 1  FD rr rr         SBC SUBCELL_Y_SIN_H,X
003C96r 1  8D rr rr         STA CAMERA_CENTER_TOP_PX
003C99r 1  C8               INY
003C9Ar 1  D0 D7            BNE :-
003C9Cr 1  F0 29          : BEQ :++
003C9Er 1  38             : SEC
003C9Fr 1  AD rr rr         LDA CAMERA_CENTER_XL
003CA2r 1  FD rr rr         SBC SUBCELL_X_COS_L,X
003CA5r 1  8D rr rr         STA CAMERA_CENTER_XL
003CA8r 1  AD rr rr         LDA CAMERA_CENTER_XH
003CABr 1  FD rr rr         SBC SUBCELL_X_COS_H,X
003CAEr 1  8D rr rr         STA CAMERA_CENTER_XH
003CB1r 1  18               CLC
003CB2r 1  AD rr rr         LDA CAMERA_CENTER_YL
003CB5r 1  7D rr rr         ADC SUBCELL_Y_SIN_L,X
003CB8r 1  8D rr rr         STA CAMERA_CENTER_YL
003CBBr 1  AD rr rr         LDA CAMERA_CENTER_TOP_PX
003CBEr 1  7D rr rr         ADC SUBCELL_Y_SIN_H,X
003CC1r 1  8D rr rr         STA CAMERA_CENTER_TOP_PX
003CC4r 1  88               DEY
003CC5r 1  D0 D7            BNE :-
003CC7r 1                 :
003CC7r 1               
003CC7r 1  AD rr rr         LDA camera_cell_yl
003CCAr 1  4A               LSR ;   /2
003CCBr 1  4A               LSR ;   /4
003CCCr 1  4A               LSR ;   /8
003CCDr 1  4A               LSR ;   /16
003CCEr 1  38               SEC
003CCFr 1  E9 08            SBC #8 ;   subtract le middle..
003CD1r 1  A8               TAY
003CD2r 1  B0 29            BCS :++    ;  is positive..
003CD4r 1  18             : CLC
003CD5r 1  AD rr rr         LDA CAMERA_CENTER_XL
003CD8r 1  7D rr rr         ADC SUBCELL_X_SIN_L,X
003CDBr 1  8D rr rr         STA CAMERA_CENTER_XL
003CDEr 1  AD rr rr         LDA CAMERA_CENTER_XH
003CE1r 1  7D rr rr         ADC SUBCELL_X_SIN_H,X
003CE4r 1  8D rr rr         STA CAMERA_CENTER_XH
003CE7r 1  18               CLC
003CE8r 1  AD rr rr         LDA CAMERA_CENTER_YL
003CEBr 1  7D rr rr         ADC SUBCELL_Y_COS_L,X
003CEEr 1  8D rr rr         STA CAMERA_CENTER_YL
003CF1r 1  AD rr rr         LDA CAMERA_CENTER_TOP_PX
003CF4r 1  7D rr rr         ADC SUBCELL_Y_COS_H,X
003CF7r 1  8D rr rr         STA CAMERA_CENTER_TOP_PX
003CFAr 1  C8               INY
003CFBr 1  D0 D7            BNE :-
003CFDr 1  F0 29          : BEQ :++
003CFFr 1  38             : SEC
003D00r 1  AD rr rr         LDA CAMERA_CENTER_XL
003D03r 1  FD rr rr         SBC SUBCELL_X_SIN_L,X
003D06r 1  8D rr rr         STA CAMERA_CENTER_XL
003D09r 1  AD rr rr         LDA CAMERA_CENTER_XH
003D0Cr 1  FD rr rr         SBC SUBCELL_X_SIN_H,X
003D0Fr 1  8D rr rr         STA CAMERA_CENTER_XH
003D12r 1               
003D12r 1  38               SEC
003D13r 1  AD rr rr         LDA CAMERA_CENTER_YL
003D16r 1  FD rr rr         SBC SUBCELL_Y_COS_L,X
003D19r 1  8D rr rr         STA CAMERA_CENTER_YL
003D1Cr 1  AD rr rr         LDA CAMERA_CENTER_TOP_PX
003D1Fr 1  FD rr rr         SBC SUBCELL_Y_COS_H,X
003D22r 1  8D rr rr         STA CAMERA_CENTER_TOP_PX
003D25r 1  88               DEY
003D26r 1  D0 D7            BNE :-
003D28r 1                 :
003D28r 1                  ;  set up tub pointer .. this will let us grab the height value for current location..
003D28r 1  64 7E            STZ $7E
003D2Ar 1  AD rr rr         LDA camera_cell_y
003D2Dr 1  4A               LSR  ;  y pages of 128
003D2Er 1  66 7E            ROR $7E
003D30r 1  4A               LSR  ; y pages of 64 !
003D31r 1  66 7E            ROR $7E
003D33r 1  69 rr            ADC #>TUB_WORLD
003D35r 1  85 7F            STA $7F
003D37r 1  8D rr rr         STA CAMERA_CELL_LINE_PTR+1
003D3Ar 1  A5 7E            LDA $7E
003D3Cr 1  8D rr rr         STA CAMERA_CELL_LINE_PTR
003D3Fr 1               
003D3Fr 1  AC rr rr         LDY camera_cell_x
003D42r 1  B1 7E            LDA ($7E),y
003D44r 1  C9 56            CMP #86 ; is largest value we will allow .. accounts for tub heights..
003D46r 1  90 02            BCC :+
003D48r 1  A9 56            LDA #86    ;
003D4Ar 1  A8              : TAY
003D4Br 1               
003D4Br 1  18              CLC
003D4Cr 1  AD rr rr        LDA CAMERA_CENTER_YL
003D4Fr 1  79 rr rr        ADC CONVERT_HEIGHTS_PIXELS_L,Y
003D52r 1  8D rr rr        STA CAMERA_CENTER_YL
003D55r 1  AD rr rr        LDA CAMERA_CENTER_TOP_PX
003D58r 1  79 rr rr        ADC CONVERT_HEIGHTS_PIXELS,Y
003D5Br 1  8D rr rr        STA CAMERA_CENTER_YH
003D5Er 1               
003D5Er 1  18              CLC
003D5Fr 1  A9 78           LDA #SCREEN_OUT_BOTTOM
003D61r 1  79 rr rr        ADC CONVERT_HEIGHTS_PIXELS,Y
003D64r 1  8D rr rr        STA camera_screen_out_bottom
003D67r 1               
003D67r 1                  ; if something is higher than us it would be (52-CONVERT_HEIGHTS_PIXELS,Y)
003D67r 1                  ; so true effective top of screen check to account for that would be ...
003D67r 1                  ; SCREEN_OUT_TOP - (52 - CONVERT_HEIGHTS_PIXELS,Y)
003D67r 1                  ; screen out top - 52 + CONVERT_HEIGHTS_PIXELS,Y
003D67r 1                  ; ok so if we are as high as we can be, then something at farthest Z visible Z
003D67r 1                  ; or s this constant??? should it even be attempted to add to world data?
003D67r 1  38              SEC
003D68r 1  AD rr rr        LDA CAMERA_CENTER_TOP_PX
003D6Br 1  E9 80           SBC #16+60+52 ;-16 is top out.. 60 to mid screen, then max diff in height from there.. so if was middle screen 60 now its -68
003D6Dr 1  8D rr rr        STA camera_screen_out_top
003D70r 1               
003D70r 1                  ; clear the object list ...
003D70r 1  38               SEC
003D71r 1  A9 80            LDA #128
003D73r 1  ED rr rr         SBC NUM_RESERVED_SPRITES
003D76r 1  8D rr rr         STA NUM_AVAIL_SPRITES
003D79r 1               
003D79r 1  9C rr rr         STZ OBJECT_LIST_BYTE6_NEXT ; because we can't use zero anyway..
003D7Cr 1  A9 08            LDA #$08 ; is basis for all the z_flips <- this may change depending on orientation..
003D7Er 1  A2 00            LDX #0
003D80r 1  9E rr rr         : STZ OBJECT_LIST_Z_START_POINTERS,X
003D83r 1  9E rr rr           STZ OBJECT_LIST_BYTE1_MODE,X          ; 16 color / low address
003D86r 1  9C rr rr           STZ OBJECT_LIST_BYTE2_X
003D89r 1  9D rr rr           STA OBJECT_LIST_BYTE4_ZFLIPS,X
003D8Cr 1  9D rr rr           STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
003D8Fr 1  E8                 INX
003D90r 1  D0 EE              BNE :-
003D92r 1               
003D92r 1  A9 D0            LDA #SPRITE_SIZE_ORA
003D94r 1  9D rr rr         : STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
003D97r 1  E8                 INX
003D98r 1  D0 FA              BNE :-
003D9Ar 1  AD rr rr         LDA WORLD_SPRITE_NUM
003D9Dr 1  9D rr rr         : STA OBJECT_LIST_BYTE0_ADDRLOW,X ; 01.3456 done .
003DA0r 1  E8                 INX
003DA1r 1  D0 FA              BNE :-
003DA3r 1               
003DA3r 1               
003DA3r 1  20 rr rr       jsr push_world_to_object_list
003DA6r 1               
003DA6r 1               ;        A        B     CURRENT BITMAP BUFFER
003DA6r 1               ;   0   display  dirty    A is being displayed, B to be drawn on
003DA6r 1               ;  64   display  ready    B  is ready for swap
003DA6r 1               ; 128   dirty    display  B is being displayed, A to be drawn on
003DA6r 1               ; 192   ready    display  A  is ready for swap
003DA6r 1               
003DA6r 1               ; OK so we want bit 6 (64) to be set
003DA6r 1  80 01           BRA :++
003DA8r 1  CB           :  wai
003DA9r 1  AD rr rr     :  LDA CURRENT_BITMAP_BUFFER
003DACr 1  29 40           AND #64
003DAEr 1  D0 F8           BNE :--
003DB0r 1  9C rr rr        STZ VERA_LOCK ; ok gotta lock the VERA...
003DB3r 1  A9 D1           LDA #$D1
003DB5r 1  8D rr rr        STA OBJECT_LIST_BYTE5_SIZE+1
003DB8r 1               
003DB8r 1  20 rr rr        jsr draw_object_list
003DBBr 1               
003DBBr 1               @WRITE_DEBUG:
003DBBr 1  9C 25 9F        STZ VERA_ctrl
003DBEr 1  A9 2A           LDA #42;+64
003DC0r 1  8D 20 9F        STA VERA_addr_low
003DC3r 1  A9 E4           LDA #>VRAM_TEXT_SCREEN
003DC5r 1  8D 21 9F        STA VERA_addr_high
003DC8r 1  A9 21           LDA #$21
003DCAr 1  8D 22 9F        STA VERA_addr_bank
003DCDr 1  A0 00           LDY #0
003DCFr 1  BE rr rr      : LDX GLOBAL_DATA,Y
003DD2r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X ; 1
003DD5r 1  8D 23 9F        STA VERA_data0
003DD8r 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X  ; 2
003DDBr 1  8D 23 9F        STA VERA_data0
003DDEr 1  C8              INY
003DDFr 1  BE rr rr        LDX GLOBAL_DATA,Y
003DE2r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X   ;  3
003DE5r 1  8D 23 9F        STA VERA_data0
003DE8r 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X    ;  4
003DEBr 1  8D 23 9F        STA VERA_data0
003DEEr 1  C8              INY
003DEFr 1  AD 23 9F        LDA VERA_data0             ;  5
003DF2r 1  AD 20 9F        LDA VERA_addr_low
003DF5r 1  BE rr rr        LDX GLOBAL_DATA,Y
003DF8r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X   ;  6
003DFBr 1  8D 23 9F        STA VERA_data0
003DFEr 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X    ;  7
003E01r 1  8D 23 9F        STA VERA_data0
003E04r 1  C8              INY
003E05r 1  BE rr rr        LDX GLOBAL_DATA,Y
003E08r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X   ;  8
003E0Br 1  8D 23 9F        STA VERA_data0
003E0Er 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X    ;  9
003E11r 1  8D 23 9F        STA VERA_data0
003E14r 1  C8              INY
003E15r 1  18              CLC
003E16r 1  AD 20 9F        LDA VERA_addr_low          ;  moved 18 out of 64 bytes...
003E19r 1  69 2E           ADC #64-18
003E1Br 1  8D 20 9F        STA VERA_addr_low
003E1Er 1  90 03           BCC :+
003E20r 1  EE 21 9F        INC VERA_addr_high
003E23r 1  C0 32         : CPY #ENDGLOBALS-GLOBAL_DATA  ;
003E25r 1  90 A8           BCC :--
003E27r 1               
003E27r 1  18              CLC
003E28r 1  AD rr rr        LDA CURRENT_BITMAP_BUFFER
003E2Br 1  69 40           ADC #64
003E2Dr 1  8D rr rr        STA CURRENT_BITMAP_BUFFER
003E30r 1               
003E30r 1  A9 FF           LDA #$FF ; time to unlock the VERA ..
003E32r 1  8D rr rr        STA VERA_LOCK
003E35r 1               
003E35r 1               ;   rts
003E35r 1               
003E35r 1               @FRAME_CHECK:
003E35r 1  AD rr rr        LDA STALL_COUNTERH
003E38r 1  8D rr rr        STA LAST_STALLCOUNTERH
003E3Br 1  AD rr rr        LDA STALL_COUNTER
003E3Er 1  8D rr rr        STA LAST_STALLCOUNTER
003E41r 1  A2 FF           LDX #255
003E43r 1  A0 FF           LDY #255
003E45r 1  AD rr rr        LDA VSYNC_counter
003E48r 1  8D rr rr        STA LAST_VSYNC_COUNTER
003E4Br 1               ;   BNE :+++
003E4Br 1  9C rr rr        STZ VSYNC_counter
003E4Er 1  E8           :  INX                     ;  2 cycles    8
003E4Fr 1  D0 01           BNE :+                  ;  ~3 cycles   11 or 10 if drop through
003E51r 1  C8              INY                     ; 2            11/12
003E52r 1               :  ;wai   disables the busy wait..
003E52r 1  AD rr rr        lda VSYNC_counter       ;  4  cyles    15/16
003E55r 1  F0 F7           BEQ :--                ;  3  cycles     18/19   so 1 full of X = ~4,607 cycles .. count would go to ~7,407 for full frame.. or ~ $1C,$F0
003E57r 1               ;:
003E57r 1  9C rr rr        STZ VSYNC_counter
003E5Ar 1  8E rr rr        STX STALL_COUNTER
003E5Dr 1  8C rr rr        STY STALL_COUNTERH
003E60r 1  AD rr rr        LDA MASTER_CLOCK
003E63r 1  1A              INC A
003E64r 1  18              CLC
003E65r 1  6D rr rr        ADC LAST_VSYNC_COUNTER
003E68r 1  8D rr rr        STA MASTER_CLOCK
003E6Br 1  D0 03           BNE :+
003E6Dr 1  EE rr rr        INC MASTER_CLOCK+1
003E70r 1               :
003E70r 1               ;   AND #1 ; restrict to 30 fps.. don't care missed cycle.
003E70r 1               ;   BEQ :+
003E70r 1               ;   JMP @WRITE_DEBUG
003E70r 1                  ; poll keyboard for input
003E70r 1               ; :
003E70r 1  20 E4 FF        jsr GETIN
003E73r 1  C9 00           cmp #0
003E75r 1  D0 03           BNE :+
003E77r 1  4C rr rr        JMP @do_update
003E7Ar 1  C9 0D         : CMP #RETURN
003E7Cr 1  D0 03           BNE :+
003E7Er 1  4C rr rr        JMP @cleanup_and_exit
003E81r 1  C9 1D         : cmp #$1D 	;	cursor right
003E83r 1  D0 06           BNE :+
003E85r 1  EE rr rr        INC camera_facing
003E88r 1  4C rr rr        JMP @do_update
003E8Br 1                  :
003E8Br 1  C9 9D           cmp  #$9D 	;	cursor left
003E8Dr 1  D0 06           BNE :+
003E8Fr 1  CE rr rr        DEC camera_facing
003E92r 1  4C rr rr        JMP @do_update
003E95r 1  C9 11         : cmp #$11; cursor down
003E97r 1  D0 2C           BNE :+
003E99r 1  AE rr rr        LDX camera_facing
003E9Cr 1  38              SEC
003E9Dr 1  AD rr rr        LDA camera_world_pos_XL
003EA0r 1  FD rr rr        SBC MOVE_X_L,X
003EA3r 1  8D rr rr        STA camera_world_pos_XL
003EA6r 1  AD rr rr        LDA camera_world_pos_XH
003EA9r 1  FD rr rr        SBC MOVE_X_H,X
003EACr 1  8D rr rr        STA camera_world_pos_XH
003EAFr 1  18              CLC
003EB0r 1  AD rr rr        LDA camera_world_pos_YL
003EB3r 1  7D rr rr        ADC MOVE_Y_L,X
003EB6r 1  8D rr rr        STA camera_world_pos_YL
003EB9r 1  AD rr rr        LDA camera_world_pos_YH
003EBCr 1  7D rr rr        ADC MOVE_Y_H,X
003EBFr 1  8D rr rr        STA camera_world_pos_YH
003EC2r 1  4C rr rr        jmp @camera_world_changed
003EC5r 1               
003EC5r 1  C9 91         : cmp #$91 ; cursor up
003EC7r 1  D0 2C           BNE :+
003EC9r 1  AE rr rr        LDX camera_facing
003ECCr 1  18              CLC
003ECDr 1  AD rr rr        LDA camera_world_pos_XL
003ED0r 1  7D rr rr        ADC MOVE_X_L,X
003ED3r 1  8D rr rr        STA camera_world_pos_XL
003ED6r 1  AD rr rr        LDa camera_world_pos_XH
003ED9r 1  7D rr rr        ADC MOVE_X_H,X
003EDCr 1  8D rr rr        STA camera_world_pos_XH
003EDFr 1  38              SEC
003EE0r 1  AD rr rr        LDA camera_world_pos_YL
003EE3r 1  FD rr rr        SBC MOVE_Y_L,X
003EE6r 1  8D rr rr        STA camera_world_pos_YL
003EE9r 1  AD rr rr        LDA camera_world_pos_YH
003EECr 1  FD rr rr        SBC MOVE_Y_H,X
003EEFr 1  8D rr rr        STA camera_world_pos_YH
003EF2r 1  4C rr rr        jmp @camera_world_changed
003EF5r 1               
003EF5r 1  C9 45         : cmp  #E_CHAR ; cell up right
003EF7r 1  D0 15           BNE :+++
003EF9r 1  AD rr rr        LDA camera_cell_y
003EFCr 1  F0 03           BEQ :+
003EFEr 1  CE rr rr        DEC camera_cell_y
003F01r 1  AD rr rr      : LDA camera_cell_x
003F04r 1  C9 3F           CMP #63
003F06r 1  B0 03           BCS :+
003F08r 1  EE rr rr        INC camera_cell_x
003F0Br 1  4C rr rr      : JMP @camera_cell_changed
003F0Er 1               
003F0Er 1  C9 57         : cmp #W_CHAR ; cell up left
003F10r 1  D0 0B           BNE :++
003F12r 1  AD rr rr        LDA camera_cell_y
003F15r 1  F0 03           BEQ :+
003F17r 1  CE rr rr        DEC camera_cell_y
003F1Ar 1  4C rr rr      : JMP @camera_cell_changed
003F1Dr 1               
003F1Dr 1  C9 41         : cmp #A_CHAR ; cell left
003F1Fr 1  D0 0B           BNE :++
003F21r 1  AD rr rr        LDA camera_cell_x
003F24r 1  F0 03           BEQ :+
003F26r 1  CE rr rr        DEC camera_cell_x
003F29r 1  4C rr rr      : JMP @camera_cell_changed
003F2Cr 1               
003F2Cr 1  C9 44         : cmp #D_CHAR ; cell right
003F2Er 1  D0 0D           BNE :++
003F30r 1  AD rr rr        LDA camera_cell_x
003F33r 1  C9 3F           CMP #63
003F35r 1  B0 03           BCS :+
003F37r 1  EE rr rr        INC camera_cell_x
003F3Ar 1  4C rr rr      : JMP @camera_cell_changed
003F3Dr 1               
003F3Dr 1  C9 58         : cmp #X_CHAR ; cell down right
003F3Fr 1  D0 0D           BNE :++
003F41r 1  AD rr rr        LDA camera_cell_y
003F44r 1  C9 1E           CMP #30
003F46r 1  B0 03           BCS :+
003F48r 1  EE rr rr        INC camera_cell_y
003F4Br 1  4C rr rr      : JMP @camera_cell_changed
003F4Er 1               
003F4Er 1  C9 5A         : cmp  #Z_CHAR ; cell down left
003F50r 1  D0 15           BNE :+++
003F52r 1  AD rr rr        LDA camera_cell_y
003F55r 1  C9 1E           CMP #30
003F57r 1  B0 03           BCS :+
003F59r 1  EE rr rr        INC camera_cell_y
003F5Cr 1  AD rr rr      : LDA camera_cell_x
003F5Fr 1  F0 03           BEQ :+
003F61r 1  CE rr rr        DEC camera_cell_x
003F64r 1  4C rr rr      : JMP @camera_cell_changed
003F67r 1               
003F67r 1  C9 20         : cmp #SPACE;
003F69r 1  D0 09           BNE :+
003F6Br 1  9C rr rr        STZ camera_cell_xl
003F6Er 1  9C rr rr        STZ camera_cell_yl
003F71r 1  4C rr rr        JMP @camera_cell_changed
003F74r 1               
003F74r 1  C9 49         : cmp #I_CHAR ; cell y - 1/16
003F76r 1  D0 25           BNE :++
003F78r 1  38              SEC
003F79r 1  AD rr rr        LDA camera_cell_yl
003F7Cr 1  E9 10           SBC #16
003F7Er 1  8D rr rr        STA camera_cell_yl
003F81r 1  B0 17           BCS :+
003F83r 1  AD rr rr        LDA camera_cell_y
003F86r 1  F0 12           BEQ :+
003F88r 1  3A              DEC A
003F89r 1  8D rr rr        STA camera_cell_y
003F8Cr 1  18              CLC
003F8Dr 1  AD rr rr        LDA camera_cell_xl
003F90r 1  69 80           ADC #128
003F92r 1  8D rr rr        STA camera_cell_xl
003F95r 1  90 03           BCC :+
003F97r 1  EE rr rr        INC camera_cell_x
003F9Ar 1  4C rr rr      : JMP @camera_cell_changed
003F9Dr 1               
003F9Dr 1  C9 4A         : cmp #J_CHAR ; cell x - 1/16
003F9Fr 1  D0 17           BNE :++
003FA1r 1  38              SEC
003FA2r 1  AD rr rr        LDA camera_cell_xl
003FA5r 1  E9 10           SBC #16
003FA7r 1  8D rr rr        STA camera_cell_xl
003FAAr 1  B0 09           BCS :+
003FACr 1  AD rr rr        LDA camera_cell_x
003FAFr 1  F0 04           BEQ :+
003FB1r 1  3A              DEC A
003FB2r 1  8D rr rr        STA camera_cell_x
003FB5r 1  4C rr rr      : JMP @camera_cell_changed
003FB8r 1               
003FB8r 1  C9 4B         : cmp #K_CHAR ; cell y + 1/16
003FBAr 1  D0 27           BNE :++
003FBCr 1  18              CLC
003FBDr 1  AD rr rr        LDA camera_cell_yl
003FC0r 1  69 10           ADC #16
003FC2r 1  8D rr rr        STA camera_cell_yl
003FC5r 1  90 19           BCC :+
003FC7r 1  AD rr rr        LDA camera_cell_y
003FCAr 1  C9 1F           CMP #31
003FCCr 1  B0 12           BCS :+
003FCEr 1  1A              INC A
003FCFr 1  8D rr rr        STA camera_cell_y
003FD2r 1  38              SEC
003FD3r 1  AD rr rr        LDA camera_cell_xl
003FD6r 1  E9 80           SBC #128
003FD8r 1  8D rr rr        STA camera_cell_xl
003FDBr 1  B0 03           BCS :+
003FDDr 1  CE rr rr        DEC camera_cell_x
003FE0r 1  4C rr rr      : JMP @camera_cell_changed
003FE3r 1               
003FE3r 1  C9 4C         : cmp #L_CHAR ; cell x + 1/16
003FE5r 1  D0 11           BNE :++
003FE7r 1  18              CLC
003FE8r 1  AD rr rr        LDA camera_cell_xl
003FEBr 1  69 10           ADC #16
003FEDr 1  8D rr rr        STA camera_cell_xl
003FF0r 1  90 03           BCC :+
003FF2r 1  EE rr rr        INC camera_cell_x
003FF5r 1  4C rr rr      : JMP @camera_cell_changed
003FF8r 1               
003FF8r 1  C9 31         : CMP #ONE_CHAR
003FFAr 1  D0 08           BNE :+
003FFCr 1  AD 29 9F        LDA VERA_dc_video
003FFFr 1  49 20           EOR #%00100000
004001r 1  8D 29 9F        STA VERA_dc_video
004004r 1               
004004r 1  C9 32         : CMP #TWO_CHAR
004006r 1  D0 08           BNE :+
004008r 1  AD 29 9F        LDA VERA_dc_video
00400Br 1  49 40           EOR #%01000000
00400Dr 1  8D 29 9F        STA VERA_dc_video
004010r 1               
004010r 1  C9 33         : CMP #THREE_CHAR
004012r 1  D0 08           BNE :+
004014r 1  AD 29 9F        LDA VERA_dc_video
004017r 1  49 10           EOR #%00010000
004019r 1  8D 29 9F        STA VERA_dc_video
00401Cr 1               
00401Cr 1  C9 30         : CMP #ZERO_CHAR
00401Er 1  D0 13           BNE :+++
004020r 1  AD 2A 9F        LDA VERA_dc_hscale
004023r 1  C9 2B           CMP #43
004025r 1  B0 04           BCS :+
004027r 1  A9 33           LDA #51 ; #51 ; 51 is 255
004029r 1  80 02           BRA :++
00402Br 1  A9 20         : LDA #32
00402Dr 1  8D 2A 9F      : STA VERA_dc_hscale
004030r 1  8D 2B 9F        STA VERA_dc_vscale
004033r 1               
004033r 1  C9 39         : CMP #NINE_CHAR
004035r 1  D0 08           BNE :+
004037r 1  AD rr rr        LDA SPRITE_OBJECT_ENABLE
00403Ar 1  49 FF           EOR #$FF
00403Cr 1  8D rr rr        STA SPRITE_OBJECT_ENABLE
00403Fr 1               
00403Fr 1  4C rr rr      : JMP @do_update
004042r 1               
004042r 1               @cleanup_and_exit:
004042r 1                  ; restore default IRQ vector
004042r 1  78              sei
004043r 1  AD rr rr        lda default_irq_vector
004046r 1  8D 14 03        sta IRQVec
004049r 1  AD rr rr        lda default_irq_vector+1
00404Cr 1  8D 15 03        sta IRQVec+1
00404Fr 1  58              cli
004050r 1  20 81 FF        jsr CINT
004053r 1  60              rts
004054r 1               
004054r 1               
004054r 1               ; CURRENT
004054r 1               push_world_to_object_list: ; as in.. let's try this again?? wait.. missing a STZ ZP_PTR...
004054r 1               PWOL_TUB_PTR_AL   = ZP_PTR
004054r 1               PWOL_TUB_PTR_AH   = ZP_PTR+1
004054r 1               PWOL_TUB_PTR_BL   = ZP_PTR+2
004054r 1               PWOL_TUB_PTR_BH   = ZP_PTR+3
004054r 1               PWOL_CURRENT_XL   = ZP_PTR+4
004054r 1               PWOL_CURRENT_XH   = ZP_PTR+5
004054r 1               PWOL_CURRENT_YL   = ZP_PTR+6
004054r 1               PWOL_CURRENT_YH   = ZP_PTR+7
004054r 1               PWOL_ACROSS_ROW_XL= ZP_PTR+8
004054r 1               PWOL_ACROSS_ROW_XH= ZP_PTR+9
004054r 1               PWOL_ACROSS_ROW_YL= ZP_PTR+10
004054r 1               PWOL_ACROSS_ROW_YH= ZP_PTR+11
004054r 1               PWOL_NEXT_ROW_A_LEFT_XL  = ZP_PTR+12
004054r 1               PWOL_NEXT_ROW_A_LEFT_XH  = ZP_PTR+13
004054r 1               PWOL_NEXT_ROW_A_LEFT_YL  = ZP_PTR+14
004054r 1               PWOL_NEXT_ROW_A_LEFT_YH  = ZP_PTR+15
004054r 1               PWOL_NEXT_ROW_A_RIGHT_XL  = ZP_PTR+16
004054r 1               PWOL_NEXT_ROW_A_RIGHT_XH  = ZP_PTR+17
004054r 1               PWOL_NEXT_ROW_A_RIGHT_YL  = ZP_PTR+18
004054r 1               PWOL_NEXT_ROW_A_RIGHT_YH  = ZP_PTR+19
004054r 1               PWOL_NEXT_ROW_B_LEFT_XL  = ZP_PTR+20
004054r 1               PWOL_NEXT_ROW_B_LEFT_XH  = ZP_PTR+21
004054r 1               PWOL_NEXT_ROW_B_LEFT_YL  = ZP_PTR+22
004054r 1               PWOL_NEXT_ROW_B_LEFT_YH  = ZP_PTR+23
004054r 1               PWOL_NEXT_ROW_B_RIGHT_XL  = ZP_PTR+24
004054r 1               PWOL_NEXT_ROW_B_RIGHT_XH  = ZP_PTR+25
004054r 1               PWOL_NEXT_ROW_B_RIGHT_YL  = ZP_PTR+26
004054r 1               PWOL_NEXT_ROW_B_RIGHT_YH  = ZP_PTR+27
004054r 1               PWOL_Z_STARTS_PTR = ZP_PTR+28
004054r 1               PWOL_Z_STARTS_PTRH = ZP_PTR+29
004054r 1               PWOL_CONVERT_HEIGHTS = ZP_PTR+30
004054r 1               PWOL_CONVERT_HEIGHTSH= ZP_PTR+31
004054r 1               PWOL_CONVERT_HEIGHTS_L = ZP_PTR+32
004054r 1               PWOL_CONVERT_HEIGHTS_LH = ZP_PTR+33
004054r 1               PWOL_TRIES_COUNTER = ZP_PTR+34
004054r 1               PWOL_START_XL = ZP_PTR+35
004054r 1               PWOL_START_YL = ZP_PTR+36
004054r 1               PWOL_START_XH = ZP_PTR+37
004054r 1               PWOL_START_YH = ZP_PTR+38
004054r 1               
004054r 1               PWOL_START_COS_XL = ZP_PTR+39
004054r 1               PWOL_START_COS_XH = ZP_PTR+40
004054r 1               PWOL_START_COS_YL = ZP_PTR+41
004054r 1               PWOL_START_COS_YH = ZP_PTR+42
004054r 1               PWOL_START_SIN_XL = ZP_PTR+43
004054r 1               PWOL_START_SIN_XH = ZP_PTR+44
004054r 1               PWOL_START_SIN_YL = ZP_PTR+45
004054r 1               PWOL_START_SIN_YH = ZP_PTR+46
004054r 1               
004054r 1               PWOL_camera_cell_xl = ZP_PTR+47
004054r 1               PWOL_camera_cell_yl = ZP_PTR+48
004054r 1               PWOL_CENTER_Y  =  ZP_PTR+49
004054r 1               PWOL_CENTER_Y_TOP     =  ZP_PTR+50
004054r 1               
004054r 1               PWOL_TOP_CHECK = ZP_PTR+51
004054r 1               PWOL_BOT_CHECK = ZP_PTR+52
004054r 1               
004054r 1               TRY_AGAIN = 6
004054r 1  AD rr rr        LDA camera_screen_out_top
004057r 1  85 55           STA PWOL_TOP_CHECK
004059r 1  AD rr rr        LDA camera_screen_out_bottom
00405Cr 1  85 56           STA PWOL_BOT_CHECK
00405Er 1               
00405Er 1  AD rr rr        LDA CAMERA_CENTER_YH
004061r 1  1A              INC A
004062r 1  85 53           STA PWOL_CENTER_Y
004064r 1  AD rr rr        LDA CAMERA_CENTER_TOP_PX
004067r 1  18              CLC
004068r 1  69 0A           ADC #10
00406Ar 1  85 54           STA PWOL_CENTER_Y_TOP
00406Cr 1               
00406Cr 1               
00406Cr 1  A9 rr           LDA #>CONVERT_HEIGHTS_PIXELS
00406Er 1  85 41           STA PWOL_CONVERT_HEIGHTSH
004070r 1  A9 rr           LDA #>CONVERT_HEIGHTS_PIXELS_L
004072r 1  85 43           STA PWOL_CONVERT_HEIGHTS_LH
004074r 1               
004074r 1  A9 rr           LDA #>OBJECT_LIST_Z_START_POINTERS
004076r 1  85 3F           STA PWOL_Z_STARTS_PTRH
004078r 1               
004078r 1  AE rr rr        LDX camera_facing
00407Br 1  BD rr rr        LDA ACROSS_ROW_X_L,x    ; 0900  16 wide , 45* tilt ... this is added to go up row, sub for down row
00407Er 1  85 2A           STA PWOL_ACROSS_ROW_XL
004080r 1  BD rr rr        LDA ACROSS_ROW_X_H,x
004083r 1  85 2B           STA PWOL_ACROSS_ROW_XH
004085r 1               
004085r 1  BD rr rr        LDA ACROSS_ROW_Y_L,x
004088r 1  85 2C           STA PWOL_ACROSS_ROW_YL
00408Ar 1  BD rr rr        LDA ACROSS_ROW_Y_H,x
00408Dr 1  85 2D           STA PWOL_ACROSS_ROW_YH
00408Fr 1               
00408Fr 1  18              CLC
004090r 1  BD rr rr        LDA NEXT_ROW_X_L,X  ; 0D00 next row LEFT/up when added
004093r 1  85 2E           STA PWOL_NEXT_ROW_A_LEFT_XL   ; -> next row is left, going up the screen ..  -1,-1
004095r 1  65 2A           ADC PWOL_ACROSS_ROW_XL   ; across row is for right , subtract to go left  +1 -> 0,1
004097r 1  85 32           STA PWOL_NEXT_ROW_A_RIGHT_XL  ;  -> next row is right, going up the screen .. -1,-1
004099r 1  BD rr rr        LDA NEXT_ROW_X_H,x
00409Cr 1  85 2F           STA PWOL_NEXT_ROW_A_LEFT_XH
00409Er 1  65 2B           ADC PWOL_ACROSS_ROW_XH
0040A0r 1  85 33           STA PWOL_NEXT_ROW_A_RIGHT_XH
0040A2r 1               
0040A2r 1  18              CLC
0040A3r 1  BD rr rr        LDA NEXT_ROW_Y_L,X  ; 0F00 next row LEFT/up when added
0040A6r 1  85 30           STA PWOL_NEXT_ROW_A_LEFT_YL   ; -> next row is left, going up the screen
0040A8r 1  65 2C           ADC PWOL_ACROSS_ROW_YL   ; across row is for right
0040AAr 1  85 34           STA PWOL_NEXT_ROW_A_RIGHT_YL  ;  -> next row is right, going up the screen
0040ACr 1  BD rr rr        LDA NEXT_ROW_Y_H,x
0040AFr 1  85 31           STA PWOL_NEXT_ROW_A_LEFT_YH
0040B1r 1  65 2D           ADC PWOL_ACROSS_ROW_YH
0040B3r 1  85 35           STA PWOL_NEXT_ROW_A_RIGHT_YH
0040B5r 1               
0040B5r 1               
0040B5r 1               ; for zig B , the opposite of left/up is right/down.. so A_LEFT * -1 = B_RIGHT
0040B5r 1  38              SEC ; flip A_LEFT X to B_RIGHT X
0040B6r 1  A9 00           LDA #0
0040B8r 1  E5 2E           SBC PWOL_NEXT_ROW_A_LEFT_XL
0040BAr 1  85 3A           STA PWOL_NEXT_ROW_B_RIGHT_XL
0040BCr 1  A9 00           LDA #0
0040BEr 1  E5 2F           SBC PWOL_NEXT_ROW_A_LEFT_XH
0040C0r 1  85 3B           STA PWOL_NEXT_ROW_B_RIGHT_XH
0040C2r 1               
0040C2r 1  38              SEC ; flip A_LEFT Y to B_RIGHT Y
0040C3r 1  A9 00           LDA #0
0040C5r 1  E5 30           SBC PWOL_NEXT_ROW_A_LEFT_YL
0040C7r 1  85 3C           STA PWOL_NEXT_ROW_B_RIGHT_YL
0040C9r 1  A9 00           LDA #0
0040CBr 1  E5 31           SBC PWOL_NEXT_ROW_A_LEFT_YH
0040CDr 1  85 3D           STA PWOL_NEXT_ROW_B_RIGHT_YH
0040CFr 1               
0040CFr 1  38              SEC ; flip A_RIGHT X to B_LEFT X
0040D0r 1  A9 00           LDA #0
0040D2r 1  E5 32           SBC PWOL_NEXT_ROW_A_RIGHT_XL
0040D4r 1  85 36           STA PWOL_NEXT_ROW_B_LEFT_XL
0040D6r 1  A9 00           LDA #0
0040D8r 1  E5 33           SBC PWOL_NEXT_ROW_A_RIGHT_XH
0040DAr 1  85 37           STA PWOL_NEXT_ROW_B_LEFT_XH
0040DCr 1               
0040DCr 1  38              SEC ; flip A_RIGHT Y to B_LEFT Y
0040DDr 1  A9 00           LDA #0
0040DFr 1  E5 34           SBC PWOL_NEXT_ROW_A_RIGHT_YL
0040E1r 1  85 38           STA PWOL_NEXT_ROW_B_LEFT_YL
0040E3r 1  A9 00           LDA #0
0040E5r 1  E5 35           SBC PWOL_NEXT_ROW_A_RIGHT_YH
0040E7r 1  85 39           STA PWOL_NEXT_ROW_B_LEFT_YH
0040E9r 1               
0040E9r 1  AD rr rr        LDA CAMERA_CENTER_XL
0040ECr 1  85 26            STA PWOL_CURRENT_XL
0040EEr 1  85 45            STA PWOL_START_XL
0040F0r 1               
0040F0r 1  AD rr rr        LDA CAMERA_CENTER_YL
0040F3r 1  85 28            STA PWOL_CURRENT_YL
0040F5r 1  85 46            STA PWOL_START_YL
0040F7r 1               
0040F7r 1  AD rr rr        LDA CAMERA_CENTER_XH
0040FAr 1  85 27            STA PWOL_CURRENT_XH
0040FCr 1  85 47            STA PWOL_START_XH
0040FEr 1               
0040FEr 1               
0040FEr 1  AD rr rr        LDA CAMERA_CENTER_YH
004101r 1  85 29            STA PWOL_CURRENT_YH
004103r 1  85 48            STA PWOL_START_YH
004105r 1               
004105r 1  AD rr rr         LDA CAMERA_CELL_LINE_PTR
004108r 1  85 22            STA PWOL_TUB_PTR_AL
00410Ar 1  85 24            STA PWOL_TUB_PTR_BL
00410Cr 1  AD rr rr         LDA CAMERA_CELL_LINE_PTR+1
00410Fr 1  85 23            STA PWOL_TUB_PTR_AH
004111r 1  85 25            STA PWOL_TUB_PTR_BH
004113r 1               
004113r 1                  ; STZ VERA_ctrl
004113r 1                  ; LDA #<(VRAM_TEXT_SCREEN+17*64)
004113r 1                  ; STA VERA_addr_low
004113r 1                  ; LDA #>(VRAM_TEXT_SCREEN+17*64)
004113r 1                  ; STA VERA_addr_high
004113r 1                  ; LDA #$21
004113r 1                  ; STA VERA_addr_bank
004113r 1                  ; LDA #26
004113r 1                  ; STA VERA_data0
004113r 1               
004113r 1                 @zigzag_A: ; going to right and up the screen, including where we are currently..
004113r 1  AC rr rr         LDY camera_cell_x
004116r 1  80 00            BRA @zigzag_A_right
004118r 1                  @ZAR_OUT:
004118r 1               
004118r 1                   @zigzag_A_right:
004118r 1  C0 40                CPY #64  ;  make sure we don't go outside level..
00411Ar 1  B0 68                BCS @ZAR_NEXT ; if we're outside we'll just skip is OK here
00411Cr 1  B1 22                LDA (PWOL_TUB_PTR_AL),y
00411Er 1  C9 81                CMP #129
004120r 1  B0 62                BCS @ZAR_NEXT ; this isn't a valid spot in the level map..
004122r 1                       ; bytes 1 and 4 were updated when we cleared the object list
004122r 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
004125r 1  D0 04                BNE :++
004127r 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
00412Ar 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
00412Br 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
00412Dr 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
004130r 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen... (could cause issues if we're high up? can't see behind?)
004132r 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
004134r 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
004136r 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
004139r 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
00413Cr 1  8A                   TXA ; push new next to the Z buffer spot
00413Dr 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
00413Fr 1                       ; bytes .1..4.6 filled in already..
00413Fr 1  B1 22                LDA (PWOL_TUB_PTR_AL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
004141r 1  10 08                BPL @ZAR_INSIDE_TUB
004143r 1                     @ZAR_HIT_WALL_OUCH:
004143r 1  AD rr rr               LDA WORLD_WALL_SPRITE_NUM
004146r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
004149r 1  A9 56                  LDA #86 ; max height..
00414Br 1                     @ZAR_INSIDE_TUB:
00414Br 1  85 40                  STA PWOL_CONVERT_HEIGHTS ;
00414Dr 1  85 42                  STA PWOL_CONVERT_HEIGHTS_L;
00414Fr 1  38                     SEC
004150r 1  A5 28                  LDA PWOL_CURRENT_YL
004152r 1  F2 42                  SBC (PWOL_CONVERT_HEIGHTS_L)
004154r 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
004156r 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
004158r 1  C9 78                  CMP #SCREEN_OUT_BOTTOM    ;  are we even visible?
00415Ar 1  90 0E                  BCC :+
00415Cr 1  C5 55                  CMP PWOL_TOP_CHECK  ;     #SCREEN_OUT_TOP-50 ;PWOL_TOP_CHECK;
00415Er 1  B0 0A                  BCS :+
004160r 1  CE rr rr               DEC OBJECT_LIST_BYTE6_NEXT
004163r 1  BD rr rr               LDA OBJECT_LIST_BYTE6_NEXT,X ; grab the old next value
004166r 1  92 3E                  STA (PWOL_Z_STARTS_PTR) ; patch the old one back in..
004168r 1  80 1A                  BRA @ZAR_NEXT ; and skip THIS
00416Ar 1                       :
00416Ar 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
00416Dr 1  C5 54                  CMP PWOL_CENTER_Y_TOP ; is this above center on screen??
00416Fr 1  B0 0E                  BCS :+ ; is not covering us
004171r 1  A5 29                  LDA PWOL_CURRENT_YH
004173r 1  C5 53                  CMP PWOL_CENTER_Y
004175r 1  90 08                  BCC :+ ; its from ahead of us, OK
004177r 1                         ; it was from below and covers us ..
004177r 1  BD rr rr               LDA OBJECT_LIST_BYTE0_ADDRLOW,X
00417Ar 1  69 0F                  ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
00417Cr 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X
00417Fr 1                         ;LDA #$D0
00417Fr 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
00417Fr 1  A5 27                : LDA PWOL_CURRENT_XH
004181r 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
004184r 1                         ; for debugging ...
004184r 1                     ;    STZ VERA_data0
004184r 1                     ;    STA VERA_data0
004184r 1                     ;    LDA PWOL_CURRENT_YH
004184r 1                     ;    STA VERA_data0
004184r 1                     ;    STZ VERA_data0
004184r 1               
004184r 1                    @ZAR_NEXT:
004184r 1                        ; calc next to the right..
004184r 1  C8                    INY
004185r 1  18                    CLC
004186r 1  A5 26                 LDA PWOL_CURRENT_XL
004188r 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
00418Ar 1  85 26                 STA PWOL_CURRENT_XL
00418Cr 1  A5 27                 LDA PWOL_CURRENT_XH
00418Er 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
004190r 1  85 27                 STA PWOL_CURRENT_XH
004192r 1  AA                    TAX
004193r 1  18                    CLC
004194r 1  A5 28                 LDA PWOL_CURRENT_YL
004196r 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
004198r 1  85 28                 STA PWOL_CURRENT_YL
00419Ar 1  A5 29                 LDA PWOL_CURRENT_YH
00419Cr 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
00419Er 1  85 29                 STA PWOL_CURRENT_YH
0041A0r 1               
0041A0r 1  8E rr rr              STX DEBUG_A
0041A3r 1  8D rr rr              STA DEBUG_B
0041A6r 1               
0041A6r 1  C5 56                 CMP PWOL_BOT_CHECK
0041A8r 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
0041AAr 1  C9 F0                 CMP #SCREEN_OUT_TOP
0041ACr 1  90 0B                 BCC @ZAR_ZIG_LEFT_SWITCH ; its bottom_out <= Y < top out .. because negatives are bigger
0041AEr 1                      :
0041AEr 1  E0 A0                 CPX #SCREEN_OUT_RIGHT ; check against right side
0041B0r 1  90 04                 BCC :+                ; if its within right side then go do next thing..
0041B2r 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
0041B4r 1  90 03                 BCC @ZAR_ZIG_LEFT_SWITCH ; we're to the right of the screen but not far enough to wrap around..
0041B6r 1  4C rr rr            : JMP @zigzag_A_right
0041B9r 1                    @ZAR_ZIG_LEFT_SWITCH: ;PWOL_NEXT_ROW_A_LEFT_XL   ; -> next row is left, going up the screen ..  +0,-1
0041B9r 1  A9 06                 LDA #TRY_AGAIN
0041BBr 1  85 44                 STA PWOL_TRIES_COUNTER
0041BDr 1               ;         INY
0041BDr 1  38                    SEC
0041BEr 1  A5 22                 LDA PWOL_TUB_PTR_AL
0041C0r 1  E9 40                 SBC #64 ;   0,-1
0041C2r 1  85 22                 STA PWOL_TUB_PTR_AL
0041C4r 1  A5 23                 LDA PWOL_TUB_PTR_AH
0041C6r 1  E9 00                 SBC #0
0041C8r 1  C9 rr                 CMP #>TUB_WORLD ; are we inside the world still?
0041CAr 1  B0 03                 BCS :+
0041CCr 1  4C rr rr              JMP @zigzag_B
0041CFr 1  85 23               : STA PWOL_TUB_PTR_AH
0041D1r 1               
0041D1r 1  18                    CLC
0041D2r 1  A5 26                 LDA PWOL_CURRENT_XL
0041D4r 1  65 2E                 ADC PWOL_NEXT_ROW_A_LEFT_XL
0041D6r 1  85 26                 STA PWOL_CURRENT_XL
0041D8r 1  A5 27                 LDA PWOL_CURRENT_XH
0041DAr 1  65 2F                 ADC PWOL_NEXT_ROW_A_LEFT_XH
0041DCr 1  85 27                 STA PWOL_CURRENT_XH
0041DEr 1  AA                    TAX
0041DFr 1  18                    CLC
0041E0r 1  A5 28                 LDA PWOL_CURRENT_YL
0041E2r 1  65 30                 ADC PWOL_NEXT_ROW_A_LEFT_YL
0041E4r 1  85 28                 STA PWOL_CURRENT_YL
0041E6r 1  A5 29                 LDA PWOL_CURRENT_YH
0041E8r 1  65 31                 ADC PWOL_NEXT_ROW_A_LEFT_YH
0041EAr 1  80 21                 BRA @ZAR_ZIG_LEFT_SWITCH_CHECK
0041ECr 1               
0041ECr 1                  @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN:
0041ECr 1  C6 44                 DEC PWOL_TRIES_COUNTER
0041EEr 1  D0 03                 BNE @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT
0041F0r 1  4C rr rr              JMP @zigzag_B
0041F3r 1                  @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT:
0041F3r 1  88                    DEY
0041F4r 1  38                    SEC
0041F5r 1  A5 26                 LDA PWOL_CURRENT_XL
0041F7r 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
0041F9r 1  85 26                 STA PWOL_CURRENT_XL
0041FBr 1  A5 27                 LDA PWOL_CURRENT_XH
0041FDr 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
0041FFr 1  85 27                 STA PWOL_CURRENT_XH
004201r 1  AA                    TAX
004202r 1  38                    SEC
004203r 1  A5 28                 LDA PWOL_CURRENT_YL
004205r 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
004207r 1  85 28                 STA PWOL_CURRENT_YL
004209r 1  A5 29                 LDA PWOL_CURRENT_YH
00420Br 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
00420Dr 1               
00420Dr 1                  @ZAR_ZIG_LEFT_SWITCH_CHECK:
00420Dr 1  85 29                 STA PWOL_CURRENT_YH
00420Fr 1  C5 56                 CMP PWOL_BOT_CHECK
004211r 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
004213r 1  C9 F0                 CMP #SCREEN_OUT_TOP
004215r 1  90 D5                 BCC @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN   ; its bottom_out <= Y < top out .. because negatives are bigger
004217r 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
004219r 1  90 04                 BCC @zigzag_A_left
00421Br 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
00421Dr 1  90 CD                 BCC @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
00421Fr 1               
00421Fr 1               
00421Fr 1               
00421Fr 1                  @zigzag_A_left:
00421Fr 1  C0 40                CPY #64  ;  make sure we don't go outside level..
004221r 1  B0 6E                BCS @ZAL_NEXT ; if we're outside we'll just skip is OK
004223r 1  B1 22                LDA (PWOL_TUB_PTR_AL),y
004225r 1  C9 81                CMP #129
004227r 1  B0 68                BCS @ZAL_NEXT ; we're outside level.
004229r 1               
004229r 1                       ; bytes 1 and 4 were updated when we cleared the object list
004229r 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
00422Cr 1  D0 04                BNE :++
00422Er 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
004231r 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
004232r 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
004234r 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
004237r 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen...
004239r 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
00423Br 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
00423Dr 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
004240r 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
004243r 1  8A                   TXA ; push new next to the Z buffer spot
004244r 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
004246r 1                       ; bytes .1..4.6 filled in already..
004246r 1  AD rr rr             LDA WORLD_SPRITE_NUM
004249r 1  9D rr rr             STA OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway..
00424Cr 1  B1 22                LDA (PWOL_TUB_PTR_AL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
00424Er 1  10 08                BPL @ZAL_INSIDE_TUB
004250r 1                     @ZAL_HIT_WALL_OUCH:
004250r 1  AD rr rr               LDA WORLD_WALL_SPRITE_NUM
004253r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
004256r 1  A9 56                  LDA #86 ; max height..
004258r 1                     @ZAL_INSIDE_TUB:
004258r 1  85 40                  STA PWOL_CONVERT_HEIGHTS ;
00425Ar 1  85 42                  STA PWOL_CONVERT_HEIGHTS_L;
00425Cr 1  38                     SEC
00425Dr 1  A5 28                  LDA PWOL_CURRENT_YL
00425Fr 1  F2 42                  SBC (PWOL_CONVERT_HEIGHTS_L)
004261r 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
004263r 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
004265r 1  C9 78                  CMP #SCREEN_OUT_BOTTOM    ;  are we even visible?
004267r 1  90 0E                  BCC :+
004269r 1  C5 55                  CMP PWOL_TOP_CHECK  ;     #SCREEN_OUT_TOP-50 ;PWOL_TOP_CHECK;
00426Br 1  B0 0A                  BCS :+
00426Dr 1  CE rr rr               DEC OBJECT_LIST_BYTE6_NEXT
004270r 1  BD rr rr               LDA OBJECT_LIST_BYTE6_NEXT,X ; grab the old next value
004273r 1  92 3E                  STA (PWOL_Z_STARTS_PTR) ; patch the old one back in..
004275r 1  80 1A                  BRA @ZAL_NEXT ; and skip THIS
004277r 1                       :
004277r 1               
004277r 1               
004277r 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
00427Ar 1  C5 54                  CMP PWOL_CENTER_Y_TOP ; is this above center on screen??
00427Cr 1  B0 0E                  BCS :+ ; is not covering us
00427Er 1  A5 29                  LDA PWOL_CURRENT_YH
004280r 1  C5 53                  CMP PWOL_CENTER_Y
004282r 1  90 08                  BCC :+ ; its from ahead of us, OK
004284r 1                         ; it was from below and covers us ..
004284r 1  BD rr rr               LDA OBJECT_LIST_BYTE0_ADDRLOW,X
004287r 1  69 0F                  ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
004289r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X
00428Cr 1                         ;LDA #$D0
00428Cr 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
00428Cr 1  A5 27                : LDA PWOL_CURRENT_XH
00428Er 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
004291r 1                    @ZAL_NEXT:
004291r 1                        ; calc next to the LEFT
004291r 1  88                    DEY
004292r 1  38                    SEC
004293r 1  A5 26                 LDA PWOL_CURRENT_XL
004295r 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
004297r 1  85 26                 STA PWOL_CURRENT_XL
004299r 1  A5 27                 LDA PWOL_CURRENT_XH
00429Br 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
00429Dr 1  85 27                 STA PWOL_CURRENT_XH
00429Fr 1  AA                    TAX
0042A0r 1  38                    SEC
0042A1r 1  A5 28                 LDA PWOL_CURRENT_YL
0042A3r 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
0042A5r 1  85 28                 STA PWOL_CURRENT_YL
0042A7r 1  A5 29                 LDA PWOL_CURRENT_YH
0042A9r 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
0042ABr 1  85 29                 STA PWOL_CURRENT_YH
0042ADr 1               
0042ADr 1  8E rr rr              STX DEBUG_A
0042B0r 1  8D rr rr              STA DEBUG_B
0042B3r 1               
0042B3r 1  C5 56                 CMP PWOL_BOT_CHECK
0042B5r 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
0042B7r 1  C9 F0                 CMP #SCREEN_OUT_TOP
0042B9r 1  90 0B                 BCC @ZAL_ZIG_RIGHT_SWITCH   ; its bottom_out <= Y < top out .. because negatives are bigger
0042BBr 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
0042BDr 1  90 04                 BCC :+                ; if its within right side then go do next thing..
0042BFr 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
0042C1r 1  90 03                 BCC @ZAL_ZIG_RIGHT_SWITCH     ; we're to the right of the screen but not far enough to wrap around..
0042C3r 1  4C rr rr            : JMP @zigzag_A_left
0042C6r 1               
0042C6r 1                    @ZAL_ZIG_RIGHT_SWITCH: ; up/right is +1,+1  from where we is right now ..
0042C6r 1  A9 06                 LDA #TRY_AGAIN
0042C8r 1  85 44                 STA PWOL_TRIES_COUNTER
0042CAr 1  C8                    INY
0042CBr 1  38                    SEC
0042CCr 1  A5 22                 LDA PWOL_TUB_PTR_AL
0042CEr 1  E9 40                 SBC #64
0042D0r 1  85 22                 STA PWOL_TUB_PTR_AL
0042D2r 1  A5 23                 LDA PWOL_TUB_PTR_AH
0042D4r 1  E9 00                 SBC #0
0042D6r 1  C9 rr                 CMP #>TUB_WORLD ; are we inside the world still?
0042D8r 1  B0 03                 BCS :+
0042DAr 1  4C rr rr              JMP @zigzag_B
0042DDr 1  85 23               : STA PWOL_TUB_PTR_AH
0042DFr 1               
0042DFr 1               
0042DFr 1  18                    CLC
0042E0r 1               
0042E0r 1  A5 26                 LDA PWOL_CURRENT_XL
0042E2r 1  65 32                 ADC PWOL_NEXT_ROW_A_RIGHT_XL
0042E4r 1  85 26                 STA PWOL_CURRENT_XL
0042E6r 1               
0042E6r 1  A5 27                 LDA PWOL_CURRENT_XH
0042E8r 1  65 33                 ADC PWOL_NEXT_ROW_A_RIGHT_XH
0042EAr 1  85 27                 STA PWOL_CURRENT_XH
0042ECr 1  AA                    TAX
0042EDr 1               
0042EDr 1               
0042EDr 1  18                    CLC
0042EEr 1  A5 28                 LDA PWOL_CURRENT_YL
0042F0r 1  65 34                 ADC PWOL_NEXT_ROW_A_RIGHT_YL
0042F2r 1  85 28                 STA PWOL_CURRENT_YL
0042F4r 1  A5 29                 LDA PWOL_CURRENT_YH
0042F6r 1  65 35                 ADC PWOL_NEXT_ROW_A_RIGHT_YH
0042F8r 1  80 1E                 BRA @ZAL_ZIG_RIGHT_SWITCH_CHECK
0042FAr 1               
0042FAr 1               
0042FAr 1               
0042FAr 1                  @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN:
0042FAr 1  C6 44                 DEC PWOL_TRIES_COUNTER
0042FCr 1  F0 2F                 BEQ @zigzag_B
0042FEr 1                  @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN_GO_RIGHT:
0042FEr 1  C8                    INY
0042FFr 1  18                    CLC
004300r 1  A5 26                 LDA PWOL_CURRENT_XL
004302r 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
004304r 1  85 26                 STA PWOL_CURRENT_XL
004306r 1  A5 27                 LDA PWOL_CURRENT_XH
004308r 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
00430Ar 1  85 27                 STA PWOL_CURRENT_XH
00430Cr 1  AA                    TAX
00430Dr 1  18                    CLC
00430Er 1  A5 28                 LDA PWOL_CURRENT_YL
004310r 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
004312r 1  85 28                 STA PWOL_CURRENT_YL
004314r 1  A5 29                 LDA PWOL_CURRENT_YH
004316r 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
004318r 1                  @ZAL_ZIG_RIGHT_SWITCH_CHECK:
004318r 1  85 29                 STA PWOL_CURRENT_YH
00431Ar 1  C5 56                 CMP PWOL_BOT_CHECK
00431Cr 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
00431Er 1  C9 F0                 CMP #SCREEN_OUT_TOP
004320r 1  90 D8                 BCC @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN    ; its bottom_out <= Y < top out .. because negatives are bigger
004322r 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
004324r 1  90 04                 BCC :+
004326r 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
004328r 1  90 D0                 BCC @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
00432Ar 1  4C rr rr            : JMP @zigzag_A_right
00432Dr 1               
00432Dr 1               
00432Dr 1                 @zigzag_B: ; going to left and down the screen, including where we are currently..
00432Dr 1  38                 SEC
00432Er 1  A5 45              LDA PWOL_START_XL
004330r 1  E5 2A              SBC PWOL_ACROSS_ROW_XL
004332r 1  85 26              STA PWOL_CURRENT_XL
004334r 1  A5 47              LDA PWOL_START_XH
004336r 1  E5 2B              SBC PWOL_ACROSS_ROW_XH
004338r 1  85 27              STA PWOL_CURRENT_XH
00433Ar 1               
00433Ar 1               
00433Ar 1  38                 SEC
00433Br 1  A5 46              LDA PWOL_START_YL
00433Dr 1  E5 2C              SBC PWOL_ACROSS_ROW_YL
00433Fr 1  85 28              STA PWOL_CURRENT_YL
004341r 1  A5 48              LDA PWOL_START_YH
004343r 1  E5 2D              SBC PWOL_ACROSS_ROW_YH
004345r 1  85 29              STA PWOL_CURRENT_YH
004347r 1               
004347r 1  AC rr rr           LDY camera_cell_x   ;  eh voila! we haz pointer to ze row to start on .. woot!
00434Ar 1  88                 DEY ; start left
00434Br 1               
00434Br 1                  @zigzag_B_left:
00434Br 1  C0 40                CPY #64  ;  make sure we don't go outside level..
00434Dr 1  B0 6E                BCS @ZBL_NEXT ; if we're outside we'll just skip is OK
00434Fr 1  B1 24                LDA (PWOL_TUB_PTR_BL),y
004351r 1  C9 81                CMP #129
004353r 1  B0 68                BCS @ZBL_NEXT ; we're outside level.
004355r 1               
004355r 1                       ; bytes 1 and 4 were updated when we cleared the object list
004355r 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
004358r 1  D0 04                BNE :++
00435Ar 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
00435Dr 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
00435Er 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
004360r 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
004363r 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen...
004365r 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
004367r 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
004369r 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
00436Cr 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
00436Fr 1  8A                   TXA ; push new next to the Z buffer spot
004370r 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
004372r 1                       ; bytes .1..4.6 filled in already..
004372r 1  AD rr rr             LDA WORLD_SPRITE_NUM
004375r 1  9D rr rr             STA OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway..
004378r 1  B1 24                LDA (PWOL_TUB_PTR_BL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
00437Ar 1  10 08                BPL @ZBL_INSIDE_TUB
00437Cr 1                     @ZBL_HIT_WALL_OUCH:
00437Cr 1  AD rr rr               LDA WORLD_WALL_SPRITE_NUM
00437Fr 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
004382r 1  A9 56                  LDA #86 ; max height..
004384r 1                     @ZBL_INSIDE_TUB:
004384r 1  85 40                  STA PWOL_CONVERT_HEIGHTS ;
004386r 1  85 42                  STA PWOL_CONVERT_HEIGHTS_L;
004388r 1  38                     SEC
004389r 1  A5 28                  LDA PWOL_CURRENT_YL
00438Br 1  F2 42                  SBC (PWOL_CONVERT_HEIGHTS_L)
00438Dr 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
00438Fr 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
004391r 1  C9 78                  CMP #SCREEN_OUT_BOTTOM    ;  are we even visible?
004393r 1  90 0E                  BCC :+
004395r 1  C5 55                  CMP PWOL_TOP_CHECK  ;     #SCREEN_OUT_TOP-50 ;PWOL_TOP_CHECK;
004397r 1  B0 0A                  BCS :+
004399r 1  CE rr rr               DEC OBJECT_LIST_BYTE6_NEXT
00439Cr 1  BD rr rr               LDA OBJECT_LIST_BYTE6_NEXT,X ; grab the old next value
00439Fr 1  92 3E                  STA (PWOL_Z_STARTS_PTR) ; patch the old one back in..
0043A1r 1  80 1A                  BRA @ZBL_NEXT ; and skip THIS
0043A3r 1                       :
0043A3r 1               
0043A3r 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
0043A6r 1  C5 54                  CMP PWOL_CENTER_Y_TOP ; is this above center on screen??
0043A8r 1  B0 0E                  BCS :+ ; is not covering us
0043AAr 1  A5 29                  LDA PWOL_CURRENT_YH
0043ACr 1  C5 53                  CMP PWOL_CENTER_Y
0043AEr 1  90 08                  BCC :+ ; its from ahead of us, OK
0043B0r 1                         ; it was from below and covers us ..
0043B0r 1  BD rr rr               LDA OBJECT_LIST_BYTE0_ADDRLOW,X
0043B3r 1  69 0F                  ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
0043B5r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X
0043B8r 1                         ;LDA #$D0
0043B8r 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
0043B8r 1  A5 27                : LDA PWOL_CURRENT_XH
0043BAr 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
0043BDr 1                    @ZBL_NEXT:
0043BDr 1                        ; calc next to the LEFT
0043BDr 1  88                    DEY
0043BEr 1  38                    SEC
0043BFr 1  A5 26                 LDA PWOL_CURRENT_XL
0043C1r 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
0043C3r 1  85 26                 STA PWOL_CURRENT_XL
0043C5r 1  A5 27                 LDA PWOL_CURRENT_XH
0043C7r 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
0043C9r 1  85 27                 STA PWOL_CURRENT_XH
0043CBr 1  AA                    TAX
0043CCr 1  38                    SEC
0043CDr 1  A5 28                 LDA PWOL_CURRENT_YL
0043CFr 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
0043D1r 1  85 28                 STA PWOL_CURRENT_YL
0043D3r 1  A5 29                 LDA PWOL_CURRENT_YH
0043D5r 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
0043D7r 1  85 29                 STA PWOL_CURRENT_YH
0043D9r 1               
0043D9r 1  8E rr rr              STX DEBUG_A
0043DCr 1  8D rr rr              STA DEBUG_B
0043DFr 1               
0043DFr 1  C5 56                 CMP PWOL_BOT_CHECK
0043E1r 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
0043E3r 1  C9 F0                 CMP #SCREEN_OUT_TOP
0043E5r 1  90 0B                 BCC @ZBL_ZIG_RIGHT_SWITCH     ; its bottom_out <= Y < top out .. because negatives are bigger
0043E7r 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
0043E9r 1  90 04                 BCC :+                ; if its within right side then go do next thing..
0043EBr 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
0043EDr 1  90 03                 BCC @ZBL_ZIG_RIGHT_SWITCH     ; we're to the right of the screen but not far enough to wrap around..
0043EFr 1  4C rr rr            : JMP @zigzag_B_left
0043F2r 1               
0043F2r 1               
0043F2r 1               
0043F2r 1                    @ZBL_ZIG_RIGHT_SWITCH: ; DOWN/LEFT to start right is is 0,+1  from where we is right now ..
0043F2r 1                        ;INY
0043F2r 1                        ;INY
0043F2r 1  A9 06                 LDA #TRY_AGAIN
0043F4r 1  85 44                 STA PWOL_TRIES_COUNTER
0043F6r 1  18                    CLC
0043F7r 1  A5 24                 LDA PWOL_TUB_PTR_BL
0043F9r 1  69 40                 ADC #64
0043FBr 1  85 24                 STA PWOL_TUB_PTR_BL
0043FDr 1  A5 25                 LDA PWOL_TUB_PTR_BH
0043FFr 1  69 00                 ADC #0
004401r 1  C9 rr                 CMP #>TUB_WORLD+8
004403r 1  90 01                 BCC :+
004405r 1  60                    rts
004406r 1  85 25               : STA PWOL_TUB_PTR_BH
004408r 1               
004408r 1               
004408r 1  18                    CLC
004409r 1               
004409r 1  A5 26                 LDA PWOL_CURRENT_XL
00440Br 1  65 3A                 ADC PWOL_NEXT_ROW_B_RIGHT_XL
00440Dr 1  85 26                 STA PWOL_CURRENT_XL
00440Fr 1               
00440Fr 1  A5 27                 LDA PWOL_CURRENT_XH
004411r 1  65 3B                 ADC PWOL_NEXT_ROW_B_RIGHT_XH
004413r 1  85 27                 STA PWOL_CURRENT_XH
004415r 1  AA                    TAX
004416r 1               
004416r 1               
004416r 1  18                    CLC
004417r 1  A5 28                 LDA PWOL_CURRENT_YL
004419r 1  65 3C                 ADC PWOL_NEXT_ROW_B_RIGHT_YL
00441Br 1  85 28                 STA PWOL_CURRENT_YL
00441Dr 1  A5 29                 LDA PWOL_CURRENT_YH
00441Fr 1  65 3D                 ADC PWOL_NEXT_ROW_B_RIGHT_YH
004421r 1  80 1F                 BRA @ZBL_ZIG_RIGHT_SWITCH_CHECK
004423r 1               
004423r 1                  @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN:
004423r 1  C6 44                 DEC PWOL_TRIES_COUNTER
004425r 1  D0 01                 BNE @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN_GO_RIGHT
004427r 1                  @ZBL_RTS:
004427r 1               ;          STZ VERA_data0
004427r 1                ;         STZ VERA_data0
004427r 1                 ;        STZ VERA_data0
004427r 1                  ;       STZ VERA_data0
004427r 1  60                 rts
004428r 1                  @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN_GO_RIGHT:
004428r 1  C8                    INY
004429r 1  18                    CLC
00442Ar 1  A5 26                 LDA PWOL_CURRENT_XL
00442Cr 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
00442Er 1  85 26                 STA PWOL_CURRENT_XL
004430r 1  A5 27                 LDA PWOL_CURRENT_XH
004432r 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
004434r 1  85 27                 STA PWOL_CURRENT_XH
004436r 1  AA                    TAX
004437r 1  18                    CLC
004438r 1  A5 28                 LDA PWOL_CURRENT_YL
00443Ar 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
00443Cr 1  85 28                 STA PWOL_CURRENT_YL
00443Er 1  A5 29                 LDA PWOL_CURRENT_YH
004440r 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
004442r 1                  @ZBL_ZIG_RIGHT_SWITCH_CHECK:
004442r 1  85 29                 STA PWOL_CURRENT_YH
004444r 1  C5 56                 CMP PWOL_BOT_CHECK
004446r 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
004448r 1  C9 F0                 CMP #SCREEN_OUT_TOP
00444Ar 1  90 D7                 BCC @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN    ; its bottom_out <= Y < top out .. because negatives are bigger
00444Cr 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
00444Er 1  90 04                 BCC @zigzag_B_right
004450r 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
004452r 1  90 CF                 BCC @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
004454r 1               
004454r 1               
004454r 1               
004454r 1                   @zigzag_B_right:
004454r 1  C0 40                CPY #64  ;  make sure we don't go outside level..
004456r 1  B0 6E                BCS @ZBR_NEXT ; if we're outside we'll just skip is OK
004458r 1  B1 24                LDA (PWOL_TUB_PTR_BL),y
00445Ar 1  C9 81                CMP #129
00445Cr 1  B0 68                BCS @ZBR_NEXT ; we're outside level.
00445Er 1               
00445Er 1                       ; bytes 1 and 4 were updated when we cleared the object list
00445Er 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
004461r 1  D0 04                BNE :++
004463r 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
004466r 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
004467r 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
004469r 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
00446Cr 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen...
00446Er 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
004470r 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
004472r 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
004475r 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
004478r 1  8A                   TXA ; push new next to the Z buffer spot
004479r 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
00447Br 1                       ; bytes .1..4.6 filled in already..
00447Br 1  AD rr rr             LDA WORLD_SPRITE_NUM
00447Er 1  9D rr rr             STA OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway..
004481r 1  B1 24                LDA (PWOL_TUB_PTR_BL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
004483r 1  10 08                BPL @ZBR_INSIDE_TUB
004485r 1                     @ZBR_HIT_WALL_OUCH:
004485r 1  AD rr rr               LDA WORLD_WALL_SPRITE_NUM
004488r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
00448Br 1  A9 56                  LDA #86 ; max height..
00448Dr 1                     @ZBR_INSIDE_TUB:
00448Dr 1  85 40                  STA PWOL_CONVERT_HEIGHTS ;
00448Fr 1  85 42                  STA PWOL_CONVERT_HEIGHTS_L;
004491r 1  38                     SEC
004492r 1  A5 28                  LDA PWOL_CURRENT_YL
004494r 1  F2 42                  SBC (PWOL_CONVERT_HEIGHTS_L)
004496r 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
004498r 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
00449Ar 1  C9 78                  CMP #SCREEN_OUT_BOTTOM    ;  are we even visible?
00449Cr 1  90 0E                  BCC :+
00449Er 1  C5 55                  CMP PWOL_TOP_CHECK  ;     #SCREEN_OUT_TOP-50 ;PWOL_TOP_CHECK;
0044A0r 1  B0 0A                  BCS :+
0044A2r 1  CE rr rr               DEC OBJECT_LIST_BYTE6_NEXT
0044A5r 1  BD rr rr               LDA OBJECT_LIST_BYTE6_NEXT,X ; grab the old next value
0044A8r 1  92 3E                  STA (PWOL_Z_STARTS_PTR) ; patch the old one back in..
0044AAr 1  80 1A                  BRA @ZBR_NEXT ; and skip THIS
0044ACr 1                       :
0044ACr 1               
0044ACr 1               
0044ACr 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
0044AFr 1  C5 54                  CMP PWOL_CENTER_Y_TOP ; is this above center on screen??
0044B1r 1  B0 0E                  BCS :+ ; is not covering us
0044B3r 1  A5 29                  LDA PWOL_CURRENT_YH
0044B5r 1  C5 53                  CMP PWOL_CENTER_Y
0044B7r 1  90 08                  BCC :+ ; its from ahead of us, OK
0044B9r 1                         ; it was from below and covers us ..
0044B9r 1  BD rr rr               LDA OBJECT_LIST_BYTE0_ADDRLOW,X
0044BCr 1  69 0F                  ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
0044BEr 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X
0044C1r 1                         ;LDA #$D0
0044C1r 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
0044C1r 1  A5 27                : LDA PWOL_CURRENT_XH
0044C3r 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
0044C6r 1                    @ZBR_NEXT:
0044C6r 1                        ; calc next to the right..
0044C6r 1  C8                    INY
0044C7r 1  18                    CLC
0044C8r 1  A5 26                 LDA PWOL_CURRENT_XL
0044CAr 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
0044CCr 1  85 26                 STA PWOL_CURRENT_XL
0044CEr 1  A5 27                 LDA PWOL_CURRENT_XH
0044D0r 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
0044D2r 1  85 27                 STA PWOL_CURRENT_XH
0044D4r 1  AA                    TAX
0044D5r 1  18                    CLC
0044D6r 1  A5 28                 LDA PWOL_CURRENT_YL
0044D8r 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
0044DAr 1  85 28                 STA PWOL_CURRENT_YL
0044DCr 1  A5 29                 LDA PWOL_CURRENT_YH
0044DEr 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
0044E0r 1  85 29                 STA PWOL_CURRENT_YH
0044E2r 1               
0044E2r 1  8E rr rr              STX DEBUG_A
0044E5r 1  8D rr rr              STA DEBUG_B
0044E8r 1               
0044E8r 1  C5 56                 CMP PWOL_BOT_CHECK
0044EAr 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
0044ECr 1  C9 F0                 CMP #SCREEN_OUT_TOP
0044EEr 1  90 0B                 BCC @ZBR_ZIG_LEFT_SWITCH     ; its bottom_out <= Y < top out .. because negatives are bigger
0044F0r 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
0044F2r 1  90 04                 BCC :+                ; if its within right side then go do next thing..
0044F4r 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
0044F6r 1  90 03                 BCC @ZBR_ZIG_LEFT_SWITCH        ; we're to the right of the screen but not far enough to wrap around..
0044F8r 1  4C rr rr            : JMP @zigzag_B_right
0044FBr 1               
0044FBr 1               
0044FBr 1               
0044FBr 1                    @ZBR_ZIG_LEFT_SWITCH: ;PWOL_NEXT_ROW_A_LEFT_XL   ; -> next row is left, going down the screen ..  +1,+1
0044FBr 1  A9 06                 LDA #TRY_AGAIN
0044FDr 1  85 44                 STA PWOL_TRIES_COUNTER
0044FFr 1  88                   DEY ; have to go this to match where the thing is going .. 0,0
004500r 1  18                    CLC
004501r 1  A5 24                 LDA PWOL_TUB_PTR_BL
004503r 1  69 40                 ADC #64 ;   0,-1
004505r 1  85 24                 STA PWOL_TUB_PTR_BL
004507r 1  A5 25                 LDA PWOL_TUB_PTR_BH
004509r 1  69 00                 ADC #0
00450Br 1  C9 rr                 CMP #>TUB_WORLD+8
00450Dr 1  90 01                 BCC :+
00450Fr 1  60                    rts
004510r 1  85 25               : STA PWOL_TUB_PTR_BH
004512r 1               
004512r 1  18                    CLC
004513r 1  A5 26                 LDA PWOL_CURRENT_XL
004515r 1  65 36                 ADC PWOL_NEXT_ROW_B_LEFT_XL
004517r 1  85 26                 STA PWOL_CURRENT_XL
004519r 1  A5 27                 LDA PWOL_CURRENT_XH
00451Br 1  65 37                 ADC PWOL_NEXT_ROW_B_LEFT_XH
00451Dr 1  85 27                 STA PWOL_CURRENT_XH
00451Fr 1  AA                    TAX
004520r 1  18                    CLC
004521r 1  A5 28                 LDA PWOL_CURRENT_YL
004523r 1  65 38                 ADC PWOL_NEXT_ROW_B_LEFT_YL
004525r 1  85 28                 STA PWOL_CURRENT_YL
004527r 1  A5 29                 LDA PWOL_CURRENT_YH
004529r 1  65 39                 ADC PWOL_NEXT_ROW_B_LEFT_YH
00452Br 1  80 1F                 BRA @ZBR_ZIG_LEFT_SWITCH_CHECK
00452Dr 1               
00452Dr 1               
00452Dr 1               
00452Dr 1                  @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN:
00452Dr 1  C6 44                 DEC PWOL_TRIES_COUNTER
00452Fr 1  D0 01                 BNE @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT
004531r 1                  @ZBR_RTS:
004531r 1               ;          STZ VERA_data0
004531r 1               ;          STZ VERA_data0
004531r 1               ;          STZ VERA_data0
004531r 1               ;          STZ VERA_data0
004531r 1  60                    rts
004532r 1                  @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT:
004532r 1  88                    DEY
004533r 1  38                    SEC
004534r 1  A5 26                 LDA PWOL_CURRENT_XL
004536r 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
004538r 1  85 26                 STA PWOL_CURRENT_XL
00453Ar 1  A5 27                 LDA PWOL_CURRENT_XH
00453Cr 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
00453Er 1  85 27                 STA PWOL_CURRENT_XH
004540r 1  AA                    TAX
004541r 1  38                    SEC
004542r 1  A5 28                 LDA PWOL_CURRENT_YL
004544r 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
004546r 1  85 28                 STA PWOL_CURRENT_YL
004548r 1  A5 29                 LDA PWOL_CURRENT_YH
00454Ar 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
00454Cr 1               
00454Cr 1               @ZBR_ZIG_LEFT_SWITCH_CHECK:
00454Cr 1  85 29                 STA PWOL_CURRENT_YH
00454Er 1  C5 56                 CMP PWOL_BOT_CHECK
004550r 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
004552r 1  C9 F0                 CMP #SCREEN_OUT_TOP
004554r 1  90 D7                 BCC @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN   ; its bottom_out <= Y < top out .. because negatives are bigger
004556r 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
004558r 1  90 04                 BCC :+
00455Ar 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
00455Cr 1  90 CF                 BCC @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
00455Er 1  4C rr rr            : JMP @zigzag_B_left
004561r 1               
004561r 1               
004561r 1               draw_object_list:
004561r 1  AC rr rr          LDY NUM_AVAIL_SPRITES ; num sprites can write
004564r 1  D0 03             BNE :+
004566r 1  4C rr rr          JMP draw_object_list_to_BUFFER
004569r 1                  :
004569r 1  AD rr rr         LDA NUM_RESERVED_SPRITES
00456Cr 1               ;    INC VERA_LOCK
00456Cr 1               ;    BNE @unlock_vera   there's no actual way to get here and not have vera unlock.. s
00456Cr 1               ;  so instead, we're going to DEC the VERA_LOCK after the new frame is ready, which is after this function..
00456Cr 1               
00456Cr 1               
00456Cr 1               
00456Cr 1  EE rr rr         INC DEBUG_D
00456Fr 1               
00456Fr 1  9C 25 9F         STZ VERA_ctrl
004572r 1  64 22            STZ ZP_PTR
004574r 1  0A               ASL
004575r 1  26 22            ROL ZP_PTR
004577r 1  0A               ASL
004578r 1  26 22            ROL ZP_PTR
00457Ar 1  0A               ASL
00457Br 1  26 22            ROL ZP_PTR
00457Dr 1  8D 20 9F         STA VERA_addr_low
004580r 1  18               CLC
004581r 1  A5 22            LDA ZP_PTR
004583r 1  69 EC            ADC #>VRAM_SPRITE_BUF;  #>VRAM_SPRITE_BUF ; #>VRAM_sprite_attributes;
004585r 1  8D 21 9F         sta VERA_addr_high
004588r 1  A9 11            lda #$11
00458Ar 1  8D 22 9F         sta VERA_addr_bank
00458Dr 1  AD rr rr         LDA SPRITE_OBJECT_ENABLE
004590r 1  D0 22            BNE @SET_Z_PTR
004592r 1  A9 01            LDA #1
004594r 1  A2 0C            LDX #$0C
004596r 1  9C 23 9F        : STZ VERA_data0  ; addr low
004599r 1  8D 23 9F          STA VERA_data0  ; mod/addr_hi
00459Cr 1  9C 23 9F          STZ VERA_data0  ; xl
00459Fr 1  9C 23 9F          STZ VERA_data0  ; Xh
0045A2r 1  9C 23 9F          STZ VERA_data0  ; yl
0045A5r 1  9C 23 9F          STZ VERA_data0  ; yh
0045A8r 1  8E 23 9F          STX VERA_data0
0045ABr 1  9C 23 9F          STZ VERA_data0
0045AEr 1  88                DEY
0045AFr 1  D0 E5             BNE :-
0045B1r 1  4C rr rr         JMP draw_object_list_to_BUFFER
0045B4r 1               
0045B4r 1               
0045B4r 1               @SET_Z_PTR:
0045B4r 1  64 22            STZ ZP_PTR
0045B6r 1  A9 rr            LDA #>OBJECT_LIST_Z_START_POINTERS
0045B8r 1  85 23            STA ZP_PTR+1
0045BAr 1               
0045BAr 1               
0045BAr 1                 @NEXT_Z: ; Z=0 is invalid...
0045BAr 1  E6 22              INC ZP_PTR
0045BCr 1  D0 1C              BNE @Z_LOOP
0045BEr 1  AD 23 9F           : LDA VERA_data0
0045C1r 1  AD 23 9F             LDA VERA_data0
0045C4r 1  9C 23 9F             STZ VERA_data0
0045C7r 1  9C 23 9F             STZ VERA_data0
0045CAr 1  AD 23 9F             LDA VERA_data0
0045CDr 1  AD 23 9F             LDA VERA_data0
0045D0r 1  AD 23 9F             LDA VERA_data0
0045D3r 1  AD 23 9F             LDA VERA_data0
0045D6r 1  88                   DEY
0045D7r 1  D0 E5                BNE :-
0045D9r 1                  @rts:
0045D9r 1  60                 rts
0045DAr 1                 @Z_LOOP:
0045DAr 1  B2 22              LDA (ZP_PTR) ; get our first victim
0045DCr 1  AA                 TAX
0045DDr 1  A9 00              LDA #0
0045DFr 1  92 22              STA (ZP_PTR) ; zero this Z_next for now
0045E1r 1  8A                 TXA
0045E2r 1                    @OBJ_LOOP:
0045E2r 1  AA                    TAX
0045E3r 1  F0 D5                 BEQ @NEXT_Z ; got a bum next pointer there ...
0045E5r 1  BD rr rr              LDA OBJECT_LIST_BYTE0_ADDRLOW,X
0045E8r 1  8D 23 9F              STA VERA_data0
0045EBr 1  BD rr rr              LDA OBJECT_LIST_BYTE1_MODE,x
0045EEr 1  8D 23 9F              STA VERA_data0
0045F1r 1  BD rr rr              LDA OBJECT_LIST_BYTE2_X,x
0045F4r 1  8D 23 9F              STA VERA_data0
0045F7r 1  C9 A0                 CMP #SCREEN_OUT_RIGHT
0045F9r 1  A9 00                 LDA #0
0045FBr 1  90 02                 BCC :+
0045FDr 1  A9 FF                 LDA #$FF
0045FFr 1  8D 23 9F            : STA VERA_data0
004602r 1               
004602r 1  BD rr rr              LDA OBJECT_LIST_BYTE3_Y,x
004605r 1  8D 23 9F              STA VERA_data0
004608r 1  C9 78                 CMP #SCREEN_OUT_BOTTOM
00460Ar 1  A9 00                 LDA #0
00460Cr 1  90 02                 BCC :+
00460Er 1  A9 FF                 LDA #$FF
004610r 1  8D 23 9F            : STA VERA_data0
004613r 1  BD rr rr              LDA OBJECT_LIST_BYTE4_ZFLIPS,x
004616r 1  8D 23 9F              STA VERA_data0
004619r 1  BD rr rr              LDA OBJECT_LIST_BYTE5_SIZE,x
00461Cr 1  8D 23 9F              STA VERA_data0
00461Fr 1  BD rr rr              LDA OBJECT_LIST_BYTE6_NEXT,x
004622r 1  88                    DEY ; decrement that Y
004623r 1  D0 BD                 BNE @OBJ_LOOP ; still sprite slots left.. woot!
004625r 1  92 22                 STA (ZP_PTR) ; oops.. save that last thing and exit..
004627r 1               draw_object_list_to_BUFFER:
004627r 1               DOLB_ZTRACKER = ZP_PTR
004627r 1               DOLB_ZTRACKERH = ZP_PTR+1
004627r 1               DOLB_BUFFER_HIGH_BYTE = ZP_PTR+2
004627r 1               DOLB_CALC_DEST_LOW = ZP_PTR+3
004627r 1               DOLB_CALC_DEST_HIGH = ZP_PTR+4
004627r 1               DOLB_CALC_SCRATCH = ZP_PTR+5
004627r 1               DOLB_STOP_BOTTOM = ZP_PTR+6
004627r 1               DOLB_Y_CALC_POINTER = ZP_PTR+7
004627r 1               DOLB_Y_CALC_POINTERH = ZP_PTR+8
004627r 1               
004627r 1  A9 0C           LDA #12
004629r 1  8D 25 9F        STA VERA_ctrl
00462Cr 1  9C 29 9F        STZ FX_CACHE_L ; zero out the cache bytes..
00462Fr 1  9C 2A 9F        STZ FX_CACHE_M
004632r 1  9C 2B 9F        STZ FX_CACHE_H
004635r 1  9C 2C 9F        STZ FX_CACHE_U
004638r 1               
004638r 1  A9 04           LDA #4  ;    DCSEL 2 with address select 0.. to be used as destination..
00463Ar 1  8D 25 9F        STA VERA_ctrl
00463Dr 1  9C 2C 9F        STZ FX_MULT
004640r 1  A9 60           LDA #%01100000
004642r 1  8D 29 9F        STA FX_CTRL ;     cache write enable, cache fill and other stuff disabled
004645r 1               
004645r 1  9C 20 9F        STZ VERA_addr_low
004648r 1               ;        A        B     CURRENT BITMAP BUFFER
004648r 1               ;   0   display  dirty    A is being displayed, B to be drawn on
004648r 1               ;  64   display  ready    B  is ready for swap
004648r 1               ; 128   dirty    display  B is being displayed, A to be drawn on
004648r 1               ; 192   ready    display  A  is ready for swap
004648r 1               
004648r 1  64 29           STZ DOLB_Y_CALC_POINTER
00464Ar 1  AD rr rr        LDA CURRENT_BITMAP_BUFFER
00464Dr 1  10 08           BPL @DRAW_ON_B
00464Fr 1               @DRAW_ON_A:
00464Fr 1  A9 18           LDA #>VRAM_BITMAP_LAYERA
004651r 1  A2 80           LDX #>VRAM_BITMAP_LAYERB
004653r 1  A0 rr           LDY #>BUFFER_A_OFFSETS_HIGH
004655r 1  80 06           BRA @GO_DRAW
004657r 1               @DRAW_ON_B:
004657r 1  A9 80           LDA #>VRAM_BITMAP_LAYERB
004659r 1  A2 E4           LDX #>VRAM_TEXT_SCREEN
00465Br 1  A0 rr           LDY #>BUFFER_B_OFFSETS_HIGH
00465Dr 1               @GO_DRAW:
00465Dr 1  85 24           STA DOLB_BUFFER_HIGH_BYTE
00465Fr 1  CA              DEX
004660r 1  86 28           STX DOLB_STOP_BOTTOM
004662r 1  84 2A           STY DOLB_Y_CALC_POINTERH
004664r 1  8D 21 9F        STA VERA_addr_high
004667r 1  A9 31           LDA #$31; 4 at a time
004669r 1  8D 22 9F        STA VERA_addr_bank
00466Cr 1                  ; clear the buffer ...
00466Cr 1               
00466Cr 1               
00466Cr 1  18              CLC
00466Dr 1  A9 00           LDA #0
00466Fr 1  A2 78           LDX #120;120 ; do 160*120 = 19,200/4 = 4,800 iterations.. if we do 20 iterations a pop.. 240 x iterations
004671r 1               
004671r 1               
004671r 1  9C 23 9F      : STZ VERA_data0 ;     trigger cache write - 4 bytes / 8px
004674r 1  9C 23 9F        STZ VERA_data0
004677r 1  9C 23 9F        STZ VERA_data0
00467Ar 1  9C 23 9F        STZ VERA_data0 ; 32 px cleared
00467Dr 1               
00467Dr 1  9C 23 9F        STZ VERA_data0
004680r 1  9C 23 9F        STZ VERA_data0
004683r 1  9C 23 9F        STZ VERA_data0
004686r 1  9C 23 9F        STZ VERA_data0 ; 64 px cleared
004689r 1               
004689r 1  9C 23 9F        STZ VERA_data0
00468Cr 1  9C 23 9F        STZ VERA_data0
00468Fr 1  9C 23 9F        STZ VERA_data0
004692r 1  9C 23 9F        STZ VERA_data0 ; 96
004695r 1               
004695r 1  9C 23 9F        STZ VERA_data0
004698r 1  9C 23 9F        STZ VERA_data0
00469Br 1  9C 23 9F        STZ VERA_data0
00469Er 1  9C 23 9F        STZ VERA_data0 ; 128
0046A1r 1               
0046A1r 1  9C 23 9F        STZ VERA_data0
0046A4r 1  9C 23 9F        STZ VERA_data0
0046A7r 1  9C 23 9F        STZ VERA_data0
0046AAr 1  9C 23 9F        STZ VERA_data0 ; 160 px cleared
0046ADr 1               
0046ADr 1  18              CLC
0046AEr 1  AD 20 9F        LDA VERA_addr_low
0046B1r 1  69 50           ADC #80     ;     increment A for the low part the address
0046B3r 1  8D 20 9F        STA VERA_addr_low
0046B6r 1  AD 21 9F        LDA VERA_addr_high
0046B9r 1  69 00           ADC #0
0046BBr 1  8D 21 9F        STA VERA_addr_high
0046BEr 1               
0046BEr 1  CA              DEX
0046BFr 1  D0 B0           BNE :- ; 85 * 120 = 10,200 .. + 119 * 14 =1,666 .. 11,866 cycles to clear entire screen.. ok
0046C1r 1               
0046C1r 1  A9 E0            LDA #$E0
0046C3r 1  8D 29 9F        STA FX_CTRL
0046C6r 1               ;    STZ FX_CTRL
0046C6r 1  A9 FF           LDA #$FF
0046C8r 1  85 22           STA DOLB_ZTRACKER
0046CAr 1  A9 rr           LDA #>OBJECT_LIST_Z_START_POINTERS
0046CCr 1  85 23           STA DOLB_ZTRACKERH
0046CEr 1  80 0B           BRA @GO_Z
0046D0r 1                 @DONE_Z: ; Z=0 is invalid...
0046D0r 1  9C 29 9F           STZ FX_CTRL ;     clear the cache writing for now
0046D3r 1  9C 25 9F           STZ VERA_ctrl  ;     switch back to regular mode for now..
0046D6r 1  60                 RTS
0046D7r 1                 @NEXT_Z:
0046D7r 1  C6 22              DEC DOLB_ZTRACKER
0046D9r 1  F0 F5              BEQ @DONE_Z
0046DBr 1                 @GO_Z:
0046DBr 1  B2 22              LDA (DOLB_ZTRACKER) ; get our first victim
0046DDr 1  D0 07              BNE @DO_OBJECT
0046DFr 1  80 F6              BRA @NEXT_Z
0046E1r 1                 @NEXT_OBJECT:
0046E1r 1  BD rr rr           LDA OBJECT_LIST_BYTE6_NEXT,x
0046E4r 1  F0 F1              BEQ @NEXT_Z
0046E6r 1                 @DO_OBJECT:
0046E6r 1  AA                 TAX      ;     get that pointer into X so we can do stuffs...
0046E7r 1                     ; OK so now reference OBJECT_LIST_BYTE*,X for whatever we're drawing.. and Y is free for whatever..
0046E7r 1                     ; first things first, let's figure out where in the buffer to draw.. starting with X location..
0046E7r 1  BD rr rr           LDA OBJECT_LIST_BYTE2_X,X  ;
0046EAr 1  C9 A0              CMP #160
0046ECr 1  B0 F3              BCS @NEXT_OBJECT ; check  outside screen.. left/right...
0046EEr 1  4A                 LSR ; because 16 color, byte address is X>>1
0046EFr 1  BC rr rr           LDY OBJECT_LIST_BYTE3_Y,X  ;  ok cool
0046F2r 1  C0 78              CPY #120 ; check inside screen..
0046F4r 1  B0 EB              BCS @NEXT_OBJECT ;   for now, just skip if outside..
0046F6r 1  79 rr rr           ADC BITMAP_OFFSETS_LOW,Y ; note how this works because carry isn't set.. ?
0046F9r 1  8D 20 9F           STA VERA_addr_low
0046FCr 1  B1 29              LDA (DOLB_Y_CALC_POINTER),Y ; now do the high for the dest..
0046FEr 1  69 00              ADC #0
004700r 1  8D 21 9F           STA VERA_addr_high
004703r 1  EE 25 9F           INC VERA_ctrl  ;  now we need to calculate sprite source address..
004706r 1  BC rr rr           LDY OBJECT_LIST_BYTE1_MODE,X
004709r 1  B9 rr rr           LDA LOW_NIBBLE_HIGH,Y
00470Cr 1  0A                 ASL
00470Dr 1  A8                 TAY
00470Er 1  A9 08              LDA #$08
004710r 1  2A                 ROL
004711r 1  8D 22 9F           STA VERA_addr_bank
004714r 1  98                 TYA
004715r 1  BC rr rr           LDY OBJECT_LIST_BYTE0_ADDRLOW,X
004718r 1  19 rr rr           ORA SPRITE_ADDRESS_LOW_HIGH,Y
00471Br 1  8D 21 9F           STA VERA_addr_high
00471Er 1  B9 rr rr           LDA SPRITE_ADDRESS_LOW_LOW,Y
004721r 1  8D 20 9F           STA VERA_addr_low
004724r 1                  @CHECK_ALIGN:
004724r 1  A0 08              LDY #8
004726r 1  CE 25 9F           DEC VERA_ctrl  ;  regain dest address
004729r 1  AD 20 9F           LDA VERA_addr_low
00472Cr 1  29 03              AND #$03
00472Er 1  F0 07              BEQ @DO_ZERO_RIGHT
004730r 1  0A                 ASL
004731r 1  0A                 ASL
004732r 1  8D 2C 9F           STA FX_MULT
004735r 1  D0 39              BNE @CHECK_OTHER_ALIGNS
004737r 1                  @DO_ZERO_RIGHT:
004737r 1  9C 2C 9F           STZ FX_MULT
00473Ar 1  80 10              BRA :++
00473Cr 1                  :
00473Cr 1  AD 20 9F           LDA VERA_addr_low
00473Fr 1  69 98              ADC #160-8
004741r 1  8D 20 9F           STA VERA_addr_low
004744r 1  AD 21 9F           LDA VERA_addr_high
004747r 1  69 00              ADC #0
004749r 1  8D 21 9F           STA VERA_addr_high
00474Cr 1                  :
00474Cr 1  AD 24 9F           LDA VERA_data1
00474Fr 1  AD 24 9F           LDA VERA_data1
004752r 1  AD 24 9F           LDA VERA_data1
004755r 1  AD 24 9F           LDA VERA_data1
004758r 1  9C 23 9F           STZ VERA_data0
00475Br 1               
00475Br 1  AD 24 9F           LDA VERA_data1
00475Er 1  AD 24 9F           LDA VERA_data1
004761r 1  AD 24 9F           LDA VERA_data1
004764r 1  AD 24 9F           LDA VERA_data1
004767r 1  9C 23 9F           STZ VERA_data0
00476Ar 1  88                 DEY
00476Br 1  D0 CF              BNE :--
00476Dr 1  4C rr rr           JMP @NEXT_OBJECT
004770r 1                  @CHECK_OTHER_ALIGNS:
004770r 1  C9 08              CMP #8   ;  is either 4,8,12
004772r 1  90 18              BCC @DO_ONE_RIGHT
004774r 1  F0 51              BEQ @DO_TWO_RIGHT
004776r 1  EE 20 9F           INC VERA_addr_low
004779r 1  4C rr rr           JMP @DO_THREE_RIGHT
00477Cr 1                   :
00477Cr 1  AD 20 9F           LDA VERA_addr_low
00477Fr 1  69 94              ADC #160-12
004781r 1  8D 20 9F           STA VERA_addr_low
004784r 1  AD 21 9F           LDA VERA_addr_high
004787r 1  69 00              ADC #0
004789r 1  8D 21 9F           STA VERA_addr_high
00478Cr 1                  @DO_ONE_RIGHT:
00478Cr 1  AD 24 9F           LDA VERA_data1
00478Fr 1  AD 24 9F           LDA VERA_data1
004792r 1  AD 24 9F           LDA VERA_data1
004795r 1  A9 03              LDA #%00000011
004797r 1  8D 23 9F           STA VERA_data0
00479Ar 1               
00479Ar 1  AD 24 9F           LDA VERA_data1
00479Dr 1  AD 24 9F           LDA VERA_data1
0047A0r 1  AD 24 9F           LDA VERA_data1
0047A3r 1  AD 24 9F           LDA VERA_data1
0047A6r 1  9C 23 9F           STZ VERA_data0
0047A9r 1               
0047A9r 1  AD 24 9F           LDA VERA_data1
0047ACr 1  A9 FC              LDA #%11111100
0047AEr 1  8D 23 9F           STA VERA_data0
0047B1r 1  88                 DEY
0047B2r 1  D0 C8              BNE :-
0047B4r 1  4C rr rr           JMP @NEXT_OBJECT
0047B7r 1               
0047B7r 1                   :
0047B7r 1  AD 20 9F           LDA VERA_addr_low
0047BAr 1  69 94              ADC #160-12
0047BCr 1  8D 20 9F           STA VERA_addr_low
0047BFr 1  AD 21 9F           LDA VERA_addr_high
0047C2r 1  69 00              ADC #0
0047C4r 1  8D 21 9F           STA VERA_addr_high
0047C7r 1                  @DO_TWO_RIGHT:
0047C7r 1  AD 24 9F           LDA VERA_data1
0047CAr 1  AD 24 9F           LDA VERA_data1
0047CDr 1  A9 0F              LDA #%00001111
0047CFr 1  8D 23 9F           STA VERA_data0
0047D2r 1               
0047D2r 1  AD 24 9F           LDA VERA_data1
0047D5r 1  AD 24 9F           LDA VERA_data1
0047D8r 1  AD 24 9F           LDA VERA_data1
0047DBr 1  AD 24 9F           LDA VERA_data1
0047DEr 1  9C 23 9F           STZ VERA_data0
0047E1r 1               
0047E1r 1  AD 24 9F           LDA VERA_data1
0047E4r 1  AD 24 9F           LDA VERA_data1
0047E7r 1  A9 F0              LDA #%11110000
0047E9r 1  8D 23 9F           STA VERA_data0
0047ECr 1  88                 DEY
0047EDr 1  D0 C8              BNE :-
0047EFr 1  4C rr rr           JMP @NEXT_OBJECT
0047F2r 1               
0047F2r 1                   :
0047F2r 1  AD 20 9F           LDA VERA_addr_low
0047F5r 1  69 94              ADC #160-12
0047F7r 1  8D 20 9F           STA VERA_addr_low
0047FAr 1  AD 21 9F           LDA VERA_addr_high
0047FDr 1  69 00              ADC #0
0047FFr 1  8D 21 9F           STA VERA_addr_high
004802r 1                  @DO_THREE_RIGHT:
004802r 1  AD 24 9F           LDA VERA_data1
004805r 1  A9 3F              LDA #%00111111
004807r 1  8D 23 9F           STA VERA_data0
00480Ar 1               
00480Ar 1  AD 24 9F           LDA VERA_data1
00480Dr 1  AD 24 9F           LDA VERA_data1
004810r 1  AD 24 9F           LDA VERA_data1
004813r 1  AD 24 9F           LDA VERA_data1
004816r 1  9C 23 9F           STZ VERA_data0
004819r 1               
004819r 1  AD 24 9F           LDA VERA_data1
00481Cr 1  AD 24 9F           LDA VERA_data1
00481Fr 1  AD 24 9F           LDA VERA_data1
004822r 1  A9 C0              LDA #%11000000
004824r 1  8D 23 9F           STA VERA_data0
004827r 1  88                 DEY
004828r 1  D0 C8              BNE :-
00482Ar 1  4C rr rr           JMP @NEXT_OBJECT
00482Dr 1               
00482Dr 1                  @OBJ_LOOP:
00482Dr 1  AA                    tax
00482Er 1  18                    CLC
00482Fr 1  BD rr rr              LDA OBJECT_LIST_BYTE2_X,x ;      4     4     grab X
004832r 1  C9 A0                 CMP #160 ;     2     6
004834r 1  90 10                 BCC @X_IS_POS     ;     we're off screen left/right somewhere if BCS
004836r 1                        ; ok we have a neg number of the form X + 256 .. but its really should be X + 320 as a coordinate..
004836r 1                        ; except there's only 160 bytes ... so we're at this Y - this many bytes ..
004836r 1                        ; we could _add_ to go to neg.. but carry is set.. if we subtract low is bad right?
004836r 1                        ;DEC OBJECT_LIST_BYTE3_Y,x
004836r 1  C9 C0                 CMP #192
004838r 1  90 0A                 BCC @NEXT
00483Ar 1  4A                    LSR  ; > 192 to > 96 ...
00483Br 1  18                    CLC
00483Cr 1  69 20                 ADC #32
00483Er 1  BC rr rr              LDY OBJECT_LIST_BYTE3_Y,x ; I think that works..
004841r 1  88                    DEY
004842r 1  80 06                 BRA @X_WAS_NEG
004844r 1                     @NEXT:
004844r 1  D0 E7                 BNE @OBJ_LOOP
004846r 1                      ;  BRA @NEXT_Z
004846r 1                     @X_IS_POS:
004846r 1  4A                    LSR ; 16 colors, so cut in half to get byte reference ;
004847r 1  BC rr rr              LDY OBJECT_LIST_BYTE3_Y,x ; I think that works..
00484Ar 1                     @X_WAS_NEG:
00484Ar 1  C0 78                 CPY #120
00484Cr 1  90 4C                 BCC @Y_IS_POS ; checking if inside screen.. for now we'll bug out if BCS set here..
00484Er 1  C0 C0                 CPY #192
004850r 1  90 F2                 BCC @NEXT
004852r 1                     ; Y is negative here
004852r 1  8D 20 9F              STA VERA_addr_low             ;  y negative, we want to draw screen starting at y=0.. need to move down sprite..
004855r 1  B2 29                 LDA (DOLB_Y_CALC_POINTER)
004857r 1  8D 21 9F              STA VERA_addr_high
00485Ar 1  EE 25 9F              INC VERA_ctrl              ;  Y is 256 + our neg amount... we want that neg amount x8 bytes per line..
00485Dr 1  98                    TYA
00485Er 1  49 FF                 EOR #$FF
004860r 1  69 00                 ADC #0   ;  negated .. amount of sprite to skip.. up to 63!
004862r 1  0A                    ASL ; <127
004863r 1  0A                    ASL ; <255
004864r 1  0A                    ASl ; <511
004865r 1  85 29                 STA DOLB_Y_CALC_POINTER   ;  num bytes from start of sprite..
004867r 1  A9 00                 LDA #0
004869r 1  2A                    ROL
00486Ar 1  85 2A                 STA DOLB_Y_CALC_POINTERH
00486Cr 1               
00486Cr 1  BC rr rr              LDY OBJECT_LIST_BYTE1_MODE,X     ;  4  4
00486Fr 1  B9 rr rr              LDA LOW_NIBBLE_HIGH,Y            ;  4  8  ; | 4 addr HIGH | ....
004872r 1  0A                    ASL                              ;  2  10 ; C AAA .....
004873r 1  BC rr rr              LDY OBJECT_LIST_BYTE0_ADDRLOW,X  ;  4  14
004876r 1  19 rr rr              ORA SPRITE_ADDRESS_LOW_HIGH,Y    ;  4  18
004879r 1  8D 21 9F              STA VERA_addr_high               ;  4  22
00487Cr 1  A9 08                 LDA #$08                         ;  2  24
00487Er 1  2A                    ROL                              ;  2  26
00487Fr 1  8D 22 9F              STA VERA_addr_bank               ;  4  30
004882r 1  B9 rr rr              LDA SPRITE_ADDRESS_LOW_LOW,Y     ;  4  34
004885r 1  65 29                 ADC DOLB_Y_CALC_POINTER
004887r 1  8D 20 9F              STA VERA_addr_low                ;  4  38
00488Ar 1  A5 2A                 LDA DOLB_Y_CALC_POINTERH
00488Cr 1  6D 21 9F              ADC VERA_addr_high
00488Fr 1  8D 21 9F              STA VERA_addr_high
004892r 1  A9 40                 LDA #64
004894r 1  7D rr rr              ADC OBJECT_LIST_BYTE3_Y,X        ;  is neg so this will pop us correctly positive...
004897r 1  A8                    TAY
004898r 1  80 3B                 BRA @DO_SPRITE_LINES   ;  and we jump into the loop there..
00489Ar 1                     @Y_IS_POS:
00489Ar 1  18                    CLC
00489Br 1  79 rr rr              ADC BITMAP_OFFSETS_LOW,y  ; low part
00489Er 1  8D 20 9F              STA VERA_addr_low
0048A1r 1  B1 29                 LDA (DOLB_Y_CALC_POINTER),y ; fetch the high byte
0048A3r 1  69 00                 ADC #0
0048A5r 1  8D 21 9F              STA VERA_addr_high   ;  yep... that's faster...
0048A8r 1               
0048A8r 1                        ; destination set. . now for the source..
0048A8r 1  EE 25 9F              INC VERA_ctrl  ;     set to 5 to select the thing..
0048ABr 1  BC rr rr              LDY OBJECT_LIST_BYTE1_MODE,X     ;  4  4
0048AEr 1  B9 rr rr              LDA LOW_NIBBLE_HIGH,Y            ;  4  8  ; | 4 addr HIGH | ....
0048B1r 1  0A                    ASL                              ;  2  10 ; C AAA .....
0048B2r 1  BC rr rr              LDY OBJECT_LIST_BYTE0_ADDRLOW,X  ;  4  14
0048B5r 1  19 rr rr              ORA SPRITE_ADDRESS_LOW_HIGH,Y    ;  4  18
0048B8r 1  8D 21 9F              STA VERA_addr_high               ;  4  22
0048BBr 1  A9 08                 LDA #$08                         ;  2  24
0048BDr 1  2A                    ROL                              ;  2  26
0048BEr 1  8D 22 9F              STA VERA_addr_bank               ;  4  30
0048C1r 1  B9 rr rr              LDA SPRITE_ADDRESS_LOW_LOW,Y     ;  4  34
0048C4r 1  8D 20 9F              STA VERA_addr_low                ;  4  38
0048C7r 1                     ; here's start of loopy stuff..
0048C7r 1                     ;  how many lines to bottom of screen?
0048C7r 1  A0 40                 LDY #64              ;     copy 16 lines for now..
0048C9r 1  BD rr rr              LDA OBJECT_LIST_BYTE3_Y,X
0048CCr 1  E9 37                 SBC #55 ;  ADD 64 subtract 120 ... +64 - 120 = -56 .. sbc 55 because we don't have carry set
0048CEr 1  90 05                 BCC @DO_SPRITE_LINES    ;  if that was Negative  then entire sprite is on screen..
0048D0r 1                         ;  so say y was originally like 100... so 20 lines should show.. we did 100-56=44 .. to get 20 lines sub 24..?
0048D0r 1                         ; 119 = have 63 want 1 ... hmm.. 44 is $2C %0010 1100 .. we want 20 - %0001 0100 .. .
0048D0r 1  49 3F                 EOR #63  ;  EOR %0011 1111    63 becomes zero, 44 becomes %0001 0011 -> 19 ...
0048D2r 1  69 00                 ADC #0   ;  carry set from before
0048D4r 1  A8                    TAY ; and that's how many lines to do..
0048D5r 1               
0048D5r 1                     @DO_SPRITE_LINES:
0048D5r 1  CE 25 9F              DEC VERA_ctrl
0048D8r 1  A9 31                 LDA #$31      ;   addr0 bank never changes ... its like war .. war never changes..
0048DAr 1               ;         LDA #$11
0048DAr 1  8D 22 9F              STA VERA_addr_bank
0048DDr 1                        ;  now for real fun.. getting set on the cache alignment..
0048DDr 1  AD 20 9F              LDA VERA_addr_low    ;  convenience.. ?
0048E0r 1  29 03                 AND #%00000011       ; is byte alignment.
0048E2r 1  D0 37                 BNE @OTHER_ALIGNED   ;  oops ..
0048E4r 1                     @DO_ALIGNED:
0048E4r 1                   ;     STZ FX_MULT
0048E4r 1  AD 24 9F            : LDA VERA_data1       ;     read 4 bytes / 8 px
0048E7r 1                  ;      STA VERA_data0       ;
0048E7r 1  AD 24 9F              LDA VERA_data1
0048EAr 1                 ;       STA VERA_data0       ;
0048EAr 1  AD 24 9F              LDA VERA_data1
0048EDr 1                ;        STA VERA_data0       ;
0048EDr 1  AD 24 9F              LDA VERA_data1
0048F0r 1               ;         STA VERA_data0       ;
0048F0r 1  9C 23 9F              STZ VERA_data0       ;     trigger cache write
0048F3r 1               
0048F3r 1  AD 24 9F              LDA VERA_data1       ;     read 4 bytes / 8 px
0048F6r 1                  ;      STA VERA_data0       ;
0048F6r 1  AD 24 9F              LDA VERA_data1
0048F9r 1                 ;       STA VERA_data0       ;
0048F9r 1  AD 24 9F              LDA VERA_data1
0048FCr 1                ;        STA VERA_data0       ;
0048FCr 1  AD 24 9F              LDA VERA_data1
0048FFr 1               ;         STA VERA_data0       ;
0048FFr 1  9C 23 9F              STZ VERA_data0       ;     trigger cache write
004902r 1               
004902r 1  AD 20 9F              LDA VERA_addr_low
004905r 1  69 98                 ADC #160-8
004907r 1  8D 20 9F              STA VERA_addr_low
00490Ar 1  AD 21 9F              LDA VERA_addr_high
00490Dr 1  69 00                 ADC #0
00490Fr 1  8D 21 9F              STA VERA_addr_high
004912r 1  88                    DEY
004913r 1  D0 CF                 BNE :-
004915r 1               
004915r 1  BD rr rr              LDA OBJECT_LIST_BYTE6_NEXT,x     ;     time to cycle to next
004918r 1  4C rr rr              JMP @OBJ_LOOP
00491Br 1                     @OTHER_ALIGNED:
00491Br 1  0A                    ASL ; x align off X2
00491Cr 1  0A                    ASL ; x align off X4
00491Dr 1  8D 2C 9F              STA FX_MULT
004920r 1  C9 04                 CMP #4    ;  align value is either 2, 4 or 6...
004922r 1  F0 40                 BEQ @DO_RIGHT2
004924r 1  B0 7C                 BCS @DO_RIGHT3
004926r 1                     @DO_RIGHT1:
004926r 1                     :
004926r 1  AD 24 9F              LDA VERA_data1
004929r 1  AD 24 9F              LDA VERA_data1
00492Cr 1  AD 24 9F              LDA VERA_data1
00492Fr 1  A9 FC                 LDA #%11111100    ;  .012
004931r 1  8D 23 9F              STA VERA_data0
004934r 1               
004934r 1  AD 24 9F              LDA VERA_data1
004937r 1  AD 24 9F              LDA VERA_data1
00493Ar 1  AD 24 9F              LDA VERA_data1
00493Dr 1  AD 24 9F              LDA VERA_data1
004940r 1  9C 23 9F              STZ VERA_data0    ;  3456
004943r 1               
004943r 1  AD 24 9F              LDA VERA_data1
004946r 1  A9 03                 LDA #%00000011
004948r 1  8D 23 9F              STA VERA_data0    ;  7
00494Br 1               
00494Br 1  AD 20 9F              LDA VERA_addr_low
00494Er 1  69 94                 ADC #160-12
004950r 1  8D 20 9F              STA VERA_addr_low
004953r 1  AD 21 9F              LDA VERA_addr_high
004956r 1  69 00                 ADC #0
004958r 1  8D 21 9F              STA VERA_addr_high
00495Br 1               
00495Br 1  88                    DEY
00495Cr 1  D0 C8                 BNE :-
00495Er 1  BD rr rr              LDA OBJECT_LIST_BYTE6_NEXT,x
004961r 1  4C rr rr              JMP @OBJ_LOOP
004964r 1                     @DO_RIGHT2:
004964r 1                     :
004964r 1  AD 24 9F              LDA VERA_data1
004967r 1  AD 24 9F              LDA VERA_data1
00496Ar 1  A9 F0                 LDA #%11110000    ;  ..01
00496Cr 1  8D 23 9F              STA VERA_data0
00496Fr 1               
00496Fr 1  AD 24 9F              LDA VERA_data1
004972r 1  AD 24 9F              LDA VERA_data1
004975r 1  AD 24 9F              LDA VERA_data1
004978r 1  AD 24 9F              LDA VERA_data1
00497Br 1  9C 23 9F              STZ VERA_data0    ;  2345
00497Er 1               
00497Er 1  AD 24 9F              LDA VERA_data1
004981r 1  AD 24 9F              LDA VERA_data1
004984r 1  A9 0F                 LDA #%00001111
004986r 1  8D 23 9F              STA VERA_data0    ;  67..
004989r 1               
004989r 1  AD 20 9F              LDA VERA_addr_low
00498Cr 1  69 94                 ADC #160-12
00498Er 1  8D 20 9F              STA VERA_addr_low
004991r 1  AD 21 9F              LDA VERA_addr_high
004994r 1  69 00                 ADC #0
004996r 1  8D 21 9F              STA VERA_addr_high
004999r 1               
004999r 1  88                    DEY
00499Ar 1  D0 C8                 BNE :-
00499Cr 1  BD rr rr              LDA OBJECT_LIST_BYTE6_NEXT,x
00499Fr 1  4C rr rr              JMP @OBJ_LOOP
0049A2r 1                     @DO_RIGHT3:
0049A2r 1                     :
0049A2r 1  AD 24 9F              LDA VERA_data1
0049A5r 1  A9 C0                 LDA #%11000000    ;  ...0
0049A7r 1  8D 23 9F              STA VERA_data0
0049AAr 1               
0049AAr 1  AD 24 9F              LDA VERA_data1
0049ADr 1  AD 24 9F              LDA VERA_data1
0049B0r 1  AD 24 9F              LDA VERA_data1
0049B3r 1  AD 24 9F              LDA VERA_data1
0049B6r 1  9C 23 9F              STZ VERA_data0    ;  1234
0049B9r 1               
0049B9r 1  AD 24 9F              LDA VERA_data1
0049BCr 1  AD 24 9F              LDA VERA_data1
0049BFr 1  AD 24 9F              LDA VERA_data1
0049C2r 1  A9 3F                 LDA #%00111111
0049C4r 1  8D 23 9F              STA VERA_data0    ;  567.
0049C7r 1               
0049C7r 1  AD 20 9F              LDA VERA_addr_low
0049CAr 1  69 94                 ADC #160-12
0049CCr 1  8D 20 9F              STA VERA_addr_low
0049CFr 1  AD 21 9F              LDA VERA_addr_high
0049D2r 1  69 00                 ADC #0
0049D4r 1  8D 21 9F              STA VERA_addr_high
0049D7r 1               
0049D7r 1  88                    DEY
0049D8r 1  D0 C8                 BNE :-
0049DAr 1  BD rr rr              LDA OBJECT_LIST_BYTE6_NEXT,x
0049DDr 1  4C rr rr              JMP @OBJ_LOOP
0049E0r 1               
0049E0r 1               test_optimal_pal_data:
0049E0r 1               ;      GB   R  $1:FA00-$1:FBFF   VERA Color Palette (256 x 2 bytes)
0049E0r 1  00 00        .byte $00,$00  ; 0 - black/transparent
0049E2r 1  C8 0F        .byte $c8,$0f  ; 1 #ffcc88
0049E4r 1  04 06        .byte $04,$06  ; 2 #660044
0049E6r 1  00 0C        .byte $00,$0C  ; 3  #cc0000
0049E8r 1  F0 0C        .byte $F0,$0C  ; 4#ccff00
0049EAr 1  42 03        .byte $42,$03
0049ECr 1  60 0C        .byte $60,$0c   ; 6  #cc6600
0049EEr 1  40 08        .byte $40,$08   ; 7 #884400
0049F0r 1  C0 0C        .byte $c0,$0c   ; 8 #cccc00
0049F2r 1  6A 02        .byte $6a,$02   ; 9 #2266aa mid blue
0049F4r 1  C0 00        .byte $c0,$00   ; A #00cc00
0049F6r 1  AC 07        .byte $ac,$07   ; B #77aacc light blue
0049F8r 1  C0 00        .byte $c0,$00   ; C #0000c0 dark blue
0049FAr 1  0C 0C        .byte $0c,$0c   ; D #cc00cc
0049FCr 1  88 08        .byte $88,$08   ; E #888888
0049FEr 1  22 02        .byte $22,$02   ; F #222222
004A00r 1               
004A00r 1               test_vram_data:
004A00r 1               ; 70 to 127 - start of 16x16 (each 128 byte) for testing directions / sizing..
004A00r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11  ;  0-15 16x10 -  0
004A04r 1  11 11 11 11  
004A08r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
004A0Cr 1  FF FF FF F1  
004A10r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
004A14r 1  FF FF FF F1  
004A18r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
004A1Cr 1  FF FF FF F1  
004A20r 1  1F FF FF F1  .byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$F1
004A24r 1  FF FF FF F1  
004A28r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
004A2Cr 1  FF FF FF F1  
004A30r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
004A34r 1  FF FF FF F1  
004A38r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
004A3Cr 1  FF FF FF F1  
004A40r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
004A44r 1  FF FF FF F1  
004A48r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11
004A4Cr 1  11 11 11 11  
004A50r 1  55 55 55 55  .repeat 54
004A54r 1  55 55 55 55  
004A58r 1  55 55 55 55  
004C00r 1               .res 8,$55
004C00r 1               .endrepeat
004C00r 1               
004C00r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11  ;  16-31    16x10 -  0 trans
004C04r 1  11 11 11 11  
004C08r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
004C0Cr 1  F0 F0 F0 F1  
004C10r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
004C14r 1  0F 0F 0F 01  
004C18r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
004C1Cr 1  F0 F0 F0 F1  
004C20r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
004C24r 1  0F 0F 0F 01  
004C28r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
004C2Cr 1  F0 F0 F0 F1  
004C30r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
004C34r 1  0F 0F 0F 01  
004C38r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
004C3Cr 1  F0 F0 F0 F1  
004C40r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
004C44r 1  0F 0F 0F 01  
004C48r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11
004C4Cr 1  11 11 11 11  
004C50r 1  50 50 50 50  .repeat 27
004C54r 1  50 50 50 50  
004C58r 1  05 05 05 05  
004E00r 1               .res 8,$50
004E00r 1               .res 8,$05
004E00r 1               .endrepeat
004E00r 1               
004E00r 1               
004E00r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11  ;  32-47    16x11 -  4
004E04r 1  11 11 11 11  
004E08r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
004E0Cr 1  FF FF FF F1  
004E10r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
004E14r 1  FF FF FF F1  
004E18r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
004E1Cr 1  FF FF FF F1  
004E20r 1  1F FF FF F1  .byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$F1
004E24r 1  FF FF FF F1  
004E28r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
004E2Cr 1  FF FF FF F1  
004E30r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
004E34r 1  FF FF FF F1  
004E38r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
004E3Cr 1  FF FF FF F1  
004E40r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
004E44r 1  FF FF FF F1  
004E48r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
004E4Cr 1  FF FF FF F1  
004E50r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11
004E54r 1  11 11 11 11  
004E58r 1  55 55 55 55  .repeat 53
004E5Cr 1  55 55 55 55  
004E60r 1  55 55 55 55  
005000r 1               .res 8,$55
005000r 1               .endrepeat
005000r 1               
005000r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11  ;  48-63    16x11 -  4 trans
005004r 1  11 11 11 11  
005008r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
00500Cr 1  F0 F0 F0 F1  
005010r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
005014r 1  0F 0F 0F 01  
005018r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
00501Cr 1  F0 F0 F0 F1  
005020r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
005024r 1  0F 0F 0F 01  
005028r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
00502Cr 1  F0 F0 F0 F1  
005030r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
005034r 1  0F 0F 0F 01  
005038r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
00503Cr 1  F0 F0 F0 F1  
005040r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
005044r 1  0F 0F 0F 01  
005048r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
00504Cr 1  F0 F0 F0 F1  
005050r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11
005054r 1  11 11 11 11  
005058r 1  05 05 05 05  .res 7,$05
00505Cr 1  05 05 05     
00505Fr 1  00           .byte 0
005060r 1  50 50 50 50  .repeat 26
005064r 1  50 50 50 50  
005068r 1  05 05 05 05  
005200r 1               .res 8,$50
005200r 1               .res 7,$05
005200r 1               .byte 0
005200r 1               .endrepeat
005200r 1               
005200r 1               
005200r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10  ;  64-79    15x11 - 10
005204r 1  11 11 11 10  
005208r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
00520Cr 1  FF FF FF 10  
005210r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
005214r 1  FF FF FF 10  
005218r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
00521Cr 1  FF FF FF 10  
005220r 1  1F FF FF F1  .byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$10
005224r 1  FF FF FF 10  
005228r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
00522Cr 1  FF FF FF 10  
005230r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
005234r 1  FF FF FF 10  
005238r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
00523Cr 1  FF FF FF 10  
005240r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
005244r 1  FF FF FF 10  
005248r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
00524Cr 1  FF FF FF 10  
005250r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
005254r 1  11 11 11 10  
005258r 1  55 55 55 55  .repeat 53
00525Cr 1  55 55 55 50  
005260r 1  55 55 55 55  
005400r 1               .res 7,$55
005400r 1               .byte $50
005400r 1               .endrepeat
005400r 1               
005400r 1               
005400r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10  ;  80-95    15x11 - 10 trans
005404r 1  11 11 11 10  
005408r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
00540Cr 1  F0 F0 F0 10  
005410r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
005414r 1  0F 0F 0F 10  
005418r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
00541Cr 1  F0 F0 F0 10  
005420r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
005424r 1  0F 0F 0F 10  
005428r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
00542Cr 1  F0 F0 F0 10  
005430r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
005434r 1  0F 0F 0F 10  
005438r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
00543Cr 1  F0 F0 F0 10  
005440r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
005444r 1  0F 0F 0F 10  
005448r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
00544Cr 1  F0 F0 F0 10  
005450r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
005454r 1  11 11 11 10  
005458r 1  05 05 05 05  .res 7,$05
00545Cr 1  05 05 05     
00545Fr 1  00           .byte 0
005460r 1  50 50 50 50  .repeat 26
005464r 1  50 50 50 50  
005468r 1  05 05 05 05  
005600r 1               .res 8,$50
005600r 1               .res 7,$05
005600r 1               .byte 0
005600r 1               .endrepeat
005600r 1               
005600r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10  ;  96-111    15x12 - 18
005604r 1  11 11 11 10  
005608r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
00560Cr 1  FF FF FF 10  
005610r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
005614r 1  FF FF FF 10  
005618r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
00561Cr 1  FF FF FF 10  
005620r 1  1F FF FF F1  .byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$10
005624r 1  FF FF FF 10  
005628r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
00562Cr 1  FF FF FF 10  
005630r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
005634r 1  FF FF FF 10  
005638r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
00563Cr 1  FF FF FF 10  
005640r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
005644r 1  FF FF FF 10  
005648r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
00564Cr 1  FF FF FF 10  
005650r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
005654r 1  FF FF FF 10  
005658r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
00565Cr 1  11 11 11 10  
005660r 1  55 55 55 55  .repeat 52
005664r 1  55 55 55 50  
005668r 1  55 55 55 55  
005800r 1               .res 7,$55
005800r 1               .byte $50
005800r 1               .endrepeat
005800r 1               
005800r 1               
005800r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10  ;  112-127    15x12 - 18 trans
005804r 1  11 11 11 10  
005808r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
00580Cr 1  F0 F0 F0 10  
005810r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
005814r 1  0F 0F 0F 10  
005818r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
00581Cr 1  F0 F0 F0 10  
005820r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
005824r 1  0F 0F 0F 10  
005828r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
00582Cr 1  F0 F0 F0 10  
005830r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
005834r 1  0F 0F 0F 10  
005838r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
00583Cr 1  F0 F0 F0 10  
005840r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
005844r 1  0F 0F 0F 10  
005848r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
00584Cr 1  F0 F0 F0 10  
005850r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
005854r 1  0F 0F 0F 10  
005858r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
00585Cr 1  11 11 11 10  
005860r 1  50 50 50 50  .repeat 26
005864r 1  50 50 50 50  
005868r 1  05 05 05 05  
005A00r 1               .res 8,$50
005A00r 1               .res 7,$05
005A00r 1               .byte 0
005A00r 1               .endrepeat
005A00r 1               
005A00r 1               ; alernate tile graphic to use for tub wall .. 128-143 ; 16x tile
005A00r 1  16 16 16 16  .repeat 32
005A04r 1  16 16 16 16  
005A08r 1  61 61 61 61  
005C00r 1                   .byte $16, $16, $16, $16, $16, $16, $16, $16
005C00r 1                   .byte $61, $61, $61, $61, $61, $61, $61, $61
005C00r 1               .endrepeat
005C00r 1               
005C00r 1  10 10 10 10  .repeat 32  ;  144-159
005C04r 1  10 10 10 10  
005C08r 1  06 06 06 06  
005E00r 1                   .byte $10, $10, $10, $10, $10, $10, $10, $10
005E00r 1                   .byte $06, $06, $06, $06, $06, $06, $06, $06
005E00r 1               .endrepeat
005E00r 1               
005E00r 1               
005E00r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$00  ;  160-175    14x12
005E04r 1  11 11 11 00  
005E08r 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$fF,$FF,$F1,$00
005E0Cr 1  FF FF F1 00  
005E10r 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$fF,$FF,$F1,$00
005E14r 1  FF FF F1 00  
005E18r 1  1F FF FF FF  .byte $1f,$FF,$ff,$Ff,$Ff,$fF,$F1,$00
005E1Cr 1  FF FF F1 00  
005E20r 1  1F FF FF F1  .byte $1f,$FF,$FF,$f1,$fF,$FF,$F1,$00
005E24r 1  FF FF F1 00  
005E28r 1  1F FF FF FF  .byte $1f,$FF,$FF,$Ff,$Ff,$fF,$F1,$00
005E2Cr 1  FF FF F1 00  
005E30r 1  1F FF FF FF  .byte $1f,$FF,$FF,$fF,$FF,$FF,$F1,$00
005E34r 1  FF FF F1 00  
005E38r 1  1F FF FF FF  .byte $1f,$FF,$FF,$fF,$FF,$FF,$F1,$00
005E3Cr 1  FF FF F1 00  
005E40r 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$FF,$FF,$F1,$00
005E44r 1  FF FF F1 00  
005E48r 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$FF,$FF,$F1,$00
005E4Cr 1  FF FF F1 00  
005E50r 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$FF,$FF,$F1,$00
005E54r 1  FF FF F1 00  
005E58r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$00
005E5Cr 1  11 11 11 00  
005E60r 1  55 55 55 55  .repeat 52
005E64r 1  55 55 55 00  
005E68r 1  55 55 55 55  
006000r 1               .res 7,$55
006000r 1               .byte 0
006000r 1               .endrepeat
006000r 1               
006000r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$00  ;  176-191
006004r 1  11 11 11 00  
006008r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
00600Cr 1  F0 F0 F0 10  
006010r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
006014r 1  0F 0F 0F 10  
006018r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
00601Cr 1  F0 F0 F0 10  
006020r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
006024r 1  0F 0F 0F 10  
006028r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
00602Cr 1  F0 F0 F0 10  
006030r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
006034r 1  0F 0F 0F 10  
006038r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
00603Cr 1  F0 F0 F0 10  
006040r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
006044r 1  0F 0F 0F 10  
006048r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
00604Cr 1  F0 F0 F0 10  
006050r 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
006054r 1  0F 0F 0F 10  
006058r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
00605Cr 1  11 11 11 10  
006060r 1  50 50 50 50  .repeat 26
006064r 1  50 50 50 50  
006068r 1  05 05 05 05  
006200r 1               .res 8,$50
006200r 1               .res 7,$05
006200r 1               .byte 0
006200r 1               .endrepeat
006200r 1               
006200r 1               ; alernate tile graphic to use for tub wall .. 192-223 ; 15x tile
006200r 1  16 16 16 16  .repeat 32
006204r 1  16 16 16 10  
006208r 1  61 61 61 61  
006400r 1                   .byte $16, $16, $16, $16, $16, $16, $16, $10
006400r 1                   .byte $61, $61, $61, $61, $61, $61, $61, $60
006400r 1               .endrepeat
006400r 1               
006400r 1  10 10 10 10  .repeat 32  ;  144-159
006404r 1  10 10 10 10  
006408r 1  06 06 06 06  
006600r 1                   .byte $10, $10, $10, $10, $10, $10, $10, $10
006600r 1                   .byte $06, $06, $06, $06, $06, $06, $06, $00
006600r 1               .endrepeat
006600r 1               
006600r 1               
006600r 1               ; alernate tile graphic to use for tub wall .. 224 ; 14x tile
006600r 1  16 16 16 16  .repeat 32
006604r 1  16 16 16 00  
006608r 1  61 61 61 61  
006800r 1                   .byte $16, $16, $16, $16, $16, $16, $16, $00
006800r 1                   .byte $61, $61, $61, $61, $61, $61, $61, $00
006800r 1               .endrepeat
006800r 1               
006800r 1  10 10 10 10  .repeat 32  ;  144-159
006804r 1  10 10 10 00  
006808r 1  06 06 06 06  
006A00r 1                   .byte $10, $10, $10, $10, $10, $10, $10, $00
006A00r 1                   .byte $06, $06, $06, $06, $06, $06, $06, $00
006A00r 1               .endrepeat
006A00r 1               
006A00r 1               
006A00r 1               
006A00r 1               HEX_DISPLAY_FONT:       ; 8x8x16 color = 32 bytes ... sprite addr 256
006A00r 1               ;     01   23   45   67
006A00r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 0
006A04r 1  01 00 00 10  .byte $01, $00, $00, $10
006A08r 1  01 00 00 10  .byte $01, $00, $00, $10
006A0Cr 1  00 00 00 00  .byte $00, $00, $00, $00
006A10r 1  01 00 00 10  .byte $01, $00, $00, $10
006A14r 1  01 00 00 10  .byte $01, $00, $00, $10
006A18r 1  01 00 00 10  .byte $01, $00, $00, $10
006A1Cr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 0 /
006A20r 1               
006A20r 1  00 00 00 00  .byte $00, $00, $00, $00 ; 1
006A24r 1  00 00 00 10  .byte $00, $00, $00, $10
006A28r 1  00 00 00 10  .byte $00, $00, $00, $10
006A2Cr 1  00 00 00 00  .byte $00, $00, $00, $00
006A30r 1  00 00 00 10  .byte $00, $00, $00, $10
006A34r 1  00 00 00 10  .byte $00, $00, $00, $10
006A38r 1  00 00 00 10  .byte $00, $00, $00, $10
006A3Cr 1  00 00 00 00  .byte $00, $00, $00, $00
006A40r 1               
006A40r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 2
006A44r 1  00 00 00 10  .byte $00, $00, $00, $10
006A48r 1  00 00 00 10  .byte $00, $00, $00, $10
006A4Cr 1  00 11 11 00  .byte $00, $11, $11, $00
006A50r 1  01 00 00 00  .byte $01, $00, $00, $00
006A54r 1  01 00 00 00  .byte $01, $00, $00, $00
006A58r 1  01 00 00 00  .byte $01, $00, $00, $00
006A5Cr 1  00 11 11 00  .byte $00, $11, $11, $00
006A60r 1               
006A60r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 3
006A64r 1  00 00 00 10  .byte $00, $00, $00, $10
006A68r 1  00 00 00 10  .byte $00, $00, $00, $10
006A6Cr 1  00 11 11 00  .byte $00, $11, $11, $00
006A70r 1  00 00 00 10  .byte $00, $00, $00, $10
006A74r 1  00 00 00 10  .byte $00, $00, $00, $10
006A78r 1  00 00 00 10  .byte $00, $00, $00, $10
006A7Cr 1  00 11 11 00  .byte $00, $11, $11, $00
006A80r 1               
006A80r 1  00 00 00 00  .byte $00, $00, $00, $00   ; 4
006A84r 1  01 00 00 10  .byte $01, $00, $00, $10
006A88r 1  01 00 00 10  .byte $01, $00, $00, $10
006A8Cr 1  00 11 11 00  .byte $00, $11, $11, $00
006A90r 1  00 00 00 10  .byte $00, $00, $00, $10
006A94r 1  00 00 00 10  .byte $00, $00, $00, $10
006A98r 1  00 00 00 10  .byte $00, $00, $00, $10
006A9Cr 1  00 00 00 00  .byte $00, $00, $00, $00
006AA0r 1               
006AA0r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 5
006AA4r 1  01 00 00 00  .byte $01, $00, $00, $00
006AA8r 1  01 00 00 00  .byte $01, $00, $00, $00
006AACr 1  00 11 11 00  .byte $00, $11, $11, $00
006AB0r 1  00 00 00 10  .byte $00, $00, $00, $10
006AB4r 1  00 00 00 10  .byte $00, $00, $00, $10
006AB8r 1  00 00 00 10  .byte $00, $00, $00, $10
006ABCr 1  00 11 11 00  .byte $00, $11, $11, $00
006AC0r 1               
006AC0r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 6
006AC4r 1  01 00 00 00  .byte $01, $00, $00, $00
006AC8r 1  01 00 00 00  .byte $01, $00, $00, $00
006ACCr 1  00 11 11 00  .byte $00, $11, $11, $00
006AD0r 1  01 00 00 10  .byte $01, $00, $00, $10
006AD4r 1  01 00 00 10  .byte $01, $00, $00, $10
006AD8r 1  01 00 00 10  .byte $01, $00, $00, $10
006ADCr 1  00 11 11 00  .byte $00, $11, $11, $00
006AE0r 1               
006AE0r 1  00 01 01 00  .byte $00, $01, $01, $00 ; 7
006AE4r 1  00 00 00 10  .byte $00, $00, $00, $10
006AE8r 1  00 00 00 10  .byte $00, $00, $00, $10
006AECr 1  00 00 00 00  .byte $00, $00, $00, $00
006AF0r 1  00 00 00 10  .byte $00, $00, $00, $10
006AF4r 1  00 00 00 10  .byte $00, $00, $00, $10
006AF8r 1  00 00 00 10  .byte $00, $00, $00, $10
006AFCr 1  00 00 00 00  .byte $00, $00, $00, $00
006B00r 1               
006B00r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 8
006B04r 1  01 00 00 10  .byte $01, $00, $00, $10
006B08r 1  01 00 00 10  .byte $01, $00, $00, $10
006B0Cr 1  00 11 11 00  .byte $00, $11, $11, $00
006B10r 1  01 00 00 10  .byte $01, $00, $00, $10
006B14r 1  01 00 00 10  .byte $01, $00, $00, $10
006B18r 1  01 00 00 10  .byte $01, $00, $00, $10
006B1Cr 1  00 11 11 00  .byte $00, $11, $11, $00
006B20r 1               
006B20r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 9
006B24r 1  01 00 00 10  .byte $01, $00, $00, $10
006B28r 1  01 00 00 10  .byte $01, $00, $00, $10
006B2Cr 1  00 11 11 00  .byte $00, $11, $11, $00
006B30r 1  00 00 00 10  .byte $00, $00, $00, $10
006B34r 1  00 00 00 10  .byte $00, $00, $00, $10
006B38r 1  00 00 00 10  .byte $00, $00, $00, $10
006B3Cr 1  00 11 11 00  .byte $00, $11, $11, $00
006B40r 1               
006B40r 1  00 11 11 00  .byte $00, $11, $11, $00   ; A
006B44r 1  01 00 00 10  .byte $01, $00, $00, $10
006B48r 1  01 00 00 10  .byte $01, $00, $00, $10
006B4Cr 1  00 11 11 00  .byte $00, $11, $11, $00
006B50r 1  01 00 00 10  .byte $01, $00, $00, $10
006B54r 1  01 00 00 10  .byte $01, $00, $00, $10
006B58r 1  01 00 00 10  .byte $01, $00, $00, $10
006B5Cr 1  00 00 00 00  .byte $00, $00, $00, $00
006B60r 1               
006B60r 1               
006B60r 1  00 00 00 00  .byte $00, $00, $00, $00   ; B
006B64r 1  01 00 00 00  .byte $01, $00, $00, $00
006B68r 1  01 00 00 00  .byte $01, $00, $00, $00
006B6Cr 1  00 11 11 00  .byte $00, $11, $11, $00
006B70r 1  01 00 00 10  .byte $01, $00, $00, $10
006B74r 1  01 00 00 10  .byte $01, $00, $00, $10
006B78r 1  01 00 00 10  .byte $01, $00, $00, $10
006B7Cr 1  00 11 11 00  .byte $00, $11, $11, $00
006B80r 1               
006B80r 1  00 11 11 00  .byte $00, $11, $11, $00   ; C
006B84r 1  01 00 00 00  .byte $01, $00, $00, $00
006B88r 1  01 00 00 00  .byte $01, $00, $00, $00
006B8Cr 1  00 00 00 00  .byte $00, $00, $00, $00
006B90r 1  01 00 00 00  .byte $01, $00, $00, $00
006B94r 1  01 00 00 00  .byte $01, $00, $00, $00
006B98r 1  01 00 00 00  .byte $01, $00, $00, $00
006B9Cr 1  00 11 11 00  .byte $00, $11, $11, $00
006BA0r 1               
006BA0r 1  00 00 00 00  .byte $00, $00, $00, $00   ; D
006BA4r 1  00 00 00 10  .byte $00, $00, $00, $10
006BA8r 1  00 00 00 10  .byte $00, $00, $00, $10
006BACr 1  00 11 11 00  .byte $00, $11, $11, $00
006BB0r 1  01 00 00 10  .byte $01, $00, $00, $10
006BB4r 1  01 00 00 10  .byte $01, $00, $00, $10
006BB8r 1  01 00 00 10  .byte $01, $00, $00, $10
006BBCr 1  00 11 11 00  .byte $00, $11, $11, $00
006BC0r 1               
006BC0r 1  00 11 11 00  .byte $00, $11, $11, $00   ; E
006BC4r 1  01 00 00 00  .byte $01, $00, $00, $00
006BC8r 1  01 00 00 00  .byte $01, $00, $00, $00
006BCCr 1  00 11 11 00  .byte $00, $11, $11, $00
006BD0r 1  01 00 00 00  .byte $01, $00, $00, $00
006BD4r 1  01 00 00 00  .byte $01, $00, $00, $00
006BD8r 1  01 00 00 00  .byte $01, $00, $00, $00
006BDCr 1  00 11 11 00  .byte $00, $11, $11, $00
006BE0r 1               
006BE0r 1  00 11 11 00  .byte $00, $11, $11, $00   ; F   sprite addr 48
006BE4r 1  01 00 00 00  .byte $01, $00, $00, $00
006BE8r 1  01 00 00 00  .byte $01, $00, $00, $00
006BECr 1  00 11 11 00  .byte $00, $11, $11, $00
006BF0r 1  01 00 00 00  .byte $01, $00, $00, $00
006BF4r 1  01 00 00 00  .byte $01, $00, $00, $00
006BF8r 1  01 00 00 00  .byte $01, $00, $00, $00
006BFCr 1  00 00 00 00  .byte $00, $00, $00, $00
006C00r 1               
006C00r 1               test_cell_sprite:    ;  is 16x64x16 bit = 512 bytes   sprite addr = 10
006C00r 1               ;     01   23   45   67   89   AB   CD   EF
006C00r 1  CC C9 CC C9  .byte $CC, $C9, $CC, $C9, $CC, $C9, $CC, $C0    ;  0
006C04r 1  CC C9 CC C0  
006C08r 1  09 9B 99 9B  .byte $09, $9B, $99, $9B, $99, $9B, $99, $9C    ;  1
006C0Cr 1  99 9B 99 9C  
006C10r 1  CB BC BB BC  .byte $CB, $BC, $BB, $BC, $BB, $BC, $BB, $B0    ;  2
006C14r 1  BB BC BB B0  
006C18r 1  0C C9 CC C9  .byte $0C, $C9, $CC, $C9, $CC, $C9, $CC, $CC    ;  3
006C1Cr 1  CC C9 CC CC  
006C20r 1  C9 9B 99 9B  .byte $C9, $9B, $99, $9B, $99, $9B, $99, $90    ;  4
006C24r 1  99 9B 99 90  
006C28r 1  0B BC BB BC  .byte $0B, $BC, $BB, $BC, $BB, $BC, $BB, $BC    ;  5
006C2Cr 1  BB BC BB BC  
006C30r 1  CC C9 CC C9  .byte $CC, $C9, $CC, $C9, $CC, $C9, $CC, $C0    ;  6
006C34r 1  CC C9 CC C0  
006C38r 1  09 9B 99 9B  .byte $09, $9B, $99, $9B, $99, $9B, $99, $9C    ;  7
006C3Cr 1  99 9B 99 9C  
006C40r 1  CB BC BB BC  .byte $CB, $BC, $BB, $BC, $BB, $BC, $BB, $B0    ;  8 ; 45* is 9.5 ..
006C44r 1  BB BC BB B0  
006C48r 1  0C 09 0C 09  .byte $0C, $09, $0C, $09, $0C, $09, $0C, $0C    ;  9
006C4Cr 1  0C 09 0C 0C  
006C50r 1  09 90 09 90  .byte $09, $90, $09, $90, $09, $90, $09, $90   ;  10
006C54r 1  09 90 09 90  
006C58r 1  0E 9E E9 9E  .byte $0E, $9E, $E9, $9E, $E9, $9E, $E9, $9E   ;  11
006C5Cr 1  E9 9E E9 9E  
006C60r 1               
006C60r 1  EE EE EE EE  .repeat 13
006C64r 1  EE EE EE E0  
006C68r 1  0E EE 66 EE  
006E00r 1                   .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $E0    ;  12
006E00r 1                   .byte $0E, $EE, $66, $EE, $EE, $66, $EE, $EE    ;
006E00r 1                   .byte $EE, $66, $EE, $66, $66, $EE, $66, $E0    ;
006E00r 1                   .byte $06, $EE, $EE, $EE, $EE, $EE, $EE, $66    ;
006E00r 1               .endrepeat
006E00r 1               
006E00r 1               test_border: ; 32
006E00r 1  0B 0B 0B 0B  .repeat 64
006E04r 1  B0 B0 B0 B0  
006E08r 1  0B 0B 0B 0B  
007000r 1                  .res 4, $0B
007000r 1                  .res 4, $B0
007000r 1               .endrepeat
007000r 1               
007000r 1               test_cross_hair_8x8:    ;  8x8x16 color = 32 bytes ; sprite 96
007000r 1               ;     01   23   45   67
007000r 1  11 00 00 11  .byte $11, $00, $00, $11
007004r 1  10 00 00 01  .byte $10, $00, $00, $01
007008r 1  00 00 00 00  .byte $00, $00, $00, $00
00700Cr 1  00 01 10 00  .byte $00, $01, $10, $00
007010r 1  00 01 10 00  .byte $00, $01, $10, $00
007014r 1  00 00 00 00  .byte $00, $00, $00, $00
007018r 1  10 00 00 01  .byte $10, $00, $00, $01
00701Cr 1  11 00 00 11  .byte $11, $00, $00, $11
007020r 1               
007020r 1  00 00 00 00  .byte $00, $00, $00, $00  ;  bearing label   sprite addr 97
007024r 1  00 00 01 00  .byte $00, $00, $01, $00
007028r 1  00 00 10 00  .byte $00, $00, $10, $00
00702Cr 1  00 01 00 00  .byte $00, $01, $00, $00
007030r 1  00 10 00 00  .byte $00, $10, $00, $00
007034r 1  01 00 00 00  .byte $01, $00, $00, $00
007038r 1  11 11 11 00  .byte $11, $11, $11, $00
00703Cr 1  00 00 00 00  .byte $00, $00, $00, $00
007040r 1               
007040r 1               ; cell position label sprite addr 50-57
007040r 1  00 FF 00 FF  .byte $00,$FF,$00,$FF,$FF,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
007044r 1  FF 00 FF 00  
007048r 1  00 FF 00 00  
007060r 1  FF 00 00 FF  .byte $FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
007064r 1  00 00 FF 00  
007068r 1  00 FF 00 00  
007080r 1  FF 00 00 FF  .byte $FF,$00,$00,$FF,$FF,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
007084r 1  FF 00 FF 00  
007088r 1  00 FF 00 00  
0070A0r 1  FF 00 00 FF  .byte $FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0070A4r 1  00 00 FF 00  
0070A8r 1  00 FF 00 00  
0070C0r 1  00 FF 00 FF  .byte $00,$FF,$00,$FF,$FF,$00,$FF,$FF,$00,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0070C4r 1  FF 00 FF FF  
0070C8r 1  00 FF FF 00  
0070E0r 1               ;      01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF
0070E0r 1               ;     XH                               $XL                            ___  __  YH                              YL
0070E0r 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$00,$00,$10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00
0070E4r 1  00 00 00 00  
0070E8r 1  10 10 10 00  
007100r 1  01 00 11 10  .byte $01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00
007104r 1  00 00 00 00  
007108r 1  01 00 10 00  
007120r 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$11,$10,$00,$00,$00,$00,$00,$00,$01,$00,$10,$10,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00
007124r 1  00 00 00 00  
007128r 1  10 10 11 10  
007140r 1               
007140r 1               ; world position label 58-65
007140r 1               ;     XH                 $XL                  ___  ___  YH                  YL
007140r 1  FF 00 00 00  .byte $FF,$00,$00,$00,$FF,$00,$00,$FF,$00,$00,$FF,$FF,$00,$00,$FF,$00,$00,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
007144r 1  FF 00 00 FF  
007148r 1  00 00 FF FF  
007160r 1  FF 00 00 00  .byte $FF,$00,$00,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$00,$FF,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
007164r 1  FF 00 FF 00  
007168r 1  FF 00 FF 00  
007180r 1  FF 00 FF 00  .byte $FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$FF,$00,$00,$FF,$00,$00,$FF,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
007184r 1  FF 00 FF 00  
007188r 1  FF 00 FF FF  
0071A0r 1  FF 00 FF 00  .byte $FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$00,$FF,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0071A4r 1  FF 00 FF 00  
0071A8r 1  FF 00 FF 00  
0071C0r 1  00 FF 00 FF  .byte $00,$FF,$00,$FF,$00,$00,$00,$FF,$00,$00,$FF,$00,$FF,$00,$FF,$FF,$00,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0071C4r 1  00 00 00 FF  
0071C8r 1  00 00 FF 00  
0071E0r 1               ;      01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF
0071E0r 1               ;     XH                               $XL                            ___  __  YH                              YL
0071E0r 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$00,$00,$10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00
0071E4r 1  00 00 00 00  
0071E8r 1  10 10 10 00  
007200r 1  01 00 11 10  .byte $01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00
007204r 1  00 00 00 00  
007208r 1  01 00 10 00  
007220r 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$11,$10,$00,$00,$00,$00,$00,$00,$01,$00,$10,$10,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00
007224r 1  00 00 00 00  
007228r 1  10 10 11 10  
007240r 1               
007240r 1               ; directional cursor reminder... 16x16 - 66-69
007240r 1  00 10 00 10  .byte $00, $10, $00, $10, $01, $11, $11, $00
007244r 1  01 11 11 00  
007248r 1  00 10 00 10  .byte $00, $10, $00, $10, $01, $00, $00, $00
00724Cr 1  01 00 00 00  
007250r 1  00 10 10 10  .byte $00, $10, $10, $10, $01, $11, $00, $00
007254r 1  01 11 00 00  
007258r 1  00 10 10 10  .byte $00, $10, $10, $10, $01, $00, $00, $00
00725Cr 1  01 00 00 00  
007260r 1  00 01 01 00  .byte $00, $01, $01, $00, $01, $11, $11, $00
007264r 1  01 11 11 00  
007268r 1  00 00 00 00  .byte $00, $00, $00, $00, $00, $00, $00, $00
00726Cr 1  00 00 00 00  
007270r 1  01 11 00 00  .byte $01, $11, $00, $00, $00, $01, $11, $00
007274r 1  00 01 11 00  
007278r 1  10 00 10 01  .byte $10, $00, $10, $01, $10, $01, $00, $01
00727Cr 1  10 01 00 01  
007280r 1  11 11 10 01  .byte $11, $11, $10, $01, $10, $01, $00, $01
007284r 1  10 01 00 01  
007288r 1  10 00 10 00  .byte $10, $00, $10, $00, $00, $01, $11, $10
00728Cr 1  00 01 11 10  
007290r 1  00 00 00 00  .byte $00, $00, $00, $00, $00, $00, $00, $00
007294r 1  00 00 00 00  
007298r 1  00 11 11 10  .byte $00, $11, $11, $10, $01, $00, $01, $00
00729Cr 1  01 00 01 00  
0072A0r 1  00 00 01 00  .byte $00, $00, $01, $00, $00, $10, $10, $00
0072A4r 1  00 10 10 00  
0072A8r 1  00 00 10 00  .byte $00, $00, $10, $00, $00, $01, $00, $00
0072ACr 1  00 01 00 00  
0072B0r 1  00 01 00 00  .byte $00, $01, $00, $00, $00, $10, $10, $00
0072B4r 1  00 10 10 00  
0072B8r 1  00 11 11 10  .byte $00, $11, $11, $10, $01, $00, $01, $00
0072BCr 1  01 00 01 00  
0072BFr 1               
