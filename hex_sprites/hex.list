ca65 V2.19 - Git 8e6c0c1
Main file   : hex.s
Current file: hex.s

000000r 1               ; 	080D
000000r 1  4C rr rr     jmp start ; 	3 bytes
000003r 1               ;	0810 	- 240 bytes available for stuff that doesn't need alignment
000003r 1  DE AD BE EF  .repeat 28
000007r 1  DE AD BE EF  
00000Br 1  DE AD BE EF  
000073r 1               	.byte $DE,$AD,$BE,$EF
000073r 1               .endrepeat
000073r 1               SCRATCH128:
000073r 1  DE AD BE EF  .repeat 32
000077r 1  DE AD BE EF  
00007Br 1  DE AD BE EF  
0000F3r 1               	.byte $DE,$AD,$BE,$EF
0000F3r 1               .endrepeat
0000F3r 1               
0000F3r 1               ACROSS_ROW_X_L: ; 0900  16 wide , 45* tilt ... this is added to go up row, sub for down row
0000F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0000F3r 1  00 FE FB F4  .byte
0000F7r 1  EC E1 D3 C3  
0000FBr 1  B1 9C 85 6B  
0001F3r 1               
0001F3r 1               ACROSS_ROW_X_H: ; 0A00
0001F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0001F3r 1  10 0F 0F 0F  .byte $10, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $E, $E, $E, $E, $E, $E, $D, $D, $D, $D, $D, $C, $C, $C, $C, $B, $B, $B, $B, $A, $A, $A, $9, $9, $9, $8, $8, $8, $7, $7, $7, $6, $6, $6, $5, $5, $5, $4, $4, $3, $3, $3, $2, $2, $1, $1, $1, $0, $0, $0, $FF, $FF, $FE, $FE, $FE, $FD, $FD, $FC, $FC, $FC, $FB, $FB, $FA, $FA, $FA, $F9, $F9, $F9, $F8, $F8, $F8, $F7, $F7, $F7, $F6, $F6, $F6, $F5, $F5, $F5, $F4, $F4, $F4, $F4, $F3, $F3, $F3, $F3, $F2, $F2, $F2, $F2, $F2, $F1, $F1, $F1, $F1, $F1, $F1, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F1, $F1, $F1, $F1, $F1, $F1, $F2, $F2, $F2, $F2, $F2, $F3, $F3, $F3, $F3, $F4, $F4, $F4, $F4, $F5, $F5, $F5, $F6, $F6, $F6, $F7, $F7, $F7, $F8, $F8, $F8, $F9, $F9, $F9, $FA, $FA, $FA, $FB, $FB, $FC, $FC, $FC, $FD, $FD, $FE, $FE, $FE, $FF, $FF, $00, $0, $0, $1, $1, $1, $2, $2, $3, $3, $3, $4, $4, $5, $5, $5, $6, $6, $6, $7, $7, $7, $8, $8, $8, $9, $9, $9, $A, $A, $A, $B, $B, $B, $B, $C, $C, $C, $C, $D, $D, $D, $D, $D, $E, $E, $E, $E, $E, $E, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F
0001F7r 1  0F 0F 0F 0F  
0001FBr 1  0F 0F 0F 0F  
0002F3r 1               
0002F3r 1               ACROSS_ROW_Y_L: ; 0B00
0002F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0002F3r 1  00 B8 71 2A  .byte $0,$B8,$71,$2A,$E4,$9D,$57,$10,$CA,$85,$40,$FB,$B7,$73,$30,$ED,$AB,$6A,$29,$E9,$AA,$6C,$2E,$F2,$B6,$7C,$42,$A,$D2,$9C,$66,$32,$0,$CE,$9D,$6E,$41,$14,$E9,$C0,$97,$71,$4B,$27,$5,$E4,$C5,$A8,$8C,$71,$58,$41,$2C,$18,$6,$F6,$E7,$DA,$CF,$C5,$BD,$B7,$B3,$B0,$AF,$B0,$B3,$B7,$BD,$C5,$CF,$DA,$E7,$F6,$6,$18,$2C,$41,$58,$71,$8C,$A8,$C5,$E4,$5,$27,$4B,$71,$97,$C0,$E9,$14,$41,$6E,$9D,$CE,$0,$32,$66,$9C,$D2,$A,$42,$7C,$B6,$F2,$2E,$6C,$AA,$E9,$29,$6A,$AB,$ED,$30,$73,$B7,$FB,$40,$85,$CA,$10,$57,$9D,$E4,$2A,$71,$B8,$0,$47,$8E,$D5,$1B,$62,$A8,$EF,$35,$7A,$BF,$4,$48,$8C,$CF,$12,$54,$95,$D6,$16,$55,$93,$D1,$D,$49,$83,$BD,$F5,$2D,$63,$99,$CD,$0,$31,$62,$91,$BE,$EB,$16,$3F,$68,$8E,$B4,$D8,$FA,$1B,$3A,$57,$73,$8E,$A7,$BE,$D3,$E7,$F9,$9,$18,$25,$30,$3A,$42,$48,$4C,$4F,$50,$4F,$4C,$48,$42,$3A,$30,$25,$18,$9,$F9,$E7,$D3,$BE,$A7,$8E,$73,$57,$3A,$1B,$FA,$D8,$B4,$8E,$68,$3F,$16,$EB,$BE,$91,$62,$31,$0,$CD,$99,$63,$2D,$F5,$BD,$83,$49,$D,$D1,$93,$55,$16,$D6,$95,$54,$12,$CF,$8C,$48,$4,$BF,$7A,$35,$EF,$A8,$62,$1B,$D5,$8E,$47
0002F7r 1  E4 9D 57 10  
0002FBr 1  CA 85 40 FB  
0003F3r 1               
0003F3r 1               ACROSS_ROW_Y_H: ; 0C00
0003F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0003F3r 1  00 FF FF FF  .byte $0,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F9,$F8,$F8,$F8,$F8,$F8,$F7,$F7,$F7,$F7,$F7,$F6,$F6,$F6,$F6,$F6,$F6,$F6,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F6,$F6,$F6,$F6,$F6,$F6,$F6,$F7,$F7,$F7,$F7,$F7,$F8,$F8,$F8,$F8,$F8,$F9,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$00,$0,$0,$0,$1,$1,$1,$1,$2,$2,$2,$3,$3,$3,$3,$4,$4,$4,$4,$5,$5,$5,$5,$6,$6,$6,$6,$6,$7,$7,$7,$7,$8,$8,$8,$8,$8,$8,$9,$9,$9,$9,$9,$9,$9,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$9,$9,$9,$9,$9,$9,$9,$8,$8,$8,$8,$8,$8,$7,$7,$7,$7,$6,$6,$6,$6,$6,$5,$5,$5,$5,$4,$4,$4,$4,$3,$3,$3,$3,$2,$2,$2,$1,$1,$1,$1,$0,$0,$0
0003F7r 1  FE FE FE FE  
0003FBr 1  FD FD FD FC  
0004F3r 1               
0004F3r 1               NEXT_ROW_X_L: ; 0D00 next row LEFT/up when added
0004F3r 1  00 A9 54 00  .byte
0004F7r 1  AE 5D 0D BF  
0004FBr 1  73 28 DF 98  
0005F3r 1               
0005F3r 1               NEXT_ROW_X_H: ; 0E00
0005F3r 1  F8 F7 F7 F7  .byte
0005F7r 1  F6 F6 F6 F5  
0005FBr 1  F5 F5 F4 F4  
0006F3r 1               
0006F3r 1               NEXT_ROW_Y_L: ; 0F00
0006F3r 1  33 58 7D A5  .byte $33,$58,$7D,$A5,$CD,$F7,$23,$50,$7E,$AD,$DE,$10,$44,$78,$AE,$E4,$1C,$55,$8F,$CA,$6,$43,$81,$BF,$FE,$3F,$7F,$C1,$3,$46,$8A,$CD,$12,$57,$9C,$E2,$28,$6E,$B4,$FB,$42,$89,$D0,$17,$5E,$A5,$EC,$33,$7A,$C0,$6,$4C,$91,$D6,$1B,$5F,$A2,$E6,$28,$6A,$AB,$EB,$2B,$6A,$A8,$E5,$21,$5C,$97,$D0,$8,$3F,$75,$AA,$DE,$10,$41,$71,$A0,$CD,$F9,$24,$4D,$75,$9B,$C0,$E3,$5,$25,$44,$61,$7C,$96,$AE,$C5,$DA,$ED,$FF,$F,$1D,$29,$34,$3D,$44,$4A,$4D,$4F,$50,$4E,$4B,$46,$3F,$37,$2D,$21,$13,$4,$F3,$E0,$CC,$B6,$9E,$85,$6A,$4E,$30,$10,$EF,$CC,$A7,$82,$5A,$32,$8,$DC,$AF,$81,$52,$21,$EF,$BB,$87,$51,$1B,$E3,$AA,$70,$35,$F9,$BC,$7E,$40,$1,$C0,$80,$3E,$FC,$B9,$75,$32,$ED,$A8,$63,$1D,$D7,$91,$4B,$4,$BD,$76,$2F,$E8,$A1,$5A,$13,$CC,$85,$3F,$F9,$B3,$6E,$29,$E4,$A0,$5D,$19,$D7,$95,$54,$14,$D4,$95,$57,$1A,$DE,$A3,$68,$2F,$F7,$C0,$8A,$55,$21,$EF,$BE,$8E,$5F,$32,$6,$DB,$B2,$8A,$64,$3F,$1C,$FA,$DA,$BB,$9E,$83,$69,$51,$3A,$25,$12,$0,$F0,$E2,$D6,$CB,$C2,$BB,$B5,$B2,$B0,$AF,$B1,$B4,$B9,$C0,$C8,$D2,$DE,$EC,$FB,$C,$1F,$33,$49,$61,$7A,$95,$B1,$CF,$EF,$10
0006F7r 1  CD F7 23 50  
0006FBr 1  7E AD DE 10  
0007F3r 1               
0007F3r 1               NEXT_ROW_Y_H: ; 1000
0007F3r 1  F6 F6 F6 F6  .byte $F6,$F6,$F6,$F6,$F6,$F6,$F7,$F7,$F7,$F7,$F7,$F8,$F8,$F8,$F8,$F8,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$0,$0,$0,$0,$1,$1,$1,$2,$2,$2,$2,$3,$3,$3,$3,$4,$4,$4,$4,$5,$5,$5,$5,$6,$6,$6,$6,$7,$7,$7,$7,$7,$8,$8,$8,$8,$8,$8,$9,$9,$9,$9,$9,$9,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$B,$A,$A,$A,$A,$A,$A,$A,$A,$A,$A,$9,$9,$9,$9,$9,$9,$9,$8,$8,$8,$8,$8,$7,$7,$7,$7,$7,$6,$6,$6,$6,$5,$5,$5,$5,$5,$4,$4,$4,$3,$3,$3,$3,$2,$2,$2,$2,$1,$1,$1,$1,$0,$0,$0,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F8,$F8,$F8,$F8,$F8,$F7,$F7,$F7,$F7,$F7,$F7,$F6,$F6,$F6,$F6,$F6,$F6,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F4,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F5,$F6
0007F7r 1  F6 F6 F7 F7  
0007FBr 1  F7 F7 F7 F8  
0008F3r 1               
0008F3r 1               TUB_WORLD: ; 32*64 = 2K ... is 1100 to 1900-1
0008F3r 1               .include "tub_world_hieghts_01.inc"
0008F3r 2               ; 0 to 128 will be water level. >128 = distance along row to water (neg) , 128 = no water this row.
0008F3r 2               ; rows are stored within 64 byte rows
0008F3r 2               ; 	  0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63
0008F3r 2  FF FF FF FF  .byte $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 30
0008F7r 2  FF FF FF FF  
0008FBr 2  FF FF FF FF  
000933r 2  FF FF FF FF  .byte   $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF ; 29
000937r 2  FF FF FF FF  
00093Br 2  FF FF FF FF  
000973r 2  FF FF FF FF  .byte     $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF,$FF ; 28
000977r 2  FF FF FF FF  
00097Br 2  FF FF FF FF  
0009B3r 2  FF FF FF FF  .byte       $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF,$FF ; 27
0009B7r 2  FF FF FF FF  
0009BBr 2  FF FF FF FF  
0009F3r 2  FF FF FF FF  .byte         $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$80,$FF,$FF,$FF ; 26
0009F7r 2  FF FF FF FF  
0009FBr 2  FF FF FF FF  
000A33r 2  FF FF FF FF  .byte           $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 25
000A37r 2  FF FF FF FF  
000A3Br 2  FF FF FF FF  
000A73r 2  FF FF FF FF  .byte             $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 24
000A77r 2  FF FF FF FF  
000A7Br 2  FF FF FF FF  
000AB3r 2  FF FF FF FF  .byte               $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 23
000AB7r 2  FF FF FF FF  
000ABBr 2  FF FF FF 80  
000AF3r 2  FF FF FF FF  .byte                 $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF ; 22
000AF7r 2  FF FF FF FF  
000AFBr 2  FF FF 80 00  
000B33r 2  FF FF FF FF  .byte                   $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF; 21
000B37r 2  FF FF FF FF  
000B3Br 2  FF 80 00 00  
000B73r 2  FF FF FF FF  .byte                     $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF ; 20
000B77r 2  FF FF FF FF  
000B7Br 2  FF 80 00 00  
000BB3r 2  FF FF FF FF  .byte                       $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF ; 19
000BB7r 2  FF FF FF FF  
000BBBr 2  80 00 00 00  
000BF3r 2  FF FF FF FF  .byte                         $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 18
000BF7r 2  FF FF FF FF  
000BFBr 2  80 00 00 00  
000C33r 2  FF FF FF FF  .byte                           $FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 17
000C37r 2  FF FF FF 80  
000C3Br 2  00 00 00 00  
000C73r 2  FF FF FF FF  .byte                             $FF,$FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 16
000C77r 2  FF FF FF 80  
000C7Br 2  00 00 00 00  
000CB3r 2  FF FF FF FF  .byte                               $FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF ; 15
000CB7r 2  FF FF 80 00  
000CBBr 2  00 00 00 00  
000CF3r 2  FF FF FF FF  .byte                                 $FF,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF ; 14
000CF7r 2  FF FF 80 00  
000CFBr 2  00 00 00 00  
000D33r 2  FF FF FF FF  .byte                                   $FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 13
000D37r 2  FF 80 00 00  
000D3Br 2  00 00 00 00  
000D73r 2  FF FF FF FF  .byte                                     $FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 12
000D77r 2  FF 80 00 00  
000D7Br 2  00 00 00 00  
000DB3r 2  FF FF FF FF  .byte                                       $FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 11
000DB7r 2  80 00 00 00  
000DBBr 2  00 00 00 00  
000DF3r 2  FF FF FF FF  .byte                                         $FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 10
000DF7r 2  80 00 00 00  
000DFBr 2  00 00 00 00  
000E33r 2  FF FF FF 80  .byte                                           $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 9
000E37r 2  00 00 00 00  
000E3Br 2  00 00 00 00  
000E73r 2  FF FF FF 80  .byte                                             $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 8
000E77r 2  00 00 00 00  
000E7Br 2  00 00 00 00  
000EB3r 2  FF FF FF 80  .byte                                               $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 7
000EB7r 2  00 00 00 00  
000EBBr 2  00 00 00 00  
000EF3r 2  FF FF FF 80  .byte                                                 $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 6
000EF7r 2  00 00 00 00  
000EFBr 2  00 00 00 00  
000F33r 2  FF FF FF 80  .byte                                                   $FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 5
000F37r 2  00 00 00 00  
000F3Br 2  00 00 00 00  
000F73r 2  FF FF FF 80  .byte                                                     $FF,$FF,$FF,$80,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 4
000F77r 2  00 01 02 02  
000F7Br 2  01 01 00 01  
000FB3r 2  FF FF FF 80  .byte                                                       $FF,$FF,$FF,$80,$80,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 3
000FB7r 2  80 00 01 02  
000FBBr 2  02 01 01 00  
000FF3r 2  FF FF FF FF  .byte                                                         $FF,$FF,$FF,$FF,$80,$80,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 2
000FF7r 2  80 80 00 01  
000FFBr 2  02 02 01 01  
001033r 2  FF FF FF FF  .byte                                                           $FF,$FF,$FF,$FF,$FF,$80,$80,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$00,$01,$02,$02,$01,$01,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; 01
001037r 2  FF 80 80 00  
00103Br 2  01 02 02 01  
001073r 2  FF FF FF FF  .byte                                                             $FF,$FF,$FF,$FF,$FF,$FF,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF  ; 00 tub wall north
001077r 2  FF FF 80 80  
00107Br 2  80 80 80 80  
0010B3r 2  FF FF FF FF  .res 64,$FF
0010B7r 2  FF FF FF FF  
0010BBr 2  FF FF FF FF  
0010F3r 2               
0010F3r 2               
0010F3r 2               
0010F3r 1               
0010F3r 1               ; 1900
0010F3r 1               
0010F3r 1               OBJECT_LIST_Z_START_POINTERS: ; 1900
0010F3r 1  00 00 00 00  .res 256,0
0010F7r 1  00 00 00 00  
0010FBr 1  00 00 00 00  
0011F3r 1               OBJECT_LIST_BYTE0_ADDRLOW: ; 1A00 addr low
0011F3r 1  00 00 00 00  .res 256,0
0011F7r 1  00 00 00 00  
0011FBr 1  00 00 00 00  
0012F3r 1               OBJECT_LIST_BYTE1_MODE: ; 1B00 mode/addr bank
0012F3r 1  00 00 00 00  .res 256,0
0012F7r 1  00 00 00 00  
0012FBr 1  00 00 00 00  
0013F3r 1               OBJECT_LIST_BYTE2_X: ; 1C00 X position onscreen ( assumed positive for now)
0013F3r 1  00 00 00 00  .res 256,0
0013F7r 1  00 00 00 00  
0013FBr 1  00 00 00 00  
0014F3r 1               OBJECT_LIST_BYTE3_Y: ; 1D00 y position onscreen
0014F3r 1  00 00 00 00  .res 256,0
0014F7r 1  00 00 00 00  
0014FBr 1  00 00 00 00  
0015F3r 1               OBJECT_LIST_BYTE4_ZFLIPS: ; 1E00 collision / z / flips
0015F3r 1  00 00 00 00  .res 256,0
0015F7r 1  00 00 00 00  
0015FBr 1  00 00 00 00  
0016F3r 1               OBJECT_LIST_BYTE5_SIZE: ; 1F00 size / pal offset
0016F3r 1  00 00 00 00  .res 256,0
0016F7r 1  00 00 00 00  
0016FBr 1  00 00 00 00  
0017F3r 1               OBJECT_LIST_BYTE6_NEXT: ; 2000 NEXT
0017F3r 1  00 00 00 00  .res 256,0
0017F7r 1  00 00 00 00  
0017FBr 1  00 00 00 00  
0018F3r 1               
0018F3r 1               
0018F3r 1               
0018F3r 1               WORLD_TO_CELL_XH: ; 2100
0018F3r 1  00 00 01 02  .byte 0,0,1,2,3,4,5,6,6,7,8,9,10,11,12,12,13,14,15,16,17,18,19,19,20,21,22,23,24,25,25,26,27,28,29,30,31,32,32,33,34,35,36,37,38,38,39,40,41,42,43,44,45,45,46,47,48,49,50,51,51,52,53,54,55,56,57,58,58,59,60,61,62,63,64,64,65,66,67,68,69,70,71,71,72,73,74,75,76,77,77,78,79,80,81,82,83,84,84,85,86,87,88,89,90,90,91,92,93,94,95,96,96,97,98,99,100,101,102,103,103,104,105,106,107,108,109,109,110,111,112,113,114,115,116,116,117,118,119,120,121,122,122,123,124,125,126,127,128,129,129,130,131,132,133,134,135,135,136,137,138,139,140,141,142,142,143,144,145,146,147,148,148,149,150,151,152,153,154,155,155,156,157,158,159,160,161,161,162,163,164,165,166,167,168,168,169,170,171,172,173,174,174,175,176,177,178,179,180,180,181,182,183,184,185,186,187,187,188,189,190,191,192,193,193,194,195,196,197,198,199,200,200,201,202,203,204,205,206,206,207,208,209,210,211,212,213,213,214,215,216,217,218,219,219,220
0018F7r 1  03 04 05 06  
0018FBr 1  06 07 08 09  
0019F3r 1               ;.byte 0,0,1,2,3,4,5,6,6,7,8,9,10,11,12,12,13,14,15,16,17,18,19,19,20,21,22,23,24,25,25,26,27,28,29,30,31,32,32,33,34,35,36,37,38,38,39,40,41,42,43,44,45,45,46,47,48,49,50,51,51,52,53,54,55,56,57,58,58,59,60,61,62,63,64,64,65,66,67,68,69,70,71,71,72,73,74,75,76,77,77,78,79,80,81,82,83,84,84,85,86,87,88,89,90,90,91,92,93,94,95,96,96,97,98,99,100,101,102,103,103,104,105,106,107,108,109,109
0019F3r 1               ;.res 128,128
0019F3r 1               WORLD_TO_CELL_XL:
0019F3r 1  00 DD BB 99  .byte 0,221,187,153,118,84,50,15,237,203,169,134,100,66,31,253,219,184,150,116,82,47,13,235,200,166,132,97,63,29,251,216,182,148,113,79,45,10,232,198,164,129,95,61,26,248,214,180,145,111,77,42,8,230,195,161,127,93,58,24,246,211,177,143,108,74,40,6,227,193,159,124,90,56,21,243,209,175,140,106,72,37,3,225,191,156,122,88,53,19,241,206,172,138,104,69,35,1,222,188,154,119,85,51,17,238,204,170,135,101,67,32,254,220,186,151,117,83,48,14,236,202,167,133,99,64,30,252,217,183,149,115,80,46,12,233,199,165,130,96,62,28,249,215,181,146,112,78,43,9,231,197,162,128,94,59,25,247,212,178,144,110,75,41,7,228,194,160,126,91,57,23,244,210,176,141,107,73,39,4,226,192,157,123,89,54,20,242,208,173,139,105,70,36,2,223,189,155,121,86,52,18,239,205,171,137,102,68,34,255,221,187,152,118,84,50,15,237,203,168,134,100,65,31,253,219,184,150,116,81,47,13,234,200,166,132,97,63,29,250,216,182,148,113,79,45,10,232,198,163,129,95,61,26,248,214
0019F7r 1  76 54 32 0F  
0019FBr 1  ED CB A9 86  
001AF3r 1               ;.byte 0,221,187,153,118,84,50,15,237,203,169,134,100,66,31,253,219,184,150,116,82,47,13,235,200,166,132,97,63,29,251,216,182,148,113,79,45,10,232,198,164,129,95,61,26,248,214,180,145,111,77,42,8,230,195,161,127,93,58,24,246,211,177,143,108,74,40,6,227,193,159,124,90,56,21,243,209,175,140,106,72,37,3,225,191,156,122,88,53,19,241,206,172,138,104,69,35,1,222,188,154,119,85,51,17,238,204,170,135,101,67,32,254,220,186,151,117,83,48,14,236,202,167,133,99,64,30,252
001AF3r 1               ;.res 128,0
001AF3r 1               CELL_TO_WORLD_XH: ; 2200
001AF3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,8,9,10,11,12,13,15,16,17,18,19,20,21,23,24,25,26,27,28,30,31,32,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,50,51,53,54,55,56,57,58,60,61,62,63,64,65,66,68,69,70,71,72,73,75,76,77,78,79,80,81,83,84,85,86,87,88,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,112,113,114,115,116,117,118,120,121,122,123,124,125,127,128,129,130,131,132,133,135,136,137,138,139,140,142,143,144,145,146
001AF7r 1  04 05 06 08  
001AFBr 1  09 0A 0B 0C  
001B73r 1               CELL_TO_WORLD_XL: ; 2280
001B73r 1  00 27 4F 76  .byte 0,39,79,118,158,198,237,21,60,100,140,179,219,2,42,82,121,161,200,240,24,63,103,142,182,222,5,45,84,124,164,203,243,26,66,106,145,185,224,8,48,87,127,166,206,246,29,69,108,148,188,227,11,50,90,130,169,209,248,32,72,111,151,191,230,14,53,93,133,172,212,251,35,75,114,154,193,233,17,56,96,135,175,215,254,38,77,117,157,196,236,19,59,99,138,178,217,1,41,80,120,159,199,239,22,62,101,141,181,220,4,43,83,123,162,202,241,25,65,104,144,184,223,7,46,86,126,165
001B77r 1  9E C6 ED 15  
001B7Br 1  3C 64 8C B3  
001BF3r 1               
001BF3r 1               CELL_LOW_TO_WORLD_XH: ; 2300
001BF3r 1  00 00 00 00  .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
001BF7r 1  00 00 00 00  
001BFBr 1  00 00 00 00  
001CF3r 1               CELL_LOW_TO_WORLD_XL: ; 2400
001CF3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,8,9,10,11,12,13,15,16,17,18,19,20,21,23,24,25,26,27,28,30,31,32,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,50,51,53,54,55,56,57,58,60,61,62,63,64,65,66,68,69,70,71,72,73,75,76,77,78,79,80,81,83,84,85,86,87,88,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,112,113,114,115,116,117,118,120,121,122,123,124,125,127,128,129,130,131,132,133,135,136,137,138,139,140,142,143,144,145,146,147,148,150,151,152,153,154,155,157,158,159,160,161,162,163,165,166,167,168,169,170,172,173,174,175,176,177,178,180,181,182,183,184,185,187,188,189,190,191,192,193,195,196,197,198,199,200,202,203,204,205,206,207,209,210,211,212,213,214,215,217,218,219,220,221,222,224,225,226,227,228,229,230,232,233,234,235,236,237,239,240,241,242,243,244,245,247,248,249,250,251,252,254,255,0,1,2,3,4,6,7,8,9,10,11,13,14,15,16,17,18,19,21,22,23,24,25,26,28,29,30,31,32,33,34,36,37,38
001CF7r 1  04 05 06 08  
001CFBr 1  09 0A 0B 0C  
001DF3r 1               
001DF3r 1               SPRITE_NUM_HIGH_NIBBLE: ; 2900
001DF3r 1  00 00 00 00  .res 16, 0
001DF7r 1  00 00 00 00  
001DFBr 1  00 00 00 00  
001E03r 1  01 01 01 01  .res 16, 1
001E07r 1  01 01 01 01  
001E0Br 1  01 01 01 01  
001E13r 1  02 02 02 02  .res 16, 2
001E17r 1  02 02 02 02  
001E1Br 1  02 02 02 02  
001E23r 1  03 03 03 03  .res 16, 3
001E27r 1  03 03 03 03  
001E2Br 1  03 03 03 03  
001E33r 1  04 04 04 04  .res 16, 4
001E37r 1  04 04 04 04  
001E3Br 1  04 04 04 04  
001E43r 1  05 05 05 05  .res 16, 5
001E47r 1  05 05 05 05  
001E4Br 1  05 05 05 05  
001E53r 1  06 06 06 06  .res 16, 6
001E57r 1  06 06 06 06  
001E5Br 1  06 06 06 06  
001E63r 1  07 07 07 07  .res 16, 7
001E67r 1  07 07 07 07  
001E6Br 1  07 07 07 07  
001E73r 1  08 08 08 08  .res 16, 8
001E77r 1  08 08 08 08  
001E7Br 1  08 08 08 08  
001E83r 1  09 09 09 09  .res 16, 9
001E87r 1  09 09 09 09  
001E8Br 1  09 09 09 09  
001E93r 1  0A 0A 0A 0A  .res 16, 10
001E97r 1  0A 0A 0A 0A  
001E9Br 1  0A 0A 0A 0A  
001EA3r 1  0B 0B 0B 0B  .res 16, 11
001EA7r 1  0B 0B 0B 0B  
001EABr 1  0B 0B 0B 0B  
001EB3r 1  0C 0C 0C 0C  .res 16, 12
001EB7r 1  0C 0C 0C 0C  
001EBBr 1  0C 0C 0C 0C  
001EC3r 1  0D 0D 0D 0D  .res 16, 13
001EC7r 1  0D 0D 0D 0D  
001ECBr 1  0D 0D 0D 0D  
001ED3r 1  0E 0E 0E 0E  .res 16, 14
001ED7r 1  0E 0E 0E 0E  
001EDBr 1  0E 0E 0E 0E  
001EE3r 1  0F 0F 0F 0F  .res 16, 15
001EE7r 1  0F 0F 0F 0F  
001EEBr 1  0F 0F 0F 0F  
001EF3r 1               
001EF3r 1               SPRITE_NUM_LOW_NIBBLE: ; 2A00
001EF3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001EF7r 1  04 05 06 07  
001EFBr 1  08 09 0A 0B  
001F03r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F07r 1  04 05 06 07  
001F0Br 1  08 09 0A 0B  
001F13r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F17r 1  04 05 06 07  
001F1Br 1  08 09 0A 0B  
001F23r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F27r 1  04 05 06 07  
001F2Br 1  08 09 0A 0B  
001F33r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F37r 1  04 05 06 07  
001F3Br 1  08 09 0A 0B  
001F43r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F47r 1  04 05 06 07  
001F4Br 1  08 09 0A 0B  
001F53r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F57r 1  04 05 06 07  
001F5Br 1  08 09 0A 0B  
001F63r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F67r 1  04 05 06 07  
001F6Br 1  08 09 0A 0B  
001F73r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F77r 1  04 05 06 07  
001F7Br 1  08 09 0A 0B  
001F83r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F87r 1  04 05 06 07  
001F8Br 1  08 09 0A 0B  
001F93r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001F97r 1  04 05 06 07  
001F9Br 1  08 09 0A 0B  
001FA3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001FA7r 1  04 05 06 07  
001FABr 1  08 09 0A 0B  
001FB3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001FB7r 1  04 05 06 07  
001FBBr 1  08 09 0A 0B  
001FC3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001FC7r 1  04 05 06 07  
001FCBr 1  08 09 0A 0B  
001FD3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001FD7r 1  04 05 06 07  
001FDBr 1  08 09 0A 0B  
001FE3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15
001FE7r 1  04 05 06 07  
001FEBr 1  08 09 0A 0B  
001FF3r 1               
001FF3r 1               LOW_NIBBLE_TO_HEX: ;
001FF3r 1  30 31 32 33  .repeat 16
001FF7r 1  34 35 36 37  
001FFBr 1  38 39 01 02  
0020F3r 1               ;      0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
0020F3r 1               .byte  48, 49, 50, 51, 52, 53, 54, 55, 56, 57,  1,  2,  3,  4,  5,  6
0020F3r 1               .endrepeat
0020F3r 1               
0020F3r 1               HIGH_NIBBLE_TO_HEX: ;
0020F3r 1  30 30 30 30  .res 16,48
0020F7r 1  30 30 30 30  
0020FBr 1  30 30 30 30  
002103r 1  31 31 31 31  .res 16,49
002107r 1  31 31 31 31  
00210Br 1  31 31 31 31  
002113r 1  32 32 32 32  .res 16,50
002117r 1  32 32 32 32  
00211Br 1  32 32 32 32  
002123r 1  33 33 33 33  .res 16,51
002127r 1  33 33 33 33  
00212Br 1  33 33 33 33  
002133r 1  34 34 34 34  .res 16,52
002137r 1  34 34 34 34  
00213Br 1  34 34 34 34  
002143r 1  35 35 35 35  .res 16,53
002147r 1  35 35 35 35  
00214Br 1  35 35 35 35  
002153r 1  36 36 36 36  .res 16,54
002157r 1  36 36 36 36  
00215Br 1  36 36 36 36  
002163r 1  37 37 37 37  .res 16,55
002167r 1  37 37 37 37  
00216Br 1  37 37 37 37  
002173r 1  38 38 38 38  .res 16,56
002177r 1  38 38 38 38  
00217Br 1  38 38 38 38  
002183r 1  39 39 39 39  .res 16,57
002187r 1  39 39 39 39  
00218Br 1  39 39 39 39  
002193r 1  01 01 01 01  .res 16,1
002197r 1  01 01 01 01  
00219Br 1  01 01 01 01  
0021A3r 1  02 02 02 02  .res 16,2
0021A7r 1  02 02 02 02  
0021ABr 1  02 02 02 02  
0021B3r 1  03 03 03 03  .res 16,3
0021B7r 1  03 03 03 03  
0021BBr 1  03 03 03 03  
0021C3r 1  04 04 04 04  .res 16,4
0021C7r 1  04 04 04 04  
0021CBr 1  04 04 04 04  
0021D3r 1  05 05 05 05  .res 16,5
0021D7r 1  05 05 05 05  
0021DBr 1  05 05 05 05  
0021E3r 1  06 06 06 06  .res 16,6
0021E7r 1  06 06 06 06  
0021EBr 1  06 06 06 06  
0021F3r 1               
0021F3r 1               SCREEN_Y_TO_Z: ; 2B00 this is shifted to be within range so that 192 =0 and -16 is 255
0021F3r 1  EB EA E8 E7  .byte 235,234,232,231,230,229,227,226,225,224,223,221,220,219,218,216,215,214,213,211,210,209,208,207,205,204,203,202,200,199,198,197,195,194,193,192,191,189,188,187,186,184,183,182,181,179,178,177,176,175,173,172,171,170,168,167,166,165,163,162,161,160,159,157,156,155,154,152,151,150,149,147,146,145,144,143,141,140,139,138,136,135,134,133,131,130,129,128,127,125,124,123,122,120,119,118,117,115,114,113,112,111,109,108,107,106,104,103,102,101,99,98,97,96,95,93,92,91,90,88,87,86,85,83,82,81,80,79,77,76,75,74,72,71,70,69,67,66,65,64,63,61,60,59,58,56,55,54,53,51,50,49,48,47,45,44,43,42,40,39,38,37,35,34,33,32,31,29,28,27,26,24,23,22,21,19,18,17,16,15,13,12,11,10,8,7,6,5,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,253,252,251,250,248,247,246,245,243,242,241,240,239,237,236
0021F7r 1  E6 E5 E3 E2  
0021FBr 1  E1 E0 DF DD  
0022F3r 1               ;.byte 255,253,252,250,249,247,246,244,243,241,240,238,237,235,234,232,231,229,228,227,225,224,222,221,219,218,216,215,213,212,210,209,207,206,204,203,202,200,199,197,196,194,193,191,190,188,187,185,184,182,181,179,178,177,175,174,172,171,169,168,166,165,163,162,160,159,157,156,154,153,152,150,149,147,146,144,143,141,140,138,137,135,134,132,131,129,128,127,125,124,122,121,119,118,116,115,113,112,110,109,107,106,104,103,101,100,99,97,96,94,93,91,90,88,87,85,84,82,81,79,78,76,75,74,72,71,69,68,66,65,63,62,60,59,57,56,54,53,51,50,49,47,46,44,43,41,40,38,37,35,34,32,31,29,28,26,25,24,22,21,19,18,16,15,13,12,10,9,7,6,4,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255
0022F3r 1               ;.byte 255,253,251,250,248,247,245,243,242,240,239,237,235,234,232,231,229,227,226,224,223,221,220,218,216,215,213,212,210,208,207,205,204,202,200,199,197,196,194,192,191,189,188,186,185,183,181,180,178,177,175,173,172,170,169,167,165,164,162,161,159,158,156,154,153,151,150,148,146,145,143,142,140,138,137,135,134,132,130,129,127,126,124,123,121,119,118,116,115,113,111,110,108,107,105,103,102,100,99,97,95,94,92,91,89,88,86,84,83,81,80,78,76,75,73,72,70,68,67,65,64,62,61,59,57,56,54,53,51,49,48,46,45,43,41,40,38,37,35,33,32,30,29,27,26,24,22,21,19,18,16,14,13,11,10,8,6,5,3,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0022F3r 1               
0022F3r 1               CONVERT_HEIGHTS_PIXELS: ; 2C00
0022F3r 1               ;.res 256,0
0022F3r 1  00 00 01 01  .byte 0,0,1,1,2,3,3,4,4,5,6,6,7,7,8,9,9,10,11,11,12,12,13,14,14,15,15,16,17,17,18,18,19,20,20,21,22,22,23,23,24,25,25,26,26,27,28,28,29,30,30,31,31,32,33,33,34,34,35,36,36,37,37,38,39,39,40,41,41,42,42,43,44,44,45,45,46,47,47,48,48,49,50,50,51,52,52,53,53,54,55,55,56,56,57,58,58,59,60,60,61,61,62,63,63,64,64,65,66,66,67,67,68,69,69,70,71,71,72,72,73,74,74,75,75,76,77,77,78,78,79,80,80,81,82,82,83,83,84,85,85,86,86,87,88,88,89,90,90,91,91,92,93,93,94,94,95,96,96,97,97,98,99,99,100,101,101,102,102,103,104,104,105,105,106,107,107,108,109,109,110,110,111,112,112,113,113,114,115,115,116,116,117,118,118,119,120,120,121,121,122,123,123,124,124,125,126,126,127,127,128,129,129,130,131,131,132,132,133,134,134,135,135,136,137,137,138,139,139,140,140,141,142,142,143,143,144,145,145,146,146,147,148,148,149,150,150,151,151,152,153,153,154,154,155,156
0022F7r 1  02 03 03 04  
0022FBr 1  04 05 06 06  
0023F3r 1               ;.byte 0,0,1,1,2,3,3,4,4,5,6,6,7,7,8,9,9,10,11,11,12,12,13,14,14,15,15,16,17,17,18,18,19,20,20,21,22,22,23,23,24,25,25,26,26,27,28,28,29,30,30,31,31,32,33,33,34,34,35,36,36,37,37,38,39,39,40,41,41,42,42,43,44,44,45,45,46,47,47,48,48,49,50,50,51,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52;,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52
0023F3r 1               ;.res 128,0
0023F3r 1               CONVERT_HEIGHTS_PIXELS_L:
0023F3r 1               ;.res 256,0
0023F3r 1  00 9C 39 D6  .byte 0,156,57,214,115,15,172,73,230,130,31,188,89,245,146,47,204,105,5,162,63,220,120,21,178,79,235,136,37,194,95,251,152,53,210,110,11,168,69,225,126,27,184,84,241,142,43,200,100,1,158,59,215,116,17,174,74,231,132,33,190,90,247,148,49,205,106,7,164,64,221,122,23,180,80,237,138,39,195,96,253,154,54,211,112,0,169,70,227,128,29,185,86,243,144,44,201,102,3,159,60,217,118,19,175,76,233,134,34,191,92,249,149,50,207,108,9,165,66,223,124,24,181,82,239,139,40,197,98,254,155,56,213,114,14,171,72,229,129,30,187,88,244,145,46,203,104,4,161,62,219,119,20,177,78,234,135,36,193,94,250,151,52,209,109,10,167,68,224,125,26,183,83,240,141,42,199,99,0,157,58,214,115,16,173,73,230,131,32,189,89,246,147,48,204,105,6,163,63,220,121,22,179,79,236,137,38,194,95,252,153,53,210,111,12,168,69,226,127,28,184,85,242,143,43,200,101,2,158,59,216,117,18,174,75,232,133,33,190,91,248,148,49,206,107,7,164,65,222,123,23,180,81,238,138,39
0023F7r 1  73 0F AC 49  
0023FBr 1  E6 82 1F BC  
0024F3r 1               
0024F3r 1               SUBCELL_X_COS_L:
0024F3r 1  00 FF FF FF  .byte $0,$FF,$FF,$FF,$FE,$FE,$FD,$FC,$FB,$F9,$F8,$F6,$F4,$F3,$F1,$EE,$EC,$EA,$E7,$E4,$E1,$DE,$DB,$D8,$D4,$D1,$CD,$C9,$C5,$C1,$BD,$B9,$B5,$B0,$AB,$A7,$A2,$9D,$98,$93,$8E,$88,$83,$7E,$78,$73,$6D,$67,$61,$5C,$56,$50,$4A,$44,$3E,$38,$31,$2B,$25,$1F,$19,$12,$C,$6,$0,$F9,$F3,$ED,$E6,$E0,$DA,$D4,$CE,$C7,$C1,$BB,$B5,$AF,$A9,$A3,$9E,$98,$92,$8C,$87,$81,$7C,$77,$71,$6C,$67,$62,$5D,$58,$54,$4F,$4A,$46,$42,$3E,$3A,$36,$32,$2E,$2B,$27,$24,$21,$1E,$1B,$18,$15,$13,$11,$E,$C,$B,$9,$7,$6,$4,$3,$2,$1,$1,$0,$0,$0,$0,$0,$0,$0,$1,$1,$2,$3,$4,$6,$7,$9,$B,$C,$E,$11,$13,$15,$18,$1B,$1E,$21,$24,$27,$2B,$2E,$32,$36,$3A,$3E,$42,$46,$4A,$4F,$54,$58,$5D,$62,$67,$6C,$71,$77,$7C,$81,$87,$8C,$92,$98,$9E,$A3,$A9,$AF,$B5,$BB,$C1,$C7,$CE,$D4,$DA,$E0,$E6,$ED,$F3,$F9,$0,$6,$C,$12,$19,$1F,$25,$2B,$31,$38,$3E,$44,$4A,$50,$56,$5C,$61,$67,$6D,$73,$78,$7E,$83,$88,$8E,$93,$98,$9D,$A2,$A7,$AB,$B0,$B5,$B9,$BD,$C1,$C5,$C9,$CD,$D1,$D4,$D8,$DB,$DE,$E1,$E4,$E7,$EA,$EC,$EE,$F1,$F3,$F4,$F6,$F8,$F9,$FB,$FC,$FD,$FE,$FE,$FF,$FF,$FF
0024F7r 1  FE FE FD FC  
0024FBr 1  FB F9 F8 F6  
0025F3r 1               SUBCELL_X_COS_H:
0025F3r 1  01 00 00 00  .byte
0025F7r 1  00 00 00 00  
0025FBr 1  00 00 00 00  
0026F3r 1               SUBCELL_X_SIN_H:
0026F3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
0026F7r 1  00 00 00 00  
0026FBr 1  00 00 00 00  
0027F3r 1               SUBCELL_X_SIN_L:
0027F3r 1  00 05 0A 10  .byte $0,$5,$A,$10,$15,$1B,$20,$25,$2B,$30,$35,$3B,$40,$45,$4A,$4F,$54,$59,$5E,$63,$68,$6D,$71,$76,$7B,$7F,$84,$88,$8C,$90,$94,$98,$9C,$A0,$A4,$A7,$AB,$AE,$B2,$B5,$B8,$BB,$BE,$C0,$C3,$C6,$C8,$CA,$CC,$CE,$D0,$D2,$D4,$D5,$D7,$D8,$D9,$DA,$DB,$DC,$DC,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DC,$DC,$DB,$DA,$D9,$D8,$D7,$D5,$D4,$D2,$D0,$CE,$CC,$CA,$C8,$C6,$C3,$C0,$BE,$BB,$B8,$B5,$B2,$AE,$AB,$A7,$A4,$A0,$9C,$98,$94,$90,$8C,$88,$84,$7F,$7B,$76,$71,$6D,$68,$63,$5E,$59,$54,$4F,$4A,$45,$40,$3B,$35,$30,$2B,$25,$20,$1B,$15,$10,$A,$5,$0,$FA,$F5,$EF,$EA,$E4,$DF,$DA,$D4,$CF,$CA,$C4,$BF,$BA,$B5,$B0,$AB,$A6,$A1,$9C,$97,$92,$8E,$89,$84,$80,$7B,$77,$73,$6F,$6B,$67,$63,$5F,$5B,$58,$54,$51,$4D,$4A,$47,$44,$41,$3F,$3C,$39,$37,$35,$33,$31,$2F,$2D,$2B,$2A,$28,$27,$26,$25,$24,$23,$23,$22,$22,$22,$22,$22,$22,$22,$23,$23,$24,$25,$26,$27,$28,$2A,$2B,$2D,$2F,$31,$33,$35,$37,$39,$3C,$3F,$41,$44,$47,$4A,$4D,$51,$54,$58,$5B,$5F,$63,$67,$6B,$6F,$73,$77,$7B,$80,$84,$89,$8E,$92,$97,$9C,$A1,$A6,$AB,$B0,$B5,$BA,$BF,$C4,$CA,$CF,$D4,$DA,$DF,$E4,$EA,$EF,$F5,$FA
0027F7r 1  15 1B 20 25  
0027FBr 1  2B 30 35 3B  
0028F3r 1               SUBCELL_Y_COS_H:
0028F3r 1  00 00 00 00  .byte
0028F7r 1  00 00 00 00  
0028FBr 1  00 00 00 00  
0029F3r 1               SUBCELL_Y_COS_L:
0029F3r 1  9C 9C 9C 9C  .byte $9C,$9C,$9C,$9C,$9C,$9B,$9B,$9A,$99,$98,$98,$97,$96,$94,$93,$92,$90,$8F,$8D,$8C,$8A,$88,$86,$84,$82,$80,$7D,$7B,$79,$76,$74,$71,$6E,$6C,$69,$66,$63,$60,$5D,$5A,$57,$53,$50,$4D,$49,$46,$43,$3F,$3B,$38,$34,$31,$2D,$29,$26,$22,$1E,$1A,$17,$13,$F,$B,$7,$3,$0,$FC,$F8,$F4,$F0,$EC,$E8,$E5,$E1,$DD,$D9,$D6,$D2,$CE,$CB,$C7,$C4,$C0,$BC,$B9,$B6,$B2,$AF,$AC,$A8,$A5,$A2,$9F,$9C,$99,$96,$93,$91,$8E,$8B,$89,$86,$84,$82,$7F,$7D,$7B,$79,$77,$75,$73,$72,$70,$6F,$6D,$6C,$6B,$69,$68,$67,$67,$66,$65,$64,$64,$63,$63,$63,$63,$63,$63,$63,$63,$63,$64,$64,$65,$66,$67,$67,$68,$69,$6B,$6C,$6D,$6F,$70,$72,$73,$75,$77,$79,$7B,$7D,$7F,$82,$84,$86,$89,$8B,$8E,$91,$93,$96,$99,$9C,$9F,$A2,$A5,$A8,$AC,$AF,$B2,$B6,$B9,$BC,$C0,$C4,$C7,$CB,$CE,$D2,$D6,$D9,$DD,$E1,$E5,$E8,$EC,$F0,$F4,$F8,$FC,$0,$3,$7,$B,$F,$13,$17,$1A,$1E,$22,$26,$29,$2D,$31,$34,$38,$3B,$3F,$43,$46,$49,$4D,$50,$53,$57,$5A,$5D,$60,$63,$66,$69,$6C,$6E,$71,$74,$76,$79,$7B,$7D,$80,$82,$84,$86,$88,$8A,$8C,$8D,$8F,$90,$92,$93,$94,$96,$97,$98,$98,$99,$9A,$9B,$9B,$9C,$9C,$9C,$9C
0029F7r 1  9C 9B 9B 9A  
0029FBr 1  99 98 98 97  
002AF3r 1               SUBCELL_Y_SIN_H:
002AF3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
002AF7r 1  00 00 00 00  
002AFBr 1  00 00 00 00  
002BF3r 1               SUBCELL_Y_SIN_L:
002BF3r 1  00 04 08 0D  .byte $0,$4,$8,$D,$11,$16,$1A,$1E,$23,$27,$2B,$30,$34,$38,$3C,$41,$45,$49,$4D,$51,$55,$59,$5D,$60,$64,$68,$6B,$6F,$72,$76,$79,$7C,$7F,$83,$86,$89,$8B,$8E,$91,$93,$96,$98,$9B,$9D,$9F,$A1,$A3,$A5,$A7,$A8,$AA,$AB,$AD,$AE,$AF,$B0,$B1,$B2,$B3,$B3,$B4,$B4,$B4,$B4,$B5,$B4,$B4,$B4,$B4,$B3,$B3,$B2,$B1,$B0,$AF,$AE,$AD,$AB,$AA,$A8,$A7,$A5,$A3,$A1,$9F,$9D,$9B,$98,$96,$93,$91,$8E,$8B,$89,$86,$83,$80,$7C,$79,$76,$72,$6F,$6B,$68,$64,$60,$5D,$59,$55,$51,$4D,$49,$45,$41,$3C,$38,$34,$30,$2B,$27,$23,$1E,$1A,$16,$11,$D,$8,$4,$0,$FB,$F7,$F2,$EE,$E9,$E5,$E1,$DC,$D8,$D4,$CF,$CB,$C7,$C3,$BE,$BA,$B6,$B2,$AE,$AA,$A6,$A2,$9F,$9B,$97,$94,$90,$8D,$89,$86,$83,$80,$7C,$79,$76,$74,$71,$6E,$6C,$69,$67,$64,$62,$60,$5E,$5C,$5A,$58,$57,$55,$54,$52,$51,$50,$4F,$4E,$4D,$4C,$4C,$4B,$4B,$4B,$4B,$4A,$4B,$4B,$4B,$4B,$4C,$4C,$4D,$4E,$4F,$50,$51,$52,$54,$55,$57,$58,$5A,$5C,$5E,$60,$62,$64,$67,$69,$6C,$6E,$71,$74,$76,$79,$7C,$80,$83,$86,$89,$8D,$90,$94,$97,$9B,$9F,$A2,$A6,$AA,$AE,$B2,$B6,$BA,$BE,$C3,$C7,$CB,$CF,$D4,$D8,$DC,$E1,$E5,$E9,$EE,$F2,$F7,$FB
002BF7r 1  11 16 1A 1E  
002BFBr 1  23 27 2B 30  
002CF3r 1               
002CF3r 1               MOVE_Y_H:
002CF3r 1  00 00 00 00  .byte
002CF7r 1  00 00 00 00  
002CFBr 1  00 00 00 00  
002DF3r 1               MOVE_Y_L:
002DF3r 1  08 07 07 07  .byte $8,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$6,$6,$6,$6,$6,$6,$6,$6,$6,$5,$5,$5,$5,$5,$5,$5,$4,$4,$4,$4,$4,$4,$3,$3,$3,$3,$3,$3,$2,$2,$2,$2,$2,$1,$1,$1,$1,$1,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF,$FF,$0,$0,$0,$0,$0,$0,$1,$1,$1,$1,$1,$2,$2,$2,$2,$2,$3,$3,$3,$3,$3,$3,$4,$4,$4,$4,$4,$4,$5,$5,$5,$5,$5,$5,$5,$6,$6,$6,$6,$6,$6,$6,$6,$6,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7,$7
002DF7r 1  07 07 07 07  
002DFBr 1  07 07 07 07  
002EF3r 1               MOVE_X_H:
002EF3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
002EF7r 1  00 00 00 00  
002EFBr 1  00 00 00 00  
002FF3r 1               MOVE_X_L:
002FF3r 1  00 00 00 00  .byte $0,$0,$0,$0,$0,$0,$1,$1,$1,$1,$1,$1,$2,$2,$2,$2,$2,$2,$2,$3,$3,$3,$3,$3,$3,$3,$4,$4,$4,$4,$4,$4,$4,$5,$5,$5,$5,$5,$5,$5,$5,$5,$5,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$6,$5,$5,$5,$5,$5,$5,$5,$5,$5,$5,$4,$4,$4,$4,$4,$4,$4,$3,$3,$3,$3,$3,$3,$3,$2,$2,$2,$2,$2,$2,$2,$1,$1,$1,$1,$1,$1,$0,$0,$0,$0,$0,$0,$FF,$FF,$FF,$FF,$FF,$FE,$FE,$FE,$FE,$FE,$FE,$FD,$FD,$FD,$FD,$FD,$FD,$FD,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FB,$FB,$FB,$FB,$FB,$FB,$FB,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$F9,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FA,$FB,$FB,$FB,$FB,$FB,$FB,$FB,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FD,$FD,$FD,$FD,$FD,$FD,$FD,$FE,$FE,$FE,$FE,$FE,$FE,$FF,$FF,$FF,$FF,$FF
002FF7r 1  00 00 01 01  
002FFBr 1  01 01 01 01  
0030F3r 1               
0030F3r 1               
0030F3r 1               WORLD_SPRITE_CENTER_XH: ; 128 bytes
0030F3r 1  64 64 64 64  .byte
0030F7r 1  64 64 64 64  
0030FBr 1  64 64 64 64  
003173r 1               WORLD_SPRITE_CENTER_XL: ; 128 bytes
003173r 1  00 0D 1B 29  .byte $0,$D,$1B,$29,$36,$43,$51,$5E,$6B,$78,$85,$92,$9F,$AB,$B8,$C4,$D1,$DD,$E9,$F6,$2,$E,$A,$FE,$F2,$E5,$D9,$CD,$C0,$B4,$A7,$9A,$8E,$81,$74,$67,$5A,$4C,$3F,$32,$24,$16,$9,$4,$12,$20,$2D,$3B,$48,$55,$62,$6F,$7C,$89,$96,$A3,$B0,$BC,$C9,$D5,$E1,$EE,$FA,$6,$12,$13,$FA,$EE,$E1,$D5,$C9,$BC,$B0,$A3,$96,$89,$7C,$6F,$62,$55,$48,$3B,$2D,$20,$12,$4,$9,$16,$24,$32,$3F,$4C,$5A,$67,$74,$81,$8E,$9A,$A7,$B4,$C0,$CD,$D9,$E5,$F2,$FE,$A,$E,$2,$F6,$E9,$DD,$D1,$C4,$B8,$AB,$9F,$92,$85,$78,$6B,$5E,$51,$43,$36,$29,$1B,$D
003177r 1  36 43 51 5E  
00317Br 1  6B 78 85 92  
0031F3r 1               WORLD_SPRITE_CENTER_YH: ; 128 bytes
0031F3r 1  4C 4C 4C 4C  .byte $4C,$4C,$4C,$4C,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4C,$4C,$4C,$4C,$4C,$4C,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4C,$4C,$4C,$4C,$4C,$4C,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4B,$4C,$4C,$4C
0031F7r 1  4B 4B 4B 4B  
0031FBr 1  4B 4B 4B 4B  
003273r 1               WORLD_SPRITE_CENTER_YL: ; 128 bytes
003273r 1  19 11 08 00  .byte $19,$11,$8,$0,$F7,$EE,$E6,$DD,$D4,$CB,$C2,$B9,$B0,$A7,$9D,$94,$8B,$81,$78,$6E,$64,$5B,$5E,$68,$71,$7B,$84,$8E,$97,$A0,$AA,$B3,$BC,$C5,$CE,$D7,$E0,$E8,$F1,$FA,$3,$B,$14,$17,$E,$5,$FD,$F4,$EB,$E3,$DA,$D1,$C8,$BF,$B6,$AD,$A3,$9A,$91,$87,$7E,$74,$6B,$61,$57,$57,$6B,$74,$7E,$87,$91,$9A,$A3,$AD,$B6,$BF,$C8,$D1,$DA,$E3,$EB,$F4,$FD,$5,$E,$17,$14,$B,$3,$FA,$F1,$E8,$E0,$D7,$CE,$C5,$BC,$B3,$AA,$A0,$97,$8E,$84,$7B,$71,$68,$5E,$5B,$64,$6E,$78,$81,$8B,$94,$9D,$A7,$B0,$B9,$C2,$CB,$D4,$DD,$E6,$EE,$F7,$0,$8,$11
003277r 1  F7 EE E6 DD  
00327Br 1  D4 CB C2 B9  
0032F3r 1               
0032F3r 1               WORLD_SPRITE_NUM_lookies: ; 128 bytes
0032F3r 1               ;      0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
0032F3r 1  00 00 00 00  .byte   0,  0,  0,  0, 32, 32, 32, 32, 32, 32, 64, 64, 64, 64, 64, 64
0032F7r 1  20 20 20 20  
0032FBr 1  20 20 40 40  
003303r 1  40 40 60 60  .byte  64, 64, 96, 96,160,160,160, 96, 96, 96, 64, 64, 64, 64, 64, 64
003307r 1  A0 A0 A0 60  
00330Br 1  60 60 40 40  
003313r 1  40 40 20 20  .byte  64, 64, 32, 32, 32, 32, 32, 32,  0,  0,  0,  0,  0,  0, 32, 32
003317r 1  20 20 20 20  
00331Br 1  00 00 00 00  
003323r 1  20 20 20 20  .byte  32, 32, 32, 32, 32, 64, 64, 64, 64, 64, 64, 64, 96, 96, 96,160
003327r 1  20 40 40 40  
00332Br 1  40 40 40 40  
003333r 1  A0 A0 60 60  .byte 160,160, 96, 96, 96, 64, 64, 64, 64, 64, 64, 64, 32, 32, 32, 32
003337r 1  60 40 40 40  
00333Br 1  40 40 40 40  
003343r 1  20 20 20 00  .byte  32, 32, 32,  0,  0,  0,  0,  0,  0, 32, 32, 32, 32, 32, 32, 64
003347r 1  00 00 00 00  
00334Br 1  00 20 20 20  
003353r 1  40 40 40 40  .byte  64, 64, 64, 64, 64, 64, 64, 96, 96, 96,160,160,160, 96, 96, 64
003357r 1  40 40 40 60  
00335Br 1  60 60 A0 A0  
003363r 1  40 40 40 40  .byte  64, 64, 64, 64, 64, 64, 64, 32, 32, 32, 32, 32, 32,  0,  0,  0
003367r 1  40 40 40 20  
00336Br 1  20 20 20 20  
003373r 1               WORLD_WALL_SPRITE_NUM_lookies:
003373r 1  80 80 80 80  .byte 128,128,128,128,128,128,128,128,128,128,192,192,192,192,192,192
003377r 1  80 80 80 80  
00337Br 1  80 80 C0 C0  
003383r 1  C0 C0 C0 C0  .byte 192,192,192,192,224,224,224,192,192,192,192,192,192,192,192,192
003387r 1  E0 E0 E0 C0  
00338Br 1  C0 C0 C0 C0  
003393r 1  C0 C0 80 80  .byte 192,192,128,128,128,128,128,128,128,128,128,128,128,128,128,128
003397r 1  80 80 80 80  
00339Br 1  80 80 80 80  
0033A3r 1  80 80 80 80  .byte 128,128,128,128,128,192,192,192,192,192,192,192,192,192,192,224
0033A7r 1  80 C0 C0 C0  
0033ABr 1  C0 C0 C0 C0  
0033B3r 1  E0 E0 C0 C0  .byte 224,224,192,192,192,192,192,192,192,192,192,192,128,128,128,128
0033B7r 1  C0 C0 C0 C0  
0033BBr 1  C0 C0 C0 C0  
0033C3r 1  80 80 80 80  .byte 128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,192
0033C7r 1  80 80 80 80  
0033CBr 1  80 80 80 80  
0033D3r 1  C0 C0 C0 C0  .byte 192,192,192,192,192,192,192,192,192,192,224,224,224,192,192,192
0033D7r 1  C0 C0 C0 C0  
0033DBr 1  C0 C0 E0 E0  
0033E3r 1  C0 C0 C0 C0  .byte 192,192,192,192,192,192,192,128,128,128,128,128,128,128,128,128
0033E7r 1  C0 C0 C0 80  
0033EBr 1  80 80 80 80  
0033F3r 1               
0033F3r 1               BITMAP_OFFSETS_HIGH:
0033F3r 1  00 00 01 01  .byte 0,0,1,1,2,3,3,4,5,5,6,6,7,8,8,9,10,10,11,11,12,13,13,14,15,15,16,16,17,18,18,19,20,20,21,21,22,23,23,24,25,25,26,26,27,28,28,29,30,30,31,31,32,33,33,34,35,35,36,36,37,38,38,39,40,40,41,41,42,43,43,44,45,45,46,46,47,48,48,49,50,50,51,51,52,53,53,54,55,55,56,56,57,58,58,59,60,60,61,61,62,63,63,64,65,65,66,66,67,68,68,69,70,70,71,71,72,73,73,74,75,75,76,76,77,78,78,79,80,80,81,81,82,83,83,84,85,85,86,86,87,88,88,89,90,90,91,91,92,93,93,94,95,95,96,96,97,98,98,99,100,100,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
0033F7r 1  02 03 03 04  
0033FBr 1  05 05 06 06  
0034F3r 1               BITMAP_OFFSETS_LOW:
0034F3r 1  00 A0 40 E0  .byte 0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96,0,160,64,224,128,32,192,96
0034F7r 1  80 20 C0 60  
0034FBr 1  00 A0 40 E0  
0035F3r 1               ;constants
0035F3r 1               
0035F3r 1               ; RAM Interrupt Vectors
0035F3r 1               IRQVec            = $0314
0035F3r 1               
0035F3r 1               ; VERA
0035F3r 1               VERA_addr_low     = $9F20
0035F3r 1               VERA_addr_high    = $9F21
0035F3r 1               VERA_addr_bank    = $9F22
0035F3r 1               VERA_data0        = $9F23
0035F3r 1               VERA_data1        = $9F24
0035F3r 1               VERA_ctrl         = $9F25
0035F3r 1               VERA_ien          = $9F26
0035F3r 1               VERA_isr          = $9F27
0035F3r 1               VERA_dc_video     = $9F29 ; DCSEL = 0
0035F3r 1               FX_CTRL           = $9F29 ; DCSEL = 2
0035F3r 1               FX_MULT           = $9F2C ; DCSEL = 2
0035F3r 1               FX_CACHE_L        = $9F29 ; DCSEL = 6
0035F3r 1               FX_CACHE_M        = $9F2A
0035F3r 1               FX_CACHE_H        = $9F2B
0035F3r 1               FX_CACHE_U        = $9F2C
0035F3r 1               ;   Current Field | Sprites Enable | Layer1 Enable  |Layer0 Enable
0035F3r 1               ; NTSC/RGB: 240P  | NTSC: Chroma Disable / RGB: HV Sync Output Mode
0035F3r 1               
0035F3r 1               VERA_dc_hscale    = $9F2A
0035F3r 1               VERA_dc_vscale    = $9F2B
0035F3r 1               
0035F3r 1               VERA_L0_config    = $9F2D
0035F3r 1               ;   7       6     5   4       3       2             1   0
0035F3r 1               ;   Map Height | Map Width | T256C | Bitmap Mode | Color Depth
0035F3r 1               ;   0 - 32                  0 - 16    0 tiled       0   1bpp mono
0035F3r 1               ;   1 - 64                  1 - 256   1 enabled     1   2bpp 4 color
0035F3r 1               ;   2 - 128                                         2   4bpp 16 color
0035F3r 1               ;   3 - 256                                         3   8bpp 256 color
0035F3r 1               ;   bitmap mode - tilebase points to bitmap data, mapbase not used
0035F3r 1               ;   tile width = 0 is 320 pixels / tile width=1 is 640 pixels.. so could do 4bpp x 320?
0035F3r 1               ;   The palette offset (in 'H-Scroll (11:8)') modifies the color indexes of the bitmap in the same way as in the tile modes.
0035F3r 1               
0035F3r 1               VERA_L0_mapbase   = $9F2E
0035F3r 1               VERA_L0_tilebase  = $9F2F ;   Tile Base Address (16:11) | Tile Height 0-8/1-16 | Tile Width 0-8/1-16
0035F3r 1               VERA_L0_HSCROLL_L = $9F30 ;  H-Scroll (7:0)
0035F3r 1               VERA_L0_HSCROLL_H = $9F31 ;  - H-Scroll (11:8)
0035F3r 1               VERA_L0_VSCROLL_L = $9F32 ;  V-Scroll (7:0)
0035F3r 1               VERA_L0_VSCROLL_H = $9F33 ;  - V-Scroll (11:8)
0035F3r 1               
0035F3r 1               VERA_L1_config    = $9F34
0035F3r 1               VERA_L1_mapbase   = $9F35
0035F3r 1               VERA_L1_tilebase  = $9F36
0035F3r 1               VERA_L1_HSCROLL_L = $9F37 ;  H-Scroll (7:0)
0035F3r 1               VERA_L1_HSCROLL_H = $9F38 ;  - H-Scroll (11:8)
0035F3r 1               VERA_L1_VSCROLL_L = $9F39 ;  V-Scroll (7:0)
0035F3r 1               VERA_L1_VSCROLL_H = $9F3A ;  - V-Scroll (11:8)
0035F3r 1               
0035F3r 1               VSYNC_BIT         = $01
0035F3r 1               
0035F3r 1               ; VRAM Addresses
0035F3r 1               ;   Address range Description
0035F3r 1               ;   $00000 - $1F9BF Video RAM   - 129,424 bytes -> 126K is 129,024 (1F800)
0035F3r 1               ;   $1F9C0 - $1F9FF PSG registers
0035F3r 1               ;   $1FA00 - $1FBFF Palette
0035F3r 1               ;   $1FC00 - $1FFFF Sprite attributes
0035F3r 1               VRAM_SPRITES =      $00000  ; putting sprite data at start of VRAM for now.. may move later?
0035F3r 1               VRAM_BITMAP_LAYERA =$11800  ; setting this to 68K ; was starts at 70K ... so up to ~70K for sprites.. not too shabby..
0035F3r 1               VRAM_BITMAP_LAYERB =$18000  ; ~25K needs to start at 2K boundary... 121.5-25= 96k
0035F3r 1               VRAM_TEXT_SCREEN =  $1E400  ; 121.5K    256 x 21 => 32 x 24 would take 1.5K tiles is min.. 64*32 = 2K 8 config..
0035F3r 1               VRAM_SPRITE_BUF =   $1EC00  ; 123K - sprite attribute buffer for swapping data in ..
0035F3r 1               VRAM_CHARSET =      $1F000  ;  $1:F000-$1:F7FF Charset loaded by kernal here .. is at 124K ..
0035F3r 1               ; only can go to 126K ...
0035F3r 1               VRAM_palette      = $1FA00      ;
0035F3r 1               VRAM_sprite_attributes = $1FC00
0035F3r 1               
0035F3r 1               SPRITES_ONLY_VGA = $41
0035F3r 1               SPRITES_LAYER1_LAYER0_VGA = $71
0035F3r 1               
0035F3r 1               
0035F3r 1               ; Kernal
0035F3r 1               CHROUT            = $FFD2
0035F3r 1               GETIN             = $FFE4
0035F3r 1               CINT              = $FF81
0035F3r 1               
0035F3r 1               
0035F3r 1               ; PETSCII Codes
0035F3r 1               WHITE             = $05
0035F3r 1               RETURN            = $0D
0035F3r 1               SPACE             = $20
0035F3r 1               ZERO_CHAR         = $30
0035F3r 1               ONE_CHAR          = $31
0035F3r 1               TWO_CHAR          = $32
0035F3r 1               THREE_CHAR        = $33
0035F3r 1               FOUR_CHAR         = $34
0035F3r 1               FIVE_CHAR         = $35
0035F3r 1               SIX_CHAR          = $36
0035F3r 1               SEVEN_CHAR        = $37
0035F3r 1               EIGHT_CHAR        = $38
0035F3r 1               NINE_CHAR         = $39
0035F3r 1               
0035F3r 1               A_CHAR            = $41
0035F3r 1               C_CHAR            = $43
0035F3r 1               D_CHAR            = $44
0035F3r 1               E_CHAR            = $45
0035F3r 1               I_CHAR            = $49
0035F3r 1               J_CHAR            = $4A
0035F3r 1               K_CHAR            = $4B
0035F3r 1               L_CHAR            = $4C
0035F3r 1               O_CHAR            = $4F
0035F3r 1               T_CHAR            = $54
0035F3r 1               W_CHAR            = $57
0035F3r 1               X_CHAR            = $58
0035F3r 1               Y_CHAR            = $59
0035F3r 1               Z_CHAR            = $5A
0035F3r 1               
0035F3r 1               CLR               = $93
0035F3r 1               
0035F3r 1               ; 	$0800-$9EFF	BASIC program/variables; available to the user
0035F3r 1               WORLD_DATA = $6000 	;	so is %100 [Y 5 bits ] : [ab] 0 [X - 6 bits
0035F3r 1               SCREEN_buffer = $8000
0035F3r 1               
0035F3r 1               ; zero page layout $0022-$007F is available to user
0035F3r 1               ZP_PTR = $22
0035F3r 1               SCRATCH_PTR = $7E
0035F3r 1               
0035F3r 1               SPRITE_SIZE_ORA = $D0 ; $D0 for 16x64, $50 for 16x16
0035F3r 1               
0035F3r 1               diff_sprite_to_transparent = 15
0035F3r 1               
0035F3r 1               SCREEN_OUT_RIGHT  = 160 ; right of middle is 116, +48 = 164
0035F3r 1               SCREEN_OUT_LEFT8    = 256-8
0035F3r 1               SCREEN_OUT_LEFT16   = 256-16  ; left of middle is 100, -48=52-16=36
0035F3r 1               SCREEN_OUT_LEFT32   = 256-32  ; left of middle is 100, -48=52-16=36
0035F3r 1               SCREEN_OUT_LEFT64   = 256-64  ; left of middle is 100, -48=52-16=36
0035F3r 1               SCREEN_OUT_TOP     = 240
0035F3r 1               SCREEN_OUT_BOTTOM  = 120
0035F3r 1               
0035F3r 1               ; global data ; 2E00
0035F3r 1               ;line 0
0035F3r 1  DE AD BE EF  GLOBAL_DATA:         .byte $DE,$AD,$BE,$EF ; 0-3
0035F7r 1               ;line 1
0035F7r 1  00 00        default_irq_vector:  .addr 0 ; 4-5
0035F9r 1  00 00        MASTER_CLOCK:        .addr 0 ; 6-7
0035FBr 1               ; line 2
0035FBr 1  00           VERA_LOCK:           .byte 0 ; 9 value written to screen is value at time DEBUG_WRITE
0035FCr 1  50           IRQ_VERA_LOCK:       .byte 80 ; value of VERA_LOCK when reached the Interrupt
0035FDr 1  00 00        .byte 0,0
0035FFr 1               ; line 3
0035FFr 1  00           STALL_COUNTER:       .byte 0
003600r 1  00           STALL_COUNTERH:      .byte 0
003601r 1  00           LAST_VSYNC_COUNTER:  .byte 0
003602r 1  01           VSYNC_counter:       .byte 1 ; 8
003603r 1               ; line 4
003603r 1  01           camera_facing: 		 .byte 1 ; 7
003604r 1  00           .byte 0
003605r 1  00           CAMERA_CENTER_XH:    .byte 0 ; 13
003606r 1  00           CAMERA_CENTER_YH:    .byte 0 ; 15
003607r 1               ; line 5
003607r 1               
003607r 1  00           camera_cell_x: 		 .byte 0 ; c
003608r 1  00           camera_cell_xl:       .byte 0 ; d
003609r 1  00           camera_cell_y: 		 .byte 0 ; e
00360Ar 1  00           camera_cell_yl:       .byte 0 ; f
00360Br 1               ; line 6
00360Br 1  2C           camera_world_pos_XH:    .byte 44 ; 8
00360Cr 1  30           camera_world_pos_XL:       .byte 48 ; 9
00360Dr 1  0F           camera_world_pos_YH:        .byte 15 ; A
00360Er 1  80           camera_world_pos_YL:       .byte 128  ; B
00360Fr 1               
00360Fr 1  00           DEBUG_A: .byte 0  ; B
003610r 1  00           DEBUG_B: .byte 0  ; C
003611r 1  00           DEBUG_C: .byte 0  ; D
003612r 1  00           DEBUG_D: .byte 0  ; E
003613r 1               
003613r 1               
003613r 1  00           NUM_AVAIL_SPRITES:   .byte 0 ; A
003614r 1  00           NUM_RESERVED_SPRITES:    .byte  0;(1+NUM_RESERVED_SPRITES-MASTER_CLOCK) << 1 ; F
003615r 1               
003615r 1  00           SPRITE_OBJECT_ENABLE: .byte 0 ;255 ;
003616r 1               
003616r 1  00           CAMERA_CENTER_XL:    .byte 0 ; 12
003617r 1  00           CAMERA_CENTER_YL:    .byte 0 ; 14
003618r 1  00           CAMERA_CENTER_TOP_PX: .byte 0 ; 16
003619r 1  00 00        CAMERA_CELL_LINE_PTR: .addr 0 ; 17-18
00361Br 1  00           WORLD_SPRITE_NUM:    .byte 0 ; 1B
00361Cr 1  00           WORLD_WALL_SPRITE_NUM: .byte 0; 1C
00361Dr 1  00           CURRENT_BITMAP_BUFFER: .byte 0 ; "A"
00361Er 1  00           LAST_BITMAP_BUFFER:    .byte 0 ;
00361Fr 1               
00361Fr 1  F0           camera_screen_out_top: .byte SCREEN_OUT_TOP       ; for determining visibility / stop conditions for checking if within range to view..
003620r 1  78           camera_screen_out_bottom: .byte SCREEN_OUT_BOTTOM
003621r 1               
003621r 1               .macro stash_scratch
003621r 1               	STA (SCRATCH_PTR)
003621r 1                   INC SCRATCH_PTR
003621r 1               .endmacro
003621r 1               
003621r 1               custom_irq_handler: ; 2E12
003621r 1  AD 27 9F        lda VERA_isr
003624r 1  29 01           and #VSYNC_BIT
003626r 1  F0 11           BEQ :++
003628r 1                  ;  for debug ..
003628r 1  AD rr rr        LDA VERA_LOCK
00362Br 1  8D rr rr        STA IRQ_VERA_LOCK
00362Er 1               
00362Er 1  EE rr rr        INC VSYNC_counter
003631r 1               
003631r 1  EE rr rr        INC VERA_LOCK
003634r 1  F0 06           BEQ :+++  ; @unlock_vera ; if we don't have lock we'll just fail this frame..
003636r 1  CE rr rr      : DEC VERA_LOCK
003639r 1  6C rr rr      : jmp (default_irq_vector)
00363Cr 1               
00363Cr 1  EE rr rr      : INC DEBUG_C
00363Fr 1  AD rr rr        LDA CURRENT_BITMAP_BUFFER
003642r 1  4D rr rr        EOR LAST_BITMAP_BUFFER
003645r 1  F0 EF           BEQ :--- ; if these match then there's nothing to change
003647r 1  AD rr rr        LDA CURRENT_BITMAP_BUFFER
00364Ar 1  8D rr rr        STA LAST_BITMAP_BUFFER
00364Dr 1  49 FF           EOR #$FF
00364Fr 1  8D rr rr        STA CURRENT_BITMAP_BUFFER
003652r 1  D0 04           BNE :+
003654r 1  A9 8C           LDA #VRAM_BITMAP_LAYERA>>9
003656r 1  80 02           BRA :++
003658r 1  A9 C0         : LDA #VRAM_BITMAP_LAYERB>>9
00365Ar 1  8D 2F 9F      : STA VERA_L0_tilebase ; don't switch for now
00365Dr 1               
00365Dr 1               ;   JMP @patched
00365Dr 1               
00365Dr 1               ;   JMP @USE_CACHE
00365Dr 1  A9 01           LDA #$01
00365Fr 1  8D 25 9F        STA VERA_ctrl
003662r 1               
003662r 1  A2 FF           LDX #$FF
003664r 1  8E 20 9F        STX VERA_addr_low
003667r 1  8E 21 9F        STX VERA_addr_high
00366Ar 1  A9 19           LDA #$19
00366Cr 1  8D 22 9F        STA VERA_addr_bank
00366Fr 1               
00366Fr 1  9C 25 9F        STZ VERA_ctrl  ;  reset to address 0
003672r 1  8D 22 9F        STA VERA_addr_bank
003675r 1               
003675r 1  A9 EF           LDA #$EF
003677r 1  8D 21 9F        STA VERA_addr_high
00367Ar 1  8E 20 9F        STX VERA_addr_low
00367Dr 1               
00367Dr 1                  ;SEC
00367Dr 1                 ; LDA #128
00367Dr 1                ;  SBC NUM_RESERVED_SPRITES
00367Dr 1               ;   TAX
00367Dr 1  AE rr rr        LDX NUM_AVAIL_SPRITES
003680r 1  AD 23 9F      : LDA VERA_data0   ;  4
003683r 1  8D 24 9F        STA VERA_data1   ;  4  20
003686r 1  AD 23 9F        LDA VERA_data0   ;  4  8
003689r 1  8D 24 9F        STA VERA_data1   ;  4  20
00368Cr 1  AD 23 9F        LDA VERA_data0   ;  4  12
00368Fr 1  8D 24 9F        STA VERA_data1   ;  4  20
003692r 1  AD 23 9F        LDA VERA_data0   ;  4  16
003695r 1  8D 24 9F        STA VERA_data1   ;  4  20
003698r 1  AD 23 9F        LDA VERA_data0   ;  4
00369Br 1  8D 24 9F        STA VERA_data1   ;  4  20
00369Er 1  AD 23 9F        LDA VERA_data0   ;  4  8
0036A1r 1  8D 24 9F        STA VERA_data1   ;  4  20
0036A4r 1  AD 23 9F        LDA VERA_data0   ;  4  12
0036A7r 1  8D 24 9F        STA VERA_data1   ;  4  20
0036AAr 1  AD 23 9F        LDA VERA_data0   ;  4  16
0036ADr 1  8D 24 9F        STA VERA_data1   ;  4  20
0036B0r 1  CA              DEX         ;  2  22
0036B1r 1  D0 CD           BNE :-      ;  3  25       8per byte = 64 per sprite + 5 = 69 per * 128 = 8,832 cycles
0036B3r 1               
0036B3r 1  4C rr rr        JMP @patched
0036B6r 1                @USE_CACHE:
0036B6r 1  9C 20 9F        STZ VERA_addr_low
0036B9r 1  A9 ED           LDA #>VRAM_SPRITE_BUF+1
0036BBr 1  8D 21 9F        STA VERA_addr_high
0036BEr 1  A9 11           LDA #$11
0036C0r 1  8D 22 9F        STA VERA_addr_bank
0036C3r 1  A9 05           LDA #$05 ; DCSEL 2, addrsel1 , main FX config..
0036C5r 1  8D 25 9F        STA VERA_ctrl
0036C8r 1  9C 20 9F        STZ VERA_addr_low
0036CBr 1  A9 FD           LDA #>VRAM_sprite_attributes+1
0036CDr 1  8D 21 9F        STA VERA_addr_high
0036D0r 1  A9 31           LDA #$31 ; increment 4 at a time
0036D2r 1  8D 22 9F        STA VERA_addr_bank
0036D5r 1               
0036D5r 1  A9 60           LDA #%01100000 ; no trans, cache write, cache fill,not one byte cycle | no hop, no 4bit, addr1 mode=0
0036D7r 1  8D 29 9F        STA FX_CTRL
0036DAr 1  9C 2C 9F        STZ FX_MULT ; zero out the cache thingy
0036DDr 1  A2 60           LDX #96
0036DFr 1  AD 23 9F      : LDA VERA_data0   ;  4
0036E2r 1  AD 23 9F        LDA VERA_data0   ;  4  8
0036E5r 1  AD 23 9F        LDA VERA_data0   ;  4  12
0036E8r 1  AD 23 9F        LDA VERA_data0   ;  4  16
0036EBr 1  9C 24 9F        STZ VERA_data1   ;  4  20
0036EEr 1  AD 23 9F        LDA VERA_data0   ;  4
0036F1r 1  AD 23 9F        LDA VERA_data0   ;  4  8
0036F4r 1  AD 23 9F        LDA VERA_data0   ;  4  12
0036F7r 1  AD 23 9F        LDA VERA_data0   ;  4  16
0036FAr 1  9C 24 9F        STZ VERA_data1   ;  4  20
0036FDr 1  CA              DEX         ;  2  22
0036FEr 1  D0 DF           BNE :-      ;  3  25       25 per 4 bytes = 6,400 cycles
003700r 1  9C 29 9F        STZ FX_CTRL
003703r 1               
003703r 1  9C 25 9F        STZ VERA_ctrl
003706r 1  9C 29 9F       stz VERA_dc_video
003709r 1  A9 41          lda #SPRITES_ONLY_VGA
00370Br 1  8D 29 9F       sta VERA_dc_video
00370Er 1  4C rr rr       jmp @patched
003711r 1  A9 06           LDA #6
003713r 1  8D 20 9F        STA VERA_addr_low
003716r 1  A9 FD           LDA #>VRAM_sprite_attributes+1
003718r 1  8D 21 9F        STA VERA_addr_high
00371Br 1  A9 41           LDA #$41 ; increment 8 at a time
00371Dr 1  8D 22 9F        STA VERA_addr_bank
003720r 1               
003720r 1  A9 0C           LDA #$0C
003722r 1  A2 60           LDX #96
003724r 1  8D 23 9F      : STA VERA_data0
003727r 1  CA              DEX
003728r 1  D0 FA           BNE :-
00372Ar 1               
00372Ar 1  9C 25 9F        STZ VERA_ctrl
00372Dr 1               
00372Dr 1               @patched:
00372Dr 1               @unlock_vera:
00372Dr 1               ;   INC VERA_LOCK ; push VERA_LOCK to 1 from zero.. indicating we've done the swap needed
00372Dr 1               @continue:
00372Dr 1                  ; continue to default IRQ handler
00372Dr 1  6C rr rr        jmp (default_irq_vector)
003730r 1                  ; RTI will happen after jump
003730r 1               
003730r 1               start:
003730r 1                 ; start of program - init globals
003730r 1  AD 14 03       lda IRQVec
003733r 1  8D rr rr       sta default_irq_vector
003736r 1  AD 15 03       lda IRQVec+1
003739r 1  8D rr rr       sta default_irq_vector+1
00373Cr 1               
00373Cr 1  9C 29 9F       stz VERA_dc_video   ; disable display
00373Fr 1  A9 33          lda #51 ; #43 ; set scale for bitmap mode - going for 215x161 mode
003741r 1  8D 2A 9F       sta VERA_dc_hscale
003744r 1  8D 2B 9F       sta VERA_dc_vscale
003747r 1                 ; for now no L0 or L1
003747r 1               
003747r 1                 ; let's stick that test sprite data into VRAM at zero for now..
003747r 1  9C 25 9F       stz VERA_ctrl
00374Ar 1  9C 20 9F       stz VERA_addr_low
00374Dr 1  9C 21 9F       stz VERA_addr_high
003750r 1  A9 10          lda #$10
003752r 1  8D 22 9F       sta VERA_addr_bank
003755r 1                 ; load test VRAM data
003755r 1               
003755r 1                 ; is 512 bytes at test_cell_sprite label
003755r 1  A0 00          ldy #0
003757r 1               
003757r 1  A9 rr          LDA #<test_vram_data
003759r 1  85 22          STA ZP_PTR
00375Br 1  A9 rr          LDA #>test_vram_data
00375Dr 1  85 23          STA ZP_PTR+1
00375Fr 1  A2 40          LDX #64   ;   num pages to copy - 16 pages / 8K  - sprite addr 0-255
003761r 1  80 02          BRA :++
003763r 1                 :
003763r 1  E6 23             INC ZP_PTR+1
003765r 1                   :
003765r 1  B1 22              LDA (ZP_PTR),Y
003767r 1  8D 23 9F           STA VERA_data0
00376Ar 1  C8                 INY
00376Br 1  D0 F8              BNE :-
00376Dr 1  CA                DEX
00376Er 1  D0 F3             BNE :--
003770r 1               
003770r 1                 ; initialize some waves
003770r 1  64 22          STZ ZP_PTR
003772r 1  A9 rr          LDA #>TUB_WORLD
003774r 1  85 23          STA ZP_PTR+1
003776r 1  A9 08          LDA #8
003778r 1  85 24          STA ZP_PTR+2 ; for use as page counter..
00377Ar 1  A2 00          LDX #0
00377Cr 1  B1 22          : LDA (ZP_PTR),y ; grab world data
00377Er 1  C9 80            CMP #128       ; is outside or inside tub?
003780r 1  B0 0B            BCS :+         ; skip this one
003782r 1  8A               TXA
003783r 1  91 22            STA (ZP_PTR),y
003785r 1  E8               INX
003786r 1  E8               INX
003787r 1  E8               INX
003788r 1  E8               INX
003789r 1  E0 34            CPX #52
00378Br 1  B0 0B            BCS :++
00378Dr 1  C8             : INY
00378Er 1  D0 EC            BNE :--
003790r 1  E6 23            INC ZP_PTR+1
003792r 1  C6 24            DEC ZP_PTR+2
003794r 1  D0 E6            BNE :--
003796r 1  80 18            BRA :+++
003798r 1  B1 22          : LDA (ZP_PTR),y
00379Ar 1  C9 80            CMP #128       ; is outside or inside tub?
00379Cr 1  B0 09            BCS :+         ; skip this one
00379Er 1  8A               TXA
00379Fr 1  91 22            STA (ZP_PTR),y
0037A1r 1  CA               DEX
0037A2r 1  CA               DEX
0037A3r 1  CA               DEX
0037A4r 1  CA               DEX
0037A5r 1  F0 E6            BEQ :--
0037A7r 1  C8             : INY
0037A8r 1  D0 EE            BNE :--
0037AAr 1  E6 23            INC ZP_PTR+1
0037ACr 1  C6 24            DEC ZP_PTR+2
0037AEr 1  D0 E8            BNE :--
0037B0r 1                 :
0037B0r 1               
0037B0r 1               
0037B0r 1                 ; write custom palette data  - 16 colors only for now.. $1:FA00-$1:FBFF   VERA Color Palette (256 x 2 bytes)
0037B0r 1  A2 1F          LDX #31
0037B2r 1  8E 20 9F       STX VERA_addr_low
0037B5r 1  A9 FA          LDA #$FA
0037B7r 1  8D 21 9F       STA VERA_addr_high
0037BAr 1  A9 19          LDA #$19
0037BCr 1  8D 22 9F       STA VERA_addr_bank
0037BFr 1                 :
0037BFr 1  BD rr rr         LDA test_optimal_pal_data,X
0037C2r 1  8D 23 9F         STA VERA_data0
0037C5r 1  CA               DEX
0037C6r 1  D0 F7            BNE :-
0037C8r 1  BD rr rr       LDA test_optimal_pal_data,X
0037CBr 1  8D 23 9F       STA VERA_data0
0037CEr 1               
0037CEr 1  A9 08          LDA #8
0037D0r 1  9C 34 9F       STz VERA_L1_config
0037D3r 1  A9 F8          LDA #VRAM_CHARSET >> 9
0037D5r 1  8D 36 9F       STA VERA_L1_tilebase
0037D8r 1  A9 F2          LDA #VRAM_TEXT_SCREEN >> 9
0037DAr 1  8D 35 9F       STA VERA_L1_mapbase
0037DDr 1               
0037DDr 1  9C 20 9F       STZ VERA_addr_low
0037E0r 1  A9 18          LDA #>VRAM_BITMAP_LAYERA
0037E2r 1  8D 21 9F       STA VERA_addr_high
0037E5r 1  A9 11          LDA #$11
0037E7r 1  8D 22 9F       STA VERA_addr_bank
0037EAr 1  A2 67          LDX #103  ;  zero bufferA
0037ECr 1  A0 00          LDY #0
0037EEr 1  9C 23 9F     : STZ VERA_data0
0037F1r 1  C8             INY
0037F2r 1  D0 FA          BNE :-
0037F4r 1  CA             DEX
0037F5r 1  D0 F7          BNE :-
0037F7r 1  A2 65          LDX #101  ;  write A to bufferB initially as debug / flashing display when swapped..
0037F9r 1                 ;LDA #255
0037F9r 1  8D 23 9F     : STA VERA_data0
0037FCr 1  C8             INY
0037FDr 1  D0 FA          BNE :-
0037FFr 1  CA             DEX
003800r 1  D0 F7          BNE :-
003802r 1               
003802r 1  9C 23 9F       STZ VERA_data0
003805r 1  A9 21          LDA #$21
003807r 1  8D 22 9F       STA VERA_addr_bank
00380Ar 1               
00380Ar 1  A2 0F          LDX #15
00380Cr 1  A0 14        : LDY #20
00380Er 1  A9 01          LDA #$01
003810r 1               
003810r 1  8D 23 9F       : STA VERA_data0
003813r 1  88               DEY
003814r 1  D0 FA            BNE :-
003816r 1  A0 F1            LDY #$F1
003818r 1  8C 23 9F         STY VERA_data0 ; cols 20-23
00381Br 1  8C 23 9F         STY VERA_data0
00381Er 1  8C 23 9F         STY VERA_data0
003821r 1  8C 23 9F         STY VERA_data0
003824r 1               
003824r 1  8C 23 9F         STY VERA_data0 ; cols 24-27
003827r 1  8C 23 9F         STY VERA_data0
00382Ar 1  8C 23 9F         STY VERA_data0
00382Dr 1  8C 23 9F         STY VERA_data0
003830r 1               
003830r 1  8C 23 9F         STY VERA_data0 ; cols 28-31
003833r 1  8C 23 9F         STY VERA_data0
003836r 1  8C 23 9F         STY VERA_data0
003839r 1  8C 23 9F         STY VERA_data0
00383Cr 1  CA              DEX
00383Dr 1  D0 CD           BNE :--
00383Fr 1  A2 A0          LDX #160
003841r 1  8C 23 9F       : STY VERA_data0
003844r 1  8C 23 9F         STY VERA_data0
003847r 1  CA               DEX
003848r 1  D0 F7            BNE :-
00384Ar 1               ;  LDA #4
00384Ar 1               ;  STA VERA_L1_HSCROLL_L
00384Ar 1               ;  STA VERA_L1_VSCROLL_L
00384Ar 1               
00384Ar 1  9C 20 9F       STZ VERA_addr_low
00384Dr 1  A9 E4          LDA #>VRAM_TEXT_SCREEN
00384Fr 1  8D 21 9F       STA VERA_addr_high
003852r 1  A2 04          LDX #4
003854r 1  A9 20          LDA #32
003856r 1  8D 23 9F     : STA VERA_data0
003859r 1  C8             INY
00385Ar 1  D0 FA          BNE :-
00385Cr 1  CA             DEX
00385Dr 1  D0 F7          BNE :-
00385Fr 1               
00385Fr 1  A9 06          LDA #$06
003861r 1  8D 2D 9F       STA VERA_L0_config
003864r 1  A9 8C          LDA #(VRAM_BITMAP_LAYERA>>9)
003866r 1               
003866r 1               ;  LDA #VRAM_BITMAP_LAYERB>>9
003866r 1  8D 2F 9F       STA VERA_L0_tilebase
003869r 1               
003869r 1  A9 06          LDA #6
00386Br 1  8D 20 9F       STA VERA_addr_low
00386Er 1  A9 EC          LDA #>VRAM_SPRITE_BUF
003870r 1  8D 21 9F       STA VERA_addr_high
003873r 1  A9 41          LDA #$41
003875r 1  8D 22 9F       STA VERA_addr_bank
003878r 1  9C 23 9F       : STZ VERA_data0
00387Br 1  E8               INX
00387Cr 1  D0 FA            BNE :-
00387Er 1                 ; enable display
00387Er 1  9C 25 9F       stz VERA_ctrl
003881r 1  A9 71          lda #SPRITES_LAYER1_LAYER0_VGA ; #SPRITES_ONLY_VGA
003883r 1  8D 29 9F       sta VERA_dc_video
003886r 1               
003886r 1               ;  DEC VERA_LOCK ; unlock the vera for first go...
003886r 1               ;   BRA @camera_world_changed
003886r 1                 ; overwrite RAM IRQ vector with custom handler address
003886r 1  78             sei ; disable IRQ while vector is changing
003887r 1  A9 rr          lda #<custom_irq_handler
003889r 1  8D 14 03       sta IRQVec
00388Cr 1  A9 rr          lda #>custom_irq_handler
00388Er 1  8D 15 03       sta IRQVec+1
003891r 1  A9 01          lda #VSYNC_BIT ; make VERA only generate VSYNC IRQs
003893r 1  8D 26 9F       sta VERA_ien
003896r 1  58             cli ; enable IRQ now that vector is properly set
003897r 1               
003897r 1               
003897r 1                 ; main loop here...
003897r 1  9C rr rr        STZ camera_facing
00389Ar 1               
00389Ar 1               @camera_world_changed:
00389Ar 1                  ; copy over cell YL as-is
00389Ar 1  AD rr rr        LDA camera_world_pos_YL
00389Dr 1  8D rr rr        STA camera_cell_yl
0038A0r 1                  ; YH gets copied over ..
0038A0r 1  AD rr rr        LDA camera_world_pos_YH
0038A3r 1  8D rr rr        STA camera_cell_y
0038A6r 1                  ; cellX = WORLDX*ratio - floor(cellY)/2
0038A6r 1                  ;  halve floor(cellY)
0038A6r 1  4A              LSR
0038A7r 1  85 7F           STA $7F ; stash it for scratch
0038A9r 1  A9 00           LDA #0
0038ABr 1  6A              ROR
0038ACr 1  85 7E           STA $7E ; and there's the half..
0038AEr 1               
0038AEr 1  AE rr rr        LDX camera_world_pos_XH
0038B1r 1  AC rr rr        LDY camera_world_pos_XL
0038B4r 1  18              CLC
0038B5r 1  B9 rr rr        LDA WORLD_TO_CELL_XH,Y ; that bit from pos_XL
0038B8r 1  7D rr rr        ADC WORLD_TO_CELL_XL,X ; plus the bit from pos_XH
0038BBr 1  A8              TAY   ;  cellXL from ratio
0038BCr 1  BD rr rr        LDA WORLD_TO_CELL_XH,X
0038BFr 1  69 00           ADC #0 ; gotta do that carry and all ..
0038C1r 1  AA              TAX   ; cellXH from ratio
0038C2r 1               
0038C2r 1  98              TYA
0038C3r 1  38              SEC
0038C4r 1  E5 7E           SBC $7E
0038C6r 1  8D rr rr        STA camera_cell_xl
0038C9r 1  8A              TXA
0038CAr 1  E5 7F           SBC $7F
0038CCr 1  8D rr rr        STA camera_cell_x
0038CFr 1  4C rr rr        jmp @do_update
0038D2r 1               
0038D2r 1               @camera_cell_changed: ; run through this more as a normalization step for camera..
0038D2r 1                  ; worldX = scaled(floor(cellY)/2 + cellX )
0038D2r 1  AD rr rr        LDA camera_cell_yl
0038D5r 1  8D rr rr        STA camera_world_pos_YL
0038D8r 1  AD rr rr        LDA camera_cell_y
0038DBr 1  8D rr rr        STA camera_world_pos_YH
0038DEr 1  4A              LSR
0038DFr 1  AA              TAX  ; high byte floor(Y)/2
0038E0r 1  A9 00           LDA #0
0038E2r 1  6A              ROR ; either is zero or 128 now ... either way, carry is cleared.
0038E3r 1  6D rr rr        ADC camera_cell_xl
0038E6r 1  A8              TAY ; stash the low to byte
0038E7r 1  8A              TXA ; high byte floor (Y)/2 .. ready for adding
0038E8r 1  6D rr rr        ADC camera_cell_x
0038EBr 1  AA              TAX ; stash high byte ... carry _should_ be cleared unless X >255 ... ?
0038ECr 1  B9 rr rr        LDA CELL_LOW_TO_WORLD_XL,Y
0038EFr 1  7D rr rr        ADC CELL_TO_WORLD_XL,X
0038F2r 1  8D rr rr        STA camera_world_pos_XL
0038F5r 1  B9 rr rr        LDA CELL_LOW_TO_WORLD_XH,Y
0038F8r 1  7D rr rr        ADC CELL_TO_WORLD_XH,X
0038FBr 1  8D rr rr        STA camera_world_pos_XH
0038FEr 1                  ;  jmp @do_update ; superfluous currently. redundant even..
0038FEr 1               
0038FEr 1               
0038FEr 1               @do_update:
0038FEr 1                  ;  set up screen center stuff
0038FEr 1               
0038FEr 1               
0038FEr 1  AD rr rr        LDA camera_facing
003901r 1  29 7F           AND #127
003903r 1  AA              TAX
003904r 1  BD rr rr        LDA WORLD_SPRITE_NUM_lookies,X
003907r 1  8D rr rr        STA WORLD_SPRITE_NUM
00390Ar 1  BD rr rr        LDA WORLD_WALL_SPRITE_NUM_lookies,X
00390Dr 1  8D rr rr        STA WORLD_WALL_SPRITE_NUM
003910r 1               
003910r 1  38              SEC
003911r 1  BD rr rr        LDA WORLD_SPRITE_CENTER_XL,X
003914r 1  8D rr rr        STA CAMERA_CENTER_XL
003917r 1  BD rr rr        LDA WORLD_SPRITE_CENTER_XH,X
00391Ar 1  E9 1C           SBC #28
00391Cr 1  8D rr rr        STA CAMERA_CENTER_XH
00391Fr 1               
00391Fr 1  BD rr rr        LDA WORLD_SPRITE_CENTER_YL,X
003922r 1  8D rr rr        STA CAMERA_CENTER_YL
003925r 1  38              SEC
003926r 1  BD rr rr        LDA WORLD_SPRITE_CENTER_YH,X
003929r 1  E9 14           SBC #20
00392Br 1  8D rr rr        STA CAMERA_CENTER_TOP_PX
00392Er 1               
00392Er 1  AE rr rr         LDX camera_facing
003931r 1               
003931r 1  AD rr rr         LDA camera_cell_xl
003934r 1  4A               LSR ;   /2
003935r 1  4A               LSR ;   /4
003936r 1  4A               LSR ;   /8
003937r 1  4A               LSR ;   /16
003938r 1  38               SEC
003939r 1  E9 08            SBC #8 ;   subtract le middle..
00393Br 1  A8               TAY
00393Cr 1  B0 29            BCS :++    ;  is positive..
00393Er 1  18             : CLC
00393Fr 1  AD rr rr         LDA CAMERA_CENTER_XL
003942r 1  7D rr rr         ADC SUBCELL_X_COS_L,X
003945r 1  8D rr rr         STA CAMERA_CENTER_XL
003948r 1  AD rr rr         LDA CAMERA_CENTER_XH
00394Br 1  7D rr rr         ADC SUBCELL_X_COS_H,X
00394Er 1  8D rr rr         STA CAMERA_CENTER_XH
003951r 1  38               SEC
003952r 1  AD rr rr         LDA CAMERA_CENTER_YL
003955r 1  FD rr rr         SBC SUBCELL_Y_SIN_L,X
003958r 1  8D rr rr         STA CAMERA_CENTER_YL
00395Br 1  AD rr rr         LDA CAMERA_CENTER_TOP_PX
00395Er 1  FD rr rr         SBC SUBCELL_Y_SIN_H,X
003961r 1  8D rr rr         STA CAMERA_CENTER_TOP_PX
003964r 1  C8               INY
003965r 1  D0 D7            BNE :-
003967r 1  F0 29          : BEQ :++
003969r 1  38             : SEC
00396Ar 1  AD rr rr         LDA CAMERA_CENTER_XL
00396Dr 1  FD rr rr         SBC SUBCELL_X_COS_L,X
003970r 1  8D rr rr         STA CAMERA_CENTER_XL
003973r 1  AD rr rr         LDA CAMERA_CENTER_XH
003976r 1  FD rr rr         SBC SUBCELL_X_COS_H,X
003979r 1  8D rr rr         STA CAMERA_CENTER_XH
00397Cr 1  18               CLC
00397Dr 1  AD rr rr         LDA CAMERA_CENTER_YL
003980r 1  7D rr rr         ADC SUBCELL_Y_SIN_L,X
003983r 1  8D rr rr         STA CAMERA_CENTER_YL
003986r 1  AD rr rr         LDA CAMERA_CENTER_TOP_PX
003989r 1  7D rr rr         ADC SUBCELL_Y_SIN_H,X
00398Cr 1  8D rr rr         STA CAMERA_CENTER_TOP_PX
00398Fr 1  88               DEY
003990r 1  D0 D7            BNE :-
003992r 1                 :
003992r 1               
003992r 1  AD rr rr         LDA camera_cell_yl
003995r 1  4A               LSR ;   /2
003996r 1  4A               LSR ;   /4
003997r 1  4A               LSR ;   /8
003998r 1  4A               LSR ;   /16
003999r 1  38               SEC
00399Ar 1  E9 08            SBC #8 ;   subtract le middle..
00399Cr 1  A8               TAY
00399Dr 1  B0 29            BCS :++    ;  is positive..
00399Fr 1  18             : CLC
0039A0r 1  AD rr rr         LDA CAMERA_CENTER_XL
0039A3r 1  7D rr rr         ADC SUBCELL_X_SIN_L,X
0039A6r 1  8D rr rr         STA CAMERA_CENTER_XL
0039A9r 1  AD rr rr         LDA CAMERA_CENTER_XH
0039ACr 1  7D rr rr         ADC SUBCELL_X_SIN_H,X
0039AFr 1  8D rr rr         STA CAMERA_CENTER_XH
0039B2r 1  18               CLC
0039B3r 1  AD rr rr         LDA CAMERA_CENTER_YL
0039B6r 1  7D rr rr         ADC SUBCELL_Y_COS_L,X
0039B9r 1  8D rr rr         STA CAMERA_CENTER_YL
0039BCr 1  AD rr rr         LDA CAMERA_CENTER_TOP_PX
0039BFr 1  7D rr rr         ADC SUBCELL_Y_COS_H,X
0039C2r 1  8D rr rr         STA CAMERA_CENTER_TOP_PX
0039C5r 1  C8               INY
0039C6r 1  D0 D7            BNE :-
0039C8r 1  F0 29          : BEQ :++
0039CAr 1  38             : SEC
0039CBr 1  AD rr rr         LDA CAMERA_CENTER_XL
0039CEr 1  FD rr rr         SBC SUBCELL_X_SIN_L,X
0039D1r 1  8D rr rr         STA CAMERA_CENTER_XL
0039D4r 1  AD rr rr         LDA CAMERA_CENTER_XH
0039D7r 1  FD rr rr         SBC SUBCELL_X_SIN_H,X
0039DAr 1  8D rr rr         STA CAMERA_CENTER_XH
0039DDr 1               
0039DDr 1  38               SEC
0039DEr 1  AD rr rr         LDA CAMERA_CENTER_YL
0039E1r 1  FD rr rr         SBC SUBCELL_Y_COS_L,X
0039E4r 1  8D rr rr         STA CAMERA_CENTER_YL
0039E7r 1  AD rr rr         LDA CAMERA_CENTER_TOP_PX
0039EAr 1  FD rr rr         SBC SUBCELL_Y_COS_H,X
0039EDr 1  8D rr rr         STA CAMERA_CENTER_TOP_PX
0039F0r 1  88               DEY
0039F1r 1  D0 D7            BNE :-
0039F3r 1                 :
0039F3r 1                  ;  set up tub pointer .. this will let us grab the height value for current location..
0039F3r 1  64 7E            STZ $7E
0039F5r 1  AD rr rr         LDA camera_cell_y
0039F8r 1  4A               LSR  ;  y pages of 128
0039F9r 1  66 7E            ROR $7E
0039FBr 1  4A               LSR  ; y pages of 64 !
0039FCr 1  66 7E            ROR $7E
0039FEr 1  69 rr            ADC #>TUB_WORLD
003A00r 1  85 7F            STA $7F
003A02r 1  8D rr rr         STA CAMERA_CELL_LINE_PTR+1
003A05r 1  A5 7E            LDA $7E
003A07r 1  8D rr rr         STA CAMERA_CELL_LINE_PTR
003A0Ar 1               
003A0Ar 1  AC rr rr         LDY camera_cell_x
003A0Dr 1  B1 7E            LDA ($7E),y
003A0Fr 1  C9 56            CMP #86 ; is largest value we will allow .. accounts for tub heights..
003A11r 1  90 02            BCC :+
003A13r 1  A9 56            LDA #86    ;
003A15r 1  A8              : TAY
003A16r 1               
003A16r 1  18              CLC
003A17r 1  AD rr rr        LDA CAMERA_CENTER_YL
003A1Ar 1  79 rr rr        ADC CONVERT_HEIGHTS_PIXELS_L,Y
003A1Dr 1  8D rr rr        STA CAMERA_CENTER_YL
003A20r 1  AD rr rr        LDA CAMERA_CENTER_TOP_PX
003A23r 1  79 rr rr        ADC CONVERT_HEIGHTS_PIXELS,Y
003A26r 1  8D rr rr        STA CAMERA_CENTER_YH
003A29r 1               
003A29r 1  18              CLC
003A2Ar 1  A9 78           LDA #SCREEN_OUT_BOTTOM
003A2Cr 1  79 rr rr        ADC CONVERT_HEIGHTS_PIXELS,Y
003A2Fr 1  8D rr rr        STA camera_screen_out_bottom
003A32r 1               
003A32r 1                  ; if something is higher than us it would be (52-CONVERT_HEIGHTS_PIXELS,Y)
003A32r 1                  ; so true effective top of screen check to account for that would be ...
003A32r 1                  ; SCREEN_OUT_TOP - (52 - CONVERT_HEIGHTS_PIXELS,Y)
003A32r 1                  ; screen out top - 52 + CONVERT_HEIGHTS_PIXELS,Y
003A32r 1                  ; ok so if we are as high as we can be, then something at farthest Z visible Z
003A32r 1                  ; or s this constant??? should it even be attempted to add to world data?
003A32r 1  38              SEC
003A33r 1  AD rr rr        LDA CAMERA_CENTER_TOP_PX
003A36r 1  E9 80           SBC #16+60+52 ;-16 is top out.. 60 to mid screen, then max diff in height from there.. so if was middle screen 60 now its -68
003A38r 1  8D rr rr        STA camera_screen_out_top
003A3Br 1               
003A3Br 1                  ; clear the object list ...
003A3Br 1  38               SEC
003A3Cr 1  A9 80            LDA #128
003A3Er 1  ED rr rr         SBC NUM_RESERVED_SPRITES
003A41r 1  8D rr rr         STA NUM_AVAIL_SPRITES
003A44r 1               
003A44r 1  9C rr rr         STZ OBJECT_LIST_BYTE6_NEXT ; because we can't use zero anyway..
003A47r 1  A9 08            LDA #$08 ; is basis for all the z_flips <- this may change depending on orientation..
003A49r 1  A2 00            LDX #0
003A4Br 1  9E rr rr         : STZ OBJECT_LIST_Z_START_POINTERS,X
003A4Er 1  9E rr rr           STZ OBJECT_LIST_BYTE1_MODE,X          ; 16 color / low address
003A51r 1  9C rr rr           STZ OBJECT_LIST_BYTE2_X
003A54r 1  9D rr rr           STA OBJECT_LIST_BYTE4_ZFLIPS,X
003A57r 1  9D rr rr           STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
003A5Ar 1  E8                 INX
003A5Br 1  D0 EE              BNE :-
003A5Dr 1               
003A5Dr 1  A9 D0            LDA #SPRITE_SIZE_ORA
003A5Fr 1  9D rr rr         : STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
003A62r 1  E8                 INX
003A63r 1  D0 FA              BNE :-
003A65r 1  AD rr rr         LDA WORLD_SPRITE_NUM
003A68r 1  9D rr rr         : STA OBJECT_LIST_BYTE0_ADDRLOW,X ; 01.3456 done .
003A6Br 1  E8                 INX
003A6Cr 1  D0 FA              BNE :-
003A6Er 1               
003A6Er 1               
003A6Er 1  20 rr rr       jsr push_world_to_object_list
003A71r 1               
003A71r 1  A9 D1           LDA #$D1
003A73r 1  8D rr rr        STA OBJECT_LIST_BYTE5_SIZE+1
003A76r 1               
003A76r 1  9C rr rr        STZ VERA_LOCK ; ok gotta lock the VERA...
003A79r 1  20 rr rr        jsr draw_object_list
003A7Cr 1               
003A7Cr 1               @WRITE_DEBUG:
003A7Cr 1  9C 25 9F        STZ VERA_ctrl
003A7Fr 1  A9 2A           LDA #42;+64
003A81r 1  8D 20 9F        STA VERA_addr_low
003A84r 1  A9 E4           LDA #>VRAM_TEXT_SCREEN
003A86r 1  8D 21 9F        STA VERA_addr_high
003A89r 1  A9 21           LDA #$21
003A8Br 1  8D 22 9F        STA VERA_addr_bank
003A8Er 1  A0 00           LDY #0
003A90r 1  BE rr rr      : LDX GLOBAL_DATA,Y
003A93r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X ; 1
003A96r 1  8D 23 9F        STA VERA_data0
003A99r 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X  ; 2
003A9Cr 1  8D 23 9F        STA VERA_data0
003A9Fr 1  C8              INY
003AA0r 1  BE rr rr        LDX GLOBAL_DATA,Y
003AA3r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X   ;  3
003AA6r 1  8D 23 9F        STA VERA_data0
003AA9r 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X    ;  4
003AACr 1  8D 23 9F        STA VERA_data0
003AAFr 1  C8              INY
003AB0r 1  AD 23 9F        LDA VERA_data0             ;  5
003AB3r 1  AD 20 9F        LDA VERA_addr_low
003AB6r 1  BE rr rr        LDX GLOBAL_DATA,Y
003AB9r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X   ;  6
003ABCr 1  8D 23 9F        STA VERA_data0
003ABFr 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X    ;  7
003AC2r 1  8D 23 9F        STA VERA_data0
003AC5r 1  C8              INY
003AC6r 1  BE rr rr        LDX GLOBAL_DATA,Y
003AC9r 1  BD rr rr        LDA HIGH_NIBBLE_TO_HEX,X   ;  8
003ACCr 1  8D 23 9F        STA VERA_data0
003ACFr 1  BD rr rr        LDA LOW_NIBBLE_TO_HEX,X    ;  9
003AD2r 1  8D 23 9F        STA VERA_data0
003AD5r 1  C8              INY
003AD6r 1  18              CLC
003AD7r 1  AD 20 9F        LDA VERA_addr_low          ;  moved 18 out of 64 bytes...
003ADAr 1  69 2E           ADC #64-18
003ADCr 1  8D 20 9F        STA VERA_addr_low
003ADFr 1  90 03           BCC :+
003AE1r 1  EE 21 9F        INC VERA_addr_high
003AE4r 1  C0 44         : CPY #68  ;  show first 64 bytes of global data
003AE6r 1  90 A8           BCC :--
003AE8r 1               
003AE8r 1  A9 FF           LDA #$FF ; time to unlock the VERA ..
003AEAr 1  8D rr rr        STA VERA_LOCK
003AEDr 1  4D rr rr        EOR CURRENT_BITMAP_BUFFER  ; switch the buffers round...
003AF0r 1  8D rr rr        STA CURRENT_BITMAP_BUFFER
003AF3r 1               
003AF3r 1               ;   rts
003AF3r 1               
003AF3r 1               @FRAME_CHECK:
003AF3r 1  A2 FF           LDX #255
003AF5r 1  A0 FF           LDY #255
003AF7r 1  AD rr rr        LDA VSYNC_counter
003AFAr 1  8D rr rr        STA LAST_VSYNC_COUNTER
003AFDr 1  9C rr rr        STZ VSYNC_counter
003B00r 1  E8           :  INX                     ;  2 cycles
003B01r 1  D0 01           BNE :+                  ;  ~3 cycles   5
003B03r 1  C8              INY
003B04r 1                 ;wai   disables the busy wait..
003B04r 1  AD rr rr     :  lda VSYNC_counter       ;  4  cyles    9
003B07r 1  F0 F7           beq :--                ;  3  cycles   ~12 cycles per count
003B09r 1  9C rr rr        STZ VSYNC_counter
003B0Cr 1  8E rr rr        STX STALL_COUNTER
003B0Fr 1  8C rr rr        STY STALL_COUNTERH
003B12r 1  AD rr rr        LDA MASTER_CLOCK
003B15r 1  1A              INC A
003B16r 1  18              CLC
003B17r 1  6D rr rr        ADC LAST_VSYNC_COUNTER
003B1Ar 1  8D rr rr        STA MASTER_CLOCK
003B1Dr 1  D0 03           BNE :+
003B1Fr 1  EE rr rr        INC MASTER_CLOCK+1
003B22r 1               :
003B22r 1               ;   AND #1 ; restrict to 30 fps.. don't care missed cycle.
003B22r 1               ;   BEQ :+
003B22r 1               ;   JMP @WRITE_DEBUG
003B22r 1                  ; poll keyboard for input
003B22r 1               ; :
003B22r 1  20 E4 FF        jsr GETIN
003B25r 1  C9 00           cmp #0
003B27r 1  D0 03           BNE :+
003B29r 1  4C rr rr        JMP @do_update
003B2Cr 1  C9 1D         : cmp #$1D 	;	cursor right
003B2Er 1  D0 06           BNE :+
003B30r 1  EE rr rr        INC camera_facing
003B33r 1  4C rr rr        JMP @do_update
003B36r 1                  :
003B36r 1  C9 9D           cmp  #$9D 	;	cursor left
003B38r 1  D0 06           BNE :+
003B3Ar 1  CE rr rr        DEC camera_facing
003B3Dr 1  4C rr rr        JMP @do_update
003B40r 1  C9 11         : cmp #$11; cursor down
003B42r 1  D0 2C           BNE :+
003B44r 1  AE rr rr        LDX camera_facing
003B47r 1  38              SEC
003B48r 1  AD rr rr        LDA camera_world_pos_XL
003B4Br 1  FD rr rr        SBC MOVE_X_L,X
003B4Er 1  8D rr rr        STA camera_world_pos_XL
003B51r 1  AD rr rr        LDA camera_world_pos_XH
003B54r 1  FD rr rr        SBC MOVE_X_H,X
003B57r 1  8D rr rr        STA camera_world_pos_XH
003B5Ar 1  18              CLC
003B5Br 1  AD rr rr        LDA camera_world_pos_YL
003B5Er 1  7D rr rr        ADC MOVE_Y_L,X
003B61r 1  8D rr rr        STA camera_world_pos_YL
003B64r 1  AD rr rr        LDA camera_world_pos_YH
003B67r 1  7D rr rr        ADC MOVE_Y_H,X
003B6Ar 1  8D rr rr        STA camera_world_pos_YH
003B6Dr 1  4C rr rr        jmp @camera_world_changed
003B70r 1               
003B70r 1  C9 91         : cmp #$91 ; cursor up
003B72r 1  D0 2C           BNE :+
003B74r 1  AE rr rr        LDX camera_facing
003B77r 1  18              CLC
003B78r 1  AD rr rr        LDA camera_world_pos_XL
003B7Br 1  7D rr rr        ADC MOVE_X_L,X
003B7Er 1  8D rr rr        STA camera_world_pos_XL
003B81r 1  AD rr rr        LDa camera_world_pos_XH
003B84r 1  7D rr rr        ADC MOVE_X_H,X
003B87r 1  8D rr rr        STA camera_world_pos_XH
003B8Ar 1  38              SEC
003B8Br 1  AD rr rr        LDA camera_world_pos_YL
003B8Er 1  FD rr rr        SBC MOVE_Y_L,X
003B91r 1  8D rr rr        STA camera_world_pos_YL
003B94r 1  AD rr rr        LDA camera_world_pos_YH
003B97r 1  FD rr rr        SBC MOVE_Y_H,X
003B9Ar 1  8D rr rr        STA camera_world_pos_YH
003B9Dr 1  4C rr rr        jmp @camera_world_changed
003BA0r 1               
003BA0r 1  C9 45         : cmp  #E_CHAR ; cell up right
003BA2r 1  D0 15           BNE :+++
003BA4r 1  AD rr rr        LDA camera_cell_y
003BA7r 1  F0 03           BEQ :+
003BA9r 1  CE rr rr        DEC camera_cell_y
003BACr 1  AD rr rr      : LDA camera_cell_x
003BAFr 1  C9 3F           CMP #63
003BB1r 1  B0 03           BCS :+
003BB3r 1  EE rr rr        INC camera_cell_x
003BB6r 1  4C rr rr      : JMP @camera_cell_changed
003BB9r 1               
003BB9r 1  C9 57         : cmp #W_CHAR ; cell up left
003BBBr 1  D0 0B           BNE :++
003BBDr 1  AD rr rr        LDA camera_cell_y
003BC0r 1  F0 03           BEQ :+
003BC2r 1  CE rr rr        DEC camera_cell_y
003BC5r 1  4C rr rr      : JMP @camera_cell_changed
003BC8r 1               
003BC8r 1  C9 41         : cmp #A_CHAR ; cell left
003BCAr 1  D0 0B           BNE :++
003BCCr 1  AD rr rr        LDA camera_cell_x
003BCFr 1  F0 03           BEQ :+
003BD1r 1  CE rr rr        DEC camera_cell_x
003BD4r 1  4C rr rr      : JMP @camera_cell_changed
003BD7r 1               
003BD7r 1  C9 44         : cmp #D_CHAR ; cell right
003BD9r 1  D0 0D           BNE :++
003BDBr 1  AD rr rr        LDA camera_cell_x
003BDEr 1  C9 3F           CMP #63
003BE0r 1  B0 03           BCS :+
003BE2r 1  EE rr rr        INC camera_cell_x
003BE5r 1  4C rr rr      : JMP @camera_cell_changed
003BE8r 1               
003BE8r 1  C9 58         : cmp #X_CHAR ; cell down right
003BEAr 1  D0 0D           BNE :++
003BECr 1  AD rr rr        LDA camera_cell_y
003BEFr 1  C9 1E           CMP #30
003BF1r 1  B0 03           BCS :+
003BF3r 1  EE rr rr        INC camera_cell_y
003BF6r 1  4C rr rr      : JMP @camera_cell_changed
003BF9r 1               
003BF9r 1  C9 5A         : cmp  #Z_CHAR ; cell down left
003BFBr 1  D0 15           BNE :+++
003BFDr 1  AD rr rr        LDA camera_cell_y
003C00r 1  C9 1E           CMP #30
003C02r 1  B0 03           BCS :+
003C04r 1  EE rr rr        INC camera_cell_y
003C07r 1  AD rr rr      : LDA camera_cell_x
003C0Ar 1  F0 03           BEQ :+
003C0Cr 1  CE rr rr        DEC camera_cell_x
003C0Fr 1  4C rr rr      : JMP @camera_cell_changed
003C12r 1               
003C12r 1  C9 20         : cmp #SPACE;
003C14r 1  D0 09           BNE :+
003C16r 1  9C rr rr        STZ camera_cell_xl
003C19r 1  9C rr rr        STZ camera_cell_yl
003C1Cr 1  4C rr rr        JMP @camera_cell_changed
003C1Fr 1               
003C1Fr 1  C9 49         : cmp #I_CHAR ; cell y - 1/16
003C21r 1  D0 25           BNE :++
003C23r 1  38              SEC
003C24r 1  AD rr rr        LDA camera_cell_yl
003C27r 1  E9 10           SBC #16
003C29r 1  8D rr rr        STA camera_cell_yl
003C2Cr 1  B0 17           BCS :+
003C2Er 1  AD rr rr        LDA camera_cell_y
003C31r 1  F0 12           BEQ :+
003C33r 1  3A              DEC A
003C34r 1  8D rr rr        STA camera_cell_y
003C37r 1  18              CLC
003C38r 1  AD rr rr        LDA camera_cell_xl
003C3Br 1  69 80           ADC #128
003C3Dr 1  8D rr rr        STA camera_cell_xl
003C40r 1  90 03           BCC :+
003C42r 1  EE rr rr        INC camera_cell_x
003C45r 1  4C rr rr      : JMP @camera_cell_changed
003C48r 1               
003C48r 1  C9 4A         : cmp #J_CHAR ; cell x - 1/16
003C4Ar 1  D0 17           BNE :++
003C4Cr 1  38              SEC
003C4Dr 1  AD rr rr        LDA camera_cell_xl
003C50r 1  E9 10           SBC #16
003C52r 1  8D rr rr        STA camera_cell_xl
003C55r 1  B0 09           BCS :+
003C57r 1  AD rr rr        LDA camera_cell_x
003C5Ar 1  F0 04           BEQ :+
003C5Cr 1  3A              DEC A
003C5Dr 1  8D rr rr        STA camera_cell_x
003C60r 1  4C rr rr      : JMP @camera_cell_changed
003C63r 1               
003C63r 1  C9 4B         : cmp #K_CHAR ; cell y + 1/16
003C65r 1  D0 27           BNE :++
003C67r 1  18              CLC
003C68r 1  AD rr rr        LDA camera_cell_yl
003C6Br 1  69 10           ADC #16
003C6Dr 1  8D rr rr        STA camera_cell_yl
003C70r 1  90 19           BCC :+
003C72r 1  AD rr rr        LDA camera_cell_y
003C75r 1  C9 1F           CMP #31
003C77r 1  B0 12           BCS :+
003C79r 1  1A              INC A
003C7Ar 1  8D rr rr        STA camera_cell_y
003C7Dr 1  38              SEC
003C7Er 1  AD rr rr        LDA camera_cell_xl
003C81r 1  E9 80           SBC #128
003C83r 1  8D rr rr        STA camera_cell_xl
003C86r 1  B0 03           BCS :+
003C88r 1  CE rr rr        DEC camera_cell_x
003C8Br 1  4C rr rr      : JMP @camera_cell_changed
003C8Er 1               
003C8Er 1  C9 4C         : cmp #L_CHAR ; cell x + 1/16
003C90r 1  D0 11           BNE :++
003C92r 1  18              CLC
003C93r 1  AD rr rr        LDA camera_cell_xl
003C96r 1  69 10           ADC #16
003C98r 1  8D rr rr        STA camera_cell_xl
003C9Br 1  90 03           BCC :+
003C9Dr 1  EE rr rr        INC camera_cell_x
003CA0r 1  4C rr rr      : JMP @camera_cell_changed
003CA3r 1               
003CA3r 1  C9 31         : CMP #ONE_CHAR
003CA5r 1  D0 08           BNE :+
003CA7r 1  AD 29 9F        LDA VERA_dc_video
003CAAr 1  49 20           EOR #%00100000
003CACr 1  8D 29 9F        STA VERA_dc_video
003CAFr 1               
003CAFr 1  C9 32         : CMP #TWO_CHAR
003CB1r 1  D0 08           BNE :+
003CB3r 1  AD 29 9F        LDA VERA_dc_video
003CB6r 1  49 40           EOR #%01000000
003CB8r 1  8D 29 9F        STA VERA_dc_video
003CBBr 1               
003CBBr 1  C9 33         : CMP #THREE_CHAR
003CBDr 1  D0 08           BNE :+
003CBFr 1  AD 29 9F        LDA VERA_dc_video
003CC2r 1  49 10           EOR #%00010000
003CC4r 1  8D 29 9F        STA VERA_dc_video
003CC7r 1               
003CC7r 1  C9 30         : CMP #ZERO_CHAR
003CC9r 1  D0 13           BNE :+++
003CCBr 1  AD 2A 9F        LDA VERA_dc_hscale
003CCEr 1  C9 2B           CMP #43
003CD0r 1  B0 04           BCS :+
003CD2r 1  A9 33           LDA #51 ; #51 ; 51 is 255
003CD4r 1  80 02           BRA :++
003CD6r 1  A9 20         : LDA #32
003CD8r 1  8D 2A 9F      : STA VERA_dc_hscale
003CDBr 1  8D 2B 9F        STA VERA_dc_vscale
003CDEr 1               
003CDEr 1  C9 39         : CMP #NINE_CHAR
003CE0r 1  D0 08           BNE :+
003CE2r 1  AD rr rr        LDA SPRITE_OBJECT_ENABLE
003CE5r 1  49 FF           EOR #$FF
003CE7r 1  8D rr rr        STA SPRITE_OBJECT_ENABLE
003CEAr 1               
003CEAr 1  4C rr rr      : JMP @do_update
003CEDr 1               
003CEDr 1               @cleanup_and_exit:
003CEDr 1                  ; restore default IRQ vector
003CEDr 1  78              sei
003CEEr 1  AD rr rr        lda default_irq_vector
003CF1r 1  8D 14 03        sta IRQVec
003CF4r 1  AD rr rr        lda default_irq_vector+1
003CF7r 1  8D 15 03        sta IRQVec+1
003CFAr 1  58              cli
003CFBr 1  20 81 FF        jsr CINT
003CFEr 1  60              rts
003CFFr 1               
003CFFr 1               
003CFFr 1               ; CURRENT
003CFFr 1               push_world_to_object_list: ; as in.. let's try this again?? wait.. missing a STZ ZP_PTR...
003CFFr 1               PWOL_TUB_PTR_AL   = ZP_PTR
003CFFr 1               PWOL_TUB_PTR_AH   = ZP_PTR+1
003CFFr 1               PWOL_TUB_PTR_BL   = ZP_PTR+2
003CFFr 1               PWOL_TUB_PTR_BH   = ZP_PTR+3
003CFFr 1               PWOL_CURRENT_XL   = ZP_PTR+4
003CFFr 1               PWOL_CURRENT_XH   = ZP_PTR+5
003CFFr 1               PWOL_CURRENT_YL   = ZP_PTR+6
003CFFr 1               PWOL_CURRENT_YH   = ZP_PTR+7
003CFFr 1               PWOL_ACROSS_ROW_XL= ZP_PTR+8
003CFFr 1               PWOL_ACROSS_ROW_XH= ZP_PTR+9
003CFFr 1               PWOL_ACROSS_ROW_YL= ZP_PTR+10
003CFFr 1               PWOL_ACROSS_ROW_YH= ZP_PTR+11
003CFFr 1               PWOL_NEXT_ROW_A_LEFT_XL  = ZP_PTR+12
003CFFr 1               PWOL_NEXT_ROW_A_LEFT_XH  = ZP_PTR+13
003CFFr 1               PWOL_NEXT_ROW_A_LEFT_YL  = ZP_PTR+14
003CFFr 1               PWOL_NEXT_ROW_A_LEFT_YH  = ZP_PTR+15
003CFFr 1               PWOL_NEXT_ROW_A_RIGHT_XL  = ZP_PTR+16
003CFFr 1               PWOL_NEXT_ROW_A_RIGHT_XH  = ZP_PTR+17
003CFFr 1               PWOL_NEXT_ROW_A_RIGHT_YL  = ZP_PTR+18
003CFFr 1               PWOL_NEXT_ROW_A_RIGHT_YH  = ZP_PTR+19
003CFFr 1               PWOL_NEXT_ROW_B_LEFT_XL  = ZP_PTR+20
003CFFr 1               PWOL_NEXT_ROW_B_LEFT_XH  = ZP_PTR+21
003CFFr 1               PWOL_NEXT_ROW_B_LEFT_YL  = ZP_PTR+22
003CFFr 1               PWOL_NEXT_ROW_B_LEFT_YH  = ZP_PTR+23
003CFFr 1               PWOL_NEXT_ROW_B_RIGHT_XL  = ZP_PTR+24
003CFFr 1               PWOL_NEXT_ROW_B_RIGHT_XH  = ZP_PTR+25
003CFFr 1               PWOL_NEXT_ROW_B_RIGHT_YL  = ZP_PTR+26
003CFFr 1               PWOL_NEXT_ROW_B_RIGHT_YH  = ZP_PTR+27
003CFFr 1               PWOL_Z_STARTS_PTR = ZP_PTR+28
003CFFr 1               PWOL_Z_STARTS_PTRH = ZP_PTR+29
003CFFr 1               PWOL_CONVERT_HEIGHTS = ZP_PTR+30
003CFFr 1               PWOL_CONVERT_HEIGHTSH= ZP_PTR+31
003CFFr 1               PWOL_CONVERT_HEIGHTS_L = ZP_PTR+32
003CFFr 1               PWOL_CONVERT_HEIGHTS_LH = ZP_PTR+33
003CFFr 1               PWOL_TRIES_COUNTER = ZP_PTR+34
003CFFr 1               PWOL_START_XL = ZP_PTR+35
003CFFr 1               PWOL_START_YL = ZP_PTR+36
003CFFr 1               PWOL_START_XH = ZP_PTR+37
003CFFr 1               PWOL_START_YH = ZP_PTR+38
003CFFr 1               
003CFFr 1               PWOL_START_COS_XL = ZP_PTR+39
003CFFr 1               PWOL_START_COS_XH = ZP_PTR+40
003CFFr 1               PWOL_START_COS_YL = ZP_PTR+41
003CFFr 1               PWOL_START_COS_YH = ZP_PTR+42
003CFFr 1               PWOL_START_SIN_XL = ZP_PTR+43
003CFFr 1               PWOL_START_SIN_XH = ZP_PTR+44
003CFFr 1               PWOL_START_SIN_YL = ZP_PTR+45
003CFFr 1               PWOL_START_SIN_YH = ZP_PTR+46
003CFFr 1               
003CFFr 1               PWOL_camera_cell_xl = ZP_PTR+47
003CFFr 1               PWOL_camera_cell_yl = ZP_PTR+48
003CFFr 1               PWOL_CENTER_Y  =  ZP_PTR+49
003CFFr 1               PWOL_CENTER_Y_TOP     =  ZP_PTR+50
003CFFr 1               
003CFFr 1               PWOL_TOP_CHECK = ZP_PTR+51
003CFFr 1               PWOL_BOT_CHECK = ZP_PTR+52
003CFFr 1               
003CFFr 1               TRY_AGAIN = 6
003CFFr 1  AD rr rr        LDA camera_screen_out_top
003D02r 1  85 55           STA PWOL_TOP_CHECK
003D04r 1  AD rr rr        LDA camera_screen_out_bottom
003D07r 1  85 56           STA PWOL_BOT_CHECK
003D09r 1               
003D09r 1  AD rr rr        LDA CAMERA_CENTER_YH
003D0Cr 1  1A              INC A
003D0Dr 1  85 53           STA PWOL_CENTER_Y
003D0Fr 1  AD rr rr        LDA CAMERA_CENTER_TOP_PX
003D12r 1  18              CLC
003D13r 1  69 0A           ADC #10
003D15r 1  85 54           STA PWOL_CENTER_Y_TOP
003D17r 1               
003D17r 1               
003D17r 1  A9 rr           LDA #>CONVERT_HEIGHTS_PIXELS
003D19r 1  85 41           STA PWOL_CONVERT_HEIGHTSH
003D1Br 1  A9 rr           LDA #>CONVERT_HEIGHTS_PIXELS_L
003D1Dr 1  85 43           STA PWOL_CONVERT_HEIGHTS_LH
003D1Fr 1               
003D1Fr 1  A9 rr           LDA #>OBJECT_LIST_Z_START_POINTERS
003D21r 1  85 3F           STA PWOL_Z_STARTS_PTRH
003D23r 1               
003D23r 1  AE rr rr        LDX camera_facing
003D26r 1  BD rr rr        LDA ACROSS_ROW_X_L,x    ; 0900  16 wide , 45* tilt ... this is added to go up row, sub for down row
003D29r 1  85 2A           STA PWOL_ACROSS_ROW_XL
003D2Br 1  BD rr rr        LDA ACROSS_ROW_X_H,x
003D2Er 1  85 2B           STA PWOL_ACROSS_ROW_XH
003D30r 1               
003D30r 1  BD rr rr        LDA ACROSS_ROW_Y_L,x
003D33r 1  85 2C           STA PWOL_ACROSS_ROW_YL
003D35r 1  BD rr rr        LDA ACROSS_ROW_Y_H,x
003D38r 1  85 2D           STA PWOL_ACROSS_ROW_YH
003D3Ar 1               
003D3Ar 1  18              CLC
003D3Br 1  BD rr rr        LDA NEXT_ROW_X_L,X  ; 0D00 next row LEFT/up when added
003D3Er 1  85 2E           STA PWOL_NEXT_ROW_A_LEFT_XL   ; -> next row is left, going up the screen ..  -1,-1
003D40r 1  65 2A           ADC PWOL_ACROSS_ROW_XL   ; across row is for right , subtract to go left  +1 -> 0,1
003D42r 1  85 32           STA PWOL_NEXT_ROW_A_RIGHT_XL  ;  -> next row is right, going up the screen .. -1,-1
003D44r 1  BD rr rr        LDA NEXT_ROW_X_H,x
003D47r 1  85 2F           STA PWOL_NEXT_ROW_A_LEFT_XH
003D49r 1  65 2B           ADC PWOL_ACROSS_ROW_XH
003D4Br 1  85 33           STA PWOL_NEXT_ROW_A_RIGHT_XH
003D4Dr 1               
003D4Dr 1  18              CLC
003D4Er 1  BD rr rr        LDA NEXT_ROW_Y_L,X  ; 0F00 next row LEFT/up when added
003D51r 1  85 30           STA PWOL_NEXT_ROW_A_LEFT_YL   ; -> next row is left, going up the screen
003D53r 1  65 2C           ADC PWOL_ACROSS_ROW_YL   ; across row is for right
003D55r 1  85 34           STA PWOL_NEXT_ROW_A_RIGHT_YL  ;  -> next row is right, going up the screen
003D57r 1  BD rr rr        LDA NEXT_ROW_Y_H,x
003D5Ar 1  85 31           STA PWOL_NEXT_ROW_A_LEFT_YH
003D5Cr 1  65 2D           ADC PWOL_ACROSS_ROW_YH
003D5Er 1  85 35           STA PWOL_NEXT_ROW_A_RIGHT_YH
003D60r 1               
003D60r 1               
003D60r 1               ; for zig B , the opposite of left/up is right/down.. so A_LEFT * -1 = B_RIGHT
003D60r 1  38              SEC ; flip A_LEFT X to B_RIGHT X
003D61r 1  A9 00           LDA #0
003D63r 1  E5 2E           SBC PWOL_NEXT_ROW_A_LEFT_XL
003D65r 1  85 3A           STA PWOL_NEXT_ROW_B_RIGHT_XL
003D67r 1  A9 00           LDA #0
003D69r 1  E5 2F           SBC PWOL_NEXT_ROW_A_LEFT_XH
003D6Br 1  85 3B           STA PWOL_NEXT_ROW_B_RIGHT_XH
003D6Dr 1               
003D6Dr 1  38              SEC ; flip A_LEFT Y to B_RIGHT Y
003D6Er 1  A9 00           LDA #0
003D70r 1  E5 30           SBC PWOL_NEXT_ROW_A_LEFT_YL
003D72r 1  85 3C           STA PWOL_NEXT_ROW_B_RIGHT_YL
003D74r 1  A9 00           LDA #0
003D76r 1  E5 31           SBC PWOL_NEXT_ROW_A_LEFT_YH
003D78r 1  85 3D           STA PWOL_NEXT_ROW_B_RIGHT_YH
003D7Ar 1               
003D7Ar 1  38              SEC ; flip A_RIGHT X to B_LEFT X
003D7Br 1  A9 00           LDA #0
003D7Dr 1  E5 32           SBC PWOL_NEXT_ROW_A_RIGHT_XL
003D7Fr 1  85 36           STA PWOL_NEXT_ROW_B_LEFT_XL
003D81r 1  A9 00           LDA #0
003D83r 1  E5 33           SBC PWOL_NEXT_ROW_A_RIGHT_XH
003D85r 1  85 37           STA PWOL_NEXT_ROW_B_LEFT_XH
003D87r 1               
003D87r 1  38              SEC ; flip A_RIGHT Y to B_LEFT Y
003D88r 1  A9 00           LDA #0
003D8Ar 1  E5 34           SBC PWOL_NEXT_ROW_A_RIGHT_YL
003D8Cr 1  85 38           STA PWOL_NEXT_ROW_B_LEFT_YL
003D8Er 1  A9 00           LDA #0
003D90r 1  E5 35           SBC PWOL_NEXT_ROW_A_RIGHT_YH
003D92r 1  85 39           STA PWOL_NEXT_ROW_B_LEFT_YH
003D94r 1               
003D94r 1  AD rr rr        LDA CAMERA_CENTER_XL
003D97r 1  85 26            STA PWOL_CURRENT_XL
003D99r 1  85 45            STA PWOL_START_XL
003D9Br 1               
003D9Br 1  AD rr rr        LDA CAMERA_CENTER_YL
003D9Er 1  85 28            STA PWOL_CURRENT_YL
003DA0r 1  85 46            STA PWOL_START_YL
003DA2r 1               
003DA2r 1  AD rr rr        LDA CAMERA_CENTER_XH
003DA5r 1  85 27            STA PWOL_CURRENT_XH
003DA7r 1  85 47            STA PWOL_START_XH
003DA9r 1               
003DA9r 1               
003DA9r 1  AD rr rr        LDA CAMERA_CENTER_YH
003DACr 1  85 29            STA PWOL_CURRENT_YH
003DAEr 1  85 48            STA PWOL_START_YH
003DB0r 1               
003DB0r 1  AD rr rr         LDA CAMERA_CELL_LINE_PTR
003DB3r 1  85 22            STA PWOL_TUB_PTR_AL
003DB5r 1  85 24            STA PWOL_TUB_PTR_BL
003DB7r 1  AD rr rr         LDA CAMERA_CELL_LINE_PTR+1
003DBAr 1  85 23            STA PWOL_TUB_PTR_AH
003DBCr 1  85 25            STA PWOL_TUB_PTR_BH
003DBEr 1               
003DBEr 1                  ; STZ VERA_ctrl
003DBEr 1                  ; LDA #<(VRAM_TEXT_SCREEN+17*64)
003DBEr 1                  ; STA VERA_addr_low
003DBEr 1                  ; LDA #>(VRAM_TEXT_SCREEN+17*64)
003DBEr 1                  ; STA VERA_addr_high
003DBEr 1                  ; LDA #$21
003DBEr 1                  ; STA VERA_addr_bank
003DBEr 1                  ; LDA #26
003DBEr 1                  ; STA VERA_data0
003DBEr 1               
003DBEr 1                 @zigzag_A: ; going to right and up the screen, including where we are currently..
003DBEr 1  AC rr rr         LDY camera_cell_x
003DC1r 1  80 00            BRA @zigzag_A_right
003DC3r 1                  @ZAR_OUT:
003DC3r 1               
003DC3r 1                   @zigzag_A_right:
003DC3r 1  C0 40                CPY #64  ;  make sure we don't go outside level..
003DC5r 1  B0 68                BCS @ZAR_NEXT ; if we're outside we'll just skip is OK here
003DC7r 1  B1 22                LDA (PWOL_TUB_PTR_AL),y
003DC9r 1  C9 81                CMP #129
003DCBr 1  B0 62                BCS @ZAR_NEXT ; this isn't a valid spot in the level map..
003DCDr 1                       ; bytes 1 and 4 were updated when we cleared the object list
003DCDr 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
003DD0r 1  D0 04                BNE :++
003DD2r 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
003DD5r 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
003DD6r 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
003DD8r 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
003DDBr 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen... (could cause issues if we're high up? can't see behind?)
003DDDr 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
003DDFr 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
003DE1r 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
003DE4r 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
003DE7r 1  8A                   TXA ; push new next to the Z buffer spot
003DE8r 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
003DEAr 1                       ; bytes .1..4.6 filled in already..
003DEAr 1  B1 22                LDA (PWOL_TUB_PTR_AL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
003DECr 1  10 08                BPL @ZAR_INSIDE_TUB
003DEEr 1                     @ZAR_HIT_WALL_OUCH:
003DEEr 1  AD rr rr               LDA WORLD_WALL_SPRITE_NUM
003DF1r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
003DF4r 1  A9 56                  LDA #86 ; max height..
003DF6r 1                     @ZAR_INSIDE_TUB:
003DF6r 1  85 40                  STA PWOL_CONVERT_HEIGHTS ;
003DF8r 1  85 42                  STA PWOL_CONVERT_HEIGHTS_L;
003DFAr 1  38                     SEC
003DFBr 1  A5 28                  LDA PWOL_CURRENT_YL
003DFDr 1  F2 42                  SBC (PWOL_CONVERT_HEIGHTS_L)
003DFFr 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
003E01r 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
003E03r 1  C9 78                  CMP #SCREEN_OUT_BOTTOM    ;  are we even visible?
003E05r 1  90 0E                  BCC :+
003E07r 1  C5 55                  CMP PWOL_TOP_CHECK  ;     #SCREEN_OUT_TOP-50 ;PWOL_TOP_CHECK;
003E09r 1  B0 0A                  BCS :+
003E0Br 1  CE rr rr               DEC OBJECT_LIST_BYTE6_NEXT
003E0Er 1  BD rr rr               LDA OBJECT_LIST_BYTE6_NEXT,X ; grab the old next value
003E11r 1  92 3E                  STA (PWOL_Z_STARTS_PTR) ; patch the old one back in..
003E13r 1  80 1A                  BRA @ZAR_NEXT ; and skip THIS
003E15r 1                       :
003E15r 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
003E18r 1  C5 54                  CMP PWOL_CENTER_Y_TOP ; is this above center on screen??
003E1Ar 1  B0 0E                  BCS :+ ; is not covering us
003E1Cr 1  A5 29                  LDA PWOL_CURRENT_YH
003E1Er 1  C5 53                  CMP PWOL_CENTER_Y
003E20r 1  90 08                  BCC :+ ; its from ahead of us, OK
003E22r 1                         ; it was from below and covers us ..
003E22r 1  BD rr rr               LDA OBJECT_LIST_BYTE0_ADDRLOW,X
003E25r 1  69 0F                  ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
003E27r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X
003E2Ar 1                         ;LDA #$D0
003E2Ar 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
003E2Ar 1  A5 27                : LDA PWOL_CURRENT_XH
003E2Cr 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
003E2Fr 1                         ; for debugging ...
003E2Fr 1                     ;    STZ VERA_data0
003E2Fr 1                     ;    STA VERA_data0
003E2Fr 1                     ;    LDA PWOL_CURRENT_YH
003E2Fr 1                     ;    STA VERA_data0
003E2Fr 1                     ;    STZ VERA_data0
003E2Fr 1               
003E2Fr 1                    @ZAR_NEXT:
003E2Fr 1                        ; calc next to the right..
003E2Fr 1  C8                    INY
003E30r 1  18                    CLC
003E31r 1  A5 26                 LDA PWOL_CURRENT_XL
003E33r 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
003E35r 1  85 26                 STA PWOL_CURRENT_XL
003E37r 1  A5 27                 LDA PWOL_CURRENT_XH
003E39r 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
003E3Br 1  85 27                 STA PWOL_CURRENT_XH
003E3Dr 1  AA                    TAX
003E3Er 1  18                    CLC
003E3Fr 1  A5 28                 LDA PWOL_CURRENT_YL
003E41r 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
003E43r 1  85 28                 STA PWOL_CURRENT_YL
003E45r 1  A5 29                 LDA PWOL_CURRENT_YH
003E47r 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
003E49r 1  85 29                 STA PWOL_CURRENT_YH
003E4Br 1               
003E4Br 1  8E rr rr              STX DEBUG_A
003E4Er 1  8D rr rr              STA DEBUG_B
003E51r 1               
003E51r 1  C5 56                 CMP PWOL_BOT_CHECK
003E53r 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
003E55r 1  C9 F0                 CMP #SCREEN_OUT_TOP
003E57r 1  90 0B                 BCC @ZAR_ZIG_LEFT_SWITCH ; its bottom_out <= Y < top out .. because negatives are bigger
003E59r 1                      :
003E59r 1  E0 A0                 CPX #SCREEN_OUT_RIGHT ; check against right side
003E5Br 1  90 04                 BCC :+                ; if its within right side then go do next thing..
003E5Dr 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
003E5Fr 1  90 03                 BCC @ZAR_ZIG_LEFT_SWITCH ; we're to the right of the screen but not far enough to wrap around..
003E61r 1  4C rr rr            : JMP @zigzag_A_right
003E64r 1                    @ZAR_ZIG_LEFT_SWITCH: ;PWOL_NEXT_ROW_A_LEFT_XL   ; -> next row is left, going up the screen ..  +0,-1
003E64r 1  A9 06                 LDA #TRY_AGAIN
003E66r 1  85 44                 STA PWOL_TRIES_COUNTER
003E68r 1               ;         INY
003E68r 1  38                    SEC
003E69r 1  A5 22                 LDA PWOL_TUB_PTR_AL
003E6Br 1  E9 40                 SBC #64 ;   0,-1
003E6Dr 1  85 22                 STA PWOL_TUB_PTR_AL
003E6Fr 1  A5 23                 LDA PWOL_TUB_PTR_AH
003E71r 1  E9 00                 SBC #0
003E73r 1  C9 rr                 CMP #>TUB_WORLD ; are we inside the world still?
003E75r 1  B0 03                 BCS :+
003E77r 1  4C rr rr              JMP @zigzag_B
003E7Ar 1  85 23               : STA PWOL_TUB_PTR_AH
003E7Cr 1               
003E7Cr 1  18                    CLC
003E7Dr 1  A5 26                 LDA PWOL_CURRENT_XL
003E7Fr 1  65 2E                 ADC PWOL_NEXT_ROW_A_LEFT_XL
003E81r 1  85 26                 STA PWOL_CURRENT_XL
003E83r 1  A5 27                 LDA PWOL_CURRENT_XH
003E85r 1  65 2F                 ADC PWOL_NEXT_ROW_A_LEFT_XH
003E87r 1  85 27                 STA PWOL_CURRENT_XH
003E89r 1  AA                    TAX
003E8Ar 1  18                    CLC
003E8Br 1  A5 28                 LDA PWOL_CURRENT_YL
003E8Dr 1  65 30                 ADC PWOL_NEXT_ROW_A_LEFT_YL
003E8Fr 1  85 28                 STA PWOL_CURRENT_YL
003E91r 1  A5 29                 LDA PWOL_CURRENT_YH
003E93r 1  65 31                 ADC PWOL_NEXT_ROW_A_LEFT_YH
003E95r 1  80 21                 BRA @ZAR_ZIG_LEFT_SWITCH_CHECK
003E97r 1               
003E97r 1                  @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN:
003E97r 1  C6 44                 DEC PWOL_TRIES_COUNTER
003E99r 1  D0 03                 BNE @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT
003E9Br 1  4C rr rr              JMP @zigzag_B
003E9Er 1                  @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT:
003E9Er 1  88                    DEY
003E9Fr 1  38                    SEC
003EA0r 1  A5 26                 LDA PWOL_CURRENT_XL
003EA2r 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
003EA4r 1  85 26                 STA PWOL_CURRENT_XL
003EA6r 1  A5 27                 LDA PWOL_CURRENT_XH
003EA8r 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
003EAAr 1  85 27                 STA PWOL_CURRENT_XH
003EACr 1  AA                    TAX
003EADr 1  38                    SEC
003EAEr 1  A5 28                 LDA PWOL_CURRENT_YL
003EB0r 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
003EB2r 1  85 28                 STA PWOL_CURRENT_YL
003EB4r 1  A5 29                 LDA PWOL_CURRENT_YH
003EB6r 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
003EB8r 1               
003EB8r 1                  @ZAR_ZIG_LEFT_SWITCH_CHECK:
003EB8r 1  85 29                 STA PWOL_CURRENT_YH
003EBAr 1  C5 56                 CMP PWOL_BOT_CHECK
003EBCr 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
003EBEr 1  C9 F0                 CMP #SCREEN_OUT_TOP
003EC0r 1  90 D5                 BCC @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN   ; its bottom_out <= Y < top out .. because negatives are bigger
003EC2r 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
003EC4r 1  90 04                 BCC @zigzag_A_left
003EC6r 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
003EC8r 1  90 CD                 BCC @ZAR_ZIG_LEFT_SWITCH_TRY_AGAIN
003ECAr 1               
003ECAr 1               
003ECAr 1               
003ECAr 1                  @zigzag_A_left:
003ECAr 1  C0 40                CPY #64  ;  make sure we don't go outside level..
003ECCr 1  B0 6E                BCS @ZAL_NEXT ; if we're outside we'll just skip is OK
003ECEr 1  B1 22                LDA (PWOL_TUB_PTR_AL),y
003ED0r 1  C9 81                CMP #129
003ED2r 1  B0 68                BCS @ZAL_NEXT ; we're outside level.
003ED4r 1               
003ED4r 1                       ; bytes 1 and 4 were updated when we cleared the object list
003ED4r 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
003ED7r 1  D0 04                BNE :++
003ED9r 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
003EDCr 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
003EDDr 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
003EDFr 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
003EE2r 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen...
003EE4r 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
003EE6r 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
003EE8r 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
003EEBr 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
003EEEr 1  8A                   TXA ; push new next to the Z buffer spot
003EEFr 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
003EF1r 1                       ; bytes .1..4.6 filled in already..
003EF1r 1  AD rr rr             LDA WORLD_SPRITE_NUM
003EF4r 1  9D rr rr             STA OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway..
003EF7r 1  B1 22                LDA (PWOL_TUB_PTR_AL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
003EF9r 1  10 08                BPL @ZAL_INSIDE_TUB
003EFBr 1                     @ZAL_HIT_WALL_OUCH:
003EFBr 1  AD rr rr               LDA WORLD_WALL_SPRITE_NUM
003EFEr 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
003F01r 1  A9 56                  LDA #86 ; max height..
003F03r 1                     @ZAL_INSIDE_TUB:
003F03r 1  85 40                  STA PWOL_CONVERT_HEIGHTS ;
003F05r 1  85 42                  STA PWOL_CONVERT_HEIGHTS_L;
003F07r 1  38                     SEC
003F08r 1  A5 28                  LDA PWOL_CURRENT_YL
003F0Ar 1  F2 42                  SBC (PWOL_CONVERT_HEIGHTS_L)
003F0Cr 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
003F0Er 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
003F10r 1  C9 78                  CMP #SCREEN_OUT_BOTTOM    ;  are we even visible?
003F12r 1  90 0E                  BCC :+
003F14r 1  C5 55                  CMP PWOL_TOP_CHECK  ;     #SCREEN_OUT_TOP-50 ;PWOL_TOP_CHECK;
003F16r 1  B0 0A                  BCS :+
003F18r 1  CE rr rr               DEC OBJECT_LIST_BYTE6_NEXT
003F1Br 1  BD rr rr               LDA OBJECT_LIST_BYTE6_NEXT,X ; grab the old next value
003F1Er 1  92 3E                  STA (PWOL_Z_STARTS_PTR) ; patch the old one back in..
003F20r 1  80 1A                  BRA @ZAL_NEXT ; and skip THIS
003F22r 1                       :
003F22r 1               
003F22r 1               
003F22r 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
003F25r 1  C5 54                  CMP PWOL_CENTER_Y_TOP ; is this above center on screen??
003F27r 1  B0 0E                  BCS :+ ; is not covering us
003F29r 1  A5 29                  LDA PWOL_CURRENT_YH
003F2Br 1  C5 53                  CMP PWOL_CENTER_Y
003F2Dr 1  90 08                  BCC :+ ; its from ahead of us, OK
003F2Fr 1                         ; it was from below and covers us ..
003F2Fr 1  BD rr rr               LDA OBJECT_LIST_BYTE0_ADDRLOW,X
003F32r 1  69 0F                  ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
003F34r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X
003F37r 1                         ;LDA #$D0
003F37r 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
003F37r 1  A5 27                : LDA PWOL_CURRENT_XH
003F39r 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
003F3Cr 1                    @ZAL_NEXT:
003F3Cr 1                        ; calc next to the LEFT
003F3Cr 1  88                    DEY
003F3Dr 1  38                    SEC
003F3Er 1  A5 26                 LDA PWOL_CURRENT_XL
003F40r 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
003F42r 1  85 26                 STA PWOL_CURRENT_XL
003F44r 1  A5 27                 LDA PWOL_CURRENT_XH
003F46r 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
003F48r 1  85 27                 STA PWOL_CURRENT_XH
003F4Ar 1  AA                    TAX
003F4Br 1  38                    SEC
003F4Cr 1  A5 28                 LDA PWOL_CURRENT_YL
003F4Er 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
003F50r 1  85 28                 STA PWOL_CURRENT_YL
003F52r 1  A5 29                 LDA PWOL_CURRENT_YH
003F54r 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
003F56r 1  85 29                 STA PWOL_CURRENT_YH
003F58r 1               
003F58r 1  8E rr rr              STX DEBUG_A
003F5Br 1  8D rr rr              STA DEBUG_B
003F5Er 1               
003F5Er 1  C5 56                 CMP PWOL_BOT_CHECK
003F60r 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
003F62r 1  C9 F0                 CMP #SCREEN_OUT_TOP
003F64r 1  90 0B                 BCC @ZAL_ZIG_RIGHT_SWITCH   ; its bottom_out <= Y < top out .. because negatives are bigger
003F66r 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
003F68r 1  90 04                 BCC :+                ; if its within right side then go do next thing..
003F6Ar 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
003F6Cr 1  90 03                 BCC @ZAL_ZIG_RIGHT_SWITCH     ; we're to the right of the screen but not far enough to wrap around..
003F6Er 1  4C rr rr            : JMP @zigzag_A_left
003F71r 1               
003F71r 1                    @ZAL_ZIG_RIGHT_SWITCH: ; up/right is +1,+1  from where we is right now ..
003F71r 1  A9 06                 LDA #TRY_AGAIN
003F73r 1  85 44                 STA PWOL_TRIES_COUNTER
003F75r 1  C8                    INY
003F76r 1  38                    SEC
003F77r 1  A5 22                 LDA PWOL_TUB_PTR_AL
003F79r 1  E9 40                 SBC #64
003F7Br 1  85 22                 STA PWOL_TUB_PTR_AL
003F7Dr 1  A5 23                 LDA PWOL_TUB_PTR_AH
003F7Fr 1  E9 00                 SBC #0
003F81r 1  C9 rr                 CMP #>TUB_WORLD ; are we inside the world still?
003F83r 1  B0 03                 BCS :+
003F85r 1  4C rr rr              JMP @zigzag_B
003F88r 1  85 23               : STA PWOL_TUB_PTR_AH
003F8Ar 1               
003F8Ar 1               
003F8Ar 1  18                    CLC
003F8Br 1               
003F8Br 1  A5 26                 LDA PWOL_CURRENT_XL
003F8Dr 1  65 32                 ADC PWOL_NEXT_ROW_A_RIGHT_XL
003F8Fr 1  85 26                 STA PWOL_CURRENT_XL
003F91r 1               
003F91r 1  A5 27                 LDA PWOL_CURRENT_XH
003F93r 1  65 33                 ADC PWOL_NEXT_ROW_A_RIGHT_XH
003F95r 1  85 27                 STA PWOL_CURRENT_XH
003F97r 1  AA                    TAX
003F98r 1               
003F98r 1               
003F98r 1  18                    CLC
003F99r 1  A5 28                 LDA PWOL_CURRENT_YL
003F9Br 1  65 34                 ADC PWOL_NEXT_ROW_A_RIGHT_YL
003F9Dr 1  85 28                 STA PWOL_CURRENT_YL
003F9Fr 1  A5 29                 LDA PWOL_CURRENT_YH
003FA1r 1  65 35                 ADC PWOL_NEXT_ROW_A_RIGHT_YH
003FA3r 1  80 1E                 BRA @ZAL_ZIG_RIGHT_SWITCH_CHECK
003FA5r 1               
003FA5r 1               
003FA5r 1               
003FA5r 1                  @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN:
003FA5r 1  C6 44                 DEC PWOL_TRIES_COUNTER
003FA7r 1  F0 2F                 BEQ @zigzag_B
003FA9r 1                  @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN_GO_RIGHT:
003FA9r 1  C8                    INY
003FAAr 1  18                    CLC
003FABr 1  A5 26                 LDA PWOL_CURRENT_XL
003FADr 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
003FAFr 1  85 26                 STA PWOL_CURRENT_XL
003FB1r 1  A5 27                 LDA PWOL_CURRENT_XH
003FB3r 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
003FB5r 1  85 27                 STA PWOL_CURRENT_XH
003FB7r 1  AA                    TAX
003FB8r 1  18                    CLC
003FB9r 1  A5 28                 LDA PWOL_CURRENT_YL
003FBBr 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
003FBDr 1  85 28                 STA PWOL_CURRENT_YL
003FBFr 1  A5 29                 LDA PWOL_CURRENT_YH
003FC1r 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
003FC3r 1                  @ZAL_ZIG_RIGHT_SWITCH_CHECK:
003FC3r 1  85 29                 STA PWOL_CURRENT_YH
003FC5r 1  C5 56                 CMP PWOL_BOT_CHECK
003FC7r 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
003FC9r 1  C9 F0                 CMP #SCREEN_OUT_TOP
003FCBr 1  90 D8                 BCC @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN    ; its bottom_out <= Y < top out .. because negatives are bigger
003FCDr 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
003FCFr 1  90 04                 BCC :+
003FD1r 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
003FD3r 1  90 D0                 BCC @ZAL_ZIG_RIGHT_SWITCH_TRY_AGAIN
003FD5r 1  4C rr rr            : JMP @zigzag_A_right
003FD8r 1               
003FD8r 1               
003FD8r 1                 @zigzag_B: ; going to left and down the screen, including where we are currently..
003FD8r 1  38                 SEC
003FD9r 1  A5 45              LDA PWOL_START_XL
003FDBr 1  E5 2A              SBC PWOL_ACROSS_ROW_XL
003FDDr 1  85 26              STA PWOL_CURRENT_XL
003FDFr 1  A5 47              LDA PWOL_START_XH
003FE1r 1  E5 2B              SBC PWOL_ACROSS_ROW_XH
003FE3r 1  85 27              STA PWOL_CURRENT_XH
003FE5r 1               
003FE5r 1               
003FE5r 1  38                 SEC
003FE6r 1  A5 46              LDA PWOL_START_YL
003FE8r 1  E5 2C              SBC PWOL_ACROSS_ROW_YL
003FEAr 1  85 28              STA PWOL_CURRENT_YL
003FECr 1  A5 48              LDA PWOL_START_YH
003FEEr 1  E5 2D              SBC PWOL_ACROSS_ROW_YH
003FF0r 1  85 29              STA PWOL_CURRENT_YH
003FF2r 1               
003FF2r 1  AC rr rr           LDY camera_cell_x   ;  eh voila! we haz pointer to ze row to start on .. woot!
003FF5r 1  88                 DEY ; start left
003FF6r 1               
003FF6r 1                  @zigzag_B_left:
003FF6r 1  C0 40                CPY #64  ;  make sure we don't go outside level..
003FF8r 1  B0 6E                BCS @ZBL_NEXT ; if we're outside we'll just skip is OK
003FFAr 1  B1 24                LDA (PWOL_TUB_PTR_BL),y
003FFCr 1  C9 81                CMP #129
003FFEr 1  B0 68                BCS @ZBL_NEXT ; we're outside level.
004000r 1               
004000r 1                       ; bytes 1 and 4 were updated when we cleared the object list
004000r 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
004003r 1  D0 04                BNE :++
004005r 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
004008r 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
004009r 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
00400Br 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
00400Er 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen...
004010r 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
004012r 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
004014r 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
004017r 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
00401Ar 1  8A                   TXA ; push new next to the Z buffer spot
00401Br 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
00401Dr 1                       ; bytes .1..4.6 filled in already..
00401Dr 1  AD rr rr             LDA WORLD_SPRITE_NUM
004020r 1  9D rr rr             STA OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway..
004023r 1  B1 24                LDA (PWOL_TUB_PTR_BL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
004025r 1  10 08                BPL @ZBL_INSIDE_TUB
004027r 1                     @ZBL_HIT_WALL_OUCH:
004027r 1  AD rr rr               LDA WORLD_WALL_SPRITE_NUM
00402Ar 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
00402Dr 1  A9 56                  LDA #86 ; max height..
00402Fr 1                     @ZBL_INSIDE_TUB:
00402Fr 1  85 40                  STA PWOL_CONVERT_HEIGHTS ;
004031r 1  85 42                  STA PWOL_CONVERT_HEIGHTS_L;
004033r 1  38                     SEC
004034r 1  A5 28                  LDA PWOL_CURRENT_YL
004036r 1  F2 42                  SBC (PWOL_CONVERT_HEIGHTS_L)
004038r 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
00403Ar 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
00403Cr 1  C9 78                  CMP #SCREEN_OUT_BOTTOM    ;  are we even visible?
00403Er 1  90 0E                  BCC :+
004040r 1  C5 55                  CMP PWOL_TOP_CHECK  ;     #SCREEN_OUT_TOP-50 ;PWOL_TOP_CHECK;
004042r 1  B0 0A                  BCS :+
004044r 1  CE rr rr               DEC OBJECT_LIST_BYTE6_NEXT
004047r 1  BD rr rr               LDA OBJECT_LIST_BYTE6_NEXT,X ; grab the old next value
00404Ar 1  92 3E                  STA (PWOL_Z_STARTS_PTR) ; patch the old one back in..
00404Cr 1  80 1A                  BRA @ZBL_NEXT ; and skip THIS
00404Er 1                       :
00404Er 1               
00404Er 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
004051r 1  C5 54                  CMP PWOL_CENTER_Y_TOP ; is this above center on screen??
004053r 1  B0 0E                  BCS :+ ; is not covering us
004055r 1  A5 29                  LDA PWOL_CURRENT_YH
004057r 1  C5 53                  CMP PWOL_CENTER_Y
004059r 1  90 08                  BCC :+ ; its from ahead of us, OK
00405Br 1                         ; it was from below and covers us ..
00405Br 1  BD rr rr               LDA OBJECT_LIST_BYTE0_ADDRLOW,X
00405Er 1  69 0F                  ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
004060r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X
004063r 1                         ;LDA #$D0
004063r 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
004063r 1  A5 27                : LDA PWOL_CURRENT_XH
004065r 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
004068r 1                    @ZBL_NEXT:
004068r 1                        ; calc next to the LEFT
004068r 1  88                    DEY
004069r 1  38                    SEC
00406Ar 1  A5 26                 LDA PWOL_CURRENT_XL
00406Cr 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
00406Er 1  85 26                 STA PWOL_CURRENT_XL
004070r 1  A5 27                 LDA PWOL_CURRENT_XH
004072r 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
004074r 1  85 27                 STA PWOL_CURRENT_XH
004076r 1  AA                    TAX
004077r 1  38                    SEC
004078r 1  A5 28                 LDA PWOL_CURRENT_YL
00407Ar 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
00407Cr 1  85 28                 STA PWOL_CURRENT_YL
00407Er 1  A5 29                 LDA PWOL_CURRENT_YH
004080r 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
004082r 1  85 29                 STA PWOL_CURRENT_YH
004084r 1               
004084r 1  8E rr rr              STX DEBUG_A
004087r 1  8D rr rr              STA DEBUG_B
00408Ar 1               
00408Ar 1  C5 56                 CMP PWOL_BOT_CHECK
00408Cr 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
00408Er 1  C9 F0                 CMP #SCREEN_OUT_TOP
004090r 1  90 0B                 BCC @ZBL_ZIG_RIGHT_SWITCH     ; its bottom_out <= Y < top out .. because negatives are bigger
004092r 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
004094r 1  90 04                 BCC :+                ; if its within right side then go do next thing..
004096r 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
004098r 1  90 03                 BCC @ZBL_ZIG_RIGHT_SWITCH     ; we're to the right of the screen but not far enough to wrap around..
00409Ar 1  4C rr rr            : JMP @zigzag_B_left
00409Dr 1               
00409Dr 1               
00409Dr 1               
00409Dr 1                    @ZBL_ZIG_RIGHT_SWITCH: ; DOWN/LEFT to start right is is 0,+1  from where we is right now ..
00409Dr 1                        ;INY
00409Dr 1                        ;INY
00409Dr 1  A9 06                 LDA #TRY_AGAIN
00409Fr 1  85 44                 STA PWOL_TRIES_COUNTER
0040A1r 1  18                    CLC
0040A2r 1  A5 24                 LDA PWOL_TUB_PTR_BL
0040A4r 1  69 40                 ADC #64
0040A6r 1  85 24                 STA PWOL_TUB_PTR_BL
0040A8r 1  A5 25                 LDA PWOL_TUB_PTR_BH
0040AAr 1  69 00                 ADC #0
0040ACr 1  C9 rr                 CMP #>TUB_WORLD+8
0040AEr 1  90 01                 BCC :+
0040B0r 1  60                    rts
0040B1r 1  85 25               : STA PWOL_TUB_PTR_BH
0040B3r 1               
0040B3r 1               
0040B3r 1  18                    CLC
0040B4r 1               
0040B4r 1  A5 26                 LDA PWOL_CURRENT_XL
0040B6r 1  65 3A                 ADC PWOL_NEXT_ROW_B_RIGHT_XL
0040B8r 1  85 26                 STA PWOL_CURRENT_XL
0040BAr 1               
0040BAr 1  A5 27                 LDA PWOL_CURRENT_XH
0040BCr 1  65 3B                 ADC PWOL_NEXT_ROW_B_RIGHT_XH
0040BEr 1  85 27                 STA PWOL_CURRENT_XH
0040C0r 1  AA                    TAX
0040C1r 1               
0040C1r 1               
0040C1r 1  18                    CLC
0040C2r 1  A5 28                 LDA PWOL_CURRENT_YL
0040C4r 1  65 3C                 ADC PWOL_NEXT_ROW_B_RIGHT_YL
0040C6r 1  85 28                 STA PWOL_CURRENT_YL
0040C8r 1  A5 29                 LDA PWOL_CURRENT_YH
0040CAr 1  65 3D                 ADC PWOL_NEXT_ROW_B_RIGHT_YH
0040CCr 1  80 1F                 BRA @ZBL_ZIG_RIGHT_SWITCH_CHECK
0040CEr 1               
0040CEr 1                  @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN:
0040CEr 1  C6 44                 DEC PWOL_TRIES_COUNTER
0040D0r 1  D0 01                 BNE @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN_GO_RIGHT
0040D2r 1                  @ZBL_RTS:
0040D2r 1               ;          STZ VERA_data0
0040D2r 1                ;         STZ VERA_data0
0040D2r 1                 ;        STZ VERA_data0
0040D2r 1                  ;       STZ VERA_data0
0040D2r 1  60                 rts
0040D3r 1                  @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN_GO_RIGHT:
0040D3r 1  C8                    INY
0040D4r 1  18                    CLC
0040D5r 1  A5 26                 LDA PWOL_CURRENT_XL
0040D7r 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
0040D9r 1  85 26                 STA PWOL_CURRENT_XL
0040DBr 1  A5 27                 LDA PWOL_CURRENT_XH
0040DDr 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
0040DFr 1  85 27                 STA PWOL_CURRENT_XH
0040E1r 1  AA                    TAX
0040E2r 1  18                    CLC
0040E3r 1  A5 28                 LDA PWOL_CURRENT_YL
0040E5r 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
0040E7r 1  85 28                 STA PWOL_CURRENT_YL
0040E9r 1  A5 29                 LDA PWOL_CURRENT_YH
0040EBr 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
0040EDr 1                  @ZBL_ZIG_RIGHT_SWITCH_CHECK:
0040EDr 1  85 29                 STA PWOL_CURRENT_YH
0040EFr 1  C5 56                 CMP PWOL_BOT_CHECK
0040F1r 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
0040F3r 1  C9 F0                 CMP #SCREEN_OUT_TOP
0040F5r 1  90 D7                 BCC @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN    ; its bottom_out <= Y < top out .. because negatives are bigger
0040F7r 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
0040F9r 1  90 04                 BCC @zigzag_B_right
0040FBr 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
0040FDr 1  90 CF                 BCC @ZBL_ZIG_RIGHT_SWITCH_TRY_AGAIN
0040FFr 1               
0040FFr 1               
0040FFr 1               
0040FFr 1                   @zigzag_B_right:
0040FFr 1  C0 40                CPY #64  ;  make sure we don't go outside level..
004101r 1  B0 6E                BCS @ZBR_NEXT ; if we're outside we'll just skip is OK
004103r 1  B1 24                LDA (PWOL_TUB_PTR_BL),y
004105r 1  C9 81                CMP #129
004107r 1  B0 68                BCS @ZBR_NEXT ; we're outside level.
004109r 1               
004109r 1                       ; bytes 1 and 4 were updated when we cleared the object list
004109r 1  EE rr rr             INC OBJECT_LIST_BYTE6_NEXT ; is there objects left to use as next?
00410Cr 1  D0 04                BNE :++
00410Er 1  CE rr rr           : DEC OBJECT_LIST_BYTE6_NEXT ; so we can do this check again if out..
004111r 1  60                   rts ; @WHAT_THE_WHAT ; we shouldn't be outside the screen...
004112r 1  A6 29              : LDX PWOL_CURRENT_YH ;  current screenY .. to calculate effective Z for the buffer
004114r 1  BD rr rr             LDA SCREEN_Y_TO_Z,x
004117r 1  F0 F5                BEQ :-- ; we shouldn't be outside the screen...
004119r 1  85 3E                STA PWOL_Z_STARTS_PTR  ; ok now that's primed to be at the start .. we want to grab whatever is at this buffer and save it to our new next..
00411Br 1  B2 3E                LDA (PWOL_Z_STARTS_PTR) ; get the current value here for the next ..
00411Dr 1  AE rr rr             LDX OBJECT_LIST_BYTE6_NEXT ; get index for this object
004120r 1  9D rr rr             STA OBJECT_LIST_BYTE6_NEXT,X ; old next becomes this object's next
004123r 1  8A                   TXA ; push new next to the Z buffer spot
004124r 1  92 3E                STA (PWOL_Z_STARTS_PTR) ;  and the new next gets saved back the Z_starts... otay.. start filling in data..
004126r 1                       ; bytes .1..4.6 filled in already..
004126r 1  AD rr rr             LDA WORLD_SPRITE_NUM
004129r 1  9D rr rr             STA OBJECT_LIST_BYTE0_ADDRLOW,X  ;   most of the time will be setting this anyway..
00412Cr 1  B1 24                LDA (PWOL_TUB_PTR_BL),y     ; get value of world at this point - 0-127=height, 128=wall, 129+ invalid
00412Er 1  10 08                BPL @ZBR_INSIDE_TUB
004130r 1                     @ZBR_HIT_WALL_OUCH:
004130r 1  AD rr rr               LDA WORLD_WALL_SPRITE_NUM
004133r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X ; hit the wall, ouch.. write wall stuff
004136r 1  A9 56                  LDA #86 ; max height..
004138r 1                     @ZBR_INSIDE_TUB:
004138r 1  85 40                  STA PWOL_CONVERT_HEIGHTS ;
00413Ar 1  85 42                  STA PWOL_CONVERT_HEIGHTS_L;
00413Cr 1  38                     SEC
00413Dr 1  A5 28                  LDA PWOL_CURRENT_YL
00413Fr 1  F2 42                  SBC (PWOL_CONVERT_HEIGHTS_L)
004141r 1  A5 29                  LDA PWOL_CURRENT_YH ; set er up
004143r 1  F2 40                  SBC (PWOL_CONVERT_HEIGHTS)
004145r 1  C9 78                  CMP #SCREEN_OUT_BOTTOM    ;  are we even visible?
004147r 1  90 0E                  BCC :+
004149r 1  C5 55                  CMP PWOL_TOP_CHECK  ;     #SCREEN_OUT_TOP-50 ;PWOL_TOP_CHECK;
00414Br 1  B0 0A                  BCS :+
00414Dr 1  CE rr rr               DEC OBJECT_LIST_BYTE6_NEXT
004150r 1  BD rr rr               LDA OBJECT_LIST_BYTE6_NEXT,X ; grab the old next value
004153r 1  92 3E                  STA (PWOL_Z_STARTS_PTR) ; patch the old one back in..
004155r 1  80 1A                  BRA @ZBR_NEXT ; and skip THIS
004157r 1                       :
004157r 1               
004157r 1               
004157r 1  9D rr rr               STA OBJECT_LIST_BYTE3_Y,X ; 01.34.6 filled in now
00415Ar 1  C5 54                  CMP PWOL_CENTER_Y_TOP ; is this above center on screen??
00415Cr 1  B0 0E                  BCS :+ ; is not covering us
00415Er 1  A5 29                  LDA PWOL_CURRENT_YH
004160r 1  C5 53                  CMP PWOL_CENTER_Y
004162r 1  90 08                  BCC :+ ; its from ahead of us, OK
004164r 1                         ; it was from below and covers us ..
004164r 1  BD rr rr               LDA OBJECT_LIST_BYTE0_ADDRLOW,X
004167r 1  69 0F                  ADC #diff_sprite_to_transparent ; constant should be 1 less because carry is set
004169r 1  9D rr rr               STA OBJECT_LIST_BYTE0_ADDRLOW,X
00416Cr 1                         ;LDA #$D0
00416Cr 1                         ;STA OBJECT_LIST_BYTE5_SIZE,X ; 01.3456 done .
00416Cr 1  A5 27                : LDA PWOL_CURRENT_XH
00416Er 1  9D rr rr               STA OBJECT_LIST_BYTE2_X,X    ; 0123456 OK - object is complete.
004171r 1                    @ZBR_NEXT:
004171r 1                        ; calc next to the right..
004171r 1  C8                    INY
004172r 1  18                    CLC
004173r 1  A5 26                 LDA PWOL_CURRENT_XL
004175r 1  65 2A                 ADC PWOL_ACROSS_ROW_XL
004177r 1  85 26                 STA PWOL_CURRENT_XL
004179r 1  A5 27                 LDA PWOL_CURRENT_XH
00417Br 1  65 2B                 ADC PWOL_ACROSS_ROW_XH
00417Dr 1  85 27                 STA PWOL_CURRENT_XH
00417Fr 1  AA                    TAX
004180r 1  18                    CLC
004181r 1  A5 28                 LDA PWOL_CURRENT_YL
004183r 1  65 2C                 ADC PWOL_ACROSS_ROW_YL
004185r 1  85 28                 STA PWOL_CURRENT_YL
004187r 1  A5 29                 LDA PWOL_CURRENT_YH
004189r 1  65 2D                 ADC PWOL_ACROSS_ROW_YH
00418Br 1  85 29                 STA PWOL_CURRENT_YH
00418Dr 1               
00418Dr 1  8E rr rr              STX DEBUG_A
004190r 1  8D rr rr              STA DEBUG_B
004193r 1               
004193r 1  C5 56                 CMP PWOL_BOT_CHECK
004195r 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
004197r 1  C9 F0                 CMP #SCREEN_OUT_TOP
004199r 1  90 0B                 BCC @ZBR_ZIG_LEFT_SWITCH     ; its bottom_out <= Y < top out .. because negatives are bigger
00419Br 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
00419Dr 1  90 04                 BCC :+                ; if its within right side then go do next thing..
00419Fr 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
0041A1r 1  90 03                 BCC @ZBR_ZIG_LEFT_SWITCH        ; we're to the right of the screen but not far enough to wrap around..
0041A3r 1  4C rr rr            : JMP @zigzag_B_right
0041A6r 1               
0041A6r 1               
0041A6r 1               
0041A6r 1                    @ZBR_ZIG_LEFT_SWITCH: ;PWOL_NEXT_ROW_A_LEFT_XL   ; -> next row is left, going down the screen ..  +1,+1
0041A6r 1  A9 06                 LDA #TRY_AGAIN
0041A8r 1  85 44                 STA PWOL_TRIES_COUNTER
0041AAr 1  88                   DEY ; have to go this to match where the thing is going .. 0,0
0041ABr 1  18                    CLC
0041ACr 1  A5 24                 LDA PWOL_TUB_PTR_BL
0041AEr 1  69 40                 ADC #64 ;   0,-1
0041B0r 1  85 24                 STA PWOL_TUB_PTR_BL
0041B2r 1  A5 25                 LDA PWOL_TUB_PTR_BH
0041B4r 1  69 00                 ADC #0
0041B6r 1  C9 rr                 CMP #>TUB_WORLD+8
0041B8r 1  90 01                 BCC :+
0041BAr 1  60                    rts
0041BBr 1  85 25               : STA PWOL_TUB_PTR_BH
0041BDr 1               
0041BDr 1  18                    CLC
0041BEr 1  A5 26                 LDA PWOL_CURRENT_XL
0041C0r 1  65 36                 ADC PWOL_NEXT_ROW_B_LEFT_XL
0041C2r 1  85 26                 STA PWOL_CURRENT_XL
0041C4r 1  A5 27                 LDA PWOL_CURRENT_XH
0041C6r 1  65 37                 ADC PWOL_NEXT_ROW_B_LEFT_XH
0041C8r 1  85 27                 STA PWOL_CURRENT_XH
0041CAr 1  AA                    TAX
0041CBr 1  18                    CLC
0041CCr 1  A5 28                 LDA PWOL_CURRENT_YL
0041CEr 1  65 38                 ADC PWOL_NEXT_ROW_B_LEFT_YL
0041D0r 1  85 28                 STA PWOL_CURRENT_YL
0041D2r 1  A5 29                 LDA PWOL_CURRENT_YH
0041D4r 1  65 39                 ADC PWOL_NEXT_ROW_B_LEFT_YH
0041D6r 1  80 1F                 BRA @ZBR_ZIG_LEFT_SWITCH_CHECK
0041D8r 1               
0041D8r 1               
0041D8r 1               
0041D8r 1                  @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN:
0041D8r 1  C6 44                 DEC PWOL_TRIES_COUNTER
0041DAr 1  D0 01                 BNE @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT
0041DCr 1                  @ZBR_RTS:
0041DCr 1               ;          STZ VERA_data0
0041DCr 1               ;          STZ VERA_data0
0041DCr 1               ;          STZ VERA_data0
0041DCr 1               ;          STZ VERA_data0
0041DCr 1  60                    rts
0041DDr 1                  @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN_GO_LEFT:
0041DDr 1  88                    DEY
0041DEr 1  38                    SEC
0041DFr 1  A5 26                 LDA PWOL_CURRENT_XL
0041E1r 1  E5 2A                 SBC PWOL_ACROSS_ROW_XL
0041E3r 1  85 26                 STA PWOL_CURRENT_XL
0041E5r 1  A5 27                 LDA PWOL_CURRENT_XH
0041E7r 1  E5 2B                 SBC PWOL_ACROSS_ROW_XH
0041E9r 1  85 27                 STA PWOL_CURRENT_XH
0041EBr 1  AA                    TAX
0041ECr 1  38                    SEC
0041EDr 1  A5 28                 LDA PWOL_CURRENT_YL
0041EFr 1  E5 2C                 SBC PWOL_ACROSS_ROW_YL
0041F1r 1  85 28                 STA PWOL_CURRENT_YL
0041F3r 1  A5 29                 LDA PWOL_CURRENT_YH
0041F5r 1  E5 2D                 SBC PWOL_ACROSS_ROW_YH
0041F7r 1               
0041F7r 1               @ZBR_ZIG_LEFT_SWITCH_CHECK:
0041F7r 1  85 29                 STA PWOL_CURRENT_YH
0041F9r 1  C5 56                 CMP PWOL_BOT_CHECK
0041FBr 1  90 04                 BCC :+      ;     if its within bottom definitely on screen, else check top as well..
0041FDr 1  C9 F0                 CMP #SCREEN_OUT_TOP
0041FFr 1  90 D7                 BCC @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN   ; its bottom_out <= Y < top out .. because negatives are bigger
004201r 1  E0 A0               : CPX #SCREEN_OUT_RIGHT ; check against right side
004203r 1  90 04                 BCC :+
004205r 1  E0 F0                 CPX #SCREEN_OUT_LEFT16
004207r 1  90 CF                 BCC @ZBR_ZIG_LEFT_SWITCH_TRY_AGAIN
004209r 1  4C rr rr            : JMP @zigzag_B_left
00420Cr 1               
00420Cr 1               
00420Cr 1               draw_object_list:
00420Cr 1  AC rr rr          LDY NUM_AVAIL_SPRITES ; num sprites can write
00420Fr 1  D0 03             BNE :+
004211r 1  4C rr rr          JMP draw_object_list_to_BUFFER
004214r 1                  :
004214r 1  AD rr rr         LDA NUM_RESERVED_SPRITES
004217r 1               ;    INC VERA_LOCK
004217r 1               ;    BNE @unlock_vera   there's no actual way to get here and not have vera unlock.. s
004217r 1               ;  so instead, we're going to DEC the VERA_LOCK after the new frame is ready, which is after this function..
004217r 1               
004217r 1               
004217r 1  EE rr rr         INC DEBUG_D
00421Ar 1               
00421Ar 1  9C 25 9F         STZ VERA_ctrl
00421Dr 1  64 22            STZ ZP_PTR
00421Fr 1  0A               ASL
004220r 1  26 22            ROL ZP_PTR
004222r 1  0A               ASL
004223r 1  26 22            ROL ZP_PTR
004225r 1  0A               ASL
004226r 1  26 22            ROL ZP_PTR
004228r 1  8D 20 9F         STA VERA_addr_low
00422Br 1  18               CLC
00422Cr 1  A5 22            LDA ZP_PTR
00422Er 1  69 EC            ADC #>VRAM_SPRITE_BUF;  #>VRAM_SPRITE_BUF ; #>VRAM_sprite_attributes;
004230r 1  8D 21 9F         sta VERA_addr_high
004233r 1  A9 11            lda #$11
004235r 1  8D 22 9F         sta VERA_addr_bank
004238r 1  AD rr rr         LDA SPRITE_OBJECT_ENABLE
00423Br 1  D0 22            BNE @SET_Z_PTR
00423Dr 1  A9 01            LDA #1
00423Fr 1  A2 0C            LDX #$0C
004241r 1  9C 23 9F        : STZ VERA_data0  ; addr low
004244r 1  8D 23 9F          STA VERA_data0  ; mod/addr_hi
004247r 1  9C 23 9F          STZ VERA_data0  ; xl
00424Ar 1  9C 23 9F          STZ VERA_data0  ; Xh
00424Dr 1  9C 23 9F          STZ VERA_data0  ; yl
004250r 1  9C 23 9F          STZ VERA_data0  ; yh
004253r 1  8E 23 9F          STX VERA_data0
004256r 1  9C 23 9F          STZ VERA_data0
004259r 1  88                DEY
00425Ar 1  D0 E5             BNE :-
00425Cr 1  4C rr rr         JMP draw_object_list_to_BUFFER
00425Fr 1               
00425Fr 1               
00425Fr 1               @SET_Z_PTR:
00425Fr 1  64 22            STZ ZP_PTR
004261r 1  A9 rr            LDA #>OBJECT_LIST_Z_START_POINTERS
004263r 1  85 23            STA ZP_PTR+1
004265r 1               
004265r 1               
004265r 1                 @NEXT_Z: ; Z=0 is invalid...
004265r 1  E6 22              INC ZP_PTR
004267r 1  D0 1C              BNE @Z_LOOP
004269r 1  AD 23 9F           : LDA VERA_data0
00426Cr 1  AD 23 9F             LDA VERA_data0
00426Fr 1  9C 23 9F             STZ VERA_data0
004272r 1  9C 23 9F             STZ VERA_data0
004275r 1  AD 23 9F             LDA VERA_data0
004278r 1  AD 23 9F             LDA VERA_data0
00427Br 1  AD 23 9F             LDA VERA_data0
00427Er 1  AD 23 9F             LDA VERA_data0
004281r 1  88                   DEY
004282r 1  D0 E5                BNE :-
004284r 1                  @rts:
004284r 1  60                 rts
004285r 1                 @Z_LOOP:
004285r 1  B2 22              LDA (ZP_PTR) ; get our first victim
004287r 1  AA                 TAX
004288r 1  A9 00              LDA #0
00428Ar 1  92 22              STA (ZP_PTR) ; zero this Z_next for now
00428Cr 1  8A                 TXA
00428Dr 1                    @OBJ_LOOP:
00428Dr 1  AA                    TAX
00428Er 1  F0 D5                 BEQ @NEXT_Z ; got a bum next pointer there ...
004290r 1  BD rr rr              LDA OBJECT_LIST_BYTE0_ADDRLOW,X
004293r 1  8D 23 9F              STA VERA_data0
004296r 1  BD rr rr              LDA OBJECT_LIST_BYTE1_MODE,x
004299r 1  8D 23 9F              STA VERA_data0
00429Cr 1  BD rr rr              LDA OBJECT_LIST_BYTE2_X,x
00429Fr 1  8D 23 9F              STA VERA_data0
0042A2r 1  C9 A0                 CMP #SCREEN_OUT_RIGHT
0042A4r 1  A9 00                 LDA #0
0042A6r 1  90 02                 BCC :+
0042A8r 1  A9 FF                 LDA #$FF
0042AAr 1  8D 23 9F            : STA VERA_data0
0042ADr 1               
0042ADr 1  BD rr rr              LDA OBJECT_LIST_BYTE3_Y,x
0042B0r 1  8D 23 9F              STA VERA_data0
0042B3r 1  C9 78                 CMP #SCREEN_OUT_BOTTOM
0042B5r 1  A9 00                 LDA #0
0042B7r 1  90 02                 BCC :+
0042B9r 1  A9 FF                 LDA #$FF
0042BBr 1  8D 23 9F            : STA VERA_data0
0042BEr 1  BD rr rr              LDA OBJECT_LIST_BYTE4_ZFLIPS,x
0042C1r 1  8D 23 9F              STA VERA_data0
0042C4r 1  BD rr rr              LDA OBJECT_LIST_BYTE5_SIZE,x
0042C7r 1  8D 23 9F              STA VERA_data0
0042CAr 1  BD rr rr              LDA OBJECT_LIST_BYTE6_NEXT,x
0042CDr 1  88                    DEY ; decrement that Y
0042CEr 1  D0 BD                 BNE @OBJ_LOOP ; still sprite slots left.. woot!
0042D0r 1  92 22                 STA (ZP_PTR) ; oops.. save that last thing and exit..
0042D2r 1               draw_object_list_to_BUFFER:
0042D2r 1               DOLB_ZTRACKER = ZP_PTR
0042D2r 1               DOLB_ZTRACKERH = ZP_PTR+1
0042D2r 1               DOLB_BUFFER_HIGH_BYTE = ZP_PTR+2
0042D2r 1               DOLB_CALC_DEST_LOW = ZP_PTR+3
0042D2r 1               DOLB_CALC_DEST_HIGH = ZP_PTR+4
0042D2r 1               DOLB_CALC_SCRATCH = ZP_PTR+5
0042D2r 1  A9 04           LDA #4  ;    DCSEL 2 with address select 0.. to be used as destination..
0042D4r 1  8D 25 9F        STA VERA_ctrl
0042D7r 1  A9 40           LDA #64
0042D9r 1  8D 29 9F        STA FX_CTRL ;     cache write enable, cache fill and other stuff disabled
0042DCr 1  9C 2C 9F        STZ FX_MULT
0042DFr 1  8D 29 9F        STA FX_CACHE_L ; zero out the cache bytes..
0042E2r 1  9C 2A 9F        STZ FX_CACHE_M
0042E5r 1  9C 2B 9F        STZ FX_CACHE_H
0042E8r 1  8D 2C 9F        STA FX_CACHE_U
0042EBr 1               
0042EBr 1  9C 20 9F        STZ VERA_addr_low
0042EEr 1  AD rr rr        LDA CURRENT_BITMAP_BUFFER
0042F1r 1  F0 04           BEQ :+
0042F3r 1  A9 18           LDA #>VRAM_BITMAP_LAYERA
0042F5r 1  80 02           BRA :++
0042F7r 1  A9 80         : LDA #>VRAM_BITMAP_LAYERB
0042F9r 1  85 24         : STA DOLB_BUFFER_HIGH_BYTE
0042FBr 1  8D 21 9F        STA VERA_addr_high
0042FEr 1  A9 31           LDA #$31 ; 4 at a time
004300r 1  8D 22 9F        STA VERA_addr_bank
004303r 1                  ; clear the buffer ...
004303r 1  18              CLC
004304r 1  A9 00           LDA #0
004306r 1  A2 78           LDX #120;120 ; do 160*120 = 19,200/4 = 4,800 iterations.. if we do 20 iterations a pop.. 240 x iterations
004308r 1               
004308r 1               
004308r 1  9C 23 9F      : STZ VERA_data0 ;     trigger cache write - 4 bytes / 8px
00430Br 1  9C 23 9F        STZ VERA_data0
00430Er 1  9C 23 9F        STZ VERA_data0
004311r 1  9C 23 9F        STZ VERA_data0 ; 32 px cleared
004314r 1               
004314r 1  9C 23 9F        STZ VERA_data0
004317r 1  9C 23 9F        STZ VERA_data0
00431Ar 1  9C 23 9F        STZ VERA_data0
00431Dr 1  9C 23 9F        STZ VERA_data0 ; 64 px cleared
004320r 1               
004320r 1  9C 23 9F        STZ VERA_data0
004323r 1  9C 23 9F        STZ VERA_data0
004326r 1  9C 23 9F        STZ VERA_data0
004329r 1  9C 23 9F        STZ VERA_data0 ; 96
00432Cr 1               
00432Cr 1  9C 23 9F        STZ VERA_data0
00432Fr 1  9C 23 9F        STZ VERA_data0
004332r 1  9C 23 9F        STZ VERA_data0
004335r 1  9C 23 9F        STZ VERA_data0 ; 128
004338r 1               
004338r 1  9C 23 9F        STZ VERA_data0
00433Br 1  9C 23 9F        STZ VERA_data0
00433Er 1  9C 23 9F        STZ VERA_data0
004341r 1  9C 23 9F        STZ VERA_data0 ; 160 px cleared
004344r 1               
004344r 1  18              CLC
004345r 1  AD 20 9F        LDA VERA_addr_low
004348r 1  69 50           ADC #80     ;     increment A for the low part the address
00434Ar 1  8D 20 9F        STA VERA_addr_low
00434Dr 1  AD 21 9F        LDA VERA_addr_high
004350r 1  69 00           ADC #0
004352r 1  8D 21 9F        STA VERA_addr_high
004355r 1               
004355r 1  CA              DEX
004356r 1  D0 B0           BNE :- ; 85 * 120 = 10,200 .. + 119 * 14 =1,666 .. 11,866 cycles to clear entire screen.. ok
004358r 1               
004358r 1  9C 29 9F        STZ FX_CTRL ;     clear the cache writing for now
00435Br 1  9C 25 9F        STZ VERA_ctrl  ;     switch back to regular mode for now..
00435Er 1               
00435Er 1               
00435Er 1  64 22           STZ DOLB_ZTRACKER
004360r 1  A9 rr           LDA #>OBJECT_LIST_Z_START_POINTERS
004362r 1  85 23           STA DOLB_ZTRACKERH
004364r 1                 @NEXT_Z: ; Z=0 is invalid...
004364r 1  C6 22              DEC DOLB_ZTRACKER
004366r 1  D0 04              BNE @Z_LOOP
004368r 1  9C 25 9F           STZ VERA_ctrl ; reset VERA_CTRl ..
00436Br 1  60                 RTS
00436Cr 1                 @Z_LOOP:
00436Cr 1  B2 22              LDA (DOLB_ZTRACKER) ; get our first victim
00436Er 1                    @OBJ_LOOP:
00436Er 1  F0 F4                 BEQ @NEXT_Z
004370r 1  AA                    TAX      ;     get that pointer into X so we can do stuffs...
004371r 1                        ; OK so now reference OBJECT_LIST_BYTE*,X for whatever we're drawing.. and Y is free for whatever..
004371r 1  BD rr rr              LDA OBJECT_LIST_BYTE2_X,x ;      4     4     grab X
004374r 1  C9 A0                 CMP #160 ;     2     6
004376r 1  90 07                 BCC :++     ;     we're off screen left/right somewhere if BCS
004378r 1  BD rr rr            : LDA OBJECT_LIST_BYTE6_NEXT,x
00437Br 1  D0 F1                 BNE @OBJ_LOOP
00437Dr 1  80 E5                 BRA @NEXT_Z
00437Fr 1  BC rr rr            : LDY OBJECT_LIST_BYTE3_Y,x ; I think that works..
004382r 1  C0 78                 CPY #120
004384r 1  B0 F2                 BCS :-- ; checking if inside screen.. for now we'll bug out if BCS set here..
004386r 1                        ; we're inside screen.. later will need to check if above top rather than below bottom..
004386r 1               
004386r 1                       ; X in a, Y in Y
004386r 1  9C 25 9F              STZ VERA_ctrl
004389r 1  4A                    LSR ; 16 colors, so cut in half to get byte reference ;
00438Ar 1  85 27                 STA DOLB_CALC_SCRATCH
00438Cr 1                 ;       STZ DOLB_CALC_DEST_LOW
00438Cr 1  98                    TYA
00438Dr 1                       ; OK we have dealt with being in the screen and have a valid Y .. need to multiply by 160 bytes to get start of line..
00438Dr 1                       ; or use lookie table? for now will do the multiply ..
00438Dr 1  64 26                 STZ DOLB_CALC_DEST_HIGH ;           3
00438Fr 1  0A                    ASL ; x2                            2  5
004390r 1  26 26                 ROL DOLB_CALC_DEST_HIGH ;     x2    5 10
004392r 1  0A                    ASL ; x4                            2 12
004393r 1  26 26                 ROL DOLB_CALC_DEST_HIGH ;     x4    5 17
004395r 1  18                    CLC
004396r 1  7D rr rr              ADC OBJECT_LIST_BYTE3_Y,X ;   x5    4 21
004399r 1  85 25                 STA DOLB_CALC_DEST_LOW
00439Br 1  A5 26                 LDA DOLB_CALC_DEST_HIGH
00439Dr 1  69 00                 ADC #0
00439Fr 1  85 26                 STA DOLB_CALC_DEST_HIGH
0043A1r 1               
0043A1r 1  A5 25                 LDA DOLB_CALC_DEST_LOW
0043A3r 1  0A                    asl ;                                        2     30
0043A4r 1  26 26                 ROL DOLB_CALC_DEST_HIGH ;     X10            5     35
0043A6r 1  0A                    asl ;                                        2     37
0043A7r 1  26 26                 ROL DOLB_CALC_DEST_HIGH ;     X20            5     42
0043A9r 1  0A                    asl ;                                        2     47
0043AAr 1  26 26                 ROL DOLB_CALC_DEST_HIGH ;     X40            5     52
0043ACr 1  0A                    asl ;                                        2     54
0043ADr 1  26 26                 ROL DOLB_CALC_DEST_HIGH ;     X80            5     59
0043AFr 1  0A                    asl ;                                        2     61
0043B0r 1  26 26                 ROL DOLB_CALC_DEST_HIGH ;     X160 ... woot! 5     66 !
0043B2r 1               ;         asl ;                                        2     61
0043B2r 1               ;         ROL DOLB_CALC_DEST_HIGH ;     X160 ... woot! 5     66 !
0043B2r 1               
0043B2r 1  65 27                 ADC DOLB_CALC_SCRATCH  ;     add the X part
0043B4r 1  8D 20 9F              STA VERA_addr_low   ;     need to stash for next thing.. 3       69
0043B7r 1  A5 26                 LDA DOLB_CALC_DEST_HIGH
0043B9r 1  65 24                 ADC DOLB_BUFFER_HIGH_BYTE
0043BBr 1  8D 21 9F              STA VERA_addr_high
0043BEr 1  A9 11                 LDA #$11
0043C0r 1  8D 22 9F              STA VERA_addr_bank
0043C3r 1  8D 23 9F              STA VERA_data0             ;     we're just gonna stick some pixels here..
0043C6r 1               
0043C6r 1               
0043C6r 1               
0043C6r 1  BD rr rr              LDA OBJECT_LIST_BYTE6_NEXT,x     ;     time to cycle to next
0043C9r 1  4C rr rr              JMP @OBJ_LOOP
0043CCr 1               
0043CCr 1               test_optimal_pal_data:
0043CCr 1               ;      GB   R  $1:FA00-$1:FBFF   VERA Color Palette (256 x 2 bytes)
0043CCr 1  00 00        .byte $00,$00  ; 0 - black/transparent
0043CEr 1  C8 0F        .byte $c8,$0f  ; 1 #ffcc88
0043D0r 1               
0043D0r 1  04 06        .byte $04,$06  ; 2 #660044
0043D2r 1  00 0C        .byte $00,$0C  ; 3  #cc0000
0043D4r 1  F0 0C        .byte $F0,$0C  ; 4#ccff00
0043D6r 1  42 03        .byte $42,$03
0043D8r 1  60 0C        .byte $60,$0c   ; 6  #cc6600
0043DAr 1  40 08        .byte $40,$08   ; 7 #884400
0043DCr 1  C0 0C        .byte $c0,$0c   ; 8 #cccc00
0043DEr 1  6A 02        .byte $6a,$02   ; 9 #2266aa mid blue
0043E0r 1  C0 00        .byte $c0,$00   ; A #00cc00
0043E2r 1  AC 07        .byte $ac,$07   ; B #77aacc light blue
0043E4r 1  C0 00        .byte $c0,$00   ; C #0000c0 dark blue
0043E6r 1  0C 0C        .byte $0c,$0c   ; D #cc00cc
0043E8r 1  88 08        .byte $88,$08   ; E #888888
0043EAr 1  22 02        .byte $22,$02   ; F #222222
0043ECr 1               
0043ECr 1               test_vram_data:
0043ECr 1               ; 70 to 127 - start of 16x16 (each 128 byte) for testing directions / sizing..
0043ECr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11  ;  0-15 16x10 -  0
0043F0r 1  11 11 11 11  
0043F4r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
0043F8r 1  FF FF FF F1  
0043FCr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
004400r 1  FF FF FF F1  
004404r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
004408r 1  FF FF FF F1  
00440Cr 1  1F FF FF F1  .byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$F1
004410r 1  FF FF FF F1  
004414r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
004418r 1  FF FF FF F1  
00441Cr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
004420r 1  FF FF FF F1  
004424r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
004428r 1  FF FF FF F1  
00442Cr 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
004430r 1  FF FF FF F1  
004434r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11
004438r 1  11 11 11 11  
00443Cr 1  55 55 55 55  .repeat 54
004440r 1  55 55 55 55  
004444r 1  55 55 55 55  
0045ECr 1               .res 8,$55
0045ECr 1               .endrepeat
0045ECr 1               
0045ECr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11  ;  16-31    16x10 -  0 trans
0045F0r 1  11 11 11 11  
0045F4r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0045F8r 1  F0 F0 F0 F1  
0045FCr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
004600r 1  0F 0F 0F 01  
004604r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
004608r 1  F0 F0 F0 F1  
00460Cr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
004610r 1  0F 0F 0F 01  
004614r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
004618r 1  F0 F0 F0 F1  
00461Cr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
004620r 1  0F 0F 0F 01  
004624r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
004628r 1  F0 F0 F0 F1  
00462Cr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
004630r 1  0F 0F 0F 01  
004634r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11
004638r 1  11 11 11 11  
00463Cr 1  50 50 50 50  .repeat 27
004640r 1  50 50 50 50  
004644r 1  05 05 05 05  
0047ECr 1               .res 8,$50
0047ECr 1               .res 8,$05
0047ECr 1               .endrepeat
0047ECr 1               
0047ECr 1               
0047ECr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11  ;  32-47    16x11 -  4
0047F0r 1  11 11 11 11  
0047F4r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
0047F8r 1  FF FF FF F1  
0047FCr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
004800r 1  FF FF FF F1  
004804r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
004808r 1  FF FF FF F1  
00480Cr 1  1F FF FF F1  .byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$F1
004810r 1  FF FF FF F1  
004814r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
004818r 1  FF FF FF F1  
00481Cr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
004820r 1  FF FF FF F1  
004824r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$F1
004828r 1  FF FF FF F1  
00482Cr 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
004830r 1  FF FF FF F1  
004834r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$F1
004838r 1  FF FF FF F1  
00483Cr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11
004840r 1  11 11 11 11  
004844r 1  55 55 55 55  .repeat 53
004848r 1  55 55 55 55  
00484Cr 1  55 55 55 55  
0049ECr 1               .res 8,$55
0049ECr 1               .endrepeat
0049ECr 1               
0049ECr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11  ;  48-63    16x11 -  4 trans
0049F0r 1  11 11 11 11  
0049F4r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
0049F8r 1  F0 F0 F0 F1  
0049FCr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
004A00r 1  0F 0F 0F 01  
004A04r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
004A08r 1  F0 F0 F0 F1  
004A0Cr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
004A10r 1  0F 0F 0F 01  
004A14r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
004A18r 1  F0 F0 F0 F1  
004A1Cr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
004A20r 1  0F 0F 0F 01  
004A24r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
004A28r 1  F0 F0 F0 F1  
004A2Cr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$01
004A30r 1  0F 0F 0F 01  
004A34r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$F1
004A38r 1  F0 F0 F0 F1  
004A3Cr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$11
004A40r 1  11 11 11 11  
004A44r 1  05 05 05 05  .res 7,$05
004A48r 1  05 05 05     
004A4Br 1  00           .byte 0
004A4Cr 1  50 50 50 50  .repeat 26
004A50r 1  50 50 50 50  
004A54r 1  05 05 05 05  
004BECr 1               .res 8,$50
004BECr 1               .res 7,$05
004BECr 1               .byte 0
004BECr 1               .endrepeat
004BECr 1               
004BECr 1               
004BECr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10  ;  64-79    15x11 - 10
004BF0r 1  11 11 11 10  
004BF4r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
004BF8r 1  FF FF FF 10  
004BFCr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
004C00r 1  FF FF FF 10  
004C04r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
004C08r 1  FF FF FF 10  
004C0Cr 1  1F FF FF F1  .byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$10
004C10r 1  FF FF FF 10  
004C14r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
004C18r 1  FF FF FF 10  
004C1Cr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
004C20r 1  FF FF FF 10  
004C24r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
004C28r 1  FF FF FF 10  
004C2Cr 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
004C30r 1  FF FF FF 10  
004C34r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
004C38r 1  FF FF FF 10  
004C3Cr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
004C40r 1  11 11 11 10  
004C44r 1  55 55 55 55  .repeat 53
004C48r 1  55 55 55 50  
004C4Cr 1  55 55 55 55  
004DECr 1               .res 7,$55
004DECr 1               .byte $50
004DECr 1               .endrepeat
004DECr 1               
004DECr 1               
004DECr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10  ;  80-95    15x11 - 10 trans
004DF0r 1  11 11 11 10  
004DF4r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
004DF8r 1  F0 F0 F0 10  
004DFCr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
004E00r 1  0F 0F 0F 10  
004E04r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
004E08r 1  F0 F0 F0 10  
004E0Cr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
004E10r 1  0F 0F 0F 10  
004E14r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
004E18r 1  F0 F0 F0 10  
004E1Cr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
004E20r 1  0F 0F 0F 10  
004E24r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
004E28r 1  F0 F0 F0 10  
004E2Cr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
004E30r 1  0F 0F 0F 10  
004E34r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
004E38r 1  F0 F0 F0 10  
004E3Cr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
004E40r 1  11 11 11 10  
004E44r 1  05 05 05 05  .res 7,$05
004E48r 1  05 05 05     
004E4Br 1  00           .byte 0
004E4Cr 1  50 50 50 50  .repeat 26
004E50r 1  50 50 50 50  
004E54r 1  05 05 05 05  
004FECr 1               .res 8,$50
004FECr 1               .res 7,$05
004FECr 1               .byte 0
004FECr 1               .endrepeat
004FECr 1               
004FECr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10  ;  96-111    15x12 - 18
004FF0r 1  11 11 11 10  
004FF4r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
004FF8r 1  FF FF FF 10  
004FFCr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
005000r 1  FF FF FF 10  
005004r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
005008r 1  FF FF FF 10  
00500Cr 1  1F FF FF F1  .byte $1F,$FF,$ff,$f1,$ff,$fF,$FF,$10
005010r 1  FF FF FF 10  
005014r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
005018r 1  FF FF FF 10  
00501Cr 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
005020r 1  FF FF FF 10  
005024r 1  1F FF FF FF  .byte $1F,$FF,$FF,$Ff,$FF,$FF,$FF,$10
005028r 1  FF FF FF 10  
00502Cr 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
005030r 1  FF FF FF 10  
005034r 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
005038r 1  FF FF FF 10  
00503Cr 1  1F FF FF FF  .byte $1F,$FF,$FF,$FF,$FF,$FF,$FF,$10
005040r 1  FF FF FF 10  
005044r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
005048r 1  11 11 11 10  
00504Cr 1  55 55 55 55  .repeat 52
005050r 1  55 55 55 50  
005054r 1  55 55 55 55  
0051ECr 1               .res 7,$55
0051ECr 1               .byte $50
0051ECr 1               .endrepeat
0051ECr 1               
0051ECr 1               
0051ECr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10  ;  112-127    15x12 - 18 trans
0051F0r 1  11 11 11 10  
0051F4r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0051F8r 1  F0 F0 F0 10  
0051FCr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
005200r 1  0F 0F 0F 10  
005204r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
005208r 1  F0 F0 F0 10  
00520Cr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
005210r 1  0F 0F 0F 10  
005214r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
005218r 1  F0 F0 F0 10  
00521Cr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
005220r 1  0F 0F 0F 10  
005224r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
005228r 1  F0 F0 F0 10  
00522Cr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
005230r 1  0F 0F 0F 10  
005234r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
005238r 1  F0 F0 F0 10  
00523Cr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
005240r 1  0F 0F 0F 10  
005244r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
005248r 1  11 11 11 10  
00524Cr 1  50 50 50 50  .repeat 26
005250r 1  50 50 50 50  
005254r 1  05 05 05 05  
0053ECr 1               .res 8,$50
0053ECr 1               .res 7,$05
0053ECr 1               .byte 0
0053ECr 1               .endrepeat
0053ECr 1               
0053ECr 1               ; alernate tile graphic to use for tub wall .. 128-143 ; 16x tile
0053ECr 1  16 16 16 16  .repeat 32
0053F0r 1  16 16 16 16  
0053F4r 1  61 61 61 61  
0055ECr 1                   .byte $16, $16, $16, $16, $16, $16, $16, $16
0055ECr 1                   .byte $61, $61, $61, $61, $61, $61, $61, $61
0055ECr 1               .endrepeat
0055ECr 1               
0055ECr 1  10 10 10 10  .repeat 32  ;  144-159
0055F0r 1  10 10 10 10  
0055F4r 1  06 06 06 06  
0057ECr 1                   .byte $10, $10, $10, $10, $10, $10, $10, $10
0057ECr 1                   .byte $06, $06, $06, $06, $06, $06, $06, $06
0057ECr 1               .endrepeat
0057ECr 1               
0057ECr 1               
0057ECr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$00  ;  160-175    14x12
0057F0r 1  11 11 11 00  
0057F4r 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$fF,$FF,$F1,$00
0057F8r 1  FF FF F1 00  
0057FCr 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$fF,$FF,$F1,$00
005800r 1  FF FF F1 00  
005804r 1  1F FF FF FF  .byte $1f,$FF,$ff,$Ff,$Ff,$fF,$F1,$00
005808r 1  FF FF F1 00  
00580Cr 1  1F FF FF F1  .byte $1f,$FF,$FF,$f1,$fF,$FF,$F1,$00
005810r 1  FF FF F1 00  
005814r 1  1F FF FF FF  .byte $1f,$FF,$FF,$Ff,$Ff,$fF,$F1,$00
005818r 1  FF FF F1 00  
00581Cr 1  1F FF FF FF  .byte $1f,$FF,$FF,$fF,$FF,$FF,$F1,$00
005820r 1  FF FF F1 00  
005824r 1  1F FF FF FF  .byte $1f,$FF,$FF,$fF,$FF,$FF,$F1,$00
005828r 1  FF FF F1 00  
00582Cr 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$FF,$FF,$F1,$00
005830r 1  FF FF F1 00  
005834r 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$FF,$FF,$F1,$00
005838r 1  FF FF F1 00  
00583Cr 1  1F FF FF FF  .byte $1f,$FF,$FF,$FF,$FF,$FF,$F1,$00
005840r 1  FF FF F1 00  
005844r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$00
005848r 1  11 11 11 00  
00584Cr 1  55 55 55 55  .repeat 52
005850r 1  55 55 55 00  
005854r 1  55 55 55 55  
0059ECr 1               .res 7,$55
0059ECr 1               .byte 0
0059ECr 1               .endrepeat
0059ECr 1               
0059ECr 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$00  ;  176-191
0059F0r 1  11 11 11 00  
0059F4r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
0059F8r 1  F0 F0 F0 10  
0059FCr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
005A00r 1  0F 0F 0F 10  
005A04r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
005A08r 1  F0 F0 F0 10  
005A0Cr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
005A10r 1  0F 0F 0F 10  
005A14r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
005A18r 1  F0 F0 F0 10  
005A1Cr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
005A20r 1  0F 0F 0F 10  
005A24r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
005A28r 1  F0 F0 F0 10  
005A2Cr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
005A30r 1  0F 0F 0F 10  
005A34r 1  10 F0 F0 F0  .byte $10,$F0,$F0,$F0,$F0,$F0,$F0,$10
005A38r 1  F0 F0 F0 10  
005A3Cr 1  1F 0F 0F 0F  .byte $1F,$0F,$0F,$0f,$0F,$0F,$0F,$10
005A40r 1  0F 0F 0F 10  
005A44r 1  11 11 11 11  .byte $11,$11,$11,$11,$11,$11,$11,$10
005A48r 1  11 11 11 10  
005A4Cr 1  50 50 50 50  .repeat 26
005A50r 1  50 50 50 50  
005A54r 1  05 05 05 05  
005BECr 1               .res 8,$50
005BECr 1               .res 7,$05
005BECr 1               .byte 0
005BECr 1               .endrepeat
005BECr 1               
005BECr 1               ; alernate tile graphic to use for tub wall .. 192-223 ; 15x tile
005BECr 1  16 16 16 16  .repeat 32
005BF0r 1  16 16 16 10  
005BF4r 1  61 61 61 61  
005DECr 1                   .byte $16, $16, $16, $16, $16, $16, $16, $10
005DECr 1                   .byte $61, $61, $61, $61, $61, $61, $61, $60
005DECr 1               .endrepeat
005DECr 1               
005DECr 1  10 10 10 10  .repeat 32  ;  144-159
005DF0r 1  10 10 10 10  
005DF4r 1  06 06 06 06  
005FECr 1                   .byte $10, $10, $10, $10, $10, $10, $10, $10
005FECr 1                   .byte $06, $06, $06, $06, $06, $06, $06, $00
005FECr 1               .endrepeat
005FECr 1               
005FECr 1               
005FECr 1               ; alernate tile graphic to use for tub wall .. 224 ; 14x tile
005FECr 1  16 16 16 16  .repeat 32
005FF0r 1  16 16 16 00  
005FF4r 1  61 61 61 61  
0061ECr 1                   .byte $16, $16, $16, $16, $16, $16, $16, $00
0061ECr 1                   .byte $61, $61, $61, $61, $61, $61, $61, $00
0061ECr 1               .endrepeat
0061ECr 1               
0061ECr 1  10 10 10 10  .repeat 32  ;  144-159
0061F0r 1  10 10 10 00  
0061F4r 1  06 06 06 06  
0063ECr 1                   .byte $10, $10, $10, $10, $10, $10, $10, $00
0063ECr 1                   .byte $06, $06, $06, $06, $06, $06, $06, $00
0063ECr 1               .endrepeat
0063ECr 1               
0063ECr 1               
0063ECr 1               
0063ECr 1               HEX_DISPLAY_FONT:       ; 8x8x16 color = 32 bytes ... sprite addr 256
0063ECr 1               ;     01   23   45   67
0063ECr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 0
0063F0r 1  01 00 00 10  .byte $01, $00, $00, $10
0063F4r 1  01 00 00 10  .byte $01, $00, $00, $10
0063F8r 1  00 00 00 00  .byte $00, $00, $00, $00
0063FCr 1  01 00 00 10  .byte $01, $00, $00, $10
006400r 1  01 00 00 10  .byte $01, $00, $00, $10
006404r 1  01 00 00 10  .byte $01, $00, $00, $10
006408r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 0 /
00640Cr 1               
00640Cr 1  00 00 00 00  .byte $00, $00, $00, $00 ; 1
006410r 1  00 00 00 10  .byte $00, $00, $00, $10
006414r 1  00 00 00 10  .byte $00, $00, $00, $10
006418r 1  00 00 00 00  .byte $00, $00, $00, $00
00641Cr 1  00 00 00 10  .byte $00, $00, $00, $10
006420r 1  00 00 00 10  .byte $00, $00, $00, $10
006424r 1  00 00 00 10  .byte $00, $00, $00, $10
006428r 1  00 00 00 00  .byte $00, $00, $00, $00
00642Cr 1               
00642Cr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 2
006430r 1  00 00 00 10  .byte $00, $00, $00, $10
006434r 1  00 00 00 10  .byte $00, $00, $00, $10
006438r 1  00 11 11 00  .byte $00, $11, $11, $00
00643Cr 1  01 00 00 00  .byte $01, $00, $00, $00
006440r 1  01 00 00 00  .byte $01, $00, $00, $00
006444r 1  01 00 00 00  .byte $01, $00, $00, $00
006448r 1  00 11 11 00  .byte $00, $11, $11, $00
00644Cr 1               
00644Cr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 3
006450r 1  00 00 00 10  .byte $00, $00, $00, $10
006454r 1  00 00 00 10  .byte $00, $00, $00, $10
006458r 1  00 11 11 00  .byte $00, $11, $11, $00
00645Cr 1  00 00 00 10  .byte $00, $00, $00, $10
006460r 1  00 00 00 10  .byte $00, $00, $00, $10
006464r 1  00 00 00 10  .byte $00, $00, $00, $10
006468r 1  00 11 11 00  .byte $00, $11, $11, $00
00646Cr 1               
00646Cr 1  00 00 00 00  .byte $00, $00, $00, $00   ; 4
006470r 1  01 00 00 10  .byte $01, $00, $00, $10
006474r 1  01 00 00 10  .byte $01, $00, $00, $10
006478r 1  00 11 11 00  .byte $00, $11, $11, $00
00647Cr 1  00 00 00 10  .byte $00, $00, $00, $10
006480r 1  00 00 00 10  .byte $00, $00, $00, $10
006484r 1  00 00 00 10  .byte $00, $00, $00, $10
006488r 1  00 00 00 00  .byte $00, $00, $00, $00
00648Cr 1               
00648Cr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 5
006490r 1  01 00 00 00  .byte $01, $00, $00, $00
006494r 1  01 00 00 00  .byte $01, $00, $00, $00
006498r 1  00 11 11 00  .byte $00, $11, $11, $00
00649Cr 1  00 00 00 10  .byte $00, $00, $00, $10
0064A0r 1  00 00 00 10  .byte $00, $00, $00, $10
0064A4r 1  00 00 00 10  .byte $00, $00, $00, $10
0064A8r 1  00 11 11 00  .byte $00, $11, $11, $00
0064ACr 1               
0064ACr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 6
0064B0r 1  01 00 00 00  .byte $01, $00, $00, $00
0064B4r 1  01 00 00 00  .byte $01, $00, $00, $00
0064B8r 1  00 11 11 00  .byte $00, $11, $11, $00
0064BCr 1  01 00 00 10  .byte $01, $00, $00, $10
0064C0r 1  01 00 00 10  .byte $01, $00, $00, $10
0064C4r 1  01 00 00 10  .byte $01, $00, $00, $10
0064C8r 1  00 11 11 00  .byte $00, $11, $11, $00
0064CCr 1               
0064CCr 1  00 01 01 00  .byte $00, $01, $01, $00 ; 7
0064D0r 1  00 00 00 10  .byte $00, $00, $00, $10
0064D4r 1  00 00 00 10  .byte $00, $00, $00, $10
0064D8r 1  00 00 00 00  .byte $00, $00, $00, $00
0064DCr 1  00 00 00 10  .byte $00, $00, $00, $10
0064E0r 1  00 00 00 10  .byte $00, $00, $00, $10
0064E4r 1  00 00 00 10  .byte $00, $00, $00, $10
0064E8r 1  00 00 00 00  .byte $00, $00, $00, $00
0064ECr 1               
0064ECr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 8
0064F0r 1  01 00 00 10  .byte $01, $00, $00, $10
0064F4r 1  01 00 00 10  .byte $01, $00, $00, $10
0064F8r 1  00 11 11 00  .byte $00, $11, $11, $00
0064FCr 1  01 00 00 10  .byte $01, $00, $00, $10
006500r 1  01 00 00 10  .byte $01, $00, $00, $10
006504r 1  01 00 00 10  .byte $01, $00, $00, $10
006508r 1  00 11 11 00  .byte $00, $11, $11, $00
00650Cr 1               
00650Cr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 9
006510r 1  01 00 00 10  .byte $01, $00, $00, $10
006514r 1  01 00 00 10  .byte $01, $00, $00, $10
006518r 1  00 11 11 00  .byte $00, $11, $11, $00
00651Cr 1  00 00 00 10  .byte $00, $00, $00, $10
006520r 1  00 00 00 10  .byte $00, $00, $00, $10
006524r 1  00 00 00 10  .byte $00, $00, $00, $10
006528r 1  00 11 11 00  .byte $00, $11, $11, $00
00652Cr 1               
00652Cr 1  00 11 11 00  .byte $00, $11, $11, $00   ; A
006530r 1  01 00 00 10  .byte $01, $00, $00, $10
006534r 1  01 00 00 10  .byte $01, $00, $00, $10
006538r 1  00 11 11 00  .byte $00, $11, $11, $00
00653Cr 1  01 00 00 10  .byte $01, $00, $00, $10
006540r 1  01 00 00 10  .byte $01, $00, $00, $10
006544r 1  01 00 00 10  .byte $01, $00, $00, $10
006548r 1  00 00 00 00  .byte $00, $00, $00, $00
00654Cr 1               
00654Cr 1               
00654Cr 1  00 00 00 00  .byte $00, $00, $00, $00   ; B
006550r 1  01 00 00 00  .byte $01, $00, $00, $00
006554r 1  01 00 00 00  .byte $01, $00, $00, $00
006558r 1  00 11 11 00  .byte $00, $11, $11, $00
00655Cr 1  01 00 00 10  .byte $01, $00, $00, $10
006560r 1  01 00 00 10  .byte $01, $00, $00, $10
006564r 1  01 00 00 10  .byte $01, $00, $00, $10
006568r 1  00 11 11 00  .byte $00, $11, $11, $00
00656Cr 1               
00656Cr 1  00 11 11 00  .byte $00, $11, $11, $00   ; C
006570r 1  01 00 00 00  .byte $01, $00, $00, $00
006574r 1  01 00 00 00  .byte $01, $00, $00, $00
006578r 1  00 00 00 00  .byte $00, $00, $00, $00
00657Cr 1  01 00 00 00  .byte $01, $00, $00, $00
006580r 1  01 00 00 00  .byte $01, $00, $00, $00
006584r 1  01 00 00 00  .byte $01, $00, $00, $00
006588r 1  00 11 11 00  .byte $00, $11, $11, $00
00658Cr 1               
00658Cr 1  00 00 00 00  .byte $00, $00, $00, $00   ; D
006590r 1  00 00 00 10  .byte $00, $00, $00, $10
006594r 1  00 00 00 10  .byte $00, $00, $00, $10
006598r 1  00 11 11 00  .byte $00, $11, $11, $00
00659Cr 1  01 00 00 10  .byte $01, $00, $00, $10
0065A0r 1  01 00 00 10  .byte $01, $00, $00, $10
0065A4r 1  01 00 00 10  .byte $01, $00, $00, $10
0065A8r 1  00 11 11 00  .byte $00, $11, $11, $00
0065ACr 1               
0065ACr 1  00 11 11 00  .byte $00, $11, $11, $00   ; E
0065B0r 1  01 00 00 00  .byte $01, $00, $00, $00
0065B4r 1  01 00 00 00  .byte $01, $00, $00, $00
0065B8r 1  00 11 11 00  .byte $00, $11, $11, $00
0065BCr 1  01 00 00 00  .byte $01, $00, $00, $00
0065C0r 1  01 00 00 00  .byte $01, $00, $00, $00
0065C4r 1  01 00 00 00  .byte $01, $00, $00, $00
0065C8r 1  00 11 11 00  .byte $00, $11, $11, $00
0065CCr 1               
0065CCr 1  00 11 11 00  .byte $00, $11, $11, $00   ; F   sprite addr 48
0065D0r 1  01 00 00 00  .byte $01, $00, $00, $00
0065D4r 1  01 00 00 00  .byte $01, $00, $00, $00
0065D8r 1  00 11 11 00  .byte $00, $11, $11, $00
0065DCr 1  01 00 00 00  .byte $01, $00, $00, $00
0065E0r 1  01 00 00 00  .byte $01, $00, $00, $00
0065E4r 1  01 00 00 00  .byte $01, $00, $00, $00
0065E8r 1  00 00 00 00  .byte $00, $00, $00, $00
0065ECr 1               
0065ECr 1               test_cell_sprite:    ;  is 16x64x16 bit = 512 bytes   sprite addr = 10
0065ECr 1               ;     01   23   45   67   89   AB   CD   EF
0065ECr 1  CC C9 CC C9  .byte $CC, $C9, $CC, $C9, $CC, $C9, $CC, $C0    ;  0
0065F0r 1  CC C9 CC C0  
0065F4r 1  09 9B 99 9B  .byte $09, $9B, $99, $9B, $99, $9B, $99, $9C    ;  1
0065F8r 1  99 9B 99 9C  
0065FCr 1  CB BC BB BC  .byte $CB, $BC, $BB, $BC, $BB, $BC, $BB, $B0    ;  2
006600r 1  BB BC BB B0  
006604r 1  0C C9 CC C9  .byte $0C, $C9, $CC, $C9, $CC, $C9, $CC, $CC    ;  3
006608r 1  CC C9 CC CC  
00660Cr 1  C9 9B 99 9B  .byte $C9, $9B, $99, $9B, $99, $9B, $99, $90    ;  4
006610r 1  99 9B 99 90  
006614r 1  0B BC BB BC  .byte $0B, $BC, $BB, $BC, $BB, $BC, $BB, $BC    ;  5
006618r 1  BB BC BB BC  
00661Cr 1  CC C9 CC C9  .byte $CC, $C9, $CC, $C9, $CC, $C9, $CC, $C0    ;  6
006620r 1  CC C9 CC C0  
006624r 1  09 9B 99 9B  .byte $09, $9B, $99, $9B, $99, $9B, $99, $9C    ;  7
006628r 1  99 9B 99 9C  
00662Cr 1  CB BC BB BC  .byte $CB, $BC, $BB, $BC, $BB, $BC, $BB, $B0    ;  8 ; 45* is 9.5 ..
006630r 1  BB BC BB B0  
006634r 1  0C 09 0C 09  .byte $0C, $09, $0C, $09, $0C, $09, $0C, $0C    ;  9
006638r 1  0C 09 0C 0C  
00663Cr 1  09 90 09 90  .byte $09, $90, $09, $90, $09, $90, $09, $90   ;  10
006640r 1  09 90 09 90  
006644r 1  0E 9E E9 9E  .byte $0E, $9E, $E9, $9E, $E9, $9E, $E9, $9E   ;  11
006648r 1  E9 9E E9 9E  
00664Cr 1               
00664Cr 1  EE EE EE EE  .repeat 13
006650r 1  EE EE EE E0  
006654r 1  0E EE 66 EE  
0067ECr 1                   .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $E0    ;  12
0067ECr 1                   .byte $0E, $EE, $66, $EE, $EE, $66, $EE, $EE    ;
0067ECr 1                   .byte $EE, $66, $EE, $66, $66, $EE, $66, $E0    ;
0067ECr 1                   .byte $06, $EE, $EE, $EE, $EE, $EE, $EE, $66    ;
0067ECr 1               .endrepeat
0067ECr 1               
0067ECr 1               test_border: ; 32
0067ECr 1  0B 0B 0B 0B  .repeat 64
0067F0r 1  B0 B0 B0 B0  
0067F4r 1  0B 0B 0B 0B  
0069ECr 1                  .res 4, $0B
0069ECr 1                  .res 4, $B0
0069ECr 1               .endrepeat
0069ECr 1               
0069ECr 1               test_cross_hair_8x8:    ;  8x8x16 color = 32 bytes ; sprite 96
0069ECr 1               ;     01   23   45   67
0069ECr 1  11 00 00 11  .byte $11, $00, $00, $11
0069F0r 1  10 00 00 01  .byte $10, $00, $00, $01
0069F4r 1  00 00 00 00  .byte $00, $00, $00, $00
0069F8r 1  00 01 10 00  .byte $00, $01, $10, $00
0069FCr 1  00 01 10 00  .byte $00, $01, $10, $00
006A00r 1  00 00 00 00  .byte $00, $00, $00, $00
006A04r 1  10 00 00 01  .byte $10, $00, $00, $01
006A08r 1  11 00 00 11  .byte $11, $00, $00, $11
006A0Cr 1               
006A0Cr 1  00 00 00 00  .byte $00, $00, $00, $00  ;  bearing label   sprite addr 97
006A10r 1  00 00 01 00  .byte $00, $00, $01, $00
006A14r 1  00 00 10 00  .byte $00, $00, $10, $00
006A18r 1  00 01 00 00  .byte $00, $01, $00, $00
006A1Cr 1  00 10 00 00  .byte $00, $10, $00, $00
006A20r 1  01 00 00 00  .byte $01, $00, $00, $00
006A24r 1  11 11 11 00  .byte $11, $11, $11, $00
006A28r 1  00 00 00 00  .byte $00, $00, $00, $00
006A2Cr 1               
006A2Cr 1               ; cell position label sprite addr 50-57
006A2Cr 1  00 FF 00 FF  .byte $00,$FF,$00,$FF,$FF,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
006A30r 1  FF 00 FF 00  
006A34r 1  00 FF 00 00  
006A4Cr 1  FF 00 00 FF  .byte $FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
006A50r 1  00 00 FF 00  
006A54r 1  00 FF 00 00  
006A6Cr 1  FF 00 00 FF  .byte $FF,$00,$00,$FF,$FF,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
006A70r 1  FF 00 FF 00  
006A74r 1  00 FF 00 00  
006A8Cr 1  FF 00 00 FF  .byte $FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
006A90r 1  00 00 FF 00  
006A94r 1  00 FF 00 00  
006AACr 1  00 FF 00 FF  .byte $00,$FF,$00,$FF,$FF,$00,$FF,$FF,$00,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
006AB0r 1  FF 00 FF FF  
006AB4r 1  00 FF FF 00  
006ACCr 1               ;      01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF
006ACCr 1               ;     XH                               $XL                            ___  __  YH                              YL
006ACCr 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$00,$00,$10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00
006AD0r 1  00 00 00 00  
006AD4r 1  10 10 10 00  
006AECr 1  01 00 11 10  .byte $01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00
006AF0r 1  00 00 00 00  
006AF4r 1  01 00 10 00  
006B0Cr 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$11,$10,$00,$00,$00,$00,$00,$00,$01,$00,$10,$10,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00
006B10r 1  00 00 00 00  
006B14r 1  10 10 11 10  
006B2Cr 1               
006B2Cr 1               ; world position label 58-65
006B2Cr 1               ;     XH                 $XL                  ___  ___  YH                  YL
006B2Cr 1  FF 00 00 00  .byte $FF,$00,$00,$00,$FF,$00,$00,$FF,$00,$00,$FF,$FF,$00,$00,$FF,$00,$00,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
006B30r 1  FF 00 00 FF  
006B34r 1  00 00 FF FF  
006B4Cr 1  FF 00 00 00  .byte $FF,$00,$00,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$00,$FF,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
006B50r 1  FF 00 FF 00  
006B54r 1  FF 00 FF 00  
006B6Cr 1  FF 00 FF 00  .byte $FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$FF,$00,$00,$FF,$00,$00,$FF,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
006B70r 1  FF 00 FF 00  
006B74r 1  FF 00 FF FF  
006B8Cr 1  FF 00 FF 00  .byte $FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$00,$FF,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
006B90r 1  FF 00 FF 00  
006B94r 1  FF 00 FF 00  
006BACr 1  00 FF 00 FF  .byte $00,$FF,$00,$FF,$00,$00,$00,$FF,$00,$00,$FF,$00,$FF,$00,$FF,$FF,$00,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
006BB0r 1  00 00 00 FF  
006BB4r 1  00 00 FF 00  
006BCCr 1               ;      01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF
006BCCr 1               ;     XH                               $XL                            ___  __  YH                              YL
006BCCr 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$00,$00,$10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00
006BD0r 1  00 00 00 00  
006BD4r 1  10 10 10 00  
006BECr 1  01 00 11 10  .byte $01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00
006BF0r 1  00 00 00 00  
006BF4r 1  01 00 10 00  
006C0Cr 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$11,$10,$00,$00,$00,$00,$00,$00,$01,$00,$10,$10,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00
006C10r 1  00 00 00 00  
006C14r 1  10 10 11 10  
006C2Cr 1               
006C2Cr 1               ; directional cursor reminder... 16x16 - 66-69
006C2Cr 1  00 10 00 10  .byte $00, $10, $00, $10, $01, $11, $11, $00
006C30r 1  01 11 11 00  
006C34r 1  00 10 00 10  .byte $00, $10, $00, $10, $01, $00, $00, $00
006C38r 1  01 00 00 00  
006C3Cr 1  00 10 10 10  .byte $00, $10, $10, $10, $01, $11, $00, $00
006C40r 1  01 11 00 00  
006C44r 1  00 10 10 10  .byte $00, $10, $10, $10, $01, $00, $00, $00
006C48r 1  01 00 00 00  
006C4Cr 1  00 01 01 00  .byte $00, $01, $01, $00, $01, $11, $11, $00
006C50r 1  01 11 11 00  
006C54r 1  00 00 00 00  .byte $00, $00, $00, $00, $00, $00, $00, $00
006C58r 1  00 00 00 00  
006C5Cr 1  01 11 00 00  .byte $01, $11, $00, $00, $00, $01, $11, $00
006C60r 1  00 01 11 00  
006C64r 1  10 00 10 01  .byte $10, $00, $10, $01, $10, $01, $00, $01
006C68r 1  10 01 00 01  
006C6Cr 1  11 11 10 01  .byte $11, $11, $10, $01, $10, $01, $00, $01
006C70r 1  10 01 00 01  
006C74r 1  10 00 10 00  .byte $10, $00, $10, $00, $00, $01, $11, $10
006C78r 1  00 01 11 10  
006C7Cr 1  00 00 00 00  .byte $00, $00, $00, $00, $00, $00, $00, $00
006C80r 1  00 00 00 00  
006C84r 1  00 11 11 10  .byte $00, $11, $11, $10, $01, $00, $01, $00
006C88r 1  01 00 01 00  
006C8Cr 1  00 00 01 00  .byte $00, $00, $01, $00, $00, $10, $10, $00
006C90r 1  00 10 10 00  
006C94r 1  00 00 10 00  .byte $00, $00, $10, $00, $00, $01, $00, $00
006C98r 1  00 01 00 00  
006C9Cr 1  00 01 00 00  .byte $00, $01, $00, $00, $00, $10, $10, $00
006CA0r 1  00 10 10 00  
006CA4r 1  00 11 11 10  .byte $00, $11, $11, $10, $01, $00, $01, $00
006CA8r 1  01 00 01 00  
006CABr 1               
