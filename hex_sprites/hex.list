ca65 V2.19 - Git 8e6c0c1
Main file   : hex.s
Current file: hex.s

000000r 1               ; 	080D
000000r 1  4C rr rr     jmp start ; 	3 bytes
000003r 1               ;	0810 	- 240 bytes available for stuff that doesn't need alignment
000003r 1  DE AD BE EF  .repeat 28
000007r 1  DE AD BE EF  
00000Br 1  DE AD BE EF  
000073r 1               	.byte $DE,$AD,$BE,$EF
000073r 1               .endrepeat
000073r 1               SCRATCH128:
000073r 1  DE AD BE EF  .repeat 32
000077r 1  DE AD BE EF  
00007Br 1  DE AD BE EF  
0000F3r 1               	.byte $DE,$AD,$BE,$EF
0000F3r 1               .endrepeat
0000F3r 1               
0000F3r 1               ACROSS_ROW_X_H: ; 0900  16 wide , 45* tilt
0000F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0000F3r 1  10 0F 0F 0F  .byte $10, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $E, $E, $E, $E, $E, $E, $D, $D, $D, $D, $D, $C, $C, $C, $C, $B, $B, $B, $B, $A, $A, $A, $9, $9, $9, $8, $8, $8, $7, $7, $7, $6, $6, $6, $5, $5, $5, $4, $4, $3, $3, $3, $2, $2, $1, $1, $1, $0, $0, $0, $FF, $FF, $FE, $FE, $FE, $FD, $FD, $FC, $FC, $FC, $FB, $FB, $FA, $FA, $FA, $F9, $F9, $F9, $F8, $F8, $F8, $F7, $F7, $F7, $F6, $F6, $F6, $F5, $F5, $F5, $F4, $F4, $F4, $F4, $F3, $F3, $F3, $F3, $F2, $F2, $F2, $F2, $F2, $F1, $F1, $F1, $F1, $F1, $F1, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F1, $F1, $F1, $F1, $F1, $F1, $F2, $F2, $F2, $F2, $F2, $F3, $F3, $F3, $F3, $F4, $F4, $F4, $F4, $F5, $F5, $F5, $F6, $F6, $F6, $F7, $F7, $F7, $F8, $F8, $F8, $F9, $F9, $F9, $FA, $FA, $FA, $FB, $FB, $FC, $FC, $FC, $FD, $FD, $FE, $FE, $FE, $FF, $FF, $00, $0, $0, $1, $1, $1, $2, $2, $3, $3, $3, $4, $4, $5, $5, $5, $6, $6, $6, $7, $7, $7, $8, $8, $8, $9, $9, $9, $A, $A, $A, $B, $B, $B, $B, $C, $C, $C, $C, $D, $D, $D, $D, $D, $E, $E, $E, $E, $E, $E, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F, $F
0000F7r 1  0F 0F 0F 0F  
0000FBr 1  0F 0F 0F 0F  
0001F3r 1               
0001F3r 1               ACROSS_ROW_X_L: ; 0A00
0001F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0001F3r 1  00 FE FB F4  .byte
0001F7r 1  EC E1 D3 C3  
0001FBr 1  B1 9C 85 6B  
0002F3r 1               
0002F3r 1               ACROSS_ROW_Y_H: ; 0B00
0002F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0002F3r 1  00 00 00 00  .byte
0002F7r 1  01 01 01 01  
0002FBr 1  02 02 02 03  
0003F3r 1               
0003F3r 1               ACROSS_ROW_Y_L: ; 0C00
0003F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0003F3r 1  00 47 8E D5  .byte $0, $47, $8E, $D5, $1B, $62, $A8, $EF, $35, $7A, $BF, $4, $48, $8C, $CF, $12, $54, $95, $D6, $16, $55, $93, $D1, $D, $49, $83, $BD, $F5, $2D, $63, $99, $CD, $0, $31, $62, $91, $BE, $EB, $16, $3F, $68, $8E, $B4, $D8, $FA, $1B, $3A, $57, $73, $8E, $A7, $BE, $D3, $E7, $F9, $9, $18, $25, $30, $3A, $42, $48, $4C, $4F, $50, $4F, $4C, $48, $42, $3A, $30, $25, $18, $9, $F9, $E7, $D3, $BE, $A7, $8E, $73, $57, $3A, $1B, $FA, $D8, $B4, $8E, $68, $3F, $16, $EB, $BE, $91, $62, $31, $0, $CD, $99, $63, $2D, $F5, $BD, $83, $49, $D, $D1, $93, $55, $16, $D6, $95, $54, $12, $CF, $8C, $48, $4, $BF, $7A, $35, $EF, $A8, $62, $1B, $D5, $8E, $47, $0, $B8, $71, $2A, $E4, $9D, $57, $10, $CA, $85, $40, $FB, $B7, $73, $30, $ED, $AB, $6A, $29, $E9, $AA, $6C, $2E, $F2, $B6, $7C, $42, $A, $D2, $9C, $66, $32, $0, $CE, $9D, $6E, $41, $14, $E9, $C0, $97, $71, $4B, $27, $5, $E4, $C5, $A8, $8C, $71, $58, $41, $2C, $18, $6, $F6, $E7, $DA, $CF, $C5, $BD, $B7, $B3, $B0, $AF, $B0, $B3, $B7, $BD, $C5, $CF, $DA, $E7, $F6, $6, $18, $2C, $41, $58, $71, $8C, $A8, $C5, $E4, $5, $27, $4B, $71, $97, $C0, $E9, $14, $41, $6E, $9D, $CE, $0, $32, $66, $9C, $D2, $A, $42, $7C, $B6, $F2, $2E, $6C, $AA, $E9, $29, $6A, $AB, $ED, $30, $73, $B7, $FB, $40, $85, $CA, $10, $57, $9D, $E4, $2A, $71, $B8
0003F7r 1  1B 62 A8 EF  
0003FBr 1  35 7A BF 04  
0004F3r 1               
0004F3r 1               NEXT_ROW_X_H: ; 0D00
0004F3r 1  F8 F7 F7 F7  .byte
0004F7r 1  F6 F6 F6 F5  
0004FBr 1  F5 F5 F4 F4  
0005F3r 1               
0005F3r 1               NEXT_ROW_X_L: ; 0E00
0005F3r 1  00 A9 54 00  .byte
0005F7r 1  AE 5D 0D BF  
0005FBr 1  73 28 DF 98  
0006F3r 1               
0006F3r 1               NEXT_ROW_Y_H: ; 0F00
0006F3r 1  09 09 09 09  .byte $9, $9, $9, $9, $9, $9, $8, $8, $8, $8, $8, $7, $7, $7, $7, $7, $6, $6, $6, $6, $5, $5, $5, $5, $5, $4, $4, $4, $3, $3, $3, $3, $2, $2, $2, $2, $1, $1, $1, $1, $0, $0, $0, $FF, $FF, $FF, $FF, $FE, $FE, $FE, $FD, $FD, $FD, $FD, $FC, $FC, $FC, $FC, $FB, $FB, $FB, $FB, $FA, $FA, $FA, $FA, $F9, $F9, $F9, $F9, $F8, $F8, $F8, $F8, $F8, $F7, $F7, $F7, $F7, $F7, $F7, $F6, $F6, $F6, $F6, $F6, $F6, $F5, $F5, $F5, $F5, $F5, $F5, $F5, $F5, $F5, $F5, $F5, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F4, $F5, $F5, $F5, $F5, $F5, $F5, $F5, $F5, $F5, $F5, $F6, $F6, $F6, $F6, $F6, $F6, $F6, $F7, $F7, $F7, $F7, $F7, $F8, $F8, $F8, $F8, $F8, $F9, $F9, $F9, $F9, $FA, $FA, $FA, $FA, $FA, $FB, $FB, $FB, $FC, $FC, $FC, $FC, $FD, $FD, $FD, $FD, $FE, $FE, $FE, $FE, $FF, $FF, $FF, $0, $0, $0, $0, $1, $1, $1, $2, $2, $2, $2, $3, $3, $3, $3, $4, $4, $4, $4, $5, $5, $5, $5, $6, $6, $6, $6, $7, $7, $7, $7, $7, $8, $8, $8, $8, $8, $8, $9, $9, $9, $9, $9, $9, $A, $A, $A, $A, $A, $A, $A, $A, $A, $A, $A, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B, $B, $A, $A, $A, $A, $A, $A, $A, $A, $A, $A, $9
0006F7r 1  09 09 08 08  
0006FBr 1  08 08 08 07  
0007F3r 1               
0007F3r 1               NEXT_ROW_Y_L: ; 1000
0007F3r 1  CC A7 82 5A  .byte
0007F7r 1  32 08 DC AF  
0007FBr 1  81 52 21 EF  
0008F3r 1               
0008F3r 1               WORLD_TO_CELL_XH:
0008F3r 1  00 00 01 02  .byte 0,0,1,2,3,4,5,6,6,7,8,9,10,11,12,12,13,14,15,16,17,18,19,19,20,21,22,23,24,25,25,26,27,28,29,30,31,32,32,33,34,35,36,37,38,38,39,40,41,42,43,44,45,45,46,47,48,49,50,51,51,52,53,54,55,56,57,58,58,59,60,61,62,63,64,64,65,66,67,68,69,70,71,71,72,73,74,75,76,77,77,78,79,80,81,82,83,84,84,85,86,87,88,89,90,90,91,92,93,94,95,96,96,97,98,99,100,101,102,103,103,104,105,106,107,108,109,109
0008F7r 1  03 04 05 06  
0008FBr 1  06 07 08 09  
000973r 1               WORLD_TO_CELL_XL:
000973r 1  00 DD BB 99  .byte 0,221,187,153,118,84,50,15,237,203,169,134,100,66,31,253,219,184,150,116,82,47,13,235,200,166,132,97,63,29,251,216,182,148,113,79,45,10,232,198,164,129,95,61,26,248,214,180,145,111,77,42,8,230,195,161,127,93,58,24,246,211,177,143,108,74,40,6,227,193,159,124,90,56,21,243,209,175,140,106,72,37,3,225,191,156,122,88,53,19,241,206,172,138,104,69,35,1,222,188,154,119,85,51,17,238,204,170,135,101,67,32,254,220,186,151,117,83,48,14,236,202,167,133,99,64,30,252
000977r 1  76 54 32 0F  
00097Br 1  ED CB A9 86  
0009F3r 1               
0009F3r 1               CELL_TO_WORLD_XH:
0009F3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,8,9,10,11,12,13,15,16,17,18,19,20,21,23,24,25,26,27,28,30,31,32,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,50,51,53,54,55,56,57,58,60,61,62,63,64,65,66,68,69,70,71,72,73,75,76,77,78,79,80,81,83,84,85,86,87,88,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,112,113,114,115,116,117,118,120,121,122,123,124,125,127,128,129,130,131,132,133,135,136,137,138,139,140,142,143,144,145,146
0009F7r 1  04 05 06 08  
0009FBr 1  09 0A 0B 0C  
000A73r 1               CELL_TO_WORLD_XL:
000A73r 1  00 27 4F 76  .byte 0,39,79,118,158,198,237,21,60,100,140,179,219,2,42,82,121,161,200,240,24,63,103,142,182,222,5,45,84,124,164,203,243,26,66,106,145,185,224,8,48,87,127,166,206,246,29,69,108,148,188,227,11,50,90,130,169,209,248,32,72,111,151,191,230,14,53,93,133,172,212,251,35,75,114,154,193,233,17,56,96,135,175,215,254,38,77,117,157,196,236,19,59,99,138,178,217,1,41,80,120,159,199,239,22,62,101,141,181,220,4,43,83,123,162,202,241,25,65,104,144,184,223,7,46,86,126,165
000A77r 1  9E C6 ED 15  
000A7Br 1  3C 64 8C B3  
000AF3r 1               
000AF3r 1               CELL_LOW_TO_WORLD_XH:
000AF3r 1  00 00 00 00  .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
000AF7r 1  00 00 00 00  
000AFBr 1  00 00 00 00  
000BF3r 1               CELL_LOW_TO_WORLD_XL:
000BF3r 1  00 01 02 03  .byte 0,1,2,3,4,5,6,8,9,10,11,12,13,15,16,17,18,19,20,21,23,24,25,26,27,28,30,31,32,33,34,35,36,38,39,40,41,42,43,45,46,47,48,49,50,51,53,54,55,56,57,58,60,61,62,63,64,65,66,68,69,70,71,72,73,75,76,77,78,79,80,81,83,84,85,86,87,88,90,91,92,93,94,95,96,98,99,100,101,102,103,105,106,107,108,109,110,112,113,114,115,116,117,118,120,121,122,123,124,125,127,128,129,130,131,132,133,135,136,137,138,139,140,142,143,144,145,146,147,148,150,151,152,153,154,155,157,158,159,160,161,162,163,165,166,167,168,169,170,172,173,174,175,176,177,178,180,181,182,183,184,185,187,188,189,190,191,192,193,195,196,197,198,199,200,202,203,204,205,206,207,209,210,211,212,213,214,215,217,218,219,220,221,222,224,225,226,227,228,229,230,232,233,234,235,236,237,239,240,241,242,243,244,245,247,248,249,250,251,252,254,255,0,1,2,3,4,6,7,8,9,10,11,13,14,15,16,17,18,19,21,22,23,24,25,26,28,29,30,31,32,33,34,36,37,38
000BF7r 1  04 05 06 08  
000BFBr 1  09 0A 0B 0C  
000CF3r 1               
000CF3r 1               MOVE_XH:
000CF3r 1  00 00 00 00  .res 256,0
000CF7r 1  00 00 00 00  
000CFBr 1  00 00 00 00  
000DF3r 1               MOVE_XL:
000DF3r 1  00 00 00 00  .res 256,0
000DF7r 1  00 00 00 00  
000DFBr 1  00 00 00 00  
000EF3r 1               MOVE_YH:
000EF3r 1  00 00 00 00  .res 256,0
000EF7r 1  00 00 00 00  
000EFBr 1  00 00 00 00  
000FF3r 1               MOVE_YL:
000FF3r 1  00 00 00 00  .res 256,0
000FF7r 1  00 00 00 00  
000FFBr 1  00 00 00 00  
0010F3r 1               
0010F3r 1               SPRITE_NUM_HIGH_NIBBLE:
0010F3r 1  21 21 21 21  .res 16, 33
0010F7r 1  21 21 21 21  
0010FBr 1  21 21 21 21  
001103r 1  22 22 22 22  .res 16, 34
001107r 1  22 22 22 22  
00110Br 1  22 22 22 22  
001113r 1  23 23 23 23  .res 16, 35
001117r 1  23 23 23 23  
00111Br 1  23 23 23 23  
001123r 1  24 24 24 24  .res 16, 36
001127r 1  24 24 24 24  
00112Br 1  24 24 24 24  
001133r 1  25 25 25 25  .res 16, 37
001137r 1  25 25 25 25  
00113Br 1  25 25 25 25  
001143r 1  26 26 26 26  .res 16, 38
001147r 1  26 26 26 26  
00114Br 1  26 26 26 26  
001153r 1  27 27 27 27  .res 16, 39
001157r 1  27 27 27 27  
00115Br 1  27 27 27 27  
001163r 1  28 28 28 28  .res 16, 40
001167r 1  28 28 28 28  
00116Br 1  28 28 28 28  
001173r 1  29 29 29 29  .res 16, 41
001177r 1  29 29 29 29  
00117Br 1  29 29 29 29  
001183r 1  2A 2A 2A 2A  .res 16, 42
001187r 1  2A 2A 2A 2A  
00118Br 1  2A 2A 2A 2A  
001193r 1  2B 2B 2B 2B  .res 16, 43
001197r 1  2B 2B 2B 2B  
00119Br 1  2B 2B 2B 2B  
0011A3r 1  2C 2C 2C 2C  .res 16, 44
0011A7r 1  2C 2C 2C 2C  
0011ABr 1  2C 2C 2C 2C  
0011B3r 1  2D 2D 2D 2D  .res 16, 45
0011B7r 1  2D 2D 2D 2D  
0011BBr 1  2D 2D 2D 2D  
0011C3r 1  2E 2E 2E 2E  .res 16, 46
0011C7r 1  2E 2E 2E 2E  
0011CBr 1  2E 2E 2E 2E  
0011D3r 1  2F 2F 2F 2F  .res 16, 47
0011D7r 1  2F 2F 2F 2F  
0011DBr 1  2F 2F 2F 2F  
0011E3r 1  30 30 30 30  .res 16, 48
0011E7r 1  30 30 30 30  
0011EBr 1  30 30 30 30  
0011F3r 1               
0011F3r 1               SPRITE_NUM_LOW_NIBBLE:
0011F3r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
0011F7r 1  25 26 27 28  
0011FBr 1  29 2A 2B 2C  
001203r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
001207r 1  25 26 27 28  
00120Br 1  29 2A 2B 2C  
001213r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
001217r 1  25 26 27 28  
00121Br 1  29 2A 2B 2C  
001223r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
001227r 1  25 26 27 28  
00122Br 1  29 2A 2B 2C  
001233r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
001237r 1  25 26 27 28  
00123Br 1  29 2A 2B 2C  
001243r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
001247r 1  25 26 27 28  
00124Br 1  29 2A 2B 2C  
001253r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
001257r 1  25 26 27 28  
00125Br 1  29 2A 2B 2C  
001263r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
001267r 1  25 26 27 28  
00126Br 1  29 2A 2B 2C  
001273r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
001277r 1  25 26 27 28  
00127Br 1  29 2A 2B 2C  
001283r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
001287r 1  25 26 27 28  
00128Br 1  29 2A 2B 2C  
001293r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
001297r 1  25 26 27 28  
00129Br 1  29 2A 2B 2C  
0012A3r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
0012A7r 1  25 26 27 28  
0012ABr 1  29 2A 2B 2C  
0012B3r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
0012B7r 1  25 26 27 28  
0012BBr 1  29 2A 2B 2C  
0012C3r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
0012C7r 1  25 26 27 28  
0012CBr 1  29 2A 2B 2C  
0012D3r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
0012D7r 1  25 26 27 28  
0012DBr 1  29 2A 2B 2C  
0012E3r 1  21 22 23 24  .byte 33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48
0012E7r 1  25 26 27 28  
0012EBr 1  29 2A 2B 2C  
0012F3r 1               
0012F3r 1               TUB_WORLD:
0012F3r 1               .include "tub_world.inc"
0012F3r 2               ; 0 to 128 will be water level. >128 = distance along row to water (neg) , 128 = no water this row.
0012F3r 2               ; rows are stored within 64 byte rows
0012F3r 2               ; 	                                                              0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62  63
0012F3r 2  80 80 80 80  .byte                                                             $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80  ; 00 - tub
0012F7r 2  80 80 80 80  
0012FBr 2  80 80 80 80  
001333r 2  80 80 80 FC  .byte                                                           $80,$80,$80,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4,$F3,$F2,$F1,$F0,$EF,$EE,$ED,$EC,$EB  ; 01
001337r 2  FD FE FF 00  
00133Br 2  00 00 00 00  
001373r 2  80 80 80 FD  .byte                                                         $80,$80,$80,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4,$F3,$F2,$F1,$F0,$EF,$EE,$ED  ; 2
001377r 2  FE FF 00 00  
00137Br 2  00 00 00 00  
0013B3r 2  80 80 80 FE  .byte                                                       $80,$80,$80,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4,$F3,$F2,$F1,$F0,$EF  ; 3
0013B7r 2  FF 00 00 00  
0013BBr 2  00 00 00 00  
0013F3r 2  80 80 FE FF  .byte                                                     $80,$80,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4,$F3,$F2,$F1  ; 4
0013F7r 2  00 00 00 00  
0013FBr 2  00 00 00 00  
001433r 2  80 80 FE FF  .byte                                                   $80,$80,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4,$F3,$F2  ; 5
001437r 2  00 00 00 00  
00143Br 2  00 00 00 00  
001473r 2  80 80 FE FF  .byte                                                 $80,$80,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4,$F3 ; 6
001477r 2  00 00 00 00  
00147Br 2  00 00 00 00  
0014B3r 2  80 80 FE FF  .byte                                               $80,$80,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5,$F4 ; 7
0014B7r 2  00 00 00 00  
0014BBr 2  00 00 00 00  
0014F3r 2  80 80 FE FF  .byte                                             $80,$80,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6,$F5 ; 8
0014F7r 2  00 00 00 00  
0014FBr 2  00 00 00 00  
001533r 2  80 80 FE FF  .byte                                           $80,$80,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6 ; 9
001537r 2  00 00 00 00  
00153Br 2  00 00 00 00  
001573r 2  80 80 80 FE  .byte                                         $80,$80,$80,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6 ; 10
001577r 2  FF 00 00 00  
00157Br 2  00 00 00 00  
0015B3r 2  80 80 80 FE  .byte                                       $80,$80,$80,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7,$F6 ; 11
0015B7r 2  FF 00 00 00  
0015BBr 2  00 00 00 00  
0015F3r 2  FA FB FC FD  .byte                                     $FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8,$F7 ; 12
0015F7r 2  FE FF 00 00  
0015FBr 2  00 00 00 00  
001633r 2  FA FB FC FD  .byte                                   $FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8 ; 13
001637r 2  FE FF 00 00  
00163Br 2  00 00 00 00  
001673r 2  FA FB FC FD  .byte                                 $FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8 ; 14
001677r 2  FE FF 00 00  
00167Br 2  00 00 00 00  
0016B2r 2  F9 FA FB FC  .byte                               $F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9 ; 15
0016B6r 2  FD FE FF 00  
0016BAr 2  00 00 00 00  
0016F2r 2  80 80 80 FB  .byte                             $80,$80,$80,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9 ; 16
0016F6r 2  FC FD FE FF  
0016FAr 2  00 00 00 00  
001732r 2  80 80 80 FB  .byte                           $80,$80,$80,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA ; 17
001736r 2  FC FD FE FF  
00173Ar 2  00 00 00 00  
001772r 2  80 80 80 FC  .byte                         $80,$80,$80,$FC,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA ; 18
001776r 2  FB FC FD FE  
00177Ar 2  FF 00 00 00  
0017B2r 2  80 80 80 FA  .byte                       $80,$80,$80,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB ; 19
0017B6r 2  FB FC FD FE  
0017BAr 2  FF 00 00 00  
0017F2r 2  80 80 80 F9  .byte                     $80,$80,$80,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB ; 20
0017F6r 2  FA FB FC FD  
0017FAr 2  FE FF 00 00  
001832r 2  80 80 80 F9  .byte                   $80,$80,$80,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC ; 21
001836r 2  FA FB FC FD  
00183Ar 2  FE FF 00 00  
001872r 2  80 80 80 F8  .byte                 $80,$80,$80,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC ; 22
001876r 2  F9 FA FB FC  
00187Ar 2  FD FE FF 00  
0018B2r 2  80 80 80 F7  .byte               $80,$80,$80,$F7,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC ; 23
0018B6r 2  F8 F9 FA FB  
0018BAr 2  FC FD FE FF  
0018F2r 2  80 80 80 F6  .byte             $80,$80,$80,$F6,$F7,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC ; 24
0018F6r 2  F7 F8 F9 FA  
0018FAr 2  FB FC FD FE  
001932r 2  80 80 80 F5  .byte           $80,$80,$80,$F5,$F6,$F7,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC ; 25
001936r 2  F6 F7 F8 F9  
00193Ar 2  FA FB FC FD  
001972r 2  80 80 80 F4  .byte         $80,$80,$80,$F4,$F5,$F6,$F7,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB ; 26
001976r 2  F5 F6 F7 F8  
00197Ar 2  F9 FA FB FC  
0019B2r 2  80 80 80 F2  .byte       $80,$80,$80,$F2,$F3,$F4,$F5,$F6,$F7,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA ; 27
0019B6r 2  F3 F4 F5 F6  
0019BAr 2  F7 F8 F9 FA  
0019F2r 2  80 80 80 F0  .byte     $80,$80,$80,$F0,$F1,$F2,$F3,$F4,$F5,$F6,$F7,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9 ; 28
0019F6r 2  F1 F2 F3 F4  
0019FAr 2  F5 F6 F7 F8  
001A32r 2  80 80 80 EE  .byte   $80,$80,$80,$EE,$EF,$F0,$F1,$F2,$F3,$F4,$F5,$F6,$F7,$F8,$F9,$FA,$FB,$FC,$FD,$FE,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FE,$FD,$FC,$FB,$FA,$F9,$F8 ; 29
001A36r 2  EF F0 F1 F2  
001A3Ar 2  F3 F4 F5 F6  
001A72r 2  80 80 80 80  .byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80  ; 30
001A76r 2  80 80 80 80  
001A7Ar 2  80 80 80 80  
001AB2r 2               
001AB2r 2               
001AB2r 2               
001AB2r 1               ;constants
001AB2r 1               
001AB2r 1               ; RAM Interrupt Vectors
001AB2r 1               IRQVec            = $0314
001AB2r 1               
001AB2r 1               ; VERA
001AB2r 1               VERA_addr_low     = $9F20
001AB2r 1               VERA_addr_high    = $9F21
001AB2r 1               VERA_addr_bank    = $9F22
001AB2r 1               VERA_data0        = $9F23
001AB2r 1               VERA_data1        = $9F24
001AB2r 1               VERA_ctrl         = $9F25
001AB2r 1               VERA_ien          = $9F26
001AB2r 1               VERA_isr          = $9F27
001AB2r 1               VERA_dc_video     = $9F29 ; DCSEL = 0
001AB2r 1               ;   Current Field | Sprites Enable | Layer1 Enable  |Layer0 Enable
001AB2r 1               ; NTSC/RGB: 240P  | NTSC: Chroma Disable / RGB: HV Sync Output Mode
001AB2r 1               
001AB2r 1               VERA_dc_hscale    = $9F2A
001AB2r 1               VERA_dc_vscale    = $9F2B
001AB2r 1               
001AB2r 1               VERA_L0_config    = $9F2D
001AB2r 1               ;   7       6     5   4       3       2             1   0
001AB2r 1               ;   Map Height | Map Width | T256C | Bitmap Mode | Color Depth
001AB2r 1               ;   0 - 32                  0 - 16    0 tiled       0   1bpp mono
001AB2r 1               ;   1 - 64                  1 - 256   1 enabled     1   2bpp 4 color
001AB2r 1               ;   2 - 128                                         2   4bpp 16 color
001AB2r 1               ;   3 - 256                                         3   8bpp 256 color
001AB2r 1               ;   bitmap mode - tilebase points to bitmap data, mapbase not used
001AB2r 1               ;   tile width = 0 is 320 pixels / tile width=1 is 640 pixels.. so could do 4bpp x 320?
001AB2r 1               ;   The palette offset (in 'H-Scroll (11:8)') modifies the color indexes of the bitmap in the same way as in the tile modes.
001AB2r 1               
001AB2r 1               VERA_L0_mapbase   = $9F2E
001AB2r 1               VERA_L0_tilebase  = $9F2F ;   Tile Base Address (16:11) | Tile Height 0-8/1-16 | Tile Width 0-8/1-16
001AB2r 1               VERA_L0_HSCROLL_L = $9F30 ;  H-Scroll (7:0)
001AB2r 1               VERA_L0_HSCROLL_H = $9F31 ;  - H-Scroll (11:8)
001AB2r 1               VERA_L0_VSCROLL_L = $9F32 ;  V-Scroll (7:0)
001AB2r 1               VERA_L0_VSCROLL_H = $9F33 ;  - V-Scroll (11:8)
001AB2r 1               
001AB2r 1               VERA_L1_config    = $9F34
001AB2r 1               VERA_L1_mapbase   = $9F35
001AB2r 1               VERA_L1_tilebase  = $9F36
001AB2r 1               VERA_L1_HSCROLL_L = $9F37 ;  H-Scroll (7:0)
001AB2r 1               VERA_L1_HSCROLL_H = $9F38 ;  - H-Scroll (11:8)
001AB2r 1               VERA_L1_VSCROLL_L = $9F39 ;  V-Scroll (7:0)
001AB2r 1               VERA_L1_VSCROLL_H = $9F3A ;  - V-Scroll (11:8)
001AB2r 1               
001AB2r 1               VSYNC_BIT         = $01
001AB2r 1               
001AB2r 1               ; VRAM Addresses
001AB2r 1               ;   Address range Description
001AB2r 1               ;   $00000 - $1F9BF Video RAM   - 129,424 bytes -> 126K is 129,024 (1F800)
001AB2r 1               ;   $1F9C0 - $1F9FF PSG registers
001AB2r 1               ;   $1FA00 - $1FBFF Palette
001AB2r 1               ;   $1FC00 - $1FFFF Sprite attributes
001AB2r 1               
001AB2r 1               VRAM_UNRESERVED   = $1A000      ;
001AB2r 1               ; sprite starts must be 32byte aligned...
001AB2r 1               ; only can go to 126K ...
001AB2r 1               VRAM_palette      = $1FA00      ;
001AB2r 1               VRAM_sprite_attributes = $1FC00
001AB2r 1               
001AB2r 1               SPRITES_ONLY_VGA = $41
001AB2r 1               
001AB2r 1               
001AB2r 1               
001AB2r 1               ; Kernal
001AB2r 1               CHROUT            = $FFD2
001AB2r 1               GETIN             = $FFE4
001AB2r 1               CINT              = $FF81
001AB2r 1               
001AB2r 1               
001AB2r 1               ; PETSCII Codes
001AB2r 1               WHITE             = $05
001AB2r 1               RETURN            = $0D
001AB2r 1               SPACE             = $20
001AB2r 1               ZERO_CHAR         = $30
001AB2r 1               SIX_CHAR          = $36
001AB2r 1               NINE_CHAR         = $39
001AB2r 1               
001AB2r 1               A_CHAR            = $41
001AB2r 1               C_CHAR            = $43
001AB2r 1               D_CHAR            = $44
001AB2r 1               E_CHAR            = $45
001AB2r 1               I_CHAR            = $49
001AB2r 1               O_CHAR            = $4F
001AB2r 1               T_CHAR            = $54
001AB2r 1               W_CHAR            = $57
001AB2r 1               X_CHAR            = $58
001AB2r 1               Y_CHAR            = $59
001AB2r 1               Z_CHAR            = $5A
001AB2r 1               
001AB2r 1               CLR               = $93
001AB2r 1               
001AB2r 1               ; 	$0800-$9EFF	BASIC program/variables; available to the user
001AB2r 1               WORLD_DATA = $6000 	;	so is %100 [Y 5 bits ] : [ab] 0 [X - 6 bits
001AB2r 1               SCREEN_buffer = $8000
001AB2r 1               
001AB2r 1               ; zero page layout $0022-$007F is available to user
001AB2r 1               ZP_PTR = $22
001AB2r 1               SCRATCH_PTR = $7E
001AB2r 1               
001AB2r 1               ; global data
001AB2r 1  DE AD BE EF  .byte $DE,$AD,$BE,$EF
001AB6r 1  00 00        default_irq_vector:  .addr 0
001AB8r 1  01           VSYNC_counter:       .byte 1
001AB9r 1  01           camera_facing: 		 .byte 1
001ABAr 1  DE           camera_world_pos_XH:    .byte $DE
001ABBr 1  AD           camera_world_pos_XL:       .byte $AD
001ABCr 1  BE           camera_world_pos_YH:        .byte $BE
001ABDr 1  EF           camera_world_pos_YL:       .byte $EF
001ABEr 1  00           camera_cell_x: 		 .byte 0
001ABFr 1  00           camera_cell_xl:       .byte 0
001AC0r 1  00           camera_cell_y: 		 .byte 0
001AC1r 1  00           camera_cell_yl:       .byte 0
001AC2r 1  00 00        MASTER_CLOCK:        .addr 0
001AC4r 1               
001AC4r 1               .macro stash_scratch
001AC4r 1               	STA (SCRATCH_PTR)
001AC4r 1                   INC SCRATCH_PTR
001AC4r 1               .endmacro
001AC4r 1               
001AC4r 1               custom_irq_handler:
001AC4r 1  AD 27 9F        lda VERA_isr
001AC7r 1  29 01           and #VSYNC_BIT
001AC9r 1  F0 03           beq @continue ; non-VSYNC IRQ, no tick update
001ACBr 1  EE rr rr        inc VSYNC_counter
001ACEr 1               @continue:
001ACEr 1                  ; continue to default IRQ handler
001ACEr 1  6C rr rr        jmp (default_irq_vector)
001AD1r 1                  ; RTI will happen after jump
001AD1r 1               
001AD1r 1               start:
001AD1r 1                 ; start of program - init globals
001AD1r 1  AD 14 03       lda IRQVec
001AD4r 1  8D rr rr       sta default_irq_vector
001AD7r 1  AD 15 03       lda IRQVec+1
001ADAr 1  8D rr rr       sta default_irq_vector+1
001ADDr 1  9C 29 9F       stz VERA_dc_video   ; disable display
001AE0r 1  A9 2B          lda #43 ; set scale for bitmap mode - going for 215x161 mode
001AE2r 1  8D 2A 9F       sta VERA_dc_hscale
001AE5r 1  8D 2B 9F       sta VERA_dc_vscale
001AE8r 1                 ; for now no L0 or L1
001AE8r 1               
001AE8r 1                 ; let's stick that test sprite data into VRAM at zero for now..
001AE8r 1  9C 25 9F       stz VERA_ctrl
001AEBr 1  9C 20 9F       stz VERA_addr_low
001AEEr 1  9C 21 9F       stz VERA_addr_high
001AF1r 1  A9 10          lda #$10
001AF3r 1  8D 22 9F       sta VERA_addr_bank
001AF6r 1                 ; load test VRAM data
001AF6r 1               
001AF6r 1                 ; is 512 bytes at test_cell_sprite label
001AF6r 1  A0 00          ldy #0
001AF8r 1               
001AF8r 1  A9 rr          LDA #<test_vram_data
001AFAr 1  85 22          STA ZP_PTR
001AFCr 1  A9 rr          LDA #>test_vram_data
001AFEr 1  85 23          STA ZP_PTR+1
001B00r 1  A2 10          LDX #16   ;   num pages to copy - 16 pages / 4K  - sprite addr 0-127
001B02r 1  80 02          BRA :++
001B04r 1                 :
001B04r 1  E6 23             INC ZP_PTR+1
001B06r 1                   :
001B06r 1  B1 22              LDA (ZP_PTR),Y
001B08r 1  8D 23 9F           STA VERA_data0
001B0Br 1  C8                 INY
001B0Cr 1  D0 F8              BNE :-
001B0Er 1  CA                DEX
001B0Fr 1  D0 F3             BNE :--
001B11r 1               
001B11r 1                 ; write sprite test data
001B11r 1  A9 FF          LDA #255
001B13r 1  8D 20 9F       STA VERA_addr_low
001B16r 1  A9 FC          lda #>VRAM_sprite_attributes
001B18r 1  8D 21 9F       sta VERA_addr_high
001B1Br 1  A9 19          lda #$19   ;  decrement 1 bank 1
001B1Dr 1  8D 22 9F       sta VERA_addr_bank
001B20r 1  A2 FF          LDX #255
001B22r 1                 :
001B22r 1  BD rr rr         LDA test_sprite_data,X
001B25r 1  8D 23 9F         STA VERA_data0
001B28r 1  CA               DEX
001B29r 1  D0 F7            BNE :-
001B2Br 1  BD rr rr        LDA test_sprite_data,X
001B2Er 1  8D 23 9F        STA VERA_data0
001B31r 1               
001B31r 1                 ; write custom palette data  - 16 colors only for now.. $1:FA00-$1:FBFF   VERA Color Palette (256 x 2 bytes)
001B31r 1  A2 1F          LDX #31
001B33r 1  8E 20 9F       STX VERA_addr_low
001B36r 1  A9 FA          LDA #$FA
001B38r 1  8D 21 9F       STA VERA_addr_high
001B3Br 1  A9 19          LDA #$19
001B3Dr 1  8D 22 9F       STA VERA_addr_bank
001B40r 1                 :
001B40r 1  BD rr rr         LDA test_optimal_pal_data,X
001B43r 1  8D 23 9F         STA VERA_data0
001B46r 1  CA               DEX
001B47r 1  D0 F7            BNE :-
001B49r 1  BD rr rr       LDA test_optimal_pal_data,X
001B4Cr 1  8D 23 9F       STA VERA_data0
001B4Fr 1               
001B4Fr 1                 ; enable display
001B4Fr 1  9C 25 9F       stz VERA_ctrl
001B52r 1  A9 41          lda #SPRITES_ONLY_VGA
001B54r 1  8D 29 9F       sta VERA_dc_video
001B57r 1               
001B57r 1                 ; overwrite RAM IRQ vector with custom handler address
001B57r 1  78             sei ; disable IRQ while vector is changing
001B58r 1  A9 rr          lda #<custom_irq_handler
001B5Ar 1  8D 14 03       sta IRQVec
001B5Dr 1  A9 rr          lda #>custom_irq_handler
001B5Fr 1  8D 15 03       sta IRQVec+1
001B62r 1  A9 01          lda #VSYNC_BIT ; make VERA only generate VSYNC IRQs
001B64r 1  8D 26 9F       sta VERA_ien
001B67r 1  58             cli ; enable IRQ now that vector is properly set
001B68r 1               
001B68r 1                 ; calc movement table - using ACROSS_ROW_* but move 1/16 unit at a time .. at 30fps = 30/16 = ~2 units / second
001B68r 1  A2 00          LDX #0
001B6Ar 1  BD rr rr      : LDA ACROSS_ROW_Y_L,X
001B6Dr 1  85 7E           STA $7E
001B6Fr 1  BD rr rr        LDA ACROSS_ROW_Y_H,X
001B72r 1  4A              LSR
001B73r 1  26 7E           ROL $7E  ;  /2
001B75r 1  4A              LSR
001B76r 1  26 7E           ROL $7E  ; /4
001B78r 1  4A              LSR
001B79r 1  26 7E           ROL $7E  ; /8
001B7Br 1  4A              LSR
001B7Cr 1  26 7E           ROL $7E  ; /16
001B7Er 1  A8              TAY
001B7Fr 1  C0 08           CPY #8   ;  if original value was positive, this is the sign bit...
001B81r 1  90 02           BCC :+
001B83r 1  A9 FF           LDA #$FF
001B85r 1  9D rr rr      : STA MOVE_XH,X
001B88r 1  A5 7E           LDA $7E
001B8Ar 1  9D rr rr        STA MOVE_XL,X
001B8Dr 1               
001B8Dr 1  BD rr rr        LDA ACROSS_ROW_X_L,X
001B90r 1  85 7E           STA $7E
001B92r 1  BD rr rr        LDA ACROSS_ROW_X_H,X
001B95r 1  4A              LSR
001B96r 1  26 7E           ROL $7E  ;  /2
001B98r 1  4A              LSR
001B99r 1  26 7E           ROL $7E  ; /4
001B9Br 1  4A              LSR
001B9Cr 1  26 7E           ROL $7E  ; /8
001B9Er 1  4A              LSR
001B9Fr 1  26 7E           ROL $7E  ; /16
001BA1r 1  A8              TAY
001BA2r 1  C0 08           CPY #8   ;  if original value was positive, this is the sign bit...
001BA4r 1  90 02           BCC :+
001BA6r 1  A9 FF           LDA #$FF
001BA8r 1  9D rr rr      : STA MOVE_YH,X
001BABr 1  A5 7E           LDA $7E
001BADr 1  9D rr rr        STA MOVE_YL,X
001BB0r 1  E8              INX
001BB1r 1  D0 B7           BNE :---
001BB3r 1               
001BB3r 1                 ; main loop here...
001BB3r 1  9C rr rr        STz camera_facing
001BB6r 1               
001BB6r 1               
001BB6r 1               @camera_cell_changed:
001BB6r 1  AD rr rr        LDA camera_cell_y
001BB9r 1  8D rr rr        STA camera_world_pos_YH
001BBCr 1  4A              LSR
001BBDr 1  85 7F           STA $7F  ; high byte
001BBFr 1  AD rr rr        LDA camera_cell_yl
001BC2r 1  8D rr rr        STA camera_world_pos_YL
001BC5r 1  6A              ROR
001BC6r 1  85 7E           STA $7E  ; low byte cellY.2
001BC8r 1                  ; worldX = (cellX + 15.5 - cellY/2)*ratio
001BC8r 1  18              CLC
001BC9r 1  AD rr rr        LDA camera_cell_xl ; +15.5
001BCCr 1  69 80           ADC #128
001BCEr 1  AA              TAX
001BCFr 1  AD rr rr        LDA camera_cell_x
001BD2r 1  69 0F           ADC #15
001BD4r 1  A8              TAY
001BD5r 1  38              SEC
001BD6r 1  8A              TXA
001BD7r 1  E5 7E           SBC $7E
001BD9r 1  AA              TAX
001BDAr 1  98              TYA
001BDBr 1  E5 7F           SBC $7F
001BDDr 1  A8              TAY
001BDEr 1  18              CLC
001BDFr 1  BD rr rr        LDA CELL_LOW_TO_WORLD_XL,X
001BE2r 1  79 rr rr        ADC CELL_TO_WORLD_XL,Y
001BE5r 1  8D rr rr        STA camera_world_pos_XL
001BE8r 1  BD rr rr        LDA CELL_LOW_TO_WORLD_XH,X
001BEBr 1  79 rr rr        ADC CELL_TO_WORLD_XH,Y
001BEEr 1  8D rr rr        STA camera_world_pos_XH
001BF1r 1  4C rr rr        jmp @do_update
001BF4r 1               
001BF4r 1                  ; thar be dragons here (old stupid code)
001BF4r 1  AD rr rr        LDA camera_cell_yl
001BF7r 1  8D rr rr        STA camera_world_pos_YL
001BFAr 1  49 FF           EOR #$FF
001BFCr 1  1A              INC A ;  negate the low - 30 - Y.L - 0 - .L = -.L BORROW
001BFDr 1  AA              TAX ; stash neg low
001BFEr 1  AD rr rr        LDA camera_cell_y
001C01r 1  8D rr rr        STA camera_world_pos_YH
001C04r 1  49 FF           EOR #$FF ; negate abs(YH)-1 .. 30 1E -> E1 (-31) 0 to -1
001C06r 1  38              SEC ; set the carry ..
001C07r 1  69 1F           ADC #31   ; inverted .. so now Y=31 would be Y=0, and Y=0 to Y=31.. cool
001C09r 1  4A              LSR   ;  do the divide
001C0Ar 1  A8              TAY   ;  stash the cell Y high
001C0Br 1  8A              TXA   ;
001C0Cr 1  6A              ROR   ;  cellY/2 ready for ofsetting.. L currently in the hopper
001C0Dr 1  18              CLC
001C0Er 1  6D rr rr        ADC camera_cell_xl   ; add the xl
001C11r 1  AA              TAX   ;  stash the  effective cell XL
001C12r 1  98              TYA   ;  grab the negd half YH
001C13r 1  6D rr rr        ADC camera_cell_x    ;  add the XH
001C16r 1  A8              TAY   ;  stash the  effective XH
001C17r 1  18              CLC   ;  jus to be sure
001C18r 1  BD rr rr        LDA   CELL_LOW_TO_WORLD_XL,x   ;  get the XL for cell XL
001C1Br 1  79 rr rr        ADC   CELL_TO_WORLD_XL,Y       ;  add the XL fro cell XH
001C1Er 1  8D rr rr        STA camera_world_pos_XL          ;  finally??!
001C21r 1  BD rr rr        LDA   CELL_LOW_TO_WORLD_XH,x  ;  get that XH for cell XL
001C24r 1  79 rr rr        ADC   CELL_TO_WORLD_XH,y      ;  get that HX for cell XH
001C27r 1  8D rr rr        STA camera_world_pos_XH    ;  oh the yeah ..
001C2Ar 1  4C rr rr        jmp @do_update
001C2Dr 1               
001C2Dr 1               @camera_world_changed:
001C2Dr 1  AD rr rr        LDA camera_world_pos_YH
001C30r 1  8D rr rr        STA camera_cell_y
001C33r 1  4A              LSR
001C34r 1  85 7F           STA $7F  ; high byte
001C36r 1  AD rr rr        LDA camera_world_pos_YL
001C39r 1  8D rr rr        STA camera_cell_yl
001C3Cr 1  6A              ROR
001C3Dr 1  85 7E           STA $7E  ; low byte cellY.2
001C3Fr 1                  ; cellX = WORLDX*ratio - (31-cellY)/2
001C3Fr 1                  ; cellX = WORLDX*ratio - 15.5 + cellY/2
001C3Fr 1  AE rr rr        LDX camera_world_pos_XH
001C42r 1  AC rr rr        LDY camera_world_pos_XL
001C45r 1  18              CLC
001C46r 1  B9 rr rr        LDA WORLD_TO_CELL_XH,Y ; that bit from pos_XL
001C49r 1  7D rr rr        ADC WORLD_TO_CELL_XL,X ; plus the bit from pos_XH
001C4Cr 1  A8              TAY   ;  cellXL from ratio
001C4Dr 1  BD rr rr        LDA WORLD_TO_CELL_XH,X
001C50r 1  69 00           ADC #0 ; gotta do that carry and all ..
001C52r 1  AA              TAX   ; cellXH from ratio
001C53r 1  38              SEC
001C54r 1  98              TYA   ;  cellXL from ratio
001C55r 1  E9 80           SBC #128 ; minus 15.5L
001C57r 1  A8              TAY
001C58r 1  8A              TXA
001C59r 1  E9 0F           SBC #15 ; minus 15.5H
001C5Br 1  AA              TAX
001C5Cr 1  18              CLC
001C5Dr 1  98              TYA ; cellXL from ratio minute 15.5
001C5Er 1  65 7E           ADC $7E  ; plis cellY/2
001C60r 1  8D rr rr        STA camera_cell_xl
001C63r 1  8A              TXA
001C64r 1  65 7F           ADC $7F
001C66r 1  8D rr rr        STA camera_cell_x
001C69r 1  4C rr rr        jmp @do_update
001C6Cr 1               
001C6Cr 1               @do_update:
001C6Cr 1  20 rr rr        jsr draw_test
001C6Fr 1                  ;  write location datas..
001C6Fr 1  A9 F8           lda #248
001C71r 1  8D 20 9F        STA VERA_addr_low
001C74r 1  A9 FC           LDA #$FC
001C76r 1  8D 21 9F        STA VERA_addr_high
001C79r 1  A9 49           LDA #$49
001C7Br 1  8D 22 9F        STA VERA_addr_bank
001C7Er 1  A0 09           ldy #9
001C80r 1  BE rr rr      : LDX camera_facing-1,y
001C83r 1  BD rr rr        LDA SPRITE_NUM_LOW_NIBBLE,X
001C86r 1  8D 23 9F        STA VERA_data0
001C89r 1  BD rr rr        LDA SPRITE_NUM_HIGH_NIBBLE,X
001C8Cr 1  8D 23 9F        STA VERA_data0
001C8Fr 1  88              dey
001C90r 1  D0 EE           BNE :-
001C92r 1               
001C92r 1               @FRAME_CHECK:
001C92r 1  CB              wai
001C93r 1  AD rr rr        lda VSYNC_counter
001C96r 1  F0 FA           beq @FRAME_CHECK
001C98r 1  9C rr rr        stz VSYNC_counter
001C9Br 1  18              CLC
001C9Cr 1  6D rr rr        ADC MASTER_CLOCK
001C9Fr 1  AA              TAX
001CA0r 1  8D rr rr        STA MASTER_CLOCK
001CA3r 1  AD rr rr        LDA MASTER_CLOCK+1
001CA6r 1  69 00           ADC #0
001CA8r 1  8D rr rr        STA MASTER_CLOCK+1
001CABr 1  8A              TXA
001CACr 1  29 01           AND #1 ; restrict to 30 fps.. don't care missed cycle.
001CAEr 1  D0 E2           BNE @FRAME_CHECK
001CB0r 1                  ; poll keyboard for input
001CB0r 1  20 E4 FF        jsr GETIN
001CB3r 1  C9 00           cmp #0
001CB5r 1  F0 DB           beq @FRAME_CHECK
001CB7r 1  C9 1D           cmp #$1D 	;	cursor right
001CB9r 1  D0 05           BNE :+
001CBBr 1  CE rr rr        DEC camera_facing
001CBEr 1  80 AC           BRA @do_update
001CC0r 1                  :
001CC0r 1  C9 9D           cmp  #$9D 	;	cursor left
001CC2r 1  D0 06           BNE :+
001CC4r 1  EE rr rr        INC camera_facing
001CC7r 1  4C rr rr        JMP @do_update
001CCAr 1  C9 11         : cmp #$11; cursor down
001CCCr 1  D0 2C           BNE :+
001CCEr 1  AE rr rr        LDX camera_facing
001CD1r 1  18              CLC
001CD2r 1  AD rr rr        LDA camera_world_pos_XL
001CD5r 1  7D rr rr        ADC MOVE_XL,X
001CD8r 1  8D rr rr        STA camera_world_pos_XL
001CDBr 1  AD rr rr        LDA camera_world_pos_XH
001CDEr 1  7D rr rr        ADC MOVE_XH,X
001CE1r 1  8D rr rr        STA camera_world_pos_XH
001CE4r 1  18              CLC
001CE5r 1  BD rr rr        LDA MOVE_YL,X
001CE8r 1  6D rr rr        ADC camera_world_pos_YL
001CEBr 1  8D rr rr        STA camera_world_pos_YL
001CEEr 1  BD rr rr        LDA MOVE_YH,X
001CF1r 1  6D rr rr        ADC camera_world_pos_YH
001CF4r 1  8D rr rr        STA camera_world_pos_YH
001CF7r 1  4C rr rr        jmp @camera_world_changed
001CFAr 1               
001CFAr 1  C9 91         : cmp #$91 ; cursor up
001CFCr 1  D0 2C           BNE :+
001CFEr 1  AE rr rr        LDX camera_facing
001D01r 1  38              SEC
001D02r 1  AD rr rr        LDA camera_world_pos_XL
001D05r 1  FD rr rr        SBC MOVE_XL,X
001D08r 1  8D rr rr        STA camera_world_pos_XL
001D0Br 1  AD rr rr        LDa camera_world_pos_XH
001D0Er 1  FD rr rr        SBC MOVE_XH,X
001D11r 1  8D rr rr        STA camera_world_pos_XH
001D14r 1  38              SEC
001D15r 1  AD rr rr        LDA camera_world_pos_YL
001D18r 1  FD rr rr        SBC MOVE_YL,X
001D1Br 1  8D rr rr        STA camera_world_pos_YL
001D1Er 1  AD rr rr        LDA camera_world_pos_YH
001D21r 1  FD rr rr        SBC MOVE_YH,X
001D24r 1  8D rr rr        STA camera_world_pos_YH
001D27r 1  4C rr rr        jmp @camera_world_changed
001D2Ar 1               
001D2Ar 1  C9 57         : cmp #W_CHAR ; cell up left
001D2Cr 1  D0 13           BNE :+++
001D2Er 1  AD rr rr        LDA camera_cell_y
001D31r 1  F0 03           BEQ :+
001D33r 1  CE rr rr        DEC camera_cell_y
001D36r 1  AD rr rr      : LDA camera_cell_x
001D39r 1  F0 03           BEQ :+
001D3Br 1  CE rr rr        DEC camera_cell_x
001D3Er 1  4C rr rr      : JMP @camera_cell_changed
001D41r 1               
001D41r 1  C9 45         : cmp #E_CHAR ; cell up right
001D43r 1  D0 0B           BNE :++
001D45r 1  AD rr rr        LDA camera_cell_y
001D48r 1  F0 03           BEQ :+
001D4Ar 1  CE rr rr        DEC camera_cell_y
001D4Dr 1  4C rr rr      : JMP @camera_cell_changed
001D50r 1               
001D50r 1  C9 41         : cmp #A_CHAR ; cell left
001D52r 1  D0 0B           BNE :++
001D54r 1  AD rr rr        LDA camera_cell_x
001D57r 1  F0 03           BEQ :+
001D59r 1  CE rr rr        DEC camera_cell_x
001D5Cr 1  4C rr rr      : JMP @camera_cell_changed
001D5Fr 1               
001D5Fr 1  C9 44         : cmp #D_CHAR ; cell right
001D61r 1  D0 0D           BNE :++
001D63r 1  AD rr rr        LDA camera_cell_x
001D66r 1  C9 3F           CMP #63
001D68r 1  B0 03           BCS :+
001D6Ar 1  EE rr rr        INC camera_cell_x
001D6Dr 1  4C rr rr      : JMP @camera_cell_changed
001D70r 1               
001D70r 1  C9 5A         : cmp #Z_CHAR ; cell down left
001D72r 1  D0 0D           BNE :++
001D74r 1  AD rr rr        LDA camera_cell_y
001D77r 1  C9 1F           CMP #31
001D79r 1  B0 03           BCS :+
001D7Br 1  EE rr rr        INC camera_cell_y
001D7Er 1  4C rr rr      : JMP @camera_cell_changed
001D81r 1               
001D81r 1  C9 58         : cmp #X_CHAR ; cell down right
001D83r 1  D0 17           BNE :+++
001D85r 1  AD rr rr        LDA camera_cell_y
001D88r 1  C9 1F           CMP #31
001D8Ar 1  B0 03           BCS :+
001D8Cr 1  EE rr rr        INC camera_cell_y
001D8Fr 1  AD rr rr      : LDA camera_cell_x
001D92r 1  C9 3F           CMP #63
001D94r 1  B0 03           BCS :+
001D96r 1  EE rr rr        INC camera_cell_x
001D99r 1  4C rr rr      : JMP @camera_cell_changed
001D9Cr 1               
001D9Cr 1  C9 00         : cmp #0 ;
001D9Er 1  D0 03           BNE :+
001DA0r 1  4C rr rr        JMP @do_update
001DA3r 1               
001DA3r 1  C9 00         : cmp #0 ;
001DA5r 1  D0 03           BNE :+
001DA7r 1  4C rr rr        JMP @do_update
001DAAr 1               
001DAAr 1  C9 00         : cmp #0 ;
001DACr 1  D0 03           BNE :+
001DAEr 1  4C rr rr        JMP @do_update
001DB1r 1               
001DB1r 1  C9 00         : cmp #0 ;
001DB3r 1  D0 03           BNE :+
001DB5r 1  4C rr rr        JMP @do_update
001DB8r 1               
001DB8r 1               
001DB8r 1  4C rr rr      : JMP @FRAME_CHECK
001DBBr 1               
001DBBr 1               @cleanup_and_exit:
001DBBr 1                  ; restore default IRQ vector
001DBBr 1  78              sei
001DBCr 1  AD rr rr        lda default_irq_vector
001DBFr 1  8D 14 03        sta IRQVec
001DC2r 1  AD rr rr        lda default_irq_vector+1
001DC5r 1  8D 15 03        sta IRQVec+1
001DC8r 1  58              cli
001DC9r 1  20 81 FF        jsr CINT
001DCCr 1  60              rts
001DCDr 1               
001DCDr 1               ; all the objects need to get into a structure to be drawn at each screen Y..
001DCDr 1               ; need object type, screenX .. store back to front .. track # objects to be drawn ?
001DCDr 1               ; there's 120 lines on screen.. up to say 32 objects per line would need about 8K RAM for the list.. each line needs 64 bytes
001DCDr 1               
001DCDr 1               draw_test:
001DCDr 1  9C 20 9F     	STZ VERA_addr_low
001DD0r 1  A9 FD            lda #>VRAM_sprite_attributes+1
001DD2r 1  8D 21 9F         sta VERA_addr_high
001DD5r 1  A9 11            lda #$11
001DD7r 1  8D 22 9F         sta VERA_addr_bank
001DDAr 1               
001DDAr 1               
001DDAr 1                   ; load increments and set start position...
001DDAr 1  AE rr rr         LDX camera_facing
001DDDr 1  8A               TXA
001DDEr 1  49 80            EOR #$80
001DE0r 1  85 33            STA ZP_PTR+17
001DE2r 1                   ; increments across rows
001DE2r 1  64 32            STZ ZP_PTR+16   ; 	set quad jump index
001DE4r 1               
001DE4r 1  64 2E            STZ ZP_PTR+12 	;	next row  start XL at ZP_PTR+12
001DE6r 1  64 30            STZ ZP_PTR+14 	;	next row  start YL at ZP_PTR+14
001DE8r 1               
001DE8r 1  A9 64            LDA #100
001DEAr 1  85 2F            STA ZP_PTR+13 	;	next row start at XH ZP_PTR+13
001DECr 1  A9 84            LDA #132
001DEEr 1  85 31         	 STA ZP_PTR+15 	;	next row start YH at ZP_PTR+15
001DF0r 1               
001DF0r 1  BD rr rr         LDA ACROSS_ROW_X_L,X
001DF3r 1  85 26            STA ZP_PTR+4 	; 	ZP_PTR+4 = spriteX increment Low byte
001DF5r 1  BD rr rr         LDA ACROSS_ROW_X_H,X
001DF8r 1  85 27            STA ZP_PTR+5 	;	ZP_PTR+4 = spriteX increment high byte
001DFAr 1  BD rr rr         LDA ACROSS_ROW_Y_L,X
001DFDr 1  85 28            STA ZP_PTR+6 	; 	ZP_PTR+6 = spriteY increment low byte
001DFFr 1  BD rr rr         LDA ACROSS_ROW_Y_H,X
001E02r 1  85 29            STA ZP_PTR+7 	; 	ZP_PTR+3 = spriteY increment
001E04r 1                   ; increments o next rows
001E04r 1  BD rr rr         LDA NEXT_ROW_X_L,X
001E07r 1  85 2A            STA ZP_PTR+8 	; 	ZP_PTR+4 = spriteX increment Low byte
001E09r 1  BD rr rr         LDA NEXT_ROW_X_H,X
001E0Cr 1  85 2B            STA ZP_PTR+9 	;	ZP_PTR+4 = spriteX increment high byte
001E0Er 1  BD rr rr         LDA NEXT_ROW_Y_L,X
001E11r 1  85 2C            STA ZP_PTR+10 	; 	ZP_PTR+6 = spriteY increment low byte
001E13r 1  BD rr rr         LDA NEXT_ROW_Y_H,X
001E16r 1  85 2D            STA ZP_PTR+11	; 	ZP_PTR+3 = spriteY increment
001E18r 1               
001E18r 1  A9 50            LDA #$50
001E1Ar 1  85 40            STA ZP_PTR+30
001E1Cr 1               
001E1Cr 1  A0 60            LDY #96		;	amount of sprites we can write max
001E1Er 1                 @quad_loop:
001E1Er 1  A2 08           LDX #8
001E20r 1  86 7F           STX $7F
001E22r 1  80 04          	bra @do_row
001E24r 1                 @next_row:
001E24r 1  88                 DEY
001E25r 1  D0 01              BNE @do_row
001E27r 1  60                 rts
001E28r 1                 @do_row:
001E28r 1  C6 7F              DEC $7F
001E2Ar 1  F0 7B              BEQ @next_quad
001E2Cr 1               
001E2Cr 1  A2 08           LDX #8
001E2Er 1  A5 2E          	LDA ZP_PTR+12 	;
001E30r 1  85 22          	STA ZP_PTR 		;	current row XL
001E32r 1               
001E32r 1  18               CLC  ; clear before doing 16bit add!
001E33r 1  65 2A            ADC ZP_PTR+8
001E35r 1  85 2E            STA ZP_PTR+12 	;	next row XL
001E37r 1  A5 2F            LDA ZP_PTR+13 	;
001E39r 1  85 23            STA ZP_PTR+1  ;  current row XH
001E3Br 1  65 2B            ADC ZP_PTR+9  ;
001E3Dr 1  85 2F            STA ZP_PTR+13    ;  next row XH
001E3Fr 1               
001E3Fr 1  A5 23            LDA ZP_PTR+1
001E41r 1  C9 C9            CMP #201
001E43r 1  B0 62            BCS @next_quad 		;	off screen
001E45r 1               
001E45r 1  18               CLC  ; clear before doing 16bit add!
001E46r 1  A5 30            LDA ZP_PTR+14
001E48r 1  85 24            STA ZP_PTR+2 	;	current row YL
001E4Ar 1  65 2C            ADC ZP_PTR+10
001E4Cr 1  85 30            STA ZP_PTR+14 	;	next row YL
001E4Er 1  A5 31            LDA ZP_PTR+15
001E50r 1  85 25            STA ZP_PTR+3
001E52r 1  65 2D            ADC ZP_PTR+11
001E54r 1  85 31            STA ZP_PTR+15    ;  next row YH
001E56r 1               
001E56r 1  A5 25            LDA ZP_PTR+3
001E58r 1  C9 99            CMP #153
001E5Ar 1  B0 4B            BCS @next_quad;	off screen
001E5Cr 1                 @forward_row_loop:
001E5Cr 1  9C 23 9F           STZ VERA_data0 ; 	address 12:5
001E5Fr 1  9C 23 9F           STZ VERA_data0 ;  mode  | address 16:13
001E62r 1  A5 23              LDA ZP_PTR+1
001E64r 1  8D 23 9F           STA VERA_data0 ; 	X 7:0
001E67r 1  9C 23 9F           STZ VERA_data0 ; 	X 9:8
001E6Ar 1  A5 25              LDA ZP_PTR+3  ; 	spriteY
001E6Cr 1  8D 23 9F           STA VERA_data0 ;  Y 7:0
001E6Fr 1  9C 23 9F           STZ VERA_data0 ; 	Y 9:8
001E72r 1  A9 0C              LDA #$0C
001E74r 1  8D 23 9F           STA VERA_data0 	; 	3 z depth no flip
001E77r 1  A9 50              LDA #$50 			; 	16x8 no palette offset
001E79r 1  A5 40              LDA ZP_PTR+30;
001E7Br 1  8D 23 9F           STA VERA_data0
001E7Er 1                   ; increment X
001E7Er 1  18               CLC  ; clear before doing 16bit add!
001E7Fr 1  A5 22              LDA ZP_PTR 	;	load X_l
001E81r 1               
001E81r 1  65 26              ADC ZP_PTR+4
001E83r 1  85 22              STA ZP_PTR
001E85r 1               
001E85r 1  A5 23              LDA ZP_PTR+1
001E87r 1  65 27              ADC ZP_PTR+5
001E89r 1  C9 D0              CMP #208
001E8Br 1  B0 97              BCS @next_row		; covers negatives even..
001E8Dr 1  85 23              STA ZP_PTR+1
001E8Fr 1                   ; increment Y
001E8Fr 1  18               CLC  ; clear before doing 16bit add!
001E90r 1               
001E90r 1  A5 24              LDA ZP_PTR+2 	;
001E92r 1  65 28              ADC ZP_PTR+6
001E94r 1  85 24              STA ZP_PTR+2
001E96r 1               
001E96r 1  A5 25              LDA ZP_PTR+3
001E98r 1  65 29              ADC ZP_PTR+7
001E9Ar 1  C9 99              CMP #153
001E9Cr 1  B0 86              BCS @next_row		; 	 covers negatives even..
001E9Er 1  85 25              STA ZP_PTR+3
001EA0r 1  CA                 DEX
001EA1r 1  F0 81              BEQ @next_row
001EA3r 1  88                 DEY
001EA4r 1  D0 B6              BNE @forward_row_loop
001EA6r 1                 @end:
001EA6r 1  60                rts
001EA7r 1               
001EA7r 1                 @next_quad:
001EA7r 1  E6 40          	  inc ZP_PTR+30
001EA9r 1  A6 32          	  LDX ZP_PTR+16 	;
001EABr 1  8A             	  TXA
001EACr 1  18             	  CLC
001EADr 1  69 02          	  ADC #2
001EAFr 1  85 32          	  STA ZP_PTR+16
001EB1r 1  7C rr rr       	  jmp (@t_quads,X) 	;
001EB4r 1                 	@t_quads:
001EB4r 1  rr rr          	  .addr @quad_1
001EB6r 1  rr rr          	  .addr @quad_2
001EB8r 1  rr rr          	  .addr @quad_3
001EBAr 1  rr rr          	  .addr @end
001EBCr 1                 @quad_1: 	;	need invert across row to make next bits . next row stays same
001EBCr 1  A6 33        	LDX ZP_PTR+17
001EBEr 1  18               CLC  ; clear before doing 16bit add!
001EBFr 1  BD rr rr         LDA ACROSS_ROW_X_L,X
001EC2r 1  85 26            STA ZP_PTR+4 	; 	ZP_PTR+4 = spriteX increment Low byte
001EC4r 1  85 2E            STA ZP_PTR+12
001EC6r 1  BD rr rr         LDA ACROSS_ROW_X_H,X
001EC9r 1  85 27            STA ZP_PTR+5 	;	ZP_PTR+4 = spriteX increment high byte
001ECBr 1  69 64            ADC #100
001ECDr 1  85 2F            STA ZP_PTR+13
001ECFr 1  18               CLC  ; clear before doing 16bit add!
001ED0r 1  BD rr rr         LDA ACROSS_ROW_Y_L,X
001ED3r 1  85 28            STA ZP_PTR+6 	; 	ZP_PTR+6 = spriteY increment low byte
001ED5r 1  85 30            STA ZP_PTR+14
001ED7r 1  BD rr rr         LDA ACROSS_ROW_Y_H,X
001EDAr 1  85 29            STA ZP_PTR+7 	; 	ZP_PTR+3 = spriteY increment
001EDCr 1  69 84            ADC #132
001EDEr 1  85 31            STA ZP_PTR+15
001EE0r 1  4C rr rr         jmp @quad_loop
001EE3r 1               @quad_2: ; invert next row - start 1 row up
001EE3r 1  A6 33        	LDX ZP_PTR+17
001EE5r 1               
001EE5r 1  18               CLC  ; clear before doing 16bit add!
001EE6r 1  BD rr rr         LDA NEXT_ROW_X_L,X
001EE9r 1  85 2A            STA ZP_PTR+8 	; 	ZP_PTR+4 = spriteX increment Low byte
001EEBr 1  85 2E            STA ZP_PTR+12
001EEDr 1  85 34            STA ZP_PTR+18
001EEFr 1  BD rr rr         LDA NEXT_ROW_X_H,X
001EF2r 1  85 2B            STA ZP_PTR+9 	;	ZP_PTR+4 = spriteX increment high byte
001EF4r 1  69 64            ADC #100
001EF6r 1  85 2F            STA ZP_PTR+13
001EF8r 1  85 35            STA ZP_PTR+19
001EFAr 1               
001EFAr 1  18               CLC  ; clear before doing 16bit add!
001EFBr 1  BD rr rr         LDA NEXT_ROW_Y_L,X
001EFEr 1  85 2C            STA ZP_PTR+10 	; 	ZP_PTR+6 = spriteY increment low byte
001F00r 1  85 30            STA ZP_PTR+14
001F02r 1  85 36            STA ZP_PTR+20
001F04r 1  BD rr rr         LDA NEXT_ROW_Y_H,X
001F07r 1  85 2D            STA ZP_PTR+11 	; 	ZP_PTR+3 = spriteY increment
001F09r 1  69 84            ADC #132
001F0Br 1  85 31            STA ZP_PTR+15
001F0Dr 1  85 37            STA ZP_PTR+21
001F0Fr 1  4C rr rr         jmp @quad_loop
001F12r 1               @quad_3: ; restore across row and increment ..
001F12r 1  AE rr rr     	LDX camera_facing
001F15r 1               
001F15r 1  18               CLC  ; clear before doing 16bit add!
001F16r 1  BD rr rr         LDA ACROSS_ROW_X_L,X
001F19r 1  85 26            STA ZP_PTR+4 	; 	ZP_PTR+4 = spriteX increment Low byte
001F1Br 1  65 34            ADC ZP_PTR+18
001F1Dr 1  85 2E            STA ZP_PTR+12
001F1Fr 1  BD rr rr         LDA ACROSS_ROW_X_H,X
001F22r 1  85 27            STA ZP_PTR+5 	;	ZP_PTR+4 = spriteX increment high byte
001F24r 1  65 35            ADC ZP_PTR+19
001F26r 1  85 2F            STA ZP_PTR+13
001F28r 1               
001F28r 1  18               CLC  ; clear before doing 16bit add!
001F29r 1  BD rr rr         LDA ACROSS_ROW_Y_L,X
001F2Cr 1  85 28            STA ZP_PTR+6 	; 	ZP_PTR+6 = spriteY increment low byte
001F2Er 1  65 36            ADC ZP_PTR+20
001F30r 1  85 30            STA ZP_PTR+14
001F32r 1  BD rr rr         LDA ACROSS_ROW_Y_H,X
001F35r 1  85 29            STA ZP_PTR+7 	; 	ZP_PTR+3 = spriteY increment
001F37r 1  65 37            ADC ZP_PTR+21
001F39r 1  85 31            STA ZP_PTR+15
001F3Br 1  4C rr rr         jmp @quad_loop
001F3Er 1               
001F3Er 1               draw_world:
001F3Er 1                 ; clear first entry for each line...
001F3Er 1  64 22          STZ ZP_PTR
001F40r 1  A9 80          LDA #>SCREEN_buffer
001F42r 1  85 23          STA ZP_PTR+1
001F44r 1  A2 1E          LDX #30
001F46r 1  A9 00          LDA #0
001F48r 1                 @loop:
001F48r 1  A8               TAY
001F49r 1  91 22            STA (ZP_PTR),y 	;	set first buffer entry for line mod 4 = 0
001F4Br 1  A0 40            LDY #64 		; 	move buffer pointer to next line
001F4Dr 1  91 22            STA (ZP_PTR),y 	;	set first buffer entry for line mode 4 =1
001F4Fr 1  A0 80            LDY #128 		; 	move buffer pointer to next line
001F51r 1  91 22            STA (ZP_PTR),y 	;	set first buffer entry for line mode 4 =2
001F53r 1  A0 C0            LDY #192 		; 	move buffer pointer to next line
001F55r 1  91 22            STA (ZP_PTR),y 	;	set first buffer entry for line mode 4 =3
001F57r 1  E6 23            INC ZP_PTR+1 	;	next page plz
001F59r 1  CA               DEX
001F5Ar 1  D0 EC            BNE @loop
001F5Cr 1                 ; fetch bearing data ..
001F5Cr 1  AD rr rr       LDA camera_facing
001F5Fr 1  0A             ASL
001F60r 1  AA             TAX
001F61r 1  7C rr rr       jmp (@T_BEARINGS,X)
001F64r 1               @T_BEARINGS:
001F64r 1  rr rr        	.addr BEARING_ZERO
001F66r 1  rr rr        	.addr BEARING_ONE
001F68r 1  rr rr        	.addr BEARING_TWO
001F6Ar 1               
001F6Ar 1               BEARING_ZERO:
001F6Ar 1  A9 70            LDA #112 ; starting at screen Y=112
001F6Cr 1                 @E_loop:
001F6Cr 1  85 24            STA ZP_PTR+2 ; stash the Y we're working at...
001F6Er 1  64 22              STZ ZP_PTR   ; zero this out to use pointer ..
001F70r 1  4A                 LSR
001F71r 1  66 22              ROR ZP_PTR ;
001F73r 1  4A                 LSR
001F74r 1  66 22              ROR ZP_PTR ; because is 64 avail for each
001F76r 1  09 80              ORA #>SCREEN_buffer ; making pointer woot!
001F78r 1  85 23              STA ZP_PTR+1 ; ZP_PTR points to the line..
001F7Ar 1  A0 00              LDY #0 	;	set to first offset in that buffer.. we'll add other objects to the lines later so this will always be null object
001F7Cr 1  A9 08              LDA #8 	;   start at X=0
001F7Er 1                   @E_loopE:
001F7Er 1  AA                   TAX
001F7Fr 1  A9 02                LDA #2 	;	water type
001F81r 1  91 22                STA (ZP_PTR),y
001F83r 1  C8                   iny
001F84r 1  8A                   TXA ;	get X value
001F85r 1  91 22                STA (ZP_PTR),y
001F87r 1  C8                   iny
001F88r 1  18                   CLC
001F89r 1  69 10                adc #16
001F8Br 1  C9 88                CMP #136
001F8Dr 1  90 EF                BCC @E_loopE 	;kk
001F8Fr 1  A9 00              LDA #0
001F91r 1  91 22              STA (ZP_PTR),y ; stash zero value to end the thing
001F93r 1  A5 24              LDA ZP_PTR+2
001F95r 1  E9 0F              SBC #15 	;	borrow is set ...
001F97r 1  B0 D3              BCS @E_loop ; still spots left on screen.. otay
001F99r 1  4C rr rr         jmp update_screen
001F9Cr 1               BEARING_ONE:
001F9Cr 1               BEARING_TWO: ; 30 degrees ..
001F9Cr 1  A9 74            LDA #116 ; starting at screen Y=112
001F9Er 1                 @E_loop:
001F9Er 1  85 24            STA ZP_PTR+2 ; stash the Y we're working at...
001FA0r 1  64 22              STZ ZP_PTR   ; zero this out to use pointer ..
001FA2r 1  4A                 LSR
001FA3r 1  66 22              ROR ZP_PTR ;
001FA5r 1  4A                 LSR
001FA6r 1  66 22              ROR ZP_PTR ; because is 64 avail for each
001FA8r 1  09 80              ORA #>SCREEN_buffer ; making pointer woot!
001FAAr 1  85 23              STA ZP_PTR+1 ; ZP_PTR points to the line..
001FACr 1  A0 00              LDY #0 	;	set to first offset in that buffer.. we'll add other objects to the lines later so this will always be null object
001FAEr 1  A9 0C              LDA #12 	;   start at X=0
001FB0r 1                   @E_loopE:
001FB0r 1  AA                   TAX
001FB1r 1  A9 02                LDA #2 	;	water type
001FB3r 1  91 22                STA (ZP_PTR),y
001FB5r 1  C8                   iny
001FB6r 1  8A                   TXA ;	get X value
001FB7r 1  91 22                STA (ZP_PTR),y
001FB9r 1  C8                   iny
001FBAr 1  18                   CLC
001FBBr 1  69 1C                adc #28
001FBDr 1  C9 88                CMP #136
001FBFr 1  90 EF                BCC @E_loopE 	;kk
001FC1r 1  A9 00              LDA #0
001FC3r 1  91 22              STA (ZP_PTR),y ; stash zero value to end the thing
001FC5r 1  A5 24              LDA ZP_PTR+2
001FC7r 1  E9 0D              SBC #13 	;	borrow is set ...
001FC9r 1  B0 D3              BCS @E_loop ; still spots left on screen.. otay
001FCBr 1  4C rr rr         jmp update_screen
001FCEr 1               
001FCEr 1  60             rts
001FCFr 1               
001FCFr 1               update_screen:
001FCFr 1  9C 20 9F       stz VERA_addr_low
001FD2r 1  A9 FC          lda #>VRAM_sprite_attributes
001FD4r 1  8D 21 9F       sta VERA_addr_high
001FD7r 1  A9 11          lda #$11
001FD9r 1  8D 22 9F       sta VERA_addr_bank
001FDCr 1  A9 77            LDA #119
001FDEr 1  85 24            STA ZP_PTR+2 ; stash line we at ..
001FE0r 1  64 22              STZ ZP_PTR
001FE2r 1  4A                 LSR
001FE3r 1  66 22              ROR ZP_PTR ;
001FE5r 1  4A                 LSR
001FE6r 1  66 22              ROR ZP_PTR ; because is 64 avail for each
001FE8r 1  09 80              ORA #>SCREEN_buffer ; making pointer woot!
001FEAr 1  85 23              STA ZP_PTR+1 ; ZP_PTR points to the line..
001FECr 1                 @y_line_loop:
001FECr 1  A0 00              LDY #0 ; set to check that first point ..
001FEEr 1  C6 24              dec ZP_PTR+2
001FF0r 1                   @do_check_line:
001FF0r 1  B1 22                LDA (ZP_PTR),Y ;	get type
001FF2r 1  C8                   INY
001FF3r 1  AA                   TAX
001FF4r 1  7C rr rr             JMP (@T_objtypes,X) ;
001FF7r 1                   @T_objtypes:
001FF7r 1  rr rr                .addr @end_line
001FF9r 1  rr rr                .addr @do_water
001FFBr 1                   @do_water:
001FFBr 1  9C 23 9F           stz VERA_data0 	; 	address 12:5
001FFEr 1  9C 23 9F           STZ VERA_data0 	; 	4bit color address 16:13
002001r 1  B1 22              LDA (ZP_PTR),Y  	;	get the X
002003r 1  C8                 iny
002004r 1  8D 23 9F           STA VERA_data0 	;	X
002007r 1  9C 23 9F           STZ VERA_data0 	;	 X
00200Ar 1  A5 24              LDA ZP_PTR+2
00200Cr 1  8D 23 9F           STA VERA_data0 	;	y
00200Fr 1  9C 23 9F           STZ VERA_data0 	; 	y
002012r 1  A9 0C              LDA #$0C
002014r 1  8D 23 9F           STA VERA_data0 	; 	3 z depth no flip
002017r 1  A9 D0              LDA #$D0 			; 	16x64 no palette offset
002019r 1  8D 23 9F           STA VERA_data0
00201Cr 1  80 D2              bra @do_check_line
00201Er 1                   @end_line:
00201Er 1  38                   SEC
00201Fr 1  A5 22                LDA ZP_PTR
002021r 1  E9 40                SBC #64
002023r 1  85 22                STA ZP_PTR
002025r 1  A5 23                LDA ZP_PTR+1
002027r 1  E9 00                SBC #0
002029r 1  85 23                STA ZP_PTR+1
00202Br 1  C9 80                CMP #>SCREEN_buffer
00202Dr 1  B0 BD                BCS @y_line_loop
00202Fr 1  60           rts
002030r 1               
002030r 1               test_sprite_data:
002030r 1               ; first 16 sprites reserved ...
002030r 1               ;      0   1   2   3   4   5   6  7
002030r 1               ;     add,mod, XL, XH, YL, YH,msk,hwp
002030r 1  42 00 64 00  .byte  66,$00,100,  0,128,  0,$0C,$50  ;  cursor middle - 8x8  sprite 0
002034r 1  80 00 0C 50  
002038r 1  10 00 0C 00  .byte  16,$00, 12,  0,  0,  0,$0C,$30  ;  border top - 64x8    sprite 1
00203Cr 1  00 00 0C 30  
002040r 1  10 00 4C 00  .byte  16,$00, 76,  0,  0,  0,$0C,$30  ;  border top - 64x8    sprite 2
002044r 1  00 00 0C 30  
002048r 1  10 00 8C 00  .byte  16,$00,140,  0,  0,  0,$0C,$30  ;  border top - 64x8    sprite 3
00204Cr 1  00 00 0C 30  
002050r 1               
002050r 1  10 00 0C 00  .byte  16,$00, 12,  0,153,  0,$0F,$30  ;  border bottom - 64x8  sprite 4
002054r 1  99 00 0F 30  
002058r 1  10 00 4C 00  .byte  16,$00, 76,  0,153,  0,$0F,$30  ;  border bottom - 64x8  sprite 5
00205Cr 1  99 00 0F 30  
002060r 1  10 00 8C 00  .byte  16,$00,140,  0,153,  0,$0F,$30  ;  border bottom - 64x8  sprite 6
002064r 1  99 00 0F 30  
002068r 1               
002068r 1  10 00 00 00  .byte  16,$00,  0,  0, 16,  0,$0C,$C0  ;  border left    8x64   sprite 7
00206Cr 1  10 00 0C C0  
002070r 1  10 00 00 00  .byte  16,$00,  0,  0, 80,  0,$0C,$C0  ;  border left    8x64   sprite 8
002074r 1  50 00 0C C0  
002078r 1  10 00 D0 00  .byte  16,$00,208,  0, 16,  0,$0F,$C0  ;  border left    8x64   sprite 9
00207Cr 1  10 00 0F C0  
002080r 1  10 00 D0 00  .byte  16,$00,208,  0, 80,  0,$0F,$C0  ;  border left    8x64   sprite A
002084r 1  50 00 0F C0  
002088r 1  31 00 8C 00  .byte  49,$00,140,  0,109,  0,$0C,$00  ; sprite B   bearing  Label
00208Cr 1  6D 00 0C 00  
002090r 1  3A 00 8C 00  .byte  58,$00,140,  0,118,  0,$0c,$30  ; sprite C   WORLD
002094r 1  76 00 0C 30  
002098r 1  32 00 8C 00  .byte  50,$00,140,  0,136,  0,$0c,$30  ; sprite D   Cell
00209Cr 1  88 00 0C 30  
0020A0r 1  21 00 94 00  .byte  33,$00,148,  0,109,  0,$0C,$00  ; 0 test    sprite 0E   bearing
0020A4r 1  6D 00 0C 00  
0020A8r 1  22 00 9C 00  .byte  34,$00,156,  0,109,  0,$0C,$00  ; 1 test    sprite 0F
0020ACr 1  6D 00 0C 00  
0020B0r 1  27 00 8C 00  .byte  39,$00,140,  0,127,  0,$0C,$00  ; 6 test    sprite 10   world XH
0020B4r 1  7F 00 0C 00  
0020B8r 1  28 00 94 00  .byte  40,$00,148,  0,127,  0,$0C,$00  ; 7 test    sprite 11
0020BCr 1  7F 00 0C 00  
0020C0r 1  29 00 9C 00  .byte  41,$00,156,  0,127,  0,$0C,$00  ; 8 test    sprite 12   world Xl
0020C4r 1  7F 00 0C 00  
0020C8r 1  2A 00 A4 00  .byte  42,$00,164,  0,127,  0,$0C,$00  ; 9 test    sprite 13
0020CCr 1  7F 00 0C 00  
0020D0r 1  2B 00 B0 00  .byte  43,$00,176,  0,127,  0,$0C,$00  ; A test    sprite 14   world YH
0020D4r 1  7F 00 0C 00  
0020D8r 1  2C 00 B8 00  .byte  44,$00,184,  0,127,  0,$0C,$00  ; B test    sprite 15
0020DCr 1  7F 00 0C 00  
0020E0r 1  2D 00 C0 00  .byte  45,$00,192,  0,127,  0,$0C,$00  ; C test    sprite 16   world Yl
0020E4r 1  7F 00 0C 00  
0020E8r 1  2E 00 C8 00  .byte  46,$00,200,  0,127,  0,$0C,$00  ; D test    sprite 17
0020ECr 1  7F 00 0C 00  
0020F0r 1  23 00 8C 00  .byte  35,$00,140,  0,145,  0,$0C,$00  ; 2 test    sprite 18   Cell X
0020F4r 1  91 00 0C 00  
0020F8r 1  24 00 94 00  .byte  36,$00,148,  0,145,  0,$0C,$00  ; 3 test    sprite 19
0020FCr 1  91 00 0C 00  
002100r 1  2F 00 9C 00  .byte  47,$00,156,  0,145,  0,$0C,$00  ; E test    sprite 1A   X Subcell
002104r 1  91 00 0C 00  
002108r 1  2F 00 A4 00  .byte  47,$00,164,  0,145,  0,$0C,$00  ; E test    sprite 1A
00210Cr 1  91 00 0C 00  
002110r 1  25 00 B0 00  .byte  37,$00,176,  0,145,  0,$0C,$00  ; 4 test    sprite 1C   Cell Y
002114r 1  91 00 0C 00  
002118r 1  26 00 B8 00  .byte  38,$00,184,  0,145,  0,$0C,$00  ; 5 test    sprite 1D
00211Cr 1  91 00 0C 00  
002120r 1  30 00 C0 00  .byte  48,$00,192,  0,145,  0,$0C,$00  ; F test    sprite 1E   Y Subcell
002124r 1  91 00 0C 00  
002128r 1  30 00 C8 00  .byte  48,$00,200,  0,145,  0,$0C,$00  ; F test    sprite 1F
00212Cr 1  91 00 0C 00  
002130r 1               
002130r 1               test_optimal_pal_data:
002130r 1               ;      GB   R  $1:FA00-$1:FBFF   VERA Color Palette (256 x 2 bytes)
002130r 1  00 00        .byte $00,$00  ; 0 - black/transparent
002132r 1  C8 0F        .byte $c8,$0f  ; 1 #ffcc88
002134r 1               
002134r 1  04 06        .byte $04,$06  ; 2 #660044
002136r 1  00 0C        .byte $00,$0C  ; 3  #cc0000
002138r 1  F0 0C        .byte $F0,$0C  ; 4#ccff00
00213Ar 1  42 03        .byte $42,$03
00213Cr 1  60 0C        .byte $60,$0c   ; 6  #cc6600
00213Er 1  40 08        .byte $40,$08   ; 7 #884400
002140r 1  C0 0C        .byte $c0,$0c   ; 8 #cccc00
002142r 1  6A 02        .byte $6a,$02   ; 9 #2266aa mid blue
002144r 1  C0 00        .byte $c0,$00   ; A #00cc00
002146r 1  AC 07        .byte $ac,$07   ; B #77aacc light blue
002148r 1  C0 00        .byte $c0,$00   ; C #0000c0 dark blue
00214Ar 1  0C 0C        .byte $0c,$0c   ; D #cc00cc
00214Cr 1  88 08        .byte $88,$08   ; E #888888
00214Er 1  22 02        .byte $22,$02   ; F #222222
002150r 1               
002150r 1               test_vram_data:
002150r 1               test_cell_sprite: 	;	is 16x64x16 bit = 512 bytes   sprite addr = 0
002150r 1               ; 	   01   23   45   67   89   AB   CD   EF
002150r 1  CC C9 CC C9  .byte $CC, $C9, $CC, $C9, $CC, $C9, $CC, $C0    ;  0
002154r 1  CC C9 CC C0  
002158r 1  09 9B 99 9B  .byte $09, $9B, $99, $9B, $99, $9B, $99, $9C    ;  1
00215Cr 1  99 9B 99 9C  
002160r 1  CB BC BB BC  .byte $CB, $BC, $BB, $BC, $BB, $BC, $BB, $B0    ;  2
002164r 1  BB BC BB B0  
002168r 1  0C C9 CC C9  .byte $0C, $C9, $CC, $C9, $CC, $C9, $CC, $CC    ;  3
00216Cr 1  CC C9 CC CC  
002170r 1  C9 9B 99 9B  .byte $C9, $9B, $99, $9B, $99, $9B, $99, $90    ;  4
002174r 1  99 9B 99 90  
002178r 1  0B BC BB BC  .byte $0B, $BC, $BB, $BC, $BB, $BC, $BB, $BC    ;  5
00217Cr 1  BB BC BB BC  
002180r 1  CC C9 CC C9  .byte $CC, $C9, $CC, $C9, $CC, $C9, $CC, $C0    ;  6
002184r 1  CC C9 CC C0  
002188r 1  09 9B 99 9B  .byte $09, $9B, $99, $9B, $99, $9B, $99, $9C    ;  7
00218Cr 1  99 9B 99 9C  
002190r 1  CB BC BB BC  .byte $CB, $BC, $BB, $BC, $BB, $BC, $BB, $B0    ;  8 ; 45* is 9.5 ..
002194r 1  BB BC BB B0  
002198r 1  0C 09 0C 09  .byte $0C, $09, $0C, $09, $0C, $09, $0C, $0C    ;  9
00219Cr 1  0C 09 0C 0C  
0021A0r 1  09 90 09 90  .byte $09, $90, $09, $90, $09, $90, $09, $90   ;  10
0021A4r 1  09 90 09 90  
0021A8r 1  90 09 90 09  .byte $90, $09, $90, $09, $90, $09, $90, $09   ; 11
0021ACr 1  90 09 90 09  
0021B0r 1  00 00 00 00  .res 32, 0  ;  5 lines zeroed
0021B4r 1  00 00 00 00  
0021B8r 1  00 00 00 00  
0021D0r 1               
0021D0r 1               
0021D0r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	16
0021D4r 1  EE EE EE EE  
0021D8r 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
0021DCr 1  EE 66 EE EE  
0021E0r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
0021E4r 1  66 EE 66 EE  
0021E8r 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
0021ECr 1  EE EE EE 66  
0021F0r 1               
0021F0r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	20
0021F4r 1  EE EE EE EE  
0021F8r 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
0021FCr 1  EE 66 EE EE  
002200r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
002204r 1  66 EE 66 EE  
002208r 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
00220Cr 1  EE EE EE 66  
002210r 1               
002210r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	24
002214r 1  EE EE EE EE  
002218r 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
00221Cr 1  EE 66 EE EE  
002220r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
002224r 1  66 EE 66 EE  
002228r 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
00222Cr 1  EE EE EE 66  
002230r 1               
002230r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	28
002234r 1  EE EE EE EE  
002238r 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
00223Cr 1  EE 66 EE EE  
002240r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
002244r 1  66 EE 66 EE  
002248r 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
00224Cr 1  EE EE EE 66  
002250r 1               
002250r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	32
002254r 1  EE EE EE EE  
002258r 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
00225Cr 1  EE 66 EE EE  
002260r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
002264r 1  66 EE 66 EE  
002268r 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
00226Cr 1  EE EE EE 66  
002270r 1               
002270r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	36
002274r 1  EE EE EE EE  
002278r 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
00227Cr 1  EE 66 EE EE  
002280r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
002284r 1  66 EE 66 EE  
002288r 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
00228Cr 1  EE EE EE 66  
002290r 1               
002290r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	40
002294r 1  EE EE EE EE  
002298r 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
00229Cr 1  EE 66 EE EE  
0022A0r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
0022A4r 1  66 EE 66 EE  
0022A8r 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
0022ACr 1  EE EE EE 66  
0022B0r 1               
0022B0r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	44
0022B4r 1  EE EE EE EE  
0022B8r 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
0022BCr 1  EE 66 EE EE  
0022C0r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
0022C4r 1  66 EE 66 EE  
0022C8r 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
0022CCr 1  EE EE EE 66  
0022D0r 1               
0022D0r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	48
0022D4r 1  EE EE EE EE  
0022D8r 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
0022DCr 1  EE 66 EE EE  
0022E0r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
0022E4r 1  66 EE 66 EE  
0022E8r 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
0022ECr 1  EE EE EE 66  
0022F0r 1               
0022F0r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	52
0022F4r 1  EE EE EE EE  
0022F8r 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
0022FCr 1  EE 66 EE EE  
002300r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
002304r 1  66 EE 66 EE  
002308r 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
00230Cr 1  EE EE EE 66  
002310r 1               
002310r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	56
002314r 1  EE EE EE EE  
002318r 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
00231Cr 1  EE 66 EE EE  
002320r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
002324r 1  66 EE 66 EE  
002328r 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
00232Cr 1  EE EE EE 66  
002330r 1               
002330r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	60
002334r 1  EE EE EE EE  
002338r 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
00233Cr 1  EE 66 EE EE  
002340r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
002344r 1  66 EE 66 EE  
002348r 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63   512 bytes - next sprite addr = 16
00234Cr 1  EE EE EE 66  
002350r 1               
002350r 1               
002350r 1               test_border:
002350r 1  0B 0B 0B 0B  .repeat 64
002354r 1  B0 B0 B0 B0  
002358r 1  0B 0B 0B 0B  
002550r 1                  .res 4, $0B
002550r 1                  .res 4, $B0
002550r 1               .endrepeat
002550r 1               
002550r 1               test_cross_hair_8x8:    ;  8x8x16 color = 32 bytes ; sprite 32
002550r 1               ;     01   23   45   67
002550r 1  11 00 00 11  .byte $11, $00, $00, $11
002554r 1  10 00 00 01  .byte $10, $00, $00, $01
002558r 1  00 00 00 00  .byte $00, $00, $00, $00
00255Cr 1  00 01 10 00  .byte $00, $01, $10, $00
002560r 1  00 01 10 00  .byte $00, $01, $10, $00
002564r 1  00 00 00 00  .byte $00, $00, $00, $00
002568r 1  10 00 00 01  .byte $10, $00, $00, $01
00256Cr 1  11 00 00 11  .byte $11, $00, $00, $11
002570r 1               
002570r 1               HEX_DISPLAY_FONT:       ; 8x8x16 color = 32 bytes ... sprite addr 33+ ($0440)
002570r 1               ;     01   23   45   67
002570r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 0
002574r 1  01 00 00 10  .byte $01, $00, $00, $10
002578r 1  01 00 00 10  .byte $01, $00, $00, $10
00257Cr 1  00 00 00 00  .byte $00, $00, $00, $00
002580r 1  01 00 00 10  .byte $01, $00, $00, $10
002584r 1  01 00 00 10  .byte $01, $00, $00, $10
002588r 1  01 00 00 10  .byte $01, $00, $00, $10
00258Cr 1  00 11 11 00  .byte $00, $11, $11, $00   ; 0 /
002590r 1               
002590r 1  00 00 00 00  .byte $00, $00, $00, $00 ; 1
002594r 1  00 00 00 10  .byte $00, $00, $00, $10
002598r 1  00 00 00 10  .byte $00, $00, $00, $10
00259Cr 1  00 00 00 00  .byte $00, $00, $00, $00
0025A0r 1  00 00 00 10  .byte $00, $00, $00, $10
0025A4r 1  00 00 00 10  .byte $00, $00, $00, $10
0025A8r 1  00 00 00 10  .byte $00, $00, $00, $10
0025ACr 1  00 00 00 00  .byte $00, $00, $00, $00
0025B0r 1               
0025B0r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 2
0025B4r 1  00 00 00 10  .byte $00, $00, $00, $10
0025B8r 1  00 00 00 10  .byte $00, $00, $00, $10
0025BCr 1  00 11 11 00  .byte $00, $11, $11, $00
0025C0r 1  01 00 00 00  .byte $01, $00, $00, $00
0025C4r 1  01 00 00 00  .byte $01, $00, $00, $00
0025C8r 1  01 00 00 00  .byte $01, $00, $00, $00
0025CCr 1  00 11 11 00  .byte $00, $11, $11, $00
0025D0r 1               
0025D0r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 3
0025D4r 1  00 00 00 10  .byte $00, $00, $00, $10
0025D8r 1  00 00 00 10  .byte $00, $00, $00, $10
0025DCr 1  00 11 11 00  .byte $00, $11, $11, $00
0025E0r 1  00 00 00 10  .byte $00, $00, $00, $10
0025E4r 1  00 00 00 10  .byte $00, $00, $00, $10
0025E8r 1  00 00 00 10  .byte $00, $00, $00, $10
0025ECr 1  00 11 11 00  .byte $00, $11, $11, $00
0025F0r 1               
0025F0r 1  00 00 00 00  .byte $00, $00, $00, $00   ; 4
0025F4r 1  01 00 00 10  .byte $01, $00, $00, $10
0025F8r 1  01 00 00 10  .byte $01, $00, $00, $10
0025FCr 1  00 11 11 00  .byte $00, $11, $11, $00
002600r 1  00 00 00 10  .byte $00, $00, $00, $10
002604r 1  00 00 00 10  .byte $00, $00, $00, $10
002608r 1  00 00 00 10  .byte $00, $00, $00, $10
00260Cr 1  00 00 00 00  .byte $00, $00, $00, $00
002610r 1               
002610r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 5
002614r 1  01 00 00 00  .byte $01, $00, $00, $00
002618r 1  01 00 00 00  .byte $01, $00, $00, $00
00261Cr 1  00 11 11 00  .byte $00, $11, $11, $00
002620r 1  00 00 00 10  .byte $00, $00, $00, $10
002624r 1  00 00 00 10  .byte $00, $00, $00, $10
002628r 1  00 00 00 10  .byte $00, $00, $00, $10
00262Cr 1  00 11 11 00  .byte $00, $11, $11, $00
002630r 1               
002630r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 6
002634r 1  01 00 00 00  .byte $01, $00, $00, $00
002638r 1  01 00 00 00  .byte $01, $00, $00, $00
00263Cr 1  00 11 11 00  .byte $00, $11, $11, $00
002640r 1  01 00 00 10  .byte $01, $00, $00, $10
002644r 1  01 00 00 10  .byte $01, $00, $00, $10
002648r 1  01 00 00 10  .byte $01, $00, $00, $10
00264Cr 1  00 11 11 00  .byte $00, $11, $11, $00
002650r 1               
002650r 1  00 01 01 00  .byte $00, $01, $01, $00 ; 7
002654r 1  00 00 00 10  .byte $00, $00, $00, $10
002658r 1  00 00 00 10  .byte $00, $00, $00, $10
00265Cr 1  00 00 00 00  .byte $00, $00, $00, $00
002660r 1  00 00 00 10  .byte $00, $00, $00, $10
002664r 1  00 00 00 10  .byte $00, $00, $00, $10
002668r 1  00 00 00 10  .byte $00, $00, $00, $10
00266Cr 1  00 00 00 00  .byte $00, $00, $00, $00
002670r 1               
002670r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 8
002674r 1  01 00 00 10  .byte $01, $00, $00, $10
002678r 1  01 00 00 10  .byte $01, $00, $00, $10
00267Cr 1  00 11 11 00  .byte $00, $11, $11, $00
002680r 1  01 00 00 10  .byte $01, $00, $00, $10
002684r 1  01 00 00 10  .byte $01, $00, $00, $10
002688r 1  01 00 00 10  .byte $01, $00, $00, $10
00268Cr 1  00 11 11 00  .byte $00, $11, $11, $00
002690r 1               
002690r 1  00 11 11 00  .byte $00, $11, $11, $00   ; 9
002694r 1  01 00 00 10  .byte $01, $00, $00, $10
002698r 1  01 00 00 10  .byte $01, $00, $00, $10
00269Cr 1  00 11 11 00  .byte $00, $11, $11, $00
0026A0r 1  00 00 00 10  .byte $00, $00, $00, $10
0026A4r 1  00 00 00 10  .byte $00, $00, $00, $10
0026A8r 1  00 00 00 10  .byte $00, $00, $00, $10
0026ACr 1  00 11 11 00  .byte $00, $11, $11, $00
0026B0r 1               
0026B0r 1  00 11 11 00  .byte $00, $11, $11, $00   ; A
0026B4r 1  01 00 00 10  .byte $01, $00, $00, $10
0026B8r 1  01 00 00 10  .byte $01, $00, $00, $10
0026BCr 1  00 11 11 00  .byte $00, $11, $11, $00
0026C0r 1  01 00 00 10  .byte $01, $00, $00, $10
0026C4r 1  01 00 00 10  .byte $01, $00, $00, $10
0026C8r 1  01 00 00 10  .byte $01, $00, $00, $10
0026CCr 1  00 00 00 00  .byte $00, $00, $00, $00
0026D0r 1               
0026D0r 1               
0026D0r 1  00 00 00 00  .byte $00, $00, $00, $00   ; B
0026D4r 1  01 00 00 00  .byte $01, $00, $00, $00
0026D8r 1  01 00 00 00  .byte $01, $00, $00, $00
0026DCr 1  00 11 11 00  .byte $00, $11, $11, $00
0026E0r 1  01 00 00 10  .byte $01, $00, $00, $10
0026E4r 1  01 00 00 10  .byte $01, $00, $00, $10
0026E8r 1  01 00 00 10  .byte $01, $00, $00, $10
0026ECr 1  00 11 11 00  .byte $00, $11, $11, $00
0026F0r 1               
0026F0r 1  00 11 11 00  .byte $00, $11, $11, $00   ; C
0026F4r 1  01 00 00 00  .byte $01, $00, $00, $00
0026F8r 1  01 00 00 00  .byte $01, $00, $00, $00
0026FCr 1  00 00 00 00  .byte $00, $00, $00, $00
002700r 1  01 00 00 00  .byte $01, $00, $00, $00
002704r 1  01 00 00 00  .byte $01, $00, $00, $00
002708r 1  01 00 00 00  .byte $01, $00, $00, $00
00270Cr 1  00 11 11 00  .byte $00, $11, $11, $00
002710r 1               
002710r 1  00 00 00 00  .byte $00, $00, $00, $00   ; D
002714r 1  00 00 00 10  .byte $00, $00, $00, $10
002718r 1  00 00 00 10  .byte $00, $00, $00, $10
00271Cr 1  00 11 11 00  .byte $00, $11, $11, $00
002720r 1  01 00 00 10  .byte $01, $00, $00, $10
002724r 1  01 00 00 10  .byte $01, $00, $00, $10
002728r 1  01 00 00 10  .byte $01, $00, $00, $10
00272Cr 1  00 11 11 00  .byte $00, $11, $11, $00
002730r 1               
002730r 1  00 11 11 00  .byte $00, $11, $11, $00   ; E
002734r 1  01 00 00 00  .byte $01, $00, $00, $00
002738r 1  01 00 00 00  .byte $01, $00, $00, $00
00273Cr 1  00 11 11 00  .byte $00, $11, $11, $00
002740r 1  01 00 00 00  .byte $01, $00, $00, $00
002744r 1  01 00 00 00  .byte $01, $00, $00, $00
002748r 1  01 00 00 00  .byte $01, $00, $00, $00
00274Cr 1  00 11 11 00  .byte $00, $11, $11, $00
002750r 1               
002750r 1  00 11 11 00  .byte $00, $11, $11, $00   ; F   sprite addr 48
002754r 1  01 00 00 00  .byte $01, $00, $00, $00
002758r 1  01 00 00 00  .byte $01, $00, $00, $00
00275Cr 1  00 11 11 00  .byte $00, $11, $11, $00
002760r 1  01 00 00 00  .byte $01, $00, $00, $00
002764r 1  01 00 00 00  .byte $01, $00, $00, $00
002768r 1  01 00 00 00  .byte $01, $00, $00, $00
00276Cr 1  00 00 00 00  .byte $00, $00, $00, $00
002770r 1               
002770r 1  00 00 00 00  .byte $00, $00, $00, $00  ;  bearing label   sprite addr 49
002774r 1  00 00 01 00  .byte $00, $00, $01, $00
002778r 1  00 00 10 00  .byte $00, $00, $10, $00
00277Cr 1  00 01 00 00  .byte $00, $01, $00, $00
002780r 1  00 10 00 00  .byte $00, $10, $00, $00
002784r 1  01 00 00 00  .byte $01, $00, $00, $00
002788r 1  11 11 11 00  .byte $11, $11, $11, $00
00278Cr 1  00 00 00 00  .byte $00, $00, $00, $00
002790r 1               
002790r 1               ; cell position label sprite addr 50-57
002790r 1  00 FF 00 FF  .byte $00,$FF,$00,$FF,$FF,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
002794r 1  FF 00 FF 00  
002798r 1  00 FF 00 00  
0027B0r 1  FF 00 00 FF  .byte $FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0027B4r 1  00 00 FF 00  
0027B8r 1  00 FF 00 00  
0027D0r 1  FF 00 00 FF  .byte $FF,$00,$00,$FF,$FF,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0027D4r 1  FF 00 FF 00  
0027D8r 1  00 FF 00 00  
0027F0r 1  FF 00 00 FF  .byte $FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0027F4r 1  00 00 FF 00  
0027F8r 1  00 FF 00 00  
002810r 1  00 FF 00 FF  .byte $00,$FF,$00,$FF,$FF,$00,$FF,$FF,$00,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
002814r 1  FF 00 FF FF  
002818r 1  00 FF FF 00  
002830r 1               ;      01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF
002830r 1               ;     XH                               $XL                            ___  __  YH                              YL
002830r 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$00,$00,$10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00
002834r 1  00 00 00 00  
002838r 1  10 10 10 00  
002850r 1  01 00 11 10  .byte $01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00
002854r 1  00 00 00 00  
002858r 1  01 00 10 00  
002870r 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$11,$10,$00,$00,$00,$00,$00,$00,$01,$00,$10,$10,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00
002874r 1  00 00 00 00  
002878r 1  10 10 11 10  
002890r 1               
002890r 1               ; world position label 58-65
002890r 1               ;     XH                 $XL                  ___  ___  YH                  YL
002890r 1  FF 00 00 00  .byte $FF,$00,$00,$00,$FF,$00,$00,$FF,$00,$00,$FF,$FF,$00,$00,$FF,$00,$00,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
002894r 1  FF 00 00 FF  
002898r 1  00 00 FF FF  
0028B0r 1  FF 00 00 00  .byte $FF,$00,$00,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$00,$FF,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0028B4r 1  FF 00 FF 00  
0028B8r 1  FF 00 FF 00  
0028D0r 1  FF 00 FF 00  .byte $FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$FF,$00,$00,$FF,$00,$00,$FF,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0028D4r 1  FF 00 FF 00  
0028D8r 1  FF 00 FF FF  
0028F0r 1  FF 00 FF 00  .byte $FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$FF,$00,$00,$FF,$00,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0028F4r 1  FF 00 FF 00  
0028F8r 1  FF 00 FF 00  
002910r 1  00 FF 00 FF  .byte $00,$FF,$00,$FF,$00,$00,$00,$FF,$00,$00,$FF,$00,$FF,$00,$FF,$FF,$00,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
002914r 1  00 00 00 FF  
002918r 1  00 00 FF 00  
002930r 1               ;      01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF, 01, 23, 45, 67, 89, AF, CD, EF
002930r 1               ;     XH                               $XL                            ___  __  YH                              YL
002930r 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00,$00,$00,$00,$00,$10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$10,$00,$00,$00
002934r 1  00 00 00 00  
002938r 1  10 10 10 00  
002950r 1  01 00 11 10  .byte $01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00,$00,$00,$01,$00,$10,$00,$00,$00
002954r 1  00 00 00 00  
002958r 1  01 00 10 00  
002970r 1  10 10 10 10  .byte $10,$10,$10,$10,$00,$00,$00,$00,$10,$10,$11,$10,$00,$00,$00,$00,$00,$00,$01,$00,$10,$10,$00,$00,$00,$00,$01,$00,$11,$10,$00,$00
002974r 1  00 00 00 00  
002978r 1  10 10 11 10  
002990r 1               
002990r 1               ; directional cursor reminder... 16x16 - 66-69
002990r 1               
002990r 1  00 10 00 10  .byte $00, $10, $00, $10, $01, $11, $11, $00
002994r 1  01 11 11 00  
002998r 1  00 10 00 10  .byte $00, $10, $00, $10, $01, $00, $00, $00
00299Cr 1  01 00 00 00  
0029A0r 1  00 10 10 10  .byte $00, $10, $10, $10, $01, $11, $00, $00
0029A4r 1  01 11 00 00  
0029A8r 1  00 10 10 10  .byte $00, $10, $10, $10, $01, $00, $00, $00
0029ACr 1  01 00 00 00  
0029B0r 1  00 01 01 00  .byte $00, $01, $01, $00, $01, $11, $11, $00
0029B4r 1  01 11 11 00  
0029B8r 1  00 00 00 00  .byte $00, $00, $00, $00, $00, $00, $00, $00
0029BCr 1  00 00 00 00  
0029C0r 1  01 11 00 00  .byte $01, $11, $00, $00, $00, $01, $11, $00
0029C4r 1  00 01 11 00  
0029C8r 1  10 00 10 00  .byte $10, $00, $10, $00, $00, $01, $00, $01
0029CCr 1  00 01 00 01  
0029D0r 1  11 11 10 00  .byte $11, $11, $10, $00, $00, $01, $00, $01
0029D4r 1  00 01 00 01  
0029D8r 1  10 00 10 00  .byte $10, $00, $10, $00, $00, $01, $11, $10
0029DCr 1  00 01 11 10  
0029E0r 1  00 00 00 00  .byte $00, $00, $00, $00, $00, $00, $00, $00
0029E4r 1  00 00 00 00  
0029E8r 1  00 11 11 10  .byte $00, $11, $11, $10, $01, $00, $01, $00
0029ECr 1  01 00 01 00  
0029F0r 1  00 00 01 00  .byte $00, $00, $01, $00, $00, $10, $10, $00
0029F4r 1  00 10 10 00  
0029F8r 1  00 00 10 00  .byte $00, $00, $10, $00, $00, $01, $00, $00
0029FCr 1  00 01 00 00  
002A00r 1  00 01 00 00  .byte $00, $01, $00, $00, $00, $10, $10, $00
002A04r 1  00 10 10 00  
002A08r 1  00 11 11 10  .byte $00, $11, $11, $10, $01, $00, $01, $00
002A0Cr 1  01 00 01 00  
002A10r 1               
002A10r 1               
002A10r 1               
