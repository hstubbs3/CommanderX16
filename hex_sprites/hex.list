ca65 V2.19 - Git 8e6c0c1
Main file   : hex.s
Current file: hex.s

000000r 1               ; 	080D
000000r 1  4C rr rr     jmp start ; 	3 bytes
000003r 1               ;	0810 	- 240 bytes available for stuff that doesn't need alignment
000003r 1  DE AD BE EF  .repeat 28
000007r 1  DE AD BE EF  
00000Br 1  DE AD BE EF  
000073r 1               	.byte $DE,$AD,$BE,$EF
000073r 1               .endrepeat
000073r 1               SCRATCH128:
000073r 1  DE AD BE EF  .repeat 32
000077r 1  DE AD BE EF  
00007Br 1  DE AD BE EF  
0000F3r 1               	.byte $DE,$AD,$BE,$EF
0000F3r 1               .endrepeat
0000F3r 1               
0000F3r 1               ACROSS_ROW_X_H: ; 0900
0000F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0000F3r 1  10 0F 0F 0F  .byte $10,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $E
0000F7r 1  0F 0F 0F 0F  
0000FBr 1  0F 0F 0F 0F  
000103r 1  0E 0E 0E 0E  .byte  $E,  $E,  $E,  $E,  $E,  $D,  $D,  $D,  $D,  $D,  $C,  $C,  $C,  $C,  $B,  $B
000107r 1  0E 0D 0D 0D  
00010Br 1  0D 0D 0C 0C  
000113r 1  0B 0B 0A 0A  .byte  $B,  $B,  $A,  $A,  $A,  $9,  $9,  $9,  $8,  $8,  $8,  $7,  $7,  $7,  $6,  $6
000117r 1  0A 09 09 09  
00011Br 1  08 08 08 07  
000123r 1  06 05 05 05  .byte  $6,  $5,  $5,  $5,  $4,  $4,  $3,  $3,  $3,  $2,  $2,  $1,  $1,  $1,  $0,  $0
000127r 1  04 04 03 03  
00012Br 1  03 02 02 01  
000133r 1  00 FF FF FE  .byte  $0, $FF, $FF, $FE, $FE, $FE, $FD, $FD, $FC, $FC, $FC, $FB, $FB, $FA, $FA, $FA
000137r 1  FE FE FD FD  
00013Br 1  FC FC FC FB  
000143r 1  F9 F9 F9 F8  .byte $F9, $F9, $F9, $F8, $F8, $F8, $F7, $F7, $F7, $F6, $F6, $F6, $F5, $F5, $F5, $F4
000147r 1  F8 F8 F7 F7  
00014Br 1  F7 F6 F6 F6  
000153r 1  F4 F4 F4 F3  .byte $F4, $F4, $F4, $F3, $F3, $F3, $F3, $F2, $F2, $F2, $F2, $F2, $F1, $F1, $F1, $F1
000157r 1  F3 F3 F3 F2  
00015Br 1  F2 F2 F2 F2  
000163r 1  F1 F1 F0 F0  .byte $F1, $F1, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
000167r 1  F0 F0 F0 F0  
00016Br 1  F0 F0 F0 F0  
000173r 1  F0 F0 F0 F0  .byte $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F1
000177r 1  F0 F0 F0 F0  
00017Br 1  F0 F0 F0 F0  
000183r 1  F1 F1 F1 F1  .byte $F1, $F1, $F1, $F1, $F1, $F2, $F2, $F2, $F2, $F2, $F3, $F3, $F3, $F3, $F4, $F4
000187r 1  F1 F2 F2 F2  
00018Br 1  F2 F2 F3 F3  
000193r 1  F4 F4 F5 F5  .byte $F4, $F4, $F5, $F5, $F5, $F6, $F6, $F6, $F7, $F7, $F7, $F8, $F8, $F8, $F9, $F9
000197r 1  F5 F6 F6 F6  
00019Br 1  F7 F7 F7 F8  
0001A3r 1  F9 FA FA FA  .byte $F9, $FA, $FA, $FA, $FB, $FB, $FC, $FC, $FC, $FD, $FD, $FE, $FE, $FE, $FF, $FF
0001A7r 1  FB FB FC FC  
0001ABr 1  FC FD FD FE  
0001B3r 1  00 00 00 01  .byte $00,  $0,  $0,  $1,  $1,  $1,  $2,  $2,  $3,  $3,  $3,  $4,  $4,  $5,  $5,  $5
0001B7r 1  01 01 02 02  
0001BBr 1  03 03 03 04  
0001C3r 1  06 06 06 07  .byte  $6,  $6,  $6,  $7,  $7,  $7,  $8,  $8,  $8,  $9,  $9,  $9,  $A,  $A,  $A,  $B
0001C7r 1  07 07 08 08  
0001CBr 1  08 09 09 09  
0001D3r 1  0B 0B 0B 0C  .byte  $B,  $B,  $B,  $C,  $C,  $C,  $C,  $D,  $D,  $D,  $D,  $D,  $E,  $E,  $E,  $E
0001D7r 1  0C 0C 0C 0D  
0001DBr 1  0D 0D 0D 0D  
0001E3r 1  0E 0E 0F 0F  .byte  $E,  $E,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F
0001E7r 1  0F 0F 0F 0F  
0001EBr 1  0F 0F 0F 0F  
0001F3r 1               
0001F3r 1               ACROSS_ROW_X_L: ; 0A00
0001F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0001F3r 1  00 FE FB F4  .byte  $0, $FE, $FB, $F4, $EC, $E1, $D3, $C3, $B1, $9C, $85, $6B, $4F, $31, $10, $ED
0001F7r 1  EC E1 D3 C3  
0001FBr 1  B1 9C 85 6B  
000203r 1  C8 A0 76 4A  .byte $C8, $A0, $76, $4A, $1C, $EB, $B9, $84, $4D, $14, $D9, $9D, $5E, $1D, $DA, $96
000207r 1  1C EB B9 84  
00020Br 1  4D 14 D9 9D  
000213r 1  50 08 BE 73  .byte $50,  $8, $BE, $73, $26, $D7, $87, $36, $E3, $8F, $39, $E2, $8A, $31, $D7, $7B
000217r 1  26 D7 87 36  
00021Br 1  E3 8F 39 E2  
000223r 1  1F C2 63 04  .byte $1F, $C2, $63,  $4, $A5, $44, $E3, $81, $1F, $BC, $59, $F5, $91, $2D, $C8, $64
000227r 1  A5 44 E3 81  
00022Br 1  1F BC 59 F5  
000233r 1  00 9B 37 D2  .byte  $0, $9B, $37, $D2, $6E,  $A, $A6, $43, $E0, $7E, $1C, $BB, $5A, $FB, $9C, $3D
000237r 1  6E 0A A6 43  
00023Br 1  E0 7E 1C BB  
000243r 1  E0 84 28 CE  .byte $E0, $84, $28, $CE, $75, $1D, $C6, $70, $1C, $C9, $78, $28, $D9, $8C, $41, $F7
000247r 1  75 1D C6 70  
00024Br 1  1C C9 78 28  
000253r 1  AF 69 25 E2  .byte $AF, $69, $25, $E2, $A1, $62, $26, $EB, $B2, $7B, $46, $14, $E3, $B5, $89, $5F
000257r 1  A1 62 26 EB  
00025Br 1  B2 7B 46 14  
000263r 1  37 12 EF CE  .byte $37, $12, $EF, $CE, $B0, $94, $7A, $63, $4E, $3C, $2C, $1E, $13,  $B,  $4,  $1
000267r 1  B0 94 7A 63  
00026Br 1  4E 3C 2C 1E  
000273r 1  00 01 04 0B  .byte  $0,  $1,  $4,  $B, $13, $1E, $2C, $3C, $4E, $63, $7A, $94, $B0, $CE, $EF, $12
000277r 1  13 1E 2C 3C  
00027Br 1  4E 63 7A 94  
000283r 1  37 5F 89 B5  .byte $37, $5F, $89, $B5, $E3, $14, $46, $7B, $B2, $EB, $26, $62, $A1, $E2, $25, $69
000287r 1  E3 14 46 7B  
00028Br 1  B2 EB 26 62  
000293r 1  AF F7 41 8C  .byte $AF, $F7, $41, $8C, $D9, $28, $78, $C9, $1C, $70, $C6, $1D, $75, $CE, $28, $84
000297r 1  D9 28 78 C9  
00029Br 1  1C 70 C6 1D  
0002A3r 1  E0 3D 9C FB  .byte $E0, $3D, $9C, $FB, $5A, $BB, $1C, $7E, $E0, $43, $A6,  $A, $6E, $D2, $37, $9B
0002A7r 1  5A BB 1C 7E  
0002ABr 1  E0 43 A6 0A  
0002B3r 1  00 64 C8 2D  .byte  $0, $64, $C8, $2D, $91, $F5, $59, $BC, $1F, $81, $E3, $44, $A5,  $4, $63, $C2
0002B7r 1  91 F5 59 BC  
0002BBr 1  1F 81 E3 44  
0002C3r 1  1F 7B D7 31  .byte $1F, $7B, $D7, $31, $8A, $E2, $39, $8F, $E3, $36, $87, $D7, $26, $73, $BE,  $8
0002C7r 1  8A E2 39 8F  
0002CBr 1  E3 36 87 D7  
0002D3r 1  50 96 DA 1D  .byte $50, $96, $DA, $1D, $5E, $9D, $D9, $14, $4D, $84, $B9, $EB, $1C, $4A, $76, $A0
0002D7r 1  5E 9D D9 14  
0002DBr 1  4D 84 B9 EB  
0002E3r 1  C8 ED 10 31  .byte $C8, $ED, $10, $31, $4F, $6B, $85, $9C, $B1, $C3, $D3, $E1, $EC, $F4, $FB, $FE
0002E7r 1  4F 6B 85 9C  
0002EBr 1  B1 C3 D3 E1  
0002F3r 1               
0002F3r 1               ACROSS_ROW_Y_H: ; 0B00
0002F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0002F3r 1  00 00 00 00  .byte
0002F7r 1  00 00 01 01  
0002FBr 1  01 01 01 02  
0003F3r 1               
0003F3r 1               ACROSS_ROW_Y_L: ; 0C00
0003F3r 1               ;     0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
0003F3r 1  00 32 64 96  .byte  $0, $32, $64, $96, $C8, $FA, $2C, $5E, $8F, $C0, $F1, $22, $52, $82
0003F7r 1  C8 FA 2C 5E  
0003FBr 1  8F C0 F1 22  
000401r 1  B1 E1 0F 3D  .byte $B1, $E1,  $F, $3D, $6B, $98, $C5, $F1, $1C, $47, $71, $9B, $C3
000405r 1  6B 98 C5 F1  
000409r 1  1C 47 71 9B  
00040Er 1  EB 13 39 5F  .byte $EB, $13, $39, $5F, $84, $A8, $CB, $ED,  $E, $2F, $4E, $6C, $8A
000412r 1  84 A8 CB ED  
000416r 1  0E 2F 4E 6C  
00041Br 1  A6 C2 DC F5  .byte $A6, $C2, $DC, $F5,  $E, $25, $3B, $50, $64, $76, $88, $98, $A7
00041Fr 1  0E 25 3B 50  
000423r 1  64 76 88 98  
000428r 1  B5 C2 CE D8  .byte $B5, $C2, $CE, $D8, $E1, $E9, $F0, $F6, $FA, $FD, $FF,  $0, $FF
00042Cr 1  E1 E9 F0 F6  
000430r 1  FA FD FF 00  
000435r 1  FD FA F6 F0  .byte $FD, $FA, $F6, $F0, $E9, $E1, $D8, $CE, $C2, $B5, $A7, $98, $88
000439r 1  E9 E1 D8 CE  
00043Dr 1  C2 B5 A7 98  
000442r 1  76 64 50 3B  .byte $76, $64, $50, $3B, $25,  $E, $F5, $DC, $C2, $A6, $8A, $6C, $4E
000446r 1  25 0E F5 DC  
00044Ar 1  C2 A6 8A 6C  
00044Fr 1  2F 0E ED CB  .byte
000453r 1  A8 84 5F 39  
000457r 1  13 EB C3 9B  
0004F3r 1               
0004F3r 1               
0004F3r 1               NEXT_ROW_X_H:
0004F3r 1               ; 		0 	1 	2 	3 		4 	5 	6 	7 		8 	9 	A 	B 		C 	D 	E 	F
0004F3r 1  F8 F7 F7 F7  .byte $F8, $F7, $F7, $F7, $F6, $F6, $F6, $F5, $F5, $F5, $F4, $F4, $F4, $F4, $F3, $F3
0004F7r 1  F6 F6 F6 F5  
0004FBr 1  F5 F5 F4 F4  
000503r 1  F3 F3 F2 F2  .byte $F3, $F3, $F2, $F2, $F2, $F2, $F2, $F1, $F1, $F1, $F1, $F1, $F1, $F0, $F0, $F0
000507r 1  F2 F2 F2 F1  
00050Br 1  F1 F1 F1 F1  
000513r 1  F0 F0 F0 F0  .byte $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
000517r 1  F0 F0 F0 F0  
00051Br 1  F0 F0 F0 F0  
000523r 1  F0 F0 F0 F0  .byte $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F1, $F1, $F1, $F1, $F1, $F1
000527r 1  F0 F0 F0 F0  
00052Br 1  F0 F0 F1 F1  
000533r 1  F2 F2 F2 F2  .byte $F2, $F2, $F2, $F2, $F2, $F3, $F3, $F3, $F3, $F4, $F4, $F4, $F5, $F5, $F5, $F5
000537r 1  F2 F3 F3 F3  
00053Br 1  F3 F4 F4 F4  
000543r 1  F6 F6 F6 F7  .byte $F6, $F6, $F6, $F7, $F7, $F7, $F8, $F8, $F8, $F9, $F9, $F9, $FA, $FA, $FB, $FB
000547r 1  F7 F7 F8 F8  
00054Br 1  F8 F9 F9 F9  
000553r 1  FB FC FC FD  .byte $FB, $FC, $FC, $FD, $FD, $FD, $FE, $FE, $FE, $FF, $FF,  $0,  $0,  $0,  $1,  $1
000557r 1  FD FD FE FE  
00055Br 1  FE FF FF 00  
000563r 1  02 02 02 03  .byte  $2,  $2,  $2,  $3,  $3,  $4,  $4,  $4,  $5,  $5,  $5,  $6,  $6,  $6,  $7,  $7
000567r 1  03 04 04 04  
00056Br 1  05 05 05 06  
000573r 1  08 08 08 08  .byte  $8,  $8,  $8,  $8,  $9,  $9,  $9,  $A,  $A,  $A,  $B,  $B,  $B,  $B,  $C,  $C
000577r 1  09 09 09 0A  
00057Br 1  0A 0A 0B 0B  
000583r 1  0C 0C 0D 0D  .byte  $C,  $C,  $D,  $D,  $D,  $D,  $D,  $E,  $E,  $E,  $E,  $E,  $E,  $F,  $F,  $F
000587r 1  0D 0D 0D 0E  
00058Br 1  0E 0E 0E 0E  
000593r 1  0F 0F 0F 0F  .byte  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F , $F
000597r 1  0F 0F 0F 0F  
00059Br 1  0F 0F 0F 0F  
0005A3r 1  0F 0F 0F 0F  .byte  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $F,  $E,  $E,  $E,  $E,  $E,  $E
0005A7r 1  0F 0F 0F 0F  
0005ABr 1  0F 0F 0E 0E  
0005B3r 1  0D 0D 0D 0D  .byte  $D,  $D,  $D,  $D,  $D,  $C,  $C,  $C,  $C,  $B,  $B,  $B,  $A,  $A,  $A,  $A
0005B7r 1  0D 0C 0C 0C  
0005BBr 1  0C 0B 0B 0B  
0005C3r 1  09 09 09 08  .byte  $9,  $9,  $9,  $8,  $8,  $8,  $7,  $7,  $7,  $6,  $6,  $6,  $5,  $5,  $4,  $4
0005C7r 1  08 08 07 07  
0005CBr 1  07 06 06 06  
0005D3r 1  04 03 03 02  .byte  $4,  $3,  $3,  $2,  $2,  $2,  $1,  $1,  $1,  $0,  $0, $FF, $FF, $FF, $FE, $FE
0005D7r 1  02 02 01 01  
0005DBr 1  01 00 00 FF  
0005E3r 1  FD FD FD FC  .byte $FD, $FD, $FD, $FC, $FC, $FB, $FB, $FB, $FA, $FA, $FA, $F9, $F9, $F9, $F8, $F8
0005E7r 1  FC FB FB FB  
0005EBr 1  FA FA FA F9  
0005F3r 1               
0005F3r 1               NEXT_ROW_X_L:
0005F3r 1  00 A9 54 00  .byte
0005F7r 1  AE 5D 0D BF  
0005FBr 1  73 28 DF 98  
0006F3r 1               
0006F3r 1               NEXT_ROW_Y_H:
0006F3r 1  06 06 06 06  .byte
0006F7r 1  06 06 06 06  
0006FBr 1  06 05 05 05  
0007F3r 1               
0007F3r 1               NEXT_ROW_Y_L:
0007F3r 1  ED D3 B9 9D  .byte
0007F7r 1  80 62 44 24  
0007FBr 1  03 E2 BF 9C  
0008F3r 1               
0008F3r 1               ;constants
0008F3r 1               
0008F3r 1               ; RAM Interrupt Vectors
0008F3r 1               IRQVec            = $0314
0008F3r 1               
0008F3r 1               ; VERA
0008F3r 1               VERA_addr_low     = $9F20
0008F3r 1               VERA_addr_high    = $9F21
0008F3r 1               VERA_addr_bank    = $9F22
0008F3r 1               VERA_data0        = $9F23
0008F3r 1               VERA_data1        = $9F24
0008F3r 1               VERA_ctrl         = $9F25
0008F3r 1               VERA_ien          = $9F26
0008F3r 1               VERA_isr          = $9F27
0008F3r 1               VERA_dc_video     = $9F29 ; DCSEL = 0
0008F3r 1               ;   Current Field | Sprites Enable | Layer1 Enable  |Layer0 Enable
0008F3r 1               ; NTSC/RGB: 240P  | NTSC: Chroma Disable / RGB: HV Sync Output Mode
0008F3r 1               
0008F3r 1               VERA_dc_hscale    = $9F2A
0008F3r 1               VERA_dc_vscale    = $9F2B
0008F3r 1               
0008F3r 1               VERA_L0_config    = $9F2D
0008F3r 1               ;   7       6     5   4       3       2             1   0
0008F3r 1               ;   Map Height | Map Width | T256C | Bitmap Mode | Color Depth
0008F3r 1               ;   0 - 32                  0 - 16    0 tiled       0   1bpp mono
0008F3r 1               ;   1 - 64                  1 - 256   1 enabled     1   2bpp 4 color
0008F3r 1               ;   2 - 128                                         2   4bpp 16 color
0008F3r 1               ;   3 - 256                                         3   8bpp 256 color
0008F3r 1               ;   bitmap mode - tilebase points to bitmap data, mapbase not used
0008F3r 1               ;   tile width = 0 is 320 pixels / tile width=1 is 640 pixels.. so could do 4bpp x 320?
0008F3r 1               ;   The palette offset (in 'H-Scroll (11:8)') modifies the color indexes of the bitmap in the same way as in the tile modes.
0008F3r 1               
0008F3r 1               VERA_L0_mapbase   = $9F2E
0008F3r 1               VERA_L0_tilebase  = $9F2F ;   Tile Base Address (16:11) | Tile Height 0-8/1-16 | Tile Width 0-8/1-16
0008F3r 1               VERA_L0_HSCROLL_L = $9F30 ;  H-Scroll (7:0)
0008F3r 1               VERA_L0_HSCROLL_H = $9F31 ;  - H-Scroll (11:8)
0008F3r 1               VERA_L0_VSCROLL_L = $9F32 ;  V-Scroll (7:0)
0008F3r 1               VERA_L0_VSCROLL_H = $9F33 ;  - V-Scroll (11:8)
0008F3r 1               
0008F3r 1               VERA_L1_config    = $9F34
0008F3r 1               VERA_L1_mapbase   = $9F35
0008F3r 1               VERA_L1_tilebase  = $9F36
0008F3r 1               VERA_L1_HSCROLL_L = $9F37 ;  H-Scroll (7:0)
0008F3r 1               VERA_L1_HSCROLL_H = $9F38 ;  - H-Scroll (11:8)
0008F3r 1               VERA_L1_VSCROLL_L = $9F39 ;  V-Scroll (7:0)
0008F3r 1               VERA_L1_VSCROLL_H = $9F3A ;  - V-Scroll (11:8)
0008F3r 1               
0008F3r 1               VSYNC_BIT         = $01
0008F3r 1               
0008F3r 1               ; VRAM Addresses
0008F3r 1               ;   Address range Description
0008F3r 1               ;   $00000 - $1F9BF Video RAM   - 129,424 bytes -> 126K is 129,024 (1F800)
0008F3r 1               ;   $1F9C0 - $1F9FF PSG registers
0008F3r 1               ;   $1FA00 - $1FBFF Palette
0008F3r 1               ;   $1FC00 - $1FFFF Sprite attributes
0008F3r 1               
0008F3r 1               VRAM_UNRESERVED   = $1A000      ;
0008F3r 1               ; sprite starts must be 32byte aligned...
0008F3r 1               ; only can go to 126K ...
0008F3r 1               VRAM_palette      = $1FA00      ;
0008F3r 1               VRAM_sprite_attributes = $1FC00
0008F3r 1               
0008F3r 1               SPRITES_ONLY_VGA = $41
0008F3r 1               
0008F3r 1               
0008F3r 1               
0008F3r 1               ; Kernal
0008F3r 1               CHROUT            = $FFD2
0008F3r 1               GETIN             = $FFE4
0008F3r 1               CINT              = $FF81
0008F3r 1               
0008F3r 1               
0008F3r 1               ; PETSCII Codes
0008F3r 1               WHITE             = $05
0008F3r 1               RETURN            = $0D
0008F3r 1               SPACE             = $20
0008F3r 1               ZERO_CHAR         = $30
0008F3r 1               SIX_CHAR          = $36
0008F3r 1               NINE_CHAR         = $39
0008F3r 1               C_CHAR            = $43
0008F3r 1               I_CHAR            = $49
0008F3r 1               O_CHAR            = $4F
0008F3r 1               T_CHAR            = $54
0008F3r 1               CLR               = $93
0008F3r 1               
0008F3r 1               ; 	$0800-$9EFF	BASIC program/variables; available to the user
0008F3r 1               WORLD_DATA = $6000 	;	so is %100 [Y 5 bits ] : [ab] 0 [X - 6 bits
0008F3r 1               SCREEN_buffer = $8000
0008F3r 1               
0008F3r 1               ; zero page layout $0022-$007F is available to user
0008F3r 1               ZP_PTR = $22
0008F3r 1               SCRATCH_PTR = $7E
0008F3r 1               ; global data
0008F3r 1  DE AD BE EF  .byte $DE,$AD,$BE,$EF
0008F7r 1  00 00        default_irq_vector:  .addr 0
0008F9r 1  01           VSYNC_counter:       .byte 1
0008FAr 1  01           camera_facing: 		 .byte 1
0008FBr 1               
0008FBr 1               
0008FBr 1               .macro stash_scratch
0008FBr 1               	STA (SCRATCH_PTR)
0008FBr 1                   INC SCRATCH_PTR
0008FBr 1               .endmacro
0008FBr 1               
0008FBr 1               custom_irq_handler:
0008FBr 1  AD 27 9F        lda VERA_isr
0008FEr 1  29 01           and #VSYNC_BIT
000900r 1  F0 03           beq @continue ; non-VSYNC IRQ, no tick update
000902r 1  EE rr rr        inc VSYNC_counter
000905r 1               @continue:
000905r 1                  ; continue to default IRQ handler
000905r 1  6C rr rr        jmp (default_irq_vector)
000908r 1                  ; RTI will happen after jump
000908r 1               
000908r 1               start:
000908r 1                 ; start of program - init globals
000908r 1  AD 14 03       lda IRQVec
00090Br 1  8D rr rr       sta default_irq_vector
00090Er 1  AD 15 03       lda IRQVec+1
000911r 1  8D rr rr       sta default_irq_vector+1
000914r 1  9C 29 9F       stz VERA_dc_video   ; disable display
000917r 1  A9 20          lda #32 ; set scale for bitmap mode - going for 160x120 mode
000919r 1  8D 2A 9F       sta VERA_dc_hscale
00091Cr 1  8D 2B 9F       sta VERA_dc_vscale
00091Fr 1                 ; for now no L0 or L1
00091Fr 1               
00091Fr 1                 ; let's stick that test sprite data into VRAM at zero for now..
00091Fr 1  9C 25 9F       stz VERA_ctrl
000922r 1  9C 20 9F       stz VERA_addr_low
000925r 1  9C 21 9F       stz VERA_addr_high
000928r 1  A9 10          lda #$10
00092Ar 1  8D 22 9F       sta VERA_addr_bank
00092Dr 1                 ; is 512 bytes at test_cell_sprite label
00092Dr 1  A2 00          ldx #0
00092Fr 1                 @copy_to_vram_loop:
00092Fr 1  BD rr rr       	  lda test_cell_sprite_16x8,X
000932r 1  8D 23 9F       	  sta VERA_data0
000935r 1  E8             	  INX
000936r 1  E0 40          	  CPX #64
000938r 1  D0 F5          	  BNE @copy_to_vram_loop
00093Ar 1  A2 00          ldx #0
00093Cr 1                 :
00093Cr 1  BD rr rr           lda test_cross_heair_8x8,X
00093Fr 1  8D 23 9F           STA VERA_data0
000942r 1  E8                 INX
000943r 1  E0 20              CPX #32
000945r 1  D0 F5              BNE :-
000947r 1  9C 20 9F       STZ VERA_addr_low
00094Ar 1  A9 FC          lda #>VRAM_sprite_attributes
00094Cr 1  8D 21 9F       sta VERA_addr_high
00094Fr 1  A9 11          lda #$11
000951r 1  8D 22 9F       sta VERA_addr_bank
000954r 1  A9 02          LDA #2
000956r 1  8D 23 9F       STA VERA_data0 ; 	address 12:5
000959r 1  9C 23 9F       STZ VERA_data0 ;  mode  | address 16:13
00095Cr 1  A9 54          LDA #84
00095Er 1  8D 23 9F       STA VERA_data0 ; 	X 7:0
000961r 1  9C 23 9F       STZ VERA_data0 ; 	X 9:8
000964r 1  A9 68          LDA #104
000966r 1  8D 23 9F       STA VERA_data0 ;  Y 7:0
000969r 1  9C 23 9F       STZ VERA_data0 ; 	Y 9:8
00096Cr 1  A9 0C          LDA #$0C
00096Er 1  8D 23 9F       STA VERA_data0 	; 	3 z depth no flip
000971r 1  9C 23 9F       STZ VERA_data0 	;	8x8 no palette offset
000974r 1               
000974r 1               
000974r 1                 ; enable display
000974r 1  9C 25 9F       stz VERA_ctrl
000977r 1  A9 41          lda #SPRITES_ONLY_VGA
000979r 1  8D 29 9F       sta VERA_dc_video
00097Cr 1               
00097Cr 1                 ; overwrite RAM IRQ vector with custom handler address
00097Cr 1  78             sei ; disable IRQ while vector is changing
00097Dr 1  A9 rr          lda #<custom_irq_handler
00097Fr 1  8D 14 03       sta IRQVec
000982r 1  A9 rr          lda #>custom_irq_handler
000984r 1  8D 15 03       sta IRQVec+1
000987r 1  A9 01          lda #VSYNC_BIT ; make VERA only generate VSYNC IRQs
000989r 1  8D 26 9F       sta VERA_ien
00098Cr 1  58             cli ; enable IRQ now that vector is properly set
00098Dr 1               
00098Dr 1                 ; main loop here...
00098Dr 1  A9 FF           LDA #$FF
00098Fr 1  8D rr rr        STA camera_facing
000992r 1               @FRAME_CHECK:
000992r 1  A9 04           lda #4
000994r 1                 @frame_A:
000994r 1  CB              wai
000995r 1  AC rr rr        ldy VSYNC_counter
000998r 1  F0 FA           beq @frame_A
00099Ar 1  9C rr rr        stz VSYNC_counter
00099Dr 1  3A              DEC A
00099Er 1  D0 F4           BNE @frame_A
0009A0r 1               
0009A0r 1                  ; poll keyboard for input
0009A0r 1  20 E4 FF        jsr GETIN
0009A3r 1  C9 00           cmp #0
0009A5r 1  F0 EB           beq @FRAME_CHECK
0009A7r 1  C9 20           cmp #SPACE
0009A9r 1  D0 08           bne @cleanup_and_exit
0009ABr 1               
0009ABr 1                  ; switch to next bearing
0009ABr 1  EE rr rr        INC camera_facing
0009AEr 1                  ; update screen
0009AEr 1                  ; jsr draw_world
0009AEr 1  20 rr rr        jsr draw_test
0009B1r 1  80 DF           bra @FRAME_CHECK
0009B3r 1               
0009B3r 1               @cleanup_and_exit:
0009B3r 1                  ; restore default IRQ vector
0009B3r 1  78              sei
0009B4r 1  AD rr rr        lda default_irq_vector
0009B7r 1  8D 14 03        sta IRQVec
0009BAr 1  AD rr rr        lda default_irq_vector+1
0009BDr 1  8D 15 03        sta IRQVec+1
0009C0r 1  58              cli
0009C1r 1  20 81 FF        jsr CINT
0009C4r 1  60              rts
0009C5r 1               
0009C5r 1               ; all the objects need to get into a structure to be drawn at each screen Y..
0009C5r 1               ; need object type, screenX .. store back to front .. track # objects to be drawn ?
0009C5r 1               ; there's 120 lines on screen.. up to say 32 objects per line would need about 8K RAM for the list.. each line needs 64 bytes
0009C5r 1               
0009C5r 1               draw_test:
0009C5r 1  A9 08        	lda #8
0009C7r 1  8D 20 9F     	STA VERA_addr_low
0009CAr 1  A9 FC            lda #>VRAM_sprite_attributes
0009CCr 1  8D 21 9F         sta VERA_addr_high
0009CFr 1  A9 11            lda #$11
0009D1r 1  8D 22 9F         sta VERA_addr_bank
0009D4r 1               
0009D4r 1               
0009D4r 1                   ; load increments and set start position...
0009D4r 1  AE rr rr         LDX camera_facing
0009D7r 1  8A               TXA
0009D8r 1  18               CLC
0009D9r 1  69 80            ADC #128
0009DBr 1  85 33            STA ZP_PTR+17
0009DDr 1                   ; increments across rows
0009DDr 1  64 32            STZ ZP_PTR+16   ; 	is driving me nuts so ..
0009DFr 1  A9 80            LDA #128
0009E1r 1  85 2E            STA ZP_PTR+12 	;	next row  start XL at ZP_PTR+12
0009E3r 1  85 30            STA ZP_PTR+14 	;	next row  start YL at ZP_PTR+14
0009E5r 1  A9 50            LDA #80
0009E7r 1  85 2F            STA ZP_PTR+13 	;	next row start at XH ZP_PTR+13
0009E9r 1  A9 68            LDA #104
0009EBr 1  85 31         	STA ZP_PTR+15 	;	next row start YH at ZP_PTR+15
0009EDr 1               
0009EDr 1               
0009EDr 1  BD rr rr         LDA ACROSS_ROW_X_L,X
0009F0r 1  85 26            STA ZP_PTR+4 	; 	ZP_PTR+4 = spriteX increment Low byte
0009F2r 1  BD rr rr         LDA ACROSS_ROW_X_H,X
0009F5r 1  85 27            STA ZP_PTR+5 	;	ZP_PTR+4 = spriteX increment high byte
0009F7r 1  BD rr rr         LDA ACROSS_ROW_Y_L,X
0009FAr 1  85 28            STA ZP_PTR+6 	; 	ZP_PTR+6 = spriteY increment low byte
0009FCr 1  BD rr rr         LDA ACROSS_ROW_Y_H,X
0009FFr 1  85 29            STA ZP_PTR+7 	; 	ZP_PTR+3 = spriteY increment
000A01r 1                   ; increments o next rows
000A01r 1  BD rr rr         LDA NEXT_ROW_X_L,X
000A04r 1  85 2A            STA ZP_PTR+8 	; 	ZP_PTR+4 = spriteX increment Low byte
000A06r 1  BD rr rr         LDA NEXT_ROW_X_H,X
000A09r 1  85 2B            STA ZP_PTR+9 	;	ZP_PTR+4 = spriteX increment high byte
000A0Br 1  BD rr rr         LDA NEXT_ROW_Y_L,X
000A0Er 1  85 2C            STA ZP_PTR+10 	; 	ZP_PTR+6 = spriteY increment low byte
000A10r 1  BD rr rr         LDA NEXT_ROW_Y_H,X
000A13r 1  85 2D            STA ZP_PTR+11	; 	ZP_PTR+3 = spriteY increment
000A15r 1               
000A15r 1  A9 10            LDA #16
000A17r 1  85 40            STA ZP_PTR+30
000A19r 1               
000A19r 1  A0 64            LDY #100		;	amount of sprites we can write max
000A1Br 1                 @quad_loop:
000A1Br 1                 @do_row:
000A1Br 1  A5 2E          	LDA ZP_PTR+12 	;
000A1Dr 1  85 22          	STA ZP_PTR 		;	current row XL
000A1Fr 1  65 2A            ADC ZP_PTR+8
000A21r 1  85 2E            STA ZP_PTR+12 	;	next row XL
000A23r 1  A5 2F            LDA ZP_PTR+13 	;
000A25r 1  C9 98            CMP #152
000A27r 1  B0 60            BCS @next_quad 		;	off screen
000A29r 1  85 23            STA ZP_PTR+1 	;	current row XH
000A2Br 1  65 2B            ADC ZP_PTR+9 	;
000A2Dr 1  85 2F            STA ZP_PTR+13 	;	next row XH
000A2Fr 1               
000A2Fr 1  A5 30            LDA ZP_PTR+14
000A31r 1  85 24            STA ZP_PTR+2 	;	current row YL
000A33r 1  65 2C            ADC ZP_PTR+10
000A35r 1  85 30            STA ZP_PTR+14 	;	next row YL
000A37r 1  A5 31            LDA ZP_PTR+15
000A39r 1  C9 78            CMP #120
000A3Br 1  B0 4C            BCS @next_quad;	off screen
000A3Dr 1  85 25            STA ZP_PTR+3
000A3Fr 1  65 2D            ADC ZP_PTR+11
000A41r 1  85 31            STA ZP_PTR+15 	;	next row YH
000A43r 1                 @forward_row_loop:
000A43r 1  9C 23 9F           STZ VERA_data0 ; 	address 12:5
000A46r 1  9C 23 9F           STZ VERA_data0 ;  mode  | address 16:13
000A49r 1  A5 23              LDA ZP_PTR+1
000A4Br 1  8D 23 9F           STA VERA_data0 ; 	X 7:0
000A4Er 1  9C 23 9F           STZ VERA_data0 ; 	X 9:8
000A51r 1  A5 25              LDA ZP_PTR+3  ; 	spriteY
000A53r 1  8D 23 9F           STA VERA_data0 ;  Y 7:0
000A56r 1  9C 23 9F           STZ VERA_data0 ; 	Y 9:8
000A59r 1  A9 0C              LDA #$0C
000A5Br 1  8D 23 9F           STA VERA_data0 	; 	3 z depth no flip
000A5Er 1  A9 10              LDA #$10 			; 	16x8 no palette offset
000A60r 1  A5 40              LDA ZP_PTR+30;
000A62r 1  8D 23 9F           STA VERA_data0
000A65r 1                   ; increment X
000A65r 1  A5 22              LDA ZP_PTR 	;	load X_l
000A67r 1  65 26              ADC ZP_PTR+4
000A69r 1  85 22              STA ZP_PTR
000A6Br 1               
000A6Br 1  A5 23              LDA ZP_PTR+1
000A6Dr 1  65 27              ADC ZP_PTR+5
000A6Fr 1  C9 98              CMP #152
000A71r 1  B0 A8              BCS @do_row 		; covers negatives even..
000A73r 1  85 23              STA ZP_PTR+1
000A75r 1                   ; increment Y
000A75r 1  A5 24              LDA ZP_PTR+2 	;
000A77r 1  65 28              ADC ZP_PTR+6
000A79r 1  85 24              STA ZP_PTR+2
000A7Br 1               
000A7Br 1  A5 25              LDA ZP_PTR+3
000A7Dr 1  65 29              ADC ZP_PTR+7
000A7Fr 1  C9 78              CMP #120
000A81r 1  B0 98              BCS @do_row 		; 	 covers negatives even..
000A83r 1  85 25              STA ZP_PTR+3
000A85r 1  88                 DEY
000A86r 1  D0 BB              BNE @forward_row_loop
000A88r 1                 @end:
000A88r 1  60                rts
000A89r 1                 @next_quad:
000A89r 1  E6 40          	  inc ZP_PTR+30
000A8Br 1  A6 32          	  LDX ZP_PTR+16 	;
000A8Dr 1  8A             	  TXA
000A8Er 1  18             	  CLC
000A8Fr 1  69 02          	  ADC #2
000A91r 1  85 32          	  STA ZP_PTR+16
000A93r 1  7C rr rr       	  jmp (@t_quads,X) 	;
000A96r 1                 	@t_quads:
000A96r 1  rr rr          	  .addr @quad_1
000A98r 1  rr rr          	  .addr @quad_2
000A9Ar 1  rr rr          	  .addr @quad_3
000A9Cr 1  rr rr          	  .addr @end
000A9Er 1                 @quad_1: 	;	need invert across row to make next bits . next row stays same
000A9Er 1  A6 33        	LDX ZP_PTR+17
000AA0r 1  BD rr rr         LDA ACROSS_ROW_X_L,X
000AA3r 1  85 26            STA ZP_PTR+4 	; 	ZP_PTR+4 = spriteX increment Low byte
000AA5r 1  69 80            ADC #128
000AA7r 1  85 2E            STA ZP_PTR+12
000AA9r 1  BD rr rr         LDA ACROSS_ROW_X_H,X
000AACr 1  85 27            STA ZP_PTR+5 	;	ZP_PTR+4 = spriteX increment high byte
000AAEr 1  69 50            ADC #80
000AB0r 1  85 2F            STA ZP_PTR+13
000AB2r 1  BD rr rr         LDA ACROSS_ROW_Y_L,X
000AB5r 1  85 28            STA ZP_PTR+6 	; 	ZP_PTR+6 = spriteY increment low byte
000AB7r 1  69 80            ADC #128
000AB9r 1  85 30            STA ZP_PTR+14
000ABBr 1  BD rr rr         LDA ACROSS_ROW_Y_H,X
000ABEr 1  85 29            STA ZP_PTR+7 	; 	ZP_PTR+3 = spriteY increment
000AC0r 1  69 68            ADC #104
000AC2r 1  85 31            STA ZP_PTR+15
000AC4r 1  4C rr rr         jmp @quad_loop
000AC7r 1               @quad_2: ; invert next row - start 1 row up
000AC7r 1  A6 33        	LDX ZP_PTR+17
000AC9r 1  BD rr rr         LDA NEXT_ROW_X_L,X
000ACCr 1  85 2A            STA ZP_PTR+8 	; 	ZP_PTR+4 = spriteX increment Low byte
000ACEr 1  69 80            ADC #128
000AD0r 1  85 2E            STA ZP_PTR+12
000AD2r 1  85 34            STA ZP_PTR+18
000AD4r 1               
000AD4r 1  BD rr rr         LDA NEXT_ROW_X_H,X
000AD7r 1  85 2B            STA ZP_PTR+9 	;	ZP_PTR+4 = spriteX increment high byte
000AD9r 1  69 50            ADC #80
000ADBr 1  85 2F            STA ZP_PTR+13
000ADDr 1  85 35            STA ZP_PTR+19
000ADFr 1               
000ADFr 1  BD rr rr         LDA NEXT_ROW_Y_L,X
000AE2r 1  85 2C            STA ZP_PTR+10 	; 	ZP_PTR+6 = spriteY increment low byte
000AE4r 1  69 80            ADC #128
000AE6r 1  85 30            STA ZP_PTR+14
000AE8r 1  85 36            STA ZP_PTR+20
000AEAr 1               
000AEAr 1  BD rr rr         LDA NEXT_ROW_Y_H,X
000AEDr 1  85 2D            STA ZP_PTR+11 	; 	ZP_PTR+3 = spriteY increment
000AEFr 1  69 68            ADC #104
000AF1r 1  85 31            STA ZP_PTR+15
000AF3r 1  85 37            STA ZP_PTR+21
000AF5r 1  4C rr rr         jmp @quad_loop
000AF8r 1               @quad_3: ; restore across row and increment ..
000AF8r 1  AE rr rr     	LDX camera_facing
000AFBr 1  BD rr rr         LDA ACROSS_ROW_X_L,X
000AFEr 1  85 26            STA ZP_PTR+4 	; 	ZP_PTR+4 = spriteX increment Low byte
000B00r 1  65 34            ADC ZP_PTR+18
000B02r 1  85 2E            STA ZP_PTR+12
000B04r 1  BD rr rr         LDA ACROSS_ROW_X_H,X
000B07r 1  85 27            STA ZP_PTR+5 	;	ZP_PTR+4 = spriteX increment high byte
000B09r 1  65 35            ADC ZP_PTR+19
000B0Br 1  85 2F            STA ZP_PTR+13
000B0Dr 1  BD rr rr         LDA ACROSS_ROW_Y_L,X
000B10r 1  85 28            STA ZP_PTR+6 	; 	ZP_PTR+6 = spriteY increment low byte
000B12r 1  65 36            ADC ZP_PTR+20
000B14r 1  85 30            STA ZP_PTR+14
000B16r 1  BD rr rr         LDA ACROSS_ROW_Y_H,X
000B19r 1  85 29            STA ZP_PTR+7 	; 	ZP_PTR+3 = spriteY increment
000B1Br 1  65 37            ADC ZP_PTR+21
000B1Dr 1  85 31            STA ZP_PTR+15
000B1Fr 1  4C rr rr         jmp @quad_loop
000B22r 1               
000B22r 1               draw_world:
000B22r 1                 ; clear first entry for each line...
000B22r 1  64 22          STZ ZP_PTR
000B24r 1  A9 80          LDA #>SCREEN_buffer
000B26r 1  85 23          STA ZP_PTR+1
000B28r 1  A2 1E          LDX #30
000B2Ar 1  A9 00          LDA #0
000B2Cr 1                 @loop:
000B2Cr 1  A8               TAY
000B2Dr 1  91 22            STA (ZP_PTR),y 	;	set first buffer entry for line mod 4 = 0
000B2Fr 1  A0 40            LDY #64 		; 	move buffer pointer to next line
000B31r 1  91 22            STA (ZP_PTR),y 	;	set first buffer entry for line mode 4 =1
000B33r 1  A0 80            LDY #128 		; 	move buffer pointer to next line
000B35r 1  91 22            STA (ZP_PTR),y 	;	set first buffer entry for line mode 4 =2
000B37r 1  A0 C0            LDY #192 		; 	move buffer pointer to next line
000B39r 1  91 22            STA (ZP_PTR),y 	;	set first buffer entry for line mode 4 =3
000B3Br 1  E6 23            INC ZP_PTR+1 	;	next page plz
000B3Dr 1  CA               DEX
000B3Er 1  D0 EC            BNE @loop
000B40r 1                 ; fetch bearing data ..
000B40r 1  AD rr rr       LDA camera_facing
000B43r 1  0A             ASL
000B44r 1  AA             TAX
000B45r 1  7C rr rr       jmp (@T_BEARINGS,X)
000B48r 1               @T_BEARINGS:
000B48r 1  rr rr        	.addr BEARING_ZERO
000B4Ar 1  rr rr        	.addr BEARING_ONE
000B4Cr 1  rr rr        	.addr BEARING_TWO
000B4Er 1               
000B4Er 1               BEARING_ZERO:
000B4Er 1  A9 70            LDA #112 ; starting at screen Y=112
000B50r 1                 @E_loop:
000B50r 1  85 24            STA ZP_PTR+2 ; stash the Y we're working at...
000B52r 1  64 22              STZ ZP_PTR   ; zero this out to use pointer ..
000B54r 1  4A                 LSR
000B55r 1  66 22              ROR ZP_PTR ;
000B57r 1  4A                 LSR
000B58r 1  66 22              ROR ZP_PTR ; because is 64 avail for each
000B5Ar 1  09 80              ORA #>SCREEN_buffer ; making pointer woot!
000B5Cr 1  85 23              STA ZP_PTR+1 ; ZP_PTR points to the line..
000B5Er 1  A0 00              LDY #0 	;	set to first offset in that buffer.. we'll add other objects to the lines later so this will always be null object
000B60r 1  A9 08              LDA #8 	;   start at X=0
000B62r 1                   @E_loopE:
000B62r 1  AA                   TAX
000B63r 1  A9 02                LDA #2 	;	water type
000B65r 1  91 22                STA (ZP_PTR),y
000B67r 1  C8                   iny
000B68r 1  8A                   TXA ;	get X value
000B69r 1  91 22                STA (ZP_PTR),y
000B6Br 1  C8                   iny
000B6Cr 1  18                   CLC
000B6Dr 1  69 10                adc #16
000B6Fr 1  C9 88                CMP #136
000B71r 1  90 EF                BCC @E_loopE 	;kk
000B73r 1  A9 00              LDA #0
000B75r 1  91 22              STA (ZP_PTR),y ; stash zero value to end the thing
000B77r 1  A5 24              LDA ZP_PTR+2
000B79r 1  E9 0F              SBC #15 	;	borrow is set ...
000B7Br 1  B0 D3              BCS @E_loop ; still spots left on screen.. otay
000B7Dr 1  4C rr rr         jmp update_screen
000B80r 1               BEARING_ONE:
000B80r 1               BEARING_TWO: ; 30 degrees ..
000B80r 1  A9 74            LDA #116 ; starting at screen Y=112
000B82r 1                 @E_loop:
000B82r 1  85 24            STA ZP_PTR+2 ; stash the Y we're working at...
000B84r 1  64 22              STZ ZP_PTR   ; zero this out to use pointer ..
000B86r 1  4A                 LSR
000B87r 1  66 22              ROR ZP_PTR ;
000B89r 1  4A                 LSR
000B8Ar 1  66 22              ROR ZP_PTR ; because is 64 avail for each
000B8Cr 1  09 80              ORA #>SCREEN_buffer ; making pointer woot!
000B8Er 1  85 23              STA ZP_PTR+1 ; ZP_PTR points to the line..
000B90r 1  A0 00              LDY #0 	;	set to first offset in that buffer.. we'll add other objects to the lines later so this will always be null object
000B92r 1  A9 0C              LDA #12 	;   start at X=0
000B94r 1                   @E_loopE:
000B94r 1  AA                   TAX
000B95r 1  A9 02                LDA #2 	;	water type
000B97r 1  91 22                STA (ZP_PTR),y
000B99r 1  C8                   iny
000B9Ar 1  8A                   TXA ;	get X value
000B9Br 1  91 22                STA (ZP_PTR),y
000B9Dr 1  C8                   iny
000B9Er 1  18                   CLC
000B9Fr 1  69 1C                adc #28
000BA1r 1  C9 88                CMP #136
000BA3r 1  90 EF                BCC @E_loopE 	;kk
000BA5r 1  A9 00              LDA #0
000BA7r 1  91 22              STA (ZP_PTR),y ; stash zero value to end the thing
000BA9r 1  A5 24              LDA ZP_PTR+2
000BABr 1  E9 0D              SBC #13 	;	borrow is set ...
000BADr 1  B0 D3              BCS @E_loop ; still spots left on screen.. otay
000BAFr 1  4C rr rr         jmp update_screen
000BB2r 1               
000BB2r 1  60             rts
000BB3r 1               
000BB3r 1               update_screen:
000BB3r 1  9C 20 9F       stz VERA_addr_low
000BB6r 1  A9 FC          lda #>VRAM_sprite_attributes
000BB8r 1  8D 21 9F       sta VERA_addr_high
000BBBr 1  A9 11          lda #$11
000BBDr 1  8D 22 9F       sta VERA_addr_bank
000BC0r 1  A9 77            LDA #119
000BC2r 1  85 24            STA ZP_PTR+2 ; stash line we at ..
000BC4r 1  64 22              STZ ZP_PTR
000BC6r 1  4A                 LSR
000BC7r 1  66 22              ROR ZP_PTR ;
000BC9r 1  4A                 LSR
000BCAr 1  66 22              ROR ZP_PTR ; because is 64 avail for each
000BCCr 1  09 80              ORA #>SCREEN_buffer ; making pointer woot!
000BCEr 1  85 23              STA ZP_PTR+1 ; ZP_PTR points to the line..
000BD0r 1                 @y_line_loop:
000BD0r 1  A0 00              LDY #0 ; set to check that first point ..
000BD2r 1  C6 24              dec ZP_PTR+2
000BD4r 1                   @do_check_line:
000BD4r 1  B1 22                LDA (ZP_PTR),Y ;	get type
000BD6r 1  C8                   INY
000BD7r 1  AA                   TAX
000BD8r 1  7C rr rr             JMP (@T_objtypes,X) ;
000BDBr 1                   @T_objtypes:
000BDBr 1  rr rr                .addr @end_line
000BDDr 1  rr rr                .addr @do_water
000BDFr 1                   @do_water:
000BDFr 1  9C 23 9F           stz VERA_data0 	; 	address 12:5
000BE2r 1  9C 23 9F           STZ VERA_data0 	; 	4bit color address 16:13
000BE5r 1  B1 22              LDA (ZP_PTR),Y  	;	get the X
000BE7r 1  C8                 iny
000BE8r 1  8D 23 9F           STA VERA_data0 	;	X
000BEBr 1  9C 23 9F           STZ VERA_data0 	;	 X
000BEEr 1  A5 24              LDA ZP_PTR+2
000BF0r 1  8D 23 9F           STA VERA_data0 	;	y
000BF3r 1  9C 23 9F           STZ VERA_data0 	; 	y
000BF6r 1  A9 0C              LDA #$0C
000BF8r 1  8D 23 9F           STA VERA_data0 	; 	3 z depth no flip
000BFBr 1  A9 D0              LDA #$D0 			; 	16x64 no palette offset
000BFDr 1  8D 23 9F           STA VERA_data0
000C00r 1  80 D2              bra @do_check_line
000C02r 1                   @end_line:
000C02r 1  38                   SEC
000C03r 1  A5 22                LDA ZP_PTR
000C05r 1  E9 40                SBC #64
000C07r 1  85 22                STA ZP_PTR
000C09r 1  A5 23                LDA ZP_PTR+1
000C0Br 1  E9 00                SBC #0
000C0Dr 1  85 23                STA ZP_PTR+1
000C0Fr 1  C9 80                CMP #>SCREEN_buffer
000C11r 1  B0 BD                BCS @y_line_loop
000C13r 1  60           rts
000C14r 1               
000C14r 1               test_cross_heair_8x8: 	; 	8x8x16 color = 32 bytes
000C14r 1               ; 	   01   23   45   67
000C14r 1  11 00 00 11  .byte $11, $00, $00, $11
000C18r 1  10 00 00 01  .byte $10, $00, $00, $01
000C1Cr 1  00 00 00 00  .byte $00, $00, $00, $00
000C20r 1  00 01 10 00  .byte $00, $01, $10, $00
000C24r 1  00 01 10 00  .byte $00, $01, $10, $00
000C28r 1  00 00 00 00  .byte $00, $00, $00, $00
000C2Cr 1  10 00 00 01  .byte $10, $00, $00, $01
000C30r 1  11 00 00 11  .byte $11, $00, $00, $11
000C34r 1               
000C34r 1               test_cell_sprite_16x8: 	;	16x8x16 color = 64 bytes
000C34r 1               ; 	   01   23   45   67   89   AB   CD   EF
000C34r 1  00 00 66 66  .byte $00, $00, $66, $66, $66, $66, $00, $00 	; 	0
000C38r 1  66 66 00 00  
000C3Cr 1  00 66 EE EE  .byte $00, $66, $EE, $EE, $EE, $EE, $66, $00  	;	1
000C40r 1  EE EE 66 00  
000C44r 1  06 EE EE EE  .byte $06, $EE, $EE, $EE, $EE, $EE, $EE, $60 	;	2
000C48r 1  EE EE EE 60  
000C4Cr 1  6E EE EE EE  .byte $6E, $EE, $EE, $EE, $EE, $EE, $EE, $E6 	;	3
000C50r 1  EE EE EE E6  
000C54r 1  6E EE EE EE  .byte $6E, $EE, $EE, $EE, $EE, $EE, $EE, $E6 	;	4
000C58r 1  EE EE EE E6  
000C5Cr 1  06 EE EE EE  .byte $06, $EE, $EE, $EE, $EE, $EE, $EE, $60 	;	5
000C60r 1  EE EE EE 60  
000C64r 1  00 66 EE EE  .byte $00, $66, $EE, $EE, $EE, $EE, $66, $00  	;	6
000C68r 1  EE EE 66 00  
000C6Cr 1  00 00 66 66  .byte $00, $00, $66, $66, $66, $66, $00, $00 	; 	7
000C70r 1  66 66 00 00  
000C74r 1               
000C74r 1               test_cell_sprite: 	;	is 16x64x16 bit = 512 bytes
000C74r 1               ; 	   01   23   45   67   89   AB   CD   EF
000C74r 1  00 00 66 66  .byte $00, $00, $66, $66, $66, $66, $00, $00 	; 	0
000C78r 1  66 66 00 00  
000C7Cr 1  00 66 EE EE  .byte $00, $66, $EE, $EE, $EE, $EE, $66, $00  	;	1
000C80r 1  EE EE 66 00  
000C84r 1  06 EE EE EE  .byte $06, $EE, $EE, $EE, $EE, $EE, $EE, $60 	;	2
000C88r 1  EE EE EE 60  
000C8Cr 1  6E EE EE EE  .byte $6E, $EE, $EE, $EE, $EE, $EE, $EE, $E6 	;	3
000C90r 1  EE EE EE E6  
000C94r 1  6E EE EE EE  .byte $6E, $EE, $EE, $EE, $EE, $EE, $EE, $E6 	;	4
000C98r 1  EE EE EE E6  
000C9Cr 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $E6, $66 	;	5
000CA0r 1  EE EE E6 66  
000CA4r 1  66 66 EE EE  .byte $66, $66, $EE, $EE, $EE, $EE, $66, $66 	;	6
000CA8r 1  EE EE 66 66  
000CACr 1  EE 66 66 66  .byte $EE, $66, $66, $66, $66, $66, $66, $EE 	;	7
000CB0r 1  66 66 66 EE  
000CB4r 1               
000CB4r 1  EE EE 66 66  .byte $EE, $EE, $66, $66, $66, $66, $EE, $EE 	; 	8
000CB8r 1  66 66 EE EE  
000CBCr 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
000CC0r 1  EE 66 EE EE  
000CC4r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
000CC8r 1  66 EE 66 EE  
000CCCr 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
000CD0r 1  EE EE EE 66  
000CD4r 1               
000CD4r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	12
000CD8r 1  EE EE EE EE  
000CDCr 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
000CE0r 1  EE 66 EE EE  
000CE4r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
000CE8r 1  66 EE 66 EE  
000CECr 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
000CF0r 1  EE EE EE 66  
000CF4r 1               
000CF4r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	16
000CF8r 1  EE EE EE EE  
000CFCr 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
000D00r 1  EE 66 EE EE  
000D04r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
000D08r 1  66 EE 66 EE  
000D0Cr 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
000D10r 1  EE EE EE 66  
000D14r 1               
000D14r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	20
000D18r 1  EE EE EE EE  
000D1Cr 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
000D20r 1  EE 66 EE EE  
000D24r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
000D28r 1  66 EE 66 EE  
000D2Cr 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
000D30r 1  EE EE EE 66  
000D34r 1               
000D34r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	24
000D38r 1  EE EE EE EE  
000D3Cr 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
000D40r 1  EE 66 EE EE  
000D44r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
000D48r 1  66 EE 66 EE  
000D4Cr 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
000D50r 1  EE EE EE 66  
000D54r 1               
000D54r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	28
000D58r 1  EE EE EE EE  
000D5Cr 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
000D60r 1  EE 66 EE EE  
000D64r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
000D68r 1  66 EE 66 EE  
000D6Cr 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
000D70r 1  EE EE EE 66  
000D74r 1               
000D74r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	32
000D78r 1  EE EE EE EE  
000D7Cr 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
000D80r 1  EE 66 EE EE  
000D84r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
000D88r 1  66 EE 66 EE  
000D8Cr 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
000D90r 1  EE EE EE 66  
000D94r 1               
000D94r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	36
000D98r 1  EE EE EE EE  
000D9Cr 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
000DA0r 1  EE 66 EE EE  
000DA4r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
000DA8r 1  66 EE 66 EE  
000DACr 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
000DB0r 1  EE EE EE 66  
000DB4r 1               
000DB4r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	40
000DB8r 1  EE EE EE EE  
000DBCr 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
000DC0r 1  EE 66 EE EE  
000DC4r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
000DC8r 1  66 EE 66 EE  
000DCCr 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
000DD0r 1  EE EE EE 66  
000DD4r 1               
000DD4r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	44
000DD8r 1  EE EE EE EE  
000DDCr 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
000DE0r 1  EE 66 EE EE  
000DE4r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
000DE8r 1  66 EE 66 EE  
000DECr 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
000DF0r 1  EE EE EE 66  
000DF4r 1               
000DF4r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	48
000DF8r 1  EE EE EE EE  
000DFCr 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
000E00r 1  EE 66 EE EE  
000E04r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
000E08r 1  66 EE 66 EE  
000E0Cr 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
000E10r 1  EE EE EE 66  
000E14r 1               
000E14r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	52
000E18r 1  EE EE EE EE  
000E1Cr 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
000E20r 1  EE 66 EE EE  
000E24r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
000E28r 1  66 EE 66 EE  
000E2Cr 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
000E30r 1  EE EE EE 66  
000E34r 1               
000E34r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	56
000E38r 1  EE EE EE EE  
000E3Cr 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
000E40r 1  EE 66 EE EE  
000E44r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
000E48r 1  66 EE 66 EE  
000E4Cr 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
000E50r 1  EE EE EE 66  
000E54r 1               
000E54r 1  EE EE EE EE  .byte $EE, $EE, $EE, $EE, $EE, $EE, $EE, $EE 	; 	60
000E58r 1  EE EE EE EE  
000E5Cr 1  EE EE 66 EE  .byte $EE, $EE, $66, $EE, $EE, $66, $EE, $EE 	;  	61
000E60r 1  EE 66 EE EE  
000E64r 1  EE 66 EE 66  .byte $EE, $66, $EE, $66, $66, $EE, $66, $EE 	; 	62
000E68r 1  66 EE 66 EE  
000E6Cr 1  66 EE EE EE  .byte $66, $EE, $EE, $EE, $EE, $EE, $EE, $66 	; 	63
000E70r 1  EE EE EE 66  
000E73r 1               
