ca65 V2.19 - Git 8e6c0c1
Main file   : walltest.s
Current file: walltest.s

000000r 1               ; This is test for rending 1 set of walls ...
000000r 1               .include "hfs_x16_stub_debug_font.inc"
000000r 2               ; now we're at RAM address $0810 - there's 240 bytes from here to next page boundary.. code to load bank files could go here later...
000000r 2               ; for now, want to be sure we end at page boundary
000000r 2               
000000r 2               ;
000000r 2               DECODE_DEBUG_FONT_TO_VRAM:  ; 080D debug font start at top of VRAM $0000 .. debug blank $10
000000r 2  9C 29 9F       stz $9F29 ; 080D  3 bytes   clear DCSEL set addr 0
000003r 2  9C 20 9F       stz $9F20 ; 0810  3 bytes     vera addr low
000006r 2  9C 21 9F       stz $9F21 ; 0813  3 bytes     high
000009r 2  A9 10          lda #$10  ; 0816  2 bytes     for increment
00000Br 2  8D 22 9F       sta $9F22 ; 0818  3           bank
00000Er 2  64 30          stz $30   ; 081B  2   zero low byte
000010r 2  4A             lsr a  ; 081D  1
000011r 2  85 31          sta $31   ; 081F  2
000013r 2  A9 23          lda #$23   ; 0821  2 bytes     vera data0 is $9f23
000015r 2  85 40          sta $40   ; 0823   2  ZP address
000017r 2  A9 9F          lda #$9F  ; 0825  2
000019r 2  85 41          sta $41   ; 0827  2   ;   ok writing from ($30) to ($40) using indirect ZP
00001Br 2  A0 42          ldy #66 ; 081B  start of font data ..
00001Dr 2                 @DECODE_DEBUG_FONT_TO_VRAM:
00001Dr 2  A9 00              lda #0
00001Fr 2  92 40              sta ($40) ; 081D 2 bytes.. top row of tile
000021r 2  92 40              sta ($40) ; 039 2    row 6
000023r 2  92 40              sta ($40) ; 083B 2    row 7
000025r 2  A2 05              ldx #5 ; +2 bytes     83
000027r 2                     @DECODE_DEBUG_FONT_TO_VRAM_INNER:
000027r 2  B1 30                lda ($30),y ; 081F 2 ;    row 1
000029r 2  92 40                sta ($40) ; 0821  2
00002Br 2  C8                   iny ;     0823    1             -4 copies of this loop = -20    63
00002Cr 2  CA                   dex ;   +1 byte     64
00002Dr 2  D0 F8                bne @DECODE_DEBUG_FONT_TO_VRAM_INNER ; +2 bytes     66
00002Fr 2  98                 tya
000030r 2  D0 EB              bne @DECODE_DEBUG_FONT_TO_VRAM      ;   083E
000032r 2  4C rr rr       jmp INIT ; 0840   3
000035r 2               END_DEBUG_FONT_TO_VRAM: ; 0843  byte 67 ... 256-66 = 190/5 = up to 38 chars in the font, including blank.. 37 chars..
000035r 2               ;   alpha + 0-9 = 36 chars.. so room for 1 more maybe
000035r 2               
000035r 2               
000035r 2               
000035r 2               
000035r 2               
000035r 2               
000035r 2               
000035r 2               
000035r 2               
000035r 2               
000035r 2               
000035r 2               
000035r 2               
000035r 2               
000035r 2               
000035r 2               
000035r 2               
000035r 2               
000035r 2               
000035r 2               
000035r 2               
000035r 2               
000035r 2               
000035r 2               
000035r 2               
000035r 2               
000035r 2               
000035r 2               
000035r 2               
000035r 2               HFS_DEBUG_FONT_1BPP: ; is 8x5 font, 16*5=80 bytes hex digits 0-F ..
000035r 2  3C           .byte %00111100 ; 0    0847     3C
000036r 2  46           .byte %01000110 ; 46
000037r 2  52           .byte %01010010 ; 52
000038r 2  62           .byte %01100010 ; 62
000039r 2  3C           .byte %00111100 ; 3C
00003Ar 2  04           .byte %00000100 ; 1     084C
00003Br 2  04           .byte %00000100
00003Cr 2  04           .byte %00000100
00003Dr 2  04           .byte %00000100
00003Er 2  04           .byte %00000100
00003Fr 2  3C           .byte %00111100 ; 2     0851
000040r 2  42           .byte %01000010
000041r 2  0C           .byte %00001100
000042r 2  10           .byte %00010000
000043r 2  7E           .byte %01111110
000044r 2  3C           .byte %00111100 ; 3     0856
000045r 2  42           .byte %01000010
000046r 2  0C           .byte %00001100
000047r 2  42           .byte %01000010
000048r 2  3C           .byte %00111100
000049r 2  42           .byte %01000010 ; 4     085b
00004Ar 2  42           .byte %01000010
00004Br 2  7E           .byte %01111110
00004Cr 2  02           .byte %00000010
00004Dr 2  02           .byte %00000010
00004Er 2  7E           .byte %01111110 ; 5     0860
00004Fr 2  40           .byte %01000000
000050r 2  7C           .byte %01111100
000051r 2  02           .byte %00000010
000052r 2  3C           .byte %00111100
000053r 2  3C           .byte %00111100 ; 6
000054r 2  40           .byte %01000000
000055r 2  78           .byte %01111000
000056r 2  46           .byte %01000110
000057r 2  3C           .byte %00111100
000058r 2  3C           .byte %00111100 ; 7     0865
000059r 2  04           .byte %00000100
00005Ar 2  08           .byte %00001000
00005Br 2  10           .byte %00010000
00005Cr 2  10           .byte %00010000
00005Dr 2  3C           .byte %00111100 ; 8     086a
00005Er 2  42           .byte %01000010
00005Fr 2  3C           .byte %00111100
000060r 2  42           .byte %01000010
000061r 2  3C           .byte %00111100
000062r 2  3C           .byte %00111100 ; 9     086f
000063r 2  42           .byte %01000010
000064r 2  3E           .byte %00111110
000065r 2  02           .byte %00000010
000066r 2  02           .byte %00000010
000067r 2  18           .byte %00011000 ; A     0874
000068r 2  24           .byte %00100100
000069r 2  7E           .byte %01111110
00006Ar 2  42           .byte %01000010
00006Br 2  42           .byte %01000010
00006Cr 2  78           .byte %01111000 ; B     0879
00006Dr 2  44           .byte %01000100
00006Er 2  78           .byte %01111000
00006Fr 2  46           .byte %01000110
000070r 2  78           .byte %01111000
000071r 2  3C           .byte %00111100 ; C     087e
000072r 2  42           .byte %01000010
000073r 2  40           .byte %01000000
000074r 2  42           .byte %01000010
000075r 2  3C           .byte %00111100
000076r 2  78           .byte %01111000 ; D     0883
000077r 2  44           .byte %01000100
000078r 2  42           .byte %01000010
000079r 2  44           .byte %01000100
00007Ar 2  78           .byte %01111000
00007Br 2  7E           .byte %01111110 ; E     0888
00007Cr 2  40           .byte %01000000
00007Dr 2  78           .byte %01111000
00007Er 2  40           .byte %01000000
00007Fr 2  7E           .byte %01111110
000080r 2  7E           .byte %01111110 ; F     088d
000081r 2  40           .byte %01000000
000082r 2  78           .byte %01111000
000083r 2  40           .byte %01000000
000084r 2  40           .byte %01000000
000085r 2  3E           .byte %00111110 ; G     0892
000086r 2  40           .byte %01000000
000087r 2  4E           .byte %01001110
000088r 2  42           .byte %01000010
000089r 2  3E           .byte %00111110
00008Ar 2  42           .byte %01000010 ; H     0897
00008Br 2  42           .byte %01000010
00008Cr 2  7E           .byte %01111110
00008Dr 2  42           .byte %01000010
00008Er 2  42           .byte %01000010
00008Fr 2  7E           .byte %01111110 ; I     089C
000090r 2  10           .byte %00010000
000091r 2  10           .byte %00010000
000092r 2  10           .byte %00010000
000093r 2  7E           .byte %01111110
000094r 2  7E           .byte %01111110 ; J     08A1
000095r 2  08           .byte %00001000
000096r 2  08           .byte %00001000
000097r 2  48           .byte %01001000
000098r 2  30           .byte %00110000
000099r 2  48           .byte %01001000 ; K     08A6
00009Ar 2  50           .byte %01010000
00009Br 2  70           .byte %01110000
00009Cr 2  48           .byte %01001000
00009Dr 2  44           .byte %01000100
00009Er 2  40           .byte %01000000 ; L     08AB
00009Fr 2  40           .byte %01000000
0000A0r 2  40           .byte %01000000
0000A1r 2  40           .byte %01000000
0000A2r 2  7E           .byte %01111110
0000A3r 2  66           .byte %01100110 ; M     08B0
0000A4r 2  5A           .byte %01011010
0000A5r 2  5A           .byte %01011010
0000A6r 2  42           .byte %01000010
0000A7r 2  42           .byte %01000010
0000A8r 2  42           .byte %01000010 ; N     08B5
0000A9r 2  62           .byte %01100010
0000AAr 2  52           .byte %01010010
0000ABr 2  4A           .byte %01001010
0000ACr 2  46           .byte %01000110
0000ADr 2  3C           .byte %00111100 ; O     08BA
0000AEr 2  42           .byte %01000010
0000AFr 2  42           .byte %01000010
0000B0r 2  42           .byte %01000010
0000B1r 2  3C           .byte %00111100
0000B2r 2  7C           .byte %01111100 ; P     08BF
0000B3r 2  42           .byte %01000010
0000B4r 2  7C           .byte %01111100
0000B5r 2  40           .byte %01000000
0000B6r 2  40           .byte %01000000
0000B7r 2  3C           .byte %00111100 ; Q     08C4
0000B8r 2  42           .byte %01000010
0000B9r 2  4A           .byte %01001010
0000BAr 2  44           .byte %01000100
0000BBr 2  3A           .byte %00111010
0000BCr 2  7C           .byte %01111100 ; R     08C9
0000BDr 2  46           .byte %01000110
0000BEr 2  78           .byte %01111000
0000BFr 2  44           .byte %01000100
0000C0r 2  42           .byte %01000010
0000C1r 2  3C           .byte %00111100 ; S     08CE
0000C2r 2  62           .byte %01100010
0000C3r 2  18           .byte %00011000
0000C4r 2  46           .byte %01000110
0000C5r 2  3C           .byte %00111100
0000C6r 2  7E           .byte %01111110 ; T     08D3
0000C7r 2  08           .byte %00001000
0000C8r 2  08           .byte %00001000
0000C9r 2  08           .byte %00001000
0000CAr 2  08           .byte %00001000
0000CBr 2  42           .byte %01000010 ; U     08D8
0000CCr 2  42           .byte %01000010
0000CDr 2  42           .byte %01000010
0000CEr 2  46           .byte %01000110
0000CFr 2  3A           .byte %00111010
0000D0r 2  42           .byte %01000010 ; V     08DD
0000D1r 2  42           .byte %01000010
0000D2r 2  24           .byte %00100100
0000D3r 2  24           .byte %00100100
0000D4r 2  18           .byte %00011000
0000D5r 2  42           .byte %01000010 ; W     08E2
0000D6r 2  42           .byte %01000010
0000D7r 2  5A           .byte %01011010
0000D8r 2  5A           .byte %01011010
0000D9r 2  24           .byte %00100100
0000DAr 2  42           .byte %01000010 ; X     08E7
0000DBr 2  24           .byte %00100100
0000DCr 2  18           .byte %00011000
0000DDr 2  24           .byte %00100100
0000DEr 2  42           .byte %01000010
0000DFr 2  42           .byte %01000010 ; Y     08EC
0000E0r 2  24           .byte %00100100
0000E1r 2  18           .byte %00011000
0000E2r 2  10           .byte %00010000
0000E3r 2  10           .byte %00010000
0000E4r 2  7E           .byte %01111110 ; Z     08F1
0000E5r 2  06           .byte %00000110
0000E6r 2  18           .byte %00011000
0000E7r 2  60           .byte %01100000
0000E8r 2  7E           .byte %01111110
0000E9r 2  00           .byte %00000000 ; space     08F6
0000EAr 2  00           .byte %00000000
0000EBr 2  00           .byte %00000000
0000ECr 2  00           .byte %00000000
0000EDr 2  00           .byte %00000000
0000EEr 2  28           .byte %00101000 ; #
0000EFr 2  7C           .byte %01111100
0000F0r 2  28           .byte %00101000
0000F1r 2  7C           .byte %01111100
0000F2r 2  28           .byte %00101000
0000F3r 2               
0000F3r 2               
0000F3r 1               ; here is now 256 byte aligned in memory to include look up stuffs..
0000F3r 1               ; $0900 in RAM
0000F3r 1               
0000F3r 1               ; white/black checkerboard texture - north facing wall 	- $0900
0000F3r 1  00 01 00 01  .byte 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1 ; $0900
0000F7r 1  00 01 00 01  
0000FBr 1  00 01 00 01  
000133r 1  01 00 01 00  .byte 1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1 ; $0940
000137r 1  01 00 01 00  
00013Br 1  01 00 01 00  
000173r 1  00 01 00 01  .byte 0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1 ; $0900
000177r 1  00 01 00 01  
00017Br 1  00 01 00 01  
0001B3r 1  01 00 01 00  .byte 1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1 ; $0940
0001B7r 1  01 00 01 00  
0001BBr 1  01 00 01 00  
0001F3r 1               ; red/white checkerboard texture - east facing wall - $0A00
0001F3r 1  00 02 00 02  .byte 0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2 ; $0980
0001F7r 1  00 02 00 02  
0001FBr 1  00 02 00 02  
000233r 1  02 00 02 00  .byte 2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0 ; $09C0
000237r 1  02 00 02 00  
00023Br 1  02 00 02 00  
000273r 1  00 02 00 02  .byte 0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2 ; $0980
000277r 1  00 02 00 02  
00027Br 1  00 02 00 02  
0002B3r 1  02 00 02 00  .byte 2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0 ; $09C0
0002B7r 1  02 00 02 00  
0002BBr 1  02 00 02 00  
0002F3r 1               ; white wall - south facing 	- $0B00
0002F3r 1  01 01 01 01  .byte 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 ; $0A00
0002F7r 1  01 01 01 01  
0002FBr 1  01 01 01 01  
000333r 1  01 01 01 01  .byte 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 ; $0A40
000337r 1  01 01 01 01  
00033Br 1  01 01 01 01  
000373r 1  01 01 01 01  .byte 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 ; $0A00
000377r 1  01 01 01 01  
00037Br 1  01 01 01 01  
0003B3r 1  01 01 01 01  .byte 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 ; $0A40
0003B7r 1  01 01 01 01  
0003BBr 1  01 01 01 01  
0003F3r 1               ; red wall - north facing 	- $0C00
0003F3r 1  00 00 00 00  .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; $0A80
0003F7r 1  00 00 00 00  
0003FBr 1  00 00 00 00  
000433r 1  00 00 00 00  .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; $0
000437r 1  00 00 00 00  
00043Br 1  00 00 00 00  
000473r 1  00 00 00 00  .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; $0A80
000477r 1  00 00 00 00  
00047Br 1  00 00 00 00  
0004B3r 1  00 00 00 00  .byte 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; $0
0004B7r 1  00 00 00 00  
0004BBr 1  00 00 00 00  
0004F3r 1               
0004F3r 1               ;end 256 byte aligned - $0D00
0004F3r 1               
0004F3r 1               ;	global data
0004F3r 1  DE AD BE EF  DEBUG_BUFFERA: 		 .byte $DE,$AD,$BE,$EF
0004F7r 1  00 00 00 00  DEBUG_STUFF: 		 .byte 0,0,0,0
0004FBr 1  DE AD BE EF  DEBUG_BUFFERB: 		 .byte $DE,$AD,$BE,$EF
0004FFr 1  00 00        default_irq_vector:  .addr 0
000501r 1  01           VSYNC_counter:       .byte 1
000502r 1  00           DONE_DONE:           .byte 0
000503r 1  00           CLICK_BOUNCE:        .byte 0
000504r 1  00           CLICK_MODE:          .byte 0
000505r 1  00           CURRENT_COLOR:       .byte 0
000506r 1               ; end global data
000506r 1  DE AD BE EF  DEBUG_END_GLOBALS:	 .byte $DE,$AD,$BE,$EF
00050Ar 1               
00050Ar 1               .include "hfs_x16.inc"
00050Ar 2               
00050Ar 2               ; VERA
00050Ar 2               VERA_addr_low     = $9F20
00050Ar 2               VERA_addr_high    = $9F21
00050Ar 2               VERA_addr_bank    = $9F22
00050Ar 2               VERA_data0        = $9F23
00050Ar 2               VERA_data1        = $9F24
00050Ar 2               VERA_ctrl         = $9F25 ; RESET | 6 bits DCSEL | addrsel
00050Ar 2               VERA_DCSEL0_ADDR0 = $00
00050Ar 2               VERA_DCSEL2_ADDR0 = $04
00050Ar 2               VERA_DCSEL3_ADDR0 = $06
00050Ar 2               VERA_DCSEL4_ADDR0 = $08
00050Ar 2               VERA_DCSEL5_ADDR0 = $0A
00050Ar 2               VERA_DCSEL6_ADDR0 = $0C
00050Ar 2               
00050Ar 2               VERA_ien          = $9F26
00050Ar 2               VERA_isr          = $9F27
00050Ar 2               
00050Ar 2               VERA_dc_video     = $9F29 ; DCSEL = 0
00050Ar 2               ;   Current Field | Sprites Enable | Layer1 Enable  |Layer0 Enable
00050Ar 2               ; NTSC/RGB: 240P  | NTSC: Chroma Disable / RGB: HV Sync Output Mode
00050Ar 2               
00050Ar 2               VERA_dc_hscale    = $9F2A
00050Ar 2               VERA_dc_vscale    = $9F2B
00050Ar 2               VERA_L0_config    = $9F2D
00050Ar 2               ;   7       6     5   4       3       2             1   0
00050Ar 2               ;   Map Height | Map Width | T256C | Bitmap Mode | Color Depth
00050Ar 2               ;   0 - 32                  0 - 16    0 tiled       0   1bpp mono
00050Ar 2               ;   1 - 64                  1 - 256   1 enabled     1   2bpp 4 color
00050Ar 2               ;   2 - 128                                         2   4bpp 16 color
00050Ar 2               ;   3 - 256                                         3   8bpp 256 color
00050Ar 2               ;   bitmap mode - tilebase points to bitmap data, mapbase not used
00050Ar 2               ;   tile width = 0 is 320 pixels / tile width=1 is 640 pixels.. so could do 4bpp x 320?
00050Ar 2               ;   The palette offset (in 'H-Scroll (11:8)') mo  ; start of program
00050Ar 2               VERA_L0_mapbase   = $9F2E
00050Ar 2               VERA_L0_tilebase  = $9F2F
00050Ar 2               ;   Tile Base Address (16:11) | Tile Height 0-8/1-16 | Tile Width 0-8/1-16
00050Ar 2               VERA_L0_hscroll_h = $9F31
00050Ar 2               
00050Ar 2               VERA_L1_config    = $9F34
00050Ar 2               VERA_L1_mapbase   = $9F35
00050Ar 2               VERA_L1_tilebase  = $9F36
00050Ar 2               VERA_L1_hscroll_l = $9F37
00050Ar 2               VERA_L1_hscroll_h = $9F38
00050Ar 2               VERA_L1_vscroll_l = $9F39
00050Ar 2               VERA_L1_vscroll_h = $9F3A
00050Ar 2               
00050Ar 2               
00050Ar 2               ; VRAM addresses 124k+
00050Ar 2               VRAM_MATH_SCRATCH = $1F000     ; 2K of scratch = 512 multiplies
00050Ar 2               VRAM_CURSOR_SPR   = $1F900 		; up to 16x16 bit sprite
00050Ar 2               VRAM_palette      = $1FA00      ;
00050Ar 2               VRAM_SPRITE_LIST  = $1FC00
00050Ar 2               
00050Ar 2               DISPLAY_SCALE_TWO     = 64 ; 2X zoom
00050Ar 2               DISPLAY_SCALE_ONE     = 128 ; 640x480
00050Ar 2               MODE_BITMAP_256BPP = $07
00050Ar 2               MODE_BITMAP_16BPP  = $06
00050Ar 2               LAYER0_ONLY       = $11
00050Ar 2               LAYER0SPRITES_ENABLE = $51
00050Ar 2               LAYER01SPRITES_ENABLE = $71
00050Ar 2               LAYER1SPRITES_ENABLE = $61
00050Ar 2               SPRITES_ONLY = $41
00050Ar 2               
00050Ar 2               VRAM_INCREMENT_1 = $10
00050Ar 2               VRAM_INCREMENT_2 = $20
00050Ar 2               VRAM_INCREMENT_4 = $30
00050Ar 2               VRAM_INCREMENT_8 = $40
00050Ar 2               VRAM_INCREMENT_16 = $50
00050Ar 2               VRAM_INCREMENT_32 = $60
00050Ar 2               VRAM_INCREMENT_64 = $70
00050Ar 2               VRAM_INCREMENT_128 = $80
00050Ar 2               VRAM_INCREMENT_256 = $90
00050Ar 2               VRAM_INCREMENT_512 = $A0
00050Ar 2               VRAM_INCREMENT_40 = $B0
00050Ar 2               VRAM_INCREMENT_80 = $C0
00050Ar 2               VRAM_INCREMENT_160 = $D0
00050Ar 2               VRAM_INCREMENT_320 = $E0
00050Ar 2               VRAM_INCREMENT_640 = $F0
00050Ar 2               
00050Ar 2               
00050Ar 2               ; DCSEL = 2
00050Ar 2               VERA_FX_CTRL    = $9F29
00050Ar 2               VERA_FX_TILEBASE = $9F2A
00050Ar 2               VERA_FX_MAPBASE = $9F2B
00050Ar 2               VERA_FX_MULT = $9F2C
00050Ar 2               FX_MULTIPLY_ENABLE = $10
00050Ar 2               
00050Ar 2               ; DCSEL = 3
00050Ar 2               VERA_FX_X_INC_L = $9F29
00050Ar 2               VERA_FX_X_INC_H = $9F2A
00050Ar 2               VERA_FX_Y_INC_L = $9F2B
00050Ar 2               VERA_FX_Y_INC_H = $9F2C
00050Ar 2               
00050Ar 2               ; DCSEL = 4
00050Ar 2               VERA_FX_X_POS_L = $9F29
00050Ar 2               VERA_FX_X_POS_H = $9F2A
00050Ar 2               VERA_FX_Y_POS_L = $9F2B
00050Ar 2               VERA_FX_Y_POS_H = $9F2C
00050Ar 2               
00050Ar 2               ; DCSEL = 6
00050Ar 2               VERA_FX_CACHE_L = $9F29  ; write only.. read here will reset accumulator!
00050Ar 2               VERA_FX_CACHE_M = $9F2A  ; write only.. read triggers accumulate
00050Ar 2               VERA_FX_CACHE_H = $9F2B  ; write only
00050Ar 2               VERA_FX_CACHE_U = $9F2C  ; write only
00050Ar 2               
00050Ar 2               VSYNC_BIT         = $01
00050Ar 2               
00050Ar 2               ; Kernal
00050Ar 2               CHROUT            = $FFD2
00050Ar 2               GETIN             = $FFE4
00050Ar 2               CINT              = $FF81
00050Ar 2               CONSOLE_PUT_CHAR  = $FEDE
00050Ar 2               MOUSE_CONFIG      = $FF68
00050Ar 2               MOUSE_GET         = $FF6B
00050Ar 2               MOUSE_SCAN        = $FF71
00050Ar 2               
00050Ar 2               ; RAM Interrupt Vectors
00050Ar 2               IRQVec            = $0314
00050Ar 2               
00050Ar 2               ZP_PTR = $22
00050Ar 2               
00050Ar 2               VERA_SET_MULTIPLY = $10
00050Ar 2               VERA_RESET_ACCUMULATOR = $80
00050Ar 2               
00050Ar 2               .macro set_vera_for_single_multiplies  ;  allowing read of bytes 1,2 of each ..
00050Ar 2                 ; set addr1
00050Ar 2                 ldy #VERA_DCSEL2_ADDR0+1 ; set DCSEL = 2 and addrsel to 1 ; 2
00050Ar 2                 sty VERA_ctrl   ; 4
00050Ar 2                 ldx #(VRAM_INCREMENT_4 | ^VRAM_MATH_SCRATCH)  ; 6
00050Ar 2                 stx VERA_addr_bank ;  10
00050Ar 2                 lda #>VRAM_MATH_SCRATCH ; 12
00050Ar 2                 sta VERA_addr_high ;  16
00050Ar 2                 stz VERA_addr_low ; 20
00050Ar 2                 ; set addr0
00050Ar 2                 ldy #VERA_DCSEL2_ADDR0 ; set DCSEL =2 and addrsel to 0
00050Ar 2                 sty VERA_ctrl
00050Ar 2                 stx VERA_addr_bank
00050Ar 2                 sta VERA_addr_high
00050Ar 2                 lda #1  ; we want bytes 1,2 of each multiply..
00050Ar 2                 sta VERA_addr_low
00050Ar 2                 ; set multiply    42
00050Ar 2                 lda #(VERA_SET_MULTIPLY | VERA_RESET_ACCUMULATOR)  ; set multiply mode
00050Ar 2                 sta VERA_FX_MULT ;  48
00050Ar 2                 lda #$48  ; enable cache writes and 16-bit hop
00050Ar 2                 sta VERA_FX_CTRL ; 54
00050Ar 2                 lda #VERA_DCSEL6_ADDR0  ; set DCSEL = 6 and addrsel to 0 to prime for accessing cache VERA_FX_CACHE_L,M,H,U
00050Ar 2                 sta VERA_ctrl ; 60
00050Ar 2                 stz VERA_FX_CACHE_L
00050Ar 2               .endmacro
00050Ar 2               
00050Ar 2               
00050Ar 2               .macro wait_keypress
00050Ar 2                 .local waity_wait
00050Ar 2                 waity_wait:
00050Ar 2                  wai
00050Ar 2                  jsr GETIN
00050Ar 2                  beq waity_wait
00050Ar 2               .endmacro
00050Ar 2               
00050Ar 2               ENABLE_MOUSE_CURSOR:
00050Ar 2               ; expect address of cursor sprite data in ZP_PTR like this -
00050Ar 2               ; ZP_PTR+0/1 - address of data for mouse cursor
00050Ar 2  A9 FF            lda #$FF
00050Cr 2  20 68 FF         jsr MOUSE_CONFIG
00050Fr 2                   ; configure sprite 0
00050Fr 2  9C 20 9F         stz VERA_addr_low
000512r 2  A9 FC            lda #>VRAM_SPRITE_LIST
000514r 2  8D 21 9F         sta VERA_addr_high
000517r 2  A9 11            lda #(VRAM_INCREMENT_1 | ^VRAM_SPRITE_LIST)
000519r 2  8D 22 9F         sta VERA_addr_bank
00051Cr 2  A9 C8            lda #((VRAM_CURSOR_SPR >> 5) & $FF )
00051Er 2  8D 23 9F         sta VERA_data0
000521r 2  A9 8F        	lda #($80 | (VRAM_CURSOR_SPR >> 13)) ; high address, 8bit sprite
000523r 2  8D 23 9F     	sta VERA_data0
000526r 2  9C 23 9F         stz VERA_data0 ; x low  VRAM_SPRITE_LIST + 2
000529r 2  9C 23 9F         stz VERA_data0 ; x high
00052Cr 2  9C 23 9F         stz VERA_data0 ; y low
00052Fr 2  9C 23 9F         stz VERA_data0 ; y high
000532r 2  A9 0C            lda #$0C
000534r 2  8D 23 9F         sta VERA_data0 ; z-depth/flips
000537r 2  A9 50            lda #$50 ; is 16/16 sprite, 8bit color / no offset
000539r 2  8D 23 9F         sta VERA_data0 ; sprite width/height/palette.. a freed up now.
00053Cr 2                   ; copy cursor image to sprite 0
00053Cr 2  9C 20 9F         stz VERA_addr_low
00053Fr 2  A9 F9            lda #>VRAM_CURSOR_SPR
000541r 2  8D 21 9F         sta VERA_addr_high
000544r 2  A9 11            lda #(VRAM_INCREMENT_1 | ^VRAM_CURSOR_SPR)
000546r 2  8D 22 9F         sta VERA_addr_bank
000549r 2  A0 00            ldy #0
00054Br 2                 @cursor_data_loop:
00054Br 2  B1 22              lda (ZP_PTR),y
00054Dr 2  8D 23 9F           sta VERA_data0
000550r 2  C8                 iny
000551r 2  D0 F8              bne @cursor_data_loop
000553r 2  60             rts
000554r 2               
000554r 1               
000554r 1               ;VRAM addresses - 124K+ reserved for stuffs
000554r 1               							;	0 				1 				2
000554r 1               							;	0123456789ABCDEF0123456789ABCDEF012345
000554r 1               VRAM_DEBUG_FONT = $00000 	;	0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ # 	1bpp / 38*8 = 304 bytes
000554r 1               VRAM_AFTER_DEBUG_FONT = $00130 ;	304 bytes.. only so useful .. sprites need 32 byte alignment..
000554r 1               VRAM_FIRST_USABLE_SPRITE = $00140 ; 320 bytes in ..
000554r 1               VRAM_START_DEBUG_TEXT = $00180 	;	384 bytes in // 3 lines in 64x32 tile map.. 320x240=30 lines..
000554r 1               DEBUG_VSCROLL = $0014 	;	-20 VSCROLL.. debug has 4 lines above and below possibly trashed
000554r 1               DEBUG_TILE_CONFIG = $10 ; 	64x32 16 color... using the scroll means using 30+3=33 lines 				4K 	$01000
000554r 1               
000554r 1               ;124K+ reserved for stuffs
000554r 1               
000554r 1               config_debug_tiles_layer0:
000554r 1  9C 25 9F     	stz VERA_ctrl
000557r 1  A9 10        	lda #DEBUG_TILE_CONFIG
000559r 1  8D 34 9F     	sta VERA_L1_config
00055Cr 1  9C 35 9F     	stz	VERA_L1_mapbase ;	tilemap starts at 0 - top 3 lines trashed with debug font data
00055Fr 1  9C 36 9F     	stz VERA_L1_tilebase ;  tiles start at 0
000562r 1  9C 37 9F     	stz VERA_L1_hscroll_l
000565r 1  9C 38 9F     	stz VERA_L1_hscroll_h
000568r 1  A9 14        	lda #<DEBUG_VSCROLL
00056Ar 1  8D 39 9F     	sta VERA_L1_vscroll_l
00056Dr 1  A9 00        	lda #>DEBUG_VSCROLL
00056Fr 1  8D 3A 9F     	sta VERA_L1_vscroll_h
000572r 1  A9 80            lda #<VRAM_START_DEBUG_TEXT
000574r 1  8D 20 9F         sta VERA_addr_low
000577r 1  A9 01            lda #>VRAM_START_DEBUG_TEXT
000579r 1  8D 21 9F         sta VERA_addr_high
00057Cr 1  A9 10            lda #(VRAM_INCREMENT_1 | ^VRAM_START_DEBUG_TEXT)
00057Er 1  8D 22 9F         sta VERA_addr_bank
000581r 1                   ; set all tiles to blank tile ... dark grey on transparent
000581r 1                   ;	blank tile is just after Z - is 37 #$25 ... hmmm
000581r 1                   ; 30*64 = 1,920 	7*256
000581r 1  A2 1E            ldx #30
000583r 1                   @do_set_color_loop:
000583r 1  A0 40        	    ldy #64
000585r 1                     @do_set_color_inner_loop:
000585r 1  A9 24              	  lda #$24
000587r 1  8D 23 9F           	  sta VERA_data0
00058Ar 1  A9 0C                  lda #$0C
00058Cr 1  8D 23 9F         	  sta VERA_data0
00058Fr 1  88               	  dey
000590r 1  D0 F3            	  bne @do_set_color_inner_loop
000592r 1  CA                 dex
000593r 1  D0 EE              bne @do_set_color_loop
000595r 1                   ;
000595r 1  A9 80        	lda #<VRAM_START_DEBUG_TEXT
000597r 1  8D 20 9F     	sta VERA_addr_low
00059Ar 1  A9 01        	lda #>VRAM_START_DEBUG_TEXT
00059Cr 1  8D 21 9F     	sta VERA_addr_high
00059Fr 1  A9 20            lda #(VRAM_INCREMENT_2 | ^VRAM_START_DEBUG_TEXT)
0005A1r 1  8D 22 9F         sta VERA_addr_bank
0005A4r 1  A9 00        	lda #0
0005A6r 1               	@debug_debug_things:
0005A6r 1  8D 23 9F     		sta VERA_data0
0005A9r 1  1A           		inc a
0005AAr 1  C9 26        		cmp #38
0005ACr 1  D0 F8        		bne @debug_debug_things
0005AEr 1  60           	rts
0005AFr 1               
0005AFr 1               
0005AFr 1               
0005AFr 1               custom_irq_handler:
0005AFr 1  AD 27 9F        lda VERA_isr
0005B2r 1  29 01           and #VSYNC_BIT
0005B4r 1  F0 03           beq @continue ; non-VSYNC IRQ, no tick update
0005B6r 1  EE rr rr        inc VSYNC_counter
0005B9r 1               @continue:
0005B9r 1                  ; continue to default IRQ handler
0005B9r 1  6C rr rr        jmp (default_irq_vector)
0005BCr 1                  ; RTI will happen after jump
0005BCr 1               
0005BCr 1               
0005BCr 1               DEBUG_INIT_PREAMBLE:
0005BCr 1  DE AD BE EF  	.byte $DE,$AD,$BE,$EF
0005C0r 1               INIT: ; start of program per debug font inc
0005C0r 1  20 rr rr     	jsr config_debug_tiles_layer0
0005C3r 1  A9 40        	lda #DISPLAY_SCALE_TWO ; set scale for bitmap mode
0005C5r 1  8D 2A 9F       	sta VERA_dc_hscale
0005C8r 1  8D 2B 9F       	sta VERA_dc_vscale
0005CBr 1  A9 61        	lda #LAYER1SPRITES_ENABLE
0005CDr 1  8D 29 9F     	sta VERA_dc_video
0005D0r 1               
0005D0r 1  CB 20 E4 FF  	wait_keypress
0005D4r 1  F0 FA        
0005D6r 1  20 81 FF     	jsr CINT
0005D9r 1  60           	rts
0005DAr 1               
0005DAr 1  A9 01        	lda #1
0005DCr 1  20 68 FF     	jsr MOUSE_CONFIG
0005DFr 1               
0005DFr 1                   ; overwrite RAM IRQ vector with custom handler address
0005DFr 1  78               sei ; disable IRQ while vector is changing
0005E0r 1  A9 rr            lda #<custom_irq_handler
0005E2r 1  8D 14 03         sta IRQVec
0005E5r 1  A9 rr            lda #>custom_irq_handler
0005E7r 1  8D 15 03         sta IRQVec+1
0005EAr 1  A9 01            lda #VSYNC_BIT ; make VERA only generate VSYNC IRQs
0005ECr 1  8D 26 9F         sta VERA_ien
0005EFr 1  58               cli ; enable IRQ now that vector is properly set
0005F0r 1  9C rr rr         stz VSYNC_counter
0005F3r 1               
0005F3r 1               ENDLESS_LOOP:
0005F3r 1  CB              wai
0005F4r 1  AD rr rr        lda VSYNC_counter
0005F7r 1  F0 FA           beq ENDLESS_LOOP
0005F9r 1  9C rr rr        stz VSYNC_counter
0005FCr 1  20 E4 FF        jsr GETIN
0005FFr 1  F0 F2           beq ENDLESS_LOOP
000601r 1               
000601r 1               do_cleanup:
000601r 1                  ; restore default IRQ vector
000601r 1  78              sei
000602r 1  AD rr rr        lda default_irq_vector
000605r 1  8D 14 03        sta IRQVec
000608r 1  AD rr rr        lda default_irq_vector+1
00060Br 1  8D 15 03        sta IRQVec+1
00060Er 1  58              cli
00060Fr 1  20 81 FF        jsr CINT
000612r 1  60              rts
000612r 1               
