ca65 V2.19 - Git 8e6c0c1
Main file   : noah.asm
Current file: noah.asm

000000r 1               .org $080D
00080D  1               .segment "STARTUP"
00080D  1               .segment "INIT"
00080D  1               .segment "ONCE"
00080D  1               .segment "CODE"
00080D  1               
00080D  1  4C 3B 16       jmp start
000810  1               ; RAM Interrupt Vectors
000810  1               IRQVec            = $0314
000810  1               
000810  1               ; VERA
000810  1               VERA_addr_low     = $9F20
000810  1               VERA_addr_high    = $9F21
000810  1               VERA_addr_bank    = $9F22
000810  1               VERA_data0        = $9F23
000810  1               VERA_data1        = $9F24
000810  1               VERA_ctrl         = $9F25
000810  1               VERA_ien          = $9F26
000810  1               VERA_isr          = $9F27
000810  1               VERA_dc_video     = $9F29 ; DCSEL = 0
000810  1               ;   Current Field | Sprites Enable | Layer1 Enable  |Layer0 Enable
000810  1               ; NTSC/RGB: 240P  | NTSC: Chroma Disable / RGB: HV Sync Output Mode
000810  1               
000810  1               VERA_dc_hscale    = $9F2A
000810  1               VERA_dc_vscale    = $9F2B
000810  1               
000810  1               VERA_L0_config    = $9F2D
000810  1               ;   7       6     5   4       3       2             1   0
000810  1               ;   Map Height | Map Width | T256C | Bitmap Mode | Color Depth
000810  1               ;   0 - 32                  0 - 16    0 tiled       0   1bpp mono
000810  1               ;   1 - 64                  1 - 256   1 enabled     1   2bpp 4 color
000810  1               ;   2 - 128                                         2   4bpp 16 color
000810  1               ;   3 - 256                                         3   8bpp 256 color
000810  1               ;   bitmap mode - tilebase points to bitmap data, mapbase not used
000810  1               ;   tile width = 0 is 320 pixels / tile width=1 is 640 pixels.. so could do 4bpp x 320?
000810  1               ;   The palette offset (in 'H-Scroll (11:8)') modifies the color indexes of the bitmap in the same way as in the tile modes.
000810  1               
000810  1               VERA_L0_mapbase   = $9F2E
000810  1               VERA_L0_tilebase  = $9F2F ;   Tile Base Address (16:11) | Tile Height 0-8/1-16 | Tile Width 0-8/1-16
000810  1               VERA_L0_HSCROLL_L = $9F30 ;  H-Scroll (7:0)
000810  1               VERA_L0_HSCROLL_H = $9F31 ;  - H-Scroll (11:8)
000810  1               VERA_L0_VSCROLL_L = $9F32 ;  V-Scroll (7:0)
000810  1               VERA_L0_VSCROLL_H = $9F33 ;  - V-Scroll (11:8)
000810  1               
000810  1               VERA_L1_config    = $9F34
000810  1               VERA_L1_mapbase   = $9F35
000810  1               VERA_L1_tilebase  = $9F36
000810  1               VERA_L1_HSCROLL_L = $9F37 ;  H-Scroll (7:0)
000810  1               VERA_L1_HSCROLL_H = $9F38 ;  - H-Scroll (11:8)
000810  1               VERA_L1_VSCROLL_L = $9F39 ;  V-Scroll (7:0)
000810  1               VERA_L1_VSCROLL_H = $9F3A ;  - V-Scroll (11:8)
000810  1               
000810  1               ; DCSEL = 2
000810  1               VERA_FX_CTRL    = $9F29
000810  1               VERA_FX_TILEBASE = $9F2A
000810  1               VERA_FX_MAPBASE = $9F2B
000810  1               
000810  1               
000810  1               ; DCSEL = 3
000810  1               VERA_FX_X_INC_L = $9F29
000810  1               VERA_FX_X_INC_H = $9F2A
000810  1               VERA_FX_Y_INC_L = $9F2B
000810  1               VERA_FX_Y_INC_H = $9F2C
000810  1               
000810  1               ; DCSEL = 4
000810  1               VERA_FX_X_POS_L = $9F29
000810  1               VERA_FX_X_POS_H = $9F2A
000810  1               VERA_FX_Y_POS_L = $9F2B
000810  1               VERA_FX_Y_POS_H = $9F2C
000810  1               
000810  1               VSYNC_BIT         = $01
000810  1               
000810  1               ; VRAM Addresses
000810  1               ;   Address range Description
000810  1               ;   $00000 - $1F9BF Video RAM   - 129,424 bytes -> 126K is 129,024 (1F800)
000810  1               ;   $1F9C0 - $1F9FF PSG registers
000810  1               ;   $1FA00 - $1FBFF Palette
000810  1               ;   $1FC00 - $1FFFF Sprite attributes
000810  1               
000810  1               ; video output scaling to 320x161 ( 40 x 20 (mod8=1) 8x8 tiles)
000810  1               VRAM_layer0_bitmapA  = $00000 ;  really visible area starts $00500 - 1.25K down...
000810  1                                             ; 320x120 for viewport is 37.5K - so viewA            1.25K   38.75K
000810  1                                             ; this needs to be on 2K boundary..
000810  1               VRAM_layer0_bitmapA_start = $00500
000810  1               
000810  1               ;   512 bytes slack here...
000810  1               VRAM_layer0_bitmapB = $0A000 ;  viewB declares @38K to display starting 39.25 to 76.75  39.25   76.75
000810  1               VRAM_layer0_bitmapB_start = $0A500
000810  1               ;   256 bytes slack here...
000810  1               VRAM_layer1_map     = $13400 ;  using 8x8 8bit for HUD and stuff 64x21x2=2688b declare at 77k     77k   80k
000810  1               VRAM_layer1_tiles   = $14000 ;  border HUD and font stuff - maybe 256 tiles         16k     80k to  96k
000810  1               ; for testing this is initialized to use 1bit tile mode / 16 color
000810  1               
000810  1               
000810  1               ;20k currently unused..
000810  1               
000810  1               
000810  1               VRAM_floor_ceiling  = $00000 ;  map/tile data for floor/ceiling...                  116k  116.5k
000810  1                                             ;wolf3d map was based on like 6 foot cubes?
000810  1                                             ; and floor on ships laid in 6,9,or 12 foot lengths..
000810  1                                             ; will do 8x56 with a repeated tile to get 8x64 .. so use 8x8 map = 64 bytes + 7 8x8 tiles = 512bytes
000810  1               floor_ceiling_map:
000810  1  01 01 04 03    .byte   1,1,4,3,1,1,4,3
000814  1  01 01 04 03  
000818  1  01 02 05 04    .byte   1,2,5,4,1,2,5,4
00081C  1  01 02 05 04  
000820  1  02 03 06 05    .byte   2,3,6,5,2,3,6,5
000824  1  02 03 06 05  
000828  1  03 04 07 06    .byte   3,4,7,6,3,4,7,6
00082C  1  03 04 07 06  
000830  1  04 05 01 07    .byte   4,5,1,7,4,5,1,7
000834  1  04 05 01 07  
000838  1  05 06 01 01    .byte   5,6,1,1,6,5,1,1
00083C  1  06 05 01 01  
000840  1  06 07 02 01    .byte   6,7,2,1,6,7,2,1
000844  1  06 07 02 01  
000848  1  07 01 03 02    .byte   7,1,3,2,7,1,3,2
00084C  1  07 01 03 02  
000850  1               .include "floor_ceiling_8x56_lines.inc"
000850  2  20 22 29 22    .byte 32, 34, 41, 34, 41, 34, 41, 34, 32, 41, 68, 34, 68, 9, 68, 34, 32, 68, 41, 34, 41, 34, 41, 34, 32, 41, 68, 9, 68, 34, 68, 34, 32, 41, 41, 34, 41, 34, 41, 34, 32, 41, 68, 34, 68, 9, 68, 34, 32, 68, 41, 34, 41, 34, 41, 34, 32, 68, 68, 41, 68, 34, 68, 34 ; 0,0: tile 0
000854  2  29 22 29 22  
000858  2  20 29 44 22  
000890  2  20 44 29 44    .byte 32, 68, 41, 68, 41, 34, 41, 34, 32, 41, 68, 41, 68, 9, 68, 34, 32, 68, 41, 41, 41, 34, 41, 34, 32, 41, 68, 41, 68, 34, 68, 34, 32, 41, 9, 68, 41, 34, 41, 34, 32, 41, 34, 41, 68, 9, 68, 34, 32, 68, 41, 68, 41, 34, 41, 34, 32, 41, 68, 41, 68, 34, 68, 34 ; 0,1: tile 1
000894  2  29 22 29 22  
000898  2  20 29 44 29  
0008D0  2  20 29 29 44    .byte 32, 41, 41, 68, 9, 41, 41, 34, 32, 41, 68, 41, 34, 41, 68, 34, 32, 68, 41, 34, 41, 68, 9, 34, 32, 68, 68, 9, 68, 41, 34, 34, 32, 41, 9, 34, 41, 34, 9, 34, 32, 41, 34, 41, 68, 9, 34, 34, 32, 34, 9, 68, 41, 34, 41, 34, 32, 34, 68, 41, 34, 34, 68, 34 ; 0,2: tile 2
0008D4  2  09 29 29 22  
0008D8  2  20 29 44 29  
000910  2  20 29 29 44    .byte 32, 41, 41, 68, 9, 41, 41, 34, 32, 41, 68, 34, 68, 41, 68, 34, 32, 68, 9, 41, 41, 68, 41, 34, 32, 34, 68, 41, 68, 68, 68, 34, 32, 41, 41, 68, 41, 68, 41, 34, 32, 41, 68, 68, 68, 41, 68, 34, 32, 68, 41, 68, 41, 68, 41, 34, 32, 68, 68, 68, 68, 41, 68, 34 ; 0,3: tile 3
000914  2  09 29 29 22  
000918  2  20 29 44 22  
000950  2  20 44 29 44    .byte 32, 68, 41, 68, 41, 41, 9, 34, 32, 41, 68, 41, 68, 9, 68, 34, 32, 68, 41, 41, 41, 68, 41, 34, 32, 41, 34, 41, 68, 68, 68, 34, 32, 34, 9, 68, 41, 68, 41, 34, 32, 9, 68, 68, 68, 41, 68, 34, 32, 68, 41, 68, 41, 68, 41, 34, 32, 41, 68, 41, 68, 41, 34, 34 ; 0,4: tile 4
000954  2  29 29 09 22  
000958  2  20 29 44 29  
000990  2  20 29 29 44    .byte 32, 41, 41, 68, 41, 41, 9, 34, 32, 41, 68, 41, 68, 41, 68, 34, 32, 68, 41, 41, 41, 68, 41, 34, 32, 68, 68, 9, 68, 41, 68, 34, 32, 68, 41, 68, 9, 41, 41, 34, 32, 41, 68, 41, 34, 9, 68, 34, 32, 68, 41, 68, 9, 34, 9, 34, 32, 68, 68, 68, 68, 41, 34, 34 ; 0,5: tile 5
000994  2  29 29 09 22  
000998  2  20 29 44 29  
0009D0  2  20 44 28 19    .byte 32, 68, 40, 25, 12, 68, 9, 34, 32, 41, 68, 22, 20, 40, 68, 34, 32, 68, 41, 40, 40, 68, 41, 34, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34, 9, 68, 40, 41, 41, 34, 32, 9, 68, 25, 22, 40, 68, 34, 32, 34, 40, 22, 20, 68, 41, 34, 32, 34, 34, 68, 68, 34, 68, 34 ; 0,6: tile 6
0009D4  2  0C 44 09 22  
0009D8  2  20 29 44 16  
000A10  2               
000A10  1               
000A10  1               
000A10  1               VRAM_weapon_sprite  = $1D800 ; 64x64 8bit color for now .. prob go to 16 color..    118k
000A10  1               VRAM_cursor_sprite  = $1E7C0 ; 8x8 256 color sprite to make a cursor to track... stealing bottom line of weapon sprite... hehe
000A10  1               VRAM_MAP_SPRITE     = $1E800 ; space for 256 color 64x64 sprite for HUD/map ..      122k  126k
000A10  1               VRAM_UNRESERVED     = $1A000 ; 126K+ used for palette/sprites, so 108K-126K=18K available for hud/effects stuffs..
000A10  1               ; sprite starts must be 32byte aligned...
000A10  1               ; only can go to 126K ...
000A10  1               VRAM_palette      = $1FA00      ;
000A10  1               VRAM_SPRITE_LIST  = $1FC00
000A10  1               BITMAP_PAL_OFFSET = 0
000A10  1               
000A10  1               ; constants
000A10  1               MODE_BITMAP_256BPP = $07
000A10  1               MODE_BITMAP_16BPP  = $06
000A10  1               MODE_TILE_64_WIDE = $10
000A10  1               MODE_T256C = $0D
000A10  1               MODE_128x64_T16C = $60 ; 128x64, 16-color text
000A10  1               MODE_128x64_T256C = $68 ; 128x64, 256-color text
000A10  1               MODE_64x32_T256C = $18
000A10  1               MODE_64x32_T16C  = $10
000A10  1               MODE_32x32_256BPP = $03
000A10  1               MODE_32x32_T16C   = $00
000A10  1               LAYER0_ONLY       = $11
000A10  1               LAYER01_ENABLE    = $31
000A10  1               LAYER1_ONLY       = $21
000A10  1               LAYER01SPRITES_ENABLE = $71
000A10  1               LAYERSPRITES_ONLY = $41
000A10  1               VRAM_bitmap       = $04000
000A10  1               LOWER_UPPER       = $C400
000A10  1               
000A10  1               ; ROM Banks
000A10  1               ROM_BANK          = $01
000A10  1               BASIC_BANK        = 4
000A10  1               CHARSET_BANK      = 6
000A10  1               RAM_BANK          = $00
000A10  1               KERNAL_RAM_BANK   = $00
000A10  1               
000A10  1               MAP_RAM_BANK      = $01
000A10  1               BANKED_RAM_HIGH   = $A0
000A10  1               
000A10  1               ; Kernal
000A10  1               CHROUT            = $FFD2
000A10  1               GETIN             = $FFE4
000A10  1               CINT              = $FF81
000A10  1               
000A10  1               ; PETSCII Codes
000A10  1               WHITE             = $05
000A10  1               RETURN            = $0D
000A10  1               SPACE             = $20
000A10  1               ZERO_CHAR         = $30
000A10  1               SIX_CHAR          = $36
000A10  1               NINE_CHAR         = $39
000A10  1               C_CHAR            = $43
000A10  1               I_CHAR            = $49
000A10  1               O_CHAR            = $4F
000A10  1               T_CHAR            = $54
000A10  1               CLR               = $93
000A10  1               CHAR_UP           = $91
000A10  1               CHAR_DOWN         = $11
000A10  1               CHAR_LEFT         = $9D
000A10  1               CHAR_RIGHT        = $1D
000A10  1               
000A10  1               ; global data
000A10  1               
000A10  1  00 00        default_irq_vector:  .addr 0
000A12  1  01           VSYNC_counter:       .byte 1
000A13  1               ZP_PTR = $22
000A13  1               
000A13  1               ceiling_floor_lookup_table:
000A13  1               .include "mode7_test.inc"
000A13  2               ;x_inc_h, x_inc_l, x_start, y_start
000A13  2  01 CC 60 00    .byte  1, 204, 96, 0
000A17  2  01 D8 5D 01    .byte  1, 216, 93, 1
000A1B  2  01 E5 5A 02    .byte  1, 229, 90, 2
000A1F  2  01 F2 57 03    .byte  1, 242, 87, 3
000A23  2  01 00 54 04    .byte  1, 0, 84, 4
000A27  2  01 0D 51 05    .byte  1, 13, 81, 5
000A2B  2  01 1C 4E 06    .byte  1, 28, 78, 6
000A2F  2  01 2B 4A 07    .byte  1, 43, 74, 7
000A33  2  01 3B 47 08    .byte  1, 59, 71, 8
000A37  2  01 4B 43 09    .byte  1, 75, 67, 9
000A3B  2  01 5C 40 0A    .byte  1, 92, 64, 10
000A3F  2  01 6D 3C 0B    .byte  1, 109, 60, 11
000A43  2  01 80 38 0C    .byte  1, 128, 56, 12
000A47  2  01 93 33 0D    .byte  1, 147, 51, 13
000A4B  2  01 A6 2F 0E    .byte  1, 166, 47, 14
000A4F  2  01 BB 2A 0F    .byte  1, 187, 42, 15
000A53  2  01 D1 25 10    .byte  1, 209, 37, 16
000A57  2  01 E8 20 11    .byte  1, 232, 32, 17
000A5B  2  02 00 1B 12    .byte  2, 0, 27, 18
000A5F  2  02 18 15 13    .byte  2, 24, 21, 19
000A63  2  02 33 10 14    .byte  2, 51, 16, 20
000A67  2  02 4E 09 15    .byte  2, 78, 9, 21
000A6B  2  02 6B 03 16    .byte  2, 107, 3, 22
000A6F  2  02 8A FC 17    .byte  2, 138, 252, 23
000A73  2  02 AA F5 18    .byte  2, 170, 245, 24
000A77  2  02 CC ED 19    .byte  2, 204, 237, 25
000A7B  2  02 F0 E5 1A    .byte  2, 240, 229, 26
000A7F  2  02 17 DD 1B    .byte  2, 23, 221, 27
000A83  2  02 40 D4 1C    .byte  2, 64, 212, 28
000A87  2  02 6B CA 1D    .byte  2, 107, 202, 29
000A8B  2  02 99 C0 1E    .byte  2, 153, 192, 30
000A8F  2  02 CB B4 20    .byte  2, 203, 180, 32
000A93  2  03 00 A9 22    .byte  3, 0, 169, 34
000A97  2  03 38 9C 24    .byte  3, 56, 156, 36
000A9B  2  03 76 8E 26    .byte  3, 118, 142, 38
000A9F  2  03 B8 80 28    .byte  3, 184, 128, 40
000AA3  2  03 00 70 2A    .byte  3, 0, 112, 42
000AA7  2  03 4D 5E 2C    .byte  3, 77, 94, 44
000AAB  2  03 A2 4B 2E    .byte  3, 162, 75, 46
000AAF  2  04 00 36 30    .byte  4, 0, 54, 48
000AB3  2  04 66 20 32    .byte  4, 102, 32, 50
000AB7  2  04 D7 06 35    .byte  4, 215, 6, 53
000ABB  2  04 55 EA 38    .byte  4, 85, 234, 56
000ABF  2  04 E1 CB 3B    .byte  4, 225, 203, 59
000AC3  2  05 80 A8 3E    .byte  5, 128, 168, 62
000AC7  2  05 33 80 41    .byte  5, 51, 128, 65
000ACB  2  06 00 52 45    .byte  6, 0, 82, 69
000ACF  2  06 EC 1D 49    .byte  6, 236, 29, 73
000AD3  2  07 00 E0 4D    .byte  7, 0, 224, 77
000AD7  2  07 45 97 52    .byte  7, 69, 151, 82
000ADB  2  08 CC 40 57    .byte  8, 204, 64, 87
000ADF  2  09 AA D5 5D    .byte  9, 170, 213, 93
000AE3  2  0A 00 50 63    .byte  10, 0, 80, 99
000AE7  2  0C 00 A4 6A    .byte  12, 0, 164, 106
000AEB  2  0E 00 C0 72    .byte  14, 0, 192, 114
000AEF  2  10 99 80 7C    .byte  16, 153, 128, 124
000AF3  2               
000AF3  1               
000AF3  1               cursor_data:
000AF3  1  01 01 01 01    .byte   $1,$1,$1,$1,$1,$0,$0,$0
000AF7  1  01 00 00 00  
000AFB  1  01 00 01 00    .byte   $1,$0,$1,$0,$1,$0,$0,$0
000AFF  1  01 00 00 00  
000B03  1  01 01 00 01    .byte   $1,$1,$0,$1,$1,$0,$0,$0
000B07  1  01 00 00 00  
000B0B  1  01 00 01 00    .byte   $1,$0,$1,$0,$1,$0,$0,$0
000B0F  1  01 00 00 00  
000B13  1  01 01 01 01    .byte   $1,$1,$1,$1,$1,$0,$0,$0
000B17  1  01 00 00 00  
000B1B  1  00 00 00 00    .byte   $0,$0,$0,$0,$0,$0,$0,$0
000B1F  1  00 00 00 00  
000B23  1  00 00 00 00    .byte   $0,$0,$0,$0,$0,$0,$0,$0
000B27  1  00 00 00 00  
000B2B  1  00 00 00 00    .byte   $0,$0,$0,$0,$0,$0,$0,$0
000B2F  1  00 00 00 00  
000B33  1               
000B33  1               test_tiles:
000B33  1  00             .byte   %00000000                 ; 0
000B34  1  3C             .byte   %00111100
000B35  1  42             .byte   %01000010
000B36  1  42             .byte   %01000010
000B37  1  42             .byte   %01000010
000B38  1  42             .byte   %01000010
000B39  1  3C             .byte   %00111100
000B3A  1  00             .byte   %00000000
000B3B  1               
000B3B  1  00             .byte   %00000000                 ; 1
000B3C  1  18             .byte   %00011000
000B3D  1  28             .byte   %00101000
000B3E  1  08             .byte   %00001000
000B3F  1  08             .byte   %00001000
000B40  1  48             .byte   %01001000
000B41  1  7E             .byte   %01111110
000B42  1  00             .byte   %00000000
000B43  1               
000B43  1  00             .byte   %00000000                 ; 2
000B44  1  3C             .byte   %00111100
000B45  1  6E             .byte   %01101110
000B46  1  1C             .byte   %00011100
000B47  1  70             .byte   %01110000
000B48  1  70             .byte   %01110000
000B49  1  7E             .byte   %01111110
000B4A  1  00             .byte   %00000000
000B4B  1               
000B4B  1  00             .byte   %00000000                 ; 3
000B4C  1  3C             .byte   %00111100
000B4D  1  46             .byte   %01000110
000B4E  1  1C             .byte   %00011100
000B4F  1  04             .byte   %00000100
000B50  1  46             .byte   %01000110
000B51  1  3C             .byte   %00111100
000B52  1  11             .byte   %00010001
000B53  1               
000B53  1  00             .byte   %00000000                 ; 4
000B54  1  44             .byte   %01000100
000B55  1  44             .byte   %01000100
000B56  1  7C             .byte   %01111100
000B57  1  0C             .byte   %00001100
000B58  1  0C             .byte   %00001100
000B59  1  0C             .byte   %00001100
000B5A  1  10             .byte   %00010000
000B5B  1               
000B5B  1  20             .byte   %00100000                 ; 5
000B5C  1  7C             .byte   %01111100
000B5D  1  40             .byte   %01000000
000B5E  1  7C             .byte   %01111100
000B5F  1  04             .byte   %00000100
000B60  1  44             .byte   %01000100
000B61  1  3C             .byte   %00111100
000B62  1  10             .byte   %00010000
000B63  1               
000B63  1  00             .byte   %00000000                 ; 6
000B64  1  3C             .byte   %00111100
000B65  1  42             .byte   %01000010
000B66  1  70             .byte   %01110000
000B67  1  44             .byte   %01000100
000B68  1  74             .byte   %01110100
000B69  1  3C             .byte   %00111100
000B6A  1  10             .byte   %00010000
000B6B  1               
000B6B  1  00             .byte   %00000000                 ; 7
000B6C  1  7E             .byte   %01111110
000B6D  1  7E             .byte   %01111110
000B6E  1  0C             .byte   %00001100
000B6F  1  18             .byte   %00011000
000B70  1  34             .byte   %00110100
000B71  1  60             .byte   %01100000
000B72  1  10             .byte   %00010000
000B73  1               
000B73  1  00             .byte   %00000000                 ; 8
000B74  1  7C             .byte   %01111100
000B75  1  42             .byte   %01000010
000B76  1  3C             .byte   %00111100
000B77  1  42             .byte   %01000010
000B78  1  42             .byte   %01000010
000B79  1  7C             .byte   %01111100
000B7A  1  10             .byte   %00010000
000B7B  1               
000B7B  1  20             .byte   %00100000                 ; 9
000B7C  1  7C             .byte   %01111100
000B7D  1  7E             .byte   %01111110
000B7E  1  7E             .byte   %01111110
000B7F  1  1C             .byte   %00011100
000B80  1  74             .byte   %01110100
000B81  1  7E             .byte   %01111110
000B82  1  11             .byte   %00010001
000B83  1               
000B83  1  20             .byte   %00100000                 ; A
000B84  1  7C             .byte   %01111100
000B85  1  7E             .byte   %01111110
000B86  1  1C             .byte   %00011100
000B87  1  7E             .byte   %01111110
000B88  1  74             .byte   %01110100
000B89  1  7E             .byte   %01111110
000B8A  1  11             .byte   %00010001
000B8B  1               
000B8B  1  20             .byte   %00100000                 ; B
000B8C  1  7C             .byte   %01111100
000B8D  1  7E             .byte   %01111110
000B8E  1  7E             .byte   %01111110
000B8F  1  1C             .byte   %00011100
000B90  1  74             .byte   %01110100
000B91  1  7E             .byte   %01111110
000B92  1  11             .byte   %00010001
000B93  1               
000B93  1  20             .byte   %00100000                 ; C
000B94  1  7C             .byte   %01111100
000B95  1  7E             .byte   %01111110
000B96  1  7E             .byte   %01111110
000B97  1  1C             .byte   %00011100
000B98  1  74             .byte   %01110100
000B99  1  7E             .byte   %01111110
000B9A  1  11             .byte   %00010001
000B9B  1               
000B9B  1  20             .byte   %00100000                 ; D
000B9C  1  7C             .byte   %01111100
000B9D  1  7E             .byte   %01111110
000B9E  1  7E             .byte   %01111110
000B9F  1  1C             .byte   %00011100
000BA0  1  74             .byte   %01110100
000BA1  1  7E             .byte   %01111110
000BA2  1  11             .byte   %00010001
000BA3  1               
000BA3  1  20             .byte   %00100000                 ; E
000BA4  1  7C             .byte   %01111100
000BA5  1  7E             .byte   %01111110
000BA6  1  7E             .byte   %01111110
000BA7  1  1C             .byte   %00011100
000BA8  1  74             .byte   %01110100
000BA9  1  7E             .byte   %01111110
000BAA  1  11             .byte   %00010001
000BAB  1               
000BAB  1  20             .byte   %00100000                 ; F
000BAC  1  7C             .byte   %01111100
000BAD  1  7E             .byte   %01111110
000BAE  1  7E             .byte   %01111110
000BAF  1  1C             .byte   %00011100
000BB0  1  74             .byte   %01110100
000BB1  1  7E             .byte   %01111110
000BB2  1  11             .byte   %00010001
000BB3  1               
000BB3  1  00 00 00 00    .byte   $0,$0,$0,$0,$0,$0,$0,$0   ; $10   blank
000BB7  1  00 00 00 00  
000BBB  1               
000BBB  1               layer1_map:
000BBB  1  10 80 10 80  .incbin "hud_test_map.bin"
000BBF  1  10 80 10 80  
000BC3  1  10 80 10 80  
00163B  1               
00163B  1               .macro copy_bytes_to_vram_data0 ; ZP_PTR/+1 is source, x is *256 bytes to copy, x y a ZP_PTR+1 clobbered
00163B  1                   .local _copy
00163B  1                   .local _copy_byte
00163B  1                   ldy #0
00163B  1                   _copy:
00163B  1                     _copy_byte:
00163B  1                       lda (ZP_PTR),y
00163B  1                       sta VERA_data0
00163B  1                       iny
00163B  1                       bne _copy_byte
00163B  1                     inc ZP_PTR+1
00163B  1                     dex
00163B  1                     bne _copy
00163B  1               .endmacro
00163B  1               
00163B  1               start:
00163B  1               
00163B  1                 ; start of program - init globals
00163B  1  AD 14 03       lda IRQVec
00163E  1  8D 10 0A       sta default_irq_vector
001641  1  AD 15 03       lda IRQVec+1
001644  1  8D 11 0A       sta default_irq_vector+1
001647  1               
001647  1  9C 29 9F       stz VERA_dc_video   ; disable display
00164A  1  A9 40          lda #64 ; set screen scaling - 320 wide
00164C  1  8D 2A 9F       sta VERA_dc_hscale
00164F  1  A9 2B          lda #43 ; by 160 tall
001651  1  8D 2B 9F       sta VERA_dc_vscale
001654  1               
001654  1                 ; start by init VRAM data
001654  1  9C 25 9F       stz VERA_ctrl
001657  1               
001657  1                 ; init layer0 for use as 320 wide bitmap
001657  1  9C 20 9F       stz VERA_addr_low
00165A  1  A9 05          lda #>VRAM_layer0_bitmapA_start ;
00165C  1  8D 21 9F       sta VERA_addr_high
00165F  1  A9 10          lda #($10 | ^VRAM_layer0_bitmapA_start) ;
001661  1  8D 22 9F       sta VERA_addr_bank
001664  1  A2 78          ldx #120
001666  1  A9 00          lda #0
001668  1                 @clear_layer0_to_color:
001668  1  A0 A0            ldy #160
00166A  1                   @clear_320_byte_line:
00166A  1  8D 23 9F           sta VERA_data0
00166D  1  8D 23 9F           sta VERA_data0
001670  1  88                 dey
001671  1  D0 F7              bne @clear_320_byte_line
001673  1  1A               inc a
001674  1  CA               dex
001675  1  D0 F1            bne @clear_layer0_to_color
001677  1               
001677  1  9C 20 9F       stz VERA_addr_low
00167A  1  A9 05          lda #>VRAM_layer0_bitmapA_start ;
00167C  1  8D 21 9F       sta VERA_addr_high
00167F  1  A9 10          lda #($10 | ^VRAM_layer0_bitmapA_start) ;
001681  1  8D 22 9F       sta VERA_addr_bank
001684  1                 ; should zero it out out but for now drawing floor ceiling/floor data as test pattern
001684  1  A9 10          lda #<floor_ceiling_map
001686  1  85 22          sta ZP_PTR
001688  1  A9 08          lda #>floor_ceiling_map
00168A  1  85 23          sta ZP_PTR+1
00168C  1  A2 02          ldx #2
00168E  1  A0 00 B1 22    copy_bytes_to_vram_data0
001692  1  8D 23 9F C8  
001696  1  D0 F8 E6 23  
00169D  1               
00169D  1                 ; layer 0 config
00169D  1  A9 07          lda #MODE_BITMAP_256BPP
00169F  1  8D 2D 9F       sta VERA_L0_config
0016A2  1  9C 2F 9F       stz VERA_L0_tilebase
0016A5  1  A9 0F          lda #$0f
0016A7  1  8D 32 9F       sta VERA_L0_VSCROLL_L
0016AA  1  A9 00          lda #$00
0016AC  1  8D 33 9F       sta VERA_L0_VSCROLL_H
0016AF  1               
0016AF  1  9C 30 9F       stz VERA_L0_HSCROLL_L
0016B2  1  9C 31 9F       stz VERA_L0_HSCROLL_H
0016B5  1               
0016B5  1                 ; init layer1 for hud testing...
0016B5  1  9C 20 9F       stz VERA_addr_low
0016B8  1  A9 40          lda #>VRAM_layer1_tiles ;
0016BA  1  8D 21 9F       sta VERA_addr_high
0016BD  1  A9 11          lda #($10 | ^VRAM_layer1_tiles) ;
0016BF  1  8D 22 9F       sta VERA_addr_bank
0016C2  1  A9 33          lda #<test_tiles
0016C4  1  85 22          sta ZP_PTR
0016C6  1  A9 0B          lda #>test_tiles
0016C8  1  85 23          sta ZP_PTR+1
0016CA  1  A2 01          ldx #1  ; really only need to copy 136 bytes but.. whatev
0016CC  1  A0 00 B1 22    copy_bytes_to_vram_data0
0016D0  1  8D 23 9F C8  
0016D4  1  D0 F8 E6 23  
0016DB  1               
0016DB  1  9C 20 9F       stz VERA_addr_low
0016DE  1  A9 34          lda #>VRAM_layer1_map ;
0016E0  1  8D 21 9F       sta VERA_addr_high
0016E3  1  A9 11          lda #($10 | ^VRAM_layer1_map) ;
0016E5  1  8D 22 9F       sta VERA_addr_bank
0016E8  1  A9 BB          lda #<layer1_map
0016EA  1  85 22          sta ZP_PTR
0016EC  1  A9 0B          lda #>layer1_map
0016EE  1  85 23          sta ZP_PTR+1
0016F0  1  A2 0B          ldx #11   ; copy 21 rows * 128 bytes = 2,688 - ~11*256
0016F2  1  A0 00 B1 22    copy_bytes_to_vram_data0
0016F6  1  8D 23 9F C8  
0016FA  1  D0 F8 E6 23  
001701  1               
001701  1                 ;layer 1 config
001701  1  A9 10          lda #MODE_64x32_T16C
001703  1  8D 34 9F       sta VERA_L1_config
001706  1  A9 9A          lda #(VRAM_layer1_map >> 9)
001708  1  8D 35 9F       sta VERA_L1_mapbase
00170B  1  A9 A0          lda #(VRAM_layer1_tiles>>9)
00170D  1  8D 36 9F       sta VERA_L1_tilebase
001710  1               
001710  1  A9 01          lda #1
001712  1  8D 3A 9F       sta VERA_L1_VSCROLL_H
001715  1  A9 04          lda #4
001717  1  8D 39 9F       sta VERA_L1_VSCROLL_L
00171A  1               
00171A  1                 ; initialize floor/ceiling stuff....
00171A  1  9C 20 9F       stz VERA_addr_low
00171D  1  A9 00          lda #>VRAM_floor_ceiling
00171F  1  8D 21 9F       sta VERA_addr_high
001722  1  A9 10          lda  #($10 | ^VRAM_floor_ceiling)
001724  1  8D 22 9F       sta VERA_addr_bank
001727  1  A9 10          lda #<floor_ceiling_map
001729  1  85 22          sta ZP_PTR
00172B  1  A9 08          lda #>floor_ceiling_map
00172D  1  85 23          sta ZP_PTR+1
00172F  1  A2 02          ldx #2
001731  1  A0 00 B1 22    copy_bytes_to_vram_data0
001735  1  8D 23 9F C8  
001739  1  D0 F8 E6 23  
001740  1               
001740  1               
001740  1                 ; enable layers and start drawing
001740  1                 ;stz VERA_ctrl
001740  1  A9 31          lda #LAYER01_ENABLE
001742  1                 ;lda #LAYER0_ONLY ; for testing
001742  1                 ;lda #LAYER1_ONLY
001742  1                 ;lda #LAYERSPRITES_ONLY
001742  1                 ;lda #LAYER01SPRITES_ENABLE
001742  1  8D 29 9F       sta VERA_dc_video
001745  1               
001745  1               
001745  1                 ; overwrite RAM IRQ vector with custom handler address
001745  1  78             sei ; disable IRQ while vector is changing
001746  1  A9 33          lda #<custom_irq_handler
001748  1  8D 14 03       sta IRQVec
00174B  1  A9 18          lda #>custom_irq_handler
00174D  1  8D 15 03       sta IRQVec+1
001750  1  A9 01          lda #VSYNC_BIT ; make VERA only generate VSYNC IRQs
001752  1  8D 26 9F       sta VERA_ien
001755  1  58             cli ; enable IRQ now that vector is properly set
001756  1  9C 12 0A        stz VSYNC_counter
001759  1               
001759  1               check_keyboard:
001759  1  CB              wai
00175A  1  AC 12 0A        ldy VSYNC_counter
00175D  1  F0 FA           beq check_keyboard
00175F  1  9C 12 0A        stz VSYNC_counter
001762  1  A9 02           lda #$2   ; we're going to put VSYNC counter between HUD and viewport..
001764  1  8D 20 9F        sta VERA_addr_low
001767  1  A9 3C           lda #>VRAM_layer1_map+8
001769  1  8D 21 9F        sta VERA_addr_high
00176C  1  A9 21           lda #($20 | ^VRAM_layer1_map) ;
00176E  1  8D 22 9F        sta VERA_addr_bank
001771  1  98              tya
001772  1  4A              lsr
001773  1  4A              lsr
001774  1  4A              lsr
001775  1  4A              lsr
001776  1  8D 23 9F        sta VERA_data0
001779  1  98              tya
00177A  1  29 0F           AND #$0F
00177C  1  8D 23 9F        sta VERA_data0
00177F  1                  ; poll keyboard for input once per vsync
00177F  1  20 E4 FF        jsr GETIN
001782  1  C9 00           cmp #0
001784  1  F0 D3           beq check_keyboard
001786  1  C9 20           cmp #SPACE
001788  1  F0 03           beq do_mode7_test
00178A  1  4C 20 18        jmp do_cleanup
00178D  1               
00178D  1               do_mode7_test:
00178D  1                  ;  add in mode7 draw thing here..
00178D  1                  ; set position to start writing to screen buffer
00178D  1  64 22            stz ZP_PTR
00178F  1  A9 05            lda #>VRAM_layer0_bitmapA_start;
001791  1  85 23            sta ZP_PTR+1
001793  1  A9 10            lda #($10 | ^VRAM_layer0_bitmapA_start) ;
001795  1  85 24            sta ZP_PTR+2
001797  1                 ; set pointer to lookup table
001797  1  A9 13           lda #<ceiling_floor_lookup_table
001799  1  85 25           sta ZP_PTR+3
00179B  1  A9 0A           lda #>ceiling_floor_lookup_table
00179D  1  85 26           sta ZP_PTR+4
00179F  1               
00179F  1                  ;  configure FX_ctrl
00179F  1  A9 04           lda #%00000100    ; DCSEL=2, ADDRSEL=0
0017A1  1  8D 25 9F        sta VERA_ctrl
0017A4  1  A9 03           lda #$03 ; affine helper transparent writes off
0017A6  1  8D 29 9F        sta VERA_FX_CTRL
0017A9  1  A9 00           lda #0 ; (VRAM_floor_ceiling >>9)
0017AB  1  8D 2A 9F        sta VERA_FX_TILEBASE
0017AE  1  A9 01           lda #1 ; add 1 to set FX tilemap size to 8x8
0017B0  1  8D 2B 9F        sta VERA_FX_MAPBASE
0017B3  1               
0017B3  1  A0 00           ldy #0
0017B5  1                  @draw_row:
0017B5  1  A9 06            lda #%00000110  ; DCSEL=3, ADDRSEL=0
0017B7  1  8D 25 9F         sta VERA_ctrl
0017BA  1               
0017BA  1                  ;  set to draw this row, setup pointer to next row
0017BA  1  18               clc
0017BB  1  A5 22            lda ZP_PTR
0017BD  1  8D 20 9F         sta VERA_addr_low
0017C0  1  69 40            adc #64
0017C2  1  85 22            sta ZP_PTR
0017C4  1  A5 23            lda ZP_PTR+1
0017C6  1  8D 21 9F         sta VERA_addr_high
0017C9  1  69 01            adc #1
0017CB  1  85 23            sta ZP_PTR+1
0017CD  1  A5 24            lda ZP_PTR+2
0017CF  1  8D 22 9F         sta VERA_addr_bank
0017D2  1  69 00            adc #0
0017D4  1  85 24            sta ZP_PTR+2
0017D6  1                   ; set X increments
0017D6  1  B1 25            lda (ZP_PTR+3),y
0017D8  1  8D 2A 9F         sta VERA_FX_X_INC_H
0017DB  1  C8               iny                   ; y+1
0017DC  1  B1 25            lda (ZP_PTR+3),y
0017DE  1  8D 29 9F         sta VERA_FX_X_INC_L
0017E1  1  C8               iny                   ; y+2
0017E2  1                   ; set start positions
0017E2  1  A9 09            lda #%00001001   ; DCSEL=4, addrsel=1
0017E4  1  8D 25 9F         sta VERA_ctrl
0017E7  1  B1 25            lda (ZP_PTR+3),y
0017E9  1  8D 29 9F         sta VERA_FX_X_POS_L
0017EC  1  C8               iny                   ; y+3
0017ED  1  9C 2A 9F         stz VERA_FX_X_POS_H
0017F0  1  B1 25            lda (ZP_PTR+3),y
0017F2  1  8D 2B 9F         sta VERA_FX_Y_POS_L
0017F5  1  C8               iny                   ; y+4
0017F6  1  9C 2C 9F         stz VERA_FX_Y_POS_H
0017F9  1  A2 50            ldx #80
0017FB  1               
0017FB  1                   @draw_4_pixel:
0017FB  1  AD 24 9F             lda VERA_data1
0017FE  1  8D 23 9F             sta VERA_data0
001801  1  AD 24 9F             lda VERA_data1
001804  1  8D 23 9F             sta VERA_data0
001807  1  AD 24 9F             lda VERA_data1
00180A  1  8D 23 9F             sta VERA_data0
00180D  1  AD 24 9F             lda VERA_data1
001810  1  8D 23 9F             sta VERA_data0
001813  1  CA                   dex
001814  1  D0 E5                bne @draw_4_pixel
001816  1  C0 E0            cpy #224 ; 56 lines after incrementing y 4 times each..
001818  1  D0 9B            bne @draw_row
00181A  1                  ; done drawing rows
00181A  1               
00181A  1  9C 25 9F        stz VERA_ctrl ; clear fX mode
00181D  1  4C 59 17        jmp check_keyboard
001820  1               
001820  1               do_cleanup:
001820  1                  ; restore default IRQ vector
001820  1  78              sei
001821  1  AD 10 0A        lda default_irq_vector
001824  1  8D 14 03        sta IRQVec
001827  1  AD 11 0A        lda default_irq_vector+1
00182A  1  8D 15 03        sta IRQVec+1
00182D  1  58              cli
00182E  1  20 81 FF        jsr CINT
001831  1  60              rts
001832  1  60             rts
001833  1               
001833  1               custom_irq_handler:
001833  1  AD 27 9F        lda VERA_isr
001836  1  29 01           and #VSYNC_BIT
001838  1  F0 03           beq @continue ; non-VSYNC IRQ, no tick update
00183A  1  EE 12 0A        inc VSYNC_counter
00183D  1               
00183D  1               @continue:
00183D  1                  ; continue to default IRQ handler
00183D  1  6C 10 0A        jmp (default_irq_vector)
001840  1                  ; RTI will happen after jump
001840  1               
001840  1               
001840  1               
001840  1               
