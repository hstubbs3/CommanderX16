


top 4 bit coverage? - 111 points out of 256 never hit - have 57% possible tangents .. highest tan reachable is 240/256 - 30.69 .. which could be tweaked maybe.. 
but double precision angles should be fine this way..% average error is ~5% .. need to fix some logic though where the top and bottom best 4 bits are equal? 
if the exponent is equal and top 4 bits equal its making it 128 not 255 .. That's not horrible thing to check actually..
If bits T and B are equal, T >= 1/2 .. so could make the diagonal 248 no prob.. then switch that logic relating to the exponent stuff..

seems convoluted but 3.13% overage absolute error... max error ~8%  ( out of /256 frac ) noice.
average +/- error - .79% ! 

fixing up that logic and setting max to 248 means now all precision angles coverable?
actually it should be 244 not 248 . that helps span that upper bit better.. 
only 107 frac out of 256 can't be hit now..  all 64 precision values possible.. woot ! 
3.19% / 0.61% average errors - 

how to account for the improper regions? 

assuming B_exponent > 3 ... 

if T_exponent == B_exponent : shift = 0
elif T_NIB <= B_NIB: shift = B_exponent - max(3,T_exponent)
else : shift = B_exponent - max(3,T_exponent) - 1

ugh.. 
improper is nifty trick though.. adding lookup to check improper just kinda sucks.. but eh.. is not so bad considering all it is enabling.. a relatively fast and precise 8 bit division..
 		0 	1 	2 	3 	4 	5 	6 	7 	8 	9 	A 	B 	C 	D 	E 	F
0 		0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
1 		0	244	128	85	64	51	42	36	32	28	25	23	21	19	18	17
2 		0	128	244	170	128	102	85	73	64	56	51	46	42	39	36	34
3 		0	192	192	244	192	153	128	109	96	85	76	69	64	59	54	51
4 		0	128	128	170	244	204	170	146	128	113	102	93	85	78	73	68
5 		0	160	160	213	160	244	213	182	160	142	128	116	106	98	91	85
6 		0	192	192	128	192	153	244	219	192	170	153	139	128	118	109	102
7 		0	224	224	149	224	179	149	244	224	199	179	162	149	137	128	119
8 		0	128	128	170	128	204	170	146	244	227	204	186	170	157	146	136
9 		0	144	144	192	144	230	192	164	144	244	230	209	192	177	164	153
A 		0	160	160	213	160	128	213	182	160	142	244	232	213	196	182	170
B 		0	176	176	234	176	140	234	201	176	156	140	244	234	216	201	187
C 		0	192	192	128	192	153	128	219	192	170	153	139	244	236	219	204
D 		0	208	208	138	208	166	138	237	208	184	166	151	138	244	237	221
E 		0 	224	224	149	224	179	149	128	224	199	179	162	149	137	244	238
F		0 	240	240	160	240	192	160	137	240	213	192	174	160	147	137	244

T>B
 		0 	1 	2 	3 	4 	5 	6 	7 	8 	9 	A 	B 	C 	D 	E 	F
0 		0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
1 		1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
2 		1	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0
3 		1	1	1	0	0	0	0	0	0	0	0	0	0	0	0	0
4 		1	1	1	1	0	0	0	0	0	0	0	0	0	0	0	0
5 		1	1	1	1	1	0	0	0	0	0	0	0	0	0	0	0
6 		1	1	1	1	1	1	0	0	0	0	0	0	0	0	0	0
7 		1	1	1	1	1	1	1	0	0	0	0	0	0	0	0	0
8 		1	1	1	1	1	1	1	1	0	0	0	0	0	0	0	0
9 		1	1	1	1	1	1	1	1	1	0	0	0	0	0	0	0
A 		1	1	1	1	1	1	1	1	1	1	0	0	0	0	0	0
B 		1	1	1	1	1	1	1	1	1	1	1	0	0	0	0	0
C 		1	1	1	1	1	1	1	1	1	1	1	1	0	0	0	0
D 		1	1	1	1	1	1	1	1	1	1	1	1	1	0	0	0
E 		1	1	1	1	1	1	1	1	1	1	1	1	1	1	0	0
F 		1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	0


screenX lookup - 
get precision angle value from ATAN. 

possibly need to subtract from 128 - from ATAN is angle 0 to 63 where 63 is nearly 45* .. 
basically - if octant is Y major, do subtract / negate .. 

EOR #$7F 	would make 63 into 64 
INC A 		and we want 63 to become 65 in this case.. 

Then subtract left precision angle .. 
    SEC
    SBC ZP_SCR_LEFT 
    BCC IS_LEFT_OF_SCREEN
    BMI IS_RIGHT_OF_SCREEN
    TAX
    LDA SCREEN_X,X 

ez pz lemon squeezy .. screen is +/- 63 BAM , 128 possible screenX only. .  but max 320 px means something ever 2-3 px, not bad. 

screen_X table is sorta mirror of the ATAN lookup one.. 

ATAN_TABLE:
    ; 	   0 	1 	2 	3 	4 	5 	6 	7 	8 	9 	A 	B 	C 	D  	E 	F
    .byte  0, 	0, 	1, 	1, 	1, 	2, 	2, 	2, 	3, 	3, 	3, 	3, 	4, 	4, 	4,	5 
    .byte  5, 	6, 	6, 	6, 	6, 	7, 	7,	7, 	8, 	8, 	8, 	9, 	9, 	9, 	9, 	10
    .byte  10, 	10, 11, 11, 11, 12, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14
    .byte  15,  15, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 19, 19, 20, 20
    .byte  20,  20, 21, 21, 21, 21, 22, 22, 22, 23, 23, 23, 23, 24, 24, 24
    .byte  25,  25, 25, 25, 26, 26, 26, 27, 27, 27, 27, 28, 28, 28, 29, 29
    .byte  29,  29, 30, 30, 30, 30, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33
    .byte  34,  34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 37
    .byte  38,  39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 41, 41, 41, 41
    .byte  42,  42, 42, 42, 43, 43, 43, 43, 44, 44, 44, 44, 44, 45, 45, 45
    .byte  45,  46, 46, 46, 46, 47, 47, 47, 47, 47, 48, 48, 48, 48, 49, 49
    .byte  49,  49, 49, 50, 50, 50, 50, 50, 51, 51, 51, 51, 52, 52, 52, 52
    .byte  52,  53, 53, 53, 53, 53, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55
    .byte  56,  56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58
    .byte  59,  59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 61, 61, 61, 61
    .byte  62,  62, 62, 62, 62, 62, 62, 63, 63, 63, 63, 63, 63, 63, 63, 63

actually can't even hit 63 normally... even in half there is missing bits ... 

maybe need to reconsider case T >= B/2 ... probably not too horrible issue though. maybe not worth doing, all things considered.. 

SCREEN_X_TABLE:
; is frac/256 * screenwidth, where frac is TAN of angles above... so only 128 entries... ! 
; evenly spaced per precision angle would contribute to fisheye skew? or just off a bit? 
; say for 304 px wide screen - 157/64 = 2.45 ... 
    ; 	   0 	1 	2 	3 	4 	5 	6 	7 	8 	9 	A 	B 	C 	D  	E 	F
    .byte  0, 	3, 	6, 	9, 	12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45
    .byte  48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81, 84, 86, 88, 90
    .byte   92, 94, 96, 98,100,102,104,106,108,110,112,114,116,118,120,122
    .byte  124,126,128,130,132,134,136,138,140,142,144,148,150,152,154,156
    .byte  157

Ooops... need to double-check ranging. fuck.. totally goofed the flow..
   LDY ZP_B+1
   LDX RANGER,Y
   JMP TABLE,x

   each level - 
      extract 8 bits of T
      get top 4 bits of B 
      make value to do lookup - put into Y
      get range of B 
      subtract range of T
      If zero - 
          skip improper
          do lookup into X
          do ATAN
          return
      else -
          sub improper check 
          Put range into X
          do lookup into A
          jump 


CALC_FRAC256_FROM_16BIT:
    LDY ZP_B+1 	; 	2 	2 		3 	3
    LDX RANGER,Y ; 	3  	7 		4 	7
    JMP @TABLE,X ;3 	10 		6 	13
  @TABLE:
      .address @DO_B8BIT 	; 	2 	12
      .address @DO_B9BIT  	;	2 	14
      .address @DO_B10BIT 	;	2 	16
      .address @DO_B11BIT 	; 	2 	18
      .address @DO_B12BIT 	; 	2 	20
      .address @DO_B13BIT 	;	2 	22
      .address @DO_B14BIT 	;	2 	24
      .address @DO_B15BIT 	;	2 	25
      .address @DO_B16BIT 	; 	2 	28 	26B first stanza
  @DO_B8BIT:
      LDX ZP_B ; 	3 	3 	B in X
      LDA TOP4H,X ; 4 	7   A has TOP4 of B
      LDY ZP_T ; 	3 	10  Y has T
      ORA TOP4L,Y ; 4 	14 	A ready as lookup, X has B  Y has T
      TAY 		;	2 	16 	overrite T with lookup
      LDA RANGER,X ; 4 	20  Get B Range
      LDX ZP_T 	;	3 	23 	restore T to X
      BRA SUBTRACT_RANGES ; 3 	26
  @DO_B9BIT:
      LDA ZP_B 	; 	3 	3
      LSR  		; 	2 	5
      ORA #$80 	; 	2 	7
      AND #$F0 	; 	2 	9
      TAY  		;	2 	11
      LDA ZP_T+1 ; 	3 	14
      LSR 		; 	2 	16
      LDA ZP_T 	; 	3 	19
      ROR 		; 	2 	21
      BRA WAIT_A_MIN_BRUH ;	3 	24
  @DO_B10BIT: 	;	......98 76543210
      LDA ZP_B 	;	3 	3 	76543210
      AND #$C0 	; 	2 	5 	76......
      ORA ZP_B+1 ; 	3 	8 	76....98
      TAY 	; 	2 	10 		
      LDX ROT4,Y 	; 	4 	14 	..9876..
      LDY HI4H,X 	; 	4 	18 	9876....
      LDA ZP_T 	;	3 	21 	76543210
      AND #$FC 	; 	2 	23 	765432..
      ORA ZP_T+1 ; 	3 	26 	76543298
      LSR 		; 	2 	28 	.7654329
      BCC @B10A ; 	2 	30
      ORA #$80 	;	2 	32 	87654329
    @B10A:
       LSR 		; 	2 	34 	.8765432
       BCC WAIT_A_MIN_BRUH ; 	2 	36 	
       ORA #$80  ; 	2 	38 	98765432
       BRA WAIT_A_MIN_BRUH ; 	3 	41 	5 behind B12


   @DO_B11BIT:
       LDA ZP_B 	;	3
       ASL 			;	2 	5
       TYA 			;	2 	7
       ROL  		;	2 	9
       TAX 			;	2 	11
       LDY ROT4,X 	;	4 	15 	top4 in Y
       LDA ZP_T 	;	3 	18
       AND #$F8 	;	2 	20
       ORA ZP_T+1 	; 	3 	23
       TAX 			; 	2 	25
       LDA ROT4,X 	;	4 	29
       BRA ASL_ADC1 ; 	3 	32
   @DO_B12Bit:
        LDA ROT4,Y 	;	4 	4
        TAY 		; 	2 	6
        LDA ZP_T 	; 	3 	9
        AND #$F0 	;	2 	11
        ORA ZP_T+1 	;	3 	14
        TAX 		; 	2 	16
        LDA ROT4,X 	;	4 	20
        BRA WAIT_A_MIN_BRUH ; 23
   @DO_B13BIT:  ; 	...43210 	;	13 cycles to here 
        TYA 	;	2 	2
        ASL 	; 	2 	4
        ASL 	; 	2 	6
        ASL 	; 	2 	8
        AND #$F0 	; 	2 	10
        TAY 	 	;	2 	12
        LDA ZP_T 	; 	3 	15
        AND #$E 	; 	2 	17
        ORA ZP_T+1 	;	3 	20
   ASL_ADC3: 
        ASL 		; 	2 	2 	B13B - 	22
        ADC #0 		;	2 	4 			24
   ASL_ADC2: 								;		B14 - 13+21=34 +21+23 best case - 78 worse case 89
        ASL 		; 	2 	2 			26
        ADC #0 		; 	2 	4 			28
   ASL_ADC1: ;										B15 - 13+19=32 +17+23 best case - 72 worse case 86 	B11 13+32..13 behind B15
        ASL 		;	2 	2 			30
        ADC #0 		; 	2 	4 			32
WAIT_A_MIN_BRUH: 	;								B12 - 13+23=36 to here +12 to subtract_ranges. = 48, 9 behind b8
      TAX 				;	T:87654321 in X 	34
WAITI_A_MIN_BRUH2: 	; 								B16 - 25 to here .. + 10 = 37 .. 2 better than B8
      TYA 			; 						36 		
      ORA TOP4L,X 	; 						40
      TAY 				;	lookup in Y 	42
      LDA #16 		;	8bits range for B 	45
SUBTRACT_RANGES: 									; B8 runtime 13+26 to this point..39..  +8+15 = 62 best case +24+20= 83 cycle worse  
      SEC 			; 							47
      SBC RANGER,X 	; 	subtract range for B  	51
      BEQ SKIP_IMPROPER ; 2 32 					53 
      SBC IMPROPER,Y ; 4 	4 					57
      TAX 			; 2 	6 					59
      LDA DIV,Y 	; 	4 	10 					63
      JMP @IMPROPTABLE,X ; 6 	16 				69
  @IMPROPTABLE:
      .address @EXP0
      .address @EXP1
      .address @EXP2
      .address @EXP3
      .address @EXP4
  @EXP4: LSR 					;	2 	2
  @EXP3: LSR 					;	2 	4
  @EXP2: LSR 					;	2 	6
  @EXP1: LSR 					; 	2 	8
  @EXP0: 
      TAX 						; 	2 	10
      LDA ATAN,X 	; 	4 	8 	; 	4 	14
      RTS 						;	6 	20 		B13 likely is worse runtime - 13+69+20 = 102 cycles worse case. 13+53+15=81 cycle best case 
  SKIP_IMPROPER:
      LDX DIV,Y 	;	4 	36
      LDA ATAN,X 	; 	4 	8
      RTS
   @DO_B14BIT:
        TYA 			;	2 	2
        ASL 			;	2 	4
        ASL 			;	2 	6
        AND #$F0 		;	2 	8
        TAY 			;	2 	10
        LDA ZP_T 		;	3 	13
        AND #$C0 		;	2 	15
        ORA ZP_T+1 		;	3 	18
      BRA ASL_ADC2 		;	3 	21
   @DO_B15BIT:
       TYA 	 	;	2 	2
       ASL 		; 	2 	4
       AND #$F0 ;	2 	6
       TAY 		; 	2 	8
       LDA ZP_T ; 	3 	11
       AND #$80  ; 	2 	13
       ORA ZP_T+1 ;	3 	16
      BRA ASL_ADC1 	; 	3 	19
   @DO_B16BIT:
       TYA 						;	2 	2
       AND #$F0 				;	2 	4
       TAY 						;	2 	6
       LDX ZP_T+1 				; 	3 	9
       BRA WAITI_A_MIN_BRUH2 	;	3 	12 	B16 best case? 13+12=25 +12 to subtract_ranges = 37 .. 2 less than B8 ... 60 best case, 83 worse case.. 


; 149 lines at average 2 bytes per? - ~300 BYTES of code... maybe less with all the labels and 1 BYTE instructions.. 
; needs lookup tables - RANGER,TOP4H,TOP4L,ROT4,DIV,ATAN,IMPROPER .. 7 tables ... so total about 2K for the operation
may need to tweak code placement to ensure local branches OK 


BITS/BOTTOM 	BEST 	WORST 	average/expected
8 				62 		85 		73
9 				57 		78 		67
10  			69		95 		82
11 				85 		106 	95
12 				69 		90 		79
13 				81 		102 	91
14 				78 		99 		88
15 				72 		93 		82
16 				60 		81 		71
~81 cycles on average.. so ~100 cycles to screenX per side of segment to draw... ~200 cycles / segment
rest of the traversal and calculations - likely ~256 cycles / segment setup/overhead ... likely typical scene only has ~64 such segments - ~16K cycles overhead drawing segments / frame?
at something around 12 cycles/pixel to draw... 304x160 display .. say ~500K cycles just drawing? 15 fps budget is 533K cycles / frame.. larger columns would mean less segments to draw though..
segments are square? so worse case 1 segment = 160x160 of display, so filling screen with walls would mean drawing 2-3 walls maybe.. and would mean two close for bad guys?
80x80 per wall - ~5 walls - 1/2 the textured pixels but floor/ceiling isn't free dawg so like 375K cycles drawing .. more likely to have sprites and such though?

Most likely this system wants to be 160x120 or 215x161 instead.. even 256x191 may be improvement? 256x191 was like 240x144 view area - 35K pixels.. 2.5 scaler
200x120 = 24K pixels at 3 scaler, even better.. prob could have floors / ceilings but maybe pixelated is close to SNES WOLF3D ..

This is all working blindly assuming T is very small? some of the manipulations get long.. maybe if can avoid having to grab extra bits...

Like for B11 ?

   @DO_B11BIT:
       LDA ZP_B 	;	3
       ASL 			;	2 	5
       TYA 			;	2 	7
       ROL  		;	2 	9
       TAX 			;	2 	11
       LDY ROT4,X 	;	4 	15 	top4 in Y
       LDA ZP_T 	;	3 	18
       AND #$F8 	;	2 	20
       ORA ZP_T+1 	; 	3 	23
       TAX 			; 	2 	25
       LDA ROT4,X 	;	4 	29
       BRA ASL_ADC1 ; 	3 	32

   @DO_B11BIT:
       ....
       LDY ROT4,X 	;	4 	15 	top4 in Y
       LDX ZP_T+1 	; 	3 	18
       CPX #8 		; 	2 	20
       BCS @B11A 	;	2 	22
     @B11A: 	;	1 	23
       LDA ZP_T 	; 	3 	26
       ASL 			; 	2 	28
       TXA 			; 	2 	30
       ROL 			;	2 	32
       TAX 			; 	2 	34

yeah no... no good..

B13?
   @DO_B13BIT:  ; 	...43210 	;	13 cycles to here 
        TYA 	;	2 	2
        ASL 	; 	2 	4
        ASL 	; 	2 	6
        ASL 	; 	2 	8
        AND #$F0 	; 	2 	10
        TAY 	 	;	2 	12 ok stashed the Y
        LDA ZP_T 	; 	3 	15
        AND #$E 	; 	2 	17
        ORA ZP_T+1 	;	3 	20
        ASL 	;	2 	22
        ADC 	; 	2 	24
        ASL 	; 	2 	26
        ADC 	; 	2 	28
        ASL 	; 	2 	30
        ADC 	; 	2 	32

well.. first of all can save 6 cycles with a lookup... 
   @DO_B13BIT:  ; 	...43210 	;	13 cycles to here 
        LDA TOP4H,Y ; 4 	4
        TAY 	;	2 	6
     ; from there though - comparing to 12 here..
        LDX ZP_T+1 	; 	3 	3
        CPX #8 		; 	2 	5
        BCS @B13A 	; 	2 	7 	8 +12=20 - 12 cycles better if don't need to get more bits .. 
        CPX #2 		; 	2 	9 	...__???
        BCS @B13B 	; 	2 	11
        ;	...____? - need bits
        TXA 		; 	2 	13
        LSR 		;	2 	15
        LDA ZP_T 	;	3 	18
        ROR 		; 	2 	20
        BRA @B13A
      @B13B: ; ...__?X?

      @B13A: ; 8 (20/32 - some improvement..)


   @DO_B13BIT:  ; 	...43210 	;	13 cycles to here 
        LDA TOP4H,Y ; 4 	4
        TAY 	;	2 	6
        LDA ZP_T 	; 	3 	9 	...CBA98 76543210
        AND #$E 	; 	2 	11  765_____
        ORA ZP_T+1 	;	3 	14  765CBA98 .. ASL / ADC x 3 = 12  - can we beat 26 ? 
        TAX 		; 	2 	16
        LDA ROT4,X 	; 	4 	20 	BA98765C
        LSR 		; 	2 	22 	_BA98765
        BCC @B13A 	; 	2 	24
        ORA #$80 	; 	2 	26 	CBA98765
      @B13A: ; 25/26 		not really.. would need ROT5 or something lookup.. 


nope the worse cases just suck. is not a lot of variation though, just figure on ~100 cycles per.. or do full divide.. 


OK have precision angle, returning from CALC_ATAN

      LDA ATAN,X 	; 	4 	8
      RTS

      SEC
      SBC ZP_LEFTANGLE
      BCC WITHIN_VIEW
   OUTSIDE_VIEW:
      CMP #192 	
      BCC 	OFFRIGHT
   OFFLEFT:
       ; if this was LEFT side calc, clip. Otherwise, segment outside view
       LDA #0

   OFFRIGHT:
       ; if this was RIGHT side calc, clip. Otherwise, segment outside view
       LDA #127

   WITHIN_VIEW:
   	  TAX 	
   	  LDA SCREEN_X,X 

whatif... just do top 6bits top/bottom lookup? 12bit lookup - 4K ? faster?
Hmmmm... seems about same actually... 
TAN_CALC_4K:
    LDY ZP_B+1   ; 3 3
    LDX RANGER,Y ; 4 7
    JMP @TCT,X   ; 6 13 
 @TCT:
    .address @TCTBLOW
    .address @TCTBZERO
    .address @TCTBONE
    .address @TCTBTWO
    .address @TCTBTHREE
    .address @TCTBFOUR
    .address @TCTBFIVE
    .address @TCTBSIX
    .address @TCTBSEVEN
  @TCTBLOW:
      LDA ZP_B 			; 	3 	3
      BMI @TCTBLOWSEVEN ; 	2 	5
      CMP #64 			; 	2 	7
      BCS @TCTBLOWSIX 	; 	2 	9
    @TCTBLOWFIVE: 	; 	12
      ASL 				; 	2 	2
      ASL 				; 	2 	4
      STY ZP_LK 		;	3 	7
      LDA ZP_T 		 	; 	3 	10
    @TCPBL7_T7:
    @TCTB7_T7:
      LSR 				;	2 	12
      LSR 				; 	2 	14
      LSR 				; 	2 	16
      ROR ZP_LK 		; 	5 	21
      LSR 				; 	2 	23
      ROR ZP_LK 		; 	5 	28
      ORA #>TAN_LOOKIES	; 	2 	30
      STA ZP_LK+1 		; 	3 	33
      LDX (ZP_LK) 		; 	5 	38
      LDA ATAN,X 		; 	4 	42
      RTS 				; 	6  	48+9 +13 = 70
    @TCTBLOWSIX: 	;	10
      ASL 				; 	2 	2
      STA ZP_LK 		; 	3 	5
      LDA ZP_T 			; 	3 	8
      CMP #64  			; 	2 	10
      BCS @TCTBL6_T6 	; 	2 	12
    @TCTBL6_T5: 	12
    @TCPBL7_T6:
    @TCTB7_T6:
      LSR 				;	2 	2
      LSR 				; 	2 	4
      ROR ZP_LK 		; 	5 	9
      LSR 				; 	2 	11
      ROR ZP_LK 		; 	5 	16
      ORA #>TAN_LOOKIES	; 	2 	18
      STA ZP_LK+1 		; 	3 	21
      LDA (ZP_LK) 		; 	5 	26
      LSR 				; 	2 	28
      TAX 				; 	2 	30
      LDA ATAN,X 		; 	4 	34
      RTS 				; 	6  	40 + 12+9+13 = 74
    @TCTBL6_T6: ;	13
      LSR 				; 	2 	2
      LSR 				; 	2 	4
      ROR ZP_LK 		; 	5 	9
      LSR 				; 	2 	11
      ROR ZP_LK 		; 	5 	16
      ORA #>TAN_LOOKIES	; 	2 	18
      STA ZP_LK+1 		; 	3 	21
      LDA (ZP_LK) 		; 	5 	26
      TAX 				; 	2 	28
      LDA ATAN,X 		; 	4 	32
      RTS 				; 	6  	38 + 12+9+13 = 72
    @TCTBLOWSEVEN: ; 6
      STA ZP_LK 	;	3 	3
      LDA ZP_T 		;	3 	6
      BMI @TCPBL7_T7 ; 2 	8 	ends up 69
      CMP #64 		;	2 	10
      BCC @TCPBL7_T5 ; 3 	13
      LSR 	;	2 	15
      BRA @TCPBL7_T6 	;	3 	16
    @TCPBL7_T5: ; 14
    @TCTB7_T5:
      LSR 		;	2 	2
      ROR ZP_LK ; 	5 	7
      LSR 		; 	2 	9
      ROR ZP_LK ; 	5 	14
      ORA #>TAN_LOOKIES	; 	2 	16
      STA ZP_LK+1 		; 	3 	19
      LDA (ZP_LK) 		; 	5 	24
      LSR 				; 	2 	26
      LSR 				;	2 	28
      TAX 				; 	2 	30
      LDA ATAN,X 		; 	4 	34
      RTS 				; 	6  	40 + 14+6+13 = 73
    @TCTBZERO: 		;	13 from the jump
    @TCTBONE: 		;	13 from the jump
    @TCTBTWO: 		;	13 from the jump
    @TCTBTHREE: 	;	13 from the jump
    @TCTBFOUR: 		;	13 from the jump
    @TCTBFIVE: 		;	13 from the jump
    @TCTBSIX:  		;	13 from the jump
        TYA 	;	2 	2
        ASL 	;	2 	4
        STA ZP_LK  	;	3 	7
        LDA ZP_T+1 	; 	3 	10
....
    @TCTBSEVEN: 	;	13 from the jump
        STY ZP_LK 	;	3 	3
        LDA ZP_T+1 	; 	3 	6
        BMI @TCTB7_T7 ; 	2 	8
        CMP #64 	; 	2 	10
        BCS @TCTB7_T6 ; 	2 	12
        BRA @TCTB7_T5; 	3 	15







;
;http://6502org.wikidot.com/software-math-intdiv#toc1
;16-bit / 8-bit = 8-bit quotient, 8-bit remainder (unsigned)
;Inputs:
;TH = bits 15 to 8 of the numerator
;TLQ = bits 7 to 0 of the numerator
;B = 8-bit denominator
;Outputs:
;TLQ = 8-bit quotient of T / B
;accumulator = remainder of T / B
;;
;   LDA TH
;   LDX #8
;   ASL TLQ
;L1 ROL
;   BCS L2
;   CMP B
;   BCC L3
;L2 SBC B
;;
;; The SEC is needed when the BCS L2 branch above was taken
;;
;   SEC
;L3 ROL TLQ
;   DEX
;   BNE L1
;


; do divide, expecting 8bit fraction / 255 of ZP_BSP_MATH_TEMP / ZP_BSP_MATH_TEMP+1 
; temp+1 should be larger.. duh
T = ZP_BSP_MATH_TEMP
B = ZP_BSP_MATH_TEMP+1

SIMPLE_DIVIDE_FRACTIONAL:
    ;                                     C            T      B      
    ;                                                 47   /   105   =  114
    LDA TH    ; 3   10                                                                
    ; LDX #8 ... 
    CLC   ; ASL TLQ   set to eqiv         /
  X8:
      ROL A   ; 2   2                     /           98
      TAX     ; 2   4         98
      SBC B   ; 3   7                                 NEG /
      BCS @END ;  2 9
      TXA     ; 2   11                                98
    @END: ; 10/11
  X7:
      ROL A   ; 2   2                                 196   /
      TAX     ; 2   4     196
      SBC B   ; 3   7                                  90   C
      BCS @END ;  2 9
      TXA     ; 2   11
    @END: ; 10/11
  X6:
      ROL A   ; 2   2                                 181   /
      TAX     ; 2   4     181
      SBC B   ; 3   7                                  76   C
      BCS @END ;  2 9
      TXA     ; 2   11
    @END: ; 10/11
  X5:
      ROL A   ; 2   2                                 153   /
      TAX     ; 2   4     153
      SBC B   ; 3   7                                  47   C
      BCS @END ;  2 9
      TXA     ; 2   11
    @END: ; 10/11
  X4:
      ROL A   ; 2   2                                  99   /
      TAX     ; 2   4     99
      SBC B   ; 3   7                                  NEG  /
      BCS @END ;  2 9
      TXA     ; 2   11                                 99
    @END: ; 10/11
  X3:
      ROL A   ; 2   2                                  198
      TAX     ; 2   4   198
      SBC B   ; 3   7                                   92  C
      BCS @END ;  2 9
      TXA     ; 2   11
    @END: ; 10/11
  X2:
      ROL A   ; 2   2                                  185  /                     
      TAX     ; 2   4   185 
      SBC B   ; 3   7                                   79  C
      BCS @END ;  2 9
      TXA     ; 2   11
    @END: ; 10/11
  X1:
      ROL A   ; 2   2                                  159  /
      TAX     ; 2   4
      SBC B   ; 3   7                                   53  C
      BCS @END ;  2 9
      TXA     ; 2   11
    @END: ; 10/11
  X0:
      ROL A   ; 2   2                                 107 !   

actually pretty close... 

; do divide, expecting 8bit fraction / 255 of ZP_BSP_MATH_TEMP / ZP_BSP_MATH_TEMP+1 
; temp+1 should be larger.. duh
T = ZP_BSP_MATH_TEMP
B = ZP_BSP_MATH_TEMP+1

SIMPLE_DIVIDE_FRACTIONAL:
    ;                                     C            T      B      
    ;                                                 47   /   105   =  114
    LDA TH    ; 3   10                                                                
    ; LDX #8 ... 
    CLC   ; ASL TLQ   set to eqiv         /
    ;                       ACC   C
    ;                        47   /
  X8:
      ROL A   ; 2   2        98   /       
      SBC B   ; 3   7       -8  248   /
  X7:
      ROL A   ; 2   2       240   C   
      SBC B   ; 3   7       135   C
  X6:
      ROL A   ; 2   2        15   C       
      SBC B   ; 3   7       166   /
  X5:
      ROL A   ; 2   2        76   C       
      SBC B   ; 3   7       227   /
  X4:
      ROL A   ; 2   2       198   C       
      SBC B   ; 3   7        93   C
  X3:
      ROL A   ; 2   2       187   /       
      SBC B   ; 3   7        81   C
  X2:
      ROL A   ; 2   2       163   /       
      SBC B   ; 3   7        57   C
  X1:
      ROL A   ; 2   2       115   /   <- !!!       


SIMPLE_DIVIDE_FRACTIONAL:
    ;                                     C            T      B      
    ;                                                 64    128 = 128 1/2
    LDA TH    ; 3   10                                                                
    ; LDX #8 ... 
    CLC   ; ASL TLQ   set to eqiv         /
    ;                       ACC   C
    ;                        64   /
  X8:
      ROL A ;               128   /
      SBC B ;               255   /
  X7:
      ROL A ;               254   C
      SBC B ;               126   C
  X6:
      ROL A ;               253   /
      SBC B ;               124   C
  X5:
      ROL A ;               249   /
      SBC B ;               120   C
  X4:
      ROL A ;               241   /
      SBC B ;               112   C
  X3:
      ROL A ;               225   /
      SBC B ;                96   C
  X2:
      ROL A ;               193   /
      SBC B ;                64   C
  X1:
      ROL A ;               129   /   <- huh... 


SIMPLE_DIVIDE_FRACTIONAL:
    ;                                     C            T      B      
    ;                                                  1    128 = 2
    LDA TH    ; 3   10                                                                
    ; LDX #8 ... 
    CLC   ; ASL TLQ   set to eqiv         /
    ;                       ACC   C
    ;                         1
  X8:
      ROL A ;                 2   /
      SBC B ;               129   /
  X7:
      ROL A ;                 2   C
      SBC B ;               130   /
  X6:
      ROL A ;                 4   C
      SBC B ;               132   /
  X5:
      ROL A ;                 8   C
      SBC B ;               136   /
  X4:
      ROL A ;                16   C
      SBC B ;               144   /
  X3:
      ROL A ;                32   C
      SBC B ;               160   /
  X2:
      ROL A ;                64   C
      SBC B ;               192   /
  X1:
      ROL A ;               128   C   <- close/ish.. ? 

SIMPLE_DIVIDE_FRACTIONAL:
    ;                                     C            T      B      
    ;                                                 1    128 = 2
    LDA TH    ; 3   10                                                                
    ; LDX #8 ... 
    SEC   ; ASL TLQ   set to eqiv         /
    ;                       ACC   C
    ;                        1    C
  X8:
      ROL A ;                3    /
      SBC B ;               130   /
  X7:
      ROL A ;                 4   C  
      SBC B ;               132   /
  X6:
      ROL A ;                 8   C
      SBC B ;               136   /
  X5:
      ROL A ;                16   C
      SBC B ;               144   /
  X4:
      ROL A ;                32   C
      SBC B ;               160   /
  X3:
      ROL A ;                64   C
      SBC B ;               192   /
  X2:
      ROL A ;               128   C
      SBC B ;                 0   C
  X1:
      ROL A ;                 1   / ?

SIMPLE_DIVIDE_FRACTIONAL:
    ;                                     C            T      B      
    ;                                                 192    208  = 236
    LDA TH    ; 3   10                                                                
    ; LDX #8 ... 
    SEC   ; ASL TLQ   set to eqiv         /
    ;                       ACC   C
    ;                       192   C
  X8:
      ROL A ;               129   C
      SBC B ;               177   /
  X7:
      ROL A ;                98   C
      SBC B ;               146   /
  X6:
      ROL A ;                36   C
      SBC B ;                84   /
  X5:
      ROL A ;               168   /
      SBC B ;               215   /
  X4:
      ROL A ;               174   C
      SBC B ;               222   /
  X3:
      ROL A ;               188   C
      SBC B ;               236   /   <- something something how many digits in divisor?
  X2:
      ROL A ;               216   C
      SBC B ;                 8   C
  X1:
      ROL A ;                  
SIMPLE_DIVIDE_FRACTIONAL:
    ;                                     C            T      B      
    ;                                                 192    208 = 236
    LDA TH    ; 3   10                                                                
    ; LDX #8 ... 
    CLC   ; ASL TLQ   set to eqiv         /
    ;                       ACC   C
    ;                       192   /
  X8:
      ROL A ;               128   C
      SBC B ;               176   /
  X7:
      ROL A ;                96   C
      SBC B ;               144   /
  X6:
      ROL A ;                32   C
      SBC B ;                80   /
  X5:
      ROL A ;               160   /
      SBC B ;               207   /
  X4:
      ROL A ;               158   C
      SBC B ;               206   /
  X3:
      ROL A ;               156   C
      SBC B ;               204   /
  X2:
      ROL A ;               152   C
      SBC B ;               200   /
  X1:
      ROL A ;               144   ?

is weird it almost works despite muxing up the digits ... really shouldn't do that? 

    ; 192 / 208 = 236 as fraction ... 
    ;              ACC   C    ANS
    ;              192   /
    LDA #$FE
    STA ANS  ;                 254
    LDA T   ;      192 / 208 = 236 ...
    SEC 
X7:     
    ROL A ;        129  C   
    SBC B ;        177  /
    ROL ANS ;           C     252
X6:     
    ROL A ;         99  C
    SBC B ;        147  /
    ROL ANS ;           C     248
X5:     
    ROL A ;         39  C
    SBC B ;         87  / 
    ROL ANS ;           C     240
X4:     
    ROL A ;         175 /
    SBC B ;         222 /
    ROL ANS ;           C     224
X3:     
    ROL A ;         189 C
    SBC B ;         237 /
    ROL ANS ;           C     192
X2:     
    ROL A ;         219 C   
    SBC B ;          11 C
    ROL ANS ;           C     129
X1:     
    ROL A ;          23 /
    SBC B ;          70 /
    ROL ANS ;           C       3
X0:     
    ROL A ;         141 /
    SBC B ;         188 /
    ROL ANS ;                   6


    ; 192 / 208 = 236 as fraction ... 
    ;              ACC   C    ANS
    ;              192   /
    STZ ANS  ;                 0
    LDA T   ;      192 / 208 = 236 ...
    CLC 
X7:     
    ROL A ;        128  C   
    SBC B ;        176  /
    ROL ANS ;           /       0
X6:     
    ROL A ;         96  C
    SBC B ;        144  /
    ROL ANS ;           0       0
X5:     
    ROL A ;         32  C
    SBC B ;         80  / 
    ROL ANS ;                   0
X4:     
    ROL A ;         160 /
    SBC B ;         207 /
    ROL ANS ;                   0
X3:     
    ROL A ;         158 C
    SBC B ;         206 /
    ROL ANS ;                   0
X2:     
    ROL A ;         156 C   
    SBC B ;         204 /
    ROL ANS ;           /       0
X1:     
    ROL A ;         152 C
    SBC B ;         200 /
    ROL ANS ;           /       0
X0:     
    ROL A ;         144 C
    SBC B ;         192 /
    ROL ANS ;           /       0

    ; 192 / 208 = 236 as fraction ... 
    ;              ACC   C    ANS
    ;              192   /
    STZ ANS  ;                 0
    ;      192 / 208 = 236 ...
    LDA B   ;       208   /     0
    EOR #$FF;        47
    CLC     ;
X8:
    ADC T   ;       239   /
    ROL ANS ;             /     0
    ASL A   ;       222   C
X8:
    ADC T   ;       159   C
    ROL ANS ;             /     1
    ASL A   ;        62   C
X8:
    ADC T   ;       255   /
    ROL ANS ;             /     2
    ASL A   ;       254   C
X8:
    ADC T   ;       191   C
    ROL ANS ;             /     5
    ASL A   ;       126   C
X8:
    ADC T   ;        63   C
    ROL ANS ;             /     11
    ASL A   ;


    ; 192 / 208 = 236 as fraction ... 
    ;              ACC   C    ANS
    ;              192   /
    STZ ANS  ;                 0
    ;      192 / 208 = 236 ...
    LDA B   ;       208   /     0
    EOR #$FF;        47
    TAX     ;
    CLC     ;

X8:
    ADC T   ;       239   /
    ROL ANS ;             /    0
    TXA     ;        47
    ASL A   ;        94   /
    TAX     ;   94
X7:
    ADC T   ;        30  C
    ROL ANS ;            /     1
    TXA     ;         94
    ASL A   ;        188
    TAX     ;
X6:
    ADC T   ;        125 C
    ROL ANS ;            /     3
    TXA     ;   188
    ASL A   ;        120 C   
    TAX     ;
X5:
    ADC T   ;         57 C
    ROL ANS ;             /    7
    TXA     ;   120
    ASL A   ;        240 /
    TAX     ;
X4:
    ADC T   ;        176 C
    ROL ANS ;                 15
    TXA     ;   240
    ASL A   ;         224 C
    TAX     ;
X3:
    ADC T   ;         161 C
    ROL ANS ;             /   31
    TXA     ;   224
    ASL A   ;         192 C
    TAX     ;
X2:
    ADC T   ;         129 C
    ROL ANS ;             /   65
    TXA     ;   192
    ASL A   ;         128 C
    TAX     ;
X1:
    ADC T   ;          65 C
    ROL ANS ;             /   131
    TXA     ;   128
    ASL A   ;           0 C
    TAX     ;
X0:
    ADC T   ;         
    ROL ANS ; 
    TXA     ;
    ASL A   ;
    TAX     ;


X8:
    ADC T   ;        
    ROL ANS ;       
    ASL A   ;
X8:
    ADC T   ;        
    ROL ANS ;       
    ASL A   ;
X8:
    ADC T   ;        
    ROL ANS ;       
    ASL A   ;
X8:
    ADC T   ;        
    ROL ANS ;       
    ASL A   ;
X8:
    ADC T   ;        
    ROL ANS ;       
    ASL A   ;


SIMPLE_DIVIDE_FRACTIONAL:
    ;                                     C            T      B      
    ;                                                 64    128
    LDA TH    ; 3   10                                                                
    ; LDX #8 ... 
    CLC   ; ASL TLQ   set to eqiv         /
    ;                       ACC   C
    ;                        64   /
  X8:
      ROL A ;                  
      SBC B ;  
  X7:
      ROL A ;                  
      SBC B ;  
  X6:
      ROL A ;                  
      SBC B ;  
  X5:
      ROL A ;                  
      SBC B ;  
  X4:
      ROL A ;                  
      SBC B ;  
  X3:
      ROL A ;                  
      SBC B ;  
  X2:
      ROL A ;                  
      SBC B ;  
  X1:
      ROL A ;                  
SIMPLE_DIVIDE_FRACTIONAL:
    ;                                     C            T      B      
    ;                                                 64    128
    LDA TH    ; 3   10                                                                
    ; LDX #8 ... 
    CLC   ; ASL TLQ   set to eqiv         /
    ;                       ACC   C
    ;                        64   /
  X8:
      ROL A ;                  
      SBC B ;  
  X7:
      ROL A ;                  
      SBC B ;  
  X6:
      ROL A ;                  
      SBC B ;  
  X5:
      ROL A ;                  
      SBC B ;  
  X4:
      ROL A ;                  
      SBC B ;  
  X3:
      ROL A ;                  
      SBC B ;  
  X2:
      ROL A ;                  
      SBC B ;  
  X1:
      ROL A ;                  
SIMPLE_DIVIDE_FRACTIONAL:
    ;                                     C            T      B      
    ;                                                 64    128
    LDA TH    ; 3   10                                                                
    ; LDX #8 ... 
    CLC   ; ASL TLQ   set to eqiv         /
    ;                       ACC   C
    ;                        64   /
  X8:
      ROL A ;                  
      SBC B ;  
  X7:
      ROL A ;                  
      SBC B ;  
  X6:
      ROL A ;                  
      SBC B ;  
  X5:
      ROL A ;                  
      SBC B ;  
  X4:
      ROL A ;                  
      SBC B ;  
  X3:
      ROL A ;                  
      SBC B ;  
  X2:
      ROL A ;                  
      SBC B ;  
  X1:
      ROL A ;                  
SIMPLE_DIVIDE_FRACTIONAL:
    ;                                     C            T      B      
    ;                                                 64    128
    LDA TH    ; 3   10                                                                
    ; LDX #8 ... 
    CLC   ; ASL TLQ   set to eqiv         /
    ;                       ACC   C
    ;                        64   /
  X8:
      ROL A ;                  
      SBC B ;  
  X7:
      ROL A ;                  
      SBC B ;  
  X6:
      ROL A ;                  
      SBC B ;  
  X5:
      ROL A ;                  
      SBC B ;  
  X4:
      ROL A ;                  
      SBC B ;  
  X3:
      ROL A ;                  
      SBC B ;  
  X2:
      ROL A ;                  
      SBC B ;  
  X1:
      ROL A ;                  
SIMPLE_DIVIDE_FRACTIONAL:
    ;                                     C            T      B      
    ;                                                 64    128
    LDA TH    ; 3   10                                                                
    ; LDX #8 ... 
    CLC   ; ASL TLQ   set to eqiv         /
    ;                       ACC   C
    ;                        64   /
  X8:
      ROL A ;                  
      SBC B ;  
  X7:
      ROL A ;                  
      SBC B ;  
  X6:
      ROL A ;                  
      SBC B ;  
  X5:
      ROL A ;                  
      SBC B ;  
  X4:
      ROL A ;                  
      SBC B ;  
  X3:
      ROL A ;                  
      SBC B ;  
  X2:
      ROL A ;                  
      SBC B ;  
  X1:
      ROL A ;                  
SIMPLE_DIVIDE_FRACTIONAL:
    ;                                     C            T      B      
    ;                                                 64    128
    LDA TH    ; 3   10                                                                
    ; LDX #8 ... 
    CLC   ; ASL TLQ   set to eqiv         /
    ;                       ACC   C
    ;                        64   /
  X8:
      ROL A ;                  
      SBC B ;  
  X7:
      ROL A ;                  
      SBC B ;  
  X6:
      ROL A ;                  
      SBC B ;  
  X5:
      ROL A ;                  
      SBC B ;  
  X4:
      ROL A ;                  
      SBC B ;  
  X3:
      ROL A ;                  
      SBC B ;  
  X2:
      ROL A ;                  
      SBC B ;  
  X1:
      ROL A ;                  
SIMPLE_DIVIDE_FRACTIONAL:
    ;                                     C            T      B      
    ;                                                 64    128
    LDA TH    ; 3   10                                                                
    ; LDX #8 ... 
    CLC   ; ASL TLQ   set to eqiv         /
    ;                       ACC   C
    ;                        64   /
  X8:
      ROL A ;                  
      SBC B ;  
  X7:
      ROL A ;                  
      SBC B ;  
  X6:
      ROL A ;                  
      SBC B ;  
  X5:
      ROL A ;                  
      SBC B ;  
  X4:
      ROL A ;                  
      SBC B ;  
  X3:
      ROL A ;                  
      SBC B ;  
  X2:
      ROL A ;                  
      SBC B ;  
  X1:
      ROL A ;                  
SIMPLE_DIVIDE_FRACTIONAL:
    ;                                     C            T      B      
    ;                                                 64    128
    LDA TH    ; 3   10                                                                
    ; LDX #8 ... 
    CLC   ; ASL TLQ   set to eqiv         /
    ;                       ACC   C
    ;                        64   /
  X8:
      ROL A ;                  
      SBC B ;  
  X7:
      ROL A ;                  
      SBC B ;  
  X6:
      ROL A ;                  
      SBC B ;  
  X5:
      ROL A ;                  
      SBC B ;  
  X4:
      ROL A ;                  
      SBC B ;  
  X3:
      ROL A ;                  
      SBC B ;  
  X2:
      ROL A ;                  
      SBC B ;  
  X1:
      ROL A ;                  
SIMPLE_DIVIDE_FRACTIONAL:
    ;                                     C            T      B      
    ;                                                 64    128
    LDA TH    ; 3   10                                                                
    ; LDX #8 ... 
    CLC   ; ASL TLQ   set to eqiv         /
    ;                       ACC   C
    ;                        64   /
  X8:
      ROL A ;                  
      SBC B ;  
  X7:
      ROL A ;                  
      SBC B ;  
  X6:
      ROL A ;                  
      SBC B ;  
  X5:
      ROL A ;                  
      SBC B ;  
  X4:
      ROL A ;                  
      SBC B ;  
  X3:
      ROL A ;                  
      SBC B ;  
  X2:
      ROL A ;                  
      SBC B ;  
  X1:
      ROL A ;                  
SIMPLE_DIVIDE_FRACTIONAL:
    ;                                     C            T      B      
    ;                                                 64    128
    LDA TH    ; 3   10                                                                
    ; LDX #8 ... 
    CLC   ; ASL TLQ   set to eqiv         /
    ;                       ACC   C
    ;                        64   /
  X8:
      ROL A ;                  
      SBC B ;  
  X7:
      ROL A ;                  
      SBC B ;  
  X6:
      ROL A ;                  
      SBC B ;  
  X5:
      ROL A ;                  
      SBC B ;  
  X4:
      ROL A ;                  
      SBC B ;  
  X3:
      ROL A ;                  
      SBC B ;  
  X2:
      ROL A ;                  
      SBC B ;  
  X1:
      ROL A ;                  
SIMPLE_DIVIDE_FRACTIONAL:
    ;                                     C            T      B      
    ;                                                 64    128
    LDA TH    ; 3   10                                                                
    ; LDX #8 ... 
    CLC   ; ASL TLQ   set to eqiv         /
    ;                       ACC   C
    ;                        64   /
  X8:
      ROL A ;                  
      SBC B ;  
  X7:
      ROL A ;                  
      SBC B ;  
  X6:
      ROL A ;                  
      SBC B ;  
  X5:
      ROL A ;                  
      SBC B ;  
  X4:
      ROL A ;                  
      SBC B ;  
  X3:
      ROL A ;                  
      SBC B ;  
  X2:
      ROL A ;                  
      SBC B ;  
  X1:
      ROL A ;                  
SIMPLE_DIVIDE_FRACTIONAL:
    ;                                     C            T      B      
    ;                                                 64    128
    LDA TH    ; 3   10                                                                
    ; LDX #8 ... 
    CLC   ; ASL TLQ   set to eqiv         /
    ;                       ACC   C
    ;                        64   /
  X8:
      ROL A ;                  
      SBC B ;  
  X7:
      ROL A ;                  
      SBC B ;  
  X6:
      ROL A ;                  
      SBC B ;  
  X5:
      ROL A ;                  
      SBC B ;  
  X4:
      ROL A ;                  
      SBC B ;  
  X3:
      ROL A ;                  
      SBC B ;  
  X2:
      ROL A ;                  
      SBC B ;  
  X1:
      ROL A ;                  
SIMPLE_DIVIDE_FRACTIONAL:
    ;                                     C            T      B      
    ;                                                 64    128
    LDA TH    ; 3   10                                                                
    ; LDX #8 ... 
    CLC   ; ASL TLQ   set to eqiv         /
    ;                       ACC   C
    ;                        64   /
  X8:
      ROL A ;                  
      SBC B ;  
  X7:
      ROL A ;                  
      SBC B ;  
  X6:
      ROL A ;                  
      SBC B ;  
  X5:
      ROL A ;                  
      SBC B ;  
  X4:
      ROL A ;                  
      SBC B ;  
  X3:
      ROL A ;                  
      SBC B ;  
  X2:
      ROL A ;                  
      SBC B ;  
  X1:
      ROL A ;                  
SIMPLE_DIVIDE_FRACTIONAL:
    ;                                     C            T      B      
    ;                                                 64    128
    LDA TH    ; 3   10                                                                
    ; LDX #8 ... 
    CLC   ; ASL TLQ   set to eqiv         /
    ;                       ACC   C
    ;                        64   /
  X8:
      ROL A ;                  
      SBC B ;  
  X7:
      ROL A ;                  
      SBC B ;  
  X6:
      ROL A ;                  
      SBC B ;  
  X5:
      ROL A ;                  
      SBC B ;  
  X4:
      ROL A ;                  
      SBC B ;  
  X3:
      ROL A ;                  
      SBC B ;  
  X2:
      ROL A ;                  
      SBC B ;  
  X1:
      ROL A ;                  
