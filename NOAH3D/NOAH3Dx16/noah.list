ca65 V2.19 - Git 8e6c0c1
Main file   : noah.asm
Current file: noah.asm

000000r 1               .org $080D
00080D  1               .segment "STARTUP"
00080D  1               .segment "INIT"
00080D  1               .segment "ONCE"
00080D  1               .segment "CODE"
00080D  1               
00080D  1  4C 5B 15       jmp start
000810  1               ; RAM Interrupt Vectors
000810  1               IRQVec            = $0314
000810  1               
000810  1               ; VERA
000810  1               VERA_addr_low     = $9F20
000810  1               VERA_addr_high    = $9F21
000810  1               VERA_addr_bank    = $9F22
000810  1               VERA_data0        = $9F23
000810  1               VERA_data1        = $9F24
000810  1               VERA_ctrl         = $9F25
000810  1               VERA_ien          = $9F26
000810  1               VERA_isr          = $9F27
000810  1               VERA_dc_video     = $9F29 ; DCSEL = 0
000810  1               ;   Current Field | Sprites Enable | Layer1 Enable  |Layer0 Enable
000810  1               ; NTSC/RGB: 240P  | NTSC: Chroma Disable / RGB: HV Sync Output Mode
000810  1               
000810  1               VERA_dc_hscale    = $9F2A
000810  1               VERA_dc_vscale    = $9F2B
000810  1               
000810  1               VERA_L0_config    = $9F2D
000810  1               ;   7       6     5   4       3       2             1   0
000810  1               ;   Map Height | Map Width | T256C | Bitmap Mode | Color Depth
000810  1               ;   0 - 32                  0 - 16    0 tiled       0   1bpp mono
000810  1               ;   1 - 64                  1 - 256   1 enabled     1   2bpp 4 color
000810  1               ;   2 - 128                                         2   4bpp 16 color
000810  1               ;   3 - 256                                         3   8bpp 256 color
000810  1               ;   bitmap mode - tilebase points to bitmap data, mapbase not used
000810  1               ;   tile width = 0 is 320 pixels / tile width=1 is 640 pixels.. so could do 4bpp x 320?
000810  1               ;   The palette offset (in 'H-Scroll (11:8)') modifies the color indexes of the bitmap in the same way as in the tile modes.
000810  1               
000810  1               VERA_L0_mapbase   = $9F2E
000810  1               VERA_L0_tilebase  = $9F2F ;   Tile Base Address (16:11) | Tile Height 0-8/1-16 | Tile Width 0-8/1-16
000810  1               VERA_L0_HSCROLL_L = $9F30 ;  H-Scroll (7:0)
000810  1               VERA_L0_HSCROLL_H = $9F31 ;  - H-Scroll (11:8)
000810  1               VERA_L0_VSCROLL_L = $9F32 ;  V-Scroll (7:0)
000810  1               VERA_L0_VSCROLL_H = $9F33 ;  - V-Scroll (11:8)
000810  1               
000810  1               VERA_L1_config    = $9F34
000810  1               VERA_L1_mapbase   = $9F35
000810  1               VERA_L1_tilebase  = $9F36
000810  1               VERA_L1_HSCROLL_L = $9F37 ;  H-Scroll (7:0)
000810  1               VERA_L1_HSCROLL_H = $9F38 ;  - H-Scroll (11:8)
000810  1               VERA_L1_VSCROLL_L = $9F39 ;  V-Scroll (7:0)
000810  1               VERA_L1_VSCROLL_H = $9F3A ;  - V-Scroll (11:8)
000810  1               
000810  1               VERA_FX_TILEBASE = $9F2A
000810  1               VERA_FX_MAPBASE = $9F2B
000810  1               
000810  1               VERA_FX_X_INC_L = $9F29
000810  1               VERA_FX_X_INC_H = $9F2A
000810  1               VERA_FX_Y_INC_L = $9F2B
000810  1               VERA_FX_Y_INC_H = $9F2C
000810  1               
000810  1               VERA_FX_X_POS_L = $9F29
000810  1               VERA_FX_X_POS_H = $9F2A
000810  1               VERA_FX_Y_POS_L = $9F2B
000810  1               VERA_FX_Y_POS_H = $9F2C
000810  1               
000810  1               VSYNC_BIT         = $01
000810  1               
000810  1               ; VRAM Addresses
000810  1               ;   Address range Description
000810  1               ;   $00000 - $1F9BF Video RAM   - 129,424 bytes -> 126K is 129,024 (1F800)
000810  1               ;   $1F9C0 - $1F9FF PSG registers
000810  1               ;   $1FA00 - $1FBFF Palette
000810  1               ;   $1FC00 - $1FFFF Sprite attributes
000810  1               
000810  1               ; video output scaling to 320x161 ( 40 x 20 (mod8=1) 8x8 tiles)
000810  1               VRAM_layer0_bitmapA  = $00000 ;  really visible area starts $00500 - 1.25K down...
000810  1                                             ; 320x120 for viewport is 37.5K - so viewA            1.25K   38.75K
000810  1                                             ; this needs to be on 2K boundary..
000810  1               VRAM_layer0_bitmapA_start = $00500
000810  1               
000810  1               ;   512 bytes slack here...
000810  1               VRAM_layer0_bitmapB = $0A000 ;  viewB declares @38K to display starting 39.25 to 76.75  39.25   76.75
000810  1               VRAM_layer0_bitmapB_start = $0A500
000810  1               ;   256 bytes slack here...
000810  1               VRAM_layer1_map     = $13400 ;  using 8x8 8bit for HUD and stuff 64x21x2=2688b declare at 77k     77k   80k
000810  1               VRAM_layer1_tiles   = $14000 ;  border HUD and font stuff - maybe 256 tiles         16k     80k to  96k
000810  1               ; for testing this is initialized to use 1bit tile mode / 16 color
000810  1               
000810  1               
000810  1               ;20k currently unused..
000810  1               
000810  1               
000810  1               VRAM_floor_ceiling  = $1D000 ;  map/tile data for floor/ceiling...                  116k  116.5k
000810  1                                             ;wolf3d map was based on like 6 foot cubes?
000810  1                                             ; and floor on ships laid in 6,9,or 12 foot lengths..
000810  1                                             ; will do 8x56 with a repeated tile to get 8x64 .. so use 8x8 map = 64 bytes + 7 8x8 tiles = 512bytes
000810  1               floor_ceiling_map:
000810  1  01 01 04 03    .byte   1,1,4,3,1,1,4,3
000814  1  01 01 04 03  
000818  1  01 02 05 04    .byte   1,2,5,4,1,2,5,4
00081C  1  01 02 05 04  
000820  1  02 03 06 05    .byte   2,3,6,5,2,3,6,5
000824  1  02 03 06 05  
000828  1  03 04 07 06    .byte   3,4,7,6,3,4,7,6
00082C  1  03 04 07 06  
000830  1  04 05 01 07    .byte   4,5,1,7,4,5,1,7
000834  1  04 05 01 07  
000838  1  05 06 01 01    .byte   5,6,1,1,6,5,1,1
00083C  1  06 05 01 01  
000840  1  06 07 02 01    .byte   6,7,2,1,6,7,2,1
000844  1  06 07 02 01  
000848  1  07 01 03 02    .byte   7,1,3,2,7,1,3,2
00084C  1  07 01 03 02  
000850  1               .include "floor_ceiling_8x56.inc"
000850  2  20 22 29 22    .byte 32, 34, 41, 34, 41, 34, 41, 34, 68, 41, 68, 34, 68, 9, 68, 34, 32, 68, 41, 34, 41, 34, 41, 34, 68, 41, 68, 9, 68, 34, 68, 9, 32, 41, 41, 34, 41, 34, 41, 34, 68, 41, 68, 34, 68, 9, 68, 34, 32, 68, 41, 34, 41, 34, 41, 34, 68, 68, 68, 41, 68, 34, 68, 9 ; 0,0: tile 0
000854  2  29 22 29 22  
000858  2  44 29 44 22  
000890  2  20 44 29 44    .byte 32, 68, 41, 68, 41, 34, 41, 34, 68, 41, 68, 41, 68, 9, 68, 34, 32, 68, 41, 41, 41, 34, 41, 34, 68, 41, 68, 41, 68, 34, 68, 34, 32, 41, 9, 68, 41, 34, 41, 34, 68, 41, 34, 41, 68, 9, 68, 34, 32, 68, 41, 68, 41, 34, 41, 34, 68, 41, 68, 41, 68, 34, 68, 9 ; 0,1: tile 1
000894  2  29 22 29 22  
000898  2  44 29 44 29  
0008D0  2  20 29 29 44    .byte 32, 41, 41, 68, 9, 41, 41, 34, 68, 41, 68, 41, 34, 41, 68, 34, 32, 68, 41, 34, 41, 68, 9, 34, 68, 68, 68, 9, 68, 41, 34, 41, 32, 41, 9, 34, 41, 34, 9, 68, 68, 41, 34, 41, 68, 9, 34, 68, 32, 34, 9, 68, 41, 34, 41, 68, 68, 34, 68, 41, 34, 34, 68, 41 ; 0,2: tile 2
0008D4  2  09 29 29 22  
0008D8  2  44 29 44 29  
000910  2  20 29 29 44    .byte 32, 41, 41, 68, 9, 41, 41, 68, 68, 41, 68, 34, 68, 41, 68, 68, 32, 68, 9, 41, 41, 68, 41, 68, 68, 34, 68, 41, 68, 68, 68, 41, 32, 41, 41, 68, 41, 68, 41, 34, 68, 41, 68, 68, 68, 41, 68, 34, 32, 68, 41, 68, 41, 68, 41, 34, 68, 68, 68, 68, 68, 41, 68, 9 ; 0,3: tile 3
000914  2  09 29 29 44  
000918  2  44 29 44 22  
000950  2  20 44 29 44    .byte 32, 68, 41, 68, 41, 41, 9, 68, 68, 41, 68, 41, 68, 9, 68, 68, 32, 68, 41, 41, 41, 68, 41, 68, 68, 41, 34, 41, 68, 68, 68, 41, 32, 34, 9, 68, 41, 68, 41, 68, 68, 9, 68, 68, 68, 41, 68, 68, 32, 68, 41, 68, 41, 68, 41, 41, 68, 41, 68, 41, 68, 41, 34, 41 ; 0,4: tile 4
000954  2  29 29 09 44  
000958  2  44 29 44 29  
000990  2  20 29 29 44    .byte 32, 41, 41, 68, 41, 41, 9, 34, 68, 41, 68, 41, 68, 41, 68, 34, 32, 68, 41, 41, 41, 68, 41, 68, 68, 68, 68, 9, 68, 41, 68, 41, 32, 68, 41, 68, 9, 41, 41, 68, 68, 41, 68, 41, 34, 9, 68, 41, 32, 68, 41, 68, 9, 34, 9, 34, 68, 68, 68, 68, 68, 41, 34, 41 ; 0,5: tile 5
000994  2  29 29 09 22  
000998  2  44 29 44 29  
0009D0  2  20 44 28 19    .byte 32, 68, 40, 25, 12, 68, 9, 68, 68, 41, 68, 22, 20, 40, 68, 68, 32, 68, 41, 40, 40, 68, 41, 68, 68, 32, 68, 32, 68, 32, 68, 32, 32, 34, 9, 68, 40, 41, 41, 34, 68, 9, 68, 25, 22, 40, 68, 68, 32, 34, 40, 22, 20, 68, 41, 68, 68, 34, 34, 68, 68, 34, 68, 9 ; 0,6: tile 6
0009D4  2  0C 44 09 44  
0009D8  2  44 29 44 16  
000A10  2               
000A10  1               
000A10  1               
000A10  1               VRAM_weapon_sprite  = $1D800 ; 64x64 8bit color for now .. prob go to 16 color..    118k
000A10  1               VRAM_cursor_sprite  = $1E7C0 ; 8x8 256 color sprite to make a cursor to track... stealing bottom line of weapon sprite... hehe
000A10  1               VRAM_MAP_SPRITE     = $1E800 ; space for 256 color 64x64 sprite for HUD/map ..      122k  126k
000A10  1               VRAM_UNRESERVED     = $1A000 ; 126K+ used for palette/sprites, so 108K-126K=18K available for hud/effects stuffs..
000A10  1               ; sprite starts must be 32byte aligned...
000A10  1               ; only can go to 126K ...
000A10  1               VRAM_palette      = $1FA00      ;
000A10  1               VRAM_SPRITE_LIST  = $1FC00
000A10  1               BITMAP_PAL_OFFSET = 0
000A10  1               
000A10  1               ; constants
000A10  1               MODE_BITMAP_256BPP = $07
000A10  1               MODE_BITMAP_16BPP  = $06
000A10  1               MODE_TILE_64_WIDE = $10
000A10  1               MODE_T256C = $0D
000A10  1               MODE_128x64_T16C = $60 ; 128x64, 16-color text
000A10  1               MODE_128x64_T256C = $68 ; 128x64, 256-color text
000A10  1               MODE_64x32_T256C = $18
000A10  1               MODE_64x32_T16C  = $10
000A10  1               MODE_32x32_256BPP = $03
000A10  1               MODE_32x32_T16C   = $00
000A10  1               LAYER0_ONLY       = $11
000A10  1               LAYER01_ENABLE    = $31
000A10  1               LAYER1_ONLY       = $21
000A10  1               LAYER01SPRITES_ENABLE = $71
000A10  1               LAYERSPRITES_ONLY = $41
000A10  1               VRAM_bitmap       = $04000
000A10  1               LOWER_UPPER       = $C400
000A10  1               
000A10  1               ; ROM Banks
000A10  1               ROM_BANK          = $01
000A10  1               BASIC_BANK        = 4
000A10  1               CHARSET_BANK      = 6
000A10  1               RAM_BANK          = $00
000A10  1               KERNAL_RAM_BANK   = $00
000A10  1               
000A10  1               MAP_RAM_BANK      = $01
000A10  1               BANKED_RAM_HIGH   = $A0
000A10  1               
000A10  1               ; Kernal
000A10  1               CHROUT            = $FFD2
000A10  1               GETIN             = $FFE4
000A10  1               CINT              = $FF81
000A10  1               
000A10  1               ; PETSCII Codes
000A10  1               WHITE             = $05
000A10  1               RETURN            = $0D
000A10  1               SPACE             = $20
000A10  1               ZERO_CHAR         = $30
000A10  1               SIX_CHAR          = $36
000A10  1               NINE_CHAR         = $39
000A10  1               C_CHAR            = $43
000A10  1               I_CHAR            = $49
000A10  1               O_CHAR            = $4F
000A10  1               T_CHAR            = $54
000A10  1               CLR               = $93
000A10  1               CHAR_UP           = $91
000A10  1               CHAR_DOWN         = $11
000A10  1               CHAR_LEFT         = $9D
000A10  1               CHAR_RIGHT        = $1D
000A10  1               
000A10  1               ; global data
000A10  1               
000A10  1  00 00        default_irq_vector:  .addr 0
000A12  1  01           VSYNC_counter:       .byte 1
000A13  1               ZP_PTR = $22
000A13  1               
000A13  1               cursor_data:
000A13  1  01 01 01 01    .byte   $1,$1,$1,$1,$1,$0,$0,$0
000A17  1  01 00 00 00  
000A1B  1  01 00 01 00    .byte   $1,$0,$1,$0,$1,$0,$0,$0
000A1F  1  01 00 00 00  
000A23  1  01 01 00 01    .byte   $1,$1,$0,$1,$1,$0,$0,$0
000A27  1  01 00 00 00  
000A2B  1  01 00 01 00    .byte   $1,$0,$1,$0,$1,$0,$0,$0
000A2F  1  01 00 00 00  
000A33  1  01 01 01 01    .byte   $1,$1,$1,$1,$1,$0,$0,$0
000A37  1  01 00 00 00  
000A3B  1  00 00 00 00    .byte   $0,$0,$0,$0,$0,$0,$0,$0
000A3F  1  00 00 00 00  
000A43  1  00 00 00 00    .byte   $0,$0,$0,$0,$0,$0,$0,$0
000A47  1  00 00 00 00  
000A4B  1  00 00 00 00    .byte   $0,$0,$0,$0,$0,$0,$0,$0
000A4F  1  00 00 00 00  
000A53  1               
000A53  1               test_tiles:
000A53  1  00             .byte   %00000000                 ; 0
000A54  1  3C             .byte   %00111100
000A55  1  42             .byte   %01000010
000A56  1  42             .byte   %01000010
000A57  1  42             .byte   %01000010
000A58  1  42             .byte   %01000010
000A59  1  3C             .byte   %00111100
000A5A  1  00             .byte   %00000000
000A5B  1               
000A5B  1  00             .byte   %00000000                 ; 1
000A5C  1  18             .byte   %00011000
000A5D  1  28             .byte   %00101000
000A5E  1  08             .byte   %00001000
000A5F  1  08             .byte   %00001000
000A60  1  48             .byte   %01001000
000A61  1  7E             .byte   %01111110
000A62  1  00             .byte   %00000000
000A63  1               
000A63  1  00             .byte   %00000000                 ; 2
000A64  1  3C             .byte   %00111100
000A65  1  6E             .byte   %01101110
000A66  1  1C             .byte   %00011100
000A67  1  70             .byte   %01110000
000A68  1  70             .byte   %01110000
000A69  1  7E             .byte   %01111110
000A6A  1  00             .byte   %00000000
000A6B  1               
000A6B  1  00             .byte   %00000000                 ; 3
000A6C  1  3C             .byte   %00111100
000A6D  1  46             .byte   %01000110
000A6E  1  1C             .byte   %00011100
000A6F  1  04             .byte   %00000100
000A70  1  46             .byte   %01000110
000A71  1  3C             .byte   %00111100
000A72  1  11             .byte   %00010001
000A73  1               
000A73  1  00             .byte   %00000000                 ; 4
000A74  1  44             .byte   %01000100
000A75  1  44             .byte   %01000100
000A76  1  7C             .byte   %01111100
000A77  1  0C             .byte   %00001100
000A78  1  0C             .byte   %00001100
000A79  1  0C             .byte   %00001100
000A7A  1  10             .byte   %00010000
000A7B  1               
000A7B  1  20             .byte   %00100000                 ; 5
000A7C  1  7C             .byte   %01111100
000A7D  1  40             .byte   %01000000
000A7E  1  7C             .byte   %01111100
000A7F  1  04             .byte   %00000100
000A80  1  44             .byte   %01000100
000A81  1  3C             .byte   %00111100
000A82  1  10             .byte   %00010000
000A83  1               
000A83  1  00             .byte   %00000000                 ; 6
000A84  1  3C             .byte   %00111100
000A85  1  42             .byte   %01000010
000A86  1  70             .byte   %01110000
000A87  1  44             .byte   %01000100
000A88  1  74             .byte   %01110100
000A89  1  3C             .byte   %00111100
000A8A  1  10             .byte   %00010000
000A8B  1               
000A8B  1  00             .byte   %00000000                 ; 7
000A8C  1  7E             .byte   %01111110
000A8D  1  7E             .byte   %01111110
000A8E  1  0C             .byte   %00001100
000A8F  1  18             .byte   %00011000
000A90  1  34             .byte   %00110100
000A91  1  60             .byte   %01100000
000A92  1  10             .byte   %00010000
000A93  1               
000A93  1  00             .byte   %00000000                 ; 8
000A94  1  7C             .byte   %01111100
000A95  1  42             .byte   %01000010
000A96  1  3C             .byte   %00111100
000A97  1  42             .byte   %01000010
000A98  1  42             .byte   %01000010
000A99  1  7C             .byte   %01111100
000A9A  1  10             .byte   %00010000
000A9B  1               
000A9B  1  20             .byte   %00100000                 ; 9
000A9C  1  7C             .byte   %01111100
000A9D  1  7E             .byte   %01111110
000A9E  1  7E             .byte   %01111110
000A9F  1  1C             .byte   %00011100
000AA0  1  74             .byte   %01110100
000AA1  1  7E             .byte   %01111110
000AA2  1  11             .byte   %00010001
000AA3  1               
000AA3  1  20             .byte   %00100000                 ; A
000AA4  1  7C             .byte   %01111100
000AA5  1  7E             .byte   %01111110
000AA6  1  1C             .byte   %00011100
000AA7  1  7E             .byte   %01111110
000AA8  1  74             .byte   %01110100
000AA9  1  7E             .byte   %01111110
000AAA  1  11             .byte   %00010001
000AAB  1               
000AAB  1  20             .byte   %00100000                 ; B
000AAC  1  7C             .byte   %01111100
000AAD  1  7E             .byte   %01111110
000AAE  1  7E             .byte   %01111110
000AAF  1  1C             .byte   %00011100
000AB0  1  74             .byte   %01110100
000AB1  1  7E             .byte   %01111110
000AB2  1  11             .byte   %00010001
000AB3  1               
000AB3  1  20             .byte   %00100000                 ; C
000AB4  1  7C             .byte   %01111100
000AB5  1  7E             .byte   %01111110
000AB6  1  7E             .byte   %01111110
000AB7  1  1C             .byte   %00011100
000AB8  1  74             .byte   %01110100
000AB9  1  7E             .byte   %01111110
000ABA  1  11             .byte   %00010001
000ABB  1               
000ABB  1  20             .byte   %00100000                 ; D
000ABC  1  7C             .byte   %01111100
000ABD  1  7E             .byte   %01111110
000ABE  1  7E             .byte   %01111110
000ABF  1  1C             .byte   %00011100
000AC0  1  74             .byte   %01110100
000AC1  1  7E             .byte   %01111110
000AC2  1  11             .byte   %00010001
000AC3  1               
000AC3  1  20             .byte   %00100000                 ; E
000AC4  1  7C             .byte   %01111100
000AC5  1  7E             .byte   %01111110
000AC6  1  7E             .byte   %01111110
000AC7  1  1C             .byte   %00011100
000AC8  1  74             .byte   %01110100
000AC9  1  7E             .byte   %01111110
000ACA  1  11             .byte   %00010001
000ACB  1               
000ACB  1  20             .byte   %00100000                 ; F
000ACC  1  7C             .byte   %01111100
000ACD  1  7E             .byte   %01111110
000ACE  1  7E             .byte   %01111110
000ACF  1  1C             .byte   %00011100
000AD0  1  74             .byte   %01110100
000AD1  1  7E             .byte   %01111110
000AD2  1  11             .byte   %00010001
000AD3  1               
000AD3  1  00 00 00 00    .byte   $0,$0,$0,$0,$0,$0,$0,$0   ; $10   blank
000AD7  1  00 00 00 00  
000ADB  1               
000ADB  1               layer1_map:
000ADB  1  10 80 10 80  .incbin "hud_test_map.bin"
000ADF  1  10 80 10 80  
000AE3  1  10 80 10 80  
00155B  1               
00155B  1               .macro copy_bytes_to_vram_data0 ; ZP_PTR/+1 is source, x is *256 bytes to copy, x y a ZP_PTR+1 clobbered
00155B  1                   .local _copy
00155B  1                   .local _copy_byte
00155B  1                   ldy #0
00155B  1                   _copy:
00155B  1                     _copy_byte:
00155B  1                       lda (ZP_PTR),y
00155B  1                       sta VERA_data0
00155B  1                       iny
00155B  1                       bne _copy_byte
00155B  1                     inc ZP_PTR+1
00155B  1                     dex
00155B  1                     bne _copy
00155B  1               .endmacro
00155B  1               
00155B  1               start:
00155B  1               
00155B  1                 ; start of program - init globals
00155B  1  AD 14 03       lda IRQVec
00155E  1  8D 10 0A       sta default_irq_vector
001561  1  AD 15 03       lda IRQVec+1
001564  1  8D 11 0A       sta default_irq_vector+1
001567  1               
001567  1  9C 29 9F       stz VERA_dc_video   ; disable display
00156A  1  A9 40          lda #64 ; set screen scaling - 320 wide
00156C  1  8D 2A 9F       sta VERA_dc_hscale
00156F  1  A9 2B          lda #43 ; by 160 tall
001571  1  8D 2B 9F       sta VERA_dc_vscale
001574  1               
001574  1                 ; start by init VRAM data
001574  1  9C 25 9F       stz VERA_ctrl
001577  1               
001577  1                 ; init layer0 for use as 320 wide bitmap
001577  1  9C 20 9F       stz VERA_addr_low
00157A  1  A9 05          lda #>VRAM_layer0_bitmapA_start ;
00157C  1  8D 21 9F       sta VERA_addr_high
00157F  1  A9 10          lda #($10 | ^VRAM_layer0_bitmapA_start) ;
001581  1  8D 22 9F       sta VERA_addr_bank
001584  1  A2 78          ldx #120
001586  1  A9 00          lda #0
001588  1                 @clear_layer0_to_color:
001588  1  A0 A0            ldy #160
00158A  1                   @clear_320_byte_line:
00158A  1  8D 23 9F           sta VERA_data0
00158D  1  8D 23 9F           sta VERA_data0
001590  1  88                 dey
001591  1  D0 F7              bne @clear_320_byte_line
001593  1  1A               inc a
001594  1  CA               dex
001595  1  D0 F1            bne @clear_layer0_to_color
001597  1               
001597  1  9C 20 9F       stz VERA_addr_low
00159A  1  A9 05          lda #>VRAM_layer0_bitmapA_start ;
00159C  1  8D 21 9F       sta VERA_addr_high
00159F  1  A9 10          lda #($10 | ^VRAM_layer0_bitmapA_start) ;
0015A1  1  8D 22 9F       sta VERA_addr_bank
0015A4  1                 ; should zero it out out but for now drawing floor ceiling/floor data as test pattern
0015A4  1  A9 10          lda #<floor_ceiling_map
0015A6  1  85 22          sta ZP_PTR
0015A8  1  A9 08          lda #>floor_ceiling_map
0015AA  1  85 23          sta ZP_PTR+1
0015AC  1  A2 02          ldx #2
0015AE  1  A0 00 B1 22    copy_bytes_to_vram_data0
0015B2  1  8D 23 9F C8  
0015B6  1  D0 F8 E6 23  
0015BD  1               
0015BD  1                 ; layer 0 config
0015BD  1  A9 07          lda #MODE_BITMAP_256BPP
0015BF  1  8D 2D 9F       sta VERA_L0_config
0015C2  1  9C 2F 9F       stz VERA_L0_tilebase
0015C5  1  A9 0F          lda #$0f
0015C7  1  8D 32 9F       sta VERA_L0_VSCROLL_L
0015CA  1  A9 00          lda #$00
0015CC  1  8D 33 9F       sta VERA_L0_VSCROLL_H
0015CF  1               
0015CF  1  9C 30 9F       stz VERA_L0_HSCROLL_L
0015D2  1  9C 31 9F       stz VERA_L0_HSCROLL_H
0015D5  1               
0015D5  1                 ; init layer1 for hud testing...
0015D5  1  9C 20 9F       stz VERA_addr_low
0015D8  1  A9 40          lda #>VRAM_layer1_tiles ;
0015DA  1  8D 21 9F       sta VERA_addr_high
0015DD  1  A9 11          lda #($10 | ^VRAM_layer1_tiles) ;
0015DF  1  8D 22 9F       sta VERA_addr_bank
0015E2  1  A9 53          lda #<test_tiles
0015E4  1  85 22          sta ZP_PTR
0015E6  1  A9 0A          lda #>test_tiles
0015E8  1  85 23          sta ZP_PTR+1
0015EA  1  A2 01          ldx #1  ; really only need to copy 136 bytes but.. whatev
0015EC  1  A0 00 B1 22    copy_bytes_to_vram_data0
0015F0  1  8D 23 9F C8  
0015F4  1  D0 F8 E6 23  
0015FB  1               
0015FB  1  9C 20 9F       stz VERA_addr_low
0015FE  1  A9 34          lda #>VRAM_layer1_map ;
001600  1  8D 21 9F       sta VERA_addr_high
001603  1  A9 11          lda #($10 | ^VRAM_layer1_map) ;
001605  1  8D 22 9F       sta VERA_addr_bank
001608  1  A9 DB          lda #<layer1_map
00160A  1  85 22          sta ZP_PTR
00160C  1  A9 0A          lda #>layer1_map
00160E  1  85 23          sta ZP_PTR+1
001610  1  A2 0B          ldx #11   ; copy 21 rows * 128 bytes = 2,688 - ~11*256
001612  1  A0 00 B1 22    copy_bytes_to_vram_data0
001616  1  8D 23 9F C8  
00161A  1  D0 F8 E6 23  
001621  1               
001621  1                 ;layer 1 config
001621  1  A9 10          lda #MODE_64x32_T16C
001623  1  8D 34 9F       sta VERA_L1_config
001626  1  A9 9A          lda #(VRAM_layer1_map >> 9)
001628  1  8D 35 9F       sta VERA_L1_mapbase
00162B  1  A9 A0          lda #(VRAM_layer1_tiles>>9)
00162D  1  8D 36 9F       sta VERA_L1_tilebase
001630  1               
001630  1  A9 01          lda #1
001632  1  8D 3A 9F       sta VERA_L1_VSCROLL_H
001635  1  A9 04          lda #4
001637  1  8D 39 9F       sta VERA_L1_VSCROLL_L
00163A  1               
00163A  1                 ; initialize floor/ceiling stuff....
00163A  1  9C 20 9F       stz VERA_addr_low
00163D  1  A9 D0          lda #>VRAM_floor_ceiling
00163F  1  8D 21 9F       sta VERA_addr_high
001642  1  A9 11          lda  #($10 | ^VRAM_floor_ceiling)
001644  1  8D 21 9F       sta VERA_addr_high
001647  1  A9 10          lda #<floor_ceiling_map
001649  1  85 22          sta ZP_PTR
00164B  1  A9 08          lda #>floor_ceiling_map
00164D  1  85 23          sta ZP_PTR+1
00164F  1  A2 02          ldx #2
001651  1  A0 00 B1 22    copy_bytes_to_vram_data0
001655  1  8D 23 9F C8  
001659  1  D0 F8 E6 23  
001660  1               
001660  1               
001660  1                 ; enable layers and start drawing
001660  1                 ;stz VERA_ctrl
001660  1  A9 31          lda #LAYER01_ENABLE
001662  1                 ;lda #LAYER0_ONLY ; for testing
001662  1                 ;lda #LAYER1_ONLY
001662  1                 ;lda #LAYERSPRITES_ONLY
001662  1                 ;lda #LAYER01SPRITES_ENABLE
001662  1  8D 29 9F       sta VERA_dc_video
001665  1               
001665  1               
001665  1                 ; overwrite RAM IRQ vector with custom handler address
001665  1  78             sei ; disable IRQ while vector is changing
001666  1  A9 44          lda #<custom_irq_handler
001668  1  8D 14 03       sta IRQVec
00166B  1  A9 17          lda #>custom_irq_handler
00166D  1  8D 15 03       sta IRQVec+1
001670  1  A9 01          lda #VSYNC_BIT ; make VERA only generate VSYNC IRQs
001672  1  8D 26 9F       sta VERA_ien
001675  1  58             cli ; enable IRQ now that vector is properly set
001676  1  9C 12 0A        stz VSYNC_counter
001679  1               
001679  1               check_keyboard:
001679  1  CB              wai
00167A  1  AC 12 0A        ldy VSYNC_counter
00167D  1  F0 FA           beq check_keyboard
00167F  1  9C 12 0A        stz VSYNC_counter
001682  1  A9 02           lda #$2   ; we're going to put VSYNC counter between HUD and viewport..
001684  1  8D 20 9F        sta VERA_addr_low
001687  1  A9 3C           lda #>VRAM_layer1_map+8
001689  1  8D 21 9F        sta VERA_addr_high
00168C  1  A9 21           lda #($20 | ^VRAM_layer1_map) ;
00168E  1  8D 22 9F        sta VERA_addr_bank
001691  1  98              tya
001692  1  4A              lsr
001693  1  4A              lsr
001694  1  4A              lsr
001695  1  4A              lsr
001696  1  8D 23 9F        sta VERA_data0
001699  1  98              tya
00169A  1  29 0F           AND #$0F
00169C  1  8D 23 9F        sta VERA_data0
00169F  1                  ; poll keyboard for input once per vsync
00169F  1  20 E4 FF        jsr GETIN
0016A2  1  C9 00           cmp #0
0016A4  1  F0 D3           beq check_keyboard
0016A6  1  C9 20           cmp #SPACE
0016A8  1  F0 03           beq do_mode7_test
0016AA  1  4C 31 17        jmp do_cleanup
0016AD  1               
0016AD  1               do_mode7_test:
0016AD  1                  ;  add in mode7 draw thing here..
0016AD  1               
0016AD  1  64 22            stz ZP_PTR
0016AF  1  A9 05            lda #>VRAM_layer0_bitmapA_start ; start a bit of the ways downscreen for now
0016B1  1  85 23            sta ZP_PTR+1
0016B3  1  A9 10            lda #($10 | ^VRAM_layer0_bitmapA_start) ;
0016B5  1  85 24            sta ZP_PTR+2
0016B7  1               
0016B7  1                  ;  configure FX_ctrl
0016B7  1  A9 04           lda #%00000100    ; DCSEL=2, ADDRSEL=0
0016B9  1  8D 25 9F        sta VERA_ctrl
0016BC  1  9C 29 9F        stz VERA_dc_video
0016BF  1  A9 E8           lda #(VRAM_floor_ceiling >>9)
0016C1  1  8D 2A 9F        sta VERA_FX_TILEBASE
0016C4  1  1A              inc a ; add 1 to set FX tilemap size to 8x8
0016C5  1  8D 2B 9F        sta VERA_FX_MAPBASE
0016C8  1               
0016C8  1  A9 06           lda #%00000110    ; DCSEL=3, ADDRSEL=0
0016CA  1  8D 25 9F        sta VERA_ctrl
0016CD  1  9C 29 9F        stz VERA_FX_X_INC_L
0016D0  1  A9 02           lda #2 ; incrementing x by 1 each time
0016D2  1  8D 2A 9F        sta VERA_FX_X_INC_H
0016D5  1  9C 2B 9F        stz VERA_FX_Y_INC_L
0016D8  1  9C 2C 9F        stz VERA_FX_Y_INC_H
0016DB  1               
0016DB  1  A2 00           ldx #0
0016DD  1                  @draw_row:
0016DD  1  A9 06            lda #%00000110  ; DCSEL=3, ADDRSEL=0
0016DF  1  8D 25 9F         sta VERA_ctrl
0016E2  1  A5 24            lda ZP_PTR+2
0016E4  1  8D 22 9F         sta VERA_addr_bank
0016E7  1  A5 23            lda ZP_PTR+1
0016E9  1  8D 21 9F         sta VERA_addr_high
0016EC  1  A5 22            lda ZP_PTR
0016EE  1  8D 20 9F         sta VERA_addr_low
0016F1  1               
0016F1  1  A9 09            lda #%00001001   ; DCSEL=4, addrsel=0
0016F3  1  8D 25 9F         sta VERA_ctrl
0016F6  1  9C 29 9F         stz VERA_FX_X_POS_L
0016F9  1  9C 2A 9F         stz VERA_FX_X_POS_H
0016FC  1  8E 2B 9F         stx VERA_FX_Y_POS_L
0016FF  1  9C 2C 9F         stz VERA_FX_Y_POS_H
001702  1  A0 A0            ldy #160
001704  1                   @draw_2_pixel:
001704  1  AD 24 9F             lda VERA_data1
001707  1  8D 23 9F             sta VERA_data0
00170A  1  AD 24 9F             lda VERA_data1
00170D  1  AD 23 9F             lda VERA_data0
001710  1  88                   dey
001711  1  D0 F1                bne @draw_2_pixel
001713  1  18               clc
001714  1  A5 22            lda ZP_PTR
001716  1  69 40            adc #64
001718  1  85 22            sta ZP_PTR
00171A  1  A5 23            lda ZP_PTR+1
00171C  1  69 01            adc #1
00171E  1  85 23            sta ZP_PTR+1
001720  1  A5 24            lda ZP_PTR+2
001722  1  69 00            adc #0
001724  1  85 24            sta ZP_PTR+2
001726  1  E8               inx
001727  1  E0 78            cpx #120
001729  1  D0 B2            bne @draw_row
00172B  1  9C 25 9F        stz VERA_ctrl ; clear fX mode
00172E  1               
00172E  1  4C 79 16        jmp check_keyboard
001731  1               
001731  1               do_cleanup:
001731  1                  ; restore default IRQ vector
001731  1  78              sei
001732  1  AD 10 0A        lda default_irq_vector
001735  1  8D 14 03        sta IRQVec
001738  1  AD 11 0A        lda default_irq_vector+1
00173B  1  8D 15 03        sta IRQVec+1
00173E  1  58              cli
00173F  1  20 81 FF        jsr CINT
001742  1  60              rts
001743  1  60             rts
001744  1               
001744  1               custom_irq_handler:
001744  1  AD 27 9F        lda VERA_isr
001747  1  29 01           and #VSYNC_BIT
001749  1  F0 03           beq @continue ; non-VSYNC IRQ, no tick update
00174B  1  EE 12 0A        inc VSYNC_counter
00174E  1               
00174E  1               @continue:
00174E  1                  ; continue to default IRQ handler
00174E  1  6C 10 0A        jmp (default_irq_vector)
001751  1                  ; RTI will happen after jump
001751  1               
001751  1               
001751  1               
001751  1               
